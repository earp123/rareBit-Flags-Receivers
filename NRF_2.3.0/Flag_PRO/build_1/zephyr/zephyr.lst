
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_table>:
    c200:	40 9d 00 20 0d 5b 02 00 13 87 03 00 e1 5a 02 00     @.. .[.......Z..
    c210:	e1 5a 02 00 e1 5a 02 00 e1 5a 02 00 00 00 00 00     .Z...Z...Z......
	...
    c22c:	89 55 02 00 e1 5a 02 00 00 00 00 00 31 55 02 00     .U...Z......1U..
    c23c:	e1 5a 02 00                                         .Z..

0000c240 <_irq_vector_table>:
    c240:	39 56 02 00 2f ab 03 00 39 56 02 00 39 56 02 00     9V../...9V..9V..
    c250:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c260:	f7 aa 03 00 39 56 02 00 39 56 02 00 15 ab 03 00     ....9V..9V......
    c270:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c280:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c290:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c2a0:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c2b0:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c2c0:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c2d0:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c2e0:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..
    c2f0:	39 56 02 00 39 56 02 00 39 56 02 00 39 56 02 00     9V..9V..9V..9V..

Disassembly of section text:

0000c300 <__aeabi_uldivmod>:
    c300:	b953      	cbnz	r3, c318 <__aeabi_uldivmod+0x18>
    c302:	b94a      	cbnz	r2, c318 <__aeabi_uldivmod+0x18>
    c304:	2900      	cmp	r1, #0
    c306:	bf08      	it	eq
    c308:	2800      	cmpeq	r0, #0
    c30a:	bf1c      	itt	ne
    c30c:	f04f 31ff 	movne.w	r1, #4294967295
    c310:	f04f 30ff 	movne.w	r0, #4294967295
    c314:	f000 b80c 	b.w	c330 <__aeabi_idiv0>
    c318:	f1ad 0c08 	sub.w	ip, sp, #8
    c31c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c320:	f011 fd6e 	bl	1de00 <__udivmoddi4>
    c324:	f8dd e004 	ldr.w	lr, [sp, #4]
    c328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c32c:	b004      	add	sp, #16
    c32e:	4770      	bx	lr

0000c330 <__aeabi_idiv0>:
    c330:	4770      	bx	lr
    c332:	bf00      	nop

0000c334 <ocrypto_bigint_add256>:
    c334:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c338:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c33c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c340:	185b      	adds	r3, r3, r1
    c342:	eb54 040c 	adcs.w	r4, r4, ip
    c346:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c34a:	414d      	adcs	r5, r1
    c34c:	eb56 060c 	adcs.w	r6, r6, ip
    c350:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c354:	414f      	adcs	r7, r1
    c356:	eb58 080c 	adcs.w	r8, r8, ip
    c35a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c35e:	eb59 0901 	adcs.w	r9, r9, r1
    c362:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c366:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c36a:	4180      	sbcs	r0, r0
    c36c:	3001      	adds	r0, #1
    c36e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c372:	4770      	bx	lr

0000c374 <ocrypto_bigint_sub256>:
    c374:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c378:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c37c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c380:	1a5b      	subs	r3, r3, r1
    c382:	eb74 040c 	sbcs.w	r4, r4, ip
    c386:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c38a:	418d      	sbcs	r5, r1
    c38c:	eb76 060c 	sbcs.w	r6, r6, ip
    c390:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c394:	418f      	sbcs	r7, r1
    c396:	eb78 080c 	sbcs.w	r8, r8, ip
    c39a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c39e:	eb79 0901 	sbcs.w	r9, r9, r1
    c3a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c3a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c3aa:	4180      	sbcs	r0, r0
    c3ac:	4240      	negs	r0, r0
    c3ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c3b2:	4770      	bx	lr

0000c3b4 <ocrypto_bigint_cadd256>:
    c3b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c3b8:	4252      	negs	r2, r2
    c3ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c3be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c3c2:	4017      	ands	r7, r2
    c3c4:	19db      	adds	r3, r3, r7
    c3c6:	ea18 0802 	ands.w	r8, r8, r2
    c3ca:	eb54 0408 	adcs.w	r4, r4, r8
    c3ce:	ea19 0902 	ands.w	r9, r9, r2
    c3d2:	eb55 0509 	adcs.w	r5, r5, r9
    c3d6:	ea1a 0a02 	ands.w	sl, sl, r2
    c3da:	eb56 060a 	adcs.w	r6, r6, sl
    c3de:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c3e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c3e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c3e8:	4017      	ands	r7, r2
    c3ea:	417b      	adcs	r3, r7
    c3ec:	ea18 0802 	ands.w	r8, r8, r2
    c3f0:	eb54 0408 	adcs.w	r4, r4, r8
    c3f4:	ea19 0902 	ands.w	r9, r9, r2
    c3f8:	eb55 0509 	adcs.w	r5, r5, r9
    c3fc:	ea1a 0a02 	ands.w	sl, sl, r2
    c400:	eb56 060a 	adcs.w	r6, r6, sl
    c404:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c406:	4180      	sbcs	r0, r0
    c408:	3001      	adds	r0, #1
    c40a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c40e:	4770      	bx	lr

0000c410 <ocrypto_bigint_csub256>:
    c410:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c414:	4252      	negs	r2, r2
    c416:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c41a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c41e:	4017      	ands	r7, r2
    c420:	1bdb      	subs	r3, r3, r7
    c422:	ea18 0802 	ands.w	r8, r8, r2
    c426:	eb74 0408 	sbcs.w	r4, r4, r8
    c42a:	ea19 0902 	ands.w	r9, r9, r2
    c42e:	eb75 0509 	sbcs.w	r5, r5, r9
    c432:	ea1a 0a02 	ands.w	sl, sl, r2
    c436:	eb76 060a 	sbcs.w	r6, r6, sl
    c43a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c43c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c440:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c444:	4017      	ands	r7, r2
    c446:	41bb      	sbcs	r3, r7
    c448:	ea18 0802 	ands.w	r8, r8, r2
    c44c:	eb74 0408 	sbcs.w	r4, r4, r8
    c450:	ea19 0902 	ands.w	r9, r9, r2
    c454:	eb75 0509 	sbcs.w	r5, r5, r9
    c458:	ea1a 0a02 	ands.w	sl, sl, r2
    c45c:	eb76 060a 	sbcs.w	r6, r6, sl
    c460:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c462:	4180      	sbcs	r0, r0
    c464:	4240      	negs	r0, r0
    c466:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c46a:	4770      	bx	lr

0000c46c <ocrypto_bigint_cswap256>:
    c46c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    c470:	4252      	negs	r2, r2
    c472:	f04f 0804 	mov.w	r8, #4

0000c476 <cswap256_loop>:
    c476:	e890 0030 	ldmia.w	r0, {r4, r5}
    c47a:	e891 00c0 	ldmia.w	r1, {r6, r7}
    c47e:	1ba3      	subs	r3, r4, r6
    c480:	4013      	ands	r3, r2
    c482:	1ae4      	subs	r4, r4, r3
    c484:	18f6      	adds	r6, r6, r3
    c486:	1beb      	subs	r3, r5, r7
    c488:	4013      	ands	r3, r2
    c48a:	1aed      	subs	r5, r5, r3
    c48c:	18ff      	adds	r7, r7, r3
    c48e:	c030      	stmia	r0!, {r4, r5}
    c490:	c1c0      	stmia	r1!, {r6, r7}
    c492:	f1b8 0801 	subs.w	r8, r8, #1
    c496:	d1ee      	bne.n	c476 <cswap256_loop>
    c498:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    c49c:	4770      	bx	lr
    c49e:	bf00      	nop

0000c4a0 <ocrypto_mul256_noframe>:
    c4a0:	b500      	push	{lr}
    c4a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    c4a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    c4aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    c4ae:	b402      	push	{r1}
    c4b0:	fba7 5102 	umull	r5, r1, r7, r2
    c4b4:	950a      	str	r5, [sp, #40]	; 0x28
    c4b6:	fba8 0b02 	umull	r0, fp, r8, r2
    c4ba:	fbe7 1063 	umaal	r1, r0, r7, r3
    c4be:	fbe9 b062 	umaal	fp, r0, r9, r2
    c4c2:	910b      	str	r1, [sp, #44]	; 0x2c
    c4c4:	fba8 5103 	umull	r5, r1, r8, r3
    c4c8:	fbea 0162 	umaal	r0, r1, sl, r2
    c4cc:	fbe7 b564 	umaal	fp, r5, r7, r4
    c4d0:	fbe7 0566 	umaal	r0, r5, r7, r6
    c4d4:	fbe8 1566 	umaal	r1, r5, r8, r6
    c4d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    c4dc:	fba9 b603 	umull	fp, r6, r9, r3
    c4e0:	fbea 1663 	umaal	r1, r6, sl, r3
    c4e4:	fbec 5663 	umaal	r5, r6, ip, r3
    c4e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
    c4ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
    c4f0:	fbea 5b64 	umaal	r5, fp, sl, r4
    c4f4:	fbec 6b64 	umaal	r6, fp, ip, r4
    c4f8:	900d      	str	r0, [sp, #52]	; 0x34
    c4fa:	fbac 3002 	umull	r3, r0, ip, r2
    c4fe:	9c05      	ldr	r4, [sp, #20]
    c500:	fbee 5062 	umaal	r5, r0, lr, r2
    c504:	fbe9 6064 	umaal	r6, r0, r9, r4
    c508:	fbea b064 	umaal	fp, r0, sl, r4
    c50c:	fbe7 3164 	umaal	r3, r1, r7, r4
    c510:	fbe8 5164 	umaal	r5, r1, r8, r4
    c514:	9c06      	ldr	r4, [sp, #24]
    c516:	fbe8 6164 	umaal	r6, r1, r8, r4
    c51a:	fbe9 b164 	umaal	fp, r1, r9, r4
    c51e:	fbea 0164 	umaal	r0, r1, sl, r4
    c522:	930e      	str	r3, [sp, #56]	; 0x38
    c524:	fba7 3204 	umull	r3, r2, r7, r4
    c528:	9c07      	ldr	r4, [sp, #28]
    c52a:	fbe7 6264 	umaal	r6, r2, r7, r4
    c52e:	fbe8 b264 	umaal	fp, r2, r8, r4
    c532:	fbe9 0264 	umaal	r0, r2, r9, r4
    c536:	fbea 1264 	umaal	r1, r2, sl, r4
    c53a:	9c04      	ldr	r4, [sp, #16]
    c53c:	fbe9 5364 	umaal	r5, r3, r9, r4
    c540:	fbea 6364 	umaal	r6, r3, sl, r4
    c544:	9c08      	ldr	r4, [sp, #32]
    c546:	fbe7 b364 	umaal	fp, r3, r7, r4
    c54a:	fbe8 0364 	umaal	r0, r3, r8, r4
    c54e:	fbe9 1364 	umaal	r1, r3, r9, r4
    c552:	fbea 2364 	umaal	r2, r3, sl, r4
    c556:	950f      	str	r5, [sp, #60]	; 0x3c
    c558:	f85d 9b04 	ldr.w	r9, [sp], #4
    c55c:	e899 0600 	ldmia.w	r9, {r9, sl}
    c560:	f8dd 8000 	ldr.w	r8, [sp]
    c564:	fba9 5408 	umull	r5, r4, r9, r8
    c568:	fbea b468 	umaal	fp, r4, sl, r8
    c56c:	f8dd 8010 	ldr.w	r8, [sp, #16]
    c570:	fbec 0468 	umaal	r0, r4, ip, r8
    c574:	fbee 1468 	umaal	r1, r4, lr, r8
    c578:	fbe9 2468 	umaal	r2, r4, r9, r8
    c57c:	fbea 3468 	umaal	r3, r4, sl, r8
    c580:	f8dd 8004 	ldr.w	r8, [sp, #4]
    c584:	fbee 6568 	umaal	r6, r5, lr, r8
    c588:	fbe9 b568 	umaal	fp, r5, r9, r8
    c58c:	fbea 0568 	umaal	r0, r5, sl, r8
    c590:	f8dd 8014 	ldr.w	r8, [sp, #20]
    c594:	fbec 1568 	umaal	r1, r5, ip, r8
    c598:	fbee 2568 	umaal	r2, r5, lr, r8
    c59c:	fbe9 3568 	umaal	r3, r5, r9, r8
    c5a0:	fbea 4568 	umaal	r4, r5, sl, r8
    c5a4:	960f      	str	r6, [sp, #60]	; 0x3c
    c5a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    c5aa:	fbae 7608 	umull	r7, r6, lr, r8
    c5ae:	fbe9 0668 	umaal	r0, r6, r9, r8
    c5b2:	fbea 1668 	umaal	r1, r6, sl, r8
    c5b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    c5ba:	fbec 2668 	umaal	r2, r6, ip, r8
    c5be:	fbee 3668 	umaal	r3, r6, lr, r8
    c5c2:	fbe9 4668 	umaal	r4, r6, r9, r8
    c5c6:	fbea 5668 	umaal	r5, r6, sl, r8
    c5ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
    c5ce:	fbec b768 	umaal	fp, r7, ip, r8
    c5d2:	fbee 0768 	umaal	r0, r7, lr, r8
    c5d6:	fbe9 1768 	umaal	r1, r7, r9, r8
    c5da:	fbea 2768 	umaal	r2, r7, sl, r8
    c5de:	f8dd 801c 	ldr.w	r8, [sp, #28]
    c5e2:	fbec 3768 	umaal	r3, r7, ip, r8
    c5e6:	fbee 4768 	umaal	r4, r7, lr, r8
    c5ea:	fbe9 5768 	umaal	r5, r7, r9, r8
    c5ee:	fbea 6768 	umaal	r6, r7, sl, r8
    c5f2:	b008      	add	sp, #32
    c5f4:	bd00      	pop	{pc}
    c5f6:	bf00      	nop

0000c5f8 <ocrypto_bigint_mul256>:
    c5f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5fc:	b087      	sub	sp, #28
    c5fe:	f7ff ff4f 	bl	c4a0 <ocrypto_mul256_noframe>
    c602:	f8dd 801c 	ldr.w	r8, [sp, #28]
    c606:	f108 0820 	add.w	r8, r8, #32
    c60a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    c60e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    c610:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c618 <ocrypto_sqr256_noframe>:
    c618:	b500      	push	{lr}
    c61a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    c61e:	fba3 5203 	umull	r5, r2, r3, r3
    c622:	9501      	str	r5, [sp, #4]
    c624:	fba3 0104 	umull	r0, r1, r3, r4
    c628:	fbe3 2064 	umaal	r2, r0, r3, r4
    c62c:	fbe3 1067 	umaal	r1, r0, r3, r7
    c630:	9202      	str	r2, [sp, #8]
    c632:	fba3 5207 	umull	r5, r2, r3, r7
    c636:	fbe3 0268 	umaal	r0, r2, r3, r8
    c63a:	fbe4 1564 	umaal	r1, r5, r4, r4
    c63e:	fbe3 0568 	umaal	r0, r5, r3, r8
    c642:	fbe3 2569 	umaal	r2, r5, r3, r9
    c646:	9103      	str	r1, [sp, #12]
    c648:	fba4 b607 	umull	fp, r6, r4, r7
    c64c:	fbe3 2669 	umaal	r2, r6, r3, r9
    c650:	fbe3 566a 	umaal	r5, r6, r3, sl
    c654:	fbe4 0b67 	umaal	r0, fp, r4, r7
    c658:	fbe4 2b68 	umaal	r2, fp, r4, r8
    c65c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    c660:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    c664:	9004      	str	r0, [sp, #16]
    c666:	fba4 1008 	umull	r1, r0, r4, r8
    c66a:	fbe4 5069 	umaal	r5, r0, r4, r9
    c66e:	fbe3 606c 	umaal	r6, r0, r3, ip
    c672:	fbe3 b06e 	umaal	fp, r0, r3, lr
    c676:	fbe7 2167 	umaal	r2, r1, r7, r7
    c67a:	fbe4 5169 	umaal	r5, r1, r4, r9
    c67e:	fbe4 616a 	umaal	r6, r1, r4, sl
    c682:	fbe3 b16e 	umaal	fp, r1, r3, lr
    c686:	fbe4 016e 	umaal	r0, r1, r4, lr
    c68a:	9205      	str	r2, [sp, #20]
    c68c:	fba7 3208 	umull	r3, r2, r7, r8
    c690:	fbe4 626a 	umaal	r6, r2, r4, sl
    c694:	fbe4 b26c 	umaal	fp, r2, r4, ip
    c698:	fbe4 026e 	umaal	r0, r2, r4, lr
    c69c:	fbe7 126e 	umaal	r1, r2, r7, lr
    c6a0:	fbe7 5368 	umaal	r5, r3, r7, r8
    c6a4:	fbe7 6369 	umaal	r6, r3, r7, r9
    c6a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
    c6ac:	fbe7 036c 	umaal	r0, r3, r7, ip
    c6b0:	fbe7 136e 	umaal	r1, r3, r7, lr
    c6b4:	fbe8 236e 	umaal	r2, r3, r8, lr
    c6b8:	9506      	str	r5, [sp, #24]
    c6ba:	fba7 5409 	umull	r5, r4, r7, r9
    c6be:	fbe7 b46a 	umaal	fp, r4, r7, sl
    c6c2:	fbe7 046c 	umaal	r0, r4, r7, ip
    c6c6:	fbe8 146c 	umaal	r1, r4, r8, ip
    c6ca:	fbe8 246e 	umaal	r2, r4, r8, lr
    c6ce:	fbe9 346e 	umaal	r3, r4, r9, lr
    c6d2:	fbe8 6568 	umaal	r6, r5, r8, r8
    c6d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
    c6da:	fbe8 056a 	umaal	r0, r5, r8, sl
    c6de:	fbe8 156c 	umaal	r1, r5, r8, ip
    c6e2:	fbe9 256c 	umaal	r2, r5, r9, ip
    c6e6:	fbe9 356e 	umaal	r3, r5, r9, lr
    c6ea:	fbea 456e 	umaal	r4, r5, sl, lr
    c6ee:	9607      	str	r6, [sp, #28]
    c6f0:	fba8 7609 	umull	r7, r6, r8, r9
    c6f4:	fbe8 066a 	umaal	r0, r6, r8, sl
    c6f8:	fbe9 166a 	umaal	r1, r6, r9, sl
    c6fc:	fbe9 266c 	umaal	r2, r6, r9, ip
    c700:	fbea 366c 	umaal	r3, r6, sl, ip
    c704:	fbea 466e 	umaal	r4, r6, sl, lr
    c708:	fbec 566e 	umaal	r5, r6, ip, lr
    c70c:	fbe8 b769 	umaal	fp, r7, r8, r9
    c710:	fbe9 0769 	umaal	r0, r7, r9, r9
    c714:	fbe9 176a 	umaal	r1, r7, r9, sl
    c718:	fbea 276a 	umaal	r2, r7, sl, sl
    c71c:	fbea 376c 	umaal	r3, r7, sl, ip
    c720:	fbec 476c 	umaal	r4, r7, ip, ip
    c724:	fbec 576e 	umaal	r5, r7, ip, lr
    c728:	fbee 676e 	umaal	r6, r7, lr, lr
    c72c:	bd00      	pop	{pc}
    c72e:	bf00      	nop

0000c730 <ocrypto_bigint_sqr256>:
    c730:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c734:	b087      	sub	sp, #28
    c736:	f7ff ff6f 	bl	c618 <ocrypto_sqr256_noframe>
    c73a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    c73e:	f108 0820 	add.w	r8, r8, #32
    c742:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    c746:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    c748:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c750 <ocrypto_constant_time_equal>:
    c750:	b430      	push	{r4, r5}
    c752:	f04f 0300 	mov.w	r3, #0

0000c756 <constant_time_equal_loop>:
    c756:	f810 4b01 	ldrb.w	r4, [r0], #1
    c75a:	f811 5b01 	ldrb.w	r5, [r1], #1
    c75e:	3a01      	subs	r2, #1
    c760:	ea84 0405 	eor.w	r4, r4, r5
    c764:	ea43 0304 	orr.w	r3, r3, r4
    c768:	d1f5      	bne.n	c756 <constant_time_equal_loop>
    c76a:	f1a3 0301 	sub.w	r3, r3, #1
    c76e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    c772:	bc30      	pop	{r4, r5}
    c774:	4770      	bx	lr
    c776:	bf00      	nop

0000c778 <ocrypto_constant_time_is_zero>:
    c778:	f04f 0300 	mov.w	r3, #0

0000c77c <constant_time_is_zero_loop>:
    c77c:	f810 2b01 	ldrb.w	r2, [r0], #1
    c780:	3901      	subs	r1, #1
    c782:	ea43 0302 	orr.w	r3, r3, r2
    c786:	d1f9      	bne.n	c77c <constant_time_is_zero_loop>
    c788:	f1a3 0301 	sub.w	r3, r3, #1
    c78c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    c790:	4770      	bx	lr
    c792:	bf00      	nop

0000c794 <ocrypto_constant_time_xor>:
    c794:	b430      	push	{r4, r5}

0000c796 <constant_time_xor_loop>:
    c796:	f811 4b01 	ldrb.w	r4, [r1], #1
    c79a:	f812 5b01 	ldrb.w	r5, [r2], #1
    c79e:	406c      	eors	r4, r5
    c7a0:	f800 4b01 	strb.w	r4, [r0], #1
    c7a4:	3b01      	subs	r3, #1
    c7a6:	d1f6      	bne.n	c796 <constant_time_xor_loop>
    c7a8:	bc30      	pop	{r4, r5}
    c7aa:	4770      	bx	lr

0000c7ac <ocrypto_mod_p256_add>:
    c7ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c7b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c7b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c7b8:	185b      	adds	r3, r3, r1
    c7ba:	eb54 040c 	adcs.w	r4, r4, ip
    c7be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c7c2:	414d      	adcs	r5, r1
    c7c4:	eb56 060c 	adcs.w	r6, r6, ip
    c7c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c7cc:	414f      	adcs	r7, r1
    c7ce:	eb58 080c 	adcs.w	r8, r8, ip
    c7d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c7d6:	eb59 0901 	adcs.w	r9, r9, r1
    c7da:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c7de:	4189      	sbcs	r1, r1
    c7e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    c7e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    c7e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    c7ec:	f176 0600 	sbcs.w	r6, r6, #0
    c7f0:	f177 0700 	sbcs.w	r7, r7, #0
    c7f4:	f178 0800 	sbcs.w	r8, r8, #0
    c7f8:	f179 0901 	sbcs.w	r9, r9, #1
    c7fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    c800:	f151 0100 	adcs.w	r1, r1, #0
    c804:	185b      	adds	r3, r3, r1
    c806:	414c      	adcs	r4, r1
    c808:	414d      	adcs	r5, r1
    c80a:	f156 0600 	adcs.w	r6, r6, #0
    c80e:	f157 0700 	adcs.w	r7, r7, #0
    c812:	f158 0800 	adcs.w	r8, r8, #0
    c816:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    c81a:	eb5a 0a01 	adcs.w	sl, sl, r1
    c81e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c822:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c826:	4770      	bx	lr

0000c828 <ocrypto_mod_p256_sub>:
    c828:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c82c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c830:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c834:	1a5b      	subs	r3, r3, r1
    c836:	eb74 040c 	sbcs.w	r4, r4, ip
    c83a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c83e:	418d      	sbcs	r5, r1
    c840:	eb76 060c 	sbcs.w	r6, r6, ip
    c844:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c848:	418f      	sbcs	r7, r1
    c84a:	eb78 080c 	sbcs.w	r8, r8, ip
    c84e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c852:	eb79 0901 	sbcs.w	r9, r9, r1
    c856:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c85a:	4189      	sbcs	r1, r1
    c85c:	185b      	adds	r3, r3, r1
    c85e:	414c      	adcs	r4, r1
    c860:	414d      	adcs	r5, r1
    c862:	f156 0600 	adcs.w	r6, r6, #0
    c866:	f157 0700 	adcs.w	r7, r7, #0
    c86a:	f158 0800 	adcs.w	r8, r8, #0
    c86e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    c872:	eb5a 0a01 	adcs.w	sl, sl, r1
    c876:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c87a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c87e:	4770      	bx	lr

0000c880 <mul_reduce>:
    c880:	eb18 0804 	adds.w	r8, r8, r4
    c884:	eb59 0905 	adcs.w	r9, r9, r5
    c888:	eb5a 0a06 	adcs.w	sl, sl, r6
    c88c:	eb5b 0b07 	adcs.w	fp, fp, r7
    c890:	f05f 0c00 	movs.w	ip, #0
    c894:	f14c 0c00 	adc.w	ip, ip, #0
    c898:	eb18 0805 	adds.w	r8, r8, r5
    c89c:	eb59 0906 	adcs.w	r9, r9, r6
    c8a0:	eb5a 0a07 	adcs.w	sl, sl, r7
    c8a4:	eb5b 0b07 	adcs.w	fp, fp, r7
    c8a8:	eb50 000c 	adcs.w	r0, r0, ip
    c8ac:	f05f 0c00 	movs.w	ip, #0
    c8b0:	eb51 010c 	adcs.w	r1, r1, ip
    c8b4:	eb52 020c 	adcs.w	r2, r2, ip
    c8b8:	4163      	adcs	r3, r4
    c8ba:	f14c 0c00 	adc.w	ip, ip, #0
    c8be:	ebb8 0807 	subs.w	r8, r8, r7
    c8c2:	f179 0900 	sbcs.w	r9, r9, #0
    c8c6:	f17a 0a00 	sbcs.w	sl, sl, #0
    c8ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
    c8ce:	41a8      	sbcs	r0, r5
    c8d0:	41b1      	sbcs	r1, r6
    c8d2:	41a2      	sbcs	r2, r4
    c8d4:	41b3      	sbcs	r3, r6
    c8d6:	f16c 0c00 	sbc.w	ip, ip, #0
    c8da:	ebbb 0b05 	subs.w	fp, fp, r5
    c8de:	41b0      	sbcs	r0, r6
    c8e0:	41b9      	sbcs	r1, r7
    c8e2:	41aa      	sbcs	r2, r5
    c8e4:	41bb      	sbcs	r3, r7
    c8e6:	f16c 0c00 	sbc.w	ip, ip, #0
    c8ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    c8ee:	ebb8 0804 	subs.w	r8, r8, r4
    c8f2:	eb79 0904 	sbcs.w	r9, r9, r4
    c8f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
    c8fa:	f17b 0b00 	sbcs.w	fp, fp, #0
    c8fe:	f170 0000 	sbcs.w	r0, r0, #0
    c902:	f171 0100 	sbcs.w	r1, r1, #0
    c906:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    c90a:	41a3      	sbcs	r3, r4
    c90c:	f16c 0c00 	sbc.w	ip, ip, #0
    c910:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    c914:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    c918:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    c91c:	f15b 0b00 	adcs.w	fp, fp, #0
    c920:	f150 0400 	adcs.w	r4, r0, #0
    c924:	f151 0500 	adcs.w	r5, r1, #0
    c928:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    c92c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    c930:	f14c 0c00 	adc.w	ip, ip, #0
    c934:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    c938:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    c93c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    c940:	f15b 0300 	adcs.w	r3, fp, #0
    c944:	f154 0400 	adcs.w	r4, r4, #0
    c948:	f155 0500 	adcs.w	r5, r5, #0
    c94c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    c950:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    c954:	4770      	bx	lr
    c956:	bf00      	nop

0000c958 <ocrypto_mod_p256_mul>:
    c958:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c95c:	b087      	sub	sp, #28
    c95e:	f7ff fd9f 	bl	c4a0 <ocrypto_mul256_noframe>
    c962:	f8dd 8010 	ldr.w	r8, [sp, #16]
    c966:	f8dd 9014 	ldr.w	r9, [sp, #20]
    c96a:	f8dd a018 	ldr.w	sl, [sp, #24]
    c96e:	f7ff ff87 	bl	c880 <mul_reduce>
    c972:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c976:	f7ff ff83 	bl	c880 <mul_reduce>
    c97a:	b003      	add	sp, #12
    c97c:	f85d 8b04 	ldr.w	r8, [sp], #4
    c980:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c988 <ocrypto_mod_p256_sqr>:
    c988:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c98c:	b087      	sub	sp, #28
    c98e:	f7ff fe43 	bl	c618 <ocrypto_sqr256_noframe>
    c992:	f8dd 8010 	ldr.w	r8, [sp, #16]
    c996:	f8dd 9014 	ldr.w	r9, [sp, #20]
    c99a:	f8dd a018 	ldr.w	sl, [sp, #24]
    c99e:	f7ff ff6f 	bl	c880 <mul_reduce>
    c9a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c9a6:	f7ff ff6b 	bl	c880 <mul_reduce>
    c9aa:	b003      	add	sp, #12
    c9ac:	f85d 8b04 	ldr.w	r8, [sp], #4
    c9b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c9ba:	4c1a      	ldr	r4, [pc, #104]	; (ca24 <ocrypto_mod_p256_sqr+0x9c>)
    c9bc:	7a20      	ldrb	r0, [r4, #8]
    c9be:	f88d 0001 	strb.w	r0, [sp, #1]
    c9c2:	79e0      	ldrb	r0, [r4, #7]
    c9c4:	f88d 0000 	strb.w	r0, [sp]
    c9c8:	79a0      	ldrb	r0, [r4, #6]
    c9ca:	f8ad 0004 	strh.w	r0, [sp, #4]
    c9ce:	7960      	ldrb	r0, [r4, #5]
    c9d0:	f8ad 0002 	strh.w	r0, [sp, #2]
    c9d4:	4668      	mov	r0, sp
    c9d6:	f00a fab7 	bl	16f48 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    c9da:	b108      	cbz	r0, c9e0 <ocrypto_mod_p256_sqr+0x58>
    c9dc:	21a7      	movs	r1, #167	; 0xa7
    c9de:	e01c      	b.n	ca1a <ocrypto_mod_p256_sqr+0x92>
    c9e0:	68e0      	ldr	r0, [r4, #12]
    c9e2:	9002      	str	r0, [sp, #8]
    c9e4:	a802      	add	r0, sp, #8
    c9e6:	f00a fac5 	bl	16f74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    c9ea:	b108      	cbz	r0, c9f0 <ocrypto_mod_p256_sqr+0x68>
    c9ec:	21ab      	movs	r1, #171	; 0xab
    c9ee:	e014      	b.n	ca1a <ocrypto_mod_p256_sqr+0x92>
    c9f0:	480d      	ldr	r0, [pc, #52]	; (ca28 <ocrypto_mod_p256_sqr+0xa0>)
    c9f2:	6800      	ldr	r0, [r0, #0]
    c9f4:	9003      	str	r0, [sp, #12]
    c9f6:	a803      	add	r0, sp, #12
    c9f8:	f015 f968 	bl	21ccc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c9fc:	b108      	cbz	r0, ca02 <ocrypto_mod_p256_sqr+0x7a>
    c9fe:	21af      	movs	r1, #175	; 0xaf
    ca00:	e00b      	b.n	ca1a <ocrypto_mod_p256_sqr+0x92>
    ca02:	7e60      	ldrb	r0, [r4, #25]
    ca04:	f00a fae8 	bl	16fd8 <sym_BLF47GKHG6ZQOW3KS7Z2FM5ECAJ3LF5DPZBMLNA>
    ca08:	b108      	cbz	r0, ca0e <ocrypto_mod_p256_sqr+0x86>
    ca0a:	21b8      	movs	r1, #184	; 0xb8
    ca0c:	e005      	b.n	ca1a <ocrypto_mod_p256_sqr+0x92>
    ca0e:	7e20      	ldrb	r0, [r4, #24]
    ca10:	f00a fadc 	bl	16fcc <sym_AZDVN5NCVR7WZFBQMTBKDS4ZECELF7HJDO5FKMQ>
    ca14:	2800      	cmp	r0, #0
    ca16:	d003      	beq.n	ca20 <ocrypto_mod_p256_sqr+0x98>
    ca18:	21b9      	movs	r1, #185	; 0xb9
    ca1a:	2003      	movs	r0, #3
    ca1c:	f000 fa34 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca20:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    ca22:	0000      	.short	0x0000
    ca24:	20000e90 	.word	0x20000e90
    ca28:	0000cfb0 	.word	0x0000cfb0
    ca2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ca30:	4681      	mov	r9, r0
    ca32:	460c      	mov	r4, r1
    ca34:	1cc0      	adds	r0, r0, #3
    ca36:	4690      	mov	r8, r2
    ca38:	4611      	mov	r1, r2
    ca3a:	2200      	movs	r2, #0
    ca3c:	f020 0003 	bic.w	r0, r0, #3
    ca40:	e9cd 0200 	strd	r0, r2, [sp]
    ca44:	9202      	str	r2, [sp, #8]
    ca46:	9203      	str	r2, [sp, #12]
    ca48:	7822      	ldrb	r2, [r4, #0]
    ca4a:	f88d 2005 	strb.w	r2, [sp, #5]
    ca4e:	7862      	ldrb	r2, [r4, #1]
    ca50:	f88d 2006 	strb.w	r2, [sp, #6]
    ca54:	78a2      	ldrb	r2, [r4, #2]
    ca56:	f88d 2007 	strb.w	r2, [sp, #7]
    ca5a:	78e2      	ldrb	r2, [r4, #3]
    ca5c:	f88d 2008 	strb.w	r2, [sp, #8]
    ca60:	7922      	ldrb	r2, [r4, #4]
    ca62:	f88d 2009 	strb.w	r2, [sp, #9]
    ca66:	7da2      	ldrb	r2, [r4, #22]
    ca68:	f88d 200a 	strb.w	r2, [sp, #10]
    ca6c:	7ee2      	ldrb	r2, [r4, #27]
    ca6e:	f88d 200c 	strb.w	r2, [sp, #12]
    ca72:	7f22      	ldrb	r2, [r4, #28]
    ca74:	f88d 200d 	strb.w	r2, [sp, #13]
    ca78:	4a1f      	ldr	r2, [pc, #124]	; (caf8 <ocrypto_mod_p256_sqr+0x170>)
    ca7a:	7952      	ldrb	r2, [r2, #5]
    ca7c:	b112      	cbz	r2, ca84 <ocrypto_mod_p256_sqr+0xfc>
    ca7e:	7922      	ldrb	r2, [r4, #4]
    ca80:	f88d 200b 	strb.w	r2, [sp, #11]
    ca84:	b101      	cbz	r1, ca88 <ocrypto_mod_p256_sqr+0x100>
    ca86:	2000      	movs	r0, #0
    ca88:	a901      	add	r1, sp, #4
    ca8a:	f000 fc43 	bl	d314 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    ca8e:	9900      	ldr	r1, [sp, #0]
    ca90:	2600      	movs	r6, #0
    ca92:	4408      	add	r0, r1
    ca94:	9000      	str	r0, [sp, #0]
    ca96:	7820      	ldrb	r0, [r4, #0]
    ca98:	7861      	ldrb	r1, [r4, #1]
    ca9a:	4635      	mov	r5, r6
    ca9c:	4408      	add	r0, r1
    ca9e:	b2c7      	uxtb	r7, r0
    caa0:	e008      	b.n	cab4 <ocrypto_mod_p256_sqr+0x12c>
    caa2:	7a23      	ldrb	r3, [r4, #8]
    caa4:	79e2      	ldrb	r2, [r4, #7]
    caa6:	79a1      	ldrb	r1, [r4, #6]
    caa8:	7960      	ldrb	r0, [r4, #5]
    caaa:	f012 fb36 	bl	1f11a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    caae:	1c6d      	adds	r5, r5, #1
    cab0:	4406      	add	r6, r0
    cab2:	b2ed      	uxtb	r5, r5
    cab4:	42bd      	cmp	r5, r7
    cab6:	d3f4      	bcc.n	caa2 <ocrypto_mod_p256_sqr+0x11a>
    cab8:	9800      	ldr	r0, [sp, #0]
    caba:	1cc0      	adds	r0, r0, #3
    cabc:	f020 0003 	bic.w	r0, r0, #3
    cac0:	9000      	str	r0, [sp, #0]
    cac2:	f1b8 0f00 	cmp.w	r8, #0
    cac6:	d000      	beq.n	caca <ocrypto_mod_p256_sqr+0x142>
    cac8:	2000      	movs	r0, #0
    caca:	4632      	mov	r2, r6
    cacc:	4639      	mov	r1, r7
    cace:	f000 fe75 	bl	d7bc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cad2:	9900      	ldr	r1, [sp, #0]
    cad4:	4642      	mov	r2, r8
    cad6:	4408      	add	r0, r1
    cad8:	9000      	str	r0, [sp, #0]
    cada:	4621      	mov	r1, r4
    cadc:	4668      	mov	r0, sp
    cade:	f000 f80d 	bl	cafc <ocrypto_mod_p256_sqr+0x174>
    cae2:	9800      	ldr	r0, [sp, #0]
    cae4:	1dc0      	adds	r0, r0, #7
    cae6:	f020 0007 	bic.w	r0, r0, #7
    caea:	9000      	str	r0, [sp, #0]
    caec:	b004      	add	sp, #16
    caee:	eba0 0009 	sub.w	r0, r0, r9
    caf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    caf6:	0000      	.short	0x0000
    caf8:	20000028 	.word	0x20000028
    cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cafe:	4604      	mov	r4, r0
    cb00:	7888      	ldrb	r0, [r1, #2]
    cb02:	4616      	mov	r6, r2
    cb04:	460d      	mov	r5, r1
    cb06:	b170      	cbz	r0, cb26 <ocrypto_mod_p256_sqr+0x19e>
    cb08:	6820      	ldr	r0, [r4, #0]
    cb0a:	1cc0      	adds	r0, r0, #3
    cb0c:	f020 0003 	bic.w	r0, r0, #3
    cb10:	6020      	str	r0, [r4, #0]
    cb12:	8a6b      	ldrh	r3, [r5, #18]
    cb14:	78ea      	ldrb	r2, [r5, #3]
    cb16:	78a9      	ldrb	r1, [r5, #2]
    cb18:	b106      	cbz	r6, cb1c <ocrypto_mod_p256_sqr+0x194>
    cb1a:	2000      	movs	r0, #0
    cb1c:	f000 ff00 	bl	d920 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb20:	6821      	ldr	r1, [r4, #0]
    cb22:	4408      	add	r0, r1
    cb24:	6020      	str	r0, [r4, #0]
    cb26:	4f49      	ldr	r7, [pc, #292]	; (cc4c <ocrypto_mod_p256_sqr+0x2c4>)
    cb28:	78f8      	ldrb	r0, [r7, #3]
    cb2a:	b198      	cbz	r0, cb54 <ocrypto_mod_p256_sqr+0x1cc>
    cb2c:	7c28      	ldrb	r0, [r5, #16]
    cb2e:	b188      	cbz	r0, cb54 <ocrypto_mod_p256_sqr+0x1cc>
    cb30:	7938      	ldrb	r0, [r7, #4]
    cb32:	b108      	cbz	r0, cb38 <ocrypto_mod_p256_sqr+0x1b0>
    cb34:	22ff      	movs	r2, #255	; 0xff
    cb36:	e000      	b.n	cb3a <ocrypto_mod_p256_sqr+0x1b2>
    cb38:	2225      	movs	r2, #37	; 0x25
    cb3a:	6820      	ldr	r0, [r4, #0]
    cb3c:	1cc0      	adds	r0, r0, #3
    cb3e:	f020 0003 	bic.w	r0, r0, #3
    cb42:	6020      	str	r0, [r4, #0]
    cb44:	7c29      	ldrb	r1, [r5, #16]
    cb46:	b106      	cbz	r6, cb4a <ocrypto_mod_p256_sqr+0x1c2>
    cb48:	2000      	movs	r0, #0
    cb4a:	f000 ff71 	bl	da30 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    cb4e:	6821      	ldr	r1, [r4, #0]
    cb50:	4408      	add	r0, r1
    cb52:	6020      	str	r0, [r4, #0]
    cb54:	483e      	ldr	r0, [pc, #248]	; (cc50 <ocrypto_mod_p256_sqr+0x2c8>)
    cb56:	6803      	ldr	r3, [r0, #0]
    cb58:	b173      	cbz	r3, cb78 <ocrypto_mod_p256_sqr+0x1f0>
    cb5a:	7928      	ldrb	r0, [r5, #4]
    cb5c:	b160      	cbz	r0, cb78 <ocrypto_mod_p256_sqr+0x1f0>
    cb5e:	6820      	ldr	r0, [r4, #0]
    cb60:	1cc0      	adds	r0, r0, #3
    cb62:	f020 0003 	bic.w	r0, r0, #3
    cb66:	6020      	str	r0, [r4, #0]
    cb68:	7d2a      	ldrb	r2, [r5, #20]
    cb6a:	7929      	ldrb	r1, [r5, #4]
    cb6c:	b106      	cbz	r6, cb70 <ocrypto_mod_p256_sqr+0x1e8>
    cb6e:	2000      	movs	r0, #0
    cb70:	4798      	blx	r3
    cb72:	6821      	ldr	r1, [r4, #0]
    cb74:	4408      	add	r0, r1
    cb76:	6020      	str	r0, [r4, #0]
    cb78:	4836      	ldr	r0, [pc, #216]	; (cc54 <ocrypto_mod_p256_sqr+0x2cc>)
    cb7a:	6802      	ldr	r2, [r0, #0]
    cb7c:	b16a      	cbz	r2, cb9a <ocrypto_mod_p256_sqr+0x212>
    cb7e:	7d68      	ldrb	r0, [r5, #21]
    cb80:	b158      	cbz	r0, cb9a <ocrypto_mod_p256_sqr+0x212>
    cb82:	6820      	ldr	r0, [r4, #0]
    cb84:	1cc0      	adds	r0, r0, #3
    cb86:	f020 0003 	bic.w	r0, r0, #3
    cb8a:	6020      	str	r0, [r4, #0]
    cb8c:	7d69      	ldrb	r1, [r5, #21]
    cb8e:	b106      	cbz	r6, cb92 <ocrypto_mod_p256_sqr+0x20a>
    cb90:	2000      	movs	r0, #0
    cb92:	4790      	blx	r2
    cb94:	6821      	ldr	r1, [r4, #0]
    cb96:	4408      	add	r0, r1
    cb98:	6020      	str	r0, [r4, #0]
    cb9a:	482f      	ldr	r0, [pc, #188]	; (cc58 <ocrypto_mod_p256_sqr+0x2d0>)
    cb9c:	f8d0 c000 	ldr.w	ip, [r0]
    cba0:	f1bc 0f00 	cmp.w	ip, #0
    cba4:	d011      	beq.n	cbca <ocrypto_mod_p256_sqr+0x242>
    cba6:	7da8      	ldrb	r0, [r5, #22]
    cba8:	b178      	cbz	r0, cbca <ocrypto_mod_p256_sqr+0x242>
    cbaa:	6820      	ldr	r0, [r4, #0]
    cbac:	1cc0      	adds	r0, r0, #3
    cbae:	f020 0003 	bic.w	r0, r0, #3
    cbb2:	6020      	str	r0, [r4, #0]
    cbb4:	7e69      	ldrb	r1, [r5, #25]
    cbb6:	9100      	str	r1, [sp, #0]
    cbb8:	7e2b      	ldrb	r3, [r5, #24]
    cbba:	7dea      	ldrb	r2, [r5, #23]
    cbbc:	7da9      	ldrb	r1, [r5, #22]
    cbbe:	b106      	cbz	r6, cbc2 <ocrypto_mod_p256_sqr+0x23a>
    cbc0:	2000      	movs	r0, #0
    cbc2:	47e0      	blx	ip
    cbc4:	6821      	ldr	r1, [r4, #0]
    cbc6:	4408      	add	r0, r1
    cbc8:	6020      	str	r0, [r4, #0]
    cbca:	7978      	ldrb	r0, [r7, #5]
    cbcc:	b178      	cbz	r0, cbee <ocrypto_mod_p256_sqr+0x266>
    cbce:	7928      	ldrb	r0, [r5, #4]
    cbd0:	b168      	cbz	r0, cbee <ocrypto_mod_p256_sqr+0x266>
    cbd2:	6820      	ldr	r0, [r4, #0]
    cbd4:	1cc0      	adds	r0, r0, #3
    cbd6:	f020 0003 	bic.w	r0, r0, #3
    cbda:	6020      	str	r0, [r4, #0]
    cbdc:	7eaa      	ldrb	r2, [r5, #26]
    cbde:	7929      	ldrb	r1, [r5, #4]
    cbe0:	b106      	cbz	r6, cbe4 <ocrypto_mod_p256_sqr+0x25c>
    cbe2:	2000      	movs	r0, #0
    cbe4:	f000 ff56 	bl	da94 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ>
    cbe8:	6821      	ldr	r1, [r4, #0]
    cbea:	4408      	add	r0, r1
    cbec:	6020      	str	r0, [r4, #0]
    cbee:	7f68      	ldrb	r0, [r5, #29]
    cbf0:	f44f 778c 	mov.w	r7, #280	; 0x118
    cbf4:	b168      	cbz	r0, cc12 <ocrypto_mod_p256_sqr+0x28a>
    cbf6:	6820      	ldr	r0, [r4, #0]
    cbf8:	1cc0      	adds	r0, r0, #3
    cbfa:	f020 0003 	bic.w	r0, r0, #3
    cbfe:	6020      	str	r0, [r4, #0]
    cc00:	b1ce      	cbz	r6, cc36 <ocrypto_mod_p256_sqr+0x2ae>
    cc02:	7f69      	ldrb	r1, [r5, #29]
    cc04:	2000      	movs	r0, #0
    cc06:	463a      	mov	r2, r7
    cc08:	f012 faaa 	bl	1f160 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ>
    cc0c:	6821      	ldr	r1, [r4, #0]
    cc0e:	4408      	add	r0, r1
    cc10:	6020      	str	r0, [r4, #0]
    cc12:	7fa8      	ldrb	r0, [r5, #30]
    cc14:	2800      	cmp	r0, #0
    cc16:	d00d      	beq.n	cc34 <ocrypto_mod_p256_sqr+0x2ac>
    cc18:	6820      	ldr	r0, [r4, #0]
    cc1a:	1cc0      	adds	r0, r0, #3
    cc1c:	f020 0003 	bic.w	r0, r0, #3
    cc20:	6020      	str	r0, [r4, #0]
    cc22:	b16e      	cbz	r6, cc40 <ocrypto_mod_p256_sqr+0x2b8>
    cc24:	7fa9      	ldrb	r1, [r5, #30]
    cc26:	2000      	movs	r0, #0
    cc28:	463a      	mov	r2, r7
    cc2a:	f012 fa99 	bl	1f160 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ>
    cc2e:	6821      	ldr	r1, [r4, #0]
    cc30:	4408      	add	r0, r1
    cc32:	6020      	str	r0, [r4, #0]
    cc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc36:	f00c fdb9 	bl	197ac <sym_J56TGVTWOJVG4QNSVN7ORTC7AKSOICPGYZ3JG6A>
    cc3a:	7f69      	ldrb	r1, [r5, #29]
    cc3c:	6820      	ldr	r0, [r4, #0]
    cc3e:	e7e2      	b.n	cc06 <ocrypto_mod_p256_sqr+0x27e>
    cc40:	f00c fdba 	bl	197b8 <sym_GNNG3GPFBTJTB7WCYU4SVHQQOQZGAXXXZFSD6PY>
    cc44:	7fa9      	ldrb	r1, [r5, #30]
    cc46:	6820      	ldr	r0, [r4, #0]
    cc48:	e7ee      	b.n	cc28 <ocrypto_mod_p256_sqr+0x2a0>
    cc4a:	0000      	.short	0x0000
    cc4c:	20000028 	.word	0x20000028
    cc50:	20000034 	.word	0x20000034
    cc54:	2000003c 	.word	0x2000003c
    cc58:	20000038 	.word	0x20000038

0000cc5c <sdc_build_revision_get>:
    cc5c:	b510      	push	{r4, lr}
    cc5e:	b128      	cbz	r0, cc6c <sdc_build_revision_get+0x10>
    cc60:	2214      	movs	r2, #20
    cc62:	4904      	ldr	r1, [pc, #16]	; (cc74 <sdc_build_revision_get+0x18>)
    cc64:	f016 fa41 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc68:	2000      	movs	r0, #0
    cc6a:	bd10      	pop	{r4, pc}
    cc6c:	f06f 0015 	mvn.w	r0, #21
    cc70:	bd10      	pop	{r4, pc}
    cc72:	0000      	.short	0x0000
    cc74:	0000cfd4 	.word	0x0000cfd4

0000cc78 <sdc_cfg_set>:
    cc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc7c:	f06f 062c 	mvn.w	r6, #44	; 0x2c
    cc80:	2800      	cmp	r0, #0
    cc82:	d171      	bne.n	cd68 <sdc_cfg_set+0xf0>
    cc84:	4c3b      	ldr	r4, [pc, #236]	; (cd74 <sdc_cfg_set+0xfc>)
    cc86:	7860      	ldrb	r0, [r4, #1]
    cc88:	b110      	cbz	r0, cc90 <sdc_cfg_set+0x18>
    cc8a:	11b0      	asrs	r0, r6, #6
    cc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc90:	b329      	cbz	r1, ccde <sdc_cfg_set+0x66>
    cc92:	f06f 0015 	mvn.w	r0, #21
    cc96:	2a00      	cmp	r2, #0
    cc98:	d0f8      	beq.n	cc8c <sdc_cfg_set+0x14>
    cc9a:	4b37      	ldr	r3, [pc, #220]	; (cd78 <sdc_cfg_set+0x100>)
    cc9c:	290e      	cmp	r1, #14
    cc9e:	789d      	ldrb	r5, [r3, #2]
    cca0:	d262      	bcs.n	cd68 <sdc_cfg_set+0xf0>
    cca2:	e8df f001 	tbb	[pc, r1]
    cca6:	0761      	.short	0x0761
    cca8:	201d0d0a 	.word	0x201d0d0a
    ccac:	4926463e 	.word	0x4926463e
    ccb0:	302b514c 	.word	0x302b514c
    ccb4:	7810      	ldrb	r0, [r2, #0]
    ccb6:	7018      	strb	r0, [r3, #0]
    ccb8:	e04a      	b.n	cd50 <sdc_cfg_set+0xd8>
    ccba:	7810      	ldrb	r0, [r2, #0]
    ccbc:	7058      	strb	r0, [r3, #1]
    ccbe:	e047      	b.n	cd50 <sdc_cfg_set+0xd8>
    ccc0:	7891      	ldrb	r1, [r2, #2]
    ccc2:	2900      	cmp	r1, #0
    ccc4:	d0e2      	beq.n	cc8c <sdc_cfg_set+0x14>
    ccc6:	78d1      	ldrb	r1, [r2, #3]
    ccc8:	2900      	cmp	r1, #0
    ccca:	d0df      	beq.n	cc8c <sdc_cfg_set+0x14>
    cccc:	7811      	ldrb	r1, [r2, #0]
    ccce:	291b      	cmp	r1, #27
    ccd0:	d3dc      	bcc.n	cc8c <sdc_cfg_set+0x14>
    ccd2:	7851      	ldrb	r1, [r2, #1]
    ccd4:	291b      	cmp	r1, #27
    ccd6:	d3d9      	bcc.n	cc8c <sdc_cfg_set+0x14>
    ccd8:	6810      	ldr	r0, [r2, #0]
    ccda:	f8c3 0005 	str.w	r0, [r3, #5]
    ccde:	e037      	b.n	cd50 <sdc_cfg_set+0xd8>
    cce0:	6810      	ldr	r0, [r2, #0]
    cce2:	60d8      	str	r0, [r3, #12]
    cce4:	e034      	b.n	cd50 <sdc_cfg_set+0xd8>
    cce6:	7811      	ldrb	r1, [r2, #0]
    cce8:	78da      	ldrb	r2, [r3, #3]
    ccea:	4291      	cmp	r1, r2
    ccec:	d3ce      	bcc.n	cc8c <sdc_cfg_set+0x14>
    ccee:	7099      	strb	r1, [r3, #2]
    ccf0:	e02e      	b.n	cd50 <sdc_cfg_set+0xd8>
    ccf2:	7811      	ldrb	r1, [r2, #0]
    ccf4:	42a9      	cmp	r1, r5
    ccf6:	d8c9      	bhi.n	cc8c <sdc_cfg_set+0x14>
    ccf8:	70d9      	strb	r1, [r3, #3]
    ccfa:	e029      	b.n	cd50 <sdc_cfg_set+0xd8>
    ccfc:	7811      	ldrb	r1, [r2, #0]
    ccfe:	42a9      	cmp	r1, r5
    cd00:	d8c4      	bhi.n	cc8c <sdc_cfg_set+0x14>
    cd02:	7599      	strb	r1, [r3, #22]
    cd04:	e024      	b.n	cd50 <sdc_cfg_set+0xd8>
    cd06:	7811      	ldrb	r1, [r2, #0]
    cd08:	2900      	cmp	r1, #0
    cd0a:	d0bf      	beq.n	cc8c <sdc_cfg_set+0x14>
    cd0c:	7851      	ldrb	r1, [r2, #1]
    cd0e:	29f9      	cmp	r1, #249	; 0xf9
    cd10:	d8bc      	bhi.n	cc8c <sdc_cfg_set+0x14>
    cd12:	2900      	cmp	r1, #0
    cd14:	d0ba      	beq.n	cc8c <sdc_cfg_set+0x14>
    cd16:	8810      	ldrh	r0, [r2, #0]
    cd18:	f8a3 0017 	strh.w	r0, [r3, #23]
    cd1c:	7890      	ldrb	r0, [r2, #2]
    cd1e:	7658      	strb	r0, [r3, #25]
    cd20:	e016      	b.n	cd50 <sdc_cfg_set+0xd8>
    cd22:	78e1      	ldrb	r1, [r4, #3]
    cd24:	b111      	cbz	r1, cd2c <sdc_cfg_set+0xb4>
    cd26:	7811      	ldrb	r1, [r2, #0]
    cd28:	2902      	cmp	r1, #2
    cd2a:	d3af      	bcc.n	cc8c <sdc_cfg_set+0x14>
    cd2c:	7810      	ldrb	r0, [r2, #0]
    cd2e:	7418      	strb	r0, [r3, #16]
    cd30:	e00e      	b.n	cd50 <sdc_cfg_set+0xd8>
    cd32:	8810      	ldrh	r0, [r2, #0]
    cd34:	8258      	strh	r0, [r3, #18]
    cd36:	e00b      	b.n	cd50 <sdc_cfg_set+0xd8>
    cd38:	7810      	ldrb	r0, [r2, #0]
    cd3a:	7118      	strb	r0, [r3, #4]
    cd3c:	e008      	b.n	cd50 <sdc_cfg_set+0xd8>
    cd3e:	7811      	ldrb	r1, [r2, #0]
    cd40:	2902      	cmp	r1, #2
    cd42:	d3a3      	bcc.n	cc8c <sdc_cfg_set+0x14>
    cd44:	7519      	strb	r1, [r3, #20]
    cd46:	e003      	b.n	cd50 <sdc_cfg_set+0xd8>
    cd48:	7811      	ldrb	r1, [r2, #0]
    cd4a:	2908      	cmp	r1, #8
    cd4c:	d89e      	bhi.n	cc8c <sdc_cfg_set+0x14>
    cd4e:	7559      	strb	r1, [r3, #21]
    cd50:	2201      	movs	r2, #1
    cd52:	4909      	ldr	r1, [pc, #36]	; (cd78 <sdc_cfg_set+0x100>)
    cd54:	2000      	movs	r0, #0
    cd56:	f7ff fe69 	bl	ca2c <ocrypto_mod_p256_sqr+0xa4>
    cd5a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    cd5e:	db05      	blt.n	cd6c <sdc_cfg_set+0xf4>
    cd60:	f06f 000b 	mvn.w	r0, #11
    cd64:	e792      	b.n	cc8c <sdc_cfg_set+0x14>
    cd66:	e7ff      	b.n	cd68 <sdc_cfg_set+0xf0>
    cd68:	4630      	mov	r0, r6
    cd6a:	e78f      	b.n	cc8c <sdc_cfg_set+0x14>
    cd6c:	2101      	movs	r1, #1
    cd6e:	70a1      	strb	r1, [r4, #2]
    cd70:	e78c      	b.n	cc8c <sdc_cfg_set+0x14>
    cd72:	0000      	.short	0x0000
    cd74:	20000028 	.word	0x20000028
    cd78:	20000e90 	.word	0x20000e90

0000cd7c <sdc_disable>:
    cd7c:	b510      	push	{r4, lr}
    cd7e:	4c07      	ldr	r4, [pc, #28]	; (cd9c <sdc_disable+0x20>)
    cd80:	7860      	ldrb	r0, [r4, #1]
    cd82:	b120      	cbz	r0, cd8e <sdc_disable+0x12>
    cd84:	f00a fc72 	bl	1766c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    cd88:	7820      	ldrb	r0, [r4, #0]
    cd8a:	f010 fbcb 	bl	1d524 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    cd8e:	f000 fed3 	bl	db38 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    cd92:	f000 ffab 	bl	dcec <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    cd96:	2000      	movs	r0, #0
    cd98:	7060      	strb	r0, [r4, #1]
    cd9a:	bd10      	pop	{r4, pc}
    cd9c:	20000028 	.word	0x20000028

0000cda0 <sdc_enable>:
    cda0:	b570      	push	{r4, r5, r6, lr}
    cda2:	460c      	mov	r4, r1
    cda4:	0005      	movs	r5, r0
    cda6:	d002      	beq.n	cdae <sdc_enable+0xe>
    cda8:	b10c      	cbz	r4, cdae <sdc_enable+0xe>
    cdaa:	0760      	lsls	r0, r4, #29
    cdac:	d002      	beq.n	cdb4 <sdc_enable+0x14>
    cdae:	f06f 0015 	mvn.w	r0, #21
    cdb2:	bd70      	pop	{r4, r5, r6, pc}
    cdb4:	f000 f934 	bl	d020 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    cdb8:	b1a8      	cbz	r0, cde6 <sdc_enable+0x46>
    cdba:	4628      	mov	r0, r5
    cdbc:	f010 fb78 	bl	1d4b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    cdc0:	4d0a      	ldr	r5, [pc, #40]	; (cdec <sdc_enable+0x4c>)
    cdc2:	2200      	movs	r2, #0
    cdc4:	490a      	ldr	r1, [pc, #40]	; (cdf0 <sdc_enable+0x50>)
    cdc6:	7028      	strb	r0, [r5, #0]
    cdc8:	4620      	mov	r0, r4
    cdca:	f7ff fe2f 	bl	ca2c <ocrypto_mod_p256_sqr+0xa4>
    cdce:	f015 fe6c 	bl	22aaa <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    cdd2:	2100      	movs	r1, #0
    cdd4:	7828      	ldrb	r0, [r5, #0]
    cdd6:	f00a fc25 	bl	17624 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    cdda:	f7ff fded 	bl	c9b8 <ocrypto_mod_p256_sqr+0x30>
    cdde:	2001      	movs	r0, #1
    cde0:	7068      	strb	r0, [r5, #1]
    cde2:	2000      	movs	r0, #0
    cde4:	bd70      	pop	{r4, r5, r6, pc}
    cde6:	f04f 30ff 	mov.w	r0, #4294967295
    cdea:	bd70      	pop	{r4, r5, r6, pc}
    cdec:	20000028 	.word	0x20000028
    cdf0:	20000e90 	.word	0x20000e90

0000cdf4 <sdc_init>:
    cdf4:	b530      	push	{r4, r5, lr}
    cdf6:	b089      	sub	sp, #36	; 0x24
    cdf8:	0005      	movs	r5, r0
    cdfa:	d00c      	beq.n	ce16 <sdc_init+0x22>
    cdfc:	f010 fafe 	bl	1d3fc <mpsl_is_initialized>
    ce00:	f04f 34ff 	mov.w	r4, #4294967295
    ce04:	b120      	cbz	r0, ce10 <sdc_init+0x1c>
    ce06:	f010 f991 	bl	1d12c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    ce0a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    ce0e:	d905      	bls.n	ce1c <sdc_init+0x28>
    ce10:	4620      	mov	r0, r4
    ce12:	b009      	add	sp, #36	; 0x24
    ce14:	bd30      	pop	{r4, r5, pc}
    ce16:	f06f 0015 	mvn.w	r0, #21
    ce1a:	e7fa      	b.n	ce12 <sdc_init+0x1e>
    ce1c:	4c15      	ldr	r4, [pc, #84]	; (ce74 <sdc_init+0x80>)
    ce1e:	4816      	ldr	r0, [pc, #88]	; (ce78 <sdc_init+0x84>)
    ce20:	60a5      	str	r5, [r4, #8]
    ce22:	f000 fa45 	bl	d2b0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    ce26:	2000      	movs	r0, #0
    ce28:	7060      	strb	r0, [r4, #1]
    ce2a:	70a0      	strb	r0, [r4, #2]
    ce2c:	70e0      	strb	r0, [r4, #3]
    ce2e:	7120      	strb	r0, [r4, #4]
    ce30:	7160      	strb	r0, [r4, #5]
    ce32:	4601      	mov	r1, r0
    ce34:	2220      	movs	r2, #32
    ce36:	4668      	mov	r0, sp
    ce38:	f016 f9d1 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce3c:	2220      	movs	r2, #32
    ce3e:	490f      	ldr	r1, [pc, #60]	; (ce7c <sdc_init+0x88>)
    ce40:	4668      	mov	r0, sp
    ce42:	f016 f952 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce46:	2220      	movs	r2, #32
    ce48:	4669      	mov	r1, sp
    ce4a:	480d      	ldr	r0, [pc, #52]	; (ce80 <sdc_init+0x8c>)
    ce4c:	f016 f94d 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce50:	f3ef 8410 	mrs	r4, PRIMASK
    ce54:	b672      	cpsid	i
    ce56:	f000 fe7d 	bl	db54 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    ce5a:	480a      	ldr	r0, [pc, #40]	; (ce84 <sdc_init+0x90>)
    ce5c:	f000 ff52 	bl	dd04 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    ce60:	b118      	cbz	r0, ce6a <sdc_init+0x76>
    ce62:	21c5      	movs	r1, #197	; 0xc5
    ce64:	2003      	movs	r0, #3
    ce66:	f000 f80f 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce6a:	b904      	cbnz	r4, ce6e <sdc_init+0x7a>
    ce6c:	b662      	cpsie	i
    ce6e:	2000      	movs	r0, #0
    ce70:	e7cf      	b.n	ce12 <sdc_init+0x1e>
    ce72:	0000      	.short	0x0000
    ce74:	20000028 	.word	0x20000028
    ce78:	0000c9b9 	.word	0x0000c9b9
    ce7c:	0000cfb4 	.word	0x0000cfb4
    ce80:	20000e90 	.word	0x20000e90
    ce84:	0000d04d 	.word	0x0000d04d

0000ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    ce88:	b50e      	push	{r1, r2, r3, lr}
    ce8a:	b672      	cpsid	i
    ce8c:	4a15      	ldr	r2, [pc, #84]	; (cee4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    ce8e:	6895      	ldr	r5, [r2, #8]
    ce90:	b1dd      	cbz	r5, ceca <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    ce92:	2200      	movs	r2, #0
    ce94:	4603      	mov	r3, r0
    ce96:	466e      	mov	r6, sp
    ce98:	240a      	movs	r4, #10
    ce9a:	e003      	b.n	cea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    ce9c:	fbb0 f0f4 	udiv	r0, r0, r4
    cea0:	1c52      	adds	r2, r2, #1
    cea2:	b2d2      	uxtb	r2, r2
    cea4:	2800      	cmp	r0, #0
    cea6:	d1f9      	bne.n	ce9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    cea8:	54b0      	strb	r0, [r6, r2]
    ceaa:	e00a      	b.n	cec2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    ceac:	b2d8      	uxtb	r0, r3
    ceae:	fbb0 f7f4 	udiv	r7, r0, r4
    ceb2:	fbb3 f3f4 	udiv	r3, r3, r4
    ceb6:	fb04 0017 	mls	r0, r4, r7, r0
    ceba:	1e52      	subs	r2, r2, #1
    cebc:	b2d2      	uxtb	r2, r2
    cebe:	3030      	adds	r0, #48	; 0x30
    cec0:	54b0      	strb	r0, [r6, r2]
    cec2:	2a00      	cmp	r2, #0
    cec4:	d1f2      	bne.n	ceac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    cec6:	4630      	mov	r0, r6
    cec8:	47a8      	blx	r5
    ceca:	f3bf 8f4f 	dsb	sy
    cece:	4806      	ldr	r0, [pc, #24]	; (cee8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    ced0:	6801      	ldr	r1, [r0, #0]
    ced2:	4a06      	ldr	r2, [pc, #24]	; (ceec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    ced4:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    ced8:	4311      	orrs	r1, r2
    ceda:	6001      	str	r1, [r0, #0]
    cedc:	f3bf 8f4f 	dsb	sy
    cee0:	bf00      	nop
    cee2:	e7fd      	b.n	cee0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    cee4:	20000028 	.word	0x20000028
    cee8:	e000ed0c 	.word	0xe000ed0c
    ceec:	05fa0004 	.word	0x05fa0004

0000cef0 <sdc_support_dle_peripheral>:
    cef0:	4806      	ldr	r0, [pc, #24]	; (cf0c <sdc_support_dle_peripheral+0x1c>)
    cef2:	b510      	push	{r4, lr}
    cef4:	7881      	ldrb	r1, [r0, #2]
    cef6:	7840      	ldrb	r0, [r0, #1]
    cef8:	4301      	orrs	r1, r0
    cefa:	d002      	beq.n	cf02 <sdc_support_dle_peripheral+0x12>
    cefc:	f04f 30ff 	mov.w	r0, #4294967295
    cf00:	bd10      	pop	{r4, pc}
    cf02:	f00a f8b3 	bl	1706c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    cf06:	2000      	movs	r0, #0
    cf08:	bd10      	pop	{r4, pc}
    cf0a:	0000      	.short	0x0000
    cf0c:	20000028 	.word	0x20000028

0000cf10 <sdc_support_ext_adv>:
    cf10:	4806      	ldr	r0, [pc, #24]	; (cf2c <sdc_support_ext_adv+0x1c>)
    cf12:	b510      	push	{r4, lr}
    cf14:	7881      	ldrb	r1, [r0, #2]
    cf16:	7840      	ldrb	r0, [r0, #1]
    cf18:	4301      	orrs	r1, r0
    cf1a:	d002      	beq.n	cf22 <sdc_support_ext_adv+0x12>
    cf1c:	f04f 30ff 	mov.w	r0, #4294967295
    cf20:	bd10      	pop	{r4, pc}
    cf22:	f00a fbb3 	bl	1768c <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ>
    cf26:	2000      	movs	r0, #0
    cf28:	bd10      	pop	{r4, pc}
    cf2a:	0000      	.short	0x0000
    cf2c:	20000028 	.word	0x20000028

0000cf30 <sdc_support_le_2m_phy>:
    cf30:	4806      	ldr	r0, [pc, #24]	; (cf4c <sdc_support_le_2m_phy+0x1c>)
    cf32:	b510      	push	{r4, lr}
    cf34:	7881      	ldrb	r1, [r0, #2]
    cf36:	7840      	ldrb	r0, [r0, #1]
    cf38:	4301      	orrs	r1, r0
    cf3a:	d002      	beq.n	cf42 <sdc_support_le_2m_phy+0x12>
    cf3c:	f04f 30ff 	mov.w	r0, #4294967295
    cf40:	bd10      	pop	{r4, pc}
    cf42:	f015 f8b2 	bl	220aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    cf46:	2000      	movs	r0, #0
    cf48:	bd10      	pop	{r4, pc}
    cf4a:	0000      	.short	0x0000
    cf4c:	20000028 	.word	0x20000028

0000cf50 <sdc_support_le_coded_phy>:
    cf50:	4806      	ldr	r0, [pc, #24]	; (cf6c <sdc_support_le_coded_phy+0x1c>)
    cf52:	b510      	push	{r4, lr}
    cf54:	7881      	ldrb	r1, [r0, #2]
    cf56:	7840      	ldrb	r0, [r0, #1]
    cf58:	4301      	orrs	r1, r0
    cf5a:	d002      	beq.n	cf62 <sdc_support_le_coded_phy+0x12>
    cf5c:	f04f 30ff 	mov.w	r0, #4294967295
    cf60:	bd10      	pop	{r4, pc}
    cf62:	f015 f8a5 	bl	220b0 <sym_RJCZ3TUNFFUZPTNFXG35SLVXYYJ7NVMTPNXKOXY>
    cf66:	2000      	movs	r0, #0
    cf68:	bd10      	pop	{r4, pc}
    cf6a:	0000      	.short	0x0000
    cf6c:	20000028 	.word	0x20000028

0000cf70 <sdc_support_peripheral>:
    cf70:	4806      	ldr	r0, [pc, #24]	; (cf8c <sdc_support_peripheral+0x1c>)
    cf72:	b510      	push	{r4, lr}
    cf74:	7881      	ldrb	r1, [r0, #2]
    cf76:	7840      	ldrb	r0, [r0, #1]
    cf78:	4301      	orrs	r1, r0
    cf7a:	d002      	beq.n	cf82 <sdc_support_peripheral+0x12>
    cf7c:	f04f 30ff 	mov.w	r0, #4294967295
    cf80:	bd10      	pop	{r4, pc}
    cf82:	f00a fb95 	bl	176b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    cf86:	2000      	movs	r0, #0
    cf88:	bd10      	pop	{r4, pc}
    cf8a:	0000      	.short	0x0000
    cf8c:	20000028 	.word	0x20000028

0000cf90 <sdc_support_phy_update_peripheral>:
    cf90:	4806      	ldr	r0, [pc, #24]	; (cfac <sdc_support_phy_update_peripheral+0x1c>)
    cf92:	b510      	push	{r4, lr}
    cf94:	7881      	ldrb	r1, [r0, #2]
    cf96:	7840      	ldrb	r0, [r0, #1]
    cf98:	4301      	orrs	r1, r0
    cf9a:	d002      	beq.n	cfa2 <sdc_support_phy_update_peripheral+0x12>
    cf9c:	f04f 30ff 	mov.w	r0, #4294967295
    cfa0:	bd10      	pop	{r4, pc}
    cfa2:	f015 f8c7 	bl	22134 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    cfa6:	2000      	movs	r0, #0
    cfa8:	bd10      	pop	{r4, pc}
    cfaa:	0000      	.short	0x0000
    cfac:	20000028 	.word	0x20000028
    cfb0:	00000001 	.word	0x00000001
    cfb4:	00010101 	.word	0x00010101
    cfb8:	031b1b00 	.word	0x031b1b00
    cfbc:	00000002 	.word	0x00000002
    cfc0:	00001d4c 	.word	0x00001d4c
    cfc4:	001f0003 	.word	0x001f0003
    cfc8:	01000002 	.word	0x01000002
    cfcc:	00010049 	.word	0x00010049
    cfd0:	00000000 	.word	0x00000000
    cfd4:	2f2d0cd8 	.word	0x2f2d0cd8
    cfd8:	5ce2ae36 	.word	0x5ce2ae36
    cfdc:	4c802680 	.word	0x4c802680
    cfe0:	53164d3f 	.word	0x53164d3f
    cfe4:	73c79650 	.word	0x73c79650

0000cfe8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    cfe8:	4a05      	ldr	r2, [pc, #20]	; (d000 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    cfea:	b510      	push	{r4, lr}
    cfec:	6852      	ldr	r2, [r2, #4]
    cfee:	b112      	cbz	r2, cff6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    cff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cff4:	4710      	bx	r2
    cff6:	2192      	movs	r1, #146	; 0x92
    cff8:	2004      	movs	r0, #4
    cffa:	f7ff ff45 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cffe:	0000      	.short	0x0000
    d000:	20000eb0 	.word	0x20000eb0

0000d004 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    d004:	4a05      	ldr	r2, [pc, #20]	; (d01c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    d006:	b510      	push	{r4, lr}
    d008:	6892      	ldr	r2, [r2, #8]
    d00a:	b112      	cbz	r2, d012 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    d00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d010:	4710      	bx	r2
    d012:	2198      	movs	r1, #152	; 0x98
    d014:	2004      	movs	r0, #4
    d016:	f7ff ff37 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d01a:	0000      	.short	0x0000
    d01c:	20000eb0 	.word	0x20000eb0

0000d020 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    d020:	4805      	ldr	r0, [pc, #20]	; (d038 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    d022:	6801      	ldr	r1, [r0, #0]
    d024:	b129      	cbz	r1, d032 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    d026:	6841      	ldr	r1, [r0, #4]
    d028:	b119      	cbz	r1, d032 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    d02a:	6880      	ldr	r0, [r0, #8]
    d02c:	b108      	cbz	r0, d032 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    d02e:	2001      	movs	r0, #1
    d030:	4770      	bx	lr
    d032:	2000      	movs	r0, #0
    d034:	4770      	bx	lr
    d036:	0000      	.short	0x0000
    d038:	20000eb0 	.word	0x20000eb0

0000d03c <sdc_rand_source_register>:
    d03c:	4902      	ldr	r1, [pc, #8]	; (d048 <sdc_rand_source_register+0xc>)
    d03e:	c80d      	ldmia	r0, {r0, r2, r3}
    d040:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    d044:	2000      	movs	r0, #0
    d046:	4770      	bx	lr
    d048:	20000eb0 	.word	0x20000eb0

0000d04c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d04e:	4c12      	ldr	r4, [pc, #72]	; (d098 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    d050:	2600      	movs	r6, #0
    d052:	6825      	ldr	r5, [r4, #0]
    d054:	e011      	b.n	d07a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    d056:	9800      	ldr	r0, [sp, #0]
    d058:	2802      	cmp	r0, #2
    d05a:	d002      	beq.n	d062 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    d05c:	2803      	cmp	r0, #3
    d05e:	d10c      	bne.n	d07a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    d060:	e006      	b.n	d070 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    d062:	6820      	ldr	r0, [r4, #0]
    d064:	b110      	cbz	r0, d06c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    d066:	2000      	movs	r0, #0
    d068:	6026      	str	r6, [r4, #0]
    d06a:	e005      	b.n	d078 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    d06c:	2128      	movs	r1, #40	; 0x28
    d06e:	e00c      	b.n	d08a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    d070:	6820      	ldr	r0, [r4, #0]
    d072:	b168      	cbz	r0, d090 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    d074:	2001      	movs	r0, #1
    d076:	6026      	str	r6, [r4, #0]
    d078:	47a8      	blx	r5
    d07a:	4668      	mov	r0, sp
    d07c:	f000 fe08 	bl	dc90 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    d080:	2800      	cmp	r0, #0
    d082:	d0e8      	beq.n	d056 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    d084:	2805      	cmp	r0, #5
    d086:	d005      	beq.n	d094 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    d088:	2135      	movs	r1, #53	; 0x35
    d08a:	2004      	movs	r0, #4
    d08c:	f7ff fefc 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d090:	212d      	movs	r1, #45	; 0x2d
    d092:	e7fa      	b.n	d08a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    d094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d096:	0000      	.short	0x0000
    d098:	20000040 	.word	0x20000040

0000d09c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    d09c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d0a0:	4e25      	ldr	r6, [pc, #148]	; (d138 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    d0a2:	4605      	mov	r5, r0
    d0a4:	1d00      	adds	r0, r0, #4
    d0a6:	f506 7784 	add.w	r7, r6, #264	; 0x108
    d0aa:	6030      	str	r0, [r6, #0]
    d0ac:	7838      	ldrb	r0, [r7, #0]
    d0ae:	b158      	cbz	r0, d0c8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    d0b0:	78ba      	ldrb	r2, [r7, #2]
    d0b2:	463c      	mov	r4, r7
    d0b4:	1c79      	adds	r1, r7, #1
    d0b6:	4628      	mov	r0, r5
    d0b8:	1c92      	adds	r2, r2, #2
    d0ba:	f016 f816 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0be:	2000      	movs	r0, #0
    d0c0:	7020      	strb	r0, [r4, #0]
    d0c2:	2004      	movs	r0, #4
    d0c4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d0c8:	481b      	ldr	r0, [pc, #108]	; (d138 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    d0ca:	f002 fcb5 	bl	fa38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    d0ce:	4604      	mov	r4, r0
    d0d0:	2802      	cmp	r0, #2
    d0d2:	d004      	beq.n	d0de <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    d0d4:	2c04      	cmp	r4, #4
    d0d6:	d007      	beq.n	d0e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
    d0d8:	2c08      	cmp	r4, #8
    d0da:	d027      	beq.n	d12c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    d0dc:	e02a      	b.n	d134 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    d0de:	4916      	ldr	r1, [pc, #88]	; (d138 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    d0e0:	4628      	mov	r0, r5
    d0e2:	f011 f800 	bl	1e0e6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d0e6:	e025      	b.n	d134 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    d0e8:	7830      	ldrb	r0, [r6, #0]
    d0ea:	280a      	cmp	r0, #10
    d0ec:	d104      	bne.n	d0f8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
    d0ee:	2105      	movs	r1, #5
    d0f0:	203e      	movs	r0, #62	; 0x3e
    d0f2:	f000 f823 	bl	d13c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    d0f6:	b160      	cbz	r0, d112 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x76>
    d0f8:	490f      	ldr	r1, [pc, #60]	; (d138 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    d0fa:	4628      	mov	r0, r5
    d0fc:	f011 f858 	bl	1e1b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    d100:	2800      	cmp	r0, #0
    d102:	d0d3      	beq.n	d0ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    d104:	78a9      	ldrb	r1, [r5, #2]
    d106:	7828      	ldrb	r0, [r5, #0]
    d108:	f000 f818 	bl	d13c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    d10c:	2800      	cmp	r0, #0
    d10e:	d0cd      	beq.n	d0ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    d110:	e010      	b.n	d134 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    d112:	88b0      	ldrh	r0, [r6, #4]
    d114:	f8ad 0000 	strh.w	r0, [sp]
    d118:	a901      	add	r1, sp, #4
    d11a:	4668      	mov	r0, sp
    d11c:	f011 fcf4 	bl	1eb08 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    d120:	2800      	cmp	r0, #0
    d122:	d0c3      	beq.n	d0ac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    d124:	21a7      	movs	r1, #167	; 0xa7
    d126:	2008      	movs	r0, #8
    d128:	f7ff feae 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d12c:	4902      	ldr	r1, [pc, #8]	; (d138 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    d12e:	4628      	mov	r0, r5
    d130:	f011 f807 	bl	1e142 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    d134:	4620      	mov	r0, r4
    d136:	e7c5      	b.n	d0c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    d138:	20000ebc 	.word	0x20000ebc
    d13c:	b570      	push	{r4, r5, r6, lr}
    d13e:	460c      	mov	r4, r1
    d140:	4605      	mov	r5, r0
    d142:	f000 f84b 	bl	d1dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d146:	2800      	cmp	r0, #0
    d148:	d002      	beq.n	d150 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
    d14a:	2d3e      	cmp	r5, #62	; 0x3e
    d14c:	d001      	beq.n	d152 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb6>
    d14e:	2001      	movs	r0, #1
    d150:	bd70      	pop	{r4, r5, r6, pc}
    d152:	2c12      	cmp	r4, #18
    d154:	d106      	bne.n	d164 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
    d156:	4806      	ldr	r0, [pc, #24]	; (d170 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>)
    d158:	7801      	ldrb	r1, [r0, #0]
    d15a:	2902      	cmp	r1, #2
    d15c:	d002      	beq.n	d164 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
    d15e:	7840      	ldrb	r0, [r0, #1]
    d160:	2800      	cmp	r0, #0
    d162:	d0f5      	beq.n	d150 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
    d164:	4620      	mov	r0, r4
    d166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d16a:	f000 b849 	b.w	d200 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d16e:	0000      	.short	0x0000
    d170:	20000408 	.word	0x20000408

0000d174 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>:
    d174:	4901      	ldr	r1, [pc, #4]	; (d17c <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x8>)
    d176:	7048      	strb	r0, [r1, #1]
    d178:	4770      	bx	lr
    d17a:	0000      	.short	0x0000
    d17c:	20000408 	.word	0x20000408
    d180:	b570      	push	{r4, r5, r6, lr}
    d182:	780a      	ldrb	r2, [r1, #0]
    d184:	7082      	strb	r2, [r0, #2]
    d186:	b33a      	cbz	r2, d1d8 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    d188:	2a01      	cmp	r2, #1
    d18a:	d825      	bhi.n	d1d8 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x64>
    d18c:	2313      	movs	r3, #19
    d18e:	7003      	strb	r3, [r0, #0]
    d190:	2300      	movs	r3, #0
    d192:	e00a      	b.n	d1aa <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x36>
    d194:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    d198:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    d19c:	78a6      	ldrb	r6, [r4, #2]
    d19e:	70ee      	strb	r6, [r5, #3]
    d1a0:	8864      	ldrh	r4, [r4, #2]
    d1a2:	0a24      	lsrs	r4, r4, #8
    d1a4:	1c5b      	adds	r3, r3, #1
    d1a6:	712c      	strb	r4, [r5, #4]
    d1a8:	b2db      	uxtb	r3, r3
    d1aa:	4293      	cmp	r3, r2
    d1ac:	d3f2      	bcc.n	d194 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x20>
    d1ae:	2300      	movs	r3, #0
    d1b0:	e00b      	b.n	d1ca <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x56>
    d1b2:	bf00      	nop
    d1b4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    d1b8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    d1bc:	792e      	ldrb	r6, [r5, #4]
    d1be:	7166      	strb	r6, [r4, #5]
    d1c0:	88ad      	ldrh	r5, [r5, #4]
    d1c2:	0a2d      	lsrs	r5, r5, #8
    d1c4:	1c5b      	adds	r3, r3, #1
    d1c6:	71a5      	strb	r5, [r4, #6]
    d1c8:	b2db      	uxtb	r3, r3
    d1ca:	4293      	cmp	r3, r2
    d1cc:	d3f2      	bcc.n	d1b4 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0x40>
    d1ce:	2101      	movs	r1, #1
    d1d0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    d1d4:	b2c0      	uxtb	r0, r0
    d1d6:	bd70      	pop	{r4, r5, r6, pc}
    d1d8:	2000      	movs	r0, #0
    d1da:	bd70      	pop	{r4, r5, r6, pc}

0000d1dc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    d1dc:	2840      	cmp	r0, #64	; 0x40
    d1de:	d203      	bcs.n	d1e8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    d1e0:	1e40      	subs	r0, r0, #1
    d1e2:	b2c1      	uxtb	r1, r0
    d1e4:	4805      	ldr	r0, [pc, #20]	; (d1fc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    d1e6:	e005      	b.n	d1f4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    d1e8:	28ff      	cmp	r0, #255	; 0xff
    d1ea:	d005      	beq.n	d1f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    d1ec:	3840      	subs	r0, #64	; 0x40
    d1ee:	b2c1      	uxtb	r1, r0
    d1f0:	4802      	ldr	r0, [pc, #8]	; (d1fc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    d1f2:	3008      	adds	r0, #8
    d1f4:	f011 bb4f 	b.w	1e896 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    d1f8:	2001      	movs	r0, #1
    d1fa:	4770      	bx	lr
    d1fc:	2000004c 	.word	0x2000004c

0000d200 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    d200:	1e40      	subs	r0, r0, #1
    d202:	b2c1      	uxtb	r1, r0
    d204:	4801      	ldr	r0, [pc, #4]	; (d20c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    d206:	f011 bb46 	b.w	1e896 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    d20a:	0000      	.short	0x0000
    d20c:	2000005c 	.word	0x2000005c

0000d210 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    d210:	b510      	push	{r4, lr}
    d212:	4a07      	ldr	r2, [pc, #28]	; (d230 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    d214:	6801      	ldr	r1, [r0, #0]
    d216:	4b06      	ldr	r3, [pc, #24]	; (d230 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    d218:	6191      	str	r1, [r2, #24]
    d21a:	6840      	ldr	r0, [r0, #4]
    d21c:	61d0      	str	r0, [r2, #28]
    d21e:	681c      	ldr	r4, [r3, #0]
    d220:	3218      	adds	r2, #24
    d222:	43a1      	bics	r1, r4
    d224:	6011      	str	r1, [r2, #0]
    d226:	6859      	ldr	r1, [r3, #4]
    d228:	4388      	bics	r0, r1
    d22a:	6050      	str	r0, [r2, #4]
    d22c:	bd10      	pop	{r4, pc}
    d22e:	0000      	.short	0x0000
    d230:	20000044 	.word	0x20000044

0000d234 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    d234:	4a06      	ldr	r2, [pc, #24]	; (d250 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    d236:	6801      	ldr	r1, [r0, #0]
    d238:	6091      	str	r1, [r2, #8]
    d23a:	6840      	ldr	r0, [r0, #4]
    d23c:	60d0      	str	r0, [r2, #12]
    d23e:	3208      	adds	r2, #8
    d240:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
    d244:	6011      	str	r1, [r2, #0]
    d246:	4903      	ldr	r1, [pc, #12]	; (d254 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
    d248:	4308      	orrs	r0, r1
    d24a:	6050      	str	r0, [r2, #4]
    d24c:	4770      	bx	lr
    d24e:	0000      	.short	0x0000
    d250:	20000044 	.word	0x20000044
    d254:	024007f8 	.word	0x024007f8

0000d258 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    d258:	4902      	ldr	r1, [pc, #8]	; (d264 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    d25a:	6802      	ldr	r2, [r0, #0]
    d25c:	610a      	str	r2, [r1, #16]
    d25e:	6840      	ldr	r0, [r0, #4]
    d260:	6148      	str	r0, [r1, #20]
    d262:	4770      	bx	lr
    d264:	20000044 	.word	0x20000044

0000d268 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    d268:	4807      	ldr	r0, [pc, #28]	; (d288 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    d26a:	f04f 31ff 	mov.w	r1, #4294967295
    d26e:	2200      	movs	r2, #0
    d270:	6001      	str	r1, [r0, #0]
    d272:	0cc9      	lsrs	r1, r1, #19
    d274:	6041      	str	r1, [r0, #4]
    d276:	f100 0108 	add.w	r1, r0, #8
    d27a:	201f      	movs	r0, #31
    d27c:	600a      	str	r2, [r1, #0]
    d27e:	604a      	str	r2, [r1, #4]
    d280:	3108      	adds	r1, #8
    d282:	e9c1 0200 	strd	r0, r2, [r1]
    d286:	4770      	bx	lr
    d288:	2000004c 	.word	0x2000004c

0000d28c <sdc_hci_cmd_cb_reset>:
    d28c:	b510      	push	{r4, lr}
    d28e:	f7ff ffeb 	bl	d268 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    d292:	2000      	movs	r0, #0
    d294:	f7ff ff6e 	bl	d174 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
    d298:	f014 fe6b 	bl	21f72 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    d29c:	4604      	mov	r4, r0
    d29e:	4803      	ldr	r0, [pc, #12]	; (d2ac <sdc_hci_cmd_cb_reset+0x20>)
    d2a0:	6800      	ldr	r0, [r0, #0]
    d2a2:	b100      	cbz	r0, d2a6 <sdc_hci_cmd_cb_reset+0x1a>
    d2a4:	4780      	blx	r0
    d2a6:	4620      	mov	r0, r4
    d2a8:	bd10      	pop	{r4, pc}
    d2aa:	0000      	.short	0x0000
    d2ac:	20000064 	.word	0x20000064

0000d2b0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    d2b0:	4901      	ldr	r1, [pc, #4]	; (d2b8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    d2b2:	6008      	str	r0, [r1, #0]
    d2b4:	4770      	bx	lr
    d2b6:	0000      	.short	0x0000
    d2b8:	20000064 	.word	0x20000064

0000d2bc <sdc_hci_cmd_vs_zephyr_read_version_info>:
    d2bc:	2102      	movs	r1, #2
    d2be:	8001      	strh	r1, [r0, #0]
    d2c0:	8041      	strh	r1, [r0, #2]
    d2c2:	2100      	movs	r1, #0
    d2c4:	7101      	strb	r1, [r0, #4]
    d2c6:	21d8      	movs	r1, #216	; 0xd8
    d2c8:	7141      	strb	r1, [r0, #5]
    d2ca:	f642 510c 	movw	r1, #11532	; 0x2d0c
    d2ce:	80c1      	strh	r1, [r0, #6]
    d2d0:	4901      	ldr	r1, [pc, #4]	; (d2d8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    d2d2:	6081      	str	r1, [r0, #8]
    d2d4:	2000      	movs	r0, #0
    d2d6:	4770      	bx	lr
    d2d8:	e2ae362f 	.word	0xe2ae362f

0000d2dc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    d2dc:	b510      	push	{r4, lr}
    d2de:	2809      	cmp	r0, #9
    d2e0:	d304      	bcc.n	d2ec <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    d2e2:	f240 2103 	movw	r1, #515	; 0x203
    d2e6:	2017      	movs	r0, #23
    d2e8:	f7ff fdce 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2ec:	4901      	ldr	r1, [pc, #4]	; (d2f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    d2ee:	5c08      	ldrb	r0, [r1, r0]
    d2f0:	bd10      	pop	{r4, pc}
    d2f2:	0000      	.short	0x0000
    d2f4:	200010c8 	.word	0x200010c8

0000d2f8 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>:
    d2f8:	4a05      	ldr	r2, [pc, #20]	; (d310 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A+0x18>)
    d2fa:	b510      	push	{r4, lr}
    d2fc:	5c51      	ldrb	r1, [r2, r1]
    d2fe:	4281      	cmp	r1, r0
    d300:	d804      	bhi.n	d30c <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A+0x14>
    d302:	f240 21b2 	movw	r1, #690	; 0x2b2
    d306:	2017      	movs	r0, #23
    d308:	f7ff fdbe 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d30c:	b2c0      	uxtb	r0, r0
    d30e:	bd10      	pop	{r4, pc}
    d310:	200010c8 	.word	0x200010c8

0000d314 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d318:	4604      	mov	r4, r0
    d31a:	788a      	ldrb	r2, [r1, #2]
    d31c:	7848      	ldrb	r0, [r1, #1]
    d31e:	4402      	add	r2, r0
    d320:	2aff      	cmp	r2, #255	; 0xff
    d322:	d902      	bls.n	d32a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    d324:	f240 11ad 	movw	r1, #429	; 0x1ad
    d328:	e020      	b.n	d36c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    d32a:	780a      	ldrb	r2, [r1, #0]
    d32c:	4282      	cmp	r2, r0
    d32e:	d902      	bls.n	d336 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
    d330:	f240 11b1 	movw	r1, #433	; 0x1b1
    d334:	e01a      	b.n	d36c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    d336:	9400      	str	r4, [sp, #0]
    d338:	b1dc      	cbz	r4, d372 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5e>
    d33a:	2600      	movs	r6, #0
    d33c:	f891 8001 	ldrb.w	r8, [r1, #1]
    d340:	f891 c002 	ldrb.w	ip, [r1, #2]
    d344:	7a08      	ldrb	r0, [r1, #8]
    d346:	eb0c 0208 	add.w	r2, ip, r8
    d34a:	4681      	mov	r9, r0
    d34c:	4410      	add	r0, r2
    d34e:	7a4b      	ldrb	r3, [r1, #9]
    d350:	794a      	ldrb	r2, [r1, #5]
    d352:	4418      	add	r0, r3
    d354:	b2c5      	uxtb	r5, r0
    d356:	42aa      	cmp	r2, r5
    d358:	d900      	bls.n	d35c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x48>
    d35a:	4615      	mov	r5, r2
    d35c:	78c8      	ldrb	r0, [r1, #3]
    d35e:	42a8      	cmp	r0, r5
    d360:	d900      	bls.n	d364 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    d362:	4605      	mov	r5, r0
    d364:	07a7      	lsls	r7, r4, #30
    d366:	d006      	beq.n	d376 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x62>
    d368:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    d36c:	2017      	movs	r0, #23
    d36e:	f7ff fd8b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d372:	2601      	movs	r6, #1
    d374:	e7e2      	b.n	d33c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    d376:	4f1a      	ldr	r7, [pc, #104]	; (d3e0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xcc>)
    d378:	f887 8000 	strb.w	r8, [r7]
    d37c:	f887 c001 	strb.w	ip, [r7, #1]
    d380:	70b8      	strb	r0, [r7, #2]
    d382:	7908      	ldrb	r0, [r1, #4]
    d384:	70f8      	strb	r0, [r7, #3]
    d386:	713a      	strb	r2, [r7, #4]
    d388:	7988      	ldrb	r0, [r1, #6]
    d38a:	7178      	strb	r0, [r7, #5]
    d38c:	79c8      	ldrb	r0, [r1, #7]
    d38e:	71b8      	strb	r0, [r7, #6]
    d390:	f887 9007 	strb.w	r9, [r7, #7]
    d394:	723b      	strb	r3, [r7, #8]
    d396:	4631      	mov	r1, r6
    d398:	4668      	mov	r0, sp
    d39a:	f000 f91b 	bl	d5d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    d39e:	2100      	movs	r1, #0
    d3a0:	460b      	mov	r3, r1
    d3a2:	9800      	ldr	r0, [sp, #0]
    d3a4:	1cc0      	adds	r0, r0, #3
    d3a6:	f020 0003 	bic.w	r0, r0, #3
    d3aa:	9000      	str	r0, [sp, #0]
    d3ac:	b966      	cbnz	r6, d3c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb4>
    d3ae:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    d3b2:	6310      	str	r0, [r2, #48]	; 0x30
    d3b4:	2000      	movs	r0, #0
    d3b6:	e005      	b.n	d3c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xb0>
    d3b8:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
    d3bc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    d3c0:	1c40      	adds	r0, r0, #1
    d3c2:	b2c0      	uxtb	r0, r0
    d3c4:	42a8      	cmp	r0, r5
    d3c6:	d3f7      	bcc.n	d3b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa4>
    d3c8:	9800      	ldr	r0, [sp, #0]
    d3ca:	1c49      	adds	r1, r1, #1
    d3cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    d3d0:	b2c9      	uxtb	r1, r1
    d3d2:	9000      	str	r0, [sp, #0]
    d3d4:	2909      	cmp	r1, #9
    d3d6:	d3e4      	bcc.n	d3a2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x8e>
    d3d8:	1b00      	subs	r0, r0, r4
    d3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d3de:	0000      	.short	0x0000
    d3e0:	200010c8 	.word	0x200010c8

0000d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    d3e4:	b570      	push	{r4, r5, r6, lr}
    d3e6:	4604      	mov	r4, r0
    d3e8:	7985      	ldrb	r5, [r0, #6]
    d3ea:	f000 f92f 	bl	d64c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d3ee:	4602      	mov	r2, r0
    d3f0:	480c      	ldr	r0, [pc, #48]	; (d424 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    d3f2:	79e1      	ldrb	r1, [r4, #7]
    d3f4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    d3f8:	e00e      	b.n	d418 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x34>
    d3fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    d3fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    d400:	b143      	cbz	r3, d414 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x30>
    d402:	1c4a      	adds	r2, r1, #1
    d404:	71e2      	strb	r2, [r4, #7]
    d406:	80a1      	strh	r1, [r4, #4]
    d408:	6b00      	ldr	r0, [r0, #48]	; 0x30
    d40a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    d40e:	6020      	str	r0, [r4, #0]
    d410:	2000      	movs	r0, #0
    d412:	bd70      	pop	{r4, r5, r6, pc}
    d414:	1c49      	adds	r1, r1, #1
    d416:	b2c9      	uxtb	r1, r1
    d418:	4291      	cmp	r1, r2
    d41a:	d3ee      	bcc.n	d3fa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x16>
    d41c:	71e1      	strb	r1, [r4, #7]
    d41e:	2005      	movs	r0, #5
    d420:	bd70      	pop	{r4, r5, r6, pc}
    d422:	0000      	.short	0x0000
    d424:	200010c8 	.word	0x200010c8

0000d428 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    d428:	b4f0      	push	{r4, r5, r6, r7}
    d42a:	4605      	mov	r5, r0
    d42c:	b111      	cbz	r1, d434 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xc>
    d42e:	2000      	movs	r0, #0
    d430:	b938      	cbnz	r0, d442 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    d432:	e001      	b.n	d438 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    d434:	2001      	movs	r0, #1
    d436:	e7fb      	b.n	d430 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    d438:	2901      	cmp	r1, #1
    d43a:	d002      	beq.n	d442 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    d43c:	2000      	movs	r0, #0
    d43e:	b938      	cbnz	r0, d450 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x28>
    d440:	e001      	b.n	d446 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1e>
    d442:	2001      	movs	r0, #1
    d444:	e7fb      	b.n	d43e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
    d446:	2902      	cmp	r1, #2
    d448:	d002      	beq.n	d450 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x28>
    d44a:	2000      	movs	r0, #0
    d44c:	b938      	cbnz	r0, d45e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    d44e:	e001      	b.n	d454 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x2c>
    d450:	2001      	movs	r0, #1
    d452:	e7fb      	b.n	d44c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    d454:	2903      	cmp	r1, #3
    d456:	d002      	beq.n	d45e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    d458:	2000      	movs	r0, #0
    d45a:	b938      	cbnz	r0, d46c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x44>
    d45c:	e001      	b.n	d462 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    d45e:	2001      	movs	r0, #1
    d460:	e7fb      	b.n	d45a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
    d462:	2904      	cmp	r1, #4
    d464:	d002      	beq.n	d46c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x44>
    d466:	2000      	movs	r0, #0
    d468:	b938      	cbnz	r0, d47a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x52>
    d46a:	e001      	b.n	d470 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>
    d46c:	2001      	movs	r0, #1
    d46e:	e7fb      	b.n	d468 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    d470:	2907      	cmp	r1, #7
    d472:	d002      	beq.n	d47a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x52>
    d474:	2000      	movs	r0, #0
    d476:	b938      	cbnz	r0, d488 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x60>
    d478:	e001      	b.n	d47e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x56>
    d47a:	2001      	movs	r0, #1
    d47c:	e7fb      	b.n	d476 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4e>
    d47e:	2908      	cmp	r1, #8
    d480:	d002      	beq.n	d488 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x60>
    d482:	2000      	movs	r0, #0
    d484:	b938      	cbnz	r0, d496 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6e>
    d486:	e001      	b.n	d48c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x64>
    d488:	2001      	movs	r0, #1
    d48a:	e7fb      	b.n	d484 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x5c>
    d48c:	2905      	cmp	r1, #5
    d48e:	d002      	beq.n	d496 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6e>
    d490:	2000      	movs	r0, #0
    d492:	b978      	cbnz	r0, d4b4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8c>
    d494:	e001      	b.n	d49a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x72>
    d496:	2001      	movs	r0, #1
    d498:	e7fb      	b.n	d492 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x6a>
    d49a:	2906      	cmp	r1, #6
    d49c:	d00a      	beq.n	d4b4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8c>
    d49e:	2000      	movs	r0, #0
    d4a0:	2800      	cmp	r0, #0
    d4a2:	d026      	beq.n	d4f2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xca>
    d4a4:	4f15      	ldr	r7, [pc, #84]	; (d4fc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xd4>)
    d4a6:	2300      	movs	r3, #0
    d4a8:	2901      	cmp	r1, #1
    d4aa:	7838      	ldrb	r0, [r7, #0]
    d4ac:	d004      	beq.n	d4b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x90>
    d4ae:	2908      	cmp	r1, #8
    d4b0:	d004      	beq.n	d4bc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x94>
    d4b2:	e005      	b.n	d4c0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x98>
    d4b4:	2001      	movs	r0, #1
    d4b6:	e7f3      	b.n	d4a0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x78>
    d4b8:	4603      	mov	r3, r0
    d4ba:	e001      	b.n	d4c0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x98>
    d4bc:	787a      	ldrb	r2, [r7, #1]
    d4be:	1883      	adds	r3, r0, r2
    d4c0:	eb07 0681 	add.w	r6, r7, r1, lsl #2
    d4c4:	2200      	movs	r2, #0
    d4c6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    d4ca:	5c7f      	ldrb	r7, [r7, r1]
    d4cc:	e00a      	b.n	d4e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xbc>
    d4ce:	18d0      	adds	r0, r2, r3
    d4d0:	f8d6 c030 	ldr.w	ip, [r6, #48]	; 0x30
    d4d4:	b280      	uxth	r0, r0
    d4d6:	f85c c020 	ldr.w	ip, [ip, r0, lsl #2]
    d4da:	f1bc 0f00 	cmp.w	ip, #0
    d4de:	d004      	beq.n	d4ea <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xc2>
    d4e0:	1c52      	adds	r2, r2, #1
    d4e2:	b292      	uxth	r2, r2
    d4e4:	4297      	cmp	r7, r2
    d4e6:	d8f2      	bhi.n	d4ce <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa6>
    d4e8:	4620      	mov	r0, r4
    d4ea:	8028      	strh	r0, [r5, #0]
    d4ec:	42a0      	cmp	r0, r4
    d4ee:	d102      	bne.n	d4f6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xce>
    d4f0:	2000      	movs	r0, #0
    d4f2:	bcf0      	pop	{r4, r5, r6, r7}
    d4f4:	4770      	bx	lr
    d4f6:	bcf0      	pop	{r4, r5, r6, r7}
    d4f8:	f000 b834 	b.w	d564 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    d4fc:	200010c8 	.word	0x200010c8

0000d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    d500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d504:	4607      	mov	r7, r0
    d506:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    d50a:	460c      	mov	r4, r1
    d50c:	f243 0602 	movw	r6, #12290	; 0x3002
    d510:	38ff      	subs	r0, #255	; 0xff
    d512:	d020      	beq.n	d556 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    d514:	2c09      	cmp	r4, #9
    d516:	d302      	bcc.n	d51e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    d518:	2007      	movs	r0, #7
    d51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d51e:	4638      	mov	r0, r7
    d520:	f000 f848 	bl	d5b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d524:	0005      	movs	r5, r0
    d526:	d016      	beq.n	d556 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    d528:	480c      	ldr	r0, [pc, #48]	; (d55c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    d52a:	4629      	mov	r1, r5
    d52c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    d530:	4638      	mov	r0, r7
    d532:	4790      	blx	r2
    d534:	480a      	ldr	r0, [pc, #40]	; (d560 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    d536:	2100      	movs	r1, #0
    d538:	eb00 0684 	add.w	r6, r0, r4, lsl #2
    d53c:	6b30      	ldr	r0, [r6, #48]	; 0x30
    d53e:	f840 1027 	str.w	r1, [r0, r7, lsl #2]
    d542:	4620      	mov	r0, r4
    d544:	f000 f878 	bl	d638 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    d548:	4602      	mov	r2, r0
    d54a:	4629      	mov	r1, r5
    d54c:	68f0      	ldr	r0, [r6, #12]
    d54e:	f011 fda0 	bl	1f092 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    d552:	2000      	movs	r0, #0
    d554:	e7e1      	b.n	d51a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    d556:	4630      	mov	r0, r6
    d558:	e7df      	b.n	d51a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    d55a:	0000      	.short	0x0000
    d55c:	0000d690 	.word	0x0000d690
    d560:	200010c8 	.word	0x200010c8
    d564:	b570      	push	{r4, r5, r6, lr}
    d566:	460e      	mov	r6, r1
    d568:	4605      	mov	r5, r0
    d56a:	f011 fdcc 	bl	1f106 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    d56e:	b158      	cbz	r0, d588 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    d570:	480f      	ldr	r0, [pc, #60]	; (d5b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    d572:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    d576:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d578:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    d57c:	b138      	cbz	r0, d58e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    d57e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    d582:	2017      	movs	r0, #23
    d584:	f7ff fc80 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d588:	f240 1189 	movw	r1, #393	; 0x189
    d58c:	e7f9      	b.n	d582 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    d58e:	68e0      	ldr	r0, [r4, #12]
    d590:	2800      	cmp	r0, #0
    d592:	d00b      	beq.n	d5ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    d594:	4630      	mov	r0, r6
    d596:	f000 f84f 	bl	d638 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    d59a:	4601      	mov	r1, r0
    d59c:	68e0      	ldr	r0, [r4, #12]
    d59e:	f011 fd20 	bl	1efe2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    d5a2:	2800      	cmp	r0, #0
    d5a4:	d002      	beq.n	d5ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    d5a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d5a8:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    d5ac:	bd70      	pop	{r4, r5, r6, pc}
    d5ae:	0000      	.short	0x0000
    d5b0:	200010c8 	.word	0x200010c8
    d5b4:	b570      	push	{r4, r5, r6, lr}
    d5b6:	460c      	mov	r4, r1
    d5b8:	4605      	mov	r5, r0
    d5ba:	f011 fda4 	bl	1f106 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    d5be:	2800      	cmp	r0, #0
    d5c0:	d005      	beq.n	d5ce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    d5c2:	4803      	ldr	r0, [pc, #12]	; (d5d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    d5c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    d5c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
    d5ca:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    d5ce:	bd70      	pop	{r4, r5, r6, pc}
    d5d0:	200010c8 	.word	0x200010c8
    d5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d5d8:	4f16      	ldr	r7, [pc, #88]	; (d634 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    d5da:	4688      	mov	r8, r1
    d5dc:	4605      	mov	r5, r0
    d5de:	2400      	movs	r4, #0
    d5e0:	6828      	ldr	r0, [r5, #0]
    d5e2:	1cc0      	adds	r0, r0, #3
    d5e4:	f020 0003 	bic.w	r0, r0, #3
    d5e8:	6028      	str	r0, [r5, #0]
    d5ea:	4620      	mov	r0, r4
    d5ec:	f000 f824 	bl	d638 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    d5f0:	5d39      	ldrb	r1, [r7, r4]
    d5f2:	4341      	muls	r1, r0
    d5f4:	f1b8 0f00 	cmp.w	r8, #0
    d5f8:	d001      	beq.n	d5fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    d5fa:	2000      	movs	r0, #0
    d5fc:	e000      	b.n	d600 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    d5fe:	6828      	ldr	r0, [r5, #0]
    d600:	9000      	str	r0, [sp, #0]
    d602:	b118      	cbz	r0, d60c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    d604:	2600      	movs	r6, #0
    d606:	b11e      	cbz	r6, d610 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    d608:	2000      	movs	r0, #0
    d60a:	e002      	b.n	d612 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x112>
    d60c:	2601      	movs	r6, #1
    d60e:	e7fa      	b.n	d606 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x106>
    d610:	4668      	mov	r0, sp
    d612:	f011 fd17 	bl	1f044 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    d616:	b91e      	cbnz	r6, d620 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x120>
    d618:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    d61c:	9a00      	ldr	r2, [sp, #0]
    d61e:	60ca      	str	r2, [r1, #12]
    d620:	6829      	ldr	r1, [r5, #0]
    d622:	1c64      	adds	r4, r4, #1
    d624:	4408      	add	r0, r1
    d626:	b2e4      	uxtb	r4, r4
    d628:	6028      	str	r0, [r5, #0]
    d62a:	2c09      	cmp	r4, #9
    d62c:	d3d8      	bcc.n	d5e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    d62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d632:	0000      	.short	0x0000
    d634:	200010c8 	.word	0x200010c8
    d638:	4903      	ldr	r1, [pc, #12]	; (d648 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    d63a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    d63e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d642:	1cc0      	adds	r0, r0, #3
    d644:	4008      	ands	r0, r1
    d646:	4770      	bx	lr
    d648:	0000d6b4 	.word	0x0000d6b4
    d64c:	4b0f      	ldr	r3, [pc, #60]	; (d68c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18c>)
    d64e:	7818      	ldrb	r0, [r3, #0]
    d650:	7859      	ldrb	r1, [r3, #1]
    d652:	4408      	add	r0, r1
    d654:	7a19      	ldrb	r1, [r3, #8]
    d656:	4408      	add	r0, r1
    d658:	b2c2      	uxtb	r2, r0
    d65a:	7898      	ldrb	r0, [r3, #2]
    d65c:	4282      	cmp	r2, r0
    d65e:	d300      	bcc.n	d662 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x162>
    d660:	4610      	mov	r0, r2
    d662:	78d9      	ldrb	r1, [r3, #3]
    d664:	4288      	cmp	r0, r1
    d666:	d200      	bcs.n	d66a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16a>
    d668:	4608      	mov	r0, r1
    d66a:	791a      	ldrb	r2, [r3, #4]
    d66c:	4290      	cmp	r0, r2
    d66e:	d200      	bcs.n	d672 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x172>
    d670:	4610      	mov	r0, r2
    d672:	7959      	ldrb	r1, [r3, #5]
    d674:	4288      	cmp	r0, r1
    d676:	d200      	bcs.n	d67a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17a>
    d678:	4608      	mov	r0, r1
    d67a:	799a      	ldrb	r2, [r3, #6]
    d67c:	4290      	cmp	r0, r2
    d67e:	d200      	bcs.n	d682 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x182>
    d680:	4610      	mov	r0, r2
    d682:	79d9      	ldrb	r1, [r3, #7]
    d684:	4288      	cmp	r0, r1
    d686:	d200      	bcs.n	d68a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x18a>
    d688:	4608      	mov	r0, r1
    d68a:	4770      	bx	lr
    d68c:	200010c8 	.word	0x200010c8
    d690:	000210e1 	.word	0x000210e1
    d694:	00020ebb 	.word	0x00020ebb
    d698:	00020549 	.word	0x00020549
    d69c:	00022995 	.word	0x00022995
    d6a0:	00022a83 	.word	0x00022a83
    d6a4:	00022a73 	.word	0x00022a73
    d6a8:	00022a89 	.word	0x00022a89
    d6ac:	0002110b 	.word	0x0002110b
    d6b0:	000210e5 	.word	0x000210e5
    d6b4:	04080378 	.word	0x04080378
    d6b8:	00900160 	.word	0x00900160
    d6bc:	013000a8 	.word	0x013000a8
    d6c0:	00680018 	.word	0x00680018
    d6c4:	000000c8 	.word	0x000000c8

0000d6c8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    d6c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6cc:	4c24      	ldr	r4, [pc, #144]	; (d760 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    d6ce:	4606      	mov	r6, r0
    d6d0:	b081      	sub	sp, #4
    d6d2:	6820      	ldr	r0, [r4, #0]
    d6d4:	469a      	mov	sl, r3
    d6d6:	4693      	mov	fp, r2
    d6d8:	b158      	cbz	r0, d6f2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    d6da:	7a01      	ldrb	r1, [r0, #8]
    d6dc:	42b1      	cmp	r1, r6
    d6de:	d903      	bls.n	d6e8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    d6e0:	6840      	ldr	r0, [r0, #4]
    d6e2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    d6e6:	b140      	cbz	r0, d6fa <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    d6e8:	f243 0002 	movw	r0, #12290	; 0x3002
    d6ec:	b005      	add	sp, #20
    d6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6f2:	21a5      	movs	r1, #165	; 0xa5
    d6f4:	2018      	movs	r0, #24
    d6f6:	f7ff fbc7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6fa:	4619      	mov	r1, r3
    d6fc:	9802      	ldr	r0, [sp, #8]
    d6fe:	f011 fd25 	bl	1f14c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d702:	4680      	mov	r8, r0
    d704:	4658      	mov	r0, fp
    d706:	990e      	ldr	r1, [sp, #56]	; 0x38
    d708:	f011 fd16 	bl	1f138 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d70c:	4605      	mov	r5, r0
    d70e:	eb08 0005 	add.w	r0, r8, r5
    d712:	1d00      	adds	r0, r0, #4
    d714:	b287      	uxth	r7, r0
    d716:	6820      	ldr	r0, [r4, #0]
    d718:	46a1      	mov	r9, r4
    d71a:	4639      	mov	r1, r7
    d71c:	6800      	ldr	r0, [r0, #0]
    d71e:	f011 fc60 	bl	1efe2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    d722:	0004      	movs	r4, r0
    d724:	d01a      	beq.n	d75c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    d726:	8067      	strh	r7, [r4, #2]
    d728:	8025      	strh	r5, [r4, #0]
    d72a:	4629      	mov	r1, r5
    d72c:	1d20      	adds	r0, r4, #4
    d72e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    d730:	4607      	mov	r7, r0
    d732:	465a      	mov	r2, fp
    d734:	2309      	movs	r3, #9
    d736:	9500      	str	r5, [sp, #0]
    d738:	f011 fbc9 	bl	1eece <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    d73c:	8820      	ldrh	r0, [r4, #0]
    d73e:	4641      	mov	r1, r8
    d740:	4438      	add	r0, r7
    d742:	230a      	movs	r3, #10
    d744:	9a02      	ldr	r2, [sp, #8]
    d746:	f8cd a000 	str.w	sl, [sp]
    d74a:	f011 fbc0 	bl	1eece <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    d74e:	f8d9 0000 	ldr.w	r0, [r9]
    d752:	6840      	ldr	r0, [r0, #4]
    d754:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    d758:	2000      	movs	r0, #0
    d75a:	e7c7      	b.n	d6ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    d75c:	2004      	movs	r0, #4
    d75e:	e7c5      	b.n	d6ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    d760:	20000068 	.word	0x20000068

0000d764 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    d764:	b570      	push	{r4, r5, r6, lr}
    d766:	4c14      	ldr	r4, [pc, #80]	; (d7b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    d768:	6823      	ldr	r3, [r4, #0]
    d76a:	b18b      	cbz	r3, d790 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    d76c:	7a19      	ldrb	r1, [r3, #8]
    d76e:	4281      	cmp	r1, r0
    d770:	d912      	bls.n	d798 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    d772:	685a      	ldr	r2, [r3, #4]
    d774:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    d778:	b171      	cbz	r1, d798 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    d77a:	2500      	movs	r5, #0
    d77c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    d780:	884a      	ldrh	r2, [r1, #2]
    d782:	6818      	ldr	r0, [r3, #0]
    d784:	f011 fc85 	bl	1f092 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    d788:	6821      	ldr	r1, [r4, #0]
    d78a:	2000      	movs	r0, #0
    d78c:	7a0a      	ldrb	r2, [r1, #8]
    d78e:	e00c      	b.n	d7aa <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    d790:	21c6      	movs	r1, #198	; 0xc6
    d792:	2018      	movs	r0, #24
    d794:	f7ff fb78 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d798:	f243 0002 	movw	r0, #12290	; 0x3002
    d79c:	bd70      	pop	{r4, r5, r6, pc}
    d79e:	684b      	ldr	r3, [r1, #4]
    d7a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d7a4:	b933      	cbnz	r3, d7b4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    d7a6:	1c40      	adds	r0, r0, #1
    d7a8:	b2c0      	uxtb	r0, r0
    d7aa:	4282      	cmp	r2, r0
    d7ac:	d8f7      	bhi.n	d79e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    d7ae:	6808      	ldr	r0, [r1, #0]
    d7b0:	f011 fc64 	bl	1f07c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    d7b4:	2000      	movs	r0, #0
    d7b6:	bd70      	pop	{r4, r5, r6, pc}
    d7b8:	20000068 	.word	0x20000068

0000d7bc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7c0:	460d      	mov	r5, r1
    d7c2:	0004      	movs	r4, r0
    d7c4:	4690      	mov	r8, r2
    d7c6:	f04f 0600 	mov.w	r6, #0
    d7ca:	d006      	beq.n	d7da <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    d7cc:	2700      	movs	r7, #0
    d7ce:	07a0      	lsls	r0, r4, #30
    d7d0:	d005      	beq.n	d7de <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    d7d2:	2186      	movs	r1, #134	; 0x86
    d7d4:	2018      	movs	r0, #24
    d7d6:	f7ff fb57 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7da:	2701      	movs	r7, #1
    d7dc:	e7f7      	b.n	d7ce <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    d7de:	b1cd      	cbz	r5, d814 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    d7e0:	4611      	mov	r1, r2
    d7e2:	2000      	movs	r0, #0
    d7e4:	f011 fc2e 	bl	1f044 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    d7e8:	300c      	adds	r0, #12
    d7ea:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    d7ee:	b98f      	cbnz	r7, d814 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    d7f0:	4f0a      	ldr	r7, [pc, #40]	; (d81c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    d7f2:	f104 000c 	add.w	r0, r4, #12
    d7f6:	00aa      	lsls	r2, r5, #2
    d7f8:	603c      	str	r4, [r7, #0]
    d7fa:	7225      	strb	r5, [r4, #8]
    d7fc:	6060      	str	r0, [r4, #4]
    d7fe:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    d802:	6020      	str	r0, [r4, #0]
    d804:	2100      	movs	r1, #0
    d806:	6860      	ldr	r0, [r4, #4]
    d808:	f015 fce9 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d80c:	4641      	mov	r1, r8
    d80e:	6838      	ldr	r0, [r7, #0]
    d810:	f011 fc18 	bl	1f044 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    d814:	4630      	mov	r0, r6
    d816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d81a:	0000      	.short	0x0000
    d81c:	20000068 	.word	0x20000068

0000d820 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    d820:	b570      	push	{r4, r5, r6, lr}
    d822:	4d08      	ldr	r5, [pc, #32]	; (d844 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    d824:	6828      	ldr	r0, [r5, #0]
    d826:	2800      	cmp	r0, #0
    d828:	d00a      	beq.n	d840 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    d82a:	2400      	movs	r4, #0
    d82c:	e004      	b.n	d838 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    d82e:	4620      	mov	r0, r4
    d830:	f7ff ff98 	bl	d764 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    d834:	1c64      	adds	r4, r4, #1
    d836:	b2e4      	uxtb	r4, r4
    d838:	6828      	ldr	r0, [r5, #0]
    d83a:	7a00      	ldrb	r0, [r0, #8]
    d83c:	42a0      	cmp	r0, r4
    d83e:	d8f6      	bhi.n	d82e <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    d840:	bd70      	pop	{r4, r5, r6, pc}
    d842:	0000      	.short	0x0000
    d844:	20000068 	.word	0x20000068

0000d848 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    d848:	4909      	ldr	r1, [pc, #36]	; (d870 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    d84a:	b510      	push	{r4, lr}
    d84c:	4602      	mov	r2, r0
    d84e:	6809      	ldr	r1, [r1, #0]
    d850:	2000      	movs	r0, #0
    d852:	b149      	cbz	r1, d868 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    d854:	7a0b      	ldrb	r3, [r1, #8]
    d856:	4293      	cmp	r3, r2
    d858:	d905      	bls.n	d866 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    d85a:	6849      	ldr	r1, [r1, #4]
    d85c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    d860:	2900      	cmp	r1, #0
    d862:	d000      	beq.n	d866 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    d864:	1d08      	adds	r0, r1, #4
    d866:	bd10      	pop	{r4, pc}
    d868:	21ec      	movs	r1, #236	; 0xec
    d86a:	2018      	movs	r0, #24
    d86c:	f7ff fb0c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d870:	20000068 	.word	0x20000068

0000d874 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    d874:	490a      	ldr	r1, [pc, #40]	; (d8a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    d876:	b510      	push	{r4, lr}
    d878:	4602      	mov	r2, r0
    d87a:	6809      	ldr	r1, [r1, #0]
    d87c:	2000      	movs	r0, #0
    d87e:	b159      	cbz	r1, d898 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    d880:	7a0b      	ldrb	r3, [r1, #8]
    d882:	4293      	cmp	r3, r2
    d884:	d907      	bls.n	d896 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    d886:	6849      	ldr	r1, [r1, #4]
    d888:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    d88c:	2900      	cmp	r1, #0
    d88e:	d002      	beq.n	d896 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    d890:	f831 0b04 	ldrh.w	r0, [r1], #4
    d894:	4408      	add	r0, r1
    d896:	bd10      	pop	{r4, pc}
    d898:	21fa      	movs	r1, #250	; 0xfa
    d89a:	2018      	movs	r0, #24
    d89c:	f7ff faf4 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8a0:	20000068 	.word	0x20000068
    d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8a8:	4e1c      	ldr	r6, [pc, #112]	; (d91c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xa8>)
    d8aa:	6845      	ldr	r5, [r0, #4]
    d8ac:	4604      	mov	r4, r0
    d8ae:	2200      	movs	r2, #0
    d8b0:	b1a1      	cbz	r1, d8dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x68>
    d8b2:	2001      	movs	r0, #1
    d8b4:	7060      	strb	r0, [r4, #1]
    d8b6:	8870      	ldrh	r0, [r6, #2]
    d8b8:	0883      	lsrs	r3, r0, #2
    d8ba:	2000      	movs	r0, #0
    d8bc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d8c0:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    d8c4:	830a      	strh	r2, [r1, #24]
    d8c6:	840b      	strh	r3, [r1, #32]
    d8c8:	fb00 5103 	mla	r1, r0, r3, r5
    d8cc:	6071      	str	r1, [r6, #4]
    d8ce:	1821      	adds	r1, r4, r0
    d8d0:	1c40      	adds	r0, r0, #1
    d8d2:	750a      	strb	r2, [r1, #20]
    d8d4:	2804      	cmp	r0, #4
    d8d6:	d3f1      	bcc.n	d8bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    d8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8dc:	7062      	strb	r2, [r4, #1]
    d8de:	2000      	movs	r0, #0
    d8e0:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d8e4:	830a      	strh	r2, [r1, #24]
    d8e6:	840a      	strh	r2, [r1, #32]
    d8e8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    d8ec:	604a      	str	r2, [r1, #4]
    d8ee:	1821      	adds	r1, r4, r0
    d8f0:	1c40      	adds	r0, r0, #1
    d8f2:	750a      	strb	r2, [r1, #20]
    d8f4:	2804      	cmp	r0, #4
    d8f6:	d3f3      	bcc.n	d8e0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    d8f8:	8870      	ldrh	r0, [r6, #2]
    d8fa:	f011 fcc6 	bl	1f28a <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x12a>
    d8fe:	4607      	mov	r7, r0
    d900:	8870      	ldrh	r0, [r6, #2]
    d902:	f011 fcc9 	bl	1f298 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x138>
    d906:	6065      	str	r5, [r4, #4]
    d908:	8420      	strh	r0, [r4, #32]
    d90a:	1829      	adds	r1, r5, r0
    d90c:	60a1      	str	r1, [r4, #8]
    d90e:	8467      	strh	r7, [r4, #34]	; 0x22
    d910:	60e5      	str	r5, [r4, #12]
    d912:	84a0      	strh	r0, [r4, #36]	; 0x24
    d914:	6121      	str	r1, [r4, #16]
    d916:	84e7      	strh	r7, [r4, #38]	; 0x26
    d918:	e7de      	b.n	d8d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x64>
    d91a:	0000      	.short	0x0000
    d91c:	2000006c 	.word	0x2000006c

0000d920 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    d920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d924:	b168      	cbz	r0, d942 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    d926:	2600      	movs	r6, #0
    d928:	4411      	add	r1, r2
    d92a:	f8df 809c 	ldr.w	r8, [pc, #156]	; d9c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa8>
    d92e:	b2cf      	uxtb	r7, r1
    d930:	2400      	movs	r4, #0
    d932:	f888 7000 	strb.w	r7, [r8]
    d936:	0781      	lsls	r1, r0, #30
    d938:	d005      	beq.n	d946 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x26>
    d93a:	214e      	movs	r1, #78	; 0x4e
    d93c:	2009      	movs	r0, #9
    d93e:	f7ff faa3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d942:	2601      	movs	r6, #1
    d944:	e7f0      	b.n	d928 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    d946:	2b1f      	cmp	r3, #31
    d948:	d804      	bhi.n	d954 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x34>
    d94a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d94e:	ea01 0583 	and.w	r5, r1, r3, lsl #2
    d952:	e009      	b.n	d968 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    d954:	0059      	lsls	r1, r3, #1
    d956:	2bff      	cmp	r3, #255	; 0xff
    d958:	d90c      	bls.n	d974 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    d95a:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    d95e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    d962:	d200      	bcs.n	d966 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x46>
    d964:	4611      	mov	r1, r2
    d966:	b28d      	uxth	r5, r1
    d968:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d96c:	1ced      	adds	r5, r5, #3
    d96e:	400d      	ands	r5, r1
    d970:	b136      	cbz	r6, d980 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    d972:	e009      	b.n	d988 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    d974:	227c      	movs	r2, #124	; 0x7c
    d976:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    d97a:	d3f4      	bcc.n	d966 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x46>
    d97c:	217c      	movs	r1, #124	; 0x7c
    d97e:	e7f2      	b.n	d966 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x46>
    d980:	f8c8 0004 	str.w	r0, [r8, #4]
    d984:	f8a8 5002 	strh.w	r5, [r8, #2]
    d988:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    d98c:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
    d990:	2100      	movs	r1, #0
    d992:	f04f 0901 	mov.w	r9, #1
    d996:	e00f      	b.n	d9b8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x98>
    d998:	b95e      	cbnz	r6, d9b2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    d99a:	f8d8 4004 	ldr.w	r4, [r8, #4]
    d99e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    d9a2:	eb00 0c02 	add.w	ip, r0, r2
    d9a6:	f804 9033 	strb.w	r9, [r4, r3, lsl #3]
    d9aa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    d9ae:	f8c3 c004 	str.w	ip, [r3, #4]
    d9b2:	1c49      	adds	r1, r1, #1
    d9b4:	442a      	add	r2, r5
    d9b6:	b2c9      	uxtb	r1, r1
    d9b8:	42b9      	cmp	r1, r7
    d9ba:	d3ed      	bcc.n	d998 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x78>
    d9bc:	1dd2      	adds	r2, r2, #7
    d9be:	f022 0007 	bic.w	r0, r2, #7
    d9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9c6:	0000      	.short	0x0000
    d9c8:	2000006c 	.word	0x2000006c

0000d9cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    d9cc:	b570      	push	{r4, r5, r6, lr}
    d9ce:	4811      	ldr	r0, [pc, #68]	; (da14 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    d9d0:	2400      	movs	r4, #0
    d9d2:	4621      	mov	r1, r4
    d9d4:	7802      	ldrb	r2, [r0, #0]
    d9d6:	e00c      	b.n	d9f2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x26>
    d9d8:	6845      	ldr	r5, [r0, #4]
    d9da:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    d9de:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
    d9e2:	b123      	cbz	r3, d9ee <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x22>
    d9e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d9e8:	eb05 04c1 	add.w	r4, r5, r1, lsl #3
    d9ec:	e003      	b.n	d9f6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2a>
    d9ee:	1c49      	adds	r1, r1, #1
    d9f0:	b2c9      	uxtb	r1, r1
    d9f2:	4291      	cmp	r1, r2
    d9f4:	d3f0      	bcc.n	d9d8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    d9f6:	b144      	cbz	r4, da0a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3e>
    d9f8:	2500      	movs	r5, #0
    d9fa:	70a5      	strb	r5, [r4, #2]
    d9fc:	2101      	movs	r1, #1
    d9fe:	4620      	mov	r0, r4
    da00:	f7ff ff50 	bl	d8a4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    da04:	7025      	strb	r5, [r4, #0]
    da06:	4620      	mov	r0, r4
    da08:	bd70      	pop	{r4, r5, r6, pc}
    da0a:	21a9      	movs	r1, #169	; 0xa9
    da0c:	2009      	movs	r0, #9
    da0e:	f7ff fa3b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da12:	0000      	.short	0x0000
    da14:	2000006c 	.word	0x2000006c

0000da18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    da18:	4804      	ldr	r0, [pc, #16]	; (da2c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    da1a:	b510      	push	{r4, lr}
    da1c:	8840      	ldrh	r0, [r0, #2]
    da1e:	0884      	lsrs	r4, r0, #2
    da20:	f011 fc3a 	bl	1f298 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x138>
    da24:	4284      	cmp	r4, r0
    da26:	d300      	bcc.n	da2a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    da28:	4620      	mov	r0, r4
    da2a:	bd10      	pop	{r4, pc}
    da2c:	2000006c 	.word	0x2000006c

0000da30 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    da30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    da34:	460c      	mov	r4, r1
    da36:	4607      	mov	r7, r0
    da38:	4616      	mov	r6, r2
    da3a:	212e      	movs	r1, #46	; 0x2e
    da3c:	4610      	mov	r0, r2
    da3e:	460d      	mov	r5, r1
    da40:	4622      	mov	r2, r4
    da42:	f011 fa8d 	bl	1ef60 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    da46:	4680      	mov	r8, r0
    da48:	b157      	cbz	r7, da60 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    da4a:	4638      	mov	r0, r7
    da4c:	4641      	mov	r1, r8
    da4e:	4632      	mov	r2, r6
    da50:	462b      	mov	r3, r5
    da52:	9400      	str	r4, [sp, #0]
    da54:	f011 fa3b 	bl	1eece <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    da58:	4803      	ldr	r0, [pc, #12]	; (da68 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    da5a:	6047      	str	r7, [r0, #4]
    da5c:	7004      	strb	r4, [r0, #0]
    da5e:	7046      	strb	r6, [r0, #1]
    da60:	4640      	mov	r0, r8
    da62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da66:	0000      	.short	0x0000
    da68:	20000074 	.word	0x20000074
    da6c:	b510      	push	{r4, lr}
    da6e:	4c08      	ldr	r4, [pc, #32]	; (da90 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x60>)
    da70:	b139      	cbz	r1, da82 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x52>
    da72:	2106      	movs	r1, #6
    da74:	f7ff fc40 	bl	d2f8 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>
    da78:	88e2      	ldrh	r2, [r4, #6]
    da7a:	68e1      	ldr	r1, [r4, #12]
    da7c:	fb00 1002 	mla	r0, r0, r2, r1
    da80:	bd10      	pop	{r4, pc}
    da82:	2105      	movs	r1, #5
    da84:	f7ff fc38 	bl	d2f8 <sym_U5M5ICZ7T3JIJRQNTPYBHZSWROAVS7HIKZONU4A>
    da88:	8862      	ldrh	r2, [r4, #2]
    da8a:	68a1      	ldr	r1, [r4, #8]
    da8c:	e7f6      	b.n	da7c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x4c>
    da8e:	0000      	.short	0x0000
    da90:	2000007c 	.word	0x2000007c

0000da94 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ>:
    da94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da96:	460e      	mov	r6, r1
    da98:	4604      	mov	r4, r0
    da9a:	4617      	mov	r7, r2
    da9c:	2103      	movs	r1, #3
    da9e:	20f7      	movs	r0, #247	; 0xf7
    daa0:	f011 fcbb 	bl	1f41a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x12>
    daa4:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    daa8:	1cc0      	adds	r0, r0, #3
    daaa:	ea00 0501 	and.w	r5, r0, r1
    daae:	b1c4      	cbz	r4, dae2 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x4e>
    dab0:	07a0      	lsls	r0, r4, #30
    dab2:	d003      	beq.n	dabc <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x28>
    dab4:	2171      	movs	r1, #113	; 0x71
    dab6:	2019      	movs	r0, #25
    dab8:	f7ff f9e6 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dabc:	480a      	ldr	r0, [pc, #40]	; (dae8 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x54>)
    dabe:	60c4      	str	r4, [r0, #12]
    dac0:	80c5      	strh	r5, [r0, #6]
    dac2:	2400      	movs	r4, #0
    dac4:	e00b      	b.n	dade <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x4a>
    dac6:	2101      	movs	r1, #1
    dac8:	4620      	mov	r0, r4
    daca:	f7ff ffcf 	bl	da6c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x3c>
    dace:	2303      	movs	r3, #3
    dad0:	22f7      	movs	r2, #247	; 0xf7
    dad2:	4629      	mov	r1, r5
    dad4:	9700      	str	r7, [sp, #0]
    dad6:	f011 fc9a 	bl	1f40e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dada:	1c64      	adds	r4, r4, #1
    dadc:	b2a4      	uxth	r4, r4
    dade:	42b4      	cmp	r4, r6
    dae0:	d3f1      	bcc.n	dac6 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x32>
    dae2:	fb06 f005 	mul.w	r0, r6, r5
    dae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dae8:	2000007c 	.word	0x2000007c
    daec:	b530      	push	{r4, r5, lr}
    daee:	490d      	ldr	r1, [pc, #52]	; (db24 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x90>)
    daf0:	2001      	movs	r0, #1
    daf2:	6048      	str	r0, [r1, #4]
    daf4:	1e82      	subs	r2, r0, #2
    daf6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    dafa:	490b      	ldr	r1, [pc, #44]	; (db28 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x94>)
    dafc:	6088      	str	r0, [r1, #8]
    dafe:	2300      	movs	r3, #0
    db00:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    db04:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    db08:	4c08      	ldr	r4, [pc, #32]	; (db2c <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x98>)
    db0a:	6023      	str	r3, [r4, #0]
    db0c:	1d25      	adds	r5, r4, #4
    db0e:	6028      	str	r0, [r5, #0]
    db10:	6088      	str	r0, [r1, #8]
    db12:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    db16:	6023      	str	r3, [r4, #0]
    db18:	6028      	str	r0, [r5, #0]
    db1a:	4906      	ldr	r1, [pc, #24]	; (db34 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0xa0>)
    db1c:	4804      	ldr	r0, [pc, #16]	; (db30 <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x9c>)
    db1e:	6008      	str	r0, [r1, #0]
    db20:	bd30      	pop	{r4, r5, pc}
    db22:	0000      	.short	0x0000
    db24:	4000e000 	.word	0x4000e000
    db28:	4000f000 	.word	0x4000f000
    db2c:	4000f500 	.word	0x4000f500
    db30:	3ff60000 	.word	0x3ff60000
    db34:	4001f508 	.word	0x4001f508

0000db38 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    db38:	b510      	push	{r4, lr}
    db3a:	f7ff ffd7 	bl	daec <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x58>
    db3e:	f011 fc8c 	bl	1f45a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x52>
    db42:	4903      	ldr	r1, [pc, #12]	; (db50 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    db44:	4801      	ldr	r0, [pc, #4]	; (db4c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    db46:	6008      	str	r0, [r1, #0]
    db48:	bd10      	pop	{r4, pc}
    db4a:	0000      	.short	0x0000
    db4c:	3ff60000 	.word	0x3ff60000
    db50:	4001f508 	.word	0x4001f508

0000db54 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    db54:	b510      	push	{r4, lr}
    db56:	f7ff ffc9 	bl	daec <sym_TIAUTANBVJ6NRP35UIGQKSI3E327PMCFMGMLOVQ+0x58>
    db5a:	f011 fc7e 	bl	1f45a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x52>
    db5e:	f000 f887 	bl	dc70 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    db62:	4905      	ldr	r1, [pc, #20]	; (db78 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    db64:	4803      	ldr	r0, [pc, #12]	; (db74 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    db66:	6008      	str	r0, [r1, #0]
    db68:	f000 f8b8 	bl	dcdc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    db6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db70:	f000 b8dc 	b.w	dd2c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    db74:	3ff60000 	.word	0x3ff60000
    db78:	4001f508 	.word	0x4001f508
    db7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db80:	4682      	mov	sl, r0
    db82:	4838      	ldr	r0, [pc, #224]	; (dc64 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    db84:	f015 f9cf 	bl	22f26 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    db88:	f8df b0d8 	ldr.w	fp, [pc, #216]	; dc64 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    db8c:	b128      	cbz	r0, db9a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    db8e:	2601      	movs	r6, #1
    db90:	f10b 0001 	add.w	r0, fp, #1
    db94:	21ff      	movs	r1, #255	; 0xff
    db96:	7001      	strb	r1, [r0, #0]
    db98:	e000      	b.n	db9c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    db9a:	2600      	movs	r6, #0
    db9c:	f44f 7580 	mov.w	r5, #256	; 0x100
    dba0:	4c31      	ldr	r4, [pc, #196]	; (dc68 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    dba2:	f04f 0800 	mov.w	r8, #0
    dba6:	1d2f      	adds	r7, r5, #4
    dba8:	2101      	movs	r1, #1
    dbaa:	6061      	str	r1, [r4, #4]
    dbac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    dbb0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    dbb4:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    dbb8:	6021      	str	r1, [r4, #0]
    dbba:	f8df 90b0 	ldr.w	r9, [pc, #176]	; dc6c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    dbbe:	e01c      	b.n	dbfa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    dbc0:	f8d9 0000 	ldr.w	r0, [r9]
    dbc4:	06c0      	lsls	r0, r0, #27
    dbc6:	d518      	bpl.n	dbfa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    dbc8:	200e      	movs	r0, #14
    dbca:	f011 fc55 	bl	1f478 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x70>
    dbce:	f3ef 8010 	mrs	r0, PRIMASK
    dbd2:	9000      	str	r0, [sp, #0]
    dbd4:	b672      	cpsid	i
    dbd6:	2103      	movs	r1, #3
    dbd8:	4620      	mov	r0, r4
    dbda:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    dbde:	4629      	mov	r1, r5
    dbe0:	f011 fc57 	bl	1f492 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    dbe4:	b930      	cbnz	r0, dbf4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    dbe6:	4639      	mov	r1, r7
    dbe8:	4620      	mov	r0, r4
    dbea:	f011 fc52 	bl	1f492 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    dbee:	b908      	cbnz	r0, dbf4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    dbf0:	f015 fa30 	bl	23054 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    dbf4:	9800      	ldr	r0, [sp, #0]
    dbf6:	b900      	cbnz	r0, dbfa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    dbf8:	b662      	cpsie	i
    dbfa:	4629      	mov	r1, r5
    dbfc:	4620      	mov	r0, r4
    dbfe:	f011 fc48 	bl	1f492 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    dc02:	b928      	cbnz	r0, dc10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    dc04:	4639      	mov	r1, r7
    dc06:	4620      	mov	r0, r4
    dc08:	f011 fc43 	bl	1f492 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    dc0c:	2800      	cmp	r0, #0
    dc0e:	d0d7      	beq.n	dbc0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    dc10:	4639      	mov	r1, r7
    dc12:	4620      	mov	r0, r4
    dc14:	f011 fc3d 	bl	1f492 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x8a>
    dc18:	2800      	cmp	r0, #0
    dc1a:	d1c5      	bne.n	dba8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    dc1c:	bb06      	cbnz	r6, dc60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    dc1e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    dc22:	f88d 1000 	strb.w	r1, [sp]
    dc26:	9900      	ldr	r1, [sp, #0]
    dc28:	9100      	str	r1, [sp, #0]
    dc2a:	f89d 1000 	ldrb.w	r1, [sp]
    dc2e:	b109      	cbz	r1, dc34 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    dc30:	2501      	movs	r5, #1
    dc32:	e000      	b.n	dc36 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    dc34:	2500      	movs	r5, #0
    dc36:	f10b 0001 	add.w	r0, fp, #1
    dc3a:	f880 8000 	strb.w	r8, [r0]
    dc3e:	2003      	movs	r0, #3
    dc40:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    dc44:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    dc48:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    dc4c:	200e      	movs	r0, #14
    dc4e:	f011 fc13 	bl	1f478 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x70>
    dc52:	4804      	ldr	r0, [pc, #16]	; (dc64 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    dc54:	f015 f97e 	bl	22f54 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    dc58:	b115      	cbz	r5, dc60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    dc5a:	2011      	movs	r0, #17
    dc5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc60:	2000      	movs	r0, #0
    dc62:	e7fb      	b.n	dc5c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    dc64:	2000040a 	.word	0x2000040a
    dc68:	4000e000 	.word	0x4000e000
    dc6c:	e000ed10 	.word	0xe000ed10

0000dc70 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    dc70:	b510      	push	{r4, lr}
    dc72:	4806      	ldr	r0, [pc, #24]	; (dc8c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    dc74:	f015 f96a 	bl	22f4c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    dc78:	b118      	cbz	r0, dc82 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    dc7a:	2127      	movs	r1, #39	; 0x27
    dc7c:	201d      	movs	r0, #29
    dc7e:	f7ff f903 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc82:	4802      	ldr	r0, [pc, #8]	; (dc8c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    dc84:	2100      	movs	r1, #0
    dc86:	7041      	strb	r1, [r0, #1]
    dc88:	bd10      	pop	{r4, pc}
    dc8a:	0000      	.short	0x0000
    dc8c:	2000040a 	.word	0x2000040a

0000dc90 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    dc90:	b570      	push	{r4, r5, r6, lr}
    dc92:	4911      	ldr	r1, [pc, #68]	; (dcd8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    dc94:	680a      	ldr	r2, [r1, #0]
    dc96:	b1ea      	cbz	r2, dcd4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    dc98:	2300      	movs	r3, #0
    dc9a:	461d      	mov	r5, r3
    dc9c:	2401      	movs	r4, #1
    dc9e:	684a      	ldr	r2, [r1, #4]
    dca0:	1c52      	adds	r2, r2, #1
    dca2:	604a      	str	r2, [r1, #4]
    dca4:	2a0c      	cmp	r2, #12
    dca6:	d300      	bcc.n	dcaa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    dca8:	604d      	str	r5, [r1, #4]
    dcaa:	790e      	ldrb	r6, [r1, #4]
    dcac:	fa04 f206 	lsl.w	r2, r4, r6
    dcb0:	680e      	ldr	r6, [r1, #0]
    dcb2:	4216      	tst	r6, r2
    dcb4:	d00b      	beq.n	dcce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    dcb6:	f3ef 8310 	mrs	r3, PRIMASK
    dcba:	b672      	cpsid	i
    dcbc:	680c      	ldr	r4, [r1, #0]
    dcbe:	4394      	bics	r4, r2
    dcc0:	600c      	str	r4, [r1, #0]
    dcc2:	b903      	cbnz	r3, dcc6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    dcc4:	b662      	cpsie	i
    dcc6:	6849      	ldr	r1, [r1, #4]
    dcc8:	6001      	str	r1, [r0, #0]
    dcca:	2000      	movs	r0, #0
    dccc:	bd70      	pop	{r4, r5, r6, pc}
    dcce:	1c5b      	adds	r3, r3, #1
    dcd0:	2b0c      	cmp	r3, #12
    dcd2:	d3e4      	bcc.n	dc9e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    dcd4:	2005      	movs	r0, #5
    dcd6:	bd70      	pop	{r4, r5, r6, pc}
    dcd8:	2000008c 	.word	0x2000008c

0000dcdc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    dcdc:	4802      	ldr	r0, [pc, #8]	; (dce8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    dcde:	2100      	movs	r1, #0
    dce0:	6001      	str	r1, [r0, #0]
    dce2:	6041      	str	r1, [r0, #4]
    dce4:	4770      	bx	lr
    dce6:	0000      	.short	0x0000
    dce8:	2000008c 	.word	0x2000008c

0000dcec <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    dcec:	b510      	push	{r4, lr}
    dcee:	4c04      	ldr	r4, [pc, #16]	; (dd00 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    dcf0:	7820      	ldrb	r0, [r4, #0]
    dcf2:	28ff      	cmp	r0, #255	; 0xff
    dcf4:	d003      	beq.n	dcfe <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    dcf6:	f00f fc15 	bl	1d524 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    dcfa:	20ff      	movs	r0, #255	; 0xff
    dcfc:	7020      	strb	r0, [r4, #0]
    dcfe:	bd10      	pop	{r4, pc}
    dd00:	20000000 	.word	0x20000000

0000dd04 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    dd04:	b510      	push	{r4, lr}
    dd06:	4c08      	ldr	r4, [pc, #32]	; (dd28 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    dd08:	7861      	ldrb	r1, [r4, #1]
    dd0a:	b109      	cbz	r1, dd10 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    dd0c:	200f      	movs	r0, #15
    dd0e:	bd10      	pop	{r4, pc}
    dd10:	f00f fbce 	bl	1d4b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    dd14:	7020      	strb	r0, [r4, #0]
    dd16:	28ff      	cmp	r0, #255	; 0xff
    dd18:	d001      	beq.n	dd1e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    dd1a:	2000      	movs	r0, #0
    dd1c:	bd10      	pop	{r4, pc}
    dd1e:	2173      	movs	r1, #115	; 0x73
    dd20:	201f      	movs	r0, #31
    dd22:	f7ff f8b1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd26:	0000      	.short	0x0000
    dd28:	20000000 	.word	0x20000000

0000dd2c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    dd2c:	4901      	ldr	r1, [pc, #4]	; (dd34 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    dd2e:	2000      	movs	r0, #0
    dd30:	7048      	strb	r0, [r1, #1]
    dd32:	4770      	bx	lr
    dd34:	20000000 	.word	0x20000000

0000dd38 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dd38:	4905      	ldr	r1, [pc, #20]	; (dd50 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI+0x18>)
    dd3a:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
    dd3c:	4282      	cmp	r2, r0
    dd3e:	bf18      	it	ne
    dd40:	4770      	bxne	lr
    dd42:	2000      	movs	r0, #0
    dd44:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
    dd48:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dd4c:	8688      	strh	r0, [r1, #52]	; 0x34
    dd4e:	4770      	bx	lr
    dd50:	200016ac 	.word	0x200016ac

0000dd54 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    dd54:	4806      	ldr	r0, [pc, #24]	; (dd70 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    dd56:	4a07      	ldr	r2, [pc, #28]	; (dd74 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    dd58:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    dd5a:	8852      	ldrh	r2, [r2, #2]
    dd5c:	4291      	cmp	r1, r2
    dd5e:	d105      	bne.n	dd6c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x18>
    dd60:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    dd64:	2800      	cmp	r0, #0
    dd66:	bf1c      	itt	ne
    dd68:	2000      	movne	r0, #0
    dd6a:	4770      	bxne	lr
    dd6c:	2001      	movs	r0, #1
    dd6e:	4770      	bx	lr
    dd70:	200016ac 	.word	0x200016ac
    dd74:	200003f4 	.word	0x200003f4

0000dd78 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    dd78:	4901      	ldr	r1, [pc, #4]	; (dd80 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    dd7a:	8048      	strh	r0, [r1, #2]
    dd7c:	4770      	bx	lr
    dd7e:	0000      	.short	0x0000
    dd80:	200003f4 	.word	0x200003f4

0000dd84 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    dd84:	4808      	ldr	r0, [pc, #32]	; (dda8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    dd86:	4a09      	ldr	r2, [pc, #36]	; (ddac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    dd88:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    dd8a:	8852      	ldrh	r2, [r2, #2]
    dd8c:	4291      	cmp	r1, r2
    dd8e:	d109      	bne.n	dda4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    dd90:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd94:	8681      	strh	r1, [r0, #52]	; 0x34
    dd96:	f810 1f32 	ldrb.w	r1, [r0, #50]!
    dd9a:	b119      	cbz	r1, dda4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    dd9c:	2100      	movs	r1, #0
    dd9e:	7001      	strb	r1, [r0, #0]
    dda0:	2001      	movs	r0, #1
    dda2:	4770      	bx	lr
    dda4:	2000      	movs	r0, #0
    dda6:	4770      	bx	lr
    dda8:	200016ac 	.word	0x200016ac
    ddac:	200003f4 	.word	0x200003f4

0000ddb0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    ddb0:	4907      	ldr	r1, [pc, #28]	; (ddd0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    ddb2:	f101 0032 	add.w	r0, r1, #50	; 0x32
    ddb6:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    ddba:	2a01      	cmp	r2, #1
    ddbc:	bf04      	itt	eq
    ddbe:	2000      	moveq	r0, #0
    ddc0:	4770      	bxeq	lr
    ddc2:	2201      	movs	r2, #1
    ddc4:	7002      	strb	r2, [r0, #0]
    ddc6:	4803      	ldr	r0, [pc, #12]	; (ddd4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    ddc8:	8800      	ldrh	r0, [r0, #0]
    ddca:	8688      	strh	r0, [r1, #52]	; 0x34
    ddcc:	4610      	mov	r0, r2
    ddce:	4770      	bx	lr
    ddd0:	200016ac 	.word	0x200016ac
    ddd4:	200003f4 	.word	0x200003f4

0000ddd8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    ddd8:	4907      	ldr	r1, [pc, #28]	; (ddf8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    ddda:	4b08      	ldr	r3, [pc, #32]	; (ddfc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x24>)
    dddc:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
    ddde:	885b      	ldrh	r3, [r3, #2]
    dde0:	429a      	cmp	r2, r3
    dde2:	d106      	bne.n	ddf2 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1a>
    dde4:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    dde8:	2a00      	cmp	r2, #0
    ddea:	bf1e      	ittt	ne
    ddec:	6001      	strne	r1, [r0, #0]
    ddee:	2001      	movne	r0, #1
    ddf0:	4770      	bxne	lr
    ddf2:	2000      	movs	r0, #0
    ddf4:	4770      	bx	lr
    ddf6:	0000      	.short	0x0000
    ddf8:	200016ac 	.word	0x200016ac
    ddfc:	200003f4 	.word	0x200003f4

0000de00 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    de00:	4909      	ldr	r1, [pc, #36]	; (de28 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    de02:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
    de04:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    de08:	3bff      	subs	r3, #255	; 0xff
    de0a:	d003      	beq.n	de14 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x14>
    de0c:	2100      	movs	r1, #0
    de0e:	6001      	str	r1, [r0, #0]
    de10:	4608      	mov	r0, r1
    de12:	4770      	bx	lr
    de14:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    de18:	4903      	ldr	r1, [pc, #12]	; (de28 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    de1a:	2a01      	cmp	r2, #1
    de1c:	bf1a      	itte	ne
    de1e:	6001      	strne	r1, [r0, #0]
    de20:	2001      	movne	r0, #1
    de22:	2000      	moveq	r0, #0
    de24:	4770      	bx	lr
    de26:	0000      	.short	0x0000
    de28:	200016ac 	.word	0x200016ac

0000de2c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    de2c:	4901      	ldr	r1, [pc, #4]	; (de34 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    de2e:	8008      	strh	r0, [r1, #0]
    de30:	4770      	bx	lr
    de32:	0000      	.short	0x0000
    de34:	200003f4 	.word	0x200003f4

0000de38 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    de38:	4905      	ldr	r1, [pc, #20]	; (de50 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x18>)
    de3a:	2000      	movs	r0, #0
    de3c:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
    de40:	f64f 70ff 	movw	r0, #65535	; 0xffff
    de44:	8688      	strh	r0, [r1, #52]	; 0x34
    de46:	4903      	ldr	r1, [pc, #12]	; (de54 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY+0x1c>)
    de48:	8008      	strh	r0, [r1, #0]
    de4a:	8048      	strh	r0, [r1, #2]
    de4c:	4770      	bx	lr
    de4e:	0000      	.short	0x0000
    de50:	200016ac 	.word	0x200016ac
    de54:	200003f4 	.word	0x200003f4

0000de58 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    de58:	4905      	ldr	r1, [pc, #20]	; (de70 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    de5a:	2000      	movs	r0, #0
    de5c:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
    de60:	f64f 70ff 	movw	r0, #65535	; 0xffff
    de64:	8688      	strh	r0, [r1, #52]	; 0x34
    de66:	4903      	ldr	r1, [pc, #12]	; (de74 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    de68:	8008      	strh	r0, [r1, #0]
    de6a:	8048      	strh	r0, [r1, #2]
    de6c:	4770      	bx	lr
    de6e:	0000      	.short	0x0000
    de70:	200016ac 	.word	0x200016ac
    de74:	200003f4 	.word	0x200003f4

0000de78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    de78:	4a0a      	ldr	r2, [pc, #40]	; (dea4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    de7a:	b110      	cbz	r0, de82 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    de7c:	2801      	cmp	r0, #1
    de7e:	d007      	beq.n	de90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    de80:	e00e      	b.n	dea0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    de82:	7850      	ldrb	r0, [r2, #1]
    de84:	b160      	cbz	r0, dea0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    de86:	f8d2 0002 	ldr.w	r0, [r2, #2]
    de8a:	6008      	str	r0, [r1, #0]
    de8c:	88d0      	ldrh	r0, [r2, #6]
    de8e:	e004      	b.n	de9a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    de90:	7810      	ldrb	r0, [r2, #0]
    de92:	b128      	cbz	r0, dea0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    de94:	6890      	ldr	r0, [r2, #8]
    de96:	6008      	str	r0, [r1, #0]
    de98:	8990      	ldrh	r0, [r2, #12]
    de9a:	8088      	strh	r0, [r1, #4]
    de9c:	2001      	movs	r0, #1
    de9e:	4770      	bx	lr
    dea0:	2000      	movs	r0, #0
    dea2:	4770      	bx	lr
    dea4:	2000040c 	.word	0x2000040c

0000dea8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    dea8:	4a09      	ldr	r2, [pc, #36]	; (ded0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x28>)
    deaa:	2301      	movs	r3, #1
    deac:	b140      	cbz	r0, dec0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x18>
    deae:	2801      	cmp	r0, #1
    deb0:	bf18      	it	ne
    deb2:	4770      	bxne	lr
    deb4:	7013      	strb	r3, [r2, #0]
    deb6:	6808      	ldr	r0, [r1, #0]
    deb8:	6090      	str	r0, [r2, #8]
    deba:	8888      	ldrh	r0, [r1, #4]
    debc:	8190      	strh	r0, [r2, #12]
    debe:	4770      	bx	lr
    dec0:	7053      	strb	r3, [r2, #1]
    dec2:	6808      	ldr	r0, [r1, #0]
    dec4:	f8c2 0002 	str.w	r0, [r2, #2]
    dec8:	8888      	ldrh	r0, [r1, #4]
    deca:	80d0      	strh	r0, [r2, #6]
    decc:	4770      	bx	lr
    dece:	0000      	.short	0x0000
    ded0:	2000040c 	.word	0x2000040c

0000ded4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    ded4:	4906      	ldr	r1, [pc, #24]	; (def0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    ded6:	b110      	cbz	r0, dede <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    ded8:	2801      	cmp	r0, #1
    deda:	d003      	beq.n	dee4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    dedc:	e006      	b.n	deec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    dede:	7848      	ldrb	r0, [r1, #1]
    dee0:	b910      	cbnz	r0, dee8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x14>
    dee2:	e003      	b.n	deec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    dee4:	7808      	ldrb	r0, [r1, #0]
    dee6:	b108      	cbz	r0, deec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x18>
    dee8:	2001      	movs	r0, #1
    deea:	4770      	bx	lr
    deec:	2000      	movs	r0, #0
    deee:	4770      	bx	lr
    def0:	2000040c 	.word	0x2000040c

0000def4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    def4:	4901      	ldr	r1, [pc, #4]	; (defc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    def6:	7708      	strb	r0, [r1, #28]
    def8:	4770      	bx	lr
    defa:	0000      	.short	0x0000
    defc:	20000d2a 	.word	0x20000d2a

0000df00 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    df00:	4801      	ldr	r0, [pc, #4]	; (df08 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    df02:	7880      	ldrb	r0, [r0, #2]
    df04:	4770      	bx	lr
    df06:	0000      	.short	0x0000
    df08:	20000094 	.word	0x20000094

0000df0c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    df0c:	4801      	ldr	r0, [pc, #4]	; (df14 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    df0e:	78c0      	ldrb	r0, [r0, #3]
    df10:	4770      	bx	lr
    df12:	0000      	.short	0x0000
    df14:	20000094 	.word	0x20000094

0000df18 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    df18:	b570      	push	{r4, r5, r6, lr}
    df1a:	4c09      	ldr	r4, [pc, #36]	; (df40 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    df1c:	4606      	mov	r6, r0
    df1e:	460d      	mov	r5, r1
    df20:	7820      	ldrb	r0, [r4, #0]
    df22:	b118      	cbz	r0, df2c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    df24:	21d0      	movs	r1, #208	; 0xd0
    df26:	2027      	movs	r0, #39	; 0x27
    df28:	f7fe ffae 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df2c:	4905      	ldr	r1, [pc, #20]	; (df44 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x2c>)
    df2e:	2000      	movs	r0, #0
    df30:	7708      	strb	r0, [r1, #28]
    df32:	2101      	movs	r1, #1
    df34:	4804      	ldr	r0, [pc, #16]	; (df48 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x30>)
    df36:	f011 ffdc 	bl	1fef2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    df3a:	e9c4 650b 	strd	r6, r5, [r4, #44]	; 0x2c
    df3e:	bd70      	pop	{r4, r5, r6, pc}
    df40:	20000094 	.word	0x20000094
    df44:	20000d2a 	.word	0x20000d2a
    df48:	20000cf8 	.word	0x20000cf8

0000df4c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    df4c:	4901      	ldr	r1, [pc, #4]	; (df54 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    df4e:	2001      	movs	r0, #1
    df50:	7148      	strb	r0, [r1, #5]
    df52:	4770      	bx	lr
    df54:	20000094 	.word	0x20000094

0000df58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    df58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df5c:	4dfd      	ldr	r5, [pc, #1012]	; (e354 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3fc>)
    df5e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    df62:	782c      	ldrb	r4, [r5, #0]
    df64:	2c00      	cmp	r4, #0
    df66:	d16c      	bne.n	e042 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    df68:	2a00      	cmp	r2, #0
    df6a:	bf1c      	itt	ne
    df6c:	2b00      	cmpne	r3, #0
    df6e:	f1bc 0f00 	cmpne.w	ip, #0
    df72:	d066      	beq.n	e042 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    df74:	f8c5 c01c 	str.w	ip, [r5, #28]
    df78:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    df7c:	f04f 0900 	mov.w	r9, #0
    df80:	e9c5 2305 	strd	r2, r3, [r5, #20]
    df84:	f885 9005 	strb.w	r9, [r5, #5]
    df88:	f885 9004 	strb.w	r9, [r5, #4]
    df8c:	f885 9002 	strb.w	r9, [r5, #2]
    df90:	f885 9001 	strb.w	r9, [r5, #1]
    df94:	f885 9003 	strb.w	r9, [r5, #3]
    df98:	f8df 83bc 	ldr.w	r8, [pc, #956]	; e358 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x400>
    df9c:	f8a5 900c 	strh.w	r9, [r5, #12]
    dfa0:	f8a5 900e 	strh.w	r9, [r5, #14]
    dfa4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dfa8:	f100 06a8 	add.w	r6, r0, #168	; 0xa8
    dfac:	4604      	mov	r4, r0
    dfae:	f00a faa3 	bl	184f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    dfb2:	f009 fdad 	bl	17b10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    dfb6:	f994 0072 	ldrsb.w	r0, [r4, #114]	; 0x72
    dfba:	f00a fb39 	bl	18630 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    dfbe:	6a20      	ldr	r0, [r4, #32]
    dfc0:	f00a fda0 	bl	18b04 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    dfc4:	69a0      	ldr	r0, [r4, #24]
    dfc6:	f00a fd93 	bl	18af0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    dfca:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    dfce:	f00a fdd3 	bl	18b78 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    dfd2:	f898 0000 	ldrb.w	r0, [r8]
    dfd6:	2800      	cmp	r0, #0
    dfd8:	d038      	beq.n	e04c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf4>
    dfda:	2004      	movs	r0, #4
    dfdc:	f00f fb7a 	bl	1d6d4 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    dfe0:	6961      	ldr	r1, [r4, #20]
    dfe2:	f641 504c 	movw	r0, #7500	; 0x1d4c
    dfe6:	4281      	cmp	r1, r0
    dfe8:	bf28      	it	cs
    dfea:	2096      	movcs	r0, #150	; 0x96
    dfec:	d203      	bcs.n	dff6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    dfee:	2001      	movs	r0, #1
    dff0:	f00a fd66 	bl	18ac0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    dff4:	204d      	movs	r0, #77	; 0x4d
    dff6:	f00a f9c1 	bl	1837c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    dffa:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dffe:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
    e002:	2800      	cmp	r0, #0
    e004:	bf18      	it	ne
    e006:	f00a f9a9 	blne	1835c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    e00a:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    e00e:	2001      	movs	r0, #1
    e010:	f009 fff2 	bl	17ff8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    e014:	2800      	cmp	r0, #0
    e016:	bf08      	it	eq
    e018:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e01c:	48cf      	ldr	r0, [pc, #828]	; (e35c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x404>)
    e01e:	f00a f92b 	bl	18278 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    e022:	8820      	ldrh	r0, [r4, #0]
    e024:	f7ff fc26 	bl	d874 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    e028:	6368      	str	r0, [r5, #52]	; 0x34
    e02a:	8820      	ldrh	r0, [r4, #0]
    e02c:	f7ff fc0c 	bl	d848 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e030:	63a8      	str	r0, [r5, #56]	; 0x38
    e032:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
    e036:	f88d 0000 	strb.w	r0, [sp]
    e03a:	f89d 0000 	ldrb.w	r0, [sp]
    e03e:	bb80      	cbnz	r0, e0a2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x14a>
    e040:	e01d      	b.n	e07e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    e042:	f240 1145 	movw	r1, #325	; 0x145
    e046:	2027      	movs	r0, #39	; 0x27
    e048:	f7fe ff1e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e04c:	2003      	movs	r0, #3
    e04e:	f00f fb41 	bl	1d6d4 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
    e052:	6961      	ldr	r1, [r4, #20]
    e054:	f641 504c 	movw	r0, #7500	; 0x1d4c
    e058:	4281      	cmp	r1, r0
    e05a:	bf28      	it	cs
    e05c:	2096      	movcs	r0, #150	; 0x96
    e05e:	d203      	bcs.n	e068 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    e060:	2001      	movs	r0, #1
    e062:	f00a fd2d 	bl	18ac0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>
    e066:	204d      	movs	r0, #77	; 0x4d
    e068:	f00a f988 	bl	1837c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>
    e06c:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    e070:	2000      	movs	r0, #0
    e072:	f009 ffc1 	bl	17ff8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    e076:	2800      	cmp	r0, #0
    e078:	d1d0      	bne.n	e01c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc4>
    e07a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e07e:	6f60      	ldr	r0, [r4, #116]	; 0x74
    e080:	b178      	cbz	r0, e0a2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x14a>
    e082:	f8b6 004a 	ldrh.w	r0, [r6, #74]	; 0x4a
    e086:	8ab1      	ldrh	r1, [r6, #20]
    e088:	4288      	cmp	r0, r1
    e08a:	d10a      	bne.n	e0a2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x14a>
    e08c:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
    e090:	2201      	movs	r2, #1
    e092:	4408      	add	r0, r1
    e094:	f8a6 004a 	strh.w	r0, [r6, #74]	; 0x4a
    e098:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
    e09c:	6f61      	ldr	r1, [r4, #116]	; 0x74
    e09e:	f00d ffdf 	bl	1c060 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    e0a2:	f106 0088 	add.w	r0, r6, #136	; 0x88
    e0a6:	f8df a2b8 	ldr.w	sl, [pc, #696]	; e360 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x408>
    e0aa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    e0ac:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
    e0b0:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
    e0b4:	f8ca 0019 	str.w	r0, [sl, #25]
    e0b8:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    e0bc:	f8ca 001d 	str.w	r0, [sl, #29]
    e0c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
    e0c4:	2701      	movs	r7, #1
    e0c6:	f100 02a8 	add.w	r2, r0, #168	; 0xa8
    e0ca:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
    e0ce:	2926      	cmp	r1, #38	; 0x26
    e0d0:	bf1e      	ittt	ne
    e0d2:	2927      	cmpne	r1, #39	; 0x27
    e0d4:	f892 c01e 	ldrbne.w	ip, [r2, #30]
    e0d8:	f1bc 0f26 	cmpne.w	ip, #38	; 0x26
    e0dc:	d00b      	beq.n	e0f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19e>
    e0de:	f04f 0208 	mov.w	r2, #8
    e0e2:	f04f 0302 	mov.w	r3, #2
    e0e6:	2921      	cmp	r1, #33	; 0x21
    e0e8:	bf18      	it	ne
    e0ea:	2922      	cmpne	r1, #34	; 0x22
    e0ec:	d02e      	beq.n	e14c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1f4>
    e0ee:	f1bc 0f24 	cmp.w	ip, #36	; 0x24
    e0f2:	d052      	beq.n	e19a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x242>
    e0f4:	e081      	b.n	e1fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2a2>
    e0f6:	f898 1000 	ldrb.w	r1, [r8]
    e0fa:	2900      	cmp	r1, #0
    e0fc:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    e100:	d013      	beq.n	e12a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1d2>
    e102:	f890 03d6 	ldrb.w	r0, [r0, #982]	; 0x3d6
    e106:	2800      	cmp	r0, #0
    e108:	d07b      	beq.n	e202 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2aa>
    e10a:	2908      	cmp	r1, #8
    e10c:	bf18      	it	ne
    e10e:	2904      	cmpne	r1, #4
    e110:	d070      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e112:	2808      	cmp	r0, #8
    e114:	bf18      	it	ne
    e116:	2804      	cmpne	r0, #4
    e118:	d06c      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e11a:	2901      	cmp	r1, #1
    e11c:	bf18      	it	ne
    e11e:	2801      	cmpne	r0, #1
    e120:	d057      	beq.n	e1d2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x27a>
    e122:	bf00      	nop
    e124:	f04f 0102 	mov.w	r1, #2
    e128:	e06b      	b.n	e202 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2aa>
    e12a:	f890 0332 	ldrb.w	r0, [r0, #818]	; 0x332
    e12e:	2800      	cmp	r0, #0
    e130:	d067      	beq.n	e202 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2aa>
    e132:	2908      	cmp	r1, #8
    e134:	bf18      	it	ne
    e136:	2904      	cmpne	r1, #4
    e138:	d05c      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e13a:	2808      	cmp	r0, #8
    e13c:	bf18      	it	ne
    e13e:	2804      	cmpne	r0, #4
    e140:	d058      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e142:	2901      	cmp	r1, #1
    e144:	bf18      	it	ne
    e146:	2801      	cmpne	r0, #1
    e148:	d043      	beq.n	e1d2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x27a>
    e14a:	e7eb      	b.n	e124 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    e14c:	f1bc 0f24 	cmp.w	ip, #36	; 0x24
    e150:	d023      	beq.n	e19a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x242>
    e152:	f898 1000 	ldrb.w	r1, [r8]
    e156:	b3e9      	cbz	r1, e1d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x27c>
    e158:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    e15c:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
    e160:	f010 0f04 	tst.w	r0, #4
    e164:	bf18      	it	ne
    e166:	4610      	movne	r0, r2
    e168:	d00c      	beq.n	e184 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x22c>
    e16a:	2908      	cmp	r1, #8
    e16c:	bf18      	it	ne
    e16e:	2904      	cmpne	r1, #4
    e170:	d040      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e172:	2808      	cmp	r0, #8
    e174:	bf18      	it	ne
    e176:	2804      	cmpne	r0, #4
    e178:	d03c      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e17a:	2901      	cmp	r1, #1
    e17c:	bf18      	it	ne
    e17e:	2801      	cmpne	r0, #1
    e180:	d027      	beq.n	e1d2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x27a>
    e182:	e7cf      	b.n	e124 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    e184:	f010 0f01 	tst.w	r0, #1
    e188:	bf18      	it	ne
    e18a:	4638      	movne	r0, r7
    e18c:	d1ed      	bne.n	e16a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x212>
    e18e:	f010 0f02 	tst.w	r0, #2
    e192:	bf18      	it	ne
    e194:	4618      	movne	r0, r3
    e196:	d1e8      	bne.n	e16a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x212>
    e198:	e033      	b.n	e202 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2aa>
    e19a:	f898 1000 	ldrb.w	r1, [r8]
    e19e:	b1c9      	cbz	r1, e1d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x27c>
    e1a0:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    e1a4:	f890 c166 	ldrb.w	ip, [r0, #358]	; 0x166
    e1a8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    e1ac:	ea0c 0000 	and.w	r0, ip, r0
    e1b0:	f010 0f04 	tst.w	r0, #4
    e1b4:	bf18      	it	ne
    e1b6:	4610      	movne	r0, r2
    e1b8:	d010      	beq.n	e1dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x284>
    e1ba:	2908      	cmp	r1, #8
    e1bc:	bf18      	it	ne
    e1be:	2904      	cmpne	r1, #4
    e1c0:	d018      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e1c2:	2808      	cmp	r0, #8
    e1c4:	bf18      	it	ne
    e1c6:	2804      	cmpne	r0, #4
    e1c8:	d014      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e1ca:	2901      	cmp	r1, #1
    e1cc:	bf18      	it	ne
    e1ce:	2801      	cmpne	r0, #1
    e1d0:	d1a8      	bne.n	e124 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1cc>
    e1d2:	e000      	b.n	e1d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x27e>
    e1d4:	e011      	b.n	e1fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2a2>
    e1d6:	f04f 0101 	mov.w	r1, #1
    e1da:	e012      	b.n	e202 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2aa>
    e1dc:	f010 0f01 	tst.w	r0, #1
    e1e0:	bf18      	it	ne
    e1e2:	4638      	movne	r0, r7
    e1e4:	d1e9      	bne.n	e1ba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x262>
    e1e6:	f010 0f02 	tst.w	r0, #2
    e1ea:	bf18      	it	ne
    e1ec:	4618      	movne	r0, r3
    e1ee:	d1e4      	bne.n	e1ba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x262>
    e1f0:	e007      	b.n	e202 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2aa>
    e1f2:	e7ff      	b.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e1f4:	f04f 0108 	mov.w	r1, #8
    e1f8:	e003      	b.n	e202 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2aa>
    e1fa:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    e1fe:	2904      	cmp	r1, #4
    e200:	d0f8      	beq.n	e1f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x29c>
    e202:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    e204:	f011 0f0c 	tst.w	r1, #12
    e208:	bf18      	it	ne
    e20a:	f44f 6029 	movne.w	r0, #2704	; 0xa90
    e20e:	f011 fada 	bl	1f7c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    e212:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    e214:	4281      	cmp	r1, r0
    e216:	bf38      	it	cc
    e218:	4608      	movcc	r0, r1
    e21a:	494e      	ldr	r1, [pc, #312]	; (e354 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3fc>)
    e21c:	7188      	strb	r0, [r1, #6]
    e21e:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    e222:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e226:	f896 b023 	ldrb.w	fp, [r6, #35]	; 0x23
    e22a:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    e22e:	2908      	cmp	r1, #8
    e230:	d038      	beq.n	e2a4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x34c>
    e232:	f011 fac8 	bl	1f7c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    e236:	bf00      	nop
    e238:	f1bb 0f00 	cmp.w	fp, #0
    e23c:	bf04      	itt	eq
    e23e:	1d00      	addeq	r0, r0, #4
    e240:	b280      	uxtheq	r0, r0
    e242:	4285      	cmp	r5, r0
    e244:	bf38      	it	cc
    e246:	4628      	movcc	r0, r5
    e248:	b2c5      	uxtb	r5, r0
    e24a:	f8df b108 	ldr.w	fp, [pc, #264]	; e354 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3fc>
    e24e:	f88b 5007 	strb.w	r5, [fp, #7]
    e252:	f001 ff0f 	bl	10074 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
    e256:	b110      	cbz	r0, e25e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x306>
    e258:	2d2b      	cmp	r5, #43	; 0x2b
    e25a:	bf98      	it	ls
    e25c:	252b      	movls	r5, #43	; 0x2b
    e25e:	462a      	mov	r2, r5
    e260:	f88b 5008 	strb.w	r5, [fp, #8]
    e264:	f898 0000 	ldrb.w	r0, [r8]
    e268:	b300      	cbz	r0, e2ac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x354>
    e26a:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    e26e:	b3e8      	cbz	r0, e2ec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x394>
    e270:	f88a 7018 	strb.w	r7, [sl, #24]
    e274:	e9d6 0120 	ldrd	r0, r1, [r6, #128]	; 0x80
    e278:	e9ca 0104 	strd	r0, r1, [sl, #16]
    e27c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    e280:	2001      	movs	r0, #1
    e282:	2901      	cmp	r1, #1
    e284:	bf08      	it	eq
    e286:	2300      	moveq	r3, #0
    e288:	d043      	beq.n	e312 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ba>
    e28a:	2902      	cmp	r1, #2
    e28c:	bf08      	it	eq
    e28e:	2301      	moveq	r3, #1
    e290:	d03f      	beq.n	e312 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ba>
    e292:	2904      	cmp	r1, #4
    e294:	bf08      	it	eq
    e296:	2303      	moveq	r3, #3
    e298:	d03b      	beq.n	e312 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ba>
    e29a:	2908      	cmp	r1, #8
    e29c:	bf08      	it	eq
    e29e:	2302      	moveq	r3, #2
    e2a0:	d037      	beq.n	e312 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ba>
    e2a2:	e027      	b.n	e2f4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x39c>
    e2a4:	2104      	movs	r1, #4
    e2a6:	f011 fa8e 	bl	1f7c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    e2aa:	e7c5      	b.n	e238 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x2e0>
    e2ac:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    e2b0:	b358      	cbz	r0, e30a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3b2>
    e2b2:	f88a 7018 	strb.w	r7, [sl, #24]
    e2b6:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
    e2ba:	e9ca 0104 	strd	r0, r1, [sl, #16]
    e2be:	6961      	ldr	r1, [r4, #20]
    e2c0:	f641 504c 	movw	r0, #7500	; 0x1d4c
    e2c4:	4281      	cmp	r1, r0
    e2c6:	bf2c      	ite	cs
    e2c8:	2000      	movcs	r0, #0
    e2ca:	2004      	movcc	r0, #4
    e2cc:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    e2d0:	2901      	cmp	r1, #1
    e2d2:	bf08      	it	eq
    e2d4:	2300      	moveq	r3, #0
    e2d6:	d012      	beq.n	e2fe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3a6>
    e2d8:	2902      	cmp	r1, #2
    e2da:	bf08      	it	eq
    e2dc:	2301      	moveq	r3, #1
    e2de:	d00e      	beq.n	e2fe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3a6>
    e2e0:	2904      	cmp	r1, #4
    e2e2:	bf08      	it	eq
    e2e4:	2303      	moveq	r3, #3
    e2e6:	d00a      	beq.n	e2fe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3a6>
    e2e8:	2908      	cmp	r1, #8
    e2ea:	e000      	b.n	e2ee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x396>
    e2ec:	e016      	b.n	e31c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3c4>
    e2ee:	bf08      	it	eq
    e2f0:	2302      	moveq	r3, #2
    e2f2:	d004      	beq.n	e2fe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3a6>
    e2f4:	f240 4122 	movw	r1, #1058	; 0x422
    e2f8:	2006      	movs	r0, #6
    e2fa:	f7fe fdc5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2fe:	22fb      	movs	r2, #251	; 0xfb
    e300:	4917      	ldr	r1, [pc, #92]	; (e360 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x408>)
    e302:	f8cd 9000 	str.w	r9, [sp]
    e306:	f009 fb13 	bl	17930 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    e30a:	2001      	movs	r0, #1
    e30c:	f000 fc40 	bl	eb90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    e310:	e007      	b.n	e322 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x3ca>
    e312:	4913      	ldr	r1, [pc, #76]	; (e360 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x408>)
    e314:	f8cd 9000 	str.w	r9, [sp]
    e318:	f009 fb0a 	bl	17930 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    e31c:	2001      	movs	r0, #1
    e31e:	f000 fbd9 	bl	ead4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    e322:	4810      	ldr	r0, [pc, #64]	; (e364 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x40c>)
    e324:	6800      	ldr	r0, [r0, #0]
    e326:	2803      	cmp	r0, #3
    e328:	bf18      	it	ne
    e32a:	280b      	cmpne	r0, #11
    e32c:	d01e      	beq.n	e36c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x414>
    e32e:	f8ca 905a 	str.w	r9, [sl, #90]	; 0x5a
    e332:	f8ca 905e 	str.w	r9, [sl, #94]	; 0x5e
    e336:	f8ca 9062 	str.w	r9, [sl, #98]	; 0x62
    e33a:	f8aa 9066 	strh.w	r9, [sl, #102]	; 0x66
    e33e:	480a      	ldr	r0, [pc, #40]	; (e368 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x410>)
    e340:	8ab1      	ldrh	r1, [r6, #20]
    e342:	8041      	strh	r1, [r0, #2]
    e344:	8821      	ldrh	r1, [r4, #0]
    e346:	8001      	strh	r1, [r0, #0]
    e348:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    e34c:	7101      	strb	r1, [r0, #4]
    e34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e352:	0000      	.short	0x0000
    e354:	20000094 	.word	0x20000094
    e358:	200000d0 	.word	0x200000d0
    e35c:	0000ed98 	.word	0x0000ed98
    e360:	20000cd0 	.word	0x20000cd0
    e364:	40001550 	.word	0x40001550
    e368:	20000d2a 	.word	0x20000d2a
    e36c:	f240 2102 	movw	r1, #514	; 0x202
    e370:	f04f 0027 	mov.w	r0, #39	; 0x27
    e374:	f7fe fd88 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e378 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    e378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e37c:	4d20      	ldr	r5, [pc, #128]	; (e400 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x88>)
    e37e:	4606      	mov	r6, r0
    e380:	460f      	mov	r7, r1
    e382:	481e      	ldr	r0, [pc, #120]	; (e3fc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x84>)
    e384:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e386:	b082      	sub	sp, #8
    e388:	6840      	ldr	r0, [r0, #4]
    e38a:	f891 8001 	ldrb.w	r8, [r1, #1]
    e38e:	f100 04a8 	add.w	r4, r0, #168	; 0xa8
    e392:	f016 0f02 	tst.w	r6, #2
    e396:	d015      	beq.n	e3c4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x4c>
    e398:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    e39a:	b348      	cbz	r0, e3f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    e39c:	896a      	ldrh	r2, [r5, #10]
    e39e:	1cd2      	adds	r2, r2, #3
    e3a0:	f014 fea3 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e3a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    e3a6:	6268      	str	r0, [r5, #36]	; 0x24
    e3a8:	aa01      	add	r2, sp, #4
    e3aa:	4669      	mov	r1, sp
    e3ac:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    e3ae:	f010 fcfc 	bl	1edaa <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e3b2:	9800      	ldr	r0, [sp, #0]
    e3b4:	f010 fcac 	bl	1ed10 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e3b8:	6038      	str	r0, [r7, #0]
    e3ba:	2201      	movs	r2, #1
    e3bc:	4641      	mov	r1, r8
    e3be:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    e3c0:	f010 fc5d 	bl	1ec7e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    e3c4:	f016 0f01 	tst.w	r6, #1
    e3c8:	bf04      	itt	eq
    e3ca:	b002      	addeq	sp, #8
    e3cc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3d0:	e9d4 0220 	ldrd	r0, r2, [r4, #128]	; 0x80
    e3d4:	1c41      	adds	r1, r0, #1
    e3d6:	f142 0000 	adc.w	r0, r2, #0
    e3da:	e9c4 1020 	strd	r1, r0, [r4, #128]	; 0x80
    e3de:	7e20      	ldrb	r0, [r4, #24]
    e3e0:	2801      	cmp	r0, #1
    e3e2:	bf0c      	ite	eq
    e3e4:	2000      	moveq	r0, #0
    e3e6:	2001      	movne	r0, #1
    e3e8:	7620      	strb	r0, [r4, #24]
    e3ea:	b002      	add	sp, #8
    e3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3f0:	f240 4166 	movw	r1, #1126	; 0x466
    e3f4:	2027      	movs	r0, #39	; 0x27
    e3f6:	f7fe fd47 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3fa:	0000      	.short	0x0000
    e3fc:	200000d0 	.word	0x200000d0
    e400:	20000094 	.word	0x20000094

0000e404 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    e404:	4802      	ldr	r0, [pc, #8]	; (e410 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    e406:	89c0      	ldrh	r0, [r0, #14]
    e408:	f3c0 2080 	ubfx	r0, r0, #10, #1
    e40c:	4770      	bx	lr
    e40e:	0000      	.short	0x0000
    e410:	20000094 	.word	0x20000094

0000e414 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    e414:	4804      	ldr	r0, [pc, #16]	; (e428 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    e416:	7800      	ldrb	r0, [r0, #0]
    e418:	2800      	cmp	r0, #0
    e41a:	bf1c      	itt	ne
    e41c:	200c      	movne	r0, #12
    e41e:	4770      	bxne	lr
    e420:	2000      	movs	r0, #0
    e422:	4902      	ldr	r1, [pc, #8]	; (e42c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    e424:	7708      	strb	r0, [r1, #28]
    e426:	4770      	bx	lr
    e428:	20000094 	.word	0x20000094
    e42c:	20000d2a 	.word	0x20000d2a

0000e430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    e430:	b538      	push	{r3, r4, r5, lr}
    e432:	481a      	ldr	r0, [pc, #104]	; (e49c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>)
    e434:	7801      	ldrb	r1, [r0, #0]
    e436:	f100 043c 	add.w	r4, r0, #60	; 0x3c
    e43a:	b149      	cbz	r1, e450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20>
    e43c:	7821      	ldrb	r1, [r4, #0]
    e43e:	7800      	ldrb	r0, [r0, #0]
    e440:	b149      	cbz	r1, e456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26>
    e442:	2802      	cmp	r0, #2
    e444:	d00e      	beq.n	e464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>
    e446:	f240 211e 	movw	r1, #542	; 0x21e
    e44a:	2027      	movs	r0, #39	; 0x27
    e44c:	f7fe fd1c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e450:	f000 faa0 	bl	e994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    e454:	e00b      	b.n	e46e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    e456:	2801      	cmp	r0, #1
    e458:	d009      	beq.n	e46e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e>
    e45a:	f240 211a 	movw	r1, #538	; 0x21a
    e45e:	2027      	movs	r0, #39	; 0x27
    e460:	f7fe fd12 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e464:	6860      	ldr	r0, [r4, #4]
    e466:	f8d0 0310 	ldr.w	r0, [r0, #784]	; 0x310
    e46a:	f009 ff1b 	bl	182a4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    e46e:	6860      	ldr	r0, [r4, #4]
    e470:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    e474:	f88d 1000 	strb.w	r1, [sp]
    e478:	f89d 1000 	ldrb.w	r1, [sp]
    e47c:	2900      	cmp	r1, #0
    e47e:	bf18      	it	ne
    e480:	bd38      	popne	{r3, r4, r5, pc}
    e482:	6f41      	ldr	r1, [r0, #116]	; 0x74
    e484:	2900      	cmp	r1, #0
    e486:	bf08      	it	eq
    e488:	bd38      	popeq	{r3, r4, r5, pc}
    e48a:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    e48e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e492:	2200      	movs	r2, #0
    e494:	4611      	mov	r1, r2
    e496:	f00d bde3 	b.w	1c060 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    e49a:	0000      	.short	0x0000
    e49c:	20000094 	.word	0x20000094
    e4a0:	2200      	movs	r2, #0
    e4a2:	b081      	sub	sp, #4
    e4a4:	704a      	strb	r2, [r1, #1]
    e4a6:	232e      	movs	r3, #46	; 0x2e
    e4a8:	700b      	strb	r3, [r1, #0]
    e4aa:	4b0e      	ldr	r3, [pc, #56]	; (e4e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    e4ac:	7202      	strb	r2, [r0, #8]
    e4ae:	f8d3 c068 	ldr.w	ip, [r3, #104]	; 0x68
    e4b2:	f8c1 c004 	str.w	ip, [r1, #4]
    e4b6:	f8d3 c06c 	ldr.w	ip, [r3, #108]	; 0x6c
    e4ba:	f8c1 c008 	str.w	ip, [r1, #8]
    e4be:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
    e4c2:	f8c1 c00c 	str.w	ip, [r1, #12]
    e4c6:	f8b3 c074 	ldrh.w	ip, [r3, #116]	; 0x74
    e4ca:	f8a1 c010 	strh.w	ip, [r1, #16]
    e4ce:	f890 c008 	ldrb.w	ip, [r0, #8]
    e4d2:	f88d c000 	strb.w	ip, [sp]
    e4d6:	f89d c000 	ldrb.w	ip, [sp]
    e4da:	f1bc 0f00 	cmp.w	ip, #0
    e4de:	d1e5      	bne.n	e4ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    e4e0:	b001      	add	sp, #4
    e4e2:	4770      	bx	lr
    e4e4:	20000cd0 	.word	0x20000cd0
    e4e8:	2901      	cmp	r1, #1
    e4ea:	bf84      	itt	hi
    e4ec:	2001      	movhi	r0, #1
    e4ee:	4770      	bxhi	lr
    e4f0:	b570      	push	{r4, r5, r6, lr}
    e4f2:	4c1b      	ldr	r4, [pc, #108]	; (e560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>)
    e4f4:	4605      	mov	r5, r0
    e4f6:	69a1      	ldr	r1, [r4, #24]
    e4f8:	4788      	blx	r1
    e4fa:	2800      	cmp	r0, #0
    e4fc:	d02c      	beq.n	e558 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    e4fe:	7920      	ldrb	r0, [r4, #4]
    e500:	bb50      	cbnz	r0, e558 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    e502:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    e506:	7801      	ldrb	r1, [r0, #0]
    e508:	2900      	cmp	r1, #0
    e50a:	bf08      	it	eq
    e50c:	2d01      	cmpeq	r5, #1
    e50e:	d001      	beq.n	e514 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    e510:	b321      	cbz	r1, e55c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    e512:	bb1d      	cbnz	r5, e55c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    e514:	4813      	ldr	r0, [pc, #76]	; (e564 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    e516:	7802      	ldrb	r2, [r0, #0]
    e518:	f012 0f10 	tst.w	r2, #16
    e51c:	d106      	bne.n	e52c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfc>
    e51e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e520:	7800      	ldrb	r0, [r0, #0]
    e522:	f010 0f10 	tst.w	r0, #16
    e526:	bf08      	it	eq
    e528:	2001      	moveq	r0, #1
    e52a:	d001      	beq.n	e530 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    e52c:	f04f 0000 	mov.w	r0, #0
    e530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e532:	b923      	cbnz	r3, e53e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    e534:	8963      	ldrh	r3, [r4, #10]
    e536:	b113      	cbz	r3, e53e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10e>
    e538:	f012 0f10 	tst.w	r2, #16
    e53c:	d00c      	beq.n	e558 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    e53e:	2900      	cmp	r1, #0
    e540:	bf1c      	itt	ne
    e542:	7b21      	ldrbne	r1, [r4, #12]
    e544:	f011 0f02 	tstne.w	r1, #2
    e548:	d003      	beq.n	e552 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x122>
    e54a:	6a21      	ldr	r1, [r4, #32]
    e54c:	78c9      	ldrb	r1, [r1, #3]
    e54e:	2902      	cmp	r1, #2
    e550:	d004      	beq.n	e55c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    e552:	89a1      	ldrh	r1, [r4, #12]
    e554:	4308      	orrs	r0, r1
    e556:	d001      	beq.n	e55c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    e558:	2001      	movs	r0, #1
    e55a:	bd70      	pop	{r4, r5, r6, pc}
    e55c:	2000      	movs	r0, #0
    e55e:	bd70      	pop	{r4, r5, r6, pc}
    e560:	20000094 	.word	0x20000094
    e564:	200000a4 	.word	0x200000a4
    e568:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e56c:	f8df 8300 	ldr.w	r8, [pc, #768]	; e870 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>
    e570:	4683      	mov	fp, r0
    e572:	b08b      	sub	sp, #44	; 0x2c
    e574:	f8d8 0004 	ldr.w	r0, [r8, #4]
    e578:	f04f 0a00 	mov.w	sl, #0
    e57c:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    e580:	f100 07a8 	add.w	r7, r0, #168	; 0xa8
    e584:	f88d a014 	strb.w	sl, [sp, #20]
    e588:	f8cd a018 	str.w	sl, [sp, #24]
    e58c:	7820      	ldrb	r0, [r4, #0]
    e58e:	4656      	mov	r6, sl
    e590:	46d1      	mov	r9, sl
    e592:	2802      	cmp	r0, #2
    e594:	d004      	beq.n	e5a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x170>
    e596:	f240 41ea 	movw	r1, #1258	; 0x4ea
    e59a:	2027      	movs	r0, #39	; 0x27
    e59c:	f7fe fc74 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5a0:	7ba0      	ldrb	r0, [r4, #14]
    e5a2:	f010 0f40 	tst.w	r0, #64	; 0x40
    e5a6:	d107      	bne.n	e5b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x188>
    e5a8:	2040      	movs	r0, #64	; 0x40
    e5aa:	6962      	ldr	r2, [r4, #20]
    e5ac:	2100      	movs	r1, #0
    e5ae:	4790      	blx	r2
    e5b0:	89e0      	ldrh	r0, [r4, #14]
    e5b2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e5b6:	81e0      	strh	r0, [r4, #14]
    e5b8:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    e5bc:	f1bb 0f00 	cmp.w	fp, #0
    e5c0:	f000 80d3 	beq.w	e76a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33a>
    e5c4:	b1a0      	cbz	r0, e5f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c0>
    e5c6:	f009 fae1 	bl	17b8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    e5ca:	f009 fabb 	bl	17b44 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    e5ce:	b978      	cbnz	r0, e5f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c0>
    e5d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e5d2:	7841      	ldrb	r1, [r0, #1]
    e5d4:	b161      	cbz	r1, e5f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c0>
    e5d6:	7800      	ldrb	r0, [r0, #0]
    e5d8:	7e39      	ldrb	r1, [r7, #24]
    e5da:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e5de:	4288      	cmp	r0, r1
    e5e0:	d106      	bne.n	e5f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c0>
    e5e2:	2001      	movs	r0, #1
    e5e4:	7060      	strb	r0, [r4, #1]
    e5e6:	f000 f9d5 	bl	e994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    e5ea:	b00d      	add	sp, #52	; 0x34
    e5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e5f2:	7841      	ldrb	r1, [r0, #1]
    e5f4:	8161      	strh	r1, [r4, #10]
    e5f6:	2900      	cmp	r1, #0
    e5f8:	bf08      	it	eq
    e5fa:	62a6      	streq	r6, [r4, #40]	; 0x28
    e5fc:	d003      	beq.n	e606 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    e5fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e600:	f010 fcbc 	bl	1ef7c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    e604:	62a0      	str	r0, [r4, #40]	; 0x28
    e606:	89e0      	ldrh	r0, [r4, #14]
    e608:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    e60c:	81e0      	strh	r0, [r4, #14]
    e60e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e610:	7df9      	ldrb	r1, [r7, #23]
    e612:	7800      	ldrb	r0, [r0, #0]
    e614:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e618:	4288      	cmp	r0, r1
    e61a:	bf08      	it	eq
    e61c:	f04f 0a01 	moveq.w	sl, #1
    e620:	d047      	beq.n	e6b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x282>
    e622:	f8d8 0004 	ldr.w	r0, [r8, #4]
    e626:	a906      	add	r1, sp, #24
    e628:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
    e62c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    e630:	2800      	cmp	r0, #0
    e632:	d03a      	beq.n	e6aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27a>
    e634:	2802      	cmp	r0, #2
    e636:	d10b      	bne.n	e650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x220>
    e638:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e63a:	f010 faf8 	bl	1ec2e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    e63e:	2800      	cmp	r0, #0
    e640:	d04b      	beq.n	e6da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    e642:	e9d5 011e 	ldrd	r0, r1, [r5, #120]	; 0x78
    e646:	1c40      	adds	r0, r0, #1
    e648:	f141 0100 	adc.w	r1, r1, #0
    e64c:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
    e650:	75ae      	strb	r6, [r5, #22]
    e652:	f898 0000 	ldrb.w	r0, [r8]
    e656:	2800      	cmp	r0, #0
    e658:	bf1c      	itt	ne
    e65a:	7ca8      	ldrbne	r0, [r5, #18]
    e65c:	2800      	cmpne	r0, #0
    e65e:	d009      	beq.n	e674 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    e660:	74ae      	strb	r6, [r5, #18]
    e662:	89a2      	ldrh	r2, [r4, #12]
    e664:	4631      	mov	r1, r6
    e666:	f042 0210 	orr.w	r2, r2, #16
    e66a:	81a2      	strh	r2, [r4, #12]
    e66c:	6962      	ldr	r2, [r4, #20]
    e66e:	f04f 0010 	mov.w	r0, #16
    e672:	4790      	blx	r2
    e674:	7c68      	ldrb	r0, [r5, #17]
    e676:	b190      	cbz	r0, e69e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    e678:	746e      	strb	r6, [r5, #17]
    e67a:	f7ff fb83 	bl	dd84 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    e67e:	b390      	cbz	r0, e6e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    e680:	89a2      	ldrh	r2, [r4, #12]
    e682:	2008      	movs	r0, #8
    e684:	f042 0208 	orr.w	r2, r2, #8
    e688:	81a2      	strh	r2, [r4, #12]
    e68a:	6962      	ldr	r2, [r4, #20]
    e68c:	2100      	movs	r1, #0
    e68e:	4790      	blx	r2
    e690:	e9d5 021e 	ldrd	r0, r2, [r5, #120]	; 0x78
    e694:	1c41      	adds	r1, r0, #1
    e696:	f142 0000 	adc.w	r0, r2, #0
    e69a:	e9c5 101e 	strd	r1, r0, [r5, #120]	; 0x78
    e69e:	7de8      	ldrb	r0, [r5, #23]
    e6a0:	2801      	cmp	r0, #1
    e6a2:	bf0e      	itee	eq
    e6a4:	75ee      	strbeq	r6, [r5, #23]
    e6a6:	2001      	movne	r0, #1
    e6a8:	75e8      	strbne	r0, [r5, #23]
    e6aa:	89e0      	ldrh	r0, [r4, #14]
    e6ac:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    e6b0:	81e0      	strh	r0, [r4, #14]
    e6b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e6b4:	7e39      	ldrb	r1, [r7, #24]
    e6b6:	7800      	ldrb	r0, [r0, #0]
    e6b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e6bc:	4288      	cmp	r0, r1
    e6be:	d122      	bne.n	e706 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    e6c0:	f001 fcd8 	bl	10074 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>
    e6c4:	b1b8      	cbz	r0, e6f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c6>
    e6c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e6c8:	79e0      	ldrb	r0, [r4, #7]
    e6ca:	780a      	ldrb	r2, [r1, #0]
    e6cc:	f002 0203 	and.w	r2, r2, #3
    e6d0:	2a01      	cmp	r2, #1
    e6d2:	bf18      	it	ne
    e6d4:	2a02      	cmpne	r2, #2
    e6d6:	d00b      	beq.n	e6f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c0>
    e6d8:	e00d      	b.n	e6f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c6>
    e6da:	f240 31e3 	movw	r1, #995	; 0x3e3
    e6de:	f04f 0027 	mov.w	r0, #39	; 0x27
    e6e2:	f7fe fbd1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6e6:	f240 31fa 	movw	r1, #1018	; 0x3fa
    e6ea:	2027      	movs	r0, #39	; 0x27
    e6ec:	f7fe fbcc 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6f0:	7849      	ldrb	r1, [r1, #1]
    e6f2:	4281      	cmp	r1, r0
    e6f4:	d803      	bhi.n	e6fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ce>
    e6f6:	a805      	add	r0, sp, #20
    e6f8:	f000 f990 	bl	ea1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    e6fc:	e003      	b.n	e706 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    e6fe:	7920      	ldrb	r0, [r4, #4]
    e700:	f040 0010 	orr.w	r0, r0, #16
    e704:	7120      	strb	r0, [r4, #4]
    e706:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    e70a:	2800      	cmp	r0, #0
    e70c:	d03f      	beq.n	e78e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35e>
    e70e:	f898 1000 	ldrb.w	r1, [r8]
    e712:	f8d8 0004 	ldr.w	r0, [r8, #4]
    e716:	2900      	cmp	r1, #0
    e718:	bf0c      	ite	eq
    e71a:	2201      	moveq	r2, #1
    e71c:	2200      	movne	r2, #0
    e71e:	4955      	ldr	r1, [pc, #340]	; (e874 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    e720:	760a      	strb	r2, [r1, #24]
    e722:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    e726:	e9c1 2304 	strd	r2, r3, [r1, #16]
    e72a:	6941      	ldr	r1, [r0, #20]
    e72c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    e730:	4291      	cmp	r1, r2
    e732:	bf34      	ite	cc
    e734:	f04f 0c04 	movcc.w	ip, #4
    e738:	f04f 0c00 	movcs.w	ip, #0
    e73c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    e740:	2801      	cmp	r0, #1
    e742:	bf08      	it	eq
    e744:	2300      	moveq	r3, #0
    e746:	d01c      	beq.n	e782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    e748:	2802      	cmp	r0, #2
    e74a:	bf08      	it	eq
    e74c:	2301      	moveq	r3, #1
    e74e:	d018      	beq.n	e782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    e750:	2804      	cmp	r0, #4
    e752:	bf08      	it	eq
    e754:	2303      	moveq	r3, #3
    e756:	d014      	beq.n	e782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    e758:	2808      	cmp	r0, #8
    e75a:	bf08      	it	eq
    e75c:	2302      	moveq	r3, #2
    e75e:	d010      	beq.n	e782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    e760:	f240 4122 	movw	r1, #1058	; 0x422
    e764:	2006      	movs	r0, #6
    e766:	f7fe fb8f 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e76a:	2800      	cmp	r0, #0
    e76c:	bf18      	it	ne
    e76e:	f009 fa07 	blne	17b80 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    e772:	78a0      	ldrb	r0, [r4, #2]
    e774:	1c40      	adds	r0, r0, #1
    e776:	70a0      	strb	r0, [r4, #2]
    e778:	89e0      	ldrh	r0, [r4, #14]
    e77a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    e77e:	81e0      	strh	r0, [r4, #14]
    e780:	e7c1      	b.n	e706 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d6>
    e782:	22fb      	movs	r2, #251	; 0xfb
    e784:	493b      	ldr	r1, [pc, #236]	; (e874 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    e786:	4660      	mov	r0, ip
    e788:	9600      	str	r6, [sp, #0]
    e78a:	f009 f8d1 	bl	17930 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    e78e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e790:	2500      	movs	r5, #0
    e792:	b920      	cbnz	r0, e79e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36e>
    e794:	78a1      	ldrb	r1, [r4, #2]
    e796:	2001      	movs	r0, #1
    e798:	f7ff fea6 	bl	e4e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    e79c:	b118      	cbz	r0, e7a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    e79e:	f00a f995 	bl	18acc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    e7a2:	2501      	movs	r5, #1
    e7a4:	e002      	b.n	e7ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x37c>
    e7a6:	2000      	movs	r0, #0
    e7a8:	f000 f9f2 	bl	eb90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    e7ac:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e7b0:	b1c0      	cbz	r0, e7e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>
    e7b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e7b4:	7848      	ldrb	r0, [r1, #1]
    e7b6:	9000      	str	r0, [sp, #0]
    e7b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e7ba:	b1d0      	cbz	r0, e7f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    e7bc:	8962      	ldrh	r2, [r4, #10]
    e7be:	1cd2      	adds	r2, r2, #3
    e7c0:	f014 fc93 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e7c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e7c6:	6260      	str	r0, [r4, #36]	; 0x24
    e7c8:	aa09      	add	r2, sp, #36	; 0x24
    e7ca:	a908      	add	r1, sp, #32
    e7cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e7ce:	f010 faec 	bl	1edaa <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e7d2:	9808      	ldr	r0, [sp, #32]
    e7d4:	f010 fa9c 	bl	1ed10 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e7d8:	4681      	mov	r9, r0
    e7da:	2201      	movs	r2, #1
    e7dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    e7de:	9900      	ldr	r1, [sp, #0]
    e7e0:	f010 fa4d 	bl	1ec7e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    e7e4:	8ab9      	ldrh	r1, [r7, #20]
    e7e6:	4824      	ldr	r0, [pc, #144]	; (e878 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    e7e8:	f1ba 0f00 	cmp.w	sl, #0
    e7ec:	d013      	beq.n	e816 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e6>
    e7ee:	b129      	cbz	r1, e7fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    e7f0:	e00d      	b.n	e80e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3de>
    e7f2:	f240 4166 	movw	r1, #1126	; 0x466
    e7f6:	2027      	movs	r0, #39	; 0x27
    e7f8:	f7fe fb46 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7fc:	f898 1000 	ldrb.w	r1, [r8]
    e800:	b129      	cbz	r1, e80e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3de>
    e802:	88c1      	ldrh	r1, [r0, #6]
    e804:	2900      	cmp	r1, #0
    e806:	bf04      	itt	eq
    e808:	8901      	ldrheq	r1, [r0, #8]
    e80a:	2900      	cmpeq	r1, #0
    e80c:	d003      	beq.n	e816 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e6>
    e80e:	8941      	ldrh	r1, [r0, #10]
    e810:	f101 0101 	add.w	r1, r1, #1
    e814:	8141      	strh	r1, [r0, #10]
    e816:	f1bb 0f00 	cmp.w	fp, #0
    e81a:	d007      	beq.n	e82c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    e81c:	88c1      	ldrh	r1, [r0, #6]
    e81e:	1c49      	adds	r1, r1, #1
    e820:	80c1      	strh	r1, [r0, #6]
    e822:	70a6      	strb	r6, [r4, #2]
    e824:	4812      	ldr	r0, [pc, #72]	; (e870 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    e826:	f001 fee5 	bl	105f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    e82a:	e002      	b.n	e832 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    e82c:	8901      	ldrh	r1, [r0, #8]
    e82e:	1c49      	adds	r1, r1, #1
    e830:	8101      	strh	r1, [r0, #8]
    e832:	9806      	ldr	r0, [sp, #24]
    e834:	b140      	cbz	r0, e848 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>
    e836:	f010 fa6b 	bl	1ed10 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e83a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e83e:	1c40      	adds	r0, r0, #1
    e840:	7206      	strb	r6, [r0, #8]
    e842:	220e      	movs	r2, #14
    e844:	f001 fabe 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    e848:	f1b9 0f00 	cmp.w	r9, #0
    e84c:	d008      	beq.n	e860 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    e84e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e852:	f109 0008 	add.w	r0, r9, #8
    e856:	7006      	strb	r6, [r0, #0]
    e858:	222a      	movs	r2, #42	; 0x2a
    e85a:	4648      	mov	r0, r9
    e85c:	f001 fab2 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    e860:	2d00      	cmp	r5, #0
    e862:	bf18      	it	ne
    e864:	f000 f896 	blne	e994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    e868:	b00d      	add	sp, #52	; 0x34
    e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e86e:	0000      	.short	0x0000
    e870:	200000d0 	.word	0x200000d0
    e874:	20000cd0 	.word	0x20000cd0
    e878:	20000d2a 	.word	0x20000d2a
    e87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e880:	4e42      	ldr	r6, [pc, #264]	; (e98c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55c>)
    e882:	4683      	mov	fp, r0
    e884:	f1a6 053c 	sub.w	r5, r6, #60	; 0x3c
    e888:	6870      	ldr	r0, [r6, #4]
    e88a:	468a      	mov	sl, r1
    e88c:	f100 04a8 	add.w	r4, r0, #168	; 0xa8
    e890:	7828      	ldrb	r0, [r5, #0]
    e892:	2801      	cmp	r0, #1
    e894:	d004      	beq.n	e8a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    e896:	f240 4175 	movw	r1, #1141	; 0x475
    e89a:	2027      	movs	r0, #39	; 0x27
    e89c:	f7fe faf4 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8a0:	7c20      	ldrb	r0, [r4, #16]
    e8a2:	2700      	movs	r7, #0
    e8a4:	f04f 0901 	mov.w	r9, #1
    e8a8:	b168      	cbz	r0, e8c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x496>
    e8aa:	7427      	strb	r7, [r4, #16]
    e8ac:	89aa      	ldrh	r2, [r5, #12]
    e8ae:	4639      	mov	r1, r7
    e8b0:	f042 0204 	orr.w	r2, r2, #4
    e8b4:	81aa      	strh	r2, [r5, #12]
    e8b6:	696a      	ldr	r2, [r5, #20]
    e8b8:	2004      	movs	r0, #4
    e8ba:	4790      	blx	r2
    e8bc:	7830      	ldrb	r0, [r6, #0]
    e8be:	2800      	cmp	r0, #0
    e8c0:	bf18      	it	ne
    e8c2:	f884 9012 	strbne.w	r9, [r4, #18]
    e8c6:	6a29      	ldr	r1, [r5, #32]
    e8c8:	f04f 0803 	mov.w	r8, #3
    e8cc:	7808      	ldrb	r0, [r1, #0]
    e8ce:	ea38 0000 	bics.w	r0, r8, r0
    e8d2:	d10d      	bne.n	e8f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    e8d4:	7da0      	ldrb	r0, [r4, #22]
    e8d6:	b9a0      	cbnz	r0, e902 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    e8d8:	89aa      	ldrh	r2, [r5, #12]
    e8da:	2002      	movs	r0, #2
    e8dc:	f042 0202 	orr.w	r2, r2, #2
    e8e0:	81aa      	strh	r2, [r5, #12]
    e8e2:	696a      	ldr	r2, [r5, #20]
    e8e4:	4790      	blx	r2
    e8e6:	6a28      	ldr	r0, [r5, #32]
    e8e8:	7800      	ldrb	r0, [r0, #0]
    e8ea:	ea38 0000 	bics.w	r0, r8, r0
    e8ee:	d008      	beq.n	e902 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    e8f0:	6a28      	ldr	r0, [r5, #32]
    e8f2:	7840      	ldrb	r0, [r0, #1]
    e8f4:	2800      	cmp	r0, #0
    e8f6:	bf0e      	itee	eq
    e8f8:	f884 9016 	strbeq.w	r9, [r4, #22]
    e8fc:	2002      	movne	r0, #2
    e8fe:	75a0      	strbne	r0, [r4, #22]
    e900:	e001      	b.n	e906 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d6>
    e902:	f884 8016 	strb.w	r8, [r4, #22]
    e906:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    e90a:	2800      	cmp	r0, #0
    e90c:	d02c      	beq.n	e968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x538>
    e90e:	7831      	ldrb	r1, [r6, #0]
    e910:	7a2a      	ldrb	r2, [r5, #8]
    e912:	6870      	ldr	r0, [r6, #4]
    e914:	2900      	cmp	r1, #0
    e916:	bf0c      	ite	eq
    e918:	2101      	moveq	r1, #1
    e91a:	2100      	movne	r1, #0
    e91c:	f081 0301 	eor.w	r3, r1, #1
    e920:	491b      	ldr	r1, [pc, #108]	; (e990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>)
    e922:	760b      	strb	r3, [r1, #24]
    e924:	e9d4 3c20 	ldrd	r3, ip, [r4, #128]	; 0x80
    e928:	e9c1 3c04 	strd	r3, ip, [r1, #16]
    e92c:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    e930:	f04f 0c01 	mov.w	ip, #1
    e934:	2801      	cmp	r0, #1
    e936:	bf08      	it	eq
    e938:	2300      	moveq	r3, #0
    e93a:	d010      	beq.n	e95e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52e>
    e93c:	2802      	cmp	r0, #2
    e93e:	bf08      	it	eq
    e940:	2301      	moveq	r3, #1
    e942:	d00c      	beq.n	e95e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52e>
    e944:	2804      	cmp	r0, #4
    e946:	bf08      	it	eq
    e948:	2303      	moveq	r3, #3
    e94a:	d008      	beq.n	e95e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52e>
    e94c:	2808      	cmp	r0, #8
    e94e:	bf08      	it	eq
    e950:	2302      	moveq	r3, #2
    e952:	d004      	beq.n	e95e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52e>
    e954:	f240 4122 	movw	r1, #1058	; 0x422
    e958:	2006      	movs	r0, #6
    e95a:	f7fe fa95 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e95e:	490c      	ldr	r1, [pc, #48]	; (e990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x560>)
    e960:	4660      	mov	r0, ip
    e962:	9700      	str	r7, [sp, #0]
    e964:	f008 ffe4 	bl	17930 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    e968:	ea3a 000b 	bics.w	r0, sl, fp
    e96c:	d004      	beq.n	e978 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x548>
    e96e:	2100      	movs	r1, #0
    e970:	4608      	mov	r0, r1
    e972:	f7ff fdb9 	bl	e4e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    e976:	b118      	cbz	r0, e980 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    e978:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e97c:	f000 b80a 	b.w	e994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    e980:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e984:	2000      	movs	r0, #0
    e986:	f000 b8a5 	b.w	ead4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    e98a:	0000      	.short	0x0000
    e98c:	200000d0 	.word	0x200000d0
    e990:	20000cd0 	.word	0x20000cd0
    e994:	b510      	push	{r4, lr}
    e996:	f009 f9c5 	bl	17d24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e99a:	f009 f8b9 	bl	17b10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    e99e:	4c11      	ldr	r4, [pc, #68]	; (e9e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>)
    e9a0:	2100      	movs	r1, #0
    e9a2:	6962      	ldr	r2, [r4, #20]
    e9a4:	89e0      	ldrh	r0, [r4, #14]
    e9a6:	4790      	blx	r2
    e9a8:	480f      	ldr	r0, [pc, #60]	; (e9e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>)
    e9aa:	7f01      	ldrb	r1, [r0, #28]
    e9ac:	b199      	cbz	r1, e9d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a6>
    e9ae:	f1a0 015a 	sub.w	r1, r0, #90	; 0x5a
    e9b2:	f8d1 205a 	ldr.w	r2, [r1, #90]	; 0x5a
    e9b6:	668a      	str	r2, [r1, #104]	; 0x68
    e9b8:	f8d1 205e 	ldr.w	r2, [r1, #94]	; 0x5e
    e9bc:	66ca      	str	r2, [r1, #108]	; 0x6c
    e9be:	f8d1 2062 	ldr.w	r2, [r1, #98]	; 0x62
    e9c2:	670a      	str	r2, [r1, #112]	; 0x70
    e9c4:	f8b1 2066 	ldrh.w	r2, [r1, #102]	; 0x66
    e9c8:	f8a1 2074 	strh.w	r2, [r1, #116]	; 0x74
    e9cc:	2224      	movs	r2, #36	; 0x24
    e9ce:	4907      	ldr	r1, [pc, #28]	; (e9ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5bc>)
    e9d0:	301d      	adds	r0, #29
    e9d2:	f001 fa53 	bl	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    e9d6:	69e2      	ldr	r2, [r4, #28]
    e9d8:	7921      	ldrb	r1, [r4, #4]
    e9da:	7860      	ldrb	r0, [r4, #1]
    e9dc:	4790      	blx	r2
    e9de:	2000      	movs	r0, #0
    e9e0:	7020      	strb	r0, [r4, #0]
    e9e2:	bd10      	pop	{r4, pc}
    e9e4:	20000094 	.word	0x20000094
    e9e8:	20000d2a 	.word	0x20000d2a
    e9ec:	0000e4a1 	.word	0x0000e4a1
    e9f0:	4808      	ldr	r0, [pc, #32]	; (ea14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    e9f2:	b510      	push	{r4, lr}
    e9f4:	7800      	ldrb	r0, [r0, #0]
    e9f6:	2802      	cmp	r0, #2
    e9f8:	d004      	beq.n	ea04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    e9fa:	f240 214d 	movw	r1, #589	; 0x24d
    e9fe:	2027      	movs	r0, #39	; 0x27
    ea00:	f7fe fa42 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea04:	4904      	ldr	r1, [pc, #16]	; (ea18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>)
    ea06:	2001      	movs	r0, #1
    ea08:	7308      	strb	r0, [r1, #12]
    ea0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea0e:	f7ff bfc1 	b.w	e994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    ea12:	0000      	.short	0x0000
    ea14:	20000094 	.word	0x20000094
    ea18:	20000d2a 	.word	0x20000d2a
    ea1c:	b570      	push	{r4, r5, r6, lr}
    ea1e:	4926      	ldr	r1, [pc, #152]	; (eab8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x688>)
    ea20:	4c26      	ldr	r4, [pc, #152]	; (eabc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68c>)
    ea22:	2601      	movs	r6, #1
    ea24:	6849      	ldr	r1, [r1, #4]
    ea26:	f101 05a8 	add.w	r5, r1, #168	; 0xa8
    ea2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ea2c:	780a      	ldrb	r2, [r1, #0]
    ea2e:	f002 0203 	and.w	r2, r2, #3
    ea32:	2a01      	cmp	r2, #1
    ea34:	bf18      	it	ne
    ea36:	2a02      	cmpne	r2, #2
    ea38:	d00e      	beq.n	ea58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>
    ea3a:	2a03      	cmp	r2, #3
    ea3c:	d123      	bne.n	ea86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x656>
    ea3e:	742e      	strb	r6, [r5, #16]
    ea40:	89e2      	ldrh	r2, [r4, #14]
    ea42:	4630      	mov	r0, r6
    ea44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    ea48:	81e2      	strh	r2, [r4, #14]
    ea4a:	89a2      	ldrh	r2, [r4, #12]
    ea4c:	f042 0201 	orr.w	r2, r2, #1
    ea50:	81a2      	strh	r2, [r4, #12]
    ea52:	6962      	ldr	r2, [r4, #20]
    ea54:	4790      	blx	r2
    ea56:	e016      	b.n	ea86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x656>
    ea58:	7849      	ldrb	r1, [r1, #1]
    ea5a:	b1a1      	cbz	r1, ea86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x656>
    ea5c:	89e2      	ldrh	r2, [r4, #14]
    ea5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    ea62:	81e2      	strh	r2, [r4, #14]
    ea64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ea66:	2a00      	cmp	r2, #0
    ea68:	bf08      	it	eq
    ea6a:	bd70      	popeq	{r4, r5, r6, pc}
    ea6c:	29fb      	cmp	r1, #251	; 0xfb
    ea6e:	d81d      	bhi.n	eaac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67c>
    ea70:	7961      	ldrb	r1, [r4, #5]
    ea72:	2900      	cmp	r1, #0
    ea74:	bf08      	it	eq
    ea76:	7006      	strbeq	r6, [r0, #0]
    ea78:	d005      	beq.n	ea86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x656>
    ea7a:	6962      	ldr	r2, [r4, #20]
    ea7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ea80:	2020      	movs	r0, #32
    ea82:	2100      	movs	r1, #0
    ea84:	4710      	bx	r2
    ea86:	7e28      	ldrb	r0, [r5, #24]
    ea88:	2801      	cmp	r0, #1
    ea8a:	bf06      	itte	eq
    ea8c:	2000      	moveq	r0, #0
    ea8e:	7628      	strbeq	r0, [r5, #24]
    ea90:	762e      	strbne	r6, [r5, #24]
    ea92:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ea94:	7840      	ldrb	r0, [r0, #1]
    ea96:	2800      	cmp	r0, #0
    ea98:	bf08      	it	eq
    ea9a:	bd70      	popeq	{r4, r5, r6, pc}
    ea9c:	e9d5 1020 	ldrd	r1, r0, [r5, #128]	; 0x80
    eaa0:	1c49      	adds	r1, r1, #1
    eaa2:	f140 0000 	adc.w	r0, r0, #0
    eaa6:	e9c5 1020 	strd	r1, r0, [r5, #128]	; 0x80
    eaaa:	bd70      	pop	{r4, r5, r6, pc}
    eaac:	7920      	ldrb	r0, [r4, #4]
    eaae:	f040 0010 	orr.w	r0, r0, #16
    eab2:	7120      	strb	r0, [r4, #4]
    eab4:	bd70      	pop	{r4, r5, r6, pc}
    eab6:	0000      	.short	0x0000
    eab8:	200000d0 	.word	0x200000d0
    eabc:	20000094 	.word	0x20000094
    eac0:	4803      	ldr	r0, [pc, #12]	; (ead0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a0>)
    eac2:	7800      	ldrb	r0, [r0, #0]
    eac4:	2800      	cmp	r0, #0
    eac6:	bf08      	it	eq
    eac8:	4770      	bxeq	lr
    eaca:	f7ff bf63 	b.w	e994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    eace:	0000      	.short	0x0000
    ead0:	20000094 	.word	0x20000094
    ead4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ead8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; eb88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    eadc:	4607      	mov	r7, r0
    eade:	f1a8 043c 	sub.w	r4, r8, #60	; 0x3c
    eae2:	f8d8 5004 	ldr.w	r5, [r8, #4]
    eae6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    eae8:	6260      	str	r0, [r4, #36]	; 0x24
    eaea:	f895 10cb 	ldrb.w	r1, [r5, #203]	; 0xcb
    eaee:	7a20      	ldrb	r0, [r4, #8]
    eaf0:	f105 06a8 	add.w	r6, r5, #168	; 0xa8
    eaf4:	2900      	cmp	r1, #0
    eaf6:	bf1c      	itt	ne
    eaf8:	1d00      	addne	r0, r0, #4
    eafa:	b2c0      	uxtbne	r0, r0
    eafc:	4922      	ldr	r1, [pc, #136]	; (eb88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>)
    eafe:	2f00      	cmp	r7, #0
    eb00:	6849      	ldr	r1, [r1, #4]
    eb02:	f891 106f 	ldrb.w	r1, [r1, #111]	; 0x6f
    eb06:	bf02      	ittt	eq
    eb08:	28ff      	cmpeq	r0, #255	; 0xff
    eb0a:	f895 206e 	ldrbeq.w	r2, [r5, #110]	; 0x6e
    eb0e:	4291      	cmpeq	r1, r2
    eb10:	d001      	beq.n	eb16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e6>
    eb12:	f009 fffd 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    eb16:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    eb1a:	b1a8      	cbz	r0, eb48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x718>
    eb1c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    eb1e:	f009 fd93 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    eb22:	f898 0000 	ldrb.w	r0, [r8]
    eb26:	2800      	cmp	r0, #0
    eb28:	bf0c      	ite	eq
    eb2a:	2001      	moveq	r0, #1
    eb2c:	2000      	movne	r0, #0
    eb2e:	f080 0101 	eor.w	r1, r0, #1
    eb32:	4816      	ldr	r0, [pc, #88]	; (eb8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75c>)
    eb34:	7601      	strb	r1, [r0, #24]
    eb36:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    eb3a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    eb3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    eb40:	6a60      	ldr	r0, [r4, #36]	; 0x24
    eb42:	f008 ff85 	bl	17a50 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    eb46:	e004      	b.n	eb52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x722>
    eb48:	6a60      	ldr	r0, [r4, #36]	; 0x24
    eb4a:	f009 fd7d 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    eb4e:	f008 ffdf 	bl	17b10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    eb52:	b93f      	cbnz	r7, eb64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x734>
    eb54:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    eb58:	f010 000c 	ands.w	r0, r0, #12
    eb5c:	bf18      	it	ne
    eb5e:	2028      	movne	r0, #40	; 0x28
    eb60:	f009 fbd6 	bl	18310 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    eb64:	6968      	ldr	r0, [r5, #20]
    eb66:	f641 514c 	movw	r1, #7500	; 0x1d4c
    eb6a:	4288      	cmp	r0, r1
    eb6c:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
    eb70:	f04f 0100 	mov.w	r1, #0
    eb74:	bf34      	ite	cc
    eb76:	2001      	movcc	r0, #1
    eb78:	2000      	movcs	r0, #0
    eb7a:	f009 ff3d 	bl	189f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    eb7e:	2002      	movs	r0, #2
    eb80:	7020      	strb	r0, [r4, #0]
    eb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb86:	0000      	.short	0x0000
    eb88:	200000d0 	.word	0x200000d0
    eb8c:	20000cd0 	.word	0x20000cd0
    eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb94:	f8df a1f4 	ldr.w	sl, [pc, #500]	; ed8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x95c>
    eb98:	b083      	sub	sp, #12
    eb9a:	f1aa 091c 	sub.w	r9, sl, #28
    eb9e:	f8da 5004 	ldr.w	r5, [sl, #4]
    eba2:	f04f 0800 	mov.w	r8, #0
    eba6:	f88d 8000 	strb.w	r8, [sp]
    ebaa:	f1a9 0420 	sub.w	r4, r9, #32
    ebae:	f895 10cb 	ldrb.w	r1, [r5, #203]	; 0xcb
    ebb2:	7a22      	ldrb	r2, [r4, #8]
    ebb4:	f105 06a8 	add.w	r6, r5, #168	; 0xa8
    ebb8:	2900      	cmp	r1, #0
    ebba:	bf1c      	itt	ne
    ebbc:	1d11      	addne	r1, r2, #4
    ebbe:	b2ca      	uxtbne	r2, r1
    ebc0:	4972      	ldr	r1, [pc, #456]	; (ed8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x95c>)
    ebc2:	2800      	cmp	r0, #0
    ebc4:	6849      	ldr	r1, [r1, #4]
    ebc6:	f891 106e 	ldrb.w	r1, [r1, #110]	; 0x6e
    ebca:	bf02      	ittt	eq
    ebcc:	2aff      	cmpeq	r2, #255	; 0xff
    ebce:	f895 006f 	ldrbeq.w	r0, [r5, #111]	; 0x6f
    ebd2:	4288      	cmpeq	r0, r1
    ebd4:	d003      	beq.n	ebde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ae>
    ebd6:	f04f 00ff 	mov.w	r0, #255	; 0xff
    ebda:	f009 ff99 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ebde:	7db0      	ldrb	r0, [r6, #22]
    ebe0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; ed90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x960>
    ebe4:	2701      	movs	r7, #1
    ebe6:	b150      	cbz	r0, ebfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ce>
    ebe8:	2801      	cmp	r0, #1
    ebea:	d030      	beq.n	ec4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x81e>
    ebec:	2802      	cmp	r0, #2
    ebee:	d041      	beq.n	ec74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x844>
    ebf0:	2803      	cmp	r0, #3
    ebf2:	d04f      	beq.n	ec94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x864>
    ebf4:	f240 21ff 	movw	r1, #767	; 0x2ff
    ebf8:	2027      	movs	r0, #39	; 0x27
    ebfa:	f7fe f945 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebfe:	79a0      	ldrb	r0, [r4, #6]
    ec00:	f8ad 0004 	strh.w	r0, [sp, #4]
    ec04:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    ec08:	4648      	mov	r0, r9
    ec0a:	f7ff f8e5 	bl	ddd8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    ec0e:	b1a0      	cbz	r0, ec3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80a>
    ec10:	89a2      	ldrh	r2, [r4, #12]
    ec12:	6a21      	ldr	r1, [r4, #32]
    ec14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ec18:	81a2      	strh	r2, [r4, #12]
    ec1a:	6962      	ldr	r2, [r4, #20]
    ec1c:	2080      	movs	r0, #128	; 0x80
    ec1e:	4790      	blx	r2
    ec20:	7477      	strb	r7, [r6, #17]
    ec22:	f8d9 0000 	ldr.w	r0, [r9]
    ec26:	78c0      	ldrb	r0, [r0, #3]
    ec28:	281b      	cmp	r0, #27
    ec2a:	d13c      	bne.n	eca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x876>
    ec2c:	f04f 0101 	mov.w	r1, #1
    ec30:	f105 0010 	add.w	r0, r5, #16
    ec34:	f00a fa8c 	bl	19150 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA>
    ec38:	e035      	b.n	eca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x876>
    ec3a:	466a      	mov	r2, sp
    ec3c:	a901      	add	r1, sp, #4
    ec3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ec40:	f010 f91b 	bl	1ee7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    ec44:	6220      	str	r0, [r4, #32]
    ec46:	b110      	cbz	r0, ec4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x81e>
    ec48:	f896 105d 	ldrb.w	r1, [r6, #93]	; 0x5d
    ec4c:	b111      	cbz	r1, ec54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x824>
    ec4e:	f8c4 b020 	str.w	fp, [r4, #32]
    ec52:	e028      	b.n	eca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x876>
    ec54:	f89d 1000 	ldrb.w	r1, [sp]
    ec58:	b931      	cbnz	r1, ec68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x838>
    ec5a:	f8a0 8000 	strh.w	r8, [r0]
    ec5e:	f880 8002 	strb.w	r8, [r0, #2]
    ec62:	2101      	movs	r1, #1
    ec64:	f011 f945 	bl	1fef2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    ec68:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ec6c:	6a20      	ldr	r0, [r4, #32]
    ec6e:	f011 f8a9 	bl	1fdc4 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    ec72:	e018      	b.n	eca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x876>
    ec74:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
    ec78:	f8ad 0004 	strh.w	r0, [sp, #4]
    ec7c:	466a      	mov	r2, sp
    ec7e:	a901      	add	r1, sp, #4
    ec80:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ec82:	f010 f8fa 	bl	1ee7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>
    ec86:	6220      	str	r0, [r4, #32]
    ec88:	b968      	cbnz	r0, eca6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x876>
    ec8a:	f240 21e9 	movw	r1, #745	; 0x2e9
    ec8e:	2027      	movs	r0, #39	; 0x27
    ec90:	f7fe f8fa 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec94:	4648      	mov	r0, r9
    ec96:	f7ff f89f 	bl	ddd8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    ec9a:	b368      	cbz	r0, ecf8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8c8>
    ec9c:	f8d9 0000 	ldr.w	r0, [r9]
    eca0:	78c0      	ldrb	r0, [r0, #3]
    eca2:	281b      	cmp	r0, #27
    eca4:	d0c2      	beq.n	ec2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7fc>
    eca6:	6a20      	ldr	r0, [r4, #32]
    eca8:	f04f 0308 	mov.w	r3, #8
    ecac:	f04f 0903 	mov.w	r9, #3
    ecb0:	7801      	ldrb	r1, [r0, #0]
    ecb2:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    ecb6:	7001      	strb	r1, [r0, #0]
    ecb8:	7df2      	ldrb	r2, [r6, #23]
    ecba:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    ecbe:	ea41 0102 	orr.w	r1, r1, r2
    ecc2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    ecc6:	7001      	strb	r1, [r0, #0]
    ecc8:	7e32      	ldrb	r2, [r6, #24]
    ecca:	f04f 0304 	mov.w	r3, #4
    ecce:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    ecd2:	ea41 0102 	orr.w	r1, r1, r2
    ecd6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    ecda:	7001      	strb	r1, [r0, #0]
    ecdc:	ea39 0101 	bics.w	r1, r9, r1
    ece0:	bf04      	itt	eq
    ece2:	78c0      	ldrbeq	r0, [r0, #3]
    ece4:	2802      	cmpeq	r0, #2
    ece6:	d015      	beq.n	ed14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e4>
    ece8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ecea:	f010 f8a0 	bl	1ee2e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    ecee:	2800      	cmp	r0, #0
    ecf0:	bf18      	it	ne
    ecf2:	46b8      	movne	r8, r7
    ecf4:	d005      	beq.n	ed02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8d2>
    ecf6:	e00d      	b.n	ed14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e4>
    ecf8:	f240 21f2 	movw	r1, #754	; 0x2f2
    ecfc:	2027      	movs	r0, #39	; 0x27
    ecfe:	f7fe f8c3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed02:	6a20      	ldr	r0, [r4, #32]
    ed04:	7800      	ldrb	r0, [r0, #0]
    ed06:	ea39 0000 	bics.w	r0, r9, r0
    ed0a:	d003      	beq.n	ed14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x8e4>
    ed0c:	f7ff f822 	bl	dd54 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    ed10:	f080 0801 	eor.w	r8, r0, #1
    ed14:	6a20      	ldr	r0, [r4, #32]
    ed16:	7801      	ldrb	r1, [r0, #0]
    ed18:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
    ed1c:	7001      	strb	r1, [r0, #0]
    ed1e:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
    ed22:	2900      	cmp	r1, #0
    ed24:	bf1c      	itt	ne
    ed26:	7841      	ldrbne	r1, [r0, #1]
    ed28:	2900      	cmpne	r1, #0
    ed2a:	d013      	beq.n	ed54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x924>
    ed2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ed2e:	f009 fc8b 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    ed32:	f89a 0000 	ldrb.w	r0, [sl]
    ed36:	2800      	cmp	r0, #0
    ed38:	bf0c      	ite	eq
    ed3a:	2101      	moveq	r1, #1
    ed3c:	2100      	movne	r1, #0
    ed3e:	4815      	ldr	r0, [pc, #84]	; (ed94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x964>)
    ed40:	7601      	strb	r1, [r0, #24]
    ed42:	e9d6 121e 	ldrd	r1, r2, [r6, #120]	; 0x78
    ed46:	e9c0 1204 	strd	r1, r2, [r0, #16]
    ed4a:	6a21      	ldr	r1, [r4, #32]
    ed4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ed4e:	f008 fe7f 	bl	17a50 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    ed52:	e003      	b.n	ed5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x92c>
    ed54:	f009 fc78 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    ed58:	f008 feda 	bl	17b10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    ed5c:	6968      	ldr	r0, [r5, #20]
    ed5e:	f641 514c 	movw	r1, #7500	; 0x1d4c
    ed62:	4288      	cmp	r0, r1
    ed64:	f895 206f 	ldrb.w	r2, [r5, #111]	; 0x6f
    ed68:	f04f 0101 	mov.w	r1, #1
    ed6c:	bf34      	ite	cc
    ed6e:	2001      	movcc	r0, #1
    ed70:	2000      	movcs	r0, #0
    ed72:	f009 fe41 	bl	189f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    ed76:	70e7      	strb	r7, [r4, #3]
    ed78:	6a20      	ldr	r0, [r4, #32]
    ed7a:	8801      	ldrh	r1, [r0, #0]
    ed7c:	8221      	strh	r1, [r4, #16]
    ed7e:	7880      	ldrb	r0, [r0, #2]
    ed80:	74a0      	strb	r0, [r4, #18]
    ed82:	7027      	strb	r7, [r4, #0]
    ed84:	b003      	add	sp, #12
    ed86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed8a:	0000      	.short	0x0000
    ed8c:	200000d0 	.word	0x200000d0
    ed90:	20000cf8 	.word	0x20000cf8
    ed94:	20000cd0 	.word	0x20000cd0
    ed98:	0000e9f1 	.word	0x0000e9f1
    ed9c:	0000e569 	.word	0x0000e569
    eda0:	0000e87d 	.word	0x0000e87d
    eda4:	0000eac1 	.word	0x0000eac1

0000eda8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    eda8:	4602      	mov	r2, r0
    edaa:	4807      	ldr	r0, [pc, #28]	; (edc8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x20>)
    edac:	b510      	push	{r4, lr}
    edae:	7800      	ldrb	r0, [r0, #0]
    edb0:	b138      	cbz	r0, edc2 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    edb2:	4806      	ldr	r0, [pc, #24]	; (edcc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x24>)
    edb4:	7881      	ldrb	r1, [r0, #2]
    edb6:	b121      	cbz	r1, edc2 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA+0x1a>
    edb8:	1cc0      	adds	r0, r0, #3
    edba:	f008 fd0b 	bl	177d4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    edbe:	2001      	movs	r0, #1
    edc0:	bd10      	pop	{r4, pc}
    edc2:	2000      	movs	r0, #0
    edc4:	bd10      	pop	{r4, pc}
    edc6:	0000      	.short	0x0000
    edc8:	200003f8 	.word	0x200003f8
    edcc:	200016e2 	.word	0x200016e2

0000edd0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    edd0:	4800      	ldr	r0, [pc, #0]	; (edd4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    edd2:	4770      	bx	lr
    edd4:	200018b5 	.word	0x200018b5

0000edd8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    edd8:	4904      	ldr	r1, [pc, #16]	; (edec <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    edda:	788a      	ldrb	r2, [r1, #2]
    eddc:	4282      	cmp	r2, r0
    edde:	bf86      	itte	hi
    ede0:	4408      	addhi	r0, r1
    ede2:	f890 0143 	ldrbhi.w	r0, [r0, #323]	; 0x143
    ede6:	2000      	movls	r0, #0
    ede8:	4770      	bx	lr
    edea:	0000      	.short	0x0000
    edec:	200016e2 	.word	0x200016e2

0000edf0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    edf0:	4904      	ldr	r1, [pc, #16]	; (ee04 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    edf2:	788a      	ldrb	r2, [r1, #2]
    edf4:	4282      	cmp	r2, r0
    edf6:	bf86      	itte	hi
    edf8:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    edfc:	3083      	addhi	r0, #131	; 0x83
    edfe:	2000      	movls	r0, #0
    ee00:	4770      	bx	lr
    ee02:	0000      	.short	0x0000
    ee04:	200016e2 	.word	0x200016e2

0000ee08 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    ee08:	4a05      	ldr	r2, [pc, #20]	; (ee20 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    ee0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ee0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ee12:	6802      	ldr	r2, [r0, #0]
    ee14:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    ee18:	8880      	ldrh	r0, [r0, #4]
    ee1a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    ee1e:	4770      	bx	lr
    ee20:	200016e2 	.word	0x200016e2

0000ee24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    ee24:	4904      	ldr	r1, [pc, #16]	; (ee38 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    ee26:	788a      	ldrb	r2, [r1, #2]
    ee28:	4282      	cmp	r2, r0
    ee2a:	bf86      	itte	hi
    ee2c:	eb01 1000 	addhi.w	r0, r1, r0, lsl #4
    ee30:	1cc0      	addhi	r0, r0, #3
    ee32:	2000      	movls	r0, #0
    ee34:	4770      	bx	lr
    ee36:	0000      	.short	0x0000
    ee38:	200016e2 	.word	0x200016e2

0000ee3c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    ee3c:	b510      	push	{r4, lr}
    ee3e:	f240 12d3 	movw	r2, #467	; 0x1d3
    ee42:	2100      	movs	r1, #0
    ee44:	4807      	ldr	r0, [pc, #28]	; (ee64 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x28>)
    ee46:	f014 f9ca 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ee4a:	2208      	movs	r2, #8
    ee4c:	21ff      	movs	r1, #255	; 0xff
    ee4e:	4806      	ldr	r0, [pc, #24]	; (ee68 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    ee50:	f014 f9c5 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ee54:	4805      	ldr	r0, [pc, #20]	; (ee6c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    ee56:	2100      	movs	r1, #0
    ee58:	7001      	strb	r1, [r0, #0]
    ee5a:	7041      	strb	r1, [r0, #1]
    ee5c:	f44f 7161 	mov.w	r1, #900	; 0x384
    ee60:	8041      	strh	r1, [r0, #2]
    ee62:	bd10      	pop	{r4, pc}
    ee64:	200016e2 	.word	0x200016e2
    ee68:	200003fc 	.word	0x200003fc
    ee6c:	200003f8 	.word	0x200003f8

0000ee70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    ee70:	4b0b      	ldr	r3, [pc, #44]	; (eea0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    ee72:	f893 c002 	ldrb.w	ip, [r3, #2]
    ee76:	4584      	cmp	ip, r0
    ee78:	bf9c      	itt	ls
    ee7a:	2000      	movls	r0, #0
    ee7c:	4770      	bxls	lr
    ee7e:	4418      	add	r0, r3
    ee80:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    ee84:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ee88:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    ee8c:	700b      	strb	r3, [r1, #0]
    ee8e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    ee92:	6011      	str	r1, [r2, #0]
    ee94:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    ee98:	8090      	strh	r0, [r2, #4]
    ee9a:	2001      	movs	r0, #1
    ee9c:	4770      	bx	lr
    ee9e:	0000      	.short	0x0000
    eea0:	200016e2 	.word	0x200016e2

0000eea4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    eea4:	4907      	ldr	r1, [pc, #28]	; (eec4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    eea6:	788a      	ldrb	r2, [r1, #2]
    eea8:	4282      	cmp	r2, r0
    eeaa:	bf9c      	itt	ls
    eeac:	2000      	movls	r0, #0
    eeae:	4770      	bxls	lr
    eeb0:	4408      	add	r0, r1
    eeb2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    eeb6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    eeba:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    eebe:	f000 0001 	and.w	r0, r0, #1
    eec2:	4770      	bx	lr
    eec4:	200016e2 	.word	0x200016e2

0000eec8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    eec8:	b510      	push	{r4, lr}
    eeca:	f000 f921 	bl	f110 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    eece:	2810      	cmp	r0, #16
    eed0:	d014      	beq.n	eefc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    eed2:	4a0b      	ldr	r2, [pc, #44]	; (ef00 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x38>)
    eed4:	4601      	mov	r1, r0
    eed6:	2000      	movs	r0, #0
    eed8:	f892 c002 	ldrb.w	ip, [r2, #2]
    eedc:	f1bc 0f00 	cmp.w	ip, #0
    eee0:	d90c      	bls.n	eefc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    eee2:	1813      	adds	r3, r2, r0
    eee4:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    eee8:	428b      	cmp	r3, r1
    eeea:	d103      	bne.n	eef4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x2c>
    eeec:	2810      	cmp	r0, #16
    eeee:	bf18      	it	ne
    eef0:	bd10      	popne	{r4, pc}
    eef2:	e003      	b.n	eefc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x34>
    eef4:	1c40      	adds	r0, r0, #1
    eef6:	b2c0      	uxtb	r0, r0
    eef8:	4584      	cmp	ip, r0
    eefa:	d8f2      	bhi.n	eee2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x1a>
    eefc:	2008      	movs	r0, #8
    eefe:	bd10      	pop	{r4, pc}
    ef00:	200016e2 	.word	0x200016e2

0000ef04 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    ef04:	4801      	ldr	r0, [pc, #4]	; (ef0c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    ef06:	8840      	ldrh	r0, [r0, #2]
    ef08:	4770      	bx	lr
    ef0a:	0000      	.short	0x0000
    ef0c:	200003f8 	.word	0x200003f8

0000ef10 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    ef10:	4906      	ldr	r1, [pc, #24]	; (ef2c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x1c>)
    ef12:	788a      	ldrb	r2, [r1, #2]
    ef14:	4282      	cmp	r2, r0
    ef16:	d906      	bls.n	ef26 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x16>
    ef18:	4408      	add	r0, r1
    ef1a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    ef1e:	2800      	cmp	r0, #0
    ef20:	bf04      	itt	eq
    ef22:	2001      	moveq	r0, #1
    ef24:	4770      	bxeq	lr
    ef26:	2000      	movs	r0, #0
    ef28:	4770      	bx	lr
    ef2a:	0000      	.short	0x0000
    ef2c:	200016e2 	.word	0x200016e2

0000ef30 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    ef30:	b570      	push	{r4, r5, r6, lr}
    ef32:	460d      	mov	r5, r1
    ef34:	4604      	mov	r4, r0
    ef36:	f000 f8eb 	bl	f110 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ef3a:	4a1a      	ldr	r2, [pc, #104]	; (efa4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x74>)
    ef3c:	2810      	cmp	r0, #16
    ef3e:	d014      	beq.n	ef6a <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3a>
    ef40:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    ef44:	f891 015a 	ldrb.w	r0, [r1, #346]	; 0x15a
    ef48:	f010 0f01 	tst.w	r0, #1
    ef4c:	bf1c      	itt	ne
    ef4e:	2001      	movne	r0, #1
    ef50:	bd70      	popne	{r4, r5, r6, pc}
    ef52:	7850      	ldrb	r0, [r2, #1]
    ef54:	2808      	cmp	r0, #8
    ef56:	bf3c      	itt	cc
    ef58:	2001      	movcc	r0, #1
    ef5a:	f881 015a 	strbcc.w	r0, [r1, #346]	; 0x15a
    ef5e:	d21e      	bcs.n	ef9e <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    ef60:	7850      	ldrb	r0, [r2, #1]
    ef62:	1c40      	adds	r0, r0, #1
    ef64:	7050      	strb	r0, [r2, #1]
    ef66:	2001      	movs	r0, #1
    ef68:	bd70      	pop	{r4, r5, r6, pc}
    ef6a:	7850      	ldrb	r0, [r2, #1]
    ef6c:	2808      	cmp	r0, #8
    ef6e:	d216      	bcs.n	ef9e <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x6e>
    ef70:	7813      	ldrb	r3, [r2, #0]
    ef72:	2001      	movs	r0, #1
    ef74:	1c59      	adds	r1, r3, #1
    ef76:	7011      	strb	r1, [r2, #0]
    ef78:	2b10      	cmp	r3, #16
    ef7a:	d303      	bcc.n	ef84 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x54>
    ef7c:	2146      	movs	r1, #70	; 0x46
    ef7e:	2028      	movs	r0, #40	; 0x28
    ef80:	f7fd ff82 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ef88:	6829      	ldr	r1, [r5, #0]
    ef8a:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
    ef8e:	88a9      	ldrh	r1, [r5, #4]
    ef90:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    ef94:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    ef98:	f883 015a 	strb.w	r0, [r3, #346]	; 0x15a
    ef9c:	e7e0      	b.n	ef60 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x30>
    ef9e:	2000      	movs	r0, #0
    efa0:	bd70      	pop	{r4, r5, r6, pc}
    efa2:	0000      	.short	0x0000
    efa4:	200016e2 	.word	0x200016e2

0000efa8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    efa8:	4901      	ldr	r1, [pc, #4]	; (efb0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    efaa:	7048      	strb	r0, [r1, #1]
    efac:	4770      	bx	lr
    efae:	0000      	.short	0x0000
    efb0:	200003f8 	.word	0x200003f8

0000efb4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    efb4:	b470      	push	{r4, r5, r6}
    efb6:	482b      	ldr	r0, [pc, #172]	; (f064 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb0>)
    efb8:	2500      	movs	r5, #0
    efba:	7801      	ldrb	r1, [r0, #0]
    efbc:	1e49      	subs	r1, r1, #1
    efbe:	b24b      	sxtb	r3, r1
    efc0:	2b00      	cmp	r3, #0
    efc2:	db46      	blt.n	f052 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x9e>
    efc4:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
    efc8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    efcc:	f011 0f01 	tst.w	r1, #1
    efd0:	d03b      	beq.n	f04a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    efd2:	7842      	ldrb	r2, [r0, #1]
    efd4:	b2d9      	uxtb	r1, r3
    efd6:	1e52      	subs	r2, r2, #1
    efd8:	7042      	strb	r2, [r0, #1]
    efda:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    efde:	f882 515a 	strb.w	r5, [r2, #346]	; 0x15a
    efe2:	f890 c002 	ldrb.w	ip, [r0, #2]
    efe6:	2200      	movs	r2, #0
    efe8:	f1bc 0f00 	cmp.w	ip, #0
    efec:	d90b      	bls.n	f006 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    efee:	1884      	adds	r4, r0, r2
    eff0:	f894 6103 	ldrb.w	r6, [r4, #259]	; 0x103
    eff4:	428e      	cmp	r6, r1
    eff6:	d102      	bne.n	effe <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x4a>
    eff8:	2a10      	cmp	r2, #16
    effa:	d126      	bne.n	f04a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    effc:	e003      	b.n	f006 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x52>
    effe:	1c52      	adds	r2, r2, #1
    f000:	b2d2      	uxtb	r2, r2
    f002:	4594      	cmp	ip, r2
    f004:	d8f3      	bhi.n	efee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x3a>
    f006:	7802      	ldrb	r2, [r0, #0]
    f008:	1e52      	subs	r2, r2, #1
    f00a:	b2d2      	uxtb	r2, r2
    f00c:	7002      	strb	r2, [r0, #0]
    f00e:	428a      	cmp	r2, r1
    f010:	d01b      	beq.n	f04a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    f012:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    f016:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    f01a:	f8d2 4153 	ldr.w	r4, [r2, #339]	; 0x153
    f01e:	f8cc 4153 	str.w	r4, [ip, #339]	; 0x153
    f022:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    f026:	f8cc 2157 	str.w	r2, [ip, #343]	; 0x157
    f02a:	7884      	ldrb	r4, [r0, #2]
    f02c:	f890 c000 	ldrb.w	ip, [r0]
    f030:	2200      	movs	r2, #0
    f032:	2c00      	cmp	r4, #0
    f034:	d909      	bls.n	f04a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    f036:	1886      	adds	r6, r0, r2
    f038:	f896 6103 	ldrb.w	r6, [r6, #259]	; 0x103
    f03c:	4566      	cmp	r6, ip
    f03e:	d10c      	bne.n	f05a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xa6>
    f040:	2a10      	cmp	r2, #16
    f042:	bf1c      	itt	ne
    f044:	4402      	addne	r2, r0
    f046:	f882 1103 	strbne.w	r1, [r2, #259]	; 0x103
    f04a:	1e59      	subs	r1, r3, #1
    f04c:	b24b      	sxtb	r3, r1
    f04e:	2b00      	cmp	r3, #0
    f050:	dab8      	bge.n	efc4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x10>
    f052:	4805      	ldr	r0, [pc, #20]	; (f068 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xb4>)
    f054:	7045      	strb	r5, [r0, #1]
    f056:	bc70      	pop	{r4, r5, r6}
    f058:	4770      	bx	lr
    f05a:	1c52      	adds	r2, r2, #1
    f05c:	b2d2      	uxtb	r2, r2
    f05e:	4294      	cmp	r4, r2
    f060:	d8e9      	bhi.n	f036 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x82>
    f062:	e7f2      	b.n	f04a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x96>
    f064:	200016e2 	.word	0x200016e2
    f068:	200003f8 	.word	0x200003f8

0000f06c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    f06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f070:	4d25      	ldr	r5, [pc, #148]	; (f108 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    f072:	2600      	movs	r6, #0
    f074:	4634      	mov	r4, r6
    f076:	7828      	ldrb	r0, [r5, #0]
    f078:	2800      	cmp	r0, #0
    f07a:	bf8c      	ite	hi
    f07c:	4f23      	ldrhi	r7, [pc, #140]	; (f10c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    f07e:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    f082:	bf00      	nop
    f084:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    f088:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    f08c:	f011 0f01 	tst.w	r1, #1
    f090:	d032      	beq.n	f0f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    f092:	78aa      	ldrb	r2, [r5, #2]
    f094:	2100      	movs	r1, #0
    f096:	4623      	mov	r3, r4
    f098:	2a00      	cmp	r2, #0
    f09a:	d909      	bls.n	f0b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x44>
    f09c:	eb05 0c01 	add.w	ip, r5, r1
    f0a0:	f89c c103 	ldrb.w	ip, [ip, #259]	; 0x103
    f0a4:	459c      	cmp	ip, r3
    f0a6:	d004      	beq.n	f0b2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x46>
    f0a8:	1c49      	adds	r1, r1, #1
    f0aa:	b2c9      	uxtb	r1, r1
    f0ac:	428a      	cmp	r2, r1
    f0ae:	d8f5      	bhi.n	f09c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x30>
    f0b0:	2110      	movs	r1, #16
    f0b2:	428a      	cmp	r2, r1
    f0b4:	bf86      	itte	hi
    f0b6:	eb05 1201 	addhi.w	r2, r5, r1, lsl #4
    f0ba:	1cd3      	addhi	r3, r2, #3
    f0bc:	2300      	movls	r3, #0
    f0be:	2200      	movs	r2, #0
    f0c0:	2910      	cmp	r1, #16
    f0c2:	d00c      	beq.n	f0de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    f0c4:	eb05 0c01 	add.w	ip, r5, r1
    f0c8:	f89c 813b 	ldrb.w	r8, [ip, #315]	; 0x13b
    f0cc:	f1b8 0f01 	cmp.w	r8, #1
    f0d0:	d004      	beq.n	f0dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>
    f0d2:	f89c c14b 	ldrb.w	ip, [ip, #331]	; 0x14b
    f0d6:	f1bc 0f00 	cmp.w	ip, #0
    f0da:	d000      	beq.n	f0de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x72>
    f0dc:	2201      	movs	r2, #1
    f0de:	1e52      	subs	r2, r2, #1
    f0e0:	4213      	tst	r3, r2
    f0e2:	d109      	bne.n	f0f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    f0e4:	55b9      	strb	r1, [r7, r6]
    f0e6:	f890 2153 	ldrb.w	r2, [r0, #339]	; 0x153
    f0ea:	f500 71aa 	add.w	r1, r0, #340	; 0x154
    f0ee:	4630      	mov	r0, r6
    f0f0:	1c73      	adds	r3, r6, #1
    f0f2:	b2de      	uxtb	r6, r3
    f0f4:	f00a f890 	bl	19218 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    f0f8:	1c60      	adds	r0, r4, #1
    f0fa:	b2c4      	uxtb	r4, r0
    f0fc:	7828      	ldrb	r0, [r5, #0]
    f0fe:	42a0      	cmp	r0, r4
    f100:	d8c0      	bhi.n	f084 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18>
    f102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f106:	0000      	.short	0x0000
    f108:	200016e2 	.word	0x200016e2
    f10c:	200003fc 	.word	0x200003fc
    f110:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    f114:	4b20      	ldr	r3, [pc, #128]	; (f198 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>)
    f116:	4602      	mov	r2, r0
    f118:	2000      	movs	r0, #0
    f11a:	f893 8000 	ldrb.w	r8, [r3]
    f11e:	f1b8 0f00 	cmp.w	r8, #0
    f122:	d934      	bls.n	f18e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x122>
    f124:	780f      	ldrb	r7, [r1, #0]
    f126:	784e      	ldrb	r6, [r1, #1]
    f128:	788d      	ldrb	r5, [r1, #2]
    f12a:	78cc      	ldrb	r4, [r1, #3]
    f12c:	f891 c004 	ldrb.w	ip, [r1, #4]
    f130:	f891 a005 	ldrb.w	sl, [r1, #5]
    f134:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    f138:	f891 9153 	ldrb.w	r9, [r1, #339]	; 0x153
    f13c:	f891 b154 	ldrb.w	fp, [r1, #340]	; 0x154
    f140:	ea82 0909 	eor.w	r9, r2, r9
    f144:	ea87 0b0b 	eor.w	fp, r7, fp
    f148:	44d9      	add	r9, fp
    f14a:	f891 b155 	ldrb.w	fp, [r1, #341]	; 0x155
    f14e:	ea86 0b0b 	eor.w	fp, r6, fp
    f152:	44d9      	add	r9, fp
    f154:	f891 b156 	ldrb.w	fp, [r1, #342]	; 0x156
    f158:	ea85 0b0b 	eor.w	fp, r5, fp
    f15c:	44d9      	add	r9, fp
    f15e:	f891 b157 	ldrb.w	fp, [r1, #343]	; 0x157
    f162:	ea84 0b0b 	eor.w	fp, r4, fp
    f166:	44d9      	add	r9, fp
    f168:	f891 b158 	ldrb.w	fp, [r1, #344]	; 0x158
    f16c:	f891 1159 	ldrb.w	r1, [r1, #345]	; 0x159
    f170:	ea8c 0b0b 	eor.w	fp, ip, fp
    f174:	44d9      	add	r9, fp
    f176:	ea8a 0101 	eor.w	r1, sl, r1
    f17a:	eb11 0f09 	cmn.w	r1, r9
    f17e:	bf04      	itt	eq
    f180:	e8bd 0ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    f184:	4770      	bxeq	lr
    f186:	1c40      	adds	r0, r0, #1
    f188:	b2c0      	uxtb	r0, r0
    f18a:	4580      	cmp	r8, r0
    f18c:	d8d2      	bhi.n	f134 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    f18e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    f192:	2010      	movs	r0, #16
    f194:	4770      	bx	lr
    f196:	0000      	.short	0x0000
    f198:	200016e2 	.word	0x200016e2
    f19c:	4925      	ldr	r1, [pc, #148]	; (f234 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c8>)
    f19e:	b410      	push	{r4}
    f1a0:	784a      	ldrb	r2, [r1, #1]
    f1a2:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    f1a6:	1e52      	subs	r2, r2, #1
    f1a8:	704a      	strb	r2, [r1, #1]
    f1aa:	2200      	movs	r2, #0
    f1ac:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    f1b0:	f891 c002 	ldrb.w	ip, [r1, #2]
    f1b4:	f1bc 0f00 	cmp.w	ip, #0
    f1b8:	d90d      	bls.n	f1d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    f1ba:	188b      	adds	r3, r1, r2
    f1bc:	f893 4103 	ldrb.w	r4, [r3, #259]	; 0x103
    f1c0:	4284      	cmp	r4, r0
    f1c2:	d104      	bne.n	f1ce <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x162>
    f1c4:	2a10      	cmp	r2, #16
    f1c6:	bf1c      	itt	ne
    f1c8:	bc10      	popne	{r4}
    f1ca:	4770      	bxne	lr
    f1cc:	e003      	b.n	f1d6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16a>
    f1ce:	1c52      	adds	r2, r2, #1
    f1d0:	b2d2      	uxtb	r2, r2
    f1d2:	4594      	cmp	ip, r2
    f1d4:	d8f1      	bhi.n	f1ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14e>
    f1d6:	780a      	ldrb	r2, [r1, #0]
    f1d8:	1e52      	subs	r2, r2, #1
    f1da:	b2d2      	uxtb	r2, r2
    f1dc:	700a      	strb	r2, [r1, #0]
    f1de:	4282      	cmp	r2, r0
    f1e0:	bf04      	itt	eq
    f1e2:	bc10      	popeq	{r4}
    f1e4:	4770      	bxeq	lr
    f1e6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    f1ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    f1ee:	f8d2 c153 	ldr.w	ip, [r2, #339]	; 0x153
    f1f2:	f8c3 c153 	str.w	ip, [r3, #339]	; 0x153
    f1f6:	f8d2 2157 	ldr.w	r2, [r2, #343]	; 0x157
    f1fa:	f8c3 2157 	str.w	r2, [r3, #343]	; 0x157
    f1fe:	788c      	ldrb	r4, [r1, #2]
    f200:	f891 c000 	ldrb.w	ip, [r1]
    f204:	2200      	movs	r2, #0
    f206:	2c00      	cmp	r4, #0
    f208:	bf9c      	itt	ls
    f20a:	bc10      	popls	{r4}
    f20c:	4770      	bxls	lr
    f20e:	188b      	adds	r3, r1, r2
    f210:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    f214:	4563      	cmp	r3, ip
    f216:	d106      	bne.n	f226 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    f218:	2a10      	cmp	r2, #16
    f21a:	bf1c      	itt	ne
    f21c:	4411      	addne	r1, r2
    f21e:	f881 0103 	strbne.w	r0, [r1, #259]	; 0x103
    f222:	bc10      	pop	{r4}
    f224:	4770      	bx	lr
    f226:	1c52      	adds	r2, r2, #1
    f228:	b2d2      	uxtb	r2, r2
    f22a:	4294      	cmp	r4, r2
    f22c:	d8ef      	bhi.n	f20e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1a2>
    f22e:	bc10      	pop	{r4}
    f230:	4770      	bx	lr
    f232:	0000      	.short	0x0000
    f234:	200016e2 	.word	0x200016e2

0000f238 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    f238:	b570      	push	{r4, r5, r6, lr}
    f23a:	b08c      	sub	sp, #48	; 0x30
    f23c:	f100 0410 	add.w	r4, r0, #16
    f240:	461d      	mov	r5, r3
    f242:	4616      	mov	r6, r2
    f244:	f10d 3cff 	add.w	ip, sp, #4294967295
    f248:	f05f 0008 	movs.w	r0, #8
    f24c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    f250:	f88c 2001 	strb.w	r2, [ip, #1]
    f254:	f814 2d02 	ldrb.w	r2, [r4, #-2]!
    f258:	f80c 2f02 	strb.w	r2, [ip, #2]!
    f25c:	1e40      	subs	r0, r0, #1
    f25e:	d1f5      	bne.n	f24c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x14>
    f260:	f101 0c10 	add.w	ip, r1, #16
    f264:	466c      	mov	r4, sp
    f266:	f10d 010f 	add.w	r1, sp, #15
    f26a:	2008      	movs	r0, #8
    f26c:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
    f270:	704a      	strb	r2, [r1, #1]
    f272:	f81c 2d02 	ldrb.w	r2, [ip, #-2]!
    f276:	f801 2f02 	strb.w	r2, [r1, #2]!
    f27a:	1e40      	subs	r0, r0, #1
    f27c:	d1f6      	bne.n	f26c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x34>
    f27e:	4620      	mov	r0, r4
    f280:	f010 f914 	bl	1f4ac <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    f284:	b17e      	cbz	r6, f2a6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x6e>
    f286:	1e6a      	subs	r2, r5, #1
    f288:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f28c:	f05f 0108 	movs.w	r1, #8
    f290:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    f294:	7053      	strb	r3, [r2, #1]
    f296:	f810 3d02 	ldrb.w	r3, [r0, #-2]!
    f29a:	f802 3f02 	strb.w	r3, [r2, #2]!
    f29e:	1e49      	subs	r1, r1, #1
    f2a0:	d1f6      	bne.n	f290 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x58>
    f2a2:	b00c      	add	sp, #48	; 0x30
    f2a4:	bd70      	pop	{r4, r5, r6, pc}
    f2a6:	9808      	ldr	r0, [sp, #32]
    f2a8:	6028      	str	r0, [r5, #0]
    f2aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    f2ac:	6068      	str	r0, [r5, #4]
    f2ae:	980a      	ldr	r0, [sp, #40]	; 0x28
    f2b0:	60a8      	str	r0, [r5, #8]
    f2b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f2b4:	60e8      	str	r0, [r5, #12]
    f2b6:	b00c      	add	sp, #48	; 0x30
    f2b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f2bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    f2bc:	b570      	push	{r4, r5, r6, lr}
    f2be:	4604      	mov	r4, r0
    f2c0:	2601      	movs	r6, #1
    f2c2:	b179      	cbz	r1, f2e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x28>
    f2c4:	4a58      	ldr	r2, [pc, #352]	; (f428 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16c>)
    f2c6:	2500      	movs	r5, #0
    f2c8:	2901      	cmp	r1, #1
    f2ca:	d031      	beq.n	f330 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x74>
    f2cc:	2902      	cmp	r1, #2
    f2ce:	d07a      	beq.n	f3c6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10a>
    f2d0:	2903      	cmp	r1, #3
    f2d2:	bf18      	it	ne
    f2d4:	bd70      	popne	{r4, r5, r6, pc}
    f2d6:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    f2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f2de:	30cd      	adds	r0, #205	; 0xcd
    f2e0:	f010 bb51 	b.w	1f986 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    f2e4:	f44f 6281 	mov.w	r2, #1032	; 0x408
    f2e8:	2100      	movs	r1, #0
    f2ea:	f013 ff78 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f2ee:	f884 60cd 	strb.w	r6, [r4, #205]	; 0xcd
    f2f2:	4a4e      	ldr	r2, [pc, #312]	; (f42c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x170>)
    f2f4:	f8c4 2116 	str.w	r2, [r4, #278]	; 0x116
    f2f8:	2207      	movs	r2, #7
    f2fa:	f8c4 211a 	str.w	r2, [r4, #282]	; 0x11a
    f2fe:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
    f302:	20fe      	movs	r0, #254	; 0xfe
    f304:	f022 0204 	bic.w	r2, r2, #4
    f308:	f884 2116 	strb.w	r2, [r4, #278]	; 0x116
    f30c:	f884 014e 	strb.w	r0, [r4, #334]	; 0x14e
    f310:	207f      	movs	r0, #127	; 0x7f
    f312:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
    f316:	4846      	ldr	r0, [pc, #280]	; (f430 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x174>)
    f318:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
    f31c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    f320:	2000      	movs	r0, #0
    f322:	e9c1 0000 	strd	r0, r0, [r1]
    f326:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f32a:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    f32e:	bd70      	pop	{r4, r5, r6, pc}
    f330:	f8a4 5316 	strh.w	r5, [r4, #790]	; 0x316
    f334:	f884 530b 	strb.w	r5, [r4, #779]	; 0x30b
    f338:	6960      	ldr	r0, [r4, #20]
    f33a:	493e      	ldr	r1, [pc, #248]	; (f434 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x178>)
    f33c:	fbb2 f2f0 	udiv	r2, r2, r0
    f340:	4401      	add	r1, r0
    f342:	fbb1 f1f0 	udiv	r1, r1, r0
    f346:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
    f34a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    f34e:	f8a4 10f0 	strh.w	r1, [r4, #240]	; 0xf0
    f352:	8be3      	ldrh	r3, [r4, #30]
    f354:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
    f358:	f8b4 c0fa 	ldrh.w	ip, [r4, #250]	; 0xfa
    f35c:	1c52      	adds	r2, r2, #1
    f35e:	fb0c fc00 	mul.w	ip, ip, r0
    f362:	fbbc fcf0 	udiv	ip, ip, r0
    f366:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
    f36a:	f240 2c71 	movw	ip, #625	; 0x271
    f36e:	fb03 f30c 	mul.w	r3, r3, ip
    f372:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    f376:	1e5b      	subs	r3, r3, #1
    f378:	fbb3 f3f0 	udiv	r3, r3, r0
    f37c:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
    f380:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
    f384:	4a2c      	ldr	r2, [pc, #176]	; (f438 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>)
    f386:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
    f38a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    f38e:	1e52      	subs	r2, r2, #1
    f390:	fbb2 f2f0 	udiv	r2, r2, r0
    f394:	644a      	str	r2, [r1, #68]	; 0x44
    f396:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    f398:	4342      	muls	r2, r0
    f39a:	fbb2 f0f0 	udiv	r0, r2, r0
    f39e:	6408      	str	r0, [r1, #64]	; 0x40
    f3a0:	3126      	adds	r1, #38	; 0x26
    f3a2:	1e48      	subs	r0, r1, #1
    f3a4:	f010 faef 	bl	1f986 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    f3a8:	f013 fe30 	bl	2300c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    f3ac:	b138      	cbz	r0, f3be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x102>
    f3ae:	69a0      	ldr	r0, [r4, #24]
    f3b0:	f000 ff06 	bl	101c0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    f3b4:	2800      	cmp	r0, #0
    f3b6:	bf04      	itt	eq
    f3b8:	f884 62f8 	strbeq.w	r6, [r4, #760]	; 0x2f8
    f3bc:	bd70      	popeq	{r4, r5, r6, pc}
    f3be:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8
    f3c2:	bd70      	pop	{r4, r5, r6, pc}
    f3c4:	e7ff      	b.n	f3c6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x10a>
    f3c6:	f8d4 13dc 	ldr.w	r1, [r4, #988]	; 0x3dc
    f3ca:	f8b4 c3e2 	ldrh.w	ip, [r4, #994]	; 0x3e2
    f3ce:	6963      	ldr	r3, [r4, #20]
    f3d0:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    f3d4:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
    f3d8:	f8b4 40fa 	ldrh.w	r4, [r4, #250]	; 0xfa
    f3dc:	fbb2 f2f1 	udiv	r2, r2, r1
    f3e0:	435c      	muls	r4, r3
    f3e2:	fbb4 f4f1 	udiv	r4, r4, r1
    f3e6:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
    f3ea:	f240 2471 	movw	r4, #625	; 0x271
    f3ee:	fb0c fc04 	mul.w	ip, ip, r4
    f3f2:	eb01 1c0c 	add.w	ip, r1, ip, lsl #4
    f3f6:	f1ac 0c01 	sub.w	ip, ip, #1
    f3fa:	fbbc fcf1 	udiv	ip, ip, r1
    f3fe:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
    f402:	1c52      	adds	r2, r2, #1
    f404:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    f408:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    f40c:	4362      	muls	r2, r4
    f40e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    f412:	1e52      	subs	r2, r2, #1
    f414:	fbb2 f2f1 	udiv	r2, r2, r1
    f418:	6442      	str	r2, [r0, #68]	; 0x44
    f41a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    f41c:	435a      	muls	r2, r3
    f41e:	fbb2 f1f1 	udiv	r1, r2, r1
    f422:	6401      	str	r1, [r0, #64]	; 0x40
    f424:	bd70      	pop	{r4, r5, r6, pc}
    f426:	0000      	.short	0x0000
    f428:	02625a00 	.word	0x02625a00
    f42c:	3404492f 	.word	0x3404492f
    f430:	fffce000 	.word	0xfffce000
    f434:	01c9c37f 	.word	0x01c9c37f
    f438:	001c9c38 	.word	0x001c9c38

0000f43c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    f43c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f440:	4604      	mov	r4, r0
    f442:	4690      	mov	r8, r2
    f444:	468a      	mov	sl, r1
    f446:	f04f 0901 	mov.w	r9, #1
    f44a:	4608      	mov	r0, r1
    f44c:	f010 fd2b 	bl	1fea6 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    f450:	4605      	mov	r5, r0
    f452:	4650      	mov	r0, sl
    f454:	f010 fd29 	bl	1feaa <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    f458:	4607      	mov	r7, r0
    f45a:	f010 0f01 	tst.w	r0, #1
    f45e:	bf18      	it	ne
    f460:	2601      	movne	r6, #1
    f462:	d02b      	beq.n	f4bc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x80>
    f464:	f015 0f01 	tst.w	r5, #1
    f468:	bf18      	it	ne
    f46a:	f04f 0b01 	movne.w	fp, #1
    f46e:	d030      	beq.n	f4d2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x96>
    f470:	ea56 000b 	orrs.w	r0, r6, fp
    f474:	bf08      	it	eq
    f476:	f04f 0900 	moveq.w	r9, #0
    f47a:	f008 f973 	bl	17764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f47e:	4238      	tst	r0, r7
    f480:	bf08      	it	eq
    f482:	2600      	moveq	r6, #0
    f484:	f008 f96e 	bl	17764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f488:	4228      	tst	r0, r5
    f48a:	bf08      	it	eq
    f48c:	f04f 0b00 	moveq.w	fp, #0
    f490:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    f494:	42b0      	cmp	r0, r6
    f496:	bf0c      	ite	eq
    f498:	2000      	moveq	r0, #0
    f49a:	4630      	movne	r0, r6
    f49c:	f888 0000 	strb.w	r0, [r8]
    f4a0:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    f4a4:	4559      	cmp	r1, fp
    f4a6:	bf08      	it	eq
    f4a8:	f04f 0b00 	moveq.w	fp, #0
    f4ac:	f888 b001 	strb.w	fp, [r8, #1]
    f4b0:	2800      	cmp	r0, #0
    f4b2:	bf08      	it	eq
    f4b4:	f1bb 0f00 	cmpeq.w	fp, #0
    f4b8:	d128      	bne.n	f50c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    f4ba:	e018      	b.n	f4ee <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xb2>
    f4bc:	f010 0f02 	tst.w	r0, #2
    f4c0:	bf18      	it	ne
    f4c2:	2602      	movne	r6, #2
    f4c4:	d1ce      	bne.n	f464 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    f4c6:	f017 0f04 	tst.w	r7, #4
    f4ca:	bf14      	ite	ne
    f4cc:	2608      	movne	r6, #8
    f4ce:	2600      	moveq	r6, #0
    f4d0:	e7c8      	b.n	f464 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x28>
    f4d2:	f015 0f02 	tst.w	r5, #2
    f4d6:	bf18      	it	ne
    f4d8:	f04f 0b02 	movne.w	fp, #2
    f4dc:	d1c8      	bne.n	f470 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    f4de:	f015 0f04 	tst.w	r5, #4
    f4e2:	bf14      	ite	ne
    f4e4:	f04f 0b08 	movne.w	fp, #8
    f4e8:	f04f 0b00 	moveq.w	fp, #0
    f4ec:	e7c0      	b.n	f470 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x34>
    f4ee:	4650      	mov	r0, sl
    f4f0:	f010 fcc8 	bl	1fe84 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    f4f4:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	; 0xbc
    f4f8:	1a40      	subs	r0, r0, r1
    f4fa:	b200      	sxth	r0, r0
    f4fc:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f500:	4288      	cmp	r0, r1
    f502:	dc01      	bgt.n	f508 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xcc>
    f504:	2800      	cmp	r0, #0
    f506:	dc01      	bgt.n	f50c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd0>
    f508:	f04f 0900 	mov.w	r9, #0
    f50c:	b116      	cbz	r6, f514 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xd8>
    f50e:	2e08      	cmp	r6, #8
    f510:	d010      	beq.n	f534 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    f512:	e01f      	b.n	f554 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    f514:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    f518:	2801      	cmp	r0, #1
    f51a:	bf18      	it	ne
    f51c:	2802      	cmpne	r0, #2
    f51e:	d019      	beq.n	f554 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    f520:	2804      	cmp	r0, #4
    f522:	bf18      	it	ne
    f524:	2808      	cmpne	r0, #8
    f526:	d005      	beq.n	f534 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0xf8>
    f528:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    f52c:	f04f 0006 	mov.w	r0, #6
    f530:	f7fd fcaa 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f534:	f894 0164 	ldrb.w	r0, [r4, #356]	; 0x164
    f538:	2801      	cmp	r0, #1
    f53a:	d10b      	bne.n	f554 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    f53c:	f8b4 0168 	ldrh.w	r0, [r4, #360]	; 0x168
    f540:	2801      	cmp	r0, #1
    f542:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    f546:	d008      	beq.n	f55a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x11e>
    f548:	2808      	cmp	r0, #8
    f54a:	d003      	beq.n	f554 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x118>
    f54c:	f05f 0008 	movs.w	r0, #8
    f550:	f888 0000 	strb.w	r0, [r8]
    f554:	4648      	mov	r0, r9
    f556:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f55a:	2804      	cmp	r0, #4
    f55c:	bf18      	it	ne
    f55e:	2004      	movne	r0, #4
    f560:	d1f6      	bne.n	f550 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x114>
    f562:	e7f3      	b.n	f54c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x110>

0000f564 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    f564:	b430      	push	{r4, r5}
    f566:	2200      	movs	r2, #0
    f568:	f1a1 0c01 	sub.w	ip, r1, #1
    f56c:	f1bc 0f00 	cmp.w	ip, #0
    f570:	dd12      	ble.n	f598 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    f572:	1e43      	subs	r3, r0, #1
    f574:	f011 0f01 	tst.w	r1, #1
    f578:	bf08      	it	eq
    f57a:	f813 2f01 	ldrbeq.w	r2, [r3, #1]!
    f57e:	785c      	ldrb	r4, [r3, #1]
    f580:	ea5f 0c6c 	movs.w	ip, ip, asr #1
    f584:	d008      	beq.n	f598 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x34>
    f586:	bf00      	nop
    f588:	f813 5f02 	ldrb.w	r5, [r3, #2]!
    f58c:	4322      	orrs	r2, r4
    f58e:	785c      	ldrb	r4, [r3, #1]
    f590:	432a      	orrs	r2, r5
    f592:	f1bc 0c01 	subs.w	ip, ip, #1
    f596:	d1f7      	bne.n	f588 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x24>
    f598:	1e49      	subs	r1, r1, #1
    f59a:	bf5c      	itt	pl
    f59c:	5c40      	ldrbpl	r0, [r0, r1]
    f59e:	4302      	orrpl	r2, r0
    f5a0:	2a00      	cmp	r2, #0
    f5a2:	bf0c      	ite	eq
    f5a4:	2001      	moveq	r0, #1
    f5a6:	2000      	movne	r0, #0
    f5a8:	bc30      	pop	{r4, r5}
    f5aa:	4770      	bx	lr

0000f5ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    f5ac:	4907      	ldr	r1, [pc, #28]	; (f5cc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0x20>)
    f5ae:	f991 1000 	ldrsb.w	r1, [r1]
    f5b2:	4408      	add	r0, r1
    f5b4:	2814      	cmp	r0, #20
    f5b6:	bfc4      	itt	gt
    f5b8:	2014      	movgt	r0, #20
    f5ba:	4770      	bxgt	lr
    f5bc:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
    f5c0:	bfb4      	ite	lt
    f5c2:	f06f 007e 	mvnlt.w	r0, #126	; 0x7e
    f5c6:	b240      	sxtbge	r0, r0
    f5c8:	4770      	bx	lr
    f5ca:	0000      	.short	0x0000
    f5cc:	2000041a 	.word	0x2000041a

0000f5d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    f5d0:	b508      	push	{r3, lr}
    f5d2:	207f      	movs	r0, #127	; 0x7f
    f5d4:	f88d 0000 	strb.w	r0, [sp]
    f5d8:	4668      	mov	r0, sp
    f5da:	f009 fa7f 	bl	18adc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f5de:	2800      	cmp	r0, #0
    f5e0:	bf04      	itt	eq
    f5e2:	f99d 0000 	ldrsbeq.w	r0, [sp]
    f5e6:	bd08      	popeq	{r3, pc}
    f5e8:	f99d 1000 	ldrsb.w	r1, [sp]
    f5ec:	4807      	ldr	r0, [pc, #28]	; (f60c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x3c>)
    f5ee:	7840      	ldrb	r0, [r0, #1]
    f5f0:	4240      	negs	r0, r0
    f5f2:	b240      	sxtb	r0, r0
    f5f4:	4408      	add	r0, r1
    f5f6:	2814      	cmp	r0, #20
    f5f8:	bfc4      	itt	gt
    f5fa:	2014      	movgt	r0, #20
    f5fc:	bd08      	popgt	{r3, pc}
    f5fe:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
    f602:	bfb4      	ite	lt
    f604:	f06f 007e 	mvnlt.w	r0, #126	; 0x7e
    f608:	b240      	sxtbge	r0, r0
    f60a:	bd08      	pop	{r3, pc}
    f60c:	2000041a 	.word	0x2000041a

0000f610 <sym_TU25JD7DO6DVB4CJZMQBFSDAQTQESJXZMW7SAQY>:
    f610:	b510      	push	{r4, lr}
    f612:	f013 fa55 	bl	22ac0 <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>
    f616:	4907      	ldr	r1, [pc, #28]	; (f634 <sym_TU25JD7DO6DVB4CJZMQBFSDAQTQESJXZMW7SAQY+0x24>)
    f618:	f991 1000 	ldrsb.w	r1, [r1]
    f61c:	4408      	add	r0, r1
    f61e:	2814      	cmp	r0, #20
    f620:	bfc4      	itt	gt
    f622:	2014      	movgt	r0, #20
    f624:	bd10      	popgt	{r4, pc}
    f626:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
    f62a:	bfb4      	ite	lt
    f62c:	f06f 007e 	mvnlt.w	r0, #126	; 0x7e
    f630:	b240      	sxtbge	r0, r0
    f632:	bd10      	pop	{r4, pc}
    f634:	2000041a 	.word	0x2000041a

0000f638 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    f638:	4907      	ldr	r1, [pc, #28]	; (f658 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x20>)
    f63a:	b508      	push	{r3, lr}
    f63c:	7809      	ldrb	r1, [r1, #0]
    f63e:	f88d 1000 	strb.w	r1, [sp]
    f642:	f89d 1000 	ldrb.w	r1, [sp]
    f646:	2900      	cmp	r1, #0
    f648:	bf1c      	itt	ne
    f64a:	2000      	movne	r0, #0
    f64c:	bd08      	popne	{r3, pc}
    f64e:	4903      	ldr	r1, [pc, #12]	; (f65c <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x24>)
    f650:	f013 fa54 	bl	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    f654:	2001      	movs	r0, #1
    f656:	bd08      	pop	{r3, pc}
    f658:	2000041c 	.word	0x2000041c
    f65c:	2000041d 	.word	0x2000041d

0000f660 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    f660:	b510      	push	{r4, lr}
    f662:	4c05      	ldr	r4, [pc, #20]	; (f678 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    f664:	21ff      	movs	r1, #255	; 0xff
    f666:	7021      	strb	r1, [r4, #0]
    f668:	4601      	mov	r1, r0
    f66a:	1c60      	adds	r0, r4, #1
    f66c:	f013 fa46 	bl	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
    f670:	2000      	movs	r0, #0
    f672:	7020      	strb	r0, [r4, #0]
    f674:	bd10      	pop	{r4, pc}
    f676:	0000      	.short	0x0000
    f678:	2000041c 	.word	0x2000041c

0000f67c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    f67c:	b570      	push	{r4, r5, r6, lr}
    f67e:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    f682:	b28b      	uxth	r3, r1
    f684:	7ac4      	ldrb	r4, [r0, #11]
    f686:	ea83 0102 	eor.w	r1, r3, r2
    f68a:	2200      	movs	r2, #0
    f68c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    f690:	0a09      	lsrs	r1, r1, #8
    f692:	fa91 f1a1 	rbit	r1, r1
    f696:	fa9c fcac 	rbit	ip, ip
    f69a:	0e09      	lsrs	r1, r1, #24
    f69c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    f6a0:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    f6a4:	eb01 1c01 	add.w	ip, r1, r1, lsl #4
    f6a8:	1c52      	adds	r2, r2, #1
    f6aa:	eb0c 0103 	add.w	r1, ip, r3
    f6ae:	b2d2      	uxtb	r2, r2
    f6b0:	b289      	uxth	r1, r1
    f6b2:	2a03      	cmp	r2, #3
    f6b4:	d3ea      	bcc.n	f68c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    f6b6:	ea81 0203 	eor.w	r2, r1, r3
    f6ba:	f8df c088 	ldr.w	ip, [pc, #136]	; f744 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xc8>
    f6be:	2100      	movs	r1, #0
    f6c0:	4663      	mov	r3, ip
    f6c2:	fbe2 310c 	umlal	r3, r1, r2, ip
    f6c6:	0909      	lsrs	r1, r1, #4
    f6c8:	f06f 0324 	mvn.w	r3, #36	; 0x24
    f6cc:	fb01 2103 	mla	r1, r1, r3, r2
    f6d0:	b2c9      	uxtb	r1, r1
    f6d2:	eb00 03d1 	add.w	r3, r0, r1, lsr #3
    f6d6:	f001 0c07 	and.w	ip, r1, #7
    f6da:	785d      	ldrb	r5, [r3, #1]
    f6dc:	2301      	movs	r3, #1
    f6de:	fa03 fc0c 	lsl.w	ip, r3, ip
    f6e2:	ea15 0f0c 	tst.w	r5, ip
    f6e6:	bf1c      	itt	ne
    f6e8:	4608      	movne	r0, r1
    f6ea:	bd70      	popne	{r4, r5, r6, pc}
    f6ec:	fb04 f102 	mul.w	r1, r4, r2
    f6f0:	0c09      	lsrs	r1, r1, #16
    f6f2:	1c49      	adds	r1, r1, #1
    f6f4:	b2c9      	uxtb	r1, r1
    f6f6:	f04f 0c00 	mov.w	ip, #0
    f6fa:	bf00      	nop
    f6fc:	eb00 040c 	add.w	r4, r0, ip
    f700:	79a2      	ldrb	r2, [r4, #6]
    f702:	428a      	cmp	r2, r1
    f704:	bf27      	ittee	cs
    f706:	2200      	movcs	r2, #0
    f708:	7864      	ldrbcs	r4, [r4, #1]
    f70a:	1a89      	subcc	r1, r1, r2
    f70c:	b2c9      	uxtbcc	r1, r1
    f70e:	d30a      	bcc.n	f726 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xaa>
    f710:	fa03 f502 	lsl.w	r5, r3, r2
    f714:	422c      	tst	r4, r5
    f716:	bf1c      	itt	ne
    f718:	1e49      	subne	r1, r1, #1
    f71a:	b2c9      	uxtbne	r1, r1
    f71c:	b171      	cbz	r1, f73c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xc0>
    f71e:	1c52      	adds	r2, r2, #1
    f720:	b2d2      	uxtb	r2, r2
    f722:	2a08      	cmp	r2, #8
    f724:	d3f4      	bcc.n	f710 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    f726:	f10c 0201 	add.w	r2, ip, #1
    f72a:	f002 0cff 	and.w	ip, r2, #255	; 0xff
    f72e:	f1bc 0f05 	cmp.w	ip, #5
    f732:	d3e3      	bcc.n	f6fc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x80>
    f734:	219d      	movs	r1, #157	; 0x9d
    f736:	2046      	movs	r0, #70	; 0x46
    f738:	f7fd fba6 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f73c:	eb02 00cc 	add.w	r0, r2, ip, lsl #3
    f740:	b2c0      	uxtb	r0, r0
    f742:	bd70      	pop	{r4, r5, r6, pc}
    f744:	6eb3e453 	.word	0x6eb3e453

0000f748 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    f748:	b570      	push	{r4, r5, r6, lr}
    f74a:	4604      	mov	r4, r0
    f74c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    f750:	b108      	cbz	r0, f756 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    f752:	2825      	cmp	r0, #37	; 0x25
    f754:	d901      	bls.n	f75a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    f756:	2012      	movs	r0, #18
    f758:	bd70      	pop	{r4, r5, r6, pc}
    f75a:	2a00      	cmp	r2, #0
    f75c:	bf04      	itt	eq
    f75e:	2000      	moveq	r0, #0
    f760:	bd70      	popeq	{r4, r5, r6, pc}
    f762:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    f766:	b110      	cbz	r0, f76e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    f768:	2801      	cmp	r0, #1
    f76a:	d051      	beq.n	f810 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xc8>
    f76c:	e048      	b.n	f800 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb8>
    f76e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    f772:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
    f776:	4b2b      	ldr	r3, [pc, #172]	; (f824 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xdc>)
    f778:	fb01 0002 	mla	r0, r1, r2, r0
    f77c:	2500      	movs	r5, #0
    f77e:	461a      	mov	r2, r3
    f780:	4629      	mov	r1, r5
    f782:	fbe0 2103 	umlal	r2, r1, r0, r3
    f786:	0909      	lsrs	r1, r1, #4
    f788:	f06f 0224 	mvn.w	r2, #36	; 0x24
    f78c:	fb01 0002 	mla	r0, r1, r2, r0
    f790:	b2c0      	uxtb	r0, r0
    f792:	eb04 02d0 	add.w	r2, r4, r0, lsr #3
    f796:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    f79a:	f000 0107 	and.w	r1, r0, #7
    f79e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    f7a2:	2301      	movs	r3, #1
    f7a4:	fa03 f101 	lsl.w	r1, r3, r1
    f7a8:	420a      	tst	r2, r1
    f7aa:	bf1e      	ittt	ne
    f7ac:	f884 0033 	strbne.w	r0, [r4, #51]	; 0x33
    f7b0:	4628      	movne	r0, r5
    f7b2:	bd70      	popne	{r4, r5, r6, pc}
    f7b4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    f7b8:	fbb0 f2f1 	udiv	r2, r0, r1
    f7bc:	fb01 0012 	mls	r0, r1, r2, r0
    f7c0:	1c40      	adds	r0, r0, #1
    f7c2:	b2c1      	uxtb	r1, r0
    f7c4:	f05f 0000 	movs.w	r0, #0
    f7c8:	eb04 0c00 	add.w	ip, r4, r0
    f7cc:	f89c 202b 	ldrb.w	r2, [ip, #43]	; 0x2b
    f7d0:	428a      	cmp	r2, r1
    f7d2:	bf27      	ittee	cs
    f7d4:	2200      	movcs	r2, #0
    f7d6:	f89c c026 	ldrbcs.w	ip, [ip, #38]	; 0x26
    f7da:	1a89      	subcc	r1, r1, r2
    f7dc:	b2c9      	uxtbcc	r1, r1
    f7de:	d30b      	bcc.n	f7f8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xb0>
    f7e0:	fa03 f602 	lsl.w	r6, r3, r2
    f7e4:	ea1c 0f06 	tst.w	ip, r6
    f7e8:	bf1c      	itt	ne
    f7ea:	1e49      	subne	r1, r1, #1
    f7ec:	b2c9      	uxtbne	r1, r1
    f7ee:	b149      	cbz	r1, f804 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xbc>
    f7f0:	1c52      	adds	r2, r2, #1
    f7f2:	b2d2      	uxtb	r2, r2
    f7f4:	2a08      	cmp	r2, #8
    f7f6:	d3f3      	bcc.n	f7e0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x98>
    f7f8:	1c40      	adds	r0, r0, #1
    f7fa:	b2c0      	uxtb	r0, r0
    f7fc:	2805      	cmp	r0, #5
    f7fe:	d3e3      	bcc.n	f7c8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x80>
    f800:	201f      	movs	r0, #31
    f802:	bd70      	pop	{r4, r5, r6, pc}
    f804:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    f808:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    f80c:	4628      	mov	r0, r5
    f80e:	bd70      	pop	{r4, r5, r6, pc}
    f810:	8aa2      	ldrh	r2, [r4, #20]
    f812:	6989      	ldr	r1, [r1, #24]
    f814:	f104 0025 	add.w	r0, r4, #37	; 0x25
    f818:	f7ff ff30 	bl	f67c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    f81c:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    f820:	2000      	movs	r0, #0
    f822:	bd70      	pop	{r4, r5, r6, pc}
    f824:	6eb3e453 	.word	0x6eb3e453

0000f828 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    f828:	7841      	ldrb	r1, [r0, #1]
    f82a:	b141      	cbz	r1, f83e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    f82c:	78c0      	ldrb	r0, [r0, #3]
    f82e:	282b      	cmp	r0, #43	; 0x2b
    f830:	d203      	bcs.n	f83a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    f832:	4a04      	ldr	r2, [pc, #16]	; (f844 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    f834:	5c10      	ldrb	r0, [r2, r0]
    f836:	4288      	cmp	r0, r1
    f838:	d101      	bne.n	f83e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    f83a:	2001      	movs	r0, #1
    f83c:	4770      	bx	lr
    f83e:	2000      	movs	r0, #0
    f840:	4770      	bx	lr
    f842:	0000      	.short	0x0000
    f844:	00023436 	.word	0x00023436

0000f848 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    f848:	b510      	push	{r4, lr}
    f84a:	2201      	movs	r2, #1
    f84c:	70c1      	strb	r1, [r0, #3]
    f84e:	292b      	cmp	r1, #43	; 0x2b
    f850:	bf3c      	itt	cc
    f852:	4a06      	ldrcc	r2, [pc, #24]	; (f86c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    f854:	5c52      	ldrbcc	r2, [r2, r1]
    f856:	d306      	bcc.n	f866 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    f858:	29ff      	cmp	r1, #255	; 0xff
    f85a:	d004      	beq.n	f866 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    f85c:	f240 4175 	movw	r1, #1141	; 0x475
    f860:	202a      	movs	r0, #42	; 0x2a
    f862:	f7fd fb11 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f866:	7042      	strb	r2, [r0, #1]
    f868:	bd10      	pop	{r4, pc}
    f86a:	0000      	.short	0x0000
    f86c:	00023436 	.word	0x00023436

0000f870 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    f870:	4904      	ldr	r1, [pc, #16]	; (f884 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    f872:	7d89      	ldrb	r1, [r1, #22]
    f874:	f001 0104 	and.w	r1, r1, #4
    f878:	4308      	orrs	r0, r1
    f87a:	bf0c      	ite	eq
    f87c:	2001      	moveq	r0, #1
    f87e:	2000      	movne	r0, #0
    f880:	4770      	bx	lr
    f882:	0000      	.short	0x0000
    f884:	2000111c 	.word	0x2000111c

0000f888 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    f888:	4803      	ldr	r0, [pc, #12]	; (f898 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    f88a:	7d80      	ldrb	r0, [r0, #22]
    f88c:	f010 0f02 	tst.w	r0, #2
    f890:	bf0c      	ite	eq
    f892:	2001      	moveq	r0, #1
    f894:	2000      	movne	r0, #0
    f896:	4770      	bx	lr
    f898:	2000111c 	.word	0x2000111c

0000f89c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    f89c:	4803      	ldr	r0, [pc, #12]	; (f8ac <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    f89e:	7d80      	ldrb	r0, [r0, #22]
    f8a0:	f010 0f01 	tst.w	r0, #1
    f8a4:	bf0c      	ite	eq
    f8a6:	2001      	moveq	r0, #1
    f8a8:	2000      	movne	r0, #0
    f8aa:	4770      	bx	lr
    f8ac:	2000111c 	.word	0x2000111c

0000f8b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f8b0:	b510      	push	{r4, lr}
    f8b2:	7a01      	ldrb	r1, [r0, #8]
    f8b4:	b181      	cbz	r1, f8d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x28>
    f8b6:	2901      	cmp	r1, #1
    f8b8:	bf1c      	itt	ne
    f8ba:	2000      	movne	r0, #0
    f8bc:	bd10      	popne	{r4, pc}
    f8be:	88c2      	ldrh	r2, [r0, #6]
    f8c0:	6803      	ldr	r3, [r0, #0]
    f8c2:	8880      	ldrh	r0, [r0, #4]
    f8c4:	f05f 0101 	movs.w	r1, #1
    f8c8:	f000 f80c 	bl	f8e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    f8cc:	2800      	cmp	r0, #0
    f8ce:	bf08      	it	eq
    f8d0:	f000 f86c 	bleq	f9ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f8d4:	2001      	movs	r0, #1
    f8d6:	bd10      	pop	{r4, pc}
    f8d8:	88c2      	ldrh	r2, [r0, #6]
    f8da:	6803      	ldr	r3, [r0, #0]
    f8dc:	8880      	ldrh	r0, [r0, #4]
    f8de:	2102      	movs	r1, #2
    f8e0:	e7f2      	b.n	f8c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f8e2:	0000      	movs	r0, r0
    f8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f8e8:	b085      	sub	sp, #20
    f8ea:	4688      	mov	r8, r1
    f8ec:	4699      	mov	r9, r3
    f8ee:	4615      	mov	r5, r2
    f8f0:	4606      	mov	r6, r0
    f8f2:	a902      	add	r1, sp, #8
    f8f4:	f00f fe84 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f8f8:	2800      	cmp	r0, #0
    f8fa:	d14c      	bne.n	f996 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    f8fc:	9803      	ldr	r0, [sp, #12]
    f8fe:	2d00      	cmp	r5, #0
    f900:	f100 04a8 	add.w	r4, r0, #168	; 0xa8
    f904:	bf04      	itt	eq
    f906:	2001      	moveq	r0, #1
    f908:	f884 0024 	strbeq.w	r0, [r4, #36]	; 0x24
    f90c:	d043      	beq.n	f996 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe6>
    f90e:	4630      	mov	r0, r6
    f910:	f7fd ffb0 	bl	d874 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    f914:	0007      	movs	r7, r0
    f916:	d00c      	beq.n	f932 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x82>
    f918:	4629      	mov	r1, r5
    f91a:	f00f fa5b 	bl	1edd4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    f91e:	0001      	movs	r1, r0
    f920:	d003      	beq.n	f92a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    f922:	4821      	ldr	r0, [pc, #132]	; (f9a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>)
    f924:	8840      	ldrh	r0, [r0, #2]
    f926:	4285      	cmp	r5, r0
    f928:	d907      	bls.n	f93a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x8a>
    f92a:	b005      	add	sp, #20
    f92c:	2000      	movs	r0, #0
    f92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f932:	2167      	movs	r1, #103	; 0x67
    f934:	202b      	movs	r0, #43	; 0x2b
    f936:	f7fd faa7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f93a:	466a      	mov	r2, sp
    f93c:	4638      	mov	r0, r7
    f93e:	f00f fa42 	bl	1edc6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f942:	9800      	ldr	r0, [sp, #0]
    f944:	2600      	movs	r6, #0
    f946:	8006      	strh	r6, [r0, #0]
    f948:	7086      	strb	r6, [r0, #2]
    f94a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    f94e:	2900      	cmp	r1, #0
    f950:	bf18      	it	ne
    f952:	f04f 0802 	movne.w	r8, #2
    f956:	4641      	mov	r1, r8
    f958:	f010 facb 	bl	1fef2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    f95c:	9800      	ldr	r0, [sp, #0]
    f95e:	462a      	mov	r2, r5
    f960:	4649      	mov	r1, r9
    f962:	1cc0      	adds	r0, r0, #3
    f964:	f013 fbc1 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f968:	4629      	mov	r1, r5
    f96a:	4638      	mov	r0, r7
    f96c:	f00f f9e7 	bl	1ed3e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    f970:	b1a8      	cbz	r0, f99e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    f972:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f976:	b160      	cbz	r0, f992 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe2>
    f978:	9803      	ldr	r0, [sp, #12]
    f97a:	f890 030a 	ldrb.w	r0, [r0, #778]	; 0x30a
    f97e:	b128      	cbz	r0, f98c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>
    f980:	9803      	ldr	r0, [sp, #12]
    f982:	f880 630a 	strb.w	r6, [r0, #778]	; 0x30a
    f986:	9803      	ldr	r0, [sp, #12]
    f988:	f011 f939 	bl	20bfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f98c:	9803      	ldr	r0, [sp, #12]
    f98e:	f8a0 6302 	strh.w	r6, [r0, #770]	; 0x302
    f992:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    f996:	b005      	add	sp, #20
    f998:	2001      	movs	r0, #1
    f99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f99e:	217c      	movs	r1, #124	; 0x7c
    f9a0:	202b      	movs	r0, #43	; 0x2b
    f9a2:	f7fd fa71 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9a6:	0000      	.short	0x0000
    f9a8:	2000111c 	.word	0x2000111c

0000f9ac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    f9ac:	b538      	push	{r3, r4, r5, lr}
    f9ae:	481e      	ldr	r0, [pc, #120]	; (fa28 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x7c>)
    f9b0:	7a00      	ldrb	r0, [r0, #8]
    f9b2:	f88d 0000 	strb.w	r0, [sp]
    f9b6:	f89d 0000 	ldrb.w	r0, [sp]
    f9ba:	2800      	cmp	r0, #0
    f9bc:	bf18      	it	ne
    f9be:	bd38      	popne	{r3, r4, r5, pc}
    f9c0:	4819      	ldr	r0, [pc, #100]	; (fa28 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x7c>)
    f9c2:	4a1a      	ldr	r2, [pc, #104]	; (fa2c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x80>)
    f9c4:	2102      	movs	r1, #2
    f9c6:	7a03      	ldrb	r3, [r0, #8]
    f9c8:	f88d 3000 	strb.w	r3, [sp]
    f9cc:	f89d 3000 	ldrb.w	r3, [sp]
    f9d0:	b123      	cbz	r3, f9dc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x30>
    f9d2:	f240 3117 	movw	r1, #791	; 0x317
    f9d6:	2010      	movs	r0, #16
    f9d8:	f7fd fa56 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9dc:	6042      	str	r2, [r0, #4]
    f9de:	f100 0208 	add.w	r2, r0, #8
    f9e2:	7011      	strb	r1, [r2, #0]
    f9e4:	f3ef 8310 	mrs	r3, PRIMASK
    f9e8:	b672      	cpsid	i
    f9ea:	f8df c044 	ldr.w	ip, [pc, #68]	; fa30 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x84>
    f9ee:	f8c0 c000 	str.w	ip, [r0]
    f9f2:	f1ac 0104 	sub.w	r1, ip, #4
    f9f6:	684a      	ldr	r2, [r1, #4]
    f9f8:	b152      	cbz	r2, fa10 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x64>
    f9fa:	7a12      	ldrb	r2, [r2, #8]
    f9fc:	f88d 2000 	strb.w	r2, [sp]
    fa00:	9a00      	ldr	r2, [sp, #0]
    fa02:	9200      	str	r2, [sp, #0]
    fa04:	f89d 4000 	ldrb.w	r4, [sp]
    fa08:	2c01      	cmp	r4, #1
    fa0a:	bf08      	it	eq
    fa0c:	f8c1 c000 	streq.w	ip, [r1]
    fa10:	680a      	ldr	r2, [r1, #0]
    fa12:	6010      	str	r0, [r2, #0]
    fa14:	6008      	str	r0, [r1, #0]
    fa16:	b903      	cbnz	r3, fa1a <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x6e>
    fa18:	b662      	cpsie	i
    fa1a:	4806      	ldr	r0, [pc, #24]	; (fa34 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x88>)
    fa1c:	7800      	ldrb	r0, [r0, #0]
    fa1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fa22:	f00d bd63 	b.w	1d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    fa26:	0000      	.short	0x0000
    fa28:	20001138 	.word	0x20001138
    fa2c:	0002001b 	.word	0x0002001b
    fa30:	20001150 	.word	0x20001150
    fa34:	20000422 	.word	0x20000422

0000fa38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    fa38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa3c:	f8df 9338 	ldr.w	r9, [pc, #824]	; fd78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x340>
    fa40:	4ece      	ldr	r6, [pc, #824]	; (fd7c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x344>)
    fa42:	2701      	movs	r7, #1
    fa44:	4683      	mov	fp, r0
    fa46:	2500      	movs	r5, #0
    fa48:	6870      	ldr	r0, [r6, #4]
    fa4a:	7a00      	ldrb	r0, [r0, #8]
    fa4c:	f88d 0000 	strb.w	r0, [sp]
    fa50:	9800      	ldr	r0, [sp, #0]
    fa52:	9000      	str	r0, [sp, #0]
    fa54:	f89d 1000 	ldrb.w	r1, [sp]
    fa58:	292a      	cmp	r1, #42	; 0x2a
    fa5a:	d108      	bne.n	fa6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    fa5c:	f899 0017 	ldrb.w	r0, [r9, #23]
    fa60:	b128      	cbz	r0, fa6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    fa62:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    fa66:	2800      	cmp	r0, #0
    fa68:	bf08      	it	eq
    fa6a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa6e:	f04f 0800 	mov.w	r8, #0
    fa72:	6874      	ldr	r4, [r6, #4]
    fa74:	4628      	mov	r0, r5
    fa76:	7a22      	ldrb	r2, [r4, #8]
    fa78:	f88d 2000 	strb.w	r2, [sp]
    fa7c:	9a00      	ldr	r2, [sp, #0]
    fa7e:	9200      	str	r2, [sp, #0]
    fa80:	f89d 3000 	ldrb.w	r3, [sp]
    fa84:	2b01      	cmp	r3, #1
    fa86:	bf08      	it	eq
    fa88:	462c      	moveq	r4, r5
    fa8a:	d010      	beq.n	faae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    fa8c:	f3ef 8110 	mrs	r1, PRIMASK
    fa90:	b672      	cpsid	i
    fa92:	6822      	ldr	r2, [r4, #0]
    fa94:	6072      	str	r2, [r6, #4]
    fa96:	b901      	cbnz	r1, fa9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    fa98:	b662      	cpsie	i
    fa9a:	7a21      	ldrb	r1, [r4, #8]
    fa9c:	f88d 1000 	strb.w	r1, [sp]
    faa0:	9900      	ldr	r1, [sp, #0]
    faa2:	9100      	str	r1, [sp, #0]
    faa4:	f89d 2000 	ldrb.w	r2, [sp]
    faa8:	2a00      	cmp	r2, #0
    faaa:	bf08      	it	eq
    faac:	4638      	moveq	r0, r7
    faae:	2800      	cmp	r0, #0
    fab0:	d1df      	bne.n	fa72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    fab2:	b31c      	cbz	r4, fafc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    fab4:	7a20      	ldrb	r0, [r4, #8]
    fab6:	f88d 0000 	strb.w	r0, [sp]
    faba:	f89d a000 	ldrb.w	sl, [sp]
    fabe:	f1aa 0002 	sub.w	r0, sl, #2
    fac2:	2830      	cmp	r0, #48	; 0x30
    fac4:	f080 8139 	bcs.w	fd3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x302>
    fac8:	e8df f000 	tbb	[pc, r0]
    facc:	2e8ea91b 	.word	0x2e8ea91b
    fad0:	fda982a0 	.word	0xfda982a0
    fad4:	fdfdfdfc 	.word	0xfdfdfdfc
    fad8:	2efbfdb2 	.word	0x2efbfdb2
    fadc:	fdfd82a0 	.word	0xfdfd82a0
    fae0:	7a5ca02e 	.word	0x7a5ca02e
    fae4:	82d2fd5c 	.word	0x82d2fd5c
    fae8:	fd2efd82 	.word	0xfd2efd82
    faec:	2efdfafd 	.word	0x2efdfafd
    faf0:	e8df26fb 	.word	0xe8df26fb
    faf4:	363636f9 	.word	0x363636f9
    faf8:	dff84c3e 	.word	0xdff84c3e
    fafc:	2000      	movs	r0, #0
    fafe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb02:	6862      	ldr	r2, [r4, #4]
    fb04:	b922      	cbnz	r2, fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fb06:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    fb0a:	2010      	movs	r0, #16
    fb0c:	f7fd f9bc 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb10:	4659      	mov	r1, fp
    fb12:	4620      	mov	r0, r4
    fb14:	4790      	blx	r2
    fb16:	e0ca      	b.n	fcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    fb18:	6862      	ldr	r2, [r4, #4]
    fb1a:	2a00      	cmp	r2, #0
    fb1c:	d1f8      	bne.n	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fb1e:	f240 11ad 	movw	r1, #429	; 0x1ad
    fb22:	2010      	movs	r0, #16
    fb24:	f7fd f9b0 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb28:	6862      	ldr	r2, [r4, #4]
    fb2a:	2a00      	cmp	r2, #0
    fb2c:	d1f0      	bne.n	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fb2e:	f240 11bb 	movw	r1, #443	; 0x1bb
    fb32:	2010      	movs	r0, #16
    fb34:	f7fd f9a8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb38:	6862      	ldr	r2, [r4, #4]
    fb3a:	2a00      	cmp	r2, #0
    fb3c:	d1e8      	bne.n	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fb3e:	f240 11c7 	movw	r1, #455	; 0x1c7
    fb42:	2010      	movs	r0, #16
    fb44:	f7fd f9a0 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb48:	6862      	ldr	r2, [r4, #4]
    fb4a:	b132      	cbz	r2, fb5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    fb4c:	7225      	strb	r5, [r4, #8]
    fb4e:	4659      	mov	r1, fp
    fb50:	4620      	mov	r0, r4
    fb52:	4790      	blx	r2
    fb54:	2800      	cmp	r0, #0
    fb56:	d053      	beq.n	fc00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    fb58:	e00c      	b.n	fb74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13c>
    fb5a:	f240 11cf 	movw	r1, #463	; 0x1cf
    fb5e:	2010      	movs	r0, #16
    fb60:	f7fd f992 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb64:	6862      	ldr	r2, [r4, #4]
    fb66:	b142      	cbz	r2, fb7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    fb68:	4659      	mov	r1, fp
    fb6a:	4620      	mov	r0, r4
    fb6c:	4790      	blx	r2
    fb6e:	7225      	strb	r5, [r4, #8]
    fb70:	2800      	cmp	r0, #0
    fb72:	d072      	beq.n	fc5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    fb74:	2008      	movs	r0, #8
    fb76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb7a:	f240 11e1 	movw	r1, #481	; 0x1e1
    fb7e:	2010      	movs	r0, #16
    fb80:	f7fd f982 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb84:	487e      	ldr	r0, [pc, #504]	; (fd80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x348>)
    fb86:	6803      	ldr	r3, [r0, #0]
    fb88:	2b00      	cmp	r3, #0
    fb8a:	d078      	beq.n	fc7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x246>
    fb8c:	6860      	ldr	r0, [r4, #4]
    fb8e:	4652      	mov	r2, sl
    fb90:	4659      	mov	r1, fp
    fb92:	9000      	str	r0, [sp, #0]
    fb94:	4798      	blx	r3
    fb96:	f89b 0000 	ldrb.w	r0, [fp]
    fb9a:	281e      	cmp	r0, #30
    fb9c:	d005      	beq.n	fbaa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    fb9e:	281b      	cmp	r0, #27
    fba0:	d16d      	bne.n	fc7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x246>
    fba2:	f89b 0004 	ldrb.w	r0, [fp, #4]
    fba6:	2800      	cmp	r0, #0
    fba8:	d069      	beq.n	fc7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x246>
    fbaa:	9800      	ldr	r0, [sp, #0]
    fbac:	2104      	movs	r1, #4
    fbae:	8900      	ldrh	r0, [r0, #8]
    fbb0:	f7fd fca6 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fbb4:	b320      	cbz	r0, fc00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    fbb6:	f44f 7100 	mov.w	r1, #512	; 0x200
    fbba:	2010      	movs	r0, #16
    fbbc:	f7fd f964 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbc0:	6862      	ldr	r2, [r4, #4]
    fbc2:	2a00      	cmp	r2, #0
    fbc4:	d1a4      	bne.n	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fbc6:	f44f 7103 	mov.w	r1, #524	; 0x20c
    fbca:	2010      	movs	r0, #16
    fbcc:	f7fd f95c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbd0:	486c      	ldr	r0, [pc, #432]	; (fd84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34c>)
    fbd2:	6803      	ldr	r3, [r0, #0]
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	d06a      	beq.n	fcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    fbd8:	6860      	ldr	r0, [r4, #4]
    fbda:	4652      	mov	r2, sl
    fbdc:	4659      	mov	r1, fp
    fbde:	4798      	blx	r3
    fbe0:	f1ba 0f1e 	cmp.w	sl, #30
    fbe4:	d039      	beq.n	fc5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    fbe6:	e062      	b.n	fcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    fbe8:	f006 ff3e 	bl	16a68 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fbec:	2800      	cmp	r0, #0
    fbee:	bf08      	it	eq
    fbf0:	f04f 0801 	moveq.w	r8, #1
    fbf4:	d05b      	beq.n	fcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    fbf6:	6862      	ldr	r2, [r4, #4]
    fbf8:	b11a      	cbz	r2, fc02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ca>
    fbfa:	4659      	mov	r1, fp
    fbfc:	4620      	mov	r0, r4
    fbfe:	4790      	blx	r2
    fc00:	e02b      	b.n	fc5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    fc02:	f240 2133 	movw	r1, #563	; 0x233
    fc06:	2010      	movs	r0, #16
    fc08:	f7fd f93e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc0c:	6862      	ldr	r2, [r4, #4]
    fc0e:	2a00      	cmp	r2, #0
    fc10:	f47f af7e 	bne.w	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fc14:	f240 213f 	movw	r1, #575	; 0x23f
    fc18:	2010      	movs	r0, #16
    fc1a:	f7fd f935 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc1e:	6862      	ldr	r2, [r4, #4]
    fc20:	2a00      	cmp	r2, #0
    fc22:	f47f af75 	bne.w	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fc26:	f240 214b 	movw	r1, #587	; 0x24b
    fc2a:	2010      	movs	r0, #16
    fc2c:	f7fd f92c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc30:	6860      	ldr	r0, [r4, #4]
    fc32:	b1a8      	cbz	r0, fc60 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x228>
    fc34:	8804      	ldrh	r4, [r0, #0]
    fc36:	4620      	mov	r0, r4
    fc38:	f7fd fe1c 	bl	d874 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    fc3c:	b1a0      	cbz	r0, fc68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x230>
    fc3e:	f88b 5001 	strb.w	r5, [fp, #1]
    fc42:	210f      	movs	r1, #15
    fc44:	f88b 1000 	strb.w	r1, [fp]
    fc48:	f8ab 4006 	strh.w	r4, [fp, #6]
    fc4c:	f8ab 7008 	strh.w	r7, [fp, #8]
    fc50:	f88b 7004 	strb.w	r7, [fp, #4]
    fc54:	2100      	movs	r1, #0
    fc56:	f00f f965 	bl	1ef24 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    fc5a:	2004      	movs	r0, #4
    fc5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc60:	21ce      	movs	r1, #206	; 0xce
    fc62:	2010      	movs	r0, #16
    fc64:	f7fd f910 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc68:	21ae      	movs	r1, #174	; 0xae
    fc6a:	2010      	movs	r0, #16
    fc6c:	f7fd f90c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc70:	6862      	ldr	r2, [r4, #4]
    fc72:	b12a      	cbz	r2, fc80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x248>
    fc74:	4659      	mov	r1, fp
    fc76:	4620      	mov	r0, r4
    fc78:	4790      	blx	r2
    fc7a:	f04f 0801 	mov.w	r8, #1
    fc7e:	e016      	b.n	fcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x276>
    fc80:	f240 2163 	movw	r1, #611	; 0x263
    fc84:	2010      	movs	r0, #16
    fc86:	f7fd f8ff 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc8a:	6862      	ldr	r2, [r4, #4]
    fc8c:	2a00      	cmp	r2, #0
    fc8e:	f47f af3f 	bne.w	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fc92:	f240 216f 	movw	r1, #623	; 0x26f
    fc96:	2010      	movs	r0, #16
    fc98:	f7fd f8f6 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc9c:	f88b 5001 	strb.w	r5, [fp, #1]
    fca0:	201f      	movs	r0, #31
    fca2:	f88b 0000 	strb.w	r0, [fp]
    fca6:	f8d4 0009 	ldr.w	r0, [r4, #9]
    fcaa:	f8cb 0004 	str.w	r0, [fp, #4]
    fcae:	7225      	strb	r5, [r4, #8]
    fcb0:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
    fcb4:	d046      	beq.n	fd44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30c>
    fcb6:	f1ba 0f14 	cmp.w	sl, #20
    fcba:	e005      	b.n	fcc8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x290>
    fcbc:	e034      	b.n	fd28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2f0>
    fcbe:	e01a      	b.n	fcf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2be>
    fcc0:	e029      	b.n	fd16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2de>
    fcc2:	e03a      	b.n	fd3a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x302>
    fcc4:	e005      	b.n	fcd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x29a>
    fcc6:	e00d      	b.n	fce4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ac>
    fcc8:	d042      	beq.n	fd50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x318>
    fcca:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    fcce:	d049      	beq.n	fd64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x32c>
    fcd0:	e04d      	b.n	fd6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x336>
    fcd2:	6862      	ldr	r2, [r4, #4]
    fcd4:	2a00      	cmp	r2, #0
    fcd6:	f47f af1b 	bne.w	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fcda:	f240 2181 	movw	r1, #641	; 0x281
    fcde:	2010      	movs	r0, #16
    fce0:	f7fd f8d2 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fce4:	6862      	ldr	r2, [r4, #4]
    fce6:	2a00      	cmp	r2, #0
    fce8:	f47f af12 	bne.w	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fcec:	f240 2196 	movw	r1, #662	; 0x296
    fcf0:	2010      	movs	r0, #16
    fcf2:	f7fd f8c9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcf6:	4824      	ldr	r0, [pc, #144]	; (fd88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x350>)
    fcf8:	6802      	ldr	r2, [r0, #0]
    fcfa:	b122      	cbz	r2, fd06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2ce>
    fcfc:	6860      	ldr	r0, [r4, #4]
    fcfe:	b128      	cbz	r0, fd0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x2d4>
    fd00:	8800      	ldrh	r0, [r0, #0]
    fd02:	4659      	mov	r1, fp
    fd04:	4790      	blx	r2
    fd06:	2002      	movs	r0, #2
    fd08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd0c:	f240 219f 	movw	r1, #671	; 0x29f
    fd10:	2010      	movs	r0, #16
    fd12:	f7fd f8b9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd16:	6862      	ldr	r2, [r4, #4]
    fd18:	2a00      	cmp	r2, #0
    fd1a:	f47f aef9 	bne.w	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fd1e:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    fd22:	2010      	movs	r0, #16
    fd24:	f7fd f8b0 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd28:	6862      	ldr	r2, [r4, #4]
    fd2a:	2a00      	cmp	r2, #0
    fd2c:	f47f aef0 	bne.w	fb10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd8>
    fd30:	f240 21b7 	movw	r1, #695	; 0x2b7
    fd34:	2010      	movs	r0, #16
    fd36:	f7fd f8a7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd3a:	f240 21bd 	movw	r1, #701	; 0x2bd
    fd3e:	2010      	movs	r0, #16
    fd40:	f7fd f8a2 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd44:	f7ff fda0 	bl	f888 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    fd48:	2800      	cmp	r0, #0
    fd4a:	f47f ae7d 	bne.w	fa48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    fd4e:	e00e      	b.n	fd6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x336>
    fd50:	f89b 000e 	ldrb.w	r0, [fp, #14]
    fd54:	f000 0001 	and.w	r0, r0, #1
    fd58:	f7ff fd8a 	bl	f870 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    fd5c:	2800      	cmp	r0, #0
    fd5e:	f47f ae73 	bne.w	fa48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    fd62:	e004      	b.n	fd6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x336>
    fd64:	f7ff fd9a 	bl	f89c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    fd68:	2800      	cmp	r0, #0
    fd6a:	f47f ae6d 	bne.w	fa48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    fd6e:	f1b8 0f00 	cmp.w	r8, #0
    fd72:	f47f ae69 	bne.w	fa48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10>
    fd76:	e770      	b.n	fc5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x222>
    fd78:	2000111c 	.word	0x2000111c
    fd7c:	2000114c 	.word	0x2000114c
    fd80:	200000e0 	.word	0x200000e0
    fd84:	200000dc 	.word	0x200000dc
    fd88:	200000d8 	.word	0x200000d8

0000fd8c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    fd8c:	490a      	ldr	r1, [pc, #40]	; (fdb8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2c>)
    fd8e:	b510      	push	{r4, lr}
    fd90:	7008      	strb	r0, [r1, #0]
    fd92:	480a      	ldr	r0, [pc, #40]	; (fdbc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x30>)
    fd94:	2100      	movs	r1, #0
    fd96:	6141      	str	r1, [r0, #20]
    fd98:	6181      	str	r1, [r0, #24]
    fd9a:	61c1      	str	r1, [r0, #28]
    fd9c:	6201      	str	r1, [r0, #32]
    fd9e:	2212      	movs	r2, #18
    fda0:	f013 fa1d 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fda4:	4806      	ldr	r0, [pc, #24]	; (fdc0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x34>)
    fda6:	2101      	movs	r1, #1
    fda8:	f100 020c 	add.w	r2, r0, #12
    fdac:	7011      	strb	r1, [r2, #0]
    fdae:	1d01      	adds	r1, r0, #4
    fdb0:	6041      	str	r1, [r0, #4]
    fdb2:	6001      	str	r1, [r0, #0]
    fdb4:	bd10      	pop	{r4, pc}
    fdb6:	0000      	.short	0x0000
    fdb8:	20000422 	.word	0x20000422
    fdbc:	20001138 	.word	0x20001138
    fdc0:	2000114c 	.word	0x2000114c

0000fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    fdc4:	b538      	push	{r3, r4, r5, lr}
    fdc6:	7a03      	ldrb	r3, [r0, #8]
    fdc8:	f88d 3000 	strb.w	r3, [sp]
    fdcc:	f89d 3000 	ldrb.w	r3, [sp]
    fdd0:	b123      	cbz	r3, fddc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x18>
    fdd2:	f240 3117 	movw	r1, #791	; 0x317
    fdd6:	2010      	movs	r0, #16
    fdd8:	f7fd f856 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fddc:	b1f0      	cbz	r0, fe1c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x58>
    fdde:	6041      	str	r1, [r0, #4]
    fde0:	f100 0108 	add.w	r1, r0, #8
    fde4:	700a      	strb	r2, [r1, #0]
    fde6:	f3ef 8310 	mrs	r3, PRIMASK
    fdea:	b672      	cpsid	i
    fdec:	f8df c044 	ldr.w	ip, [pc, #68]	; fe34 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x70>
    fdf0:	f8c0 c000 	str.w	ip, [r0]
    fdf4:	f1ac 0104 	sub.w	r1, ip, #4
    fdf8:	684a      	ldr	r2, [r1, #4]
    fdfa:	b152      	cbz	r2, fe12 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x4e>
    fdfc:	7a12      	ldrb	r2, [r2, #8]
    fdfe:	f88d 2000 	strb.w	r2, [sp]
    fe02:	9a00      	ldr	r2, [sp, #0]
    fe04:	9200      	str	r2, [sp, #0]
    fe06:	f89d 4000 	ldrb.w	r4, [sp]
    fe0a:	2c01      	cmp	r4, #1
    fe0c:	bf08      	it	eq
    fe0e:	f8c1 c000 	streq.w	ip, [r1]
    fe12:	680a      	ldr	r2, [r1, #0]
    fe14:	6010      	str	r0, [r2, #0]
    fe16:	6008      	str	r0, [r1, #0]
    fe18:	b933      	cbnz	r3, fe28 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x64>
    fe1a:	e004      	b.n	fe26 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x62>
    fe1c:	f240 21e2 	movw	r1, #738	; 0x2e2
    fe20:	2010      	movs	r0, #16
    fe22:	f7fd f831 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe26:	b662      	cpsie	i
    fe28:	4803      	ldr	r0, [pc, #12]	; (fe38 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x74>)
    fe2a:	7800      	ldrb	r0, [r0, #0]
    fe2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fe30:	f00d bb5c 	b.w	1d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    fe34:	20001150 	.word	0x20001150
    fe38:	20000422 	.word	0x20000422

0000fe3c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    fe3c:	4809      	ldr	r0, [pc, #36]	; (fe64 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x28>)
    fe3e:	b510      	push	{r4, lr}
    fe40:	2100      	movs	r1, #0
    fe42:	6141      	str	r1, [r0, #20]
    fe44:	6181      	str	r1, [r0, #24]
    fe46:	61c1      	str	r1, [r0, #28]
    fe48:	6201      	str	r1, [r0, #32]
    fe4a:	2212      	movs	r2, #18
    fe4c:	f013 f9c7 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    fe50:	4805      	ldr	r0, [pc, #20]	; (fe68 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2c>)
    fe52:	2201      	movs	r2, #1
    fe54:	f100 010c 	add.w	r1, r0, #12
    fe58:	700a      	strb	r2, [r1, #0]
    fe5a:	1d01      	adds	r1, r0, #4
    fe5c:	6041      	str	r1, [r0, #4]
    fe5e:	6001      	str	r1, [r0, #0]
    fe60:	bd10      	pop	{r4, pc}
    fe62:	0000      	.short	0x0000
    fe64:	20001138 	.word	0x20001138
    fe68:	2000114c 	.word	0x2000114c

0000fe6c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    fe6c:	4902      	ldr	r1, [pc, #8]	; (fe78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    fe6e:	4801      	ldr	r0, [pc, #4]	; (fe74 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    fe70:	6008      	str	r0, [r1, #0]
    fe72:	4770      	bx	lr
    fe74:	0000fef1 	.word	0x0000fef1
    fe78:	200000d8 	.word	0x200000d8

0000fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    fe7c:	b538      	push	{r3, r4, r5, lr}
    fe7e:	7a03      	ldrb	r3, [r0, #8]
    fe80:	f88d 3000 	strb.w	r3, [sp]
    fe84:	f89d 3000 	ldrb.w	r3, [sp]
    fe88:	2b00      	cmp	r3, #0
    fe8a:	bf18      	it	ne
    fe8c:	bd38      	popne	{r3, r4, r5, pc}
    fe8e:	b1f0      	cbz	r0, fece <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x52>
    fe90:	6041      	str	r1, [r0, #4]
    fe92:	f100 0108 	add.w	r1, r0, #8
    fe96:	700a      	strb	r2, [r1, #0]
    fe98:	f3ef 8310 	mrs	r3, PRIMASK
    fe9c:	b672      	cpsid	i
    fe9e:	f8df c048 	ldr.w	ip, [pc, #72]	; fee8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x6c>
    fea2:	f8c0 c000 	str.w	ip, [r0]
    fea6:	f1ac 0104 	sub.w	r1, ip, #4
    feaa:	684a      	ldr	r2, [r1, #4]
    feac:	b152      	cbz	r2, fec4 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x48>
    feae:	7a12      	ldrb	r2, [r2, #8]
    feb0:	f88d 2000 	strb.w	r2, [sp]
    feb4:	9a00      	ldr	r2, [sp, #0]
    feb6:	9200      	str	r2, [sp, #0]
    feb8:	f89d 4000 	ldrb.w	r4, [sp]
    febc:	2c01      	cmp	r4, #1
    febe:	bf08      	it	eq
    fec0:	f8c1 c000 	streq.w	ip, [r1]
    fec4:	680a      	ldr	r2, [r1, #0]
    fec6:	6010      	str	r0, [r2, #0]
    fec8:	6008      	str	r0, [r1, #0]
    feca:	b933      	cbnz	r3, feda <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x5e>
    fecc:	e004      	b.n	fed8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x5c>
    fece:	f240 21e2 	movw	r1, #738	; 0x2e2
    fed2:	2010      	movs	r0, #16
    fed4:	f7fc ffd8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fed8:	b662      	cpsie	i
    feda:	4804      	ldr	r0, [pc, #16]	; (feec <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x70>)
    fedc:	7800      	ldrb	r0, [r0, #0]
    fede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fee2:	f00d bb03 	b.w	1d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    fee6:	0000      	.short	0x0000
    fee8:	20001150 	.word	0x20001150
    feec:	20000422 	.word	0x20000422
    fef0:	b538      	push	{r3, r4, r5, lr}
    fef2:	000c      	movs	r4, r1
    fef4:	d016      	beq.n	ff24 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0xa8>
    fef6:	80a0      	strh	r0, [r4, #4]
    fef8:	2100      	movs	r1, #0
    fefa:	7261      	strb	r1, [r4, #9]
    fefc:	f7fd fca4 	bl	d848 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ff00:	4605      	mov	r5, r0
    ff02:	f00e ff40 	bl	1ed86 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ff06:	0001      	movs	r1, r0
    ff08:	d010      	beq.n	ff2c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0xb0>
    ff0a:	466a      	mov	r2, sp
    ff0c:	4628      	mov	r0, r5
    ff0e:	f00e ff5a 	bl	1edc6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ff12:	80e0      	strh	r0, [r4, #6]
    ff14:	b178      	cbz	r0, ff36 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0xba>
    ff16:	28fb      	cmp	r0, #251	; 0xfb
    ff18:	d912      	bls.n	ff40 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0xc4>
    ff1a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    ff1e:	2010      	movs	r0, #16
    ff20:	f7fc ffb2 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff24:	21fc      	movs	r1, #252	; 0xfc
    ff26:	2010      	movs	r0, #16
    ff28:	f7fc ffae 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff2c:	f240 1105 	movw	r1, #261	; 0x105
    ff30:	2010      	movs	r0, #16
    ff32:	f7fc ffa9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff36:	f44f 7185 	mov.w	r1, #266	; 0x10a
    ff3a:	2010      	movs	r0, #16
    ff3c:	f7fc ffa4 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff40:	9800      	ldr	r0, [sp, #0]
    ff42:	f00f ff66 	bl	1fe12 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    ff46:	2801      	cmp	r0, #1
    ff48:	bf18      	it	ne
    ff4a:	2802      	cmpne	r0, #2
    ff4c:	d005      	beq.n	ff5a <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0xde>
    ff4e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    ff52:	f04f 0010 	mov.w	r0, #16
    ff56:	f7fc ff97 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff5a:	7220      	strb	r0, [r4, #8]
    ff5c:	6820      	ldr	r0, [r4, #0]
    ff5e:	b1b0      	cbz	r0, ff8e <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x112>
    ff60:	9900      	ldr	r1, [sp, #0]
    ff62:	88e2      	ldrh	r2, [r4, #6]
    ff64:	1cc9      	adds	r1, r1, #3
    ff66:	f013 f8c0 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ff6a:	4628      	mov	r0, r5
    ff6c:	f00e fed2 	bl	1ed14 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ff70:	b190      	cbz	r0, ff98 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x11c>
    ff72:	2100      	movs	r1, #0
    ff74:	4628      	mov	r0, r5
    ff76:	f00e ffd5 	bl	1ef24 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ff7a:	b190      	cbz	r0, ffa2 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x126>
    ff7c:	480b      	ldr	r0, [pc, #44]	; (ffac <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x130>)
    ff7e:	7dc1      	ldrb	r1, [r0, #23]
    ff80:	2900      	cmp	r1, #0
    ff82:	bf08      	it	eq
    ff84:	bd38      	popeq	{r3, r4, r5, pc}
    ff86:	8b01      	ldrh	r1, [r0, #24]
    ff88:	1e49      	subs	r1, r1, #1
    ff8a:	8301      	strh	r1, [r0, #24]
    ff8c:	bd38      	pop	{r3, r4, r5, pc}
    ff8e:	f240 1123 	movw	r1, #291	; 0x123
    ff92:	2010      	movs	r0, #16
    ff94:	f7fc ff78 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff98:	f44f 7194 	mov.w	r1, #296	; 0x128
    ff9c:	2010      	movs	r0, #16
    ff9e:	f7fc ff73 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffa2:	f240 112d 	movw	r1, #301	; 0x12d
    ffa6:	2010      	movs	r0, #16
    ffa8:	f7fc ff6e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffac:	2000111c 	.word	0x2000111c

0000ffb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    ffb0:	b430      	push	{r4, r5}
    ffb2:	8150      	strh	r0, [r2, #10]
    ffb4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    ffb8:	4613      	mov	r3, r2
    ffba:	f8a2 c00c 	strh.w	ip, [r2, #12]
    ffbe:	898a      	ldrh	r2, [r1, #12]
    ffc0:	81da      	strh	r2, [r3, #14]
    ffc2:	8948      	ldrh	r0, [r1, #10]
    ffc4:	8218      	strh	r0, [r3, #16]
    ffc6:	89cc      	ldrh	r4, [r1, #14]
    ffc8:	825c      	strh	r4, [r3, #18]
    ffca:	8dcd      	ldrh	r5, [r1, #46]	; 0x2e
    ffcc:	42a5      	cmp	r5, r4
    ffce:	bf04      	itt	eq
    ffd0:	8d4c      	ldrheq	r4, [r1, #42]	; 0x2a
    ffd2:	4284      	cmpeq	r4, r0
    ffd4:	d106      	bne.n	ffe4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    ffd6:	8e0c      	ldrh	r4, [r1, #48]	; 0x30
    ffd8:	4294      	cmp	r4, r2
    ffda:	bf02      	ittt	eq
    ffdc:	8d8a      	ldrheq	r2, [r1, #44]	; 0x2c
    ffde:	4562      	cmpeq	r2, ip
    ffe0:	2200      	moveq	r2, #0
    ffe2:	d001      	beq.n	ffe8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x38>
    ffe4:	f04f 0201 	mov.w	r2, #1
    ffe8:	751a      	strb	r2, [r3, #20]
    ffea:	8548      	strh	r0, [r1, #42]	; 0x2a
    ffec:	8a58      	ldrh	r0, [r3, #18]
    ffee:	85c8      	strh	r0, [r1, #46]	; 0x2e
    fff0:	8998      	ldrh	r0, [r3, #12]
    fff2:	8588      	strh	r0, [r1, #44]	; 0x2c
    fff4:	89d8      	ldrh	r0, [r3, #14]
    fff6:	8608      	strh	r0, [r1, #48]	; 0x30
    fff8:	bc30      	pop	{r4, r5}
    fffa:	f04f 0214 	mov.w	r2, #20
    fffe:	4902      	ldr	r1, [pc, #8]	; (10008 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x58>)
   10000:	4618      	mov	r0, r3
   10002:	f7ff bf3b 	b.w	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   10006:	0000      	.short	0x0000
   10008:	000201c9 	.word	0x000201c9

0001000c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   1000c:	b430      	push	{r4, r5}
   1000e:	f890 506e 	ldrb.w	r5, [r0, #110]	; 0x6e
   10012:	888c      	ldrh	r4, [r1, #4]
   10014:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   10018:	f015 0f0c 	tst.w	r5, #12
   1001c:	d01b      	beq.n	10056 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x4a>
   1001e:	bf00      	nop
   10020:	f5b4 6f29 	cmp.w	r4, #2704	; 0xa90
   10024:	bf98      	it	ls
   10026:	f44f 6429 	movls.w	r4, #2704	; 0xa90
   1002a:	f890 506f 	ldrb.w	r5, [r0, #111]	; 0x6f
   1002e:	f015 0f0c 	tst.w	r5, #12
   10032:	d017      	beq.n	10064 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x58>
   10034:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
   10038:	bf98      	it	ls
   1003a:	f44f 6c29 	movls.w	ip, #2704	; 0xa90
   1003e:	884a      	ldrh	r2, [r1, #2]
   10040:	88c9      	ldrh	r1, [r1, #6]
   10042:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
   10046:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
   1004a:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
   1004e:	f8a0 c052 	strh.w	ip, [r0, #82]	; 0x52
   10052:	bc30      	pop	{r4, r5}
   10054:	4770      	bx	lr
   10056:	2b00      	cmp	r3, #0
   10058:	bf1c      	itt	ne
   1005a:	7815      	ldrbne	r5, [r2, #0]
   1005c:	f015 0f0c 	tstne.w	r5, #12
   10060:	d1de      	bne.n	10020 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x14>
   10062:	e7e2      	b.n	1002a <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x1e>
   10064:	2b00      	cmp	r3, #0
   10066:	bf1c      	itt	ne
   10068:	7852      	ldrbne	r2, [r2, #1]
   1006a:	f012 0f0c 	tstne.w	r2, #12
   1006e:	d1e1      	bne.n	10034 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x28>
   10070:	e7e5      	b.n	1003e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY+0x32>
	...

00010074 <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI>:
   10074:	4801      	ldr	r0, [pc, #4]	; (1007c <sym_VLZYODAV2LKRVZ5U6Q4CDF3UFZES3VV342R37AI+0x8>)
   10076:	7800      	ldrb	r0, [r0, #0]
   10078:	4770      	bx	lr
   1007a:	0000      	.short	0x0000
   1007c:	20000423 	.word	0x20000423

00010080 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   10080:	8150      	strh	r0, [r2, #10]
   10082:	8a88      	ldrh	r0, [r1, #20]
   10084:	8190      	strh	r0, [r2, #12]
   10086:	8ac8      	ldrh	r0, [r1, #22]
   10088:	81d0      	strh	r0, [r2, #14]
   1008a:	8b08      	ldrh	r0, [r1, #24]
   1008c:	8210      	strh	r0, [r2, #16]
   1008e:	8b48      	ldrh	r0, [r1, #26]
   10090:	4613      	mov	r3, r2
   10092:	8250      	strh	r0, [r2, #18]
   10094:	2221      	movs	r2, #33	; 0x21
   10096:	4902      	ldr	r1, [pc, #8]	; (100a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
   10098:	4618      	mov	r0, r3
   1009a:	f7ff be93 	b.w	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   1009e:	0000      	.short	0x0000
   100a0:	00020201 	.word	0x00020201
   100a4:	b570      	push	{r4, r5, r6, lr}
   100a6:	f8b0 c038 	ldrh.w	ip, [r0, #56]	; 0x38
   100aa:	f012 0f0c 	tst.w	r2, #12
   100ae:	f10c 0c04 	add.w	ip, ip, #4
   100b2:	fa1f fc8c 	uxth.w	ip, ip
   100b6:	f44f 7534 	mov.w	r5, #720	; 0x2d0
   100ba:	bf1c      	itt	ne
   100bc:	eb05 1c8c 	addne.w	ip, r5, ip, lsl #6
   100c0:	fa1f fc8c 	uxthne.w	ip, ip
   100c4:	d10f      	bne.n	100e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x66>
   100c6:	2a01      	cmp	r2, #1
   100c8:	bf04      	itt	eq
   100ca:	ea4f 0ccc 	moveq.w	ip, ip, lsl #3
   100ce:	f10c 0c50 	addeq.w	ip, ip, #80	; 0x50
   100d2:	d006      	beq.n	100e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
   100d4:	2a02      	cmp	r2, #2
   100d6:	bf04      	itt	eq
   100d8:	ea4f 0c8c 	moveq.w	ip, ip, lsl #2
   100dc:	f10c 0c2c 	addeq.w	ip, ip, #44	; 0x2c
   100e0:	d166      	bne.n	101b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x130>
   100e2:	fa1f fc8c 	uxth.w	ip, ip
   100e6:	f012 0f0c 	tst.w	r2, #12
   100ea:	bf18      	it	ne
   100ec:	f44f 6429 	movne.w	r4, #2704	; 0xa90
   100f0:	d106      	bne.n	10100 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x80>
   100f2:	f8b0 604e 	ldrh.w	r6, [r0, #78]	; 0x4e
   100f6:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
   100fa:	42a6      	cmp	r6, r4
   100fc:	bf38      	it	cc
   100fe:	4634      	movcc	r4, r6
   10100:	4564      	cmp	r4, ip
   10102:	bf38      	it	cc
   10104:	46a4      	movcc	ip, r4
   10106:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
   1010a:	1d24      	adds	r4, r4, #4
   1010c:	b2a4      	uxth	r4, r4
   1010e:	f013 0f0c 	tst.w	r3, #12
   10112:	bf1c      	itt	ne
   10114:	eb05 1484 	addne.w	r4, r5, r4, lsl #6
   10118:	b2a5      	uxthne	r5, r4
   1011a:	d10a      	bne.n	10132 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
   1011c:	2b01      	cmp	r3, #1
   1011e:	bf04      	itt	eq
   10120:	00e4      	lsleq	r4, r4, #3
   10122:	3450      	addeq	r4, #80	; 0x50
   10124:	d004      	beq.n	10130 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb0>
   10126:	2b02      	cmp	r3, #2
   10128:	bf04      	itt	eq
   1012a:	00a4      	lsleq	r4, r4, #2
   1012c:	342c      	addeq	r4, #44	; 0x2c
   1012e:	d13f      	bne.n	101b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x130>
   10130:	b2a5      	uxth	r5, r4
   10132:	f013 0f0c 	tst.w	r3, #12
   10136:	bf18      	it	ne
   10138:	f44f 6429 	movne.w	r4, #2704	; 0xa90
   1013c:	d106      	bne.n	1014c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
   1013e:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
   10142:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
   10146:	42a6      	cmp	r6, r4
   10148:	bf38      	it	cc
   1014a:	4634      	movcc	r4, r6
   1014c:	42ac      	cmp	r4, r5
   1014e:	bf28      	it	cs
   10150:	462c      	movcs	r4, r5
   10152:	481a      	ldr	r0, [pc, #104]	; (101bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x13c>)
   10154:	7800      	ldrb	r0, [r0, #0]
   10156:	b198      	cbz	r0, 10180 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x100>
   10158:	f013 0f0c 	tst.w	r3, #12
   1015c:	bf18      	it	ne
   1015e:	f44f 6069 	movne.w	r0, #3728	; 0xe90
   10162:	d012      	beq.n	1018a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x10a>
   10164:	4284      	cmp	r4, r0
   10166:	bf28      	it	cs
   10168:	4620      	movcs	r0, r4
   1016a:	4604      	mov	r4, r0
   1016c:	f012 0f0c 	tst.w	r2, #12
   10170:	bf18      	it	ne
   10172:	f44f 6069 	movne.w	r0, #3728	; 0xe90
   10176:	d012      	beq.n	1019e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x11e>
   10178:	4584      	cmp	ip, r0
   1017a:	bf28      	it	cs
   1017c:	4660      	movcs	r0, ip
   1017e:	4684      	mov	ip, r0
   10180:	eb0c 0004 	add.w	r0, ip, r4
   10184:	4408      	add	r0, r1
   10186:	1d80      	adds	r0, r0, #6
   10188:	bd70      	pop	{r4, r5, r6, pc}
   1018a:	2b01      	cmp	r3, #1
   1018c:	bf08      	it	eq
   1018e:	f44f 70e4 	moveq.w	r0, #456	; 0x1c8
   10192:	d0e7      	beq.n	10164 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>
   10194:	2b02      	cmp	r3, #2
   10196:	bf08      	it	eq
   10198:	20e8      	moveq	r0, #232	; 0xe8
   1019a:	d0e3      	beq.n	10164 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>
   1019c:	e008      	b.n	101b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x130>
   1019e:	2a01      	cmp	r2, #1
   101a0:	bf08      	it	eq
   101a2:	f44f 70e4 	moveq.w	r0, #456	; 0x1c8
   101a6:	d0e7      	beq.n	10178 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf8>
   101a8:	2a02      	cmp	r2, #2
   101aa:	bf08      	it	eq
   101ac:	20e8      	moveq	r0, #232	; 0xe8
   101ae:	d0e3      	beq.n	10178 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xf8>
   101b0:	f240 2126 	movw	r1, #550	; 0x226
   101b4:	2006      	movs	r0, #6
   101b6:	f7fc fe67 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101ba:	0000      	.short	0x0000
   101bc:	20000423 	.word	0x20000423

000101c0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
   101c0:	b470      	push	{r4, r5, r6}
   101c2:	f06f 021f 	mvn.w	r2, #31
   101c6:	0c01      	lsrs	r1, r0, #16
   101c8:	ea02 2590 	and.w	r5, r2, r0, lsr #10
   101cc:	231f      	movs	r3, #31
   101ce:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   101d2:	3854      	subs	r0, #84	; 0x54
   101d4:	bf1c      	itt	ne
   101d6:	f5a1 40aa 	subne.w	r0, r1, #21760	; 0x5500
   101da:	f1b0 0055 	subsne.w	r0, r0, #85	; 0x55
   101de:	d009      	beq.n	101f4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
   101e0:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
   101e4:	38aa      	subs	r0, #170	; 0xaa
   101e6:	bf1e      	ittt	ne
   101e8:	f5a1 402a 	subne.w	r0, r1, #43520	; 0xaa00
   101ec:	f1b0 00aa 	subsne.w	r0, r0, #170	; 0xaa
   101f0:	2001      	movne	r0, #1
   101f2:	d100      	bne.n	101f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x36>
   101f4:	2000      	movs	r0, #0
   101f6:	f04f 0c00 	mov.w	ip, #0
   101fa:	4662      	mov	r2, ip
   101fc:	ea4f 040c 	mov.w	r4, ip
   10200:	ea8c 0601 	eor.w	r6, ip, r1
   10204:	43f6      	mvns	r6, r6
   10206:	4316      	orrs	r6, r2
   10208:	f1b6 3fff 	cmp.w	r6, #4294967295
   1020c:	d011      	beq.n	10232 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x72>
   1020e:	f005 0601 	and.w	r6, r5, #1
   10212:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   10216:	ea4c 3cc6 	orr.w	ip, ip, r6, lsl #15
   1021a:	f003 0601 	and.w	r6, r3, #1
   1021e:	0852      	lsrs	r2, r2, #1
   10220:	086d      	lsrs	r5, r5, #1
   10222:	085b      	lsrs	r3, r3, #1
   10224:	1c64      	adds	r4, r4, #1
   10226:	ea42 32c6 	orr.w	r2, r2, r6, lsl #15
   1022a:	2c16      	cmp	r4, #22
   1022c:	d3e8      	bcc.n	10200 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x40>
   1022e:	bc70      	pop	{r4, r5, r6}
   10230:	4770      	bx	lr
   10232:	bc70      	pop	{r4, r5, r6}
   10234:	2000      	movs	r0, #0
   10236:	4770      	bx	lr

00010238 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
   10238:	b510      	push	{r4, lr}
   1023a:	4c0c      	ldr	r4, [pc, #48]	; (1026c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
   1023c:	2108      	movs	r1, #8
   1023e:	4620      	mov	r0, r4
   10240:	f7fc fee0 	bl	d004 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   10244:	6820      	ldr	r0, [r4, #0]
   10246:	2800      	cmp	r0, #0
   10248:	bf04      	itt	eq
   1024a:	6860      	ldreq	r0, [r4, #4]
   1024c:	2800      	cmpeq	r0, #0
   1024e:	d0f5      	beq.n	1023c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
   10250:	4c07      	ldr	r4, [pc, #28]	; (10270 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x38>)
   10252:	bf00      	nop
   10254:	f04f 0108 	mov.w	r1, #8
   10258:	4620      	mov	r0, r4
   1025a:	f7fc fed3 	bl	d004 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1025e:	6820      	ldr	r0, [r4, #0]
   10260:	2800      	cmp	r0, #0
   10262:	bf04      	itt	eq
   10264:	6860      	ldreq	r0, [r4, #4]
   10266:	2800      	cmpeq	r0, #0
   10268:	d0f4      	beq.n	10254 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1c>
   1026a:	bd10      	pop	{r4, pc}
   1026c:	200000e4 	.word	0x200000e4
   10270:	200000ec 	.word	0x200000ec

00010274 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
   10274:	4a09      	ldr	r2, [pc, #36]	; (1029c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x28>)
   10276:	480a      	ldr	r0, [pc, #40]	; (102a0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x2c>)
   10278:	e9d2 1300 	ldrd	r1, r3, [r2]
   1027c:	4348      	muls	r0, r1
   1027e:	404b      	eors	r3, r1
   10280:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
   10284:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
   10288:	6011      	str	r1, [r2, #0]
   1028a:	ea4f 60f0 	mov.w	r0, r0, ror #27
   1028e:	ea4f 41f3 	mov.w	r1, r3, ror #19
   10292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10296:	6051      	str	r1, [r2, #4]
   10298:	4770      	bx	lr
   1029a:	0000      	.short	0x0000
   1029c:	200000e4 	.word	0x200000e4
   102a0:	9e3779bb 	.word	0x9e3779bb

000102a4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
   102a4:	4a09      	ldr	r2, [pc, #36]	; (102cc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x28>)
   102a6:	480a      	ldr	r0, [pc, #40]	; (102d0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x2c>)
   102a8:	e9d2 1300 	ldrd	r1, r3, [r2]
   102ac:	4348      	muls	r0, r1
   102ae:	404b      	eors	r3, r1
   102b0:	ea83 11b1 	eor.w	r1, r3, r1, ror #6
   102b4:	ea81 2143 	eor.w	r1, r1, r3, lsl #9
   102b8:	6011      	str	r1, [r2, #0]
   102ba:	ea4f 60f0 	mov.w	r0, r0, ror #27
   102be:	ea4f 41f3 	mov.w	r1, r3, ror #19
   102c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   102c6:	6051      	str	r1, [r2, #4]
   102c8:	4770      	bx	lr
   102ca:	0000      	.short	0x0000
   102cc:	200000ec 	.word	0x200000ec
   102d0:	9e3779bb 	.word	0x9e3779bb

000102d4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
   102d4:	b570      	push	{r4, r5, r6, lr}
   102d6:	f1a0 0534 	sub.w	r5, r0, #52	; 0x34
   102da:	f830 6cdc 	ldrh.w	r6, [r0, #-220]
   102de:	4817      	ldr	r0, [pc, #92]	; (1033c <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x68>)
   102e0:	460c      	mov	r4, r1
   102e2:	6801      	ldr	r1, [r0, #0]
   102e4:	2900      	cmp	r1, #0
   102e6:	bf1c      	itt	ne
   102e8:	4628      	movne	r0, r5
   102ea:	4788      	blxne	r1
   102ec:	4814      	ldr	r0, [pc, #80]	; (10340 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x6c>)
   102ee:	6801      	ldr	r1, [r0, #0]
   102f0:	2900      	cmp	r1, #0
   102f2:	bf1c      	itt	ne
   102f4:	4630      	movne	r0, r6
   102f6:	4788      	blxne	r1
   102f8:	2000      	movs	r0, #0
   102fa:	7060      	strb	r0, [r4, #1]
   102fc:	210c      	movs	r1, #12
   102fe:	7021      	strb	r1, [r4, #0]
   10300:	7120      	strb	r0, [r4, #4]
   10302:	f8a4 6005 	strh.w	r6, [r4, #5]
   10306:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
   1030a:	71e0      	strb	r0, [r4, #7]
   1030c:	4630      	mov	r0, r6
   1030e:	f7fd fa9b 	bl	d848 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   10312:	f00e fc88 	bl	1ec26 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   10316:	b160      	cbz	r0, 10332 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x5e>
   10318:	4630      	mov	r0, r6
   1031a:	f7fd fd0d 	bl	dd38 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1031e:	2100      	movs	r1, #0
   10320:	4630      	mov	r0, r6
   10322:	f7fd f8ed 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10326:	4630      	mov	r0, r6
   10328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1032c:	2101      	movs	r1, #1
   1032e:	f7fd b8e7 	b.w	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10332:	2160      	movs	r1, #96	; 0x60
   10334:	2063      	movs	r0, #99	; 0x63
   10336:	f7fc fda7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1033a:	0000      	.short	0x0000
   1033c:	200000f4 	.word	0x200000f4
   10340:	200000f8 	.word	0x200000f8

00010344 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
   10344:	b570      	push	{r4, r5, r6, lr}
   10346:	7802      	ldrb	r2, [r0, #0]
   10348:	2a00      	cmp	r2, #0
   1034a:	bf0c      	ite	eq
   1034c:	2501      	moveq	r5, #1
   1034e:	2500      	movne	r5, #0
   10350:	6840      	ldr	r0, [r0, #4]
   10352:	1d0e      	adds	r6, r1, #4
   10354:	f100 04a8 	add.w	r4, r0, #168	; 0xa8
   10358:	b13d      	cbz	r5, 1036a <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x26>
   1035a:	2300      	movs	r3, #0
   1035c:	7fa2      	ldrb	r2, [r4, #30]
   1035e:	4619      	mov	r1, r3
   10360:	4620      	mov	r0, r4
   10362:	f00f f998 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10366:	b120      	cbz	r0, 10372 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x2e>
   10368:	e005      	b.n	10376 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x32>
   1036a:	7b20      	ldrb	r0, [r4, #12]
   1036c:	f010 0f01 	tst.w	r0, #1
   10370:	d001      	beq.n	10376 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x32>
   10372:	2001      	movs	r0, #1
   10374:	bd70      	pop	{r4, r5, r6, pc}
   10376:	6830      	ldr	r0, [r6, #0]
   10378:	4a0e      	ldr	r2, [pc, #56]	; (103b4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x70>)
   1037a:	7931      	ldrb	r1, [r6, #4]
   1037c:	4010      	ands	r0, r2
   1037e:	f8c4 006e 	str.w	r0, [r4, #110]	; 0x6e
   10382:	f001 0107 	and.w	r1, r1, #7
   10386:	f8c4 1072 	str.w	r1, [r4, #114]	; 0x72
   1038a:	2000      	movs	r0, #0
   1038c:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
   10390:	b12d      	cbz	r5, 1039e <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x5a>
   10392:	2001      	movs	r0, #1
   10394:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
   10398:	2004      	movs	r0, #4
   1039a:	77a0      	strb	r0, [r4, #30]
   1039c:	e008      	b.n	103b0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x6c>
   1039e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   103a2:	1c40      	adds	r0, r0, #1
   103a4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
   103a8:	68e0      	ldr	r0, [r4, #12]
   103aa:	f040 0001 	orr.w	r0, r0, #1
   103ae:	60e0      	str	r0, [r4, #12]
   103b0:	2000      	movs	r0, #0
   103b2:	bd70      	pop	{r4, r5, r6, pc}
   103b4:	3704492f 	.word	0x3704492f

000103b8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
   103b8:	b510      	push	{r4, lr}
   103ba:	1d04      	adds	r4, r0, #4
   103bc:	f007 f9cc 	bl	17758 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   103c0:	4a03      	ldr	r2, [pc, #12]	; (103d0 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
   103c2:	f001 0107 	and.w	r1, r1, #7
   103c6:	4010      	ands	r0, r2
   103c8:	6020      	str	r0, [r4, #0]
   103ca:	6061      	str	r1, [r4, #4]
   103cc:	bd10      	pop	{r4, pc}
   103ce:	0000      	.short	0x0000
   103d0:	3704492f 	.word	0x3704492f

000103d4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
   103d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   103d8:	7803      	ldrb	r3, [r0, #0]
   103da:	4607      	mov	r7, r0
   103dc:	2b00      	cmp	r3, #0
   103de:	bf0c      	ite	eq
   103e0:	f04f 0801 	moveq.w	r8, #1
   103e4:	f04f 0800 	movne.w	r8, #0
   103e8:	687e      	ldr	r6, [r7, #4]
   103ea:	f101 0904 	add.w	r9, r1, #4
   103ee:	f106 04a8 	add.w	r4, r6, #168	; 0xa8
   103f2:	f506 75d4 	add.w	r5, r6, #424	; 0x1a8
   103f6:	f896 20c5 	ldrb.w	r2, [r6, #197]	; 0xc5
   103fa:	2107      	movs	r1, #7
   103fc:	4620      	mov	r0, r4
   103fe:	f00f f94a 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10402:	2800      	cmp	r0, #0
   10404:	bf04      	itt	eq
   10406:	2001      	moveq	r0, #1
   10408:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1040c:	f899 1004 	ldrb.w	r1, [r9, #4]
   10410:	f8d9 0000 	ldr.w	r0, [r9]
   10414:	4a16      	ldr	r2, [pc, #88]	; (10470 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x9c>)
   10416:	f001 0107 	and.w	r1, r1, #7
   1041a:	4010      	ands	r0, r2
   1041c:	f8c4 006e 	str.w	r0, [r4, #110]	; 0x6e
   10420:	2000      	movs	r0, #0
   10422:	f8c4 1072 	str.w	r1, [r4, #114]	; 0x72
   10426:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
   1042a:	7760      	strb	r0, [r4, #29]
   1042c:	f1b8 0f00 	cmp.w	r8, #0
   10430:	bf1c      	itt	ne
   10432:	6879      	ldrne	r1, [r7, #4]
   10434:	f881 016b 	strbne.w	r0, [r1, #363]	; 0x16b
   10438:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
   1043c:	f88d 1000 	strb.w	r1, [sp]
   10440:	f89d 1000 	ldrb.w	r1, [sp]
   10444:	b981      	cbnz	r1, 10468 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x94>
   10446:	8831      	ldrh	r1, [r6, #0]
   10448:	f8a5 106a 	strh.w	r1, [r5, #106]	; 0x6a
   1044c:	f885 0069 	strb.w	r0, [r5, #105]	; 0x69
   10450:	f8d9 0000 	ldr.w	r0, [r9]
   10454:	66e8      	str	r0, [r5, #108]	; 0x6c
   10456:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1045a:	6728      	str	r0, [r5, #112]	; 0x70
   1045c:	2208      	movs	r2, #8
   1045e:	4905      	ldr	r1, [pc, #20]	; (10474 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0xa0>)
   10460:	f105 0060 	add.w	r0, r5, #96	; 0x60
   10464:	f7ff fcae 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   10468:	2000      	movs	r0, #0
   1046a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1046e:	0000      	.short	0x0000
   10470:	3704492f 	.word	0x3704492f
   10474:	000203c7 	.word	0x000203c7

00010478 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
   10478:	b570      	push	{r4, r5, r6, lr}
   1047a:	6840      	ldr	r0, [r0, #4]
   1047c:	1d0c      	adds	r4, r1, #4
   1047e:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   10482:	f007 f969 	bl	17758 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10486:	4a06      	ldr	r2, [pc, #24]	; (104a0 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x28>)
   10488:	f001 0107 	and.w	r1, r1, #7
   1048c:	4010      	ands	r0, r2
   1048e:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
   10492:	4002      	ands	r2, r0
   10494:	f362 0007 	bfi	r0, r2, #0, #8
   10498:	6020      	str	r0, [r4, #0]
   1049a:	6061      	str	r1, [r4, #4]
   1049c:	bd70      	pop	{r4, r5, r6, pc}
   1049e:	0000      	.short	0x0000
   104a0:	3704492f 	.word	0x3704492f

000104a4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
   104a4:	6841      	ldr	r1, [r0, #4]
   104a6:	b082      	sub	sp, #8
   104a8:	f501 70d4 	add.w	r0, r1, #424	; 0x1a8
   104ac:	f891 2210 	ldrb.w	r2, [r1, #528]	; 0x210
   104b0:	f88d 2000 	strb.w	r2, [sp]
   104b4:	f89d 2000 	ldrb.w	r2, [sp]
   104b8:	2a00      	cmp	r2, #0
   104ba:	bf1c      	itt	ne
   104bc:	b002      	addne	sp, #8
   104be:	4770      	bxne	lr
   104c0:	8809      	ldrh	r1, [r1, #0]
   104c2:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
   104c6:	211a      	movs	r1, #26
   104c8:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
   104cc:	2208      	movs	r2, #8
   104ce:	4902      	ldr	r1, [pc, #8]	; (104d8 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>)
   104d0:	3060      	adds	r0, #96	; 0x60
   104d2:	b002      	add	sp, #8
   104d4:	f7ff bc76 	b.w	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   104d8:	000203c7 	.word	0x000203c7

000104dc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
   104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104e0:	7803      	ldrb	r3, [r0, #0]
   104e2:	460e      	mov	r6, r1
   104e4:	2b00      	cmp	r3, #0
   104e6:	bf0c      	ite	eq
   104e8:	2701      	moveq	r7, #1
   104ea:	2700      	movne	r7, #0
   104ec:	6840      	ldr	r0, [r0, #4]
   104ee:	2108      	movs	r1, #8
   104f0:	f100 04a8 	add.w	r4, r0, #168	; 0xa8
   104f4:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   104f8:	4620      	mov	r0, r4
   104fa:	f00f f8cc 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   104fe:	b978      	cbnz	r0, 10520 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x44>
   10500:	b13f      	cbz	r7, 10512 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x36>
   10502:	2300      	movs	r3, #0
   10504:	7fa2      	ldrb	r2, [r4, #30]
   10506:	4619      	mov	r1, r3
   10508:	4620      	mov	r0, r4
   1050a:	f00f f8c4 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1050e:	b120      	cbz	r0, 1051a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x3e>
   10510:	e006      	b.n	10520 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x44>
   10512:	7b20      	ldrb	r0, [r4, #12]
   10514:	f010 0f02 	tst.w	r0, #2
   10518:	d002      	beq.n	10520 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x44>
   1051a:	2001      	movs	r0, #1
   1051c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10520:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   10524:	f04f 0500 	mov.w	r5, #0
   10528:	f010 0f02 	tst.w	r0, #2
   1052c:	d11b      	bne.n	10566 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
   1052e:	4630      	mov	r0, r6
   10530:	f00f fcf9 	bl	1ff26 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
   10534:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
   10538:	f8b6 0005 	ldrh.w	r0, [r6, #5]
   1053c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
   10540:	f8b6 0007 	ldrh.w	r0, [r6, #7]
   10544:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
   10548:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   1054c:	f040 0002 	orr.w	r0, r0, #2
   10550:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
   10554:	f010 0f01 	tst.w	r0, #1
   10558:	d00a      	beq.n	10570 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x94>
   1055a:	2203      	movs	r2, #3
   1055c:	491b      	ldr	r1, [pc, #108]	; (105cc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xf0>)
   1055e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10562:	f7ff fc8b 	bl	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   10566:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   1056a:	f010 0f01 	tst.w	r0, #1
   1056e:	d124      	bne.n	105ba <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xde>
   10570:	b18f      	cbz	r7, 10596 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xba>
   10572:	2300      	movs	r3, #0
   10574:	7fa2      	ldrb	r2, [r4, #30]
   10576:	4619      	mov	r1, r3
   10578:	4620      	mov	r0, r4
   1057a:	f00f f88c 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1057e:	b130      	cbz	r0, 1058e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xb2>
   10580:	2001      	movs	r0, #1
   10582:	77a0      	strb	r0, [r4, #30]
   10584:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
   10588:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
   1058c:	e015      	b.n	105ba <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xde>
   1058e:	2148      	movs	r1, #72	; 0x48
   10590:	2040      	movs	r0, #64	; 0x40
   10592:	f7fc fc79 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10596:	68e0      	ldr	r0, [r4, #12]
   10598:	f010 0f02 	tst.w	r0, #2
   1059c:	d003      	beq.n	105a6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xca>
   1059e:	214f      	movs	r1, #79	; 0x4f
   105a0:	2040      	movs	r0, #64	; 0x40
   105a2:	f7fc fc71 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105a6:	f040 0002 	orr.w	r0, r0, #2
   105aa:	60e0      	str	r0, [r4, #12]
   105ac:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   105b0:	1c40      	adds	r0, r0, #1
   105b2:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
   105b6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
   105ba:	7f60      	ldrb	r0, [r4, #29]
   105bc:	2801      	cmp	r0, #1
   105be:	bf04      	itt	eq
   105c0:	7765      	strbeq	r5, [r4, #29]
   105c2:	f884 5058 	strbeq.w	r5, [r4, #88]	; 0x58
   105c6:	2000      	movs	r0, #0
   105c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105cc:	000203f9 	.word	0x000203f9

000105d0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
   105d0:	4907      	ldr	r1, [pc, #28]	; (105f0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
   105d2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
   105d6:	1300      	asrs	r0, r0, #12
   105d8:	7809      	ldrb	r1, [r1, #0]
   105da:	b240      	sxtb	r0, r0
   105dc:	4249      	negs	r1, r1
   105de:	b249      	sxtb	r1, r1
   105e0:	4408      	add	r0, r1
   105e2:	f300 0007 	ssat	r0, #8, r0
   105e6:	2800      	cmp	r0, #0
   105e8:	bfd8      	it	le
   105ea:	2000      	movle	r0, #0
   105ec:	b2c0      	uxtb	r0, r0
   105ee:	4770      	bx	lr
   105f0:	200000fc 	.word	0x200000fc

000105f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
   105f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105f8:	6847      	ldr	r7, [r0, #4]
   105fa:	4606      	mov	r6, r0
   105fc:	f107 0aa8 	add.w	sl, r7, #168	; 0xa8
   10600:	f7fe ffe6 	bl	f5d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
   10604:	4605      	mov	r5, r0
   10606:	6870      	ldr	r0, [r6, #4]
   10608:	f04f 0b00 	mov.w	fp, #0
   1060c:	f100 04a8 	add.w	r4, r0, #168	; 0xa8
   10610:	f880 50c1 	strb.w	r5, [r0, #193]	; 0xc1
   10614:	2d7f      	cmp	r5, #127	; 0x7f
   10616:	bf08      	it	eq
   10618:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1061c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   10620:	f8d6 9004 	ldr.w	r9, [r6, #4]
   10624:	76a0      	strb	r0, [r4, #26]
   10626:	4842      	ldr	r0, [pc, #264]	; (10730 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x13c>)
   10628:	68a1      	ldr	r1, [r4, #8]
   1062a:	6882      	ldr	r2, [r0, #8]
   1062c:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
   10630:	436b      	muls	r3, r5
   10632:	4351      	muls	r1, r2
   10634:	eb03 3121 	add.w	r1, r3, r1, asr #12
   10638:	60a1      	str	r1, [r4, #8]
   1063a:	7941      	ldrb	r1, [r0, #5]
   1063c:	2900      	cmp	r1, #0
   1063e:	d037      	beq.n	106b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xbc>
   10640:	6871      	ldr	r1, [r6, #4]
   10642:	f990 2000 	ldrsb.w	r2, [r0]
   10646:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
   1064a:	f8d1 10b0 	ldr.w	r1, [r1, #176]	; 0xb0
   1064e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
   10652:	1309      	asrs	r1, r1, #12
   10654:	b249      	sxtb	r1, r1
   10656:	4291      	cmp	r1, r2
   10658:	da07      	bge.n	1066a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x76>
   1065a:	f990 0002 	ldrsb.w	r0, [r0, #2]
   1065e:	4249      	negs	r1, r1
   10660:	b249      	sxtb	r1, r1
   10662:	4408      	add	r0, r1
   10664:	f300 0007 	ssat	r0, #8, r0
   10668:	e00a      	b.n	10680 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
   1066a:	f990 2001 	ldrsb.w	r2, [r0, #1]
   1066e:	428a      	cmp	r2, r1
   10670:	da1e      	bge.n	106b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xbc>
   10672:	f990 0003 	ldrsb.w	r0, [r0, #3]
   10676:	4249      	negs	r1, r1
   10678:	b249      	sxtb	r1, r1
   1067a:	4408      	add	r0, r1
   1067c:	f300 0007 	ssat	r0, #8, r0
   10680:	b1b0      	cbz	r0, 106b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xbc>
   10682:	e9d8 0100 	ldrd	r0, r1, [r8]
   10686:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1068a:	4051      	eors	r1, r2
   1068c:	ea71 0000 	orns	r0, r1, r0
   10690:	d00e      	beq.n	106b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xbc>
   10692:	f00b fd03 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   10696:	e9d8 2300 	ldrd	r2, r3, [r8]
   1069a:	1a80      	subs	r0, r0, r2
   1069c:	eb71 0003 	sbcs.w	r0, r1, r3
   106a0:	d306      	bcc.n	106b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xbc>
   106a2:	6870      	ldr	r0, [r6, #4]
   106a4:	2231      	movs	r2, #49	; 0x31
   106a6:	4923      	ldr	r1, [pc, #140]	; (10734 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x140>)
   106a8:	f500 701d 	add.w	r0, r0, #628	; 0x274
   106ac:	f7ff fbe6 	bl	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   106b0:	f994 001b 	ldrsb.w	r0, [r4, #27]
   106b4:	2100      	movs	r1, #0
   106b6:	1a28      	subs	r0, r5, r0
   106b8:	bf48      	it	mi
   106ba:	4240      	negmi	r0, r0
   106bc:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
   106c0:	4282      	cmp	r2, r0
   106c2:	dc10      	bgt.n	106e6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf2>
   106c4:	2aff      	cmp	r2, #255	; 0xff
   106c6:	d00e      	beq.n	106e6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf2>
   106c8:	7f20      	ldrb	r0, [r4, #28]
   106ca:	1c40      	adds	r0, r0, #1
   106cc:	b2c0      	uxtb	r0, r0
   106ce:	7720      	strb	r0, [r4, #28]
   106d0:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
   106d4:	4290      	cmp	r0, r2
   106d6:	d802      	bhi.n	106de <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xea>
   106d8:	7ee0      	ldrb	r0, [r4, #27]
   106da:	287f      	cmp	r0, #127	; 0x7f
   106dc:	d103      	bne.n	106e6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf2>
   106de:	76e5      	strb	r5, [r4, #27]
   106e0:	f884 b01c 	strb.w	fp, [r4, #28]
   106e4:	2101      	movs	r1, #1
   106e6:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
   106ea:	2801      	cmp	r0, #1
   106ec:	bf18      	it	ne
   106ee:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106f2:	2900      	cmp	r1, #0
   106f4:	bf08      	it	eq
   106f6:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106fa:	6870      	ldr	r0, [r6, #4]
   106fc:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
   10700:	f88d 1000 	strb.w	r1, [sp]
   10704:	f89d 1000 	ldrb.w	r1, [sp]
   10708:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1070c:	2900      	cmp	r1, #0
   1070e:	bf18      	it	ne
   10710:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10714:	8839      	ldrh	r1, [r7, #0]
   10716:	8141      	strh	r1, [r0, #10]
   10718:	f89a 1019 	ldrb.w	r1, [sl, #25]
   1071c:	7301      	strb	r1, [r0, #12]
   1071e:	f89a 101a 	ldrb.w	r1, [sl, #26]
   10722:	7341      	strb	r1, [r0, #13]
   10724:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10728:	221f      	movs	r2, #31
   1072a:	4903      	ldr	r1, [pc, #12]	; (10738 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x144>)
   1072c:	f7ff bb4a 	b.w	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   10730:	200000fc 	.word	0x200000fc
   10734:	0001073d 	.word	0x0001073d
   10738:	000204c5 	.word	0x000204c5
   1073c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10740:	b082      	sub	sp, #8
   10742:	2200      	movs	r2, #0
   10744:	704a      	strb	r2, [r1, #1]
   10746:	f5a0 751d 	sub.w	r5, r0, #628	; 0x274
   1074a:	700a      	strb	r2, [r1, #0]
   1074c:	f5a0 74e6 	sub.w	r4, r0, #460	; 0x1cc
   10750:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
   10754:	f010 fdd4 	bl	21300 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
   10758:	4680      	mov	r8, r0
   1075a:	68a0      	ldr	r0, [r4, #8]
   1075c:	4e2e      	ldr	r6, [pc, #184]	; (10818 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x224>)
   1075e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
   10762:	1300      	asrs	r0, r0, #12
   10764:	b241      	sxtb	r1, r0
   10766:	f996 0000 	ldrsb.w	r0, [r6]
   1076a:	4281      	cmp	r1, r0
   1076c:	da07      	bge.n	1077e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x18a>
   1076e:	f996 0002 	ldrsb.w	r0, [r6, #2]
   10772:	4249      	negs	r1, r1
   10774:	b249      	sxtb	r1, r1
   10776:	4408      	add	r0, r1
   10778:	f300 0707 	ssat	r7, #8, r0
   1077c:	e00d      	b.n	1079a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a6>
   1077e:	f996 0001 	ldrsb.w	r0, [r6, #1]
   10782:	4288      	cmp	r0, r1
   10784:	bfa4      	itt	ge
   10786:	b002      	addge	sp, #8
   10788:	e8bd 81f0 	ldmiage.w	sp!, {r4, r5, r6, r7, r8, pc}
   1078c:	f996 0003 	ldrsb.w	r0, [r6, #3]
   10790:	4249      	negs	r1, r1
   10792:	b249      	sxtb	r1, r1
   10794:	4408      	add	r0, r1
   10796:	f300 0707 	ssat	r7, #8, r0
   1079a:	2f00      	cmp	r7, #0
   1079c:	bf04      	itt	eq
   1079e:	b002      	addeq	sp, #8
   107a0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   107a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   107a8:	e9d4 0100 	ldrd	r0, r1, [r4]
   107ac:	4051      	eors	r1, r2
   107ae:	ea71 0000 	orns	r0, r1, r0
   107b2:	bf04      	itt	eq
   107b4:	b002      	addeq	sp, #8
   107b6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   107ba:	f00b fc6f 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   107be:	e9d4 2300 	ldrd	r2, r3, [r4]
   107c2:	1a80      	subs	r0, r0, r2
   107c4:	eb71 0003 	sbcs.w	r0, r1, r3
   107c8:	bf3c      	itt	cc
   107ca:	b002      	addcc	sp, #8
   107cc:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
   107d0:	8828      	ldrh	r0, [r5, #0]
   107d2:	4669      	mov	r1, sp
   107d4:	f00e ff14 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   107d8:	b118      	cbz	r0, 107e2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ee>
   107da:	2189      	movs	r1, #137	; 0x89
   107dc:	207a      	movs	r0, #122	; 0x7a
   107de:	f7fc fb53 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107e2:	f108 0001 	add.w	r0, r8, #1
   107e6:	b2c1      	uxtb	r1, r0
   107e8:	2302      	movs	r3, #2
   107ea:	463a      	mov	r2, r7
   107ec:	4668      	mov	r0, sp
   107ee:	f010 fdc8 	bl	21382 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
   107f2:	2800      	cmp	r0, #0
   107f4:	bf1c      	itt	ne
   107f6:	b002      	addne	sp, #8
   107f8:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   107fc:	7930      	ldrb	r0, [r6, #4]
   107fe:	4907      	ldr	r1, [pc, #28]	; (1081c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x228>)
   10800:	fba0 5601 	umull	r5, r6, r0, r1
   10804:	f00b fc4a 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   10808:	1940      	adds	r0, r0, r5
   1080a:	4171      	adcs	r1, r6
   1080c:	e9c4 0100 	strd	r0, r1, [r4]
   10810:	b002      	add	sp, #8
   10812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10816:	0000      	.short	0x0000
   10818:	200000fc 	.word	0x200000fc
   1081c:	000f4240 	.word	0x000f4240

00010820 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
   10820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10824:	4604      	mov	r4, r0
   10826:	7c80      	ldrb	r0, [r0, #18]
   10828:	2800      	cmp	r0, #0
   1082a:	bf16      	itet	ne
   1082c:	2802      	cmpne	r0, #2
   1082e:	2000      	moveq	r0, #0
   10830:	2001      	movne	r0, #1
   10832:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
   10836:	b318      	cbz	r0, 10880 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x60>
   10838:	7e60      	ldrb	r0, [r4, #25]
   1083a:	b368      	cbz	r0, 10898 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
   1083c:	f8d4 0013 	ldr.w	r0, [r4, #19]
   10840:	f8c4 0069 	str.w	r0, [r4, #105]	; 0x69
   10844:	f8b4 0017 	ldrh.w	r0, [r4, #23]
   10848:	f8a4 006d 	strh.w	r0, [r4, #109]	; 0x6d
   1084c:	7ca0      	ldrb	r0, [r4, #18]
   1084e:	2802      	cmp	r0, #2
   10850:	bf16      	itet	ne
   10852:	2803      	cmpne	r0, #3
   10854:	2101      	moveq	r1, #1
   10856:	2100      	movne	r1, #0
   10858:	76a1      	strb	r1, [r4, #26]
   1085a:	f04f 0008 	mov.w	r0, #8
   1085e:	76e0      	strb	r0, [r4, #27]
   10860:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   10864:	f04f 0701 	mov.w	r7, #1
   10868:	f04f 0800 	mov.w	r8, #0
   1086c:	2801      	cmp	r0, #1
   1086e:	bf04      	itt	eq
   10870:	f894 206e 	ldrbeq.w	r2, [r4, #110]	; 0x6e
   10874:	f012 0fc0 	tsteq.w	r2, #192	; 0xc0
   10878:	d01b      	beq.n	108b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
   1087a:	2801      	cmp	r0, #1
   1087c:	d011      	beq.n	108a2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
   1087e:	e016      	b.n	108ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8e>
   10880:	f104 0169 	add.w	r1, r4, #105	; 0x69
   10884:	2000      	movs	r0, #0
   10886:	f7fd faf7 	bl	de78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1088a:	2800      	cmp	r0, #0
   1088c:	d1de      	bne.n	1084c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2c>
   1088e:	f240 41b9 	movw	r1, #1209	; 0x4b9
   10892:	202d      	movs	r0, #45	; 0x2d
   10894:	f7fc faf8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10898:	f240 41bd 	movw	r1, #1213	; 0x4bd
   1089c:	202d      	movs	r0, #45	; 0x2d
   1089e:	f7fc faf3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108a2:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   108a6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   108aa:	2840      	cmp	r0, #64	; 0x40
   108ac:	d001      	beq.n	108b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x92>
   108ae:	2000      	movs	r0, #0
   108b0:	e000      	b.n	108b4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x94>
   108b2:	2001      	movs	r0, #1
   108b4:	7720      	strb	r0, [r4, #28]
   108b6:	b131      	cbz	r1, 108c6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xa6>
   108b8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   108bc:	f104 0170 	add.w	r1, r4, #112	; 0x70
   108c0:	f7fe fb02 	bl	eec8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   108c4:	76e0      	strb	r0, [r4, #27]
   108c6:	f7fe fb1d 	bl	ef04 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   108ca:	4937      	ldr	r1, [pc, #220]	; (109a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x188>)
   108cc:	fba0 6501 	umull	r6, r5, r0, r1
   108d0:	f00b fbe4 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   108d4:	1980      	adds	r0, r0, r6
   108d6:	4169      	adcs	r1, r5
   108d8:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   108dc:	2600      	movs	r6, #0
   108de:	7ee0      	ldrb	r0, [r4, #27]
   108e0:	f7fe fa86 	bl	edf0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   108e4:	4605      	mov	r5, r0
   108e6:	7ea0      	ldrb	r0, [r4, #26]
   108e8:	2800      	cmp	r0, #0
   108ea:	bf18      	it	ne
   108ec:	2d00      	cmpne	r5, #0
   108ee:	d003      	beq.n	108f8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xd8>
   108f0:	7ee0      	ldrb	r0, [r4, #27]
   108f2:	f7fe fa71 	bl	edd8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   108f6:	b158      	cbz	r0, 10910 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xf0>
   108f8:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
   108fc:	2800      	cmp	r0, #0
   108fe:	bf1c      	itt	ne
   10900:	7f20      	ldrbne	r0, [r4, #28]
   10902:	2800      	cmpne	r0, #0
   10904:	d01d      	beq.n	10942 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
   10906:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   1090a:	2801      	cmp	r0, #1
   1090c:	d00e      	beq.n	1092c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10c>
   1090e:	e013      	b.n	10938 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x118>
   10910:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
   10914:	4632      	mov	r2, r6
   10916:	f104 0169 	add.w	r1, r4, #105	; 0x69
   1091a:	4628      	mov	r0, r5
   1091c:	f00e fe08 	bl	1f530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   10920:	7ee1      	ldrb	r1, [r4, #27]
   10922:	f104 0069 	add.w	r0, r4, #105	; 0x69
   10926:	f7fe fa6f 	bl	ee08 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   1092a:	e00a      	b.n	10942 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
   1092c:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   10930:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   10934:	2840      	cmp	r0, #64	; 0x40
   10936:	d02f      	beq.n	10998 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x178>
   10938:	4641      	mov	r1, r8
   1093a:	f104 0069 	add.w	r0, r4, #105	; 0x69
   1093e:	f00e fde6 	bl	1f50e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   10942:	f884 8076 	strb.w	r8, [r4, #118]	; 0x76
   10946:	78a0      	ldrb	r0, [r4, #2]
   10948:	f010 0f04 	tst.w	r0, #4
   1094c:	bf08      	it	eq
   1094e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10952:	2600      	movs	r6, #0
   10954:	7ee0      	ldrb	r0, [r4, #27]
   10956:	f7fe fa65 	bl	ee24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   1095a:	0005      	movs	r5, r0
   1095c:	bf08      	it	eq
   1095e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   10962:	2110      	movs	r1, #16
   10964:	f7fe fdfe 	bl	f564 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   10968:	2800      	cmp	r0, #0
   1096a:	bf18      	it	ne
   1096c:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   10970:	f884 7076 	strb.w	r7, [r4, #118]	; 0x76
   10974:	4632      	mov	r2, r6
   10976:	f104 0177 	add.w	r1, r4, #119	; 0x77
   1097a:	4628      	mov	r0, r5
   1097c:	f00e fdd8 	bl	1f530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   10980:	f104 0177 	add.w	r1, r4, #119	; 0x77
   10984:	4c09      	ldr	r4, [pc, #36]	; (109ac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x18c>)
   10986:	68a0      	ldr	r0, [r4, #8]
   10988:	f00f f98d 	bl	1fca6 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   1098c:	68a0      	ldr	r0, [r4, #8]
   1098e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10992:	2101      	movs	r1, #1
   10994:	f00f b98e 	b.w	1fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   10998:	f7fe fa1a 	bl	edd0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   1099c:	4632      	mov	r2, r6
   1099e:	f104 0169 	add.w	r1, r4, #105	; 0x69
   109a2:	f00e fdc5 	bl	1f530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   109a6:	e7cc      	b.n	10942 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x122>
   109a8:	000f4240 	.word	0x000f4240
   109ac:	20000108 	.word	0x20000108

000109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
   109b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109b2:	4604      	mov	r4, r0
   109b4:	460d      	mov	r5, r1
   109b6:	3030      	adds	r0, #48	; 0x30
   109b8:	f00f ff5b 	bl	20872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   109bc:	f8b4 c002 	ldrh.w	ip, [r4, #2]
   109c0:	f3cc 1100 	ubfx	r1, ip, #4, #1
   109c4:	b129      	cbz	r1, 109d2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x22>
   109c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   109ca:	2228      	movs	r2, #40	; 0x28
   109cc:	4661      	mov	r1, ip
   109ce:	f002 bccd 	b.w	1336c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   109d2:	f3cc 0140 	ubfx	r1, ip, #1, #1
   109d6:	2900      	cmp	r1, #0
   109d8:	bf14      	ite	ne
   109da:	f8b4 605c 	ldrhne.w	r6, [r4, #92]	; 0x5c
   109de:	f8b4 6054 	ldrheq.w	r6, [r4, #84]	; 0x54
   109e2:	7921      	ldrb	r1, [r4, #4]
   109e4:	4a1d      	ldr	r2, [pc, #116]	; (10a5c <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xac>)
   109e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   109ea:	2908      	cmp	r1, #8
   109ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   109f0:	f202 32e7 	addw	r2, r2, #999	; 0x3e7
   109f4:	fbb2 f7f3 	udiv	r7, r2, r3
   109f8:	bf08      	it	eq
   109fa:	2340      	moveq	r3, #64	; 0x40
   109fc:	d00a      	beq.n	10a14 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x64>
   109fe:	2904      	cmp	r1, #4
   10a00:	bf08      	it	eq
   10a02:	2310      	moveq	r3, #16
   10a04:	d006      	beq.n	10a14 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x64>
   10a06:	2902      	cmp	r1, #2
   10a08:	bf07      	ittee	eq
   10a0a:	2304      	moveq	r3, #4
   10a0c:	2212      	moveq	r2, #18
   10a0e:	2308      	movne	r3, #8
   10a10:	2219      	movne	r2, #25
   10a12:	e000      	b.n	10a16 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x66>
   10a14:	2214      	movs	r2, #20
   10a16:	fb13 f202 	smulbb	r2, r3, r2
   10a1a:	2908      	cmp	r1, #8
   10a1c:	bf08      	it	eq
   10a1e:	2340      	moveq	r3, #64	; 0x40
   10a20:	d019      	beq.n	10a56 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa6>
   10a22:	2904      	cmp	r1, #4
   10a24:	bf08      	it	eq
   10a26:	232e      	moveq	r3, #46	; 0x2e
   10a28:	d015      	beq.n	10a56 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0xa6>
   10a2a:	2300      	movs	r3, #0
   10a2c:	2902      	cmp	r1, #2
   10a2e:	bf0c      	ite	eq
   10a30:	2118      	moveq	r1, #24
   10a32:	2128      	movne	r1, #40	; 0x28
   10a34:	4419      	add	r1, r3
   10a36:	4411      	add	r1, r2
   10a38:	fb11 7100 	smlabb	r1, r1, r0, r7
   10a3c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   10a40:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   10a44:	4401      	add	r1, r0
   10a46:	f8cd c000 	str.w	ip, [sp]
   10a4a:	7962      	ldrb	r2, [r4, #5]
   10a4c:	462b      	mov	r3, r5
   10a4e:	4630      	mov	r0, r6
   10a50:	f001 ff62 	bl	12918 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdb8>
   10a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a56:	f44f 71a8 	mov.w	r1, #336	; 0x150
   10a5a:	e7eb      	b.n	10a34 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY+0x84>
   10a5c:	00013308 	.word	0x00013308

00010a60 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
   10a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a64:	4680      	mov	r8, r0
   10a66:	b08f      	sub	sp, #60	; 0x3c
   10a68:	460c      	mov	r4, r1
   10a6a:	69c2      	ldr	r2, [r0, #28]
   10a6c:	e9d8 0105 	ldrd	r0, r1, [r8, #20]
   10a70:	e9d8 7600 	ldrd	r7, r6, [r8]
   10a74:	e9d8 a903 	ldrd	sl, r9, [r8, #12]
   10a78:	9205      	str	r2, [sp, #20]
   10a7a:	e9cd 0103 	strd	r0, r1, [sp, #12]
   10a7e:	e9d8 0108 	ldrd	r0, r1, [r8, #32]
   10a82:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
   10a86:	e9cd 0106 	strd	r0, r1, [sp, #24]
   10a8a:	9208      	str	r2, [sp, #32]
   10a8c:	a801      	add	r0, sp, #4
   10a8e:	f00f ff99 	bl	209c4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   10a92:	7aa0      	ldrb	r0, [r4, #10]
   10a94:	f360 4917 	bfi	r9, r0, #16, #8
   10a98:	7820      	ldrb	r0, [r4, #0]
   10a9a:	f360 0707 	bfi	r7, r0, #0, #8
   10a9e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10aa2:	f8ad 0000 	strh.w	r0, [sp]
   10aa6:	f89d 0000 	ldrb.w	r0, [sp]
   10aaa:	f000 0101 	and.w	r1, r0, #1
   10aae:	f3c0 0240 	ubfx	r2, r0, #1, #1
   10ab2:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   10ab6:	f3c0 0280 	ubfx	r2, r0, #2, #1
   10aba:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
   10abe:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   10ac2:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
   10ac6:	f3c0 1200 	ubfx	r2, r0, #4, #1
   10aca:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   10ace:	f3c0 1240 	ubfx	r2, r0, #5, #1
   10ad2:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
   10ad6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   10ada:	ea41 1b80 	orr.w	fp, r1, r0, lsl #6
   10ade:	7d20      	ldrb	r0, [r4, #20]
   10ae0:	f36b 471f 	bfi	r7, fp, #16, #16
   10ae4:	2801      	cmp	r0, #1
   10ae6:	bf18      	it	ne
   10ae8:	2802      	cmpne	r0, #2
   10aea:	d003      	beq.n	10af4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x94>
   10aec:	2803      	cmp	r0, #3
   10aee:	bf08      	it	eq
   10af0:	2008      	moveq	r0, #8
   10af2:	d10e      	bne.n	10b12 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xb2>
   10af4:	7861      	ldrb	r1, [r4, #1]
   10af6:	f360 0607 	bfi	r6, r0, #0, #8
   10afa:	f011 0f10 	tst.w	r1, #16
   10afe:	d10f      	bne.n	10b20 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc0>
   10b00:	7da1      	ldrb	r1, [r4, #22]
   10b02:	2901      	cmp	r1, #1
   10b04:	bf18      	it	ne
   10b06:	2902      	cmpne	r1, #2
   10b08:	d008      	beq.n	10b1c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
   10b0a:	2903      	cmp	r1, #3
   10b0c:	bf08      	it	eq
   10b0e:	2108      	moveq	r1, #8
   10b10:	d004      	beq.n	10b1c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xbc>
   10b12:	f240 21ea 	movw	r1, #746	; 0x2ea
   10b16:	2006      	movs	r0, #6
   10b18:	f7fc f9b6 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b1c:	f361 260f 	bfi	r6, r1, #8, #8
   10b20:	f3ca 4107 	ubfx	r1, sl, #16, #8
   10b24:	2901      	cmp	r1, #1
   10b26:	d008      	beq.n	10b3a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xda>
   10b28:	7a61      	ldrb	r1, [r4, #9]
   10b2a:	a801      	add	r0, sp, #4
   10b2c:	f00f ff25 	bl	2097a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
   10b30:	7d20      	ldrb	r0, [r4, #20]
   10b32:	2101      	movs	r1, #1
   10b34:	2802      	cmp	r0, #2
   10b36:	d10f      	bne.n	10b58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf8>
   10b38:	e00b      	b.n	10b52 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf2>
   10b3a:	2104      	movs	r1, #4
   10b3c:	2808      	cmp	r0, #8
   10b3e:	bf08      	it	eq
   10b40:	f361 0607 	bfieq	r6, r1, #0, #8
   10b44:	f3c6 2007 	ubfx	r0, r6, #8, #8
   10b48:	2808      	cmp	r0, #8
   10b4a:	bf08      	it	eq
   10b4c:	f361 260f 	bfieq	r6, r1, #8, #8
   10b50:	e7ea      	b.n	10b28 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xc8>
   10b52:	7d60      	ldrb	r0, [r4, #21]
   10b54:	1c40      	adds	r0, r0, #1
   10b56:	b2c1      	uxtb	r1, r0
   10b58:	7ea0      	ldrb	r0, [r4, #26]
   10b5a:	1c40      	adds	r0, r0, #1
   10b5c:	b2c2      	uxtb	r2, r0
   10b5e:	a801      	add	r0, sp, #4
   10b60:	f00f fe70 	bl	20844 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
   10b64:	0c38      	lsrs	r0, r7, #16
   10b66:	f010 0f08 	tst.w	r0, #8
   10b6a:	f04f 0500 	mov.w	r5, #0
   10b6e:	d124      	bne.n	10bba <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15a>
   10b70:	a801      	add	r0, sp, #4
   10b72:	f00f fe7e 	bl	20872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   10b76:	7861      	ldrb	r1, [r4, #1]
   10b78:	f011 0f10 	tst.w	r1, #16
   10b7c:	d07f      	beq.n	10c7e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x21e>
   10b7e:	2228      	movs	r2, #40	; 0x28
   10b80:	4659      	mov	r1, fp
   10b82:	f002 fbf3 	bl	1336c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   10b86:	bf00      	nop
   10b88:	f240 2171 	movw	r1, #625	; 0x271
   10b8c:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
   10b90:	fbb0 f0f1 	udiv	r0, r0, r1
   10b94:	fb00 f501 	mul.w	r5, r0, r1
   10b98:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10b9c:	f240 2271 	movw	r2, #625	; 0x271
   10ba0:	0a00      	lsrs	r0, r0, #8
   10ba2:	4341      	muls	r1, r0
   10ba4:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10ba8:	0a00      	lsrs	r0, r0, #8
   10baa:	4350      	muls	r0, r2
   10bac:	428d      	cmp	r5, r1
   10bae:	bf98      	it	ls
   10bb0:	460d      	movls	r5, r1
   10bb2:	d902      	bls.n	10bba <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x15a>
   10bb4:	4285      	cmp	r5, r0
   10bb6:	bf88      	it	hi
   10bb8:	4605      	movhi	r5, r0
   10bba:	7ca0      	ldrb	r0, [r4, #18]
   10bbc:	f360 290f 	bfi	r9, r0, #8, #8
   10bc0:	7e20      	ldrb	r0, [r4, #24]
   10bc2:	2801      	cmp	r0, #1
   10bc4:	bf18      	it	ne
   10bc6:	2000      	movne	r0, #0
   10bc8:	f360 0a07 	bfi	sl, r0, #0, #8
   10bcc:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
   10bd0:	f00e fb6e 	bl	1f2b0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
   10bd4:	4683      	mov	fp, r0
   10bd6:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
   10bda:	f00e fc15 	bl	1f408 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
   10bde:	4583      	cmp	fp, r0
   10be0:	bf28      	it	cs
   10be2:	4658      	movcs	r0, fp
   10be4:	b198      	cbz	r0, 10c0e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x1ae>
   10be6:	a901      	add	r1, sp, #4
   10be8:	910a      	str	r1, [sp, #40]	; 0x28
   10bea:	0c39      	lsrs	r1, r7, #16
   10bec:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   10bf0:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
   10bf4:	0a31      	lsrs	r1, r6, #8
   10bf6:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
   10bfa:	950c      	str	r5, [sp, #48]	; 0x30
   10bfc:	a90a      	add	r1, sp, #40	; 0x28
   10bfe:	f002 f8d5 	bl	12dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124c>
   10c02:	2800      	cmp	r0, #0
   10c04:	bf02      	ittt	eq
   10c06:	2045      	moveq	r0, #69	; 0x45
   10c08:	b00f      	addeq	sp, #60	; 0x3c
   10c0a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c0e:	f8c8 a00c 	str.w	sl, [r8, #12]
   10c12:	f8c8 7000 	str.w	r7, [r8]
   10c16:	e9c8 6501 	strd	r6, r5, [r8, #4]
   10c1a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   10c1e:	9a05      	ldr	r2, [sp, #20]
   10c20:	f8c8 9010 	str.w	r9, [r8, #16]
   10c24:	f8c8 201c 	str.w	r2, [r8, #28]
   10c28:	e9c8 0105 	strd	r0, r1, [r8, #20]
   10c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10c30:	9a08      	ldr	r2, [sp, #32]
   10c32:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
   10c36:	e9c8 0108 	strd	r0, r1, [r8, #32]
   10c3a:	9801      	ldr	r0, [sp, #4]
   10c3c:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
   10c40:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   10c44:	f8a8 0034 	strh.w	r0, [r8, #52]	; 0x34
   10c48:	7ae0      	ldrb	r0, [r4, #11]
   10c4a:	2800      	cmp	r0, #0
   10c4c:	bf16      	itet	ne
   10c4e:	2802      	cmpne	r0, #2
   10c50:	2000      	moveq	r0, #0
   10c52:	2001      	movne	r0, #1
   10c54:	f888 006f 	strb.w	r0, [r8, #111]	; 0x6f
   10c58:	68e0      	ldr	r0, [r4, #12]
   10c5a:	f8c8 0070 	str.w	r0, [r8, #112]	; 0x70
   10c5e:	8a20      	ldrh	r0, [r4, #16]
   10c60:	f8a8 0074 	strh.w	r0, [r8, #116]	; 0x74
   10c64:	7de0      	ldrb	r0, [r4, #23]
   10c66:	f898 1046 	ldrb.w	r1, [r8, #70]	; 0x46
   10c6a:	f360 1107 	bfi	r1, r0, #4, #4
   10c6e:	f888 1046 	strb.w	r1, [r8, #70]	; 0x46
   10c72:	b00f      	add	sp, #60	; 0x3c
   10c74:	f04f 0000 	mov.w	r0, #0
   10c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c7c:	e7ff      	b.n	10c7e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x21e>
   10c7e:	4603      	mov	r3, r0
   10c80:	b2f0      	uxtb	r0, r6
   10c82:	4921      	ldr	r1, [pc, #132]	; (10d08 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a8>)
   10c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c88:	2808      	cmp	r0, #8
   10c8a:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
   10c8e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   10c92:	fbb1 f2f2 	udiv	r2, r1, r2
   10c96:	bf08      	it	eq
   10c98:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   10c9c:	d00d      	beq.n	10cba <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25a>
   10c9e:	2804      	cmp	r0, #4
   10ca0:	bf08      	it	eq
   10ca2:	f04f 0c10 	moveq.w	ip, #16
   10ca6:	d008      	beq.n	10cba <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25a>
   10ca8:	2802      	cmp	r0, #2
   10caa:	bf07      	ittee	eq
   10cac:	f04f 0c04 	moveq.w	ip, #4
   10cb0:	2112      	moveq	r1, #18
   10cb2:	f04f 0c08 	movne.w	ip, #8
   10cb6:	2119      	movne	r1, #25
   10cb8:	e000      	b.n	10cbc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x25c>
   10cba:	2114      	movs	r1, #20
   10cbc:	fb1c f101 	smulbb	r1, ip, r1
   10cc0:	2808      	cmp	r0, #8
   10cc2:	bf08      	it	eq
   10cc4:	2540      	moveq	r5, #64	; 0x40
   10cc6:	d01b      	beq.n	10d00 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a0>
   10cc8:	2804      	cmp	r0, #4
   10cca:	bf08      	it	eq
   10ccc:	252e      	moveq	r5, #46	; 0x2e
   10cce:	d017      	beq.n	10d00 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x2a0>
   10cd0:	2802      	cmp	r0, #2
   10cd2:	bf0c      	ite	eq
   10cd4:	2018      	moveq	r0, #24
   10cd6:	2028      	movne	r0, #40	; 0x28
   10cd8:	4428      	add	r0, r5
   10cda:	4408      	add	r0, r1
   10cdc:	fb10 2003 	smlabb	r0, r0, r3, r2
   10ce0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10ce4:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
   10ce8:	1845      	adds	r5, r0, r1
   10cea:	f7fc fe95 	bl	da18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10cee:	0c39      	lsrs	r1, r7, #16
   10cf0:	9100      	str	r1, [sp, #0]
   10cf2:	f3c6 2207 	ubfx	r2, r6, #8, #8
   10cf6:	2301      	movs	r3, #1
   10cf8:	4629      	mov	r1, r5
   10cfa:	f001 fe0d 	bl	12918 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdb8>
   10cfe:	e743      	b.n	10b88 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x128>
   10d00:	f44f 70a8 	mov.w	r0, #336	; 0x150
   10d04:	e7e8      	b.n	10cd8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x278>
   10d06:	0000      	.short	0x0000
   10d08:	00013308 	.word	0x00013308

00010d0c <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI>:
   10d0c:	4902      	ldr	r1, [pc, #8]	; (10d18 <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI+0xc>)
   10d0e:	4801      	ldr	r0, [pc, #4]	; (10d14 <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI+0x8>)
   10d10:	60c8      	str	r0, [r1, #12]
   10d12:	4770      	bx	lr
   10d14:	00013354 	.word	0x00013354
   10d18:	20000108 	.word	0x20000108

00010d1c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
   10d1c:	4a11      	ldr	r2, [pc, #68]	; (10d64 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x48>)
   10d1e:	b510      	push	{r4, lr}
   10d20:	2100      	movs	r1, #0
   10d22:	7011      	strb	r1, [r2, #0]
   10d24:	4c10      	ldr	r4, [pc, #64]	; (10d68 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x4c>)
   10d26:	60a0      	str	r0, [r4, #8]
   10d28:	7810      	ldrb	r0, [r2, #0]
   10d2a:	b120      	cbz	r0, 10d36 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x1a>
   10d2c:	f240 312d 	movw	r1, #813	; 0x32d
   10d30:	202d      	movs	r0, #45	; 0x2d
   10d32:	f7fc f8a9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d36:	6011      	str	r1, [r2, #0]
   10d38:	6051      	str	r1, [r2, #4]
   10d3a:	6091      	str	r1, [r2, #8]
   10d3c:	60d1      	str	r1, [r2, #12]
   10d3e:	6111      	str	r1, [r2, #16]
   10d40:	6151      	str	r1, [r2, #20]
   10d42:	6191      	str	r1, [r2, #24]
   10d44:	61d1      	str	r1, [r2, #28]
   10d46:	6211      	str	r1, [r2, #32]
   10d48:	f006 ffaa 	bl	17ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   10d4c:	f006 fd5a 	bl	17804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   10d50:	68e0      	ldr	r0, [r4, #12]
   10d52:	2800      	cmp	r0, #0
   10d54:	bf18      	it	ne
   10d56:	bd10      	popne	{r4, pc}
   10d58:	f44f 714c 	mov.w	r1, #816	; 0x330
   10d5c:	202d      	movs	r0, #45	; 0x2d
   10d5e:	f7fc f893 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10d62:	0000      	.short	0x0000
   10d64:	2000115c 	.word	0x2000115c
   10d68:	20000108 	.word	0x20000108

00010d6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
   10d6c:	4902      	ldr	r1, [pc, #8]	; (10d78 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
   10d6e:	6048      	str	r0, [r1, #4]
   10d70:	68c9      	ldr	r1, [r1, #12]
   10d72:	6809      	ldr	r1, [r1, #0]
   10d74:	4708      	bx	r1
   10d76:	0000      	.short	0x0000
   10d78:	20000108 	.word	0x20000108

00010d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
   10d7c:	490b      	ldr	r1, [pc, #44]	; (10dac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x30>)
   10d7e:	b510      	push	{r4, lr}
   10d80:	7808      	ldrb	r0, [r1, #0]
   10d82:	2800      	cmp	r0, #0
   10d84:	bf18      	it	ne
   10d86:	240c      	movne	r4, #12
   10d88:	d001      	beq.n	10d8e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x12>
   10d8a:	4620      	mov	r0, r4
   10d8c:	bd10      	pop	{r4, pc}
   10d8e:	2400      	movs	r4, #0
   10d90:	600c      	str	r4, [r1, #0]
   10d92:	604c      	str	r4, [r1, #4]
   10d94:	608c      	str	r4, [r1, #8]
   10d96:	60cc      	str	r4, [r1, #12]
   10d98:	610c      	str	r4, [r1, #16]
   10d9a:	614c      	str	r4, [r1, #20]
   10d9c:	618c      	str	r4, [r1, #24]
   10d9e:	61cc      	str	r4, [r1, #28]
   10da0:	620c      	str	r4, [r1, #32]
   10da2:	f006 ff7d 	bl	17ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   10da6:	f006 fd2d 	bl	17804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   10daa:	e7ee      	b.n	10d8a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
   10dac:	2000115c 	.word	0x2000115c

00010db0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
   10db0:	4905      	ldr	r1, [pc, #20]	; (10dc8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x18>)
   10db2:	b510      	push	{r4, lr}
   10db4:	7809      	ldrb	r1, [r1, #0]
   10db6:	2901      	cmp	r1, #1
   10db8:	bf1c      	itt	ne
   10dba:	2000      	movne	r0, #0
   10dbc:	bd10      	popne	{r4, pc}
   10dbe:	f001 ff8b 	bl	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   10dc2:	2000      	movs	r0, #0
   10dc4:	bd10      	pop	{r4, pc}
   10dc6:	0000      	.short	0x0000
   10dc8:	2000115c 	.word	0x2000115c

00010dcc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
   10dcc:	4904      	ldr	r1, [pc, #16]	; (10de0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
   10dce:	4803      	ldr	r0, [pc, #12]	; (10ddc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
   10dd0:	6008      	str	r0, [r1, #0]
   10dd2:	4905      	ldr	r1, [pc, #20]	; (10de8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
   10dd4:	4803      	ldr	r0, [pc, #12]	; (10de4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
   10dd6:	6008      	str	r0, [r1, #0]
   10dd8:	4770      	bx	lr
   10dda:	0000      	.short	0x0000
   10ddc:	000130f5 	.word	0x000130f5
   10de0:	2000011c 	.word	0x2000011c
   10de4:	00012f79 	.word	0x00012f79
   10de8:	20000118 	.word	0x20000118

00010dec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
   10dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10df0:	4604      	mov	r4, r0
   10df2:	7880      	ldrb	r0, [r0, #2]
   10df4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   10df8:	b158      	cbz	r0, 10e12 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x26>
   10dfa:	233c      	movs	r3, #60	; 0x3c
   10dfc:	22ff      	movs	r2, #255	; 0xff
   10dfe:	4620      	mov	r0, r4
   10e00:	6a21      	ldr	r1, [r4, #32]
   10e02:	f002 f83f 	bl	12e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1324>
   10e06:	2211      	movs	r2, #17
   10e08:	491e      	ldr	r1, [pc, #120]	; (10e84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x98>)
   10e0a:	f104 0086 	add.w	r0, r4, #134	; 0x86
   10e0e:	f7fe ffd9 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   10e12:	78a0      	ldrb	r0, [r4, #2]
   10e14:	f04f 0500 	mov.w	r5, #0
   10e18:	f010 0f01 	tst.w	r0, #1
   10e1c:	d020      	beq.n	10e60 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
   10e1e:	6a20      	ldr	r0, [r4, #32]
   10e20:	263c      	movs	r6, #60	; 0x3c
   10e22:	8807      	ldrh	r7, [r0, #0]
   10e24:	f006 fc16 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   10e28:	b9a8      	cbnz	r0, 10e56 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6a>
   10e2a:	7821      	ldrb	r1, [r4, #0]
   10e2c:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   10e30:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   10e34:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   10e38:	7b60      	ldrb	r0, [r4, #13]
   10e3a:	b910      	cbnz	r0, 10e42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x56>
   10e3c:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
   10e40:	e003      	b.n	10e4a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5e>
   10e42:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   10e46:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
   10e4a:	2216      	movs	r2, #22
   10e4c:	490e      	ldr	r1, [pc, #56]	; (10e88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x9c>)
   10e4e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10e52:	f7fe ffb7 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   10e56:	2001      	movs	r0, #1
   10e58:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
   10e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e60:	f64f 77ff 	movw	r7, #65535	; 0xffff
   10e64:	263c      	movs	r6, #60	; 0x3c
   10e66:	f006 fbf5 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   10e6a:	2800      	cmp	r0, #0
   10e6c:	d1f3      	bne.n	10e56 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6a>
   10e6e:	7821      	ldrb	r1, [r4, #0]
   10e70:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   10e74:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   10e78:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   10e7c:	7b60      	ldrb	r0, [r4, #13]
   10e7e:	2800      	cmp	r0, #0
   10e80:	d1df      	bne.n	10e42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x56>
   10e82:	e7db      	b.n	10e3c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x50>
   10e84:	000207c1 	.word	0x000207c1
   10e88:	00020759 	.word	0x00020759
   10e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10e90:	000d      	movs	r5, r1
   10e92:	4604      	mov	r4, r0
   10e94:	d016      	beq.n	10ec4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd8>
   10e96:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10e9a:	f00f fd70 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   10e9e:	b938      	cbnz	r0, 10eb0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc4>
   10ea0:	78a0      	ldrb	r0, [r4, #2]
   10ea2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   10ea6:	b188      	cbz	r0, 10ecc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xe0>
   10ea8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10eac:	f00f fd92 	bl	209d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   10eb0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10eb4:	f00f fd1e 	bl	208f4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   10eb8:	f007 fe5e 	bl	18b78 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   10ebc:	7921      	ldrb	r1, [r4, #4]
   10ebe:	2025      	movs	r0, #37	; 0x25
   10ec0:	f007 fe26 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   10ec4:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
   10ec8:	b94d      	cbnz	r5, 10ede <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
   10eca:	e004      	b.n	10ed6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xea>
   10ecc:	4620      	mov	r0, r4
   10ece:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ed2:	f001 bf01 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   10ed6:	2200      	movs	r2, #0
   10ed8:	4620      	mov	r0, r4
   10eda:	f001 f8ad 	bl	12038 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
   10ede:	4e2e      	ldr	r6, [pc, #184]	; (10f98 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1ac>)
   10ee0:	68b0      	ldr	r0, [r6, #8]
   10ee2:	78c1      	ldrb	r1, [r0, #3]
   10ee4:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   10ee8:	bf14      	ite	ne
   10eea:	2201      	movne	r2, #1
   10eec:	2200      	moveq	r2, #0
   10eee:	7901      	ldrb	r1, [r0, #4]
   10ef0:	f011 0110 	ands.w	r1, r1, #16
   10ef4:	bf18      	it	ne
   10ef6:	2101      	movne	r1, #1
   10ef8:	4211      	tst	r1, r2
   10efa:	d014      	beq.n	10f26 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13a>
   10efc:	f00e fe3f 	bl	1fb7e <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>
   10f00:	4607      	mov	r7, r0
   10f02:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10f06:	f00f fd3a 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   10f0a:	1c40      	adds	r0, r0, #1
   10f0c:	b2c2      	uxtb	r2, r0
   10f0e:	4620      	mov	r0, r4
   10f10:	7921      	ldrb	r1, [r4, #4]
   10f12:	463b      	mov	r3, r7
   10f14:	f001 fc8c 	bl	12830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd0>
   10f18:	9000      	str	r0, [sp, #0]
   10f1a:	2303      	movs	r3, #3
   10f1c:	2204      	movs	r2, #4
   10f1e:	4669      	mov	r1, sp
   10f20:	68b0      	ldr	r0, [r6, #8]
   10f22:	f00e fe09 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   10f26:	4f1d      	ldr	r7, [pc, #116]	; (10f9c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b0>)
   10f28:	b34d      	cbz	r5, 10f7e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x192>
   10f2a:	68bd      	ldr	r5, [r7, #8]
   10f2c:	68b0      	ldr	r0, [r6, #8]
   10f2e:	f00e fe26 	bl	1fb7e <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>
   10f32:	4680      	mov	r8, r0
   10f34:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10f38:	f00f fc9b 	bl	20872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   10f3c:	4681      	mov	r9, r0
   10f3e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10f42:	f00f fd1c 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   10f46:	eba9 0000 	sub.w	r0, r9, r0
   10f4a:	1e40      	subs	r0, r0, #1
   10f4c:	b2c1      	uxtb	r1, r0
   10f4e:	7920      	ldrb	r0, [r4, #4]
   10f50:	4642      	mov	r2, r8
   10f52:	f00f fd44 	bl	209de <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA>
   10f56:	4405      	add	r5, r0
   10f58:	78a0      	ldrb	r0, [r4, #2]
   10f5a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   10f5e:	b140      	cbz	r0, 10f72 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x186>
   10f60:	6878      	ldr	r0, [r7, #4]
   10f62:	2101      	movs	r1, #1
   10f64:	4405      	add	r5, r0
   10f66:	4620      	mov	r0, r4
   10f68:	f7ff fd22 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   10f6c:	4428      	add	r0, r5
   10f6e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
   10f72:	7922      	ldrb	r2, [r4, #4]
   10f74:	4629      	mov	r1, r5
   10f76:	2000      	movs	r0, #0
   10f78:	f007 fbb4 	bl	186e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   10f7c:	b130      	cbz	r0, 10f8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1a0>
   10f7e:	68b0      	ldr	r0, [r6, #8]
   10f80:	f007 fb62 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   10f84:	2006      	movs	r0, #6
   10f86:	7038      	strb	r0, [r7, #0]
   10f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10f8c:	f640 51d8 	movw	r1, #3544	; 0xdd8
   10f90:	202d      	movs	r0, #45	; 0x2d
   10f92:	f7fb ff79 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10f96:	0000      	.short	0x0000
   10f98:	20000108 	.word	0x20000108
   10f9c:	2000115c 	.word	0x2000115c
   10fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fa4:	4e73      	ldr	r6, [pc, #460]	; (11174 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x388>)
   10fa6:	000f      	movs	r7, r1
   10fa8:	4604      	mov	r4, r0
   10faa:	d027      	beq.n	10ffc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x210>
   10fac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10fb0:	f00f fce5 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   10fb4:	b9c0      	cbnz	r0, 10fe8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fc>
   10fb6:	78a0      	ldrb	r0, [r4, #2]
   10fb8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   10fbc:	2800      	cmp	r0, #0
   10fbe:	d038      	beq.n	11032 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x246>
   10fc0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10fc4:	f00f fc55 	bl	20872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   10fc8:	4605      	mov	r5, r0
   10fca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10fce:	f00f fcd6 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   10fd2:	1a28      	subs	r0, r5, r0
   10fd4:	b2c0      	uxtb	r0, r0
   10fd6:	f00f fd1d 	bl	20a14 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   10fda:	6871      	ldr	r1, [r6, #4]
   10fdc:	4408      	add	r0, r1
   10fde:	6070      	str	r0, [r6, #4]
   10fe0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10fe4:	f00f fcf6 	bl	209d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   10fe8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10fec:	f00f fc82 	bl	208f4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   10ff0:	f007 fdc2 	bl	18b78 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   10ff4:	7921      	ldrb	r1, [r4, #4]
   10ff6:	2025      	movs	r0, #37	; 0x25
   10ff8:	f007 fd8a 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   10ffc:	4d5e      	ldr	r5, [pc, #376]	; (11178 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x38c>)
   10ffe:	f894 8076 	ldrb.w	r8, [r4, #118]	; 0x76
   11002:	2100      	movs	r1, #0
   11004:	68a8      	ldr	r0, [r5, #8]
   11006:	8001      	strh	r1, [r0, #0]
   11008:	7801      	ldrb	r1, [r0, #0]
   1100a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   1100e:	7001      	strb	r1, [r0, #0]
   11010:	8861      	ldrh	r1, [r4, #2]
   11012:	2913      	cmp	r1, #19
   11014:	d02d      	beq.n	11072 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x286>
   11016:	dc11      	bgt.n	1103c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x250>
   11018:	2910      	cmp	r1, #16
   1101a:	bf08      	it	eq
   1101c:	2102      	moveq	r1, #2
   1101e:	d03d      	beq.n	1109c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b0>
   11020:	2912      	cmp	r1, #18
   11022:	bf08      	it	eq
   11024:	2106      	moveq	r1, #6
   11026:	d039      	beq.n	1109c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b0>
   11028:	f240 6172 	movw	r1, #1650	; 0x672
   1102c:	202d      	movs	r0, #45	; 0x2d
   1102e:	f7fb ff2b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11032:	4620      	mov	r0, r4
   11034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11038:	f001 be4e 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   1103c:	2915      	cmp	r1, #21
   1103e:	bf18      	it	ne
   11040:	291d      	cmpne	r1, #29
   11042:	d1f1      	bne.n	11028 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x23c>
   11044:	f04f 0101 	mov.w	r1, #1
   11048:	f00e fe0b 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   1104c:	68a8      	ldr	r0, [r5, #8]
   1104e:	f1b8 0f00 	cmp.w	r8, #0
   11052:	7801      	ldrb	r1, [r0, #0]
   11054:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   11058:	f041 0120 	orr.w	r1, r1, #32
   1105c:	7001      	strb	r1, [r0, #0]
   1105e:	d013      	beq.n	11088 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29c>
   11060:	f104 0177 	add.w	r1, r4, #119	; 0x77
   11064:	f00e fe1f 	bl	1fca6 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   11068:	2101      	movs	r1, #1
   1106a:	68a8      	ldr	r0, [r5, #8]
   1106c:	f00e fe22 	bl	1fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   11070:	e016      	b.n	110a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>
   11072:	2100      	movs	r1, #0
   11074:	f00e fdf5 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   11078:	68a8      	ldr	r0, [r5, #8]
   1107a:	7801      	ldrb	r1, [r0, #0]
   1107c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   11080:	f041 0120 	orr.w	r1, r1, #32
   11084:	7001      	strb	r1, [r0, #0]
   11086:	e00b      	b.n	110a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>
   11088:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1108c:	f00e fe0b 	bl	1fca6 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   11090:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   11094:	68a8      	ldr	r0, [r5, #8]
   11096:	f00e fe0d 	bl	1fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   1109a:	e001      	b.n	110a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>
   1109c:	f00e fde1 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   110a0:	46a0      	mov	r8, r4
   110a2:	f104 0169 	add.w	r1, r4, #105	; 0x69
   110a6:	68a8      	ldr	r0, [r5, #8]
   110a8:	f00e fe0d 	bl	1fcc6 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
   110ac:	f898 1068 	ldrb.w	r1, [r8, #104]	; 0x68
   110b0:	68a8      	ldr	r0, [r5, #8]
   110b2:	f00e fe0f 	bl	1fcd4 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   110b6:	8860      	ldrh	r0, [r4, #2]
   110b8:	281d      	cmp	r0, #29
   110ba:	bf18      	it	ne
   110bc:	2815      	cmpne	r0, #21
   110be:	d005      	beq.n	110cc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2e0>
   110c0:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
   110c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
   110c6:	68a8      	ldr	r0, [r5, #8]
   110c8:	f00e fdbb 	bl	1fc42 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
   110cc:	68a8      	ldr	r0, [r5, #8]
   110ce:	f007 fabb 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   110d2:	2004      	movs	r0, #4
   110d4:	7030      	strb	r0, [r6, #0]
   110d6:	b357      	cbz	r7, 1112e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x342>
   110d8:	8860      	ldrh	r0, [r4, #2]
   110da:	2810      	cmp	r0, #16
   110dc:	d023      	beq.n	11126 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x33a>
   110de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   110e2:	68b5      	ldr	r5, [r6, #8]
   110e4:	f00f fbc5 	bl	20872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   110e8:	4607      	mov	r7, r0
   110ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
   110ee:	f00f fc46 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   110f2:	1a38      	subs	r0, r7, r0
   110f4:	1e40      	subs	r0, r0, #1
   110f6:	b2c0      	uxtb	r0, r0
   110f8:	8861      	ldrh	r1, [r4, #2]
   110fa:	2228      	movs	r2, #40	; 0x28
   110fc:	f002 f95c 	bl	133b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
   11100:	4405      	add	r5, r0
   11102:	78a0      	ldrb	r0, [r4, #2]
   11104:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11108:	b130      	cbz	r0, 11118 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x32c>
   1110a:	6870      	ldr	r0, [r6, #4]
   1110c:	4405      	add	r5, r0
   1110e:	f00f fc85 	bl	20a1c <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
   11112:	4428      	add	r0, r5
   11114:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
   11118:	7922      	ldrb	r2, [r4, #4]
   1111a:	4629      	mov	r1, r5
   1111c:	2000      	movs	r0, #0
   1111e:	f007 fae1 	bl	186e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   11122:	b920      	cbnz	r0, 1112e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x342>
   11124:	e013      	b.n	1114e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x362>
   11126:	7921      	ldrb	r1, [r4, #4]
   11128:	2000      	movs	r0, #0
   1112a:	f006 feab 	bl	17e84 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
   1112e:	8860      	ldrh	r0, [r4, #2]
   11130:	2813      	cmp	r0, #19
   11132:	d015      	beq.n	11160 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x374>
   11134:	dc10      	bgt.n	11158 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x36c>
   11136:	2810      	cmp	r0, #16
   11138:	bf08      	it	eq
   1113a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   1113e:	2812      	cmp	r0, #18
   11140:	d00e      	beq.n	11160 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x374>
   11142:	bf00      	nop
   11144:	f640 51bc 	movw	r1, #3516	; 0xdbc
   11148:	202d      	movs	r0, #45	; 0x2d
   1114a:	f7fb fe9d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1114e:	f640 51a8 	movw	r1, #3496	; 0xda8
   11152:	202d      	movs	r0, #45	; 0x2d
   11154:	f7fb fe98 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11158:	2815      	cmp	r0, #21
   1115a:	bf18      	it	ne
   1115c:	281d      	cmpne	r0, #29
   1115e:	d1f1      	bne.n	11144 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x358>
   11160:	7922      	ldrb	r2, [r4, #4]
   11162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11166:	f04f 0101 	mov.w	r1, #1
   1116a:	f04f 0000 	mov.w	r0, #0
   1116e:	f007 bc43 	b.w	189f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   11172:	0000      	.short	0x0000
   11174:	2000115c 	.word	0x2000115c
   11178:	20000108 	.word	0x20000108
   1117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11180:	4604      	mov	r4, r0
   11182:	b082      	sub	sp, #8
   11184:	460e      	mov	r6, r1
   11186:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   1118a:	f007 fcf5 	bl	18b78 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   1118e:	7961      	ldrb	r1, [r4, #5]
   11190:	20ff      	movs	r0, #255	; 0xff
   11192:	f007 fcbd 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   11196:	4d8b      	ldr	r5, [pc, #556]	; (113c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5d8>)
   11198:	4f8b      	ldr	r7, [pc, #556]	; (113c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5dc>)
   1119a:	f04f 0800 	mov.w	r8, #0
   1119e:	b166      	cbz	r6, 111ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x3ce>
   111a0:	7962      	ldrb	r2, [r4, #5]
   111a2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   111a6:	2000      	movs	r0, #0
   111a8:	f007 fbe4 	bl	18974 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ>
   111ac:	78a0      	ldrb	r0, [r4, #2]
   111ae:	f010 0f03 	tst.w	r0, #3
   111b2:	d047      	beq.n	11244 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x458>
   111b4:	2e00      	cmp	r6, #0
   111b6:	d040      	beq.n	1123a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x44e>
   111b8:	e044      	b.n	11244 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x458>
   111ba:	68a8      	ldr	r0, [r5, #8]
   111bc:	f00e fcdf 	bl	1fb7e <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>
   111c0:	4681      	mov	r9, r0
   111c2:	f894 a004 	ldrb.w	sl, [r4, #4]
   111c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   111ca:	f00f fb52 	bl	20872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   111ce:	f1ba 0f08 	cmp.w	sl, #8
   111d2:	bf04      	itt	eq
   111d4:	f44f 71c8 	moveq.w	r1, #400	; 0x190
   111d8:	2240      	moveq	r2, #64	; 0x40
   111da:	d00f      	beq.n	111fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x410>
   111dc:	f1ba 0f04 	cmp.w	sl, #4
   111e0:	bf04      	itt	eq
   111e2:	f44f 71bf 	moveq.w	r1, #382	; 0x17e
   111e6:	2210      	moveq	r2, #16
   111e8:	d008      	beq.n	111fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x410>
   111ea:	f1ba 0f02 	cmp.w	sl, #2
   111ee:	bf07      	ittee	eq
   111f0:	f108 0118 	addeq.w	r1, r8, #24
   111f4:	2204      	moveq	r2, #4
   111f6:	f108 0128 	addne.w	r1, r8, #40	; 0x28
   111fa:	2208      	movne	r2, #8
   111fc:	f109 0305 	add.w	r3, r9, #5
   11200:	fb13 1102 	smlabb	r1, r3, r2, r1
   11204:	68ba      	ldr	r2, [r7, #8]
   11206:	fb00 2101 	mla	r1, r0, r1, r2
   1120a:	22ca      	movs	r2, #202	; 0xca
   1120c:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   11210:	4408      	add	r0, r1
   11212:	6138      	str	r0, [r7, #16]
   11214:	78a1      	ldrb	r1, [r4, #2]
   11216:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1121a:	b111      	cbz	r1, 11222 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x436>
   1121c:	6879      	ldr	r1, [r7, #4]
   1121e:	4408      	add	r0, r1
   11220:	6138      	str	r0, [r7, #16]
   11222:	4601      	mov	r1, r0
   11224:	7962      	ldrb	r2, [r4, #5]
   11226:	2000      	movs	r0, #0
   11228:	f007 fa5c 	bl	186e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   1122c:	2800      	cmp	r0, #0
   1122e:	d1bd      	bne.n	111ac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x3c0>
   11230:	f640 51f9 	movw	r1, #3577	; 0xdf9
   11234:	202d      	movs	r0, #45	; 0x2d
   11236:	f7fb fe27 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1123a:	7962      	ldrb	r2, [r4, #5]
   1123c:	2101      	movs	r1, #1
   1123e:	2000      	movs	r0, #0
   11240:	f007 fbda 	bl	189f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   11244:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
   11248:	4620      	mov	r0, r4
   1124a:	2e00      	cmp	r6, #0
   1124c:	d07e      	beq.n	1134c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x560>
   1124e:	8861      	ldrh	r1, [r4, #2]
   11250:	4646      	mov	r6, r8
   11252:	f3c1 0040 	ubfx	r0, r1, #1, #1
   11256:	2800      	cmp	r0, #0
   11258:	bf08      	it	eq
   1125a:	f048 0608 	orreq.w	r6, r8, #8
   1125e:	f011 0f40 	tst.w	r1, #64	; 0x40
   11262:	bf18      	it	ne
   11264:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   11268:	2800      	cmp	r0, #0
   1126a:	bf19      	ittee	ne
   1126c:	f8d4 a058 	ldrne.w	sl, [r4, #88]	; 0x58
   11270:	f8b4 905c 	ldrhne.w	r9, [r4, #92]	; 0x5c
   11274:	f8d4 a050 	ldreq.w	sl, [r4, #80]	; 0x50
   11278:	f8b4 9054 	ldrheq.w	r9, [r4, #84]	; 0x54
   1127c:	68a8      	ldr	r0, [r5, #8]
   1127e:	2107      	movs	r1, #7
   11280:	f8a0 8000 	strh.w	r8, [r0]
   11284:	f00e fced 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   11288:	2100      	movs	r1, #0
   1128a:	68a8      	ldr	r0, [r5, #8]
   1128c:	f00e fbad 	bl	1f9ea <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   11290:	2200      	movs	r2, #0
   11292:	4631      	mov	r1, r6
   11294:	68a8      	ldr	r0, [r5, #8]
   11296:	f00e fbb1 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   1129a:	f016 0f08 	tst.w	r6, #8
   1129e:	d016      	beq.n	112ce <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x4e2>
   112a0:	f8b4 0045 	ldrh.w	r0, [r4, #69]	; 0x45
   112a4:	f8bd 1000 	ldrh.w	r1, [sp]
   112a8:	2302      	movs	r3, #2
   112aa:	f360 010b 	bfi	r1, r0, #0, #12
   112ae:	f8ad 1000 	strh.w	r1, [sp]
   112b2:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
   112b6:	2203      	movs	r2, #3
   112b8:	0901      	lsrs	r1, r0, #4
   112ba:	f89d 0001 	ldrb.w	r0, [sp, #1]
   112be:	f361 1007 	bfi	r0, r1, #4, #4
   112c2:	f88d 0001 	strb.w	r0, [sp, #1]
   112c6:	4669      	mov	r1, sp
   112c8:	68a8      	ldr	r0, [r5, #8]
   112ca:	f00e fc35 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   112ce:	68a8      	ldr	r0, [r5, #8]
   112d0:	f00e fbd4 	bl	1fa7c <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
   112d4:	89ba      	ldrh	r2, [r7, #12]
   112d6:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
   112da:	eba9 0102 	sub.w	r1, r9, r2
   112de:	4281      	cmp	r1, r0
   112e0:	bfa8      	it	ge
   112e2:	4601      	movge	r1, r0
   112e4:	f001 08ff 	and.w	r8, r1, #255	; 0xff
   112e8:	eb02 0008 	add.w	r0, r2, r8
   112ec:	4548      	cmp	r0, r9
   112ee:	d23e      	bcs.n	1136e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x582>
   112f0:	f046 0110 	orr.w	r1, r6, #16
   112f4:	2200      	movs	r2, #0
   112f6:	68a8      	ldr	r0, [r5, #8]
   112f8:	f00e fb80 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   112fc:	68a8      	ldr	r0, [r5, #8]
   112fe:	f00e fbbd 	bl	1fa7c <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
   11302:	89b9      	ldrh	r1, [r7, #12]
   11304:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
   11308:	eba9 0101 	sub.w	r1, r9, r1
   1130c:	4281      	cmp	r1, r0
   1130e:	bfa8      	it	ge
   11310:	4601      	movge	r1, r0
   11312:	f001 08ff 	and.w	r8, r1, #255	; 0xff
   11316:	68a8      	ldr	r0, [r5, #8]
   11318:	f00e fc0a 	bl	1fb30 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>
   1131c:	4440      	add	r0, r8
   1131e:	1c40      	adds	r0, r0, #1
   11320:	b2c6      	uxtb	r6, r0
   11322:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   11326:	68b9      	ldr	r1, [r7, #8]
   11328:	1840      	adds	r0, r0, r1
   1132a:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   1132e:	1840      	adds	r0, r0, r1
   11330:	b282      	uxth	r2, r0
   11332:	f104 0169 	add.w	r1, r4, #105	; 0x69
   11336:	f104 0036 	add.w	r0, r4, #54	; 0x36
   1133a:	f7fe f99f 	bl	f67c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   1133e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
   11342:	7961      	ldrb	r1, [r4, #5]
   11344:	4633      	mov	r3, r6
   11346:	2201      	movs	r2, #1
   11348:	4620      	mov	r0, r4
   1134a:	e000      	b.n	1134e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x562>
   1134c:	e036      	b.n	113bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5d0>
   1134e:	f001 fa6f 	bl	12830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd0>
   11352:	9000      	str	r0, [sp, #0]
   11354:	f8bd 0000 	ldrh.w	r0, [sp]
   11358:	f89d 1002 	ldrb.w	r1, [sp, #2]
   1135c:	2303      	movs	r3, #3
   1135e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   11362:	9001      	str	r0, [sp, #4]
   11364:	2204      	movs	r2, #4
   11366:	a901      	add	r1, sp, #4
   11368:	68a8      	ldr	r0, [r5, #8]
   1136a:	f00e fbe5 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   1136e:	78a0      	ldrb	r0, [r4, #2]
   11370:	f010 0f40 	tst.w	r0, #64	; 0x40
   11374:	d00e      	beq.n	11394 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5a8>
   11376:	7960      	ldrb	r0, [r4, #5]
   11378:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   1137c:	f994 2010 	ldrsb.w	r2, [r4, #16]
   11380:	f7fe f946 	bl	f610 <sym_TU25JD7DO6DVB4CJZMQBFSDAQTQESJXZMW7SAQY>
   11384:	f88d 0000 	strb.w	r0, [sp]
   11388:	2301      	movs	r3, #1
   1138a:	2206      	movs	r2, #6
   1138c:	4669      	mov	r1, sp
   1138e:	68a8      	ldr	r0, [r5, #8]
   11390:	f00e fbd2 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   11394:	89b8      	ldrh	r0, [r7, #12]
   11396:	4642      	mov	r2, r8
   11398:	eb00 010a 	add.w	r1, r0, sl
   1139c:	68a8      	ldr	r0, [r5, #8]
   1139e:	f00e fb0d 	bl	1f9bc <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>
   113a2:	89b8      	ldrh	r0, [r7, #12]
   113a4:	4440      	add	r0, r8
   113a6:	81b8      	strh	r0, [r7, #12]
   113a8:	68a8      	ldr	r0, [r5, #8]
   113aa:	f007 f94d 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   113ae:	2007      	movs	r0, #7
   113b0:	7038      	strb	r0, [r7, #0]
   113b2:	2001      	movs	r0, #1
   113b4:	7078      	strb	r0, [r7, #1]
   113b6:	b002      	add	sp, #8
   113b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113bc:	2201      	movs	r2, #1
   113be:	f000 fe3b 	bl	12038 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
   113c2:	e7f1      	b.n	113a8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x5bc>
   113c4:	20000108 	.word	0x20000108
   113c8:	2000115c 	.word	0x2000115c
   113cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   113d0:	4f4c      	ldr	r7, [pc, #304]	; (11504 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x718>)
   113d2:	4681      	mov	r9, r0
   113d4:	b083      	sub	sp, #12
   113d6:	7838      	ldrb	r0, [r7, #0]
   113d8:	2802      	cmp	r0, #2
   113da:	bf1c      	itt	ne
   113dc:	7838      	ldrbne	r0, [r7, #0]
   113de:	2803      	cmpne	r0, #3
   113e0:	d005      	beq.n	113ee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x602>
   113e2:	f640 512d 	movw	r1, #3373	; 0xd2d
   113e6:	f04f 002d 	mov.w	r0, #45	; 0x2d
   113ea:	f7fb fd4d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   113ee:	4c46      	ldr	r4, [pc, #280]	; (11508 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x71c>)
   113f0:	6865      	ldr	r5, [r4, #4]
   113f2:	7b28      	ldrb	r0, [r5, #12]
   113f4:	b118      	cbz	r0, 113fe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x612>
   113f6:	f7fe f8eb 	bl	f5d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
   113fa:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
   113fe:	f8d4 c008 	ldr.w	ip, [r4, #8]
   11402:	6861      	ldr	r1, [r4, #4]
   11404:	f04f 0800 	mov.w	r8, #0
   11408:	f89c 0000 	ldrb.w	r0, [ip]
   1140c:	6a0a      	ldr	r2, [r1, #32]
   1140e:	f000 060f 	and.w	r6, r0, #15
   11412:	2a00      	cmp	r2, #0
   11414:	bf18      	it	ne
   11416:	f892 8073 	ldrbne.w	r8, [r2, #115]	; 0x73
   1141a:	f1b9 0f00 	cmp.w	r9, #0
   1141e:	d053      	beq.n	114c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6dc>
   11420:	f101 0369 	add.w	r3, r1, #105	; 0x69
   11424:	f891 2068 	ldrb.w	r2, [r1, #104]	; 0x68
   11428:	09c0      	lsrs	r0, r0, #7
   1142a:	f10c 0109 	add.w	r1, ip, #9
   1142e:	f00e f847 	bl	1f4c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   11432:	2800      	cmp	r0, #0
   11434:	d048      	beq.n	114c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6dc>
   11436:	6865      	ldr	r5, [r4, #4]
   11438:	2e05      	cmp	r6, #5
   1143a:	d126      	bne.n	1148a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x69e>
   1143c:	68a0      	ldr	r0, [r4, #8]
   1143e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   11442:	f000 001f 	and.w	r0, r0, #31
   11446:	2810      	cmp	r0, #16
   11448:	d91f      	bls.n	1148a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x69e>
   1144a:	7be8      	ldrb	r0, [r5, #15]
   1144c:	b1e8      	cbz	r0, 1148a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x69e>
   1144e:	20ff      	movs	r0, #255	; 0xff
   11450:	f88d 0000 	strb.w	r0, [sp]
   11454:	466a      	mov	r2, sp
   11456:	2105      	movs	r1, #5
   11458:	4628      	mov	r0, r5
   1145a:	f001 f961 	bl	12720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc0>
   1145e:	b390      	cbz	r0, 114c6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6da>
   11460:	f895 00e8 	ldrb.w	r0, [r5, #232]	; 0xe8
   11464:	f88d 0004 	strb.w	r0, [sp, #4]
   11468:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1146c:	bb58      	cbnz	r0, 114c6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6da>
   1146e:	68a0      	ldr	r0, [r4, #8]
   11470:	2222      	movs	r2, #34	; 0x22
   11472:	1cc1      	adds	r1, r0, #3
   11474:	f105 00e9 	add.w	r0, r5, #233	; 0xe9
   11478:	f011 fe37 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1147c:	2225      	movs	r2, #37	; 0x25
   1147e:	4923      	ldr	r1, [pc, #140]	; (1150c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x720>)
   11480:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   11484:	f7fe fc9e 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   11488:	e01e      	b.n	114c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6dc>
   1148a:	4641      	mov	r1, r8
   1148c:	68a0      	ldr	r0, [r4, #8]
   1148e:	f00e fb78 	bl	1fb82 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
   11492:	b1c0      	cbz	r0, 114c6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6da>
   11494:	783a      	ldrb	r2, [r7, #0]
   11496:	6860      	ldr	r0, [r4, #4]
   11498:	4631      	mov	r1, r6
   1149a:	2a02      	cmp	r2, #2
   1149c:	bf1c      	itt	ne
   1149e:	783a      	ldrbne	r2, [r7, #0]
   114a0:	2a03      	cmpne	r2, #3
   114a2:	d005      	beq.n	114b0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6c4>
   114a4:	f640 5106 	movw	r1, #3334	; 0xd06
   114a8:	f04f 002d 	mov.w	r0, #45	; 0x2d
   114ac:	f7fb fcec 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   114b0:	68e2      	ldr	r2, [r4, #12]
   114b2:	783b      	ldrb	r3, [r7, #0]
   114b4:	6952      	ldr	r2, [r2, #20]
   114b6:	f06f 0c07 	mvn.w	ip, #7
   114ba:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   114be:	58d2      	ldr	r2, [r2, r3]
   114c0:	4790      	blx	r2
   114c2:	4605      	mov	r5, r0
   114c4:	e001      	b.n	114ca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6de>
   114c6:	e7ff      	b.n	114c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6dc>
   114c8:	2501      	movs	r5, #1
   114ca:	7bb8      	ldrb	r0, [r7, #14]
   114cc:	b118      	cbz	r0, 114d6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x6ea>
   114ce:	f006 fbe7 	bl	17ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   114d2:	f006 f997 	bl	17804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   114d6:	2d00      	cmp	r5, #0
   114d8:	bf04      	itt	eq
   114da:	b003      	addeq	sp, #12
   114dc:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   114e0:	6860      	ldr	r0, [r4, #4]
   114e2:	f00f faad 	bl	20a40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   114e6:	b138      	cbz	r0, 114f8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x70c>
   114e8:	f006 fc1c 	bl	17d24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   114ec:	68e0      	ldr	r0, [r4, #12]
   114ee:	6880      	ldr	r0, [r0, #8]
   114f0:	b003      	add	sp, #12
   114f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   114f6:	4700      	bx	r0
   114f8:	6860      	ldr	r0, [r4, #4]
   114fa:	b003      	add	sp, #12
   114fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11500:	f001 bbea 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11504:	2000115c 	.word	0x2000115c
   11508:	20000108 	.word	0x20000108
   1150c:	00020815 	.word	0x00020815
   11510:	b530      	push	{r4, r5, lr}
   11512:	b083      	sub	sp, #12
   11514:	2903      	cmp	r1, #3
   11516:	d002      	beq.n	1151e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x732>
   11518:	2905      	cmp	r1, #5
   1151a:	d072      	beq.n	11602 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x816>
   1151c:	e06d      	b.n	115fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x80e>
   1151e:	4604      	mov	r4, r0
   11520:	20ff      	movs	r0, #255	; 0xff
   11522:	f88d 0000 	strb.w	r0, [sp]
   11526:	466a      	mov	r2, sp
   11528:	2103      	movs	r1, #3
   1152a:	4620      	mov	r0, r4
   1152c:	f001 f8f8 	bl	12720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc0>
   11530:	2800      	cmp	r0, #0
   11532:	d062      	beq.n	115fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x80e>
   11534:	7b20      	ldrb	r0, [r4, #12]
   11536:	4d37      	ldr	r5, [pc, #220]	; (11614 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x828>)
   11538:	2800      	cmp	r0, #0
   1153a:	d03c      	beq.n	115b6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x7ca>
   1153c:	f89d 0000 	ldrb.w	r0, [sp]
   11540:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
   11544:	f88d 1004 	strb.w	r1, [sp, #4]
   11548:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1154c:	bb99      	cbnz	r1, 115b6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x7ca>
   1154e:	7822      	ldrb	r2, [r4, #0]
   11550:	f884 20d7 	strb.w	r2, [r4, #215]	; 0xd7
   11554:	28ff      	cmp	r0, #255	; 0xff
   11556:	d011      	beq.n	1157c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x790>
   11558:	f104 02d9 	add.w	r2, r4, #217	; 0xd9
   1155c:	1e51      	subs	r1, r2, #1
   1155e:	f7fd fc87 	bl	ee70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   11562:	b130      	cbz	r0, 11572 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x786>
   11564:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   11568:	f040 0102 	orr.w	r1, r0, #2
   1156c:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
   11570:	e012      	b.n	11598 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x7ac>
   11572:	f241 0108 	movw	r1, #4104	; 0x1008
   11576:	202d      	movs	r0, #45	; 0x2d
   11578:	f7fb fc86 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1157c:	68a8      	ldr	r0, [r5, #8]
   1157e:	7801      	ldrb	r1, [r0, #0]
   11580:	f3c1 1280 	ubfx	r2, r1, #6, #1
   11584:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
   11588:	f8d0 2003 	ldr.w	r2, [r0, #3]
   1158c:	f8c4 20d9 	str.w	r2, [r4, #217]	; 0xd9
   11590:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   11594:	f8a4 00dd 	strh.w	r0, [r4, #221]	; 0xdd
   11598:	f994 0047 	ldrsb.w	r0, [r4, #71]	; 0x47
   1159c:	287f      	cmp	r0, #127	; 0x7f
   1159e:	d027      	beq.n	115f0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x804>
   115a0:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
   115a4:	217f      	movs	r1, #127	; 0x7f
   115a6:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
   115aa:	2220      	movs	r2, #32
   115ac:	491a      	ldr	r1, [pc, #104]	; (11618 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82c>)
   115ae:	f104 00ce 	add.w	r0, r4, #206	; 0xce
   115b2:	f7fe fc07 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   115b6:	68a8      	ldr	r0, [r5, #8]
   115b8:	2100      	movs	r1, #0
   115ba:	8001      	strh	r1, [r0, #0]
   115bc:	2104      	movs	r1, #4
   115be:	f00e fb50 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   115c2:	f104 0169 	add.w	r1, r4, #105	; 0x69
   115c6:	68a8      	ldr	r0, [r5, #8]
   115c8:	f00e fb7d 	bl	1fcc6 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
   115cc:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   115d0:	68a8      	ldr	r0, [r5, #8]
   115d2:	f00e fb7f 	bl	1fcd4 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   115d6:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   115da:	6da1      	ldr	r1, [r4, #88]	; 0x58
   115dc:	68a8      	ldr	r0, [r5, #8]
   115de:	f00e fb82 	bl	1fce6 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
   115e2:	490e      	ldr	r1, [pc, #56]	; (1161c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x830>)
   115e4:	2005      	movs	r0, #5
   115e6:	7008      	strb	r0, [r1, #0]
   115e8:	68a8      	ldr	r0, [r5, #8]
   115ea:	f007 f82d 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   115ee:	e00e      	b.n	1160e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x822>
   115f0:	f640 616c 	movw	r1, #3692	; 0xe6c
   115f4:	202d      	movs	r0, #45	; 0x2d
   115f6:	f7fb fc47 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   115fa:	b003      	add	sp, #12
   115fc:	2001      	movs	r0, #1
   115fe:	bd30      	pop	{r4, r5, pc}
   11600:	e7ff      	b.n	11602 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x816>
   11602:	4907      	ldr	r1, [pc, #28]	; (11620 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x834>)
   11604:	6809      	ldr	r1, [r1, #0]
   11606:	b111      	cbz	r1, 1160e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x822>
   11608:	4788      	blx	r1
   1160a:	2800      	cmp	r0, #0
   1160c:	d0f5      	beq.n	115fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x80e>
   1160e:	b003      	add	sp, #12
   11610:	2000      	movs	r0, #0
   11612:	bd30      	pop	{r4, r5, pc}
   11614:	20000108 	.word	0x20000108
   11618:	0002082b 	.word	0x0002082b
   1161c:	2000115c 	.word	0x2000115c
   11620:	2000011c 	.word	0x2000011c
   11624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11628:	b083      	sub	sp, #12
   1162a:	2903      	cmp	r1, #3
   1162c:	d008      	beq.n	11640 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x854>
   1162e:	2905      	cmp	r1, #5
   11630:	f000 80f4 	beq.w	1181c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa30>
   11634:	f001 fb50 	bl	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11638:	b003      	add	sp, #12
   1163a:	2000      	movs	r0, #0
   1163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11640:	4604      	mov	r4, r0
   11642:	20ff      	movs	r0, #255	; 0xff
   11644:	f88d 0000 	strb.w	r0, [sp]
   11648:	466a      	mov	r2, sp
   1164a:	2103      	movs	r1, #3
   1164c:	4620      	mov	r0, r4
   1164e:	f001 f867 	bl	12720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc0>
   11652:	2800      	cmp	r0, #0
   11654:	f000 80de 	beq.w	11814 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa28>
   11658:	7b20      	ldrb	r0, [r4, #12]
   1165a:	4e77      	ldr	r6, [pc, #476]	; (11838 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4c>)
   1165c:	2800      	cmp	r0, #0
   1165e:	d03c      	beq.n	116da <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x8ee>
   11660:	f89d 0000 	ldrb.w	r0, [sp]
   11664:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
   11668:	f88d 1004 	strb.w	r1, [sp, #4]
   1166c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11670:	bb99      	cbnz	r1, 116da <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x8ee>
   11672:	7822      	ldrb	r2, [r4, #0]
   11674:	f884 20d7 	strb.w	r2, [r4, #215]	; 0xd7
   11678:	28ff      	cmp	r0, #255	; 0xff
   1167a:	d011      	beq.n	116a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x8b4>
   1167c:	f104 02d9 	add.w	r2, r4, #217	; 0xd9
   11680:	1e51      	subs	r1, r2, #1
   11682:	f7fd fbf5 	bl	ee70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   11686:	b130      	cbz	r0, 11696 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x8aa>
   11688:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   1168c:	f040 0102 	orr.w	r1, r0, #2
   11690:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
   11694:	e012      	b.n	116bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x8d0>
   11696:	f241 0108 	movw	r1, #4104	; 0x1008
   1169a:	202d      	movs	r0, #45	; 0x2d
   1169c:	f7fb fbf4 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   116a0:	68b0      	ldr	r0, [r6, #8]
   116a2:	7801      	ldrb	r1, [r0, #0]
   116a4:	f3c1 1280 	ubfx	r2, r1, #6, #1
   116a8:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
   116ac:	f8d0 2003 	ldr.w	r2, [r0, #3]
   116b0:	f8c4 20d9 	str.w	r2, [r4, #217]	; 0xd9
   116b4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   116b8:	f8a4 00dd 	strh.w	r0, [r4, #221]	; 0xdd
   116bc:	f994 0047 	ldrsb.w	r0, [r4, #71]	; 0x47
   116c0:	287f      	cmp	r0, #127	; 0x7f
   116c2:	d07d      	beq.n	117c0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x9d4>
   116c4:	f884 00df 	strb.w	r0, [r4, #223]	; 0xdf
   116c8:	217f      	movs	r1, #127	; 0x7f
   116ca:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
   116ce:	2220      	movs	r2, #32
   116d0:	495a      	ldr	r1, [pc, #360]	; (1183c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa50>)
   116d2:	f104 00ce 	add.w	r0, r4, #206	; 0xce
   116d6:	f7fe fb75 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   116da:	78a0      	ldrb	r0, [r4, #2]
   116dc:	4625      	mov	r5, r4
   116de:	f3c0 1a80 	ubfx	sl, r0, #6, #1
   116e2:	4857      	ldr	r0, [pc, #348]	; (11840 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa54>)
   116e4:	f1ba 0f00 	cmp.w	sl, #0
   116e8:	6840      	ldr	r0, [r0, #4]
   116ea:	b2c0      	uxtb	r0, r0
   116ec:	bf14      	ite	ne
   116ee:	f040 0940 	orrne.w	r9, r0, #64	; 0x40
   116f2:	f020 0940 	biceq.w	r9, r0, #64	; 0x40
   116f6:	2100      	movs	r1, #0
   116f8:	68b0      	ldr	r0, [r6, #8]
   116fa:	8001      	strh	r1, [r0, #0]
   116fc:	2107      	movs	r1, #7
   116fe:	f00e fab0 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   11702:	2100      	movs	r1, #0
   11704:	68b0      	ldr	r0, [r6, #8]
   11706:	f00e f970 	bl	1f9ea <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   1170a:	2200      	movs	r2, #0
   1170c:	4649      	mov	r1, r9
   1170e:	68b0      	ldr	r0, [r6, #8]
   11710:	f00e f974 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   11714:	2306      	movs	r3, #6
   11716:	2200      	movs	r2, #0
   11718:	f105 0169 	add.w	r1, r5, #105	; 0x69
   1171c:	68b0      	ldr	r0, [r6, #8]
   1171e:	f00e fa0b 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   11722:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
   11726:	68b0      	ldr	r0, [r6, #8]
   11728:	f00e fad4 	bl	1fcd4 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   1172c:	68b0      	ldr	r0, [r6, #8]
   1172e:	f00e f9a5 	bl	1fa7c <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>
   11732:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
   11736:	f1c0 00fe 	rsb	r0, r0, #254	; 0xfe
   1173a:	4281      	cmp	r1, r0
   1173c:	bfb8      	it	lt
   1173e:	4608      	movlt	r0, r1
   11740:	b2c7      	uxtb	r7, r0
   11742:	f8df 8100 	ldr.w	r8, [pc, #256]	; 11844 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa58>
   11746:	42b9      	cmp	r1, r7
   11748:	d939      	bls.n	117be <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x9d2>
   1174a:	1ef8      	subs	r0, r7, #3
   1174c:	b2c7      	uxtb	r7, r0
   1174e:	f049 0b10 	orr.w	fp, r9, #16
   11752:	2200      	movs	r2, #0
   11754:	4659      	mov	r1, fp
   11756:	68b0      	ldr	r0, [r6, #8]
   11758:	f00e f950 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   1175c:	68b0      	ldr	r0, [r6, #8]
   1175e:	f00e f9e7 	bl	1fb30 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>
   11762:	4438      	add	r0, r7
   11764:	1c40      	adds	r0, r0, #1
   11766:	f000 09ff 	and.w	r9, r0, #255	; 0xff
   1176a:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
   1176e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   11772:	1840      	adds	r0, r0, r1
   11774:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
   11778:	1840      	adds	r0, r0, r1
   1177a:	b282      	uxth	r2, r0
   1177c:	f105 0169 	add.w	r1, r5, #105	; 0x69
   11780:	f105 0036 	add.w	r0, r5, #54	; 0x36
   11784:	f7fd ff7a 	bl	f67c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   11788:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
   1178c:	7969      	ldrb	r1, [r5, #5]
   1178e:	464b      	mov	r3, r9
   11790:	2201      	movs	r2, #1
   11792:	4628      	mov	r0, r5
   11794:	f001 f84c 	bl	12830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd0>
   11798:	9001      	str	r0, [sp, #4]
   1179a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1179e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   117a2:	2303      	movs	r3, #3
   117a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   117a8:	9002      	str	r0, [sp, #8]
   117aa:	2204      	movs	r2, #4
   117ac:	a902      	add	r1, sp, #8
   117ae:	68b0      	ldr	r0, [r6, #8]
   117b0:	f00e f9c2 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   117b4:	2200      	movs	r2, #0
   117b6:	4659      	mov	r1, fp
   117b8:	68b0      	ldr	r0, [r6, #8]
   117ba:	f00e f91f 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   117be:	e000      	b.n	117c2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x9d6>
   117c0:	e023      	b.n	1180a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa1e>
   117c2:	f1ba 0f00 	cmp.w	sl, #0
   117c6:	d00e      	beq.n	117e6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x9fa>
   117c8:	7968      	ldrb	r0, [r5, #5]
   117ca:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
   117ce:	f995 2010 	ldrsb.w	r2, [r5, #16]
   117d2:	f7fd ff1d 	bl	f610 <sym_TU25JD7DO6DVB4CJZMQBFSDAQTQESJXZMW7SAQY>
   117d6:	f88d 0004 	strb.w	r0, [sp, #4]
   117da:	2301      	movs	r3, #1
   117dc:	2206      	movs	r2, #6
   117de:	a901      	add	r1, sp, #4
   117e0:	68b0      	ldr	r0, [r6, #8]
   117e2:	f00e f9a9 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   117e6:	463a      	mov	r2, r7
   117e8:	6da9      	ldr	r1, [r5, #88]	; 0x58
   117ea:	68b0      	ldr	r0, [r6, #8]
   117ec:	f00e f8e6 	bl	1f9bc <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>
   117f0:	f8a8 700c 	strh.w	r7, [r8, #12]
   117f4:	7961      	ldrb	r1, [r4, #5]
   117f6:	20ff      	movs	r0, #255	; 0xff
   117f8:	f007 f98a 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   117fc:	2008      	movs	r0, #8
   117fe:	f888 0000 	strb.w	r0, [r8]
   11802:	68b0      	ldr	r0, [r6, #8]
   11804:	f006 ff20 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   11808:	e012      	b.n	11830 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa44>
   1180a:	f640 616c 	movw	r1, #3692	; 0xe6c
   1180e:	202d      	movs	r0, #45	; 0x2d
   11810:	f7fb fb3a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11814:	4620      	mov	r0, r4
   11816:	f001 fa5f 	bl	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   1181a:	e009      	b.n	11830 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa44>
   1181c:	490a      	ldr	r1, [pc, #40]	; (11848 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa5c>)
   1181e:	6809      	ldr	r1, [r1, #0]
   11820:	b131      	cbz	r1, 11830 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa44>
   11822:	4788      	blx	r1
   11824:	2800      	cmp	r0, #0
   11826:	bf02      	ittt	eq
   11828:	2001      	moveq	r0, #1
   1182a:	b003      	addeq	sp, #12
   1182c:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11830:	2000      	movs	r0, #0
   11832:	b003      	add	sp, #12
   11834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11838:	20000108 	.word	0x20000108
   1183c:	0002082b 	.word	0x0002082b
   11840:	000132f8 	.word	0x000132f8
   11844:	2000115c 	.word	0x2000115c
   11848:	20000118 	.word	0x20000118
   1184c:	4a09      	ldr	r2, [pc, #36]	; (11874 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa88>)
   1184e:	0003      	movs	r3, r0
   11850:	6850      	ldr	r0, [r2, #4]
   11852:	d001      	beq.n	11858 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa6c>
   11854:	f001 ba40 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11858:	2900      	cmp	r1, #0
   1185a:	bf08      	it	eq
   1185c:	4770      	bxeq	lr
   1185e:	68d1      	ldr	r1, [r2, #12]
   11860:	4a05      	ldr	r2, [pc, #20]	; (11878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa8c>)
   11862:	6909      	ldr	r1, [r1, #16]
   11864:	7812      	ldrb	r2, [r2, #0]
   11866:	f06f 030f 	mvn.w	r3, #15
   1186a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1186e:	5889      	ldr	r1, [r1, r2]
   11870:	4708      	bx	r1
   11872:	0000      	.short	0x0000
   11874:	20000108 	.word	0x20000108
   11878:	2000115c 	.word	0x2000115c
   1187c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11880:	4604      	mov	r4, r0
   11882:	2211      	movs	r2, #17
   11884:	4918      	ldr	r1, [pc, #96]	; (118e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xafc>)
   11886:	3086      	adds	r0, #134	; 0x86
   11888:	f7fe fa9c 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   1188c:	2205      	movs	r2, #5
   1188e:	4917      	ldr	r1, [pc, #92]	; (118ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb00>)
   11890:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   11894:	f7fe fa96 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   11898:	f8b4 5090 	ldrh.w	r5, [r4, #144]	; 0x90
   1189c:	f894 608f 	ldrb.w	r6, [r4, #143]	; 0x8f
   118a0:	f005 fed8 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   118a4:	2700      	movs	r7, #0
   118a6:	b9a8      	cbnz	r0, 118d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae8>
   118a8:	7821      	ldrb	r1, [r4, #0]
   118aa:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   118ae:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
   118b2:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   118b6:	7b60      	ldrb	r0, [r4, #13]
   118b8:	2800      	cmp	r0, #0
   118ba:	bf1a      	itte	ne
   118bc:	f894 0048 	ldrbne.w	r0, [r4, #72]	; 0x48
   118c0:	f884 00be 	strbne.w	r0, [r4, #190]	; 0xbe
   118c4:	f884 70be 	strbeq.w	r7, [r4, #190]	; 0xbe
   118c8:	2216      	movs	r2, #22
   118ca:	4909      	ldr	r1, [pc, #36]	; (118f0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb04>)
   118cc:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   118d0:	f7fe fa78 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   118d4:	4807      	ldr	r0, [pc, #28]	; (118f4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb08>)
   118d6:	7007      	strb	r7, [r0, #0]
   118d8:	4621      	mov	r1, r4
   118da:	6a20      	ldr	r0, [r4, #32]
   118dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   118e0:	2202      	movs	r2, #2
   118e2:	f002 b849 	b.w	13978 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   118e6:	0000      	.short	0x0000
   118e8:	000207c1 	.word	0x000207c1
   118ec:	000207b1 	.word	0x000207b1
   118f0:	00020759 	.word	0x00020759
   118f4:	2000115c 	.word	0x2000115c
   118f8:	b570      	push	{r4, r5, r6, lr}
   118fa:	4d1c      	ldr	r5, [pc, #112]	; (1196c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb80>)
   118fc:	2101      	movs	r1, #1
   118fe:	4604      	mov	r4, r0
   11900:	70a9      	strb	r1, [r5, #2]
   11902:	3030      	adds	r0, #48	; 0x30
   11904:	f00f f83b 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   11908:	b128      	cbz	r0, 11916 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb2a>
   1190a:	4620      	mov	r0, r4
   1190c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11910:	2101      	movs	r1, #1
   11912:	f7ff babb 	b.w	10e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
   11916:	8860      	ldrh	r0, [r4, #2]
   11918:	f3c0 1100 	ubfx	r1, r0, #4, #1
   1191c:	bb09      	cbnz	r1, 11962 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb76>
   1191e:	78a9      	ldrb	r1, [r5, #2]
   11920:	b1f9      	cbz	r1, 11962 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb76>
   11922:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
   11926:	2900      	cmp	r1, #0
   11928:	bf08      	it	eq
   1192a:	f010 0f01 	tsteq.w	r0, #1
   1192e:	d112      	bne.n	11956 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6a>
   11930:	f010 0f02 	tst.w	r0, #2
   11934:	bf08      	it	eq
   11936:	f010 0f20 	tsteq.w	r0, #32
   1193a:	d10c      	bne.n	11956 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6a>
   1193c:	6968      	ldr	r0, [r5, #20]
   1193e:	b120      	cbz	r0, 1194a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb5e>
   11940:	f100 0040 	add.w	r0, r0, #64	; 0x40
   11944:	f011 f849 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   11948:	b928      	cbnz	r0, 11956 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6a>
   1194a:	69a8      	ldr	r0, [r5, #24]
   1194c:	b148      	cbz	r0, 11962 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb76>
   1194e:	3040      	adds	r0, #64	; 0x40
   11950:	f011 f843 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   11954:	b128      	cbz	r0, 11962 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb76>
   11956:	4620      	mov	r0, r4
   11958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1195c:	2100      	movs	r1, #0
   1195e:	f7ff bc0d 	b.w	1117c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x390>
   11962:	4620      	mov	r0, r4
   11964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11968:	f001 b9b6 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   1196c:	2000115c 	.word	0x2000115c
   11970:	b570      	push	{r4, r5, r6, lr}
   11972:	4604      	mov	r4, r0
   11974:	8840      	ldrh	r0, [r0, #2]
   11976:	2810      	cmp	r0, #16
   11978:	d010      	beq.n	1199c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xbb0>
   1197a:	4d11      	ldr	r5, [pc, #68]	; (119c0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xbd4>)
   1197c:	7ba8      	ldrb	r0, [r5, #14]
   1197e:	b120      	cbz	r0, 1198a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb9e>
   11980:	f005 ff6a 	bl	17858 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   11984:	2040      	movs	r0, #64	; 0x40
   11986:	f006 f999 	bl	17cbc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   1198a:	480e      	ldr	r0, [pc, #56]	; (119c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xbd8>)
   1198c:	6880      	ldr	r0, [r0, #8]
   1198e:	f006 fe5b 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   11992:	78a0      	ldrb	r0, [r4, #2]
   11994:	f010 0f04 	tst.w	r0, #4
   11998:	d10b      	bne.n	119b2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xbc6>
   1199a:	e005      	b.n	119a8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xbbc>
   1199c:	4620      	mov	r0, r4
   1199e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   119a2:	2101      	movs	r1, #1
   119a4:	f7ff bafc 	b.w	10fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b4>
   119a8:	2100      	movs	r1, #0
   119aa:	7922      	ldrb	r2, [r4, #4]
   119ac:	4608      	mov	r0, r1
   119ae:	f007 f823 	bl	189f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   119b2:	2000      	movs	r0, #0
   119b4:	f006 fcac 	bl	18310 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   119b8:	2002      	movs	r0, #2
   119ba:	7028      	strb	r0, [r5, #0]
   119bc:	bd70      	pop	{r4, r5, r6, pc}
   119be:	0000      	.short	0x0000
   119c0:	2000115c 	.word	0x2000115c
   119c4:	20000108 	.word	0x20000108
   119c8:	b510      	push	{r4, lr}
   119ca:	4c08      	ldr	r4, [pc, #32]	; (119ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc00>)
   119cc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
   119d0:	89a1      	ldrh	r1, [r4, #12]
   119d2:	4291      	cmp	r1, r2
   119d4:	d005      	beq.n	119e2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xbf6>
   119d6:	2101      	movs	r1, #1
   119d8:	f7ff fbd0 	bl	1117c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x390>
   119dc:	2008      	movs	r0, #8
   119de:	7020      	strb	r0, [r4, #0]
   119e0:	bd10      	pop	{r4, pc}
   119e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   119e6:	f001 b977 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   119ea:	0000      	.short	0x0000
   119ec:	2000115c 	.word	0x2000115c
   119f0:	b570      	push	{r4, r5, r6, lr}
   119f2:	4604      	mov	r4, r0
   119f4:	8840      	ldrh	r0, [r0, #2]
   119f6:	4d21      	ldr	r5, [pc, #132]	; (11a7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc90>)
   119f8:	f3c0 0140 	ubfx	r1, r0, #1, #1
   119fc:	2900      	cmp	r1, #0
   119fe:	bf08      	it	eq
   11a00:	f010 0f01 	tsteq.w	r0, #1
   11a04:	d02a      	beq.n	11a5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc70>
   11a06:	f04f 0100 	mov.w	r1, #0
   11a0a:	7962      	ldrb	r2, [r4, #5]
   11a0c:	4608      	mov	r0, r1
   11a0e:	f006 fff3 	bl	189f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   11a12:	78a0      	ldrb	r0, [r4, #2]
   11a14:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11a18:	2800      	cmp	r0, #0
   11a1a:	bf14      	ite	ne
   11a1c:	200c      	movne	r0, #12
   11a1e:	2022      	moveq	r0, #34	; 0x22
   11a20:	7961      	ldrb	r1, [r4, #5]
   11a22:	f007 f875 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   11a26:	2003      	movs	r0, #3
   11a28:	7028      	strb	r0, [r5, #0]
   11a2a:	7ba8      	ldrb	r0, [r5, #14]
   11a2c:	b148      	cbz	r0, 11a42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc56>
   11a2e:	f005 ff13 	bl	17858 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   11a32:	7960      	ldrb	r0, [r4, #5]
   11a34:	f010 0f0c 	tst.w	r0, #12
   11a38:	bf0c      	ite	eq
   11a3a:	2040      	moveq	r0, #64	; 0x40
   11a3c:	2045      	movne	r0, #69	; 0x45
   11a3e:	f006 f93d 	bl	17cbc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   11a42:	7960      	ldrb	r0, [r4, #5]
   11a44:	f010 000c 	ands.w	r0, r0, #12
   11a48:	bf18      	it	ne
   11a4a:	2028      	movne	r0, #40	; 0x28
   11a4c:	f006 fc60 	bl	18310 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   11a50:	480b      	ldr	r0, [pc, #44]	; (11a80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc94>)
   11a52:	6880      	ldr	r0, [r0, #8]
   11a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11a58:	f006 bdf6 	b.w	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   11a5c:	89a8      	ldrh	r0, [r5, #12]
   11a5e:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
   11a62:	4288      	cmp	r0, r1
   11a64:	d104      	bne.n	11a70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc84>
   11a66:	4620      	mov	r0, r4
   11a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11a6c:	f001 b934 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11a70:	4620      	mov	r0, r4
   11a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11a76:	2101      	movs	r1, #1
   11a78:	f7ff bb80 	b.w	1117c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x390>
   11a7c:	2000115c 	.word	0x2000115c
   11a80:	20000108 	.word	0x20000108
   11a84:	b570      	push	{r4, r5, r6, lr}
   11a86:	4c1c      	ldr	r4, [pc, #112]	; (11af8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd0c>)
   11a88:	6865      	ldr	r5, [r4, #4]
   11a8a:	7b28      	ldrb	r0, [r5, #12]
   11a8c:	b118      	cbz	r0, 11a96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xcaa>
   11a8e:	f7fd fd9f 	bl	f5d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
   11a92:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
   11a96:	4d19      	ldr	r5, [pc, #100]	; (11afc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd10>)
   11a98:	7ba8      	ldrb	r0, [r5, #14]
   11a9a:	b118      	cbz	r0, 11aa4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xcb8>
   11a9c:	f006 f900 	bl	17ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   11aa0:	f005 feb0 	bl	17804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   11aa4:	6860      	ldr	r0, [r4, #4]
   11aa6:	f00e ffcb 	bl	20a40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   11aaa:	b1a8      	cbz	r0, 11ad8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xcec>
   11aac:	6860      	ldr	r0, [r4, #4]
   11aae:	8841      	ldrh	r1, [r0, #2]
   11ab0:	f3c1 1200 	ubfx	r2, r1, #4, #1
   11ab4:	2a00      	cmp	r2, #0
   11ab6:	bf04      	itt	eq
   11ab8:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
   11abc:	2900      	cmpeq	r1, #0
   11abe:	d00b      	beq.n	11ad8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xcec>
   11ac0:	7829      	ldrb	r1, [r5, #0]
   11ac2:	2902      	cmp	r1, #2
   11ac4:	bf1c      	itt	ne
   11ac6:	7829      	ldrbne	r1, [r5, #0]
   11ac8:	2903      	cmpne	r1, #3
   11aca:	d00a      	beq.n	11ae2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xcf6>
   11acc:	f640 4137 	movw	r1, #3127	; 0xc37
   11ad0:	f04f 002d 	mov.w	r0, #45	; 0x2d
   11ad4:	f7fb f9d8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11ad8:	6860      	ldr	r0, [r4, #4]
   11ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11ade:	f001 b8fb 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11ae2:	68e1      	ldr	r1, [r4, #12]
   11ae4:	782a      	ldrb	r2, [r5, #0]
   11ae6:	68c9      	ldr	r1, [r1, #12]
   11ae8:	f06f 0307 	mvn.w	r3, #7
   11aec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   11af0:	5889      	ldr	r1, [r1, r2]
   11af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11af6:	4708      	bx	r1
   11af8:	20000108 	.word	0x20000108
   11afc:	2000115c 	.word	0x2000115c
   11b00:	b570      	push	{r4, r5, r6, lr}
   11b02:	4604      	mov	r4, r0
   11b04:	8841      	ldrh	r1, [r0, #2]
   11b06:	2000      	movs	r0, #0
   11b08:	2909      	cmp	r1, #9
   11b0a:	bf18      	it	ne
   11b0c:	bd70      	popne	{r4, r5, r6, pc}
   11b0e:	4d13      	ldr	r5, [pc, #76]	; (11b5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd70>)
   11b10:	81a8      	strh	r0, [r5, #12]
   11b12:	7068      	strb	r0, [r5, #1]
   11b14:	2101      	movs	r1, #1
   11b16:	4620      	mov	r0, r4
   11b18:	f7fe ff4a 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   11b1c:	6869      	ldr	r1, [r5, #4]
   11b1e:	4408      	add	r0, r1
   11b20:	6068      	str	r0, [r5, #4]
   11b22:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   11b26:	1c40      	adds	r0, r0, #1
   11b28:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
   11b2c:	f7fe fba2 	bl	10274 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   11b30:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   11b34:	fbb0 f2f1 	udiv	r2, r0, r1
   11b38:	fb01 0012 	mls	r0, r1, r2, r0
   11b3c:	6869      	ldr	r1, [r5, #4]
   11b3e:	2200      	movs	r2, #0
   11b40:	4408      	add	r0, r1
   11b42:	6068      	str	r0, [r5, #4]
   11b44:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
   11b48:	4620      	mov	r0, r4
   11b4a:	f000 fa75 	bl	12038 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
   11b4e:	4620      	mov	r0, r4
   11b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11b54:	2101      	movs	r1, #1
   11b56:	f7ff b999 	b.w	10e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
   11b5a:	0000      	.short	0x0000
   11b5c:	2000115c 	.word	0x2000115c

00011b60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
   11b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b64:	4dab      	ldr	r5, [pc, #684]	; (11e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b4>)
   11b66:	4604      	mov	r4, r0
   11b68:	b089      	sub	sp, #36	; 0x24
   11b6a:	7828      	ldrb	r0, [r5, #0]
   11b6c:	2800      	cmp	r0, #0
   11b6e:	d17d      	bne.n	11c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
   11b70:	7820      	ldrb	r0, [r4, #0]
   11b72:	28ff      	cmp	r0, #255	; 0xff
   11b74:	d07a      	beq.n	11c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c>
   11b76:	2000      	movs	r0, #0
   11b78:	81a8      	strh	r0, [r5, #12]
   11b7a:	6068      	str	r0, [r5, #4]
   11b7c:	7068      	strb	r0, [r5, #1]
   11b7e:	70a8      	strb	r0, [r5, #2]
   11b80:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
   11b84:	48a4      	ldr	r0, [pc, #656]	; (11e18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b8>)
   11b86:	ae04      	add	r6, sp, #16
   11b88:	4fa4      	ldr	r7, [pc, #656]	; (11e1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2bc>)
   11b8a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   11b8c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   11b90:	68f8      	ldr	r0, [r7, #12]
   11b92:	6840      	ldr	r0, [r0, #4]
   11b94:	9007      	str	r0, [sp, #28]
   11b96:	a804      	add	r0, sp, #16
   11b98:	f006 fb6e 	bl	18278 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   11b9c:	f006 fcac 	bl	184f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   11ba0:	f007 fb72 	bl	19288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
   11ba4:	f006 f87c 	bl	17ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   11ba8:	f005 fe2c 	bl	17804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   11bac:	489c      	ldr	r0, [pc, #624]	; (11e20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c0>)
   11bae:	f006 ff9f 	bl	18af0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   11bb2:	489c      	ldr	r0, [pc, #624]	; (11e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>)
   11bb4:	f006 ffa6 	bl	18b04 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   11bb8:	2000      	movs	r0, #0
   11bba:	f00b fd8b 	bl	1d6d4 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>
   11bbe:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11bc2:	f00e ff07 	bl	209d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   11bc6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11bca:	f00e fe93 	bl	208f4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   11bce:	f006 ffd3 	bl	18b78 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   11bd2:	7921      	ldrb	r1, [r4, #4]
   11bd4:	2025      	movs	r0, #37	; 0x25
   11bd6:	f006 ff9b 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   11bda:	f994 0010 	ldrsb.w	r0, [r4, #16]
   11bde:	f006 fd27 	bl	18630 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   11be2:	7921      	ldrb	r1, [r4, #4]
   11be4:	2000      	movs	r0, #0
   11be6:	f006 fa07 	bl	17ff8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   11bea:	2601      	movs	r6, #1
   11bec:	60a8      	str	r0, [r5, #8]
   11bee:	2800      	cmp	r0, #0
   11bf0:	bf01      	itttt	eq
   11bf2:	702e      	strbeq	r6, [r5, #0]
   11bf4:	2000      	moveq	r0, #0
   11bf6:	b009      	addeq	sp, #36	; 0x24
   11bf8:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bfc:	f104 0150 	add.w	r1, r4, #80	; 0x50
   11c00:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   11c02:	f00d fbc7 	bl	1f394 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
   11c06:	4681      	mov	r9, r0
   11c08:	f104 0158 	add.w	r1, r4, #88	; 0x58
   11c0c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   11c0e:	f00d fbc4 	bl	1f39a <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
   11c12:	4680      	mov	r8, r0
   11c14:	f1b9 0f00 	cmp.w	r9, #0
   11c18:	bf1c      	itt	ne
   11c1a:	f894 0024 	ldrbne.w	r0, [r4, #36]	; 0x24
   11c1e:	2800      	cmpne	r0, #0
   11c20:	d04f      	beq.n	11cc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
   11c22:	bf00      	nop
   11c24:	f04f 0a01 	mov.w	sl, #1
   11c28:	7f20      	ldrb	r0, [r4, #28]
   11c2a:	2800      	cmp	r0, #0
   11c2c:	bf01      	itttt	eq
   11c2e:	7ea0      	ldrbeq	r0, [r4, #26]
   11c30:	2800      	cmpeq	r0, #0
   11c32:	78a0      	ldrbeq	r0, [r4, #2]
   11c34:	f010 0f04 	tsteq.w	r0, #4
   11c38:	d074      	beq.n	11d24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
   11c3a:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   11c3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   11c42:	ea81 0102 	eor.w	r1, r1, r2
   11c46:	ea71 0000 	orns	r0, r1, r0
   11c4a:	d008      	beq.n	11c5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
   11c4c:	f00a fa26 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   11c50:	4602      	mov	r2, r0
   11c52:	e9d4 3018 	ldrd	r3, r0, [r4, #96]	; 0x60
   11c56:	1ad2      	subs	r2, r2, r3
   11c58:	eb71 0000 	sbcs.w	r0, r1, r0
   11c5c:	d202      	bcs.n	11c64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x104>
   11c5e:	f1ba 0f00 	cmp.w	sl, #0
   11c62:	d079      	beq.n	11d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   11c64:	f7fd f94e 	bl	ef04 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   11c68:	496f      	ldr	r1, [pc, #444]	; (11e28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c8>)
   11c6a:	e000      	b.n	11c6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e>
   11c6c:	e025      	b.n	11cba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
   11c6e:	fba0 ba01 	umull	fp, sl, r0, r1
   11c72:	f00a fa13 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   11c76:	eb10 000b 	adds.w	r0, r0, fp
   11c7a:	eb41 010a 	adc.w	r1, r1, sl
   11c7e:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   11c82:	f04f 0b01 	mov.w	fp, #1
   11c86:	7ee0      	ldrb	r0, [r4, #27]
   11c88:	f7fd f8b2 	bl	edf0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   11c8c:	4682      	mov	sl, r0
   11c8e:	7ea0      	ldrb	r0, [r4, #26]
   11c90:	2800      	cmp	r0, #0
   11c92:	bf18      	it	ne
   11c94:	f1ba 0f00 	cmpne.w	sl, #0
   11c98:	d003      	beq.n	11ca2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
   11c9a:	7ee0      	ldrb	r0, [r4, #27]
   11c9c:	f7fd f89c 	bl	edd8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   11ca0:	b1c8      	cbz	r0, 11cd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x176>
   11ca2:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
   11ca6:	2800      	cmp	r0, #0
   11ca8:	bf1c      	itt	ne
   11caa:	7f20      	ldrbne	r0, [r4, #28]
   11cac:	2800      	cmpne	r0, #0
   11cae:	d02b      	beq.n	11d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
   11cb0:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   11cb4:	2801      	cmp	r0, #1
   11cb6:	d01c      	beq.n	11cf2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x192>
   11cb8:	e021      	b.n	11cfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
   11cba:	b009      	add	sp, #36	; 0x24
   11cbc:	200c      	movs	r0, #12
   11cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cc2:	f1b8 0f00 	cmp.w	r8, #0
   11cc6:	bf1a      	itte	ne
   11cc8:	f894 0025 	ldrbne.w	r0, [r4, #37]	; 0x25
   11ccc:	2800      	cmpne	r0, #0
   11cce:	f04f 0a00 	moveq.w	sl, #0
   11cd2:	d1a7      	bne.n	11c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
   11cd4:	e7a8      	b.n	11c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
   11cd6:	4632      	mov	r2, r6
   11cd8:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
   11cdc:	f104 0169 	add.w	r1, r4, #105	; 0x69
   11ce0:	4650      	mov	r0, sl
   11ce2:	f00d fc25 	bl	1f530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   11ce6:	7ee1      	ldrb	r1, [r4, #27]
   11ce8:	f104 0069 	add.w	r0, r4, #105	; 0x69
   11cec:	f7fd f88c 	bl	ee08 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   11cf0:	e00a      	b.n	11d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
   11cf2:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   11cf6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   11cfa:	2840      	cmp	r0, #64	; 0x40
   11cfc:	d013      	beq.n	11d26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c6>
   11cfe:	4659      	mov	r1, fp
   11d00:	f104 0069 	add.w	r0, r4, #105	; 0x69
   11d04:	f00d fc03 	bl	1f50e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   11d08:	78a0      	ldrb	r0, [r4, #2]
   11d0a:	f010 0f04 	tst.w	r0, #4
   11d0e:	d023      	beq.n	11d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   11d10:	7ee0      	ldrb	r0, [r4, #27]
   11d12:	f7fd f887 	bl	ee24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   11d16:	ea5f 0a00 	movs.w	sl, r0
   11d1a:	d01d      	beq.n	11d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   11d1c:	2110      	movs	r1, #16
   11d1e:	f7fd fc21 	bl	f564 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   11d22:	b140      	cbz	r0, 11d36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d6>
   11d24:	e018      	b.n	11d58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
   11d26:	f7fd f853 	bl	edd0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   11d2a:	4632      	mov	r2, r6
   11d2c:	f104 0169 	add.w	r1, r4, #105	; 0x69
   11d30:	f00d fbfe 	bl	1f530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   11d34:	e7e8      	b.n	11d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a8>
   11d36:	4632      	mov	r2, r6
   11d38:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
   11d3c:	f104 0177 	add.w	r1, r4, #119	; 0x77
   11d40:	4650      	mov	r0, sl
   11d42:	f00d fbf5 	bl	1f530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   11d46:	f104 0177 	add.w	r1, r4, #119	; 0x77
   11d4a:	68b8      	ldr	r0, [r7, #8]
   11d4c:	f00d ffab 	bl	1fca6 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   11d50:	2101      	movs	r1, #1
   11d52:	68b8      	ldr	r0, [r7, #8]
   11d54:	f00d ffae 	bl	1fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   11d58:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
   11d5c:	ea49 0008 	orr.w	r0, r9, r8
   11d60:	f88d 1000 	strb.w	r1, [sp]
   11d64:	f89d 1000 	ldrb.w	r1, [sp]
   11d68:	2900      	cmp	r1, #0
   11d6a:	bf18      	it	ne
   11d6c:	2101      	movne	r1, #1
   11d6e:	4308      	orrs	r0, r1
   11d70:	d019      	beq.n	11da6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x246>
   11d72:	78a0      	ldrb	r0, [r4, #2]
   11d74:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11d78:	2800      	cmp	r0, #0
   11d7a:	bf04      	itt	eq
   11d7c:	f8b4 0045 	ldrheq.w	r0, [r4, #69]	; 0x45
   11d80:	f3c0 060b 	ubfxeq	r6, r0, #0, #12
   11d84:	d10f      	bne.n	11da6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x246>
   11d86:	bf00      	nop
   11d88:	f7fe fa74 	bl	10274 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   11d8c:	f3c0 000b 	ubfx	r0, r0, #0, #12
   11d90:	42b0      	cmp	r0, r6
   11d92:	d0f9      	beq.n	11d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x228>
   11d94:	f8b4 1045 	ldrh.w	r1, [r4, #69]	; 0x45
   11d98:	f360 010b 	bfi	r1, r0, #0, #12
   11d9c:	f8a4 1045 	strh.w	r1, [r4, #69]	; 0x45
   11da0:	2000      	movs	r0, #0
   11da2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
   11da6:	f7fd f961 	bl	f06c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
   11daa:	68b8      	ldr	r0, [r7, #8]
   11dac:	1cc0      	adds	r0, r0, #3
   11dae:	f7fc fffb 	bl	eda8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
   11db2:	73a8      	strb	r0, [r5, #14]
   11db4:	78a0      	ldrb	r0, [r4, #2]
   11db6:	f010 0f01 	tst.w	r0, #1
   11dba:	d027      	beq.n	11e0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   11dbc:	481b      	ldr	r0, [pc, #108]	; (11e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2cc>)
   11dbe:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
   11dc2:	e9cd 1002 	strd	r1, r0, [sp, #8]
   11dc6:	20ff      	movs	r0, #255	; 0xff
   11dc8:	7728      	strb	r0, [r5, #28]
   11dca:	a802      	add	r0, sp, #8
   11dcc:	6a26      	ldr	r6, [r4, #32]
   11dce:	f7fb fb09 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11dd2:	b9d8      	cbnz	r0, 11e0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   11dd4:	9c02      	ldr	r4, [sp, #8]
   11dd6:	42b4      	cmp	r4, r6
   11dd8:	d013      	beq.n	11e02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a2>
   11dda:	7a72      	ldrb	r2, [r6, #9]
   11ddc:	7a60      	ldrb	r0, [r4, #9]
   11dde:	f106 030a 	add.w	r3, r6, #10
   11de2:	f104 010a 	add.w	r1, r4, #10
   11de6:	f00d fb6b 	bl	1f4c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   11dea:	b150      	cbz	r0, 11e02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a2>
   11dec:	78a0      	ldrb	r0, [r4, #2]
   11dee:	7728      	strb	r0, [r5, #28]
   11df0:	f8d4 0003 	ldr.w	r0, [r4, #3]
   11df4:	f8c5 001d 	str.w	r0, [r5, #29]
   11df8:	f8b4 0007 	ldrh.w	r0, [r4, #7]
   11dfc:	f8a5 0021 	strh.w	r0, [r5, #33]	; 0x21
   11e00:	e004      	b.n	11e0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
   11e02:	a802      	add	r0, sp, #8
   11e04:	f7fb faee 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11e08:	2800      	cmp	r0, #0
   11e0a:	d0e3      	beq.n	11dd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x274>
   11e0c:	b009      	add	sp, #36	; 0x24
   11e0e:	2000      	movs	r0, #0
   11e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e14:	2000115c 	.word	0x2000115c
   11e18:	0001331c 	.word	0x0001331c
   11e1c:	20000108 	.word	0x20000108
   11e20:	8e89bed6 	.word	0x8e89bed6
   11e24:	00555555 	.word	0x00555555
   11e28:	000f4240 	.word	0x000f4240
   11e2c:	000132f8 	.word	0x000132f8
   11e30:	b570      	push	{r4, r5, r6, lr}
   11e32:	b082      	sub	sp, #8
   11e34:	4604      	mov	r4, r0
   11e36:	f7ff fe93 	bl	11b60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   11e3a:	2800      	cmp	r0, #0
   11e3c:	bf1c      	itt	ne
   11e3e:	b002      	addne	sp, #8
   11e40:	bd70      	popne	{r4, r5, r6, pc}
   11e42:	7820      	ldrb	r0, [r4, #0]
   11e44:	2103      	movs	r1, #3
   11e46:	f00d f954 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11e4a:	4d22      	ldr	r5, [pc, #136]	; (11ed4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x374>)
   11e4c:	2105      	movs	r1, #5
   11e4e:	6168      	str	r0, [r5, #20]
   11e50:	7820      	ldrb	r0, [r4, #0]
   11e52:	f00d f94e 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11e56:	61a8      	str	r0, [r5, #24]
   11e58:	6969      	ldr	r1, [r5, #20]
   11e5a:	2900      	cmp	r1, #0
   11e5c:	bf18      	it	ne
   11e5e:	2800      	cmpne	r0, #0
   11e60:	d005      	beq.n	11e6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
   11e62:	f640 2194 	movw	r1, #2708	; 0xa94
   11e66:	f04f 002d 	mov.w	r0, #45	; 0x2d
   11e6a:	f7fb f80d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11e6e:	7828      	ldrb	r0, [r5, #0]
   11e70:	2801      	cmp	r0, #1
   11e72:	d02b      	beq.n	11ecc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
   11e74:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
   11e78:	2600      	movs	r6, #0
   11e7a:	b150      	cbz	r0, 11e92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
   11e7c:	4668      	mov	r0, sp
   11e7e:	f7fd fbdb 	bl	f638 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
   11e82:	b130      	cbz	r0, 11e92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
   11e84:	4669      	mov	r1, sp
   11e86:	f104 0036 	add.w	r0, r4, #54	; 0x36
   11e8a:	f00d fd7c 	bl	1f986 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   11e8e:	f884 6083 	strb.w	r6, [r4, #131]	; 0x83
   11e92:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
   11e96:	68a9      	ldr	r1, [r5, #8]
   11e98:	1840      	adds	r0, r0, r1
   11e9a:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   11e9e:	1840      	adds	r0, r0, r1
   11ea0:	b282      	uxth	r2, r0
   11ea2:	f104 0169 	add.w	r1, r4, #105	; 0x69
   11ea6:	f104 0036 	add.w	r0, r4, #54	; 0x36
   11eaa:	f7fd fbe7 	bl	f67c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   11eae:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
   11eb2:	78a0      	ldrb	r0, [r4, #2]
   11eb4:	f04f 0100 	mov.w	r1, #0
   11eb8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11ebc:	2800      	cmp	r0, #0
   11ebe:	4620      	mov	r0, r4
   11ec0:	d002      	beq.n	11ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
   11ec2:	f7ff f86d 	bl	10fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b4>
   11ec6:	e001      	b.n	11ecc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
   11ec8:	f7fe ffe0 	bl	10e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
   11ecc:	b002      	add	sp, #8
   11ece:	2000      	movs	r0, #0
   11ed0:	bd70      	pop	{r4, r5, r6, pc}
   11ed2:	0000      	.short	0x0000
   11ed4:	2000115c 	.word	0x2000115c
   11ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11edc:	4d54      	ldr	r5, [pc, #336]	; (12030 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>)
   11ede:	4c55      	ldr	r4, [pc, #340]	; (12034 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d4>)
   11ee0:	686e      	ldr	r6, [r5, #4]
   11ee2:	7820      	ldrb	r0, [r4, #0]
   11ee4:	2700      	movs	r7, #0
   11ee6:	2800      	cmp	r0, #0
   11ee8:	bf08      	it	eq
   11eea:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   11eee:	7820      	ldrb	r0, [r4, #0]
   11ef0:	2802      	cmp	r0, #2
   11ef2:	bf1c      	itt	ne
   11ef4:	7820      	ldrbne	r0, [r4, #0]
   11ef6:	2803      	cmpne	r0, #3
   11ef8:	d10c      	bne.n	11f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
   11efa:	7b30      	ldrb	r0, [r6, #12]
   11efc:	b120      	cbz	r0, 11f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
   11efe:	46b0      	mov	r8, r6
   11f00:	f7fd fb66 	bl	f5d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
   11f04:	f888 0047 	strb.w	r0, [r8, #71]	; 0x47
   11f08:	7ba0      	ldrb	r0, [r4, #14]
   11f0a:	b118      	cbz	r0, 11f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
   11f0c:	f005 fec8 	bl	17ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   11f10:	f005 fc78 	bl	17804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   11f14:	f00b fbc2 	bl	1d69c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
   11f18:	7828      	ldrb	r0, [r5, #0]
   11f1a:	b178      	cbz	r0, 11f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
   11f1c:	4630      	mov	r0, r6
   11f1e:	f00e fd8f 	bl	20a40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   11f22:	b158      	cbz	r0, 11f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
   11f24:	6868      	ldr	r0, [r5, #4]
   11f26:	8841      	ldrh	r1, [r0, #2]
   11f28:	f3c1 02c0 	ubfx	r2, r1, #3, #1
   11f2c:	b382      	cbz	r2, 11f90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
   11f2e:	2909      	cmp	r1, #9
   11f30:	d009      	beq.n	11f46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e6>
   11f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f36:	2101      	movs	r1, #1
   11f38:	f7ff b832 	b.w	10fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b4>
   11f3c:	4630      	mov	r0, r6
   11f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f42:	f000 bec9 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11f46:	81a7      	strh	r7, [r4, #12]
   11f48:	4606      	mov	r6, r0
   11f4a:	7067      	strb	r7, [r4, #1]
   11f4c:	2101      	movs	r1, #1
   11f4e:	f7fe fd2f 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   11f52:	6861      	ldr	r1, [r4, #4]
   11f54:	4408      	add	r0, r1
   11f56:	6060      	str	r0, [r4, #4]
   11f58:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
   11f5c:	1c40      	adds	r0, r0, #1
   11f5e:	f8a6 0048 	strh.w	r0, [r6, #72]	; 0x48
   11f62:	f7fe f987 	bl	10274 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   11f66:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   11f6a:	fbb0 f2f1 	udiv	r2, r0, r1
   11f6e:	fb01 0012 	mls	r0, r1, r2, r0
   11f72:	6861      	ldr	r1, [r4, #4]
   11f74:	2200      	movs	r2, #0
   11f76:	4408      	add	r0, r1
   11f78:	6060      	str	r0, [r4, #4]
   11f7a:	f896 1076 	ldrb.w	r1, [r6, #118]	; 0x76
   11f7e:	4630      	mov	r0, r6
   11f80:	f000 f85a 	bl	12038 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
   11f84:	6868      	ldr	r0, [r5, #4]
   11f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f8a:	2101      	movs	r1, #1
   11f8c:	f7fe bf7e 	b.w	10e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
   11f90:	7862      	ldrb	r2, [r4, #1]
   11f92:	b11a      	cbz	r2, 11f9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
   11f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f98:	f000 be9e 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11f9c:	f3c1 1100 	ubfx	r1, r1, #4, #1
   11fa0:	b179      	cbz	r1, 11fc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
   11fa2:	4604      	mov	r4, r0
   11fa4:	3030      	adds	r0, #48	; 0x30
   11fa6:	f00e fcea 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   11faa:	b128      	cbz	r0, 11fb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x458>
   11fac:	4620      	mov	r0, r4
   11fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11fb2:	2101      	movs	r1, #1
   11fb4:	f7fe bff4 	b.w	10fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b4>
   11fb8:	4620      	mov	r0, r4
   11fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11fbe:	f000 be8b 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   11fc2:	4605      	mov	r5, r0
   11fc4:	3030      	adds	r0, #48	; 0x30
   11fc6:	f00e fcda 	bl	2097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   11fca:	b128      	cbz	r0, 11fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x478>
   11fcc:	4628      	mov	r0, r5
   11fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11fd2:	2101      	movs	r1, #1
   11fd4:	f7fe bf5a 	b.w	10e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
   11fd8:	8868      	ldrh	r0, [r5, #2]
   11fda:	f3c0 1100 	ubfx	r1, r0, #4, #1
   11fde:	bb09      	cbnz	r1, 12024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c4>
   11fe0:	78a1      	ldrb	r1, [r4, #2]
   11fe2:	b1f9      	cbz	r1, 12024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c4>
   11fe4:	f8b5 1054 	ldrh.w	r1, [r5, #84]	; 0x54
   11fe8:	2900      	cmp	r1, #0
   11fea:	bf08      	it	eq
   11fec:	f010 0f01 	tsteq.w	r0, #1
   11ff0:	d112      	bne.n	12018 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
   11ff2:	f010 0f02 	tst.w	r0, #2
   11ff6:	bf08      	it	eq
   11ff8:	f010 0f20 	tsteq.w	r0, #32
   11ffc:	d10c      	bne.n	12018 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
   11ffe:	6960      	ldr	r0, [r4, #20]
   12000:	b120      	cbz	r0, 1200c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ac>
   12002:	f100 0040 	add.w	r0, r0, #64	; 0x40
   12006:	f010 fce8 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   1200a:	b928      	cbnz	r0, 12018 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
   1200c:	69a0      	ldr	r0, [r4, #24]
   1200e:	b148      	cbz	r0, 12024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c4>
   12010:	3040      	adds	r0, #64	; 0x40
   12012:	f010 fce2 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   12016:	b128      	cbz	r0, 12024 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c4>
   12018:	4628      	mov	r0, r5
   1201a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1201e:	2100      	movs	r1, #0
   12020:	f7ff b8ac 	b.w	1117c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x390>
   12024:	4628      	mov	r0, r5
   12026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1202a:	f000 be55 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   1202e:	0000      	.short	0x0000
   12030:	20000108 	.word	0x20000108
   12034:	2000115c 	.word	0x2000115c
   12038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1203c:	b08f      	sub	sp, #60	; 0x3c
   1203e:	4604      	mov	r4, r0
   12040:	2000      	movs	r0, #0
   12042:	468a      	mov	sl, r1
   12044:	9006      	str	r0, [sp, #24]
   12046:	8861      	ldrh	r1, [r4, #2]
   12048:	4690      	mov	r8, r2
   1204a:	4683      	mov	fp, r0
   1204c:	f011 0f03 	tst.w	r1, #3
   12050:	d00f      	beq.n	12072 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
   12052:	f011 0f01 	tst.w	r1, #1
   12056:	f001 0002 	and.w	r0, r1, #2
   1205a:	d005      	beq.n	12068 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
   1205c:	2800      	cmp	r0, #0
   1205e:	bf08      	it	eq
   12060:	f04f 0b01 	moveq.w	fp, #1
   12064:	d005      	beq.n	12072 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
   12066:	e00e      	b.n	12086 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
   12068:	2800      	cmp	r0, #0
   1206a:	bf18      	it	ne
   1206c:	f04f 0b02 	movne.w	fp, #2
   12070:	d009      	beq.n	12086 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
   12072:	2700      	movs	r7, #0
   12074:	4eff      	ldr	r6, [pc, #1020]	; (12474 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x914>)
   12076:	460d      	mov	r5, r1
   12078:	f011 0f01 	tst.w	r1, #1
   1207c:	f001 0002 	and.w	r0, r1, #2
   12080:	d015      	beq.n	120ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x54e>
   12082:	b128      	cbz	r0, 12090 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>
   12084:	e017      	b.n	120b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x556>
   12086:	f240 619f 	movw	r1, #1695	; 0x69f
   1208a:	202d      	movs	r0, #45	; 0x2d
   1208c:	f7fa fefc 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12090:	f015 0f04 	tst.w	r5, #4
   12094:	d00f      	beq.n	120b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x556>
   12096:	f047 0008 	orr.w	r0, r7, #8
   1209a:	f1b8 0f00 	cmp.w	r8, #0
   1209e:	bf0e      	itee	eq
   120a0:	f040 0910 	orreq.w	r9, r0, #16
   120a4:	f040 0001 	orrne.w	r0, r0, #1
   120a8:	f040 0902 	orrne.w	r9, r0, #2
   120ac:	e0e0      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   120ae:	b110      	cbz	r0, 120b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x556>
   120b0:	f015 0f04 	tst.w	r5, #4
   120b4:	d00f      	beq.n	120d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x576>
   120b6:	48ef      	ldr	r0, [pc, #956]	; (12474 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x914>)
   120b8:	f015 0f07 	tst.w	r5, #7
   120bc:	6940      	ldr	r0, [r0, #20]
   120be:	d011      	beq.n	120e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>
   120c0:	f015 0f01 	tst.w	r5, #1
   120c4:	f005 0202 	and.w	r2, r5, #2
   120c8:	d067      	beq.n	1219a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63a>
   120ca:	2a00      	cmp	r2, #0
   120cc:	bf08      	it	eq
   120ce:	f015 0f04 	tsteq.w	r5, #4
   120d2:	d04f      	beq.n	12174 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x614>
   120d4:	e06f      	b.n	121b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x656>
   120d6:	f1b8 0f00 	cmp.w	r8, #0
   120da:	bf18      	it	ne
   120dc:	f047 0909 	orrne.w	r9, r7, #9
   120e0:	d152      	bne.n	12188 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
   120e2:	e065      	b.n	121b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>
   120e4:	f1b8 0f00 	cmp.w	r8, #0
   120e8:	d007      	beq.n	120fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x59a>
   120ea:	f047 0908 	orr.w	r9, r7, #8
   120ee:	b378      	cbz	r0, 12150 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
   120f0:	3040      	adds	r0, #64	; 0x40
   120f2:	f010 fc72 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   120f6:	b358      	cbz	r0, 12150 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
   120f8:	e031      	b.n	1215e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fe>
   120fa:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   120fe:	2a00      	cmp	r2, #0
   12100:	bf08      	it	eq
   12102:	f011 0f01 	tsteq.w	r1, #1
   12106:	d111      	bne.n	1212c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
   12108:	f011 0f02 	tst.w	r1, #2
   1210c:	bf08      	it	eq
   1210e:	f011 0f20 	tsteq.w	r1, #32
   12112:	d10b      	bne.n	1212c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
   12114:	b120      	cbz	r0, 12120 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c0>
   12116:	f100 0040 	add.w	r0, r0, #64	; 0x40
   1211a:	f010 fc5e 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   1211e:	b928      	cbnz	r0, 1212c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
   12120:	69b0      	ldr	r0, [r6, #24]
   12122:	b148      	cbz	r0, 12138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
   12124:	3040      	adds	r0, #64	; 0x40
   12126:	f010 fc58 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   1212a:	b128      	cbz	r0, 12138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
   1212c:	f047 0918 	orr.w	r9, r7, #24
   12130:	f015 0f20 	tst.w	r5, #32
   12134:	d003      	beq.n	1213e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5de>
   12136:	e09b      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   12138:	f047 0901 	orr.w	r9, r7, #1
   1213c:	e098      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   1213e:	7920      	ldrb	r0, [r4, #4]
   12140:	f010 000c 	ands.w	r0, r0, #12
   12144:	bf18      	it	ne
   12146:	2001      	movne	r0, #1
   12148:	43c0      	mvns	r0, r0
   1214a:	f360 0900 	bfi	r9, r0, #0, #1
   1214e:	e08f      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   12150:	e7ff      	b.n	12152 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f2>
   12152:	69b0      	ldr	r0, [r6, #24]
   12154:	b128      	cbz	r0, 12162 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x602>
   12156:	3040      	adds	r0, #64	; 0x40
   12158:	f010 fc3f 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   1215c:	b108      	cbz	r0, 12162 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x602>
   1215e:	f049 0920 	orr.w	r9, r9, #32
   12162:	f015 0f20 	tst.w	r5, #32
   12166:	d10f      	bne.n	12188 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
   12168:	7920      	ldrb	r0, [r4, #4]
   1216a:	f010 000c 	ands.w	r0, r0, #12
   1216e:	d07d      	beq.n	1226c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>
   12170:	2001      	movs	r0, #1
   12172:	e07b      	b.n	1226c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>
   12174:	f047 0008 	orr.w	r0, r7, #8
   12178:	f1b8 0f00 	cmp.w	r8, #0
   1217c:	d005      	beq.n	1218a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62a>
   1217e:	7921      	ldrb	r1, [r4, #4]
   12180:	2902      	cmp	r1, #2
   12182:	d007      	beq.n	12194 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x634>
   12184:	f040 0901 	orr.w	r9, r0, #1
   12188:	e072      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   1218a:	7921      	ldrb	r1, [r4, #4]
   1218c:	f040 0010 	orr.w	r0, r0, #16
   12190:	2902      	cmp	r1, #2
   12192:	d0f7      	beq.n	12184 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x624>
   12194:	f020 0901 	bic.w	r9, r0, #1
   12198:	e06a      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   1219a:	2a00      	cmp	r2, #0
   1219c:	bf18      	it	ne
   1219e:	f015 0f04 	tstne.w	r5, #4
   121a2:	d008      	beq.n	121b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x656>
   121a4:	f1b8 0f00 	cmp.w	r8, #0
   121a8:	bf18      	it	ne
   121aa:	f047 090b 	orrne.w	r9, r7, #11
   121ae:	d15f      	bne.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   121b0:	f047 0918 	orr.w	r9, r7, #24
   121b4:	e05c      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   121b6:	f015 0f03 	tst.w	r5, #3
   121ba:	d160      	bne.n	1227e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x71e>
   121bc:	f015 0f04 	tst.w	r5, #4
   121c0:	d05d      	beq.n	1227e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x71e>
   121c2:	f1b8 0f00 	cmp.w	r8, #0
   121c6:	d007      	beq.n	121d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x678>
   121c8:	f047 0908 	orr.w	r9, r7, #8
   121cc:	b3b8      	cbz	r0, 1223e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6de>
   121ce:	3040      	adds	r0, #64	; 0x40
   121d0:	f010 fc03 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   121d4:	b398      	cbz	r0, 1223e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6de>
   121d6:	e03a      	b.n	1224e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ee>
   121d8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   121dc:	2a00      	cmp	r2, #0
   121de:	bf08      	it	eq
   121e0:	f011 0f01 	tsteq.w	r1, #1
   121e4:	d111      	bne.n	1220a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6aa>
   121e6:	f011 0f02 	tst.w	r1, #2
   121ea:	bf08      	it	eq
   121ec:	f011 0f20 	tsteq.w	r1, #32
   121f0:	d10b      	bne.n	1220a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6aa>
   121f2:	b120      	cbz	r0, 121fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69e>
   121f4:	f100 0040 	add.w	r0, r0, #64	; 0x40
   121f8:	f010 fbef 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   121fc:	b928      	cbnz	r0, 1220a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6aa>
   121fe:	69b0      	ldr	r0, [r6, #24]
   12200:	b188      	cbz	r0, 12226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c6>
   12202:	3040      	adds	r0, #64	; 0x40
   12204:	f010 fbe9 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   12208:	b168      	cbz	r0, 12226 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c6>
   1220a:	f047 0918 	orr.w	r9, r7, #24
   1220e:	f015 0f20 	tst.w	r5, #32
   12212:	d00b      	beq.n	1222c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6cc>
   12214:	7920      	ldrb	r0, [r4, #4]
   12216:	f010 000c 	ands.w	r0, r0, #12
   1221a:	bf18      	it	ne
   1221c:	2001      	movne	r0, #1
   1221e:	43c0      	mvns	r0, r0
   12220:	f360 0941 	bfi	r9, r0, #1, #1
   12224:	e024      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   12226:	f047 0903 	orr.w	r9, r7, #3
   1222a:	e021      	b.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   1222c:	7920      	ldrb	r0, [r4, #4]
   1222e:	f010 000c 	ands.w	r0, r0, #12
   12232:	bf18      	it	ne
   12234:	2001      	movne	r0, #1
   12236:	43c0      	mvns	r0, r0
   12238:	f360 0900 	bfi	r9, r0, #0, #1
   1223c:	e7ea      	b.n	12214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>
   1223e:	e000      	b.n	12242 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e2>
   12240:	e014      	b.n	1226c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>
   12242:	69b0      	ldr	r0, [r6, #24]
   12244:	b128      	cbz	r0, 12252 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f2>
   12246:	3040      	adds	r0, #64	; 0x40
   12248:	f010 fbc7 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   1224c:	b108      	cbz	r0, 12252 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f2>
   1224e:	f049 0920 	orr.w	r9, r9, #32
   12252:	7920      	ldrb	r0, [r4, #4]
   12254:	f010 010c 	ands.w	r1, r0, #12
   12258:	bf18      	it	ne
   1225a:	2101      	movne	r1, #1
   1225c:	f361 0941 	bfi	r9, r1, #1, #1
   12260:	f015 0f20 	tst.w	r5, #32
   12264:	d104      	bne.n	12270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x710>
   12266:	f010 000c 	ands.w	r0, r0, #12
   1226a:	d181      	bne.n	12170 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x610>
   1226c:	f360 0900 	bfi	r9, r0, #0, #1
   12270:	f015 0f40 	tst.w	r5, #64	; 0x40
   12274:	d02f      	beq.n	122d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x776>
   12276:	f1b8 0f00 	cmp.w	r8, #0
   1227a:	d005      	beq.n	12288 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x728>
   1227c:	e029      	b.n	122d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x772>
   1227e:	f240 7142 	movw	r1, #1858	; 0x742
   12282:	202d      	movs	r0, #45	; 0x2d
   12284:	f7fa fe00 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12288:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   1228c:	2800      	cmp	r0, #0
   1228e:	bf04      	itt	eq
   12290:	8860      	ldrheq	r0, [r4, #2]
   12292:	f010 0f01 	tsteq.w	r0, #1
   12296:	d118      	bne.n	122ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76a>
   12298:	f010 0f02 	tst.w	r0, #2
   1229c:	bf08      	it	eq
   1229e:	f010 0f20 	tsteq.w	r0, #32
   122a2:	d112      	bne.n	122ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76a>
   122a4:	6970      	ldr	r0, [r6, #20]
   122a6:	b120      	cbz	r0, 122b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x752>
   122a8:	f100 0040 	add.w	r0, r0, #64	; 0x40
   122ac:	f010 fb95 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   122b0:	b958      	cbnz	r0, 122ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76a>
   122b2:	69b0      	ldr	r0, [r6, #24]
   122b4:	b118      	cbz	r0, 122be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x75e>
   122b6:	3040      	adds	r0, #64	; 0x40
   122b8:	f010 fb8f 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   122bc:	b928      	cbnz	r0, 122ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x76a>
   122be:	f015 0f01 	tst.w	r5, #1
   122c2:	bf08      	it	eq
   122c4:	f015 0f02 	tsteq.w	r5, #2
   122c8:	d003      	beq.n	122d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x772>
   122ca:	7920      	ldrb	r0, [r4, #4]
   122cc:	f010 0f0c 	tst.w	r0, #12
   122d0:	d101      	bne.n	122d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x776>
   122d2:	f049 0940 	orr.w	r9, r9, #64	; 0x40
   122d6:	4f68      	ldr	r7, [pc, #416]	; (12478 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x918>)
   122d8:	f04f 0100 	mov.w	r1, #0
   122dc:	464d      	mov	r5, r9
   122de:	68b8      	ldr	r0, [r7, #8]
   122e0:	f1b8 0f00 	cmp.w	r8, #0
   122e4:	8001      	strh	r1, [r0, #0]
   122e6:	7801      	ldrb	r1, [r0, #0]
   122e8:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   122ec:	7001      	strb	r1, [r0, #0]
   122ee:	f04f 0107 	mov.w	r1, #7
   122f2:	d03a      	beq.n	1236a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x80a>
   122f4:	f00d fcb5 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   122f8:	69b0      	ldr	r0, [r6, #24]
   122fa:	b150      	cbz	r0, 12312 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b2>
   122fc:	3040      	adds	r0, #64	; 0x40
   122fe:	f010 fb6c 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   12302:	b130      	cbz	r0, 12312 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b2>
   12304:	69b0      	ldr	r0, [r6, #24]
   12306:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
   1230a:	2800      	cmp	r0, #0
   1230c:	bf1c      	itt	ne
   1230e:	200a      	movne	r0, #10
   12310:	9006      	strne	r0, [sp, #24]
   12312:	4659      	mov	r1, fp
   12314:	68b8      	ldr	r0, [r7, #8]
   12316:	f00d fb68 	bl	1f9ea <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   1231a:	4629      	mov	r1, r5
   1231c:	9a06      	ldr	r2, [sp, #24]
   1231e:	68b8      	ldr	r0, [r7, #8]
   12320:	f00d fb6c 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   12324:	f015 0f01 	tst.w	r5, #1
   12328:	d00b      	beq.n	12342 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7e2>
   1232a:	2306      	movs	r3, #6
   1232c:	2200      	movs	r2, #0
   1232e:	f104 0169 	add.w	r1, r4, #105	; 0x69
   12332:	68b8      	ldr	r0, [r7, #8]
   12334:	f00d fc00 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   12338:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   1233c:	68b8      	ldr	r0, [r7, #8]
   1233e:	f00d fcc9 	bl	1fcd4 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   12342:	f015 0f02 	tst.w	r5, #2
   12346:	d01c      	beq.n	12382 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x822>
   12348:	68b8      	ldr	r0, [r7, #8]
   1234a:	f1ba 0f00 	cmp.w	sl, #0
   1234e:	f04f 0306 	mov.w	r3, #6
   12352:	f04f 0201 	mov.w	r2, #1
   12356:	d00b      	beq.n	12370 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x810>
   12358:	f104 0177 	add.w	r1, r4, #119	; 0x77
   1235c:	f00d fbec 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   12360:	2101      	movs	r1, #1
   12362:	68b8      	ldr	r0, [r7, #8]
   12364:	f00d fca6 	bl	1fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   12368:	e00b      	b.n	12382 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x822>
   1236a:	f00d fc7a 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   1236e:	e7d0      	b.n	12312 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b2>
   12370:	f104 0170 	add.w	r1, r4, #112	; 0x70
   12374:	f00d fbe0 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   12378:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   1237c:	68b8      	ldr	r0, [r7, #8]
   1237e:	f00d fc99 	bl	1fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   12382:	f015 0f04 	tst.w	r5, #4
   12386:	d004      	beq.n	12392 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x832>
   12388:	f640 0198 	movw	r1, #2200	; 0x898
   1238c:	202d      	movs	r0, #45	; 0x2d
   1238e:	f7fa fd7b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12392:	f015 0f08 	tst.w	r5, #8
   12396:	d018      	beq.n	123ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x86a>
   12398:	2000      	movs	r0, #0
   1239a:	9008      	str	r0, [sp, #32]
   1239c:	f8b4 0045 	ldrh.w	r0, [r4, #69]	; 0x45
   123a0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   123a4:	2302      	movs	r3, #2
   123a6:	f360 010b 	bfi	r1, r0, #0, #12
   123aa:	f8ad 1020 	strh.w	r1, [sp, #32]
   123ae:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
   123b2:	2203      	movs	r2, #3
   123b4:	0901      	lsrs	r1, r0, #4
   123b6:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   123ba:	f361 1007 	bfi	r0, r1, #4, #4
   123be:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   123c2:	a908      	add	r1, sp, #32
   123c4:	68b8      	ldr	r0, [r7, #8]
   123c6:	f00d fbb7 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   123ca:	f015 0f20 	tst.w	r5, #32
   123ce:	d07c      	beq.n	124ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96a>
   123d0:	e9d4 0150 	ldrd	r0, r1, [r4, #320]	; 0x140
   123d4:	9108      	str	r1, [sp, #32]
   123d6:	9000      	str	r0, [sp, #0]
   123d8:	69b0      	ldr	r0, [r6, #24]
   123da:	2800      	cmp	r0, #0
   123dc:	bf0c      	ite	eq
   123de:	f8d6 9014 	ldreq.w	r9, [r6, #20]
   123e2:	4681      	movne	r9, r0
   123e4:	e9d9 ab18 	ldrd	sl, fp, [r9, #96]	; 0x60
   123e8:	d013      	beq.n	12412 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8b2>
   123ea:	f100 0040 	add.w	r0, r0, #64	; 0x40
   123ee:	f010 faf4 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   123f2:	b170      	cbz	r0, 12412 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8b2>
   123f4:	69b0      	ldr	r0, [r6, #24]
   123f6:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
   123fa:	b150      	cbz	r0, 12412 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8b2>
   123fc:	f109 0040 	add.w	r0, r9, #64	; 0x40
   12400:	f010 fb38 	bl	22a74 <sym_A6N2BBHUJC7YLWYSZOSKWVPYJZL7XXMIBPN5XLA>
   12404:	b928      	cbnz	r0, 12412 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8b2>
   12406:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
   1240a:	eb10 0a0a 	adds.w	sl, r0, sl
   1240e:	f14b 0b00 	adc.w	fp, fp, #0
   12412:	f899 0010 	ldrb.w	r0, [r9, #16]
   12416:	4919      	ldr	r1, [pc, #100]	; (1247c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x91c>)
   12418:	6933      	ldr	r3, [r6, #16]
   1241a:	f8dd c000 	ldr.w	ip, [sp]
   1241e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   12422:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12426:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1242a:	fbb0 f0f1 	udiv	r0, r0, r1
   1242e:	17c1      	asrs	r1, r0, #31
   12430:	eb10 000a 	adds.w	r0, r0, sl
   12434:	eb41 010b 	adc.w	r1, r1, fp
   12438:	f8dd a020 	ldr.w	sl, [sp, #32]
   1243c:	eb13 0c0c 	adds.w	ip, r3, ip
   12440:	f14a 0200 	adc.w	r2, sl, #0
   12444:	ebb0 000c 	subs.w	r0, r0, ip
   12448:	f8d4 c134 	ldr.w	ip, [r4, #308]	; 0x134
   1244c:	eb61 0102 	sbc.w	r1, r1, r2
   12450:	ebac 0303 	sub.w	r3, ip, r3
   12454:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   12458:	2201      	movs	r2, #1
   1245a:	1a1b      	subs	r3, r3, r0
   1245c:	eb7c 0301 	sbcs.w	r3, ip, r1
   12460:	bfa8      	it	ge
   12462:	2200      	movge	r2, #0
   12464:	f89d 3005 	ldrb.w	r3, [sp, #5]
   12468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1246c:	f88d 3005 	strb.w	r3, [sp, #5]
   12470:	e006      	b.n	12480 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x920>
   12472:	0000      	.short	0x0000
   12474:	2000115c 	.word	0x2000115c
   12478:	20000108 	.word	0x20000108
   1247c:	00013308 	.word	0x00013308
   12480:	f8df c294 	ldr.w	ip, [pc, #660]	; 12718 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbb8>
   12484:	f04f 0a00 	mov.w	sl, #0
   12488:	ebbc 0c00 	subs.w	ip, ip, r0
   1248c:	eb7a 0c01 	sbcs.w	ip, sl, r1
   12490:	bfb8      	it	lt
   12492:	2200      	movlt	r2, #0
   12494:	f5b0 3c70 	subs.w	ip, r0, #245760	; 0x3c000
   12498:	f171 0100 	sbcs.w	r1, r1, #0
   1249c:	db1d      	blt.n	124da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x97a>
   1249e:	2a00      	cmp	r2, #0
   124a0:	bf1c      	itt	ne
   124a2:	f043 0120 	orrne.w	r1, r3, #32
   124a6:	f88d 1005 	strbne.w	r1, [sp, #5]
   124aa:	d016      	beq.n	124da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x97a>
   124ac:	b2c9      	uxtb	r1, r1
   124ae:	f3c1 1140 	ubfx	r1, r1, #5, #1
   124b2:	2900      	cmp	r1, #0
   124b4:	bf08      	it	eq
   124b6:	211e      	moveq	r1, #30
   124b8:	d004      	beq.n	124c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x964>
   124ba:	2900      	cmp	r1, #0
   124bc:	bf18      	it	ne
   124be:	f44f 7196 	movne.w	r1, #300	; 0x12c
   124c2:	d057      	beq.n	12574 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa14>
   124c4:	fbb0 f0f1 	udiv	r0, r0, r1
   124c8:	e000      	b.n	124cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96c>
   124ca:	e04f      	b.n	1256c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0c>
   124cc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   124d0:	f360 010c 	bfi	r1, r0, #0, #13
   124d4:	f8ad 1004 	strh.w	r1, [sp, #4]
   124d8:	e00b      	b.n	124f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x992>
   124da:	f023 0120 	bic.w	r1, r3, #32
   124de:	f88d 1005 	strb.w	r1, [sp, #5]
   124e2:	2a00      	cmp	r2, #0
   124e4:	d1e2      	bne.n	124ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94c>
   124e6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   124ea:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
   124ee:	f8ad 0004 	strh.w	r0, [sp, #4]
   124f2:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
   124f6:	f240 40e2 	movw	r0, #1250	; 0x4e2
   124fa:	fbb1 f0f0 	udiv	r0, r1, r0
   124fe:	f8ad 0006 	strh.w	r0, [sp, #6]
   12502:	f899 3018 	ldrb.w	r3, [r9, #24]
   12506:	f8d9 2015 	ldr.w	r2, [r9, #21]
   1250a:	f899 1019 	ldrb.w	r1, [r9, #25]
   1250e:	f363 621f 	bfi	r2, r3, #24, #8
   12512:	f8dd 0009 	ldr.w	r0, [sp, #9]
   12516:	f8dd 3005 	ldr.w	r3, [sp, #5]
   1251a:	f361 601c 	bfi	r0, r1, #24, #5
   1251e:	f362 631f 	bfi	r3, r2, #24, #8
   12522:	0a11      	lsrs	r1, r2, #8
   12524:	f361 0017 	bfi	r0, r1, #0, #24
   12528:	f8cd 3005 	str.w	r3, [sp, #5]
   1252c:	f8cd 0009 	str.w	r0, [sp, #9]
   12530:	f005 f948 	bl	177c4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
   12534:	4601      	mov	r1, r0
   12536:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1253a:	f361 1047 	bfi	r0, r1, #5, #3
   1253e:	f88d 000c 	strb.w	r0, [sp, #12]
   12542:	f89d 0005 	ldrb.w	r0, [sp, #5]
   12546:	f020 0080 	bic.w	r0, r0, #128	; 0x80
   1254a:	f88d 0005 	strb.w	r0, [sp, #5]
   1254e:	f8d9 0000 	ldr.w	r0, [r9]
   12552:	f8cd 000d 	str.w	r0, [sp, #13]
   12556:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1255a:	9904      	ldr	r1, [sp, #16]
   1255c:	f360 211f 	bfi	r1, r0, #8, #24
   12560:	9104      	str	r1, [sp, #16]
   12562:	f8b9 0052 	ldrh.w	r0, [r9, #82]	; 0x52
   12566:	1c40      	adds	r0, r0, #1
   12568:	f8ad 0014 	strh.w	r0, [sp, #20]
   1256c:	f1b8 0f01 	cmp.w	r8, #1
   12570:	d161      	bne.n	12636 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xad6>
   12572:	e004      	b.n	1257e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa1e>
   12574:	f240 3151 	movw	r1, #849	; 0x351
   12578:	2006      	movs	r0, #6
   1257a:	f7fa fc85 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1257e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   12582:	b3e8      	cbz	r0, 12600 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa0>
   12584:	78a0      	ldrb	r0, [r4, #2]
   12586:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1258a:	bbc8      	cbnz	r0, 12600 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa0>
   1258c:	68b8      	ldr	r0, [r7, #8]
   1258e:	f00d facf 	bl	1fb30 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>
   12592:	1c40      	adds	r0, r0, #1
   12594:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   12598:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   1259c:	89b0      	ldrh	r0, [r6, #12]
   1259e:	1a11      	subs	r1, r2, r0
   125a0:	f1ca 00ff 	rsb	r0, sl, #255	; 0xff
   125a4:	4281      	cmp	r1, r0
   125a6:	bfb8      	it	lt
   125a8:	4608      	movlt	r0, r1
   125aa:	f000 09ff 	and.w	r9, r0, #255	; 0xff
   125ae:	454a      	cmp	r2, r9
   125b0:	d939      	bls.n	12626 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac6>
   125b2:	78a0      	ldrb	r0, [r4, #2]
   125b4:	f010 0f01 	tst.w	r0, #1
   125b8:	d135      	bne.n	12626 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac6>
   125ba:	f045 0510 	orr.w	r5, r5, #16
   125be:	4629      	mov	r1, r5
   125c0:	9a06      	ldr	r2, [sp, #24]
   125c2:	68b8      	ldr	r0, [r7, #8]
   125c4:	f00d fa1a 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   125c8:	f1a9 0103 	sub.w	r1, r9, #3
   125cc:	f001 09ff 	and.w	r9, r1, #255	; 0xff
   125d0:	f10a 0003 	add.w	r0, sl, #3
   125d4:	4448      	add	r0, r9
   125d6:	f000 0aff 	and.w	sl, r0, #255	; 0xff
   125da:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   125de:	68b0      	ldr	r0, [r6, #8]
   125e0:	1808      	adds	r0, r1, r0
   125e2:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   125e6:	1840      	adds	r0, r0, r1
   125e8:	b282      	uxth	r2, r0
   125ea:	f104 0169 	add.w	r1, r4, #105	; 0x69
   125ee:	f104 0036 	add.w	r0, r4, #54	; 0x36
   125f2:	f7fd f843 	bl	f67c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   125f6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
   125fa:	7961      	ldrb	r1, [r4, #5]
   125fc:	4653      	mov	r3, sl
   125fe:	e000      	b.n	12602 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa2>
   12600:	e019      	b.n	12636 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xad6>
   12602:	2201      	movs	r2, #1
   12604:	4620      	mov	r0, r4
   12606:	f000 f913 	bl	12830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcd0>
   1260a:	9006      	str	r0, [sp, #24]
   1260c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   12610:	f89d 101a 	ldrb.w	r1, [sp, #26]
   12614:	2303      	movs	r3, #3
   12616:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1261a:	900a      	str	r0, [sp, #40]	; 0x28
   1261c:	2204      	movs	r2, #4
   1261e:	a90a      	add	r1, sp, #40	; 0x28
   12620:	68b8      	ldr	r0, [r7, #8]
   12622:	f00d fa89 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   12626:	464a      	mov	r2, r9
   12628:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1262a:	68b8      	ldr	r0, [r7, #8]
   1262c:	f00d f9c6 	bl	1f9bc <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>
   12630:	89b0      	ldrh	r0, [r6, #12]
   12632:	4448      	add	r0, r9
   12634:	81b0      	strh	r0, [r6, #12]
   12636:	f015 0f20 	tst.w	r5, #32
   1263a:	d005      	beq.n	12648 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae8>
   1263c:	2312      	movs	r3, #18
   1263e:	2205      	movs	r2, #5
   12640:	a901      	add	r1, sp, #4
   12642:	68b8      	ldr	r0, [r7, #8]
   12644:	f00d fa78 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   12648:	f015 0f40 	tst.w	r5, #64	; 0x40
   1264c:	d014      	beq.n	12678 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb18>
   1264e:	f1b8 0f00 	cmp.w	r8, #0
   12652:	bf1c      	itt	ne
   12654:	7965      	ldrbne	r5, [r4, #5]
   12656:	f894 0044 	ldrbne.w	r0, [r4, #68]	; 0x44
   1265a:	d057      	beq.n	1270c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbac>
   1265c:	4601      	mov	r1, r0
   1265e:	f994 2010 	ldrsb.w	r2, [r4, #16]
   12662:	4628      	mov	r0, r5
   12664:	f7fc ffd4 	bl	f610 <sym_TU25JD7DO6DVB4CJZMQBFSDAQTQESJXZMW7SAQY>
   12668:	f88d 0000 	strb.w	r0, [sp]
   1266c:	2301      	movs	r3, #1
   1266e:	2206      	movs	r2, #6
   12670:	4669      	mov	r1, sp
   12672:	68b8      	ldr	r0, [r7, #8]
   12674:	f00d fa60 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   12678:	69b0      	ldr	r0, [r6, #24]
   1267a:	b3e0      	cbz	r0, 126f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb96>
   1267c:	3040      	adds	r0, #64	; 0x40
   1267e:	f010 f9ac 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   12682:	b3c0      	cbz	r0, 126f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb96>
   12684:	69b0      	ldr	r0, [r6, #24]
   12686:	f890 00bd 	ldrb.w	r0, [r0, #189]	; 0xbd
   1268a:	b3a0      	cbz	r0, 126f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb96>
   1268c:	2107      	movs	r1, #7
   1268e:	68b8      	ldr	r0, [r7, #8]
   12690:	f00d f9ec 	bl	1fa6c <sym_H3NF7V2EYDGPUFAQEJQIA2BFAJPUZD343N5IYHY>
   12694:	2109      	movs	r1, #9
   12696:	7001      	strb	r1, [r0, #0]
   12698:	2132      	movs	r1, #50	; 0x32
   1269a:	7041      	strb	r1, [r0, #1]
   1269c:	69b1      	ldr	r1, [r6, #24]
   1269e:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
   126a2:	7081      	strb	r1, [r0, #2]
   126a4:	69b1      	ldr	r1, [r6, #24]
   126a6:	f8b1 1090 	ldrh.w	r1, [r1, #144]	; 0x90
   126aa:	0a09      	lsrs	r1, r1, #8
   126ac:	70c1      	strb	r1, [r0, #3]
   126ae:	69b1      	ldr	r1, [r6, #24]
   126b0:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
   126b4:	0c09      	lsrs	r1, r1, #16
   126b6:	7101      	strb	r1, [r0, #4]
   126b8:	69b1      	ldr	r1, [r6, #24]
   126ba:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
   126be:	0e09      	lsrs	r1, r1, #24
   126c0:	7141      	strb	r1, [r0, #5]
   126c2:	69b1      	ldr	r1, [r6, #24]
   126c4:	f891 10a1 	ldrb.w	r1, [r1, #161]	; 0xa1
   126c8:	7181      	strb	r1, [r0, #6]
   126ca:	69b1      	ldr	r1, [r6, #24]
   126cc:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
   126d0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   126d4:	fbb2 f2f1 	udiv	r2, r2, r1
   126d8:	71c2      	strb	r2, [r0, #7]
   126da:	69b2      	ldr	r2, [r6, #24]
   126dc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
   126e0:	fbb2 f1f1 	udiv	r1, r2, r1
   126e4:	7201      	strb	r1, [r0, #8]
   126e6:	69b1      	ldr	r1, [r6, #24]
   126e8:	4a0c      	ldr	r2, [pc, #48]	; (1271c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbbc>)
   126ea:	f8d1 109c 	ldr.w	r1, [r1, #156]	; 0x9c
   126ee:	fba2 2101 	umull	r2, r1, r2, r1
   126f2:	08c9      	lsrs	r1, r1, #3
   126f4:	7241      	strb	r1, [r0, #9]
   126f6:	2000      	movs	r0, #0
   126f8:	2800      	cmp	r0, #0
   126fa:	bf04      	itt	eq
   126fc:	b00f      	addeq	sp, #60	; 0x3c
   126fe:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12702:	f640 01fd 	movw	r1, #2301	; 0x8fd
   12706:	202d      	movs	r0, #45	; 0x2d
   12708:	f7fa fbbe 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1270c:	7925      	ldrb	r5, [r4, #4]
   1270e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   12712:	f00e f8be 	bl	20892 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY>
   12716:	e7a1      	b.n	1265c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xafc>
   12718:	00257fff 	.word	0x00257fff
   1271c:	10624dd3 	.word	0x10624dd3
   12720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12724:	4690      	mov	r8, r2
   12726:	460d      	mov	r5, r1
   12728:	4604      	mov	r4, r0
   1272a:	2903      	cmp	r1, #3
   1272c:	bf1b      	ittet	ne
   1272e:	f894 0080 	ldrbne.w	r0, [r4, #128]	; 0x80
   12732:	2800      	cmpne	r0, #0
   12734:	f04f 0900 	moveq.w	r9, #0
   12738:	f04f 0901 	movne.w	r9, #1
   1273c:	f005 fae4 	bl	17d08 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
   12740:	4606      	mov	r6, r0
   12742:	2d03      	cmp	r5, #3
   12744:	d008      	beq.n	12758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbf8>
   12746:	2701      	movs	r7, #1
   12748:	2d05      	cmp	r5, #5
   1274a:	bf02      	ittt	eq
   1274c:	78a0      	ldrbeq	r0, [r4, #2]
   1274e:	f010 0001 	andseq.w	r0, r0, #1
   12752:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12756:	e007      	b.n	12768 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc08>
   12758:	78a0      	ldrb	r0, [r4, #2]
   1275a:	2702      	movs	r7, #2
   1275c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   12760:	2800      	cmp	r0, #0
   12762:	bf08      	it	eq
   12764:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12768:	f1b9 0f00 	cmp.w	r9, #0
   1276c:	d159      	bne.n	12822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc2>
   1276e:	482e      	ldr	r0, [pc, #184]	; (12828 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc8>)
   12770:	7b80      	ldrb	r0, [r0, #14]
   12772:	b140      	cbz	r0, 12786 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc26>
   12774:	f00c ff16 	bl	1f5a4 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
   12778:	f888 0000 	strb.w	r0, [r8]
   1277c:	28ff      	cmp	r0, #255	; 0xff
   1277e:	d002      	beq.n	12786 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc26>
   12780:	f7fc fb90 	bl	eea4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
   12784:	4306      	orrs	r6, r0
   12786:	4d29      	ldr	r5, [pc, #164]	; (1282c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xccc>)
   12788:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
   1278c:	f104 0370 	add.w	r3, r4, #112	; 0x70
   12790:	68a9      	ldr	r1, [r5, #8]
   12792:	f811 0b03 	ldrb.w	r0, [r1], #3
   12796:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1279a:	f00c fe91 	bl	1f4c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   1279e:	f898 1000 	ldrb.w	r1, [r8]
   127a2:	29ff      	cmp	r1, #255	; 0xff
   127a4:	d004      	beq.n	127b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc50>
   127a6:	b9b8      	cbnz	r0, 127d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc78>
   127a8:	7ee0      	ldrb	r0, [r4, #27]
   127aa:	4288      	cmp	r0, r1
   127ac:	d116      	bne.n	127dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7c>
   127ae:	e013      	b.n	127d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc78>
   127b0:	b1a0      	cbz	r0, 127dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7c>
   127b2:	68a9      	ldr	r1, [r5, #8]
   127b4:	f811 0b03 	ldrb.w	r0, [r1], #3
   127b8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   127bc:	f7fc fb84 	bl	eec8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   127c0:	4680      	mov	r8, r0
   127c2:	f7fc fba5 	bl	ef10 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
   127c6:	b138      	cbz	r0, 127d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc78>
   127c8:	4640      	mov	r0, r8
   127ca:	f7fc fb2b 	bl	ee24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   127ce:	b118      	cbz	r0, 127d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc78>
   127d0:	2110      	movs	r1, #16
   127d2:	f7fc fec7 	bl	f564 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   127d6:	b108      	cbz	r0, 127dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7c>
   127d8:	2001      	movs	r0, #1
   127da:	e000      	b.n	127de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc7e>
   127dc:	2000      	movs	r0, #0
   127de:	78a1      	ldrb	r1, [r4, #2]
   127e0:	f011 0f04 	tst.w	r1, #4
   127e4:	d001      	beq.n	127ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8a>
   127e6:	b1e0      	cbz	r0, 12822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc2>
   127e8:	e018      	b.n	1281c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcbc>
   127ea:	b9be      	cbnz	r6, 1281c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcbc>
   127ec:	7c60      	ldrb	r0, [r4, #17]
   127ee:	2800      	cmp	r0, #0
   127f0:	bf18      	it	ne
   127f2:	42b8      	cmpne	r0, r7
   127f4:	d115      	bne.n	12822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc2>
   127f6:	68a9      	ldr	r1, [r5, #8]
   127f8:	f811 0b03 	ldrb.w	r0, [r1], #3
   127fc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12800:	f7fc fb62 	bl	eec8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   12804:	4604      	mov	r4, r0
   12806:	f7fc fb83 	bl	ef10 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
   1280a:	b138      	cbz	r0, 1281c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcbc>
   1280c:	4620      	mov	r0, r4
   1280e:	f7fc fb09 	bl	ee24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   12812:	b118      	cbz	r0, 1281c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcbc>
   12814:	2110      	movs	r1, #16
   12816:	f7fc fea5 	bl	f564 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   1281a:	b110      	cbz	r0, 12822 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xcc2>
   1281c:	2001      	movs	r0, #1
   1281e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12822:	2000      	movs	r0, #0
   12824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12828:	2000115c 	.word	0x2000115c
   1282c:	20000108 	.word	0x20000108
   12830:	b508      	push	{r3, lr}
   12832:	f04f 0c00 	mov.w	ip, #0
   12836:	f8cd c000 	str.w	ip, [sp]
   1283a:	2908      	cmp	r1, #8
   1283c:	bf04      	itt	eq
   1283e:	f44f 71c8 	moveq.w	r1, #400	; 0x190
   12842:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   12846:	d010      	beq.n	1286a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd0a>
   12848:	2904      	cmp	r1, #4
   1284a:	bf04      	itt	eq
   1284c:	f44f 71bf 	moveq.w	r1, #382	; 0x17e
   12850:	f04f 0c10 	moveq.w	ip, #16
   12854:	d009      	beq.n	1286a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd0a>
   12856:	2902      	cmp	r1, #2
   12858:	bf07      	ittee	eq
   1285a:	f10c 0118 	addeq.w	r1, ip, #24
   1285e:	f04f 0c04 	moveq.w	ip, #4
   12862:	f10c 0128 	addne.w	r1, ip, #40	; 0x28
   12866:	f04f 0c08 	movne.w	ip, #8
   1286a:	1d5b      	adds	r3, r3, #5
   1286c:	fb13 130c 	smlabb	r3, r3, ip, r1
   12870:	f890 c044 	ldrb.w	ip, [r0, #68]	; 0x44
   12874:	f89d 1000 	ldrb.w	r1, [sp]
   12878:	f36c 0105 	bfi	r1, ip, #0, #6
   1287c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   12880:	f88d 1000 	strb.w	r1, [sp]
   12884:	7940      	ldrb	r0, [r0, #5]
   12886:	2801      	cmp	r0, #1
   12888:	d00b      	beq.n	128a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd42>
   1288a:	2802      	cmp	r0, #2
   1288c:	d010      	beq.n	128b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd50>
   1288e:	2804      	cmp	r0, #4
   12890:	bf18      	it	ne
   12892:	2808      	cmpne	r0, #8
   12894:	d012      	beq.n	128bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd5c>
   12896:	f240 71b2 	movw	r1, #1970	; 0x7b2
   1289a:	f04f 002d 	mov.w	r0, #45	; 0x2d
   1289e:	f7fa faf3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   128a2:	f89d 0002 	ldrb.w	r0, [sp, #2]
   128a6:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
   128aa:	f88d 0002 	strb.w	r0, [sp, #2]
   128ae:	e00c      	b.n	128ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6a>
   128b0:	f89d 0002 	ldrb.w	r0, [sp, #2]
   128b4:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
   128b8:	3020      	adds	r0, #32
   128ba:	e004      	b.n	128c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd66>
   128bc:	f89d 0002 	ldrb.w	r0, [sp, #2]
   128c0:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
   128c4:	3040      	adds	r0, #64	; 0x40
   128c6:	f88d 0002 	strb.w	r0, [sp, #2]
   128ca:	20ca      	movs	r0, #202	; 0xca
   128cc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
   128d0:	fb03 0002 	mla	r0, r3, r2, r0
   128d4:	4a0e      	ldr	r2, [pc, #56]	; (12910 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdb0>)
   128d6:	4290      	cmp	r0, r2
   128d8:	d304      	bcc.n	128e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd84>
   128da:	f240 71c6 	movw	r1, #1990	; 0x7c6
   128de:	202d      	movs	r0, #45	; 0x2d
   128e0:	f7fa fad2 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   128e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   128e8:	f88d 1000 	strb.w	r1, [sp]
   128ec:	4909      	ldr	r1, [pc, #36]	; (12914 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdb4>)
   128ee:	fba1 1000 	umull	r1, r0, r1, r0
   128f2:	f8bd 1001 	ldrh.w	r1, [sp, #1]
   128f6:	0900      	lsrs	r0, r0, #4
   128f8:	f360 010c 	bfi	r1, r0, #0, #13
   128fc:	f8ad 1001 	strh.w	r1, [sp, #1]
   12900:	f8bd 0000 	ldrh.w	r0, [sp]
   12904:	f89d 1002 	ldrb.w	r1, [sp, #2]
   12908:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1290c:	bd08      	pop	{r3, pc}
   1290e:	0000      	.short	0x0000
   12910:	0003bfc4 	.word	0x0003bfc4
   12914:	88888889 	.word	0x88888889
   12918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1291c:	4604      	mov	r4, r0
   1291e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12920:	f000 0a01 	and.w	sl, r0, #1
   12924:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   12928:	f104 0026 	add.w	r0, r4, #38	; 0x26
   1292c:	28ff      	cmp	r0, #255	; 0xff
   1292e:	bf28      	it	cs
   12930:	20ff      	movcs	r0, #255	; 0xff
   12932:	300a      	adds	r0, #10
   12934:	b280      	uxth	r0, r0
   12936:	28ff      	cmp	r0, #255	; 0xff
   12938:	bf28      	it	cs
   1293a:	20ff      	movcs	r0, #255	; 0xff
   1293c:	ea5a 0e0b 	orrs.w	lr, sl, fp
   12940:	f1a4 0cd9 	sub.w	ip, r4, #217	; 0xd9
   12944:	fa1f fc8c 	uxth.w	ip, ip
   12948:	f10c 05f6 	add.w	r5, ip, #246	; 0xf6
   1294c:	f244 2655 	movw	r6, #16981	; 0x4255
   12950:	fb05 f506 	mul.w	r5, r5, r6
   12954:	ea4f 5595 	mov.w	r5, r5, lsr #22
   12958:	9500      	str	r5, [sp, #0]
   1295a:	fb0c f506 	mul.w	r5, ip, r6
   1295e:	ea4f 5895 	mov.w	r8, r5, lsr #22
   12962:	f008 05ff 	and.w	r5, r8, #255	; 0xff
   12966:	f06f 06f6 	mvn.w	r6, #246	; 0xf6
   1296a:	fb15 f506 	smulbb	r5, r5, r6
   1296e:	eb05 070c 	add.w	r7, r5, ip
   12972:	f107 0c08 	add.w	ip, r7, #8
   12976:	fa1f fc8c 	uxth.w	ip, ip
   1297a:	f10c 0905 	add.w	r9, ip, #5
   1297e:	f04f 0c00 	mov.w	ip, #0
   12982:	f44f 75c8 	mov.w	r5, #400	; 0x190
   12986:	f44f 76bf 	mov.w	r6, #382	; 0x17e
   1298a:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
   1298e:	f000 8116 	beq.w	12bbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x105e>
   12992:	f1bb 0f00 	cmp.w	fp, #0
   12996:	d017      	beq.n	129c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe68>
   12998:	2a08      	cmp	r2, #8
   1299a:	bf04      	itt	eq
   1299c:	46ab      	moveq	fp, r5
   1299e:	2040      	moveq	r0, #64	; 0x40
   129a0:	d00c      	beq.n	129bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe5c>
   129a2:	2a04      	cmp	r2, #4
   129a4:	bf04      	itt	eq
   129a6:	46b3      	moveq	fp, r6
   129a8:	2010      	moveq	r0, #16
   129aa:	d007      	beq.n	129bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe5c>
   129ac:	2a02      	cmp	r2, #2
   129ae:	bf07      	ittee	eq
   129b0:	f10c 0b18 	addeq.w	fp, ip, #24
   129b4:	2004      	moveq	r0, #4
   129b6:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
   129ba:	2008      	movne	r0, #8
   129bc:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   129c0:	eb0e 1080 	add.w	r0, lr, r0, lsl #6
   129c4:	4458      	add	r0, fp
   129c6:	e01a      	b.n	129fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe9e>
   129c8:	b1db      	cbz	r3, 12a02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xea2>
   129ca:	2a08      	cmp	r2, #8
   129cc:	bf04      	itt	eq
   129ce:	4628      	moveq	r0, r5
   129d0:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   129d4:	d00f      	beq.n	129f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe96>
   129d6:	2a04      	cmp	r2, #4
   129d8:	bf04      	itt	eq
   129da:	4630      	moveq	r0, r6
   129dc:	f04f 0b10 	moveq.w	fp, #16
   129e0:	d009      	beq.n	129f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xe96>
   129e2:	2a02      	cmp	r2, #2
   129e4:	bf07      	ittee	eq
   129e6:	f10c 0018 	addeq.w	r0, ip, #24
   129ea:	f04f 0b04 	moveq.w	fp, #4
   129ee:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
   129f2:	f04f 0b08 	movne.w	fp, #8
   129f6:	eb0b 1b8b 	add.w	fp, fp, fp, lsl #6
   129fa:	eb00 008b 	add.w	r0, r0, fp, lsl #2
   129fe:	4408      	add	r0, r1
   12a00:	e019      	b.n	12a36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xed6>
   12a02:	2a08      	cmp	r2, #8
   12a04:	bf04      	itt	eq
   12a06:	46ab      	moveq	fp, r5
   12a08:	f04f 0e40 	moveq.w	lr, #64	; 0x40
   12a0c:	d00f      	beq.n	12a2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xece>
   12a0e:	2a04      	cmp	r2, #4
   12a10:	bf04      	itt	eq
   12a12:	46b3      	moveq	fp, r6
   12a14:	f04f 0e10 	moveq.w	lr, #16
   12a18:	d009      	beq.n	12a2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xece>
   12a1a:	2a02      	cmp	r2, #2
   12a1c:	bf07      	ittee	eq
   12a1e:	f10c 0b18 	addeq.w	fp, ip, #24
   12a22:	f04f 0e04 	moveq.w	lr, #4
   12a26:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
   12a2a:	f04f 0e08 	movne.w	lr, #8
   12a2e:	1d40      	adds	r0, r0, #5
   12a30:	fb00 100e 	mla	r0, r0, lr, r1
   12a34:	4458      	add	r0, fp
   12a36:	309c      	adds	r0, #156	; 0x9c
   12a38:	f002 010c 	and.w	r1, r2, #12
   12a3c:	2900      	cmp	r1, #0
   12a3e:	bf18      	it	ne
   12a40:	2128      	movne	r1, #40	; 0x28
   12a42:	4408      	add	r0, r1
   12a44:	bf18      	it	ne
   12a46:	f500 6035 	addne.w	r0, r0, #2896	; 0xb50
   12a4a:	d117      	bne.n	12a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf1c>
   12a4c:	2a08      	cmp	r2, #8
   12a4e:	bf04      	itt	eq
   12a50:	46ab      	moveq	fp, r5
   12a52:	2140      	moveq	r1, #64	; 0x40
   12a54:	d00c      	beq.n	12a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf10>
   12a56:	2a04      	cmp	r2, #4
   12a58:	bf04      	itt	eq
   12a5a:	46b3      	moveq	fp, r6
   12a5c:	2110      	moveq	r1, #16
   12a5e:	d007      	beq.n	12a70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf10>
   12a60:	2a02      	cmp	r2, #2
   12a62:	bf07      	ittee	eq
   12a64:	f10c 0b18 	addeq.w	fp, ip, #24
   12a68:	2104      	moveq	r1, #4
   12a6a:	f10c 0b28 	addne.w	fp, ip, #40	; 0x28
   12a6e:	2108      	movne	r1, #8
   12a70:	ebc1 0ec1 	rsb	lr, r1, r1, lsl #3
   12a74:	eb0e 1141 	add.w	r1, lr, r1, lsl #5
   12a78:	4459      	add	r1, fp
   12a7a:	4408      	add	r0, r1
   12a7c:	3098      	adds	r0, #152	; 0x98
   12a7e:	f1ba 0f00 	cmp.w	sl, #0
   12a82:	d018      	beq.n	12ab6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf56>
   12a84:	2a08      	cmp	r2, #8
   12a86:	bf08      	it	eq
   12a88:	2140      	moveq	r1, #64	; 0x40
   12a8a:	d00c      	beq.n	12aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf46>
   12a8c:	2a04      	cmp	r2, #4
   12a8e:	bf04      	itt	eq
   12a90:	4635      	moveq	r5, r6
   12a92:	2110      	moveq	r1, #16
   12a94:	d007      	beq.n	12aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf46>
   12a96:	2a02      	cmp	r2, #2
   12a98:	bf07      	ittee	eq
   12a9a:	f10c 0518 	addeq.w	r5, ip, #24
   12a9e:	2104      	moveq	r1, #4
   12aa0:	f10c 0528 	addne.w	r5, ip, #40	; 0x28
   12aa4:	2108      	movne	r1, #8
   12aa6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   12aaa:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   12aae:	4429      	add	r1, r5
   12ab0:	4408      	add	r0, r1
   12ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ab6:	b1db      	cbz	r3, 12af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf90>
   12ab8:	2a08      	cmp	r2, #8
   12aba:	bf04      	itt	eq
   12abc:	4629      	moveq	r1, r5
   12abe:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   12ac2:	d00f      	beq.n	12ae4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf84>
   12ac4:	2a04      	cmp	r2, #4
   12ac6:	bf04      	itt	eq
   12ac8:	4631      	moveq	r1, r6
   12aca:	f04f 0a10 	moveq.w	sl, #16
   12ace:	d009      	beq.n	12ae4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf84>
   12ad0:	2a02      	cmp	r2, #2
   12ad2:	bf07      	ittee	eq
   12ad4:	f10c 0118 	addeq.w	r1, ip, #24
   12ad8:	f04f 0a04 	moveq.w	sl, #4
   12adc:	f10c 0128 	addne.w	r1, ip, #40	; 0x28
   12ae0:	f04f 0a08 	movne.w	sl, #8
   12ae4:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
   12ae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   12aec:	4408      	add	r0, r1
   12aee:	e01f      	b.n	12b30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfd0>
   12af0:	f104 010e 	add.w	r1, r4, #14
   12af4:	29ff      	cmp	r1, #255	; 0xff
   12af6:	bf28      	it	cs
   12af8:	21ff      	movcs	r1, #255	; 0xff
   12afa:	b289      	uxth	r1, r1
   12afc:	2a08      	cmp	r2, #8
   12afe:	bf04      	itt	eq
   12b00:	46aa      	moveq	sl, r5
   12b02:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   12b06:	d00f      	beq.n	12b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfc8>
   12b08:	2a04      	cmp	r2, #4
   12b0a:	bf04      	itt	eq
   12b0c:	46b2      	moveq	sl, r6
   12b0e:	f04f 0b10 	moveq.w	fp, #16
   12b12:	d009      	beq.n	12b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfc8>
   12b14:	2a02      	cmp	r2, #2
   12b16:	bf07      	ittee	eq
   12b18:	f10c 0a18 	addeq.w	sl, ip, #24
   12b1c:	f04f 0b04 	moveq.w	fp, #4
   12b20:	f10c 0a28 	addne.w	sl, ip, #40	; 0x28
   12b24:	f04f 0b08 	movne.w	fp, #8
   12b28:	1d49      	adds	r1, r1, #5
   12b2a:	fb01 000b 	mla	r0, r1, fp, r0
   12b2e:	4450      	add	r0, sl
   12b30:	2cd9      	cmp	r4, #217	; 0xd9
   12b32:	bf98      	it	ls
   12b34:	e8bd 8ff8 	ldmials.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b38:	b193      	cbz	r3, 12b60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1000>
   12b3a:	9900      	ldr	r1, [sp, #0]
   12b3c:	2a08      	cmp	r2, #8
   12b3e:	d07d      	beq.n	12c3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10dc>
   12b40:	2a04      	cmp	r2, #4
   12b42:	d07c      	beq.n	12c3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10de>
   12b44:	2a02      	cmp	r2, #2
   12b46:	d07b      	beq.n	12c40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e0>
   12b48:	e080      	b.n	12c4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10ec>
   12b4a:	bf00      	nop
   12b4c:	eb02 1282 	add.w	r2, r2, r2, lsl #6
   12b50:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   12b54:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
   12b58:	fb01 0002 	mla	r0, r1, r2, r0
   12b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b60:	f008 01ff 	and.w	r1, r8, #255	; 0xff
   12b64:	2a08      	cmp	r2, #8
   12b66:	bf04      	itt	eq
   12b68:	462b      	moveq	r3, r5
   12b6a:	2440      	moveq	r4, #64	; 0x40
   12b6c:	d00c      	beq.n	12b88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1028>
   12b6e:	2a04      	cmp	r2, #4
   12b70:	bf04      	itt	eq
   12b72:	4633      	moveq	r3, r6
   12b74:	2410      	moveq	r4, #16
   12b76:	d007      	beq.n	12b88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1028>
   12b78:	2a02      	cmp	r2, #2
   12b7a:	bf07      	ittee	eq
   12b7c:	f10c 0318 	addeq.w	r3, ip, #24
   12b80:	2404      	moveq	r4, #4
   12b82:	f10c 0328 	addne.w	r3, ip, #40	; 0x28
   12b86:	2408      	movne	r4, #8
   12b88:	eb04 1484 	add.w	r4, r4, r4, lsl #6
   12b8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12b90:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
   12b94:	fb01 0003 	mla	r0, r1, r3, r0
   12b98:	0439      	lsls	r1, r7, #16
   12b9a:	0c09      	lsrs	r1, r1, #16
   12b9c:	bf08      	it	eq
   12b9e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba2:	2a08      	cmp	r2, #8
   12ba4:	d07e      	beq.n	12ca4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1144>
   12ba6:	2a04      	cmp	r2, #4
   12ba8:	d07d      	beq.n	12ca6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1146>
   12baa:	2a02      	cmp	r2, #2
   12bac:	d07c      	beq.n	12ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1148>
   12bae:	e085      	b.n	12cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x115c>
   12bb0:	fb09 0001 	mla	r0, r9, r1, r0
   12bb4:	4428      	add	r0, r5
   12bb6:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   12bba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bbe:	b1db      	cbz	r3, 12bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1098>
   12bc0:	2a08      	cmp	r2, #8
   12bc2:	bf04      	itt	eq
   12bc4:	4628      	moveq	r0, r5
   12bc6:	f04f 0a40 	moveq.w	sl, #64	; 0x40
   12bca:	d00f      	beq.n	12bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x108c>
   12bcc:	2a04      	cmp	r2, #4
   12bce:	bf04      	itt	eq
   12bd0:	4630      	moveq	r0, r6
   12bd2:	f04f 0a10 	moveq.w	sl, #16
   12bd6:	d009      	beq.n	12bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x108c>
   12bd8:	2a02      	cmp	r2, #2
   12bda:	bf07      	ittee	eq
   12bdc:	f10c 0018 	addeq.w	r0, ip, #24
   12be0:	f04f 0a04 	moveq.w	sl, #4
   12be4:	f10c 0028 	addne.w	r0, ip, #40	; 0x28
   12be8:	f04f 0a08 	movne.w	sl, #8
   12bec:	eb0a 1a8a 	add.w	sl, sl, sl, lsl #6
   12bf0:	eb00 008a 	add.w	r0, r0, sl, lsl #2
   12bf4:	4408      	add	r0, r1
   12bf6:	e019      	b.n	12c2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10cc>
   12bf8:	2a08      	cmp	r2, #8
   12bfa:	bf04      	itt	eq
   12bfc:	46aa      	moveq	sl, r5
   12bfe:	f04f 0b40 	moveq.w	fp, #64	; 0x40
   12c02:	d00f      	beq.n	12c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c4>
   12c04:	2a04      	cmp	r2, #4
   12c06:	bf04      	itt	eq
   12c08:	46b2      	moveq	sl, r6
   12c0a:	f04f 0b10 	moveq.w	fp, #16
   12c0e:	d009      	beq.n	12c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10c4>
   12c10:	2a02      	cmp	r2, #2
   12c12:	bf07      	ittee	eq
   12c14:	f10c 0a18 	addeq.w	sl, ip, #24
   12c18:	f04f 0b04 	moveq.w	fp, #4
   12c1c:	f10c 0a28 	addne.w	sl, ip, #40	; 0x28
   12c20:	f04f 0b08 	movne.w	fp, #8
   12c24:	1d40      	adds	r0, r0, #5
   12c26:	fb00 100b 	mla	r0, r0, fp, r1
   12c2a:	4450      	add	r0, sl
   12c2c:	2cd9      	cmp	r4, #217	; 0xd9
   12c2e:	bf98      	it	ls
   12c30:	e8bd 8ff8 	ldmials.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c34:	b1bb      	cbz	r3, 12c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1106>
   12c36:	9900      	ldr	r1, [sp, #0]
   12c38:	2a08      	cmp	r2, #8
   12c3a:	e002      	b.n	12c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10e2>
   12c3c:	e00d      	b.n	12c5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fa>
   12c3e:	e009      	b.n	12c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10f4>
   12c40:	e00d      	b.n	12c5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fe>
   12c42:	d00a      	beq.n	12c5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fa>
   12c44:	2a04      	cmp	r2, #4
   12c46:	d005      	beq.n	12c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10f4>
   12c48:	2a02      	cmp	r2, #2
   12c4a:	d008      	beq.n	12c5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x10fe>
   12c4c:	f10c 0528 	add.w	r5, ip, #40	; 0x28
   12c50:	2208      	movs	r2, #8
   12c52:	e77b      	b.n	12b4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfec>
   12c54:	4635      	mov	r5, r6
   12c56:	2210      	movs	r2, #16
   12c58:	e778      	b.n	12b4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfec>
   12c5a:	2240      	movs	r2, #64	; 0x40
   12c5c:	e776      	b.n	12b4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfec>
   12c5e:	f10c 0518 	add.w	r5, ip, #24
   12c62:	2204      	movs	r2, #4
   12c64:	e772      	b.n	12b4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfec>
   12c66:	f008 01ff 	and.w	r1, r8, #255	; 0xff
   12c6a:	2a08      	cmp	r2, #8
   12c6c:	bf04      	itt	eq
   12c6e:	462b      	moveq	r3, r5
   12c70:	2440      	moveq	r4, #64	; 0x40
   12c72:	d00c      	beq.n	12c8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x112e>
   12c74:	2a04      	cmp	r2, #4
   12c76:	bf04      	itt	eq
   12c78:	4633      	moveq	r3, r6
   12c7a:	2410      	moveq	r4, #16
   12c7c:	d007      	beq.n	12c8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x112e>
   12c7e:	2a02      	cmp	r2, #2
   12c80:	bf07      	ittee	eq
   12c82:	f10c 0318 	addeq.w	r3, ip, #24
   12c86:	2404      	moveq	r4, #4
   12c88:	f10c 0328 	addne.w	r3, ip, #40	; 0x28
   12c8c:	2408      	movne	r4, #8
   12c8e:	eb04 1484 	add.w	r4, r4, r4, lsl #6
   12c92:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12c96:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
   12c9a:	fb01 0003 	mla	r0, r1, r3, r0
   12c9e:	0439      	lsls	r1, r7, #16
   12ca0:	0c09      	lsrs	r1, r1, #16
   12ca2:	e002      	b.n	12caa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114a>
   12ca4:	e011      	b.n	12cca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x116a>
   12ca6:	e00d      	b.n	12cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1164>
   12ca8:	e011      	b.n	12cce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x116e>
   12caa:	bf08      	it	eq
   12cac:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cb0:	2a08      	cmp	r2, #8
   12cb2:	d00a      	beq.n	12cca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x116a>
   12cb4:	2a04      	cmp	r2, #4
   12cb6:	d005      	beq.n	12cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1164>
   12cb8:	2a02      	cmp	r2, #2
   12cba:	d008      	beq.n	12cce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x116e>
   12cbc:	f10c 0528 	add.w	r5, ip, #40	; 0x28
   12cc0:	2108      	movs	r1, #8
   12cc2:	e775      	b.n	12bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1050>
   12cc4:	4635      	mov	r5, r6
   12cc6:	2110      	movs	r1, #16
   12cc8:	e772      	b.n	12bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1050>
   12cca:	2140      	movs	r1, #64	; 0x40
   12ccc:	e770      	b.n	12bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1050>
   12cce:	f10c 0518 	add.w	r5, ip, #24
   12cd2:	2104      	movs	r1, #4
   12cd4:	e76c      	b.n	12bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1050>
   12cd6:	0000      	movs	r0, r0
   12cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cdc:	4604      	mov	r4, r0
   12cde:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
   12ce2:	4e30      	ldr	r6, [pc, #192]	; (12da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1244>)
   12ce4:	1c40      	adds	r0, r0, #1
   12ce6:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
   12cea:	7bb0      	ldrb	r0, [r6, #14]
   12cec:	2500      	movs	r5, #0
   12cee:	b120      	cbz	r0, 12cfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x119a>
   12cf0:	f004 ffd6 	bl	17ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   12cf4:	f004 fd86 	bl	17804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   12cf8:	73b5      	strb	r5, [r6, #14]
   12cfa:	7035      	strb	r5, [r6, #0]
   12cfc:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
   12d00:	b128      	cbz	r0, 12d0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11ae>
   12d02:	4620      	mov	r0, r4
   12d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12d08:	2101      	movs	r1, #1
   12d0a:	f00d beae 	b.w	20a6a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   12d0e:	7b60      	ldrb	r0, [r4, #13]
   12d10:	2800      	cmp	r0, #0
   12d12:	d040      	beq.n	12d96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1236>
   12d14:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   12d18:	4288      	cmp	r0, r1
   12d1a:	d83c      	bhi.n	12d96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1236>
   12d1c:	2101      	movs	r1, #1
   12d1e:	4620      	mov	r0, r4
   12d20:	f00d fea3 	bl	20a6a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   12d24:	78a0      	ldrb	r0, [r4, #2]
   12d26:	f010 0f01 	tst.w	r0, #1
   12d2a:	d020      	beq.n	12d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x120e>
   12d2c:	6a20      	ldr	r0, [r4, #32]
   12d2e:	2643      	movs	r6, #67	; 0x43
   12d30:	8807      	ldrh	r7, [r0, #0]
   12d32:	f004 fc8f 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   12d36:	2800      	cmp	r0, #0
   12d38:	bf18      	it	ne
   12d3a:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d3e:	7820      	ldrb	r0, [r4, #0]
   12d40:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   12d44:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   12d48:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   12d4c:	7b60      	ldrb	r0, [r4, #13]
   12d4e:	b910      	cbnz	r0, 12d56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11f6>
   12d50:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
   12d54:	e003      	b.n	12d5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11fe>
   12d56:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   12d5a:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
   12d5e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   12d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12d66:	2216      	movs	r2, #22
   12d68:	490f      	ldr	r1, [pc, #60]	; (12da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1248>)
   12d6a:	f7fd b82b 	b.w	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   12d6e:	f64f 77ff 	movw	r7, #65535	; 0xffff
   12d72:	2643      	movs	r6, #67	; 0x43
   12d74:	f004 fc6e 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   12d78:	2800      	cmp	r0, #0
   12d7a:	bf18      	it	ne
   12d7c:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d80:	7820      	ldrb	r0, [r4, #0]
   12d82:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   12d86:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
   12d8a:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
   12d8e:	7b60      	ldrb	r0, [r4, #13]
   12d90:	2800      	cmp	r0, #0
   12d92:	d1e0      	bne.n	12d56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11f6>
   12d94:	e7dc      	b.n	12d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11f0>
   12d96:	4620      	mov	r0, r4
   12d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12d9c:	2100      	movs	r1, #0
   12d9e:	f00d be64 	b.w	20a6a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   12da2:	0000      	.short	0x0000
   12da4:	2000115c 	.word	0x2000115c
   12da8:	00020759 	.word	0x00020759
   12dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dae:	790a      	ldrb	r2, [r1, #4]
   12db0:	f012 0f18 	tst.w	r2, #24
   12db4:	d15e      	bne.n	12e74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1314>
   12db6:	4605      	mov	r5, r0
   12db8:	000c      	movs	r4, r1
   12dba:	d028      	beq.n	12e0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12ae>
   12dbc:	6820      	ldr	r0, [r4, #0]
   12dbe:	2800      	cmp	r0, #0
   12dc0:	d02a      	beq.n	12e18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12b8>
   12dc2:	f00d fd56 	bl	20872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   12dc6:	7b23      	ldrb	r3, [r4, #12]
   12dc8:	7b62      	ldrb	r2, [r4, #13]
   12dca:	2b04      	cmp	r3, #4
   12dcc:	bf08      	it	eq
   12dce:	2308      	moveq	r3, #8
   12dd0:	2a04      	cmp	r2, #4
   12dd2:	bf08      	it	eq
   12dd4:	2208      	moveq	r2, #8
   12dd6:	492a      	ldr	r1, [pc, #168]	; (12e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1320>)
   12dd8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   12ddc:	2b08      	cmp	r3, #8
   12dde:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   12de2:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   12de6:	fbb1 f7fc 	udiv	r7, r1, ip
   12dea:	bf08      	it	eq
   12dec:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   12df0:	d017      	beq.n	12e22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12c2>
   12df2:	2b04      	cmp	r3, #4
   12df4:	bf08      	it	eq
   12df6:	f04f 0c10 	moveq.w	ip, #16
   12dfa:	d012      	beq.n	12e22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12c2>
   12dfc:	2b02      	cmp	r3, #2
   12dfe:	bf07      	ittee	eq
   12e00:	f04f 0c04 	moveq.w	ip, #4
   12e04:	2112      	moveq	r1, #18
   12e06:	f04f 0c08 	movne.w	ip, #8
   12e0a:	2119      	movne	r1, #25
   12e0c:	e00a      	b.n	12e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12c4>
   12e0e:	f240 410b 	movw	r1, #1035	; 0x40b
   12e12:	202d      	movs	r0, #45	; 0x2d
   12e14:	f7fa f838 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12e18:	f240 410c 	movw	r1, #1036	; 0x40c
   12e1c:	202d      	movs	r0, #45	; 0x2d
   12e1e:	f7fa f833 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12e22:	2114      	movs	r1, #20
   12e24:	fb1c f101 	smulbb	r1, ip, r1
   12e28:	2600      	movs	r6, #0
   12e2a:	2b08      	cmp	r3, #8
   12e2c:	bf08      	it	eq
   12e2e:	f04f 0c40 	moveq.w	ip, #64	; 0x40
   12e32:	d021      	beq.n	12e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1318>
   12e34:	2b04      	cmp	r3, #4
   12e36:	bf08      	it	eq
   12e38:	f04f 0c2e 	moveq.w	ip, #46	; 0x2e
   12e3c:	d01c      	beq.n	12e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1318>
   12e3e:	46b4      	mov	ip, r6
   12e40:	2b02      	cmp	r3, #2
   12e42:	bf0c      	ite	eq
   12e44:	2318      	moveq	r3, #24
   12e46:	2328      	movne	r3, #40	; 0x28
   12e48:	4463      	add	r3, ip
   12e4a:	4419      	add	r1, r3
   12e4c:	fb11 7100 	smlabb	r1, r1, r0, r7
   12e50:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   12e54:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   12e58:	4401      	add	r1, r0
   12e5a:	88a0      	ldrh	r0, [r4, #4]
   12e5c:	9000      	str	r0, [sp, #0]
   12e5e:	2300      	movs	r3, #0
   12e60:	4628      	mov	r0, r5
   12e62:	f7ff fd59 	bl	12918 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xdb8>
   12e66:	68a1      	ldr	r1, [r4, #8]
   12e68:	f200 100b 	addw	r0, r0, #267	; 0x10b
   12e6c:	4281      	cmp	r1, r0
   12e6e:	bf3c      	itt	cc
   12e70:	4630      	movcc	r0, r6
   12e72:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
   12e74:	2001      	movs	r0, #1
   12e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e78:	f44f 73a8 	mov.w	r3, #336	; 0x150
   12e7c:	e7e4      	b.n	12e48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x12e8>
   12e7e:	0000      	.short	0x0000
   12e80:	00013308 	.word	0x00013308
   12e84:	b570      	push	{r4, r5, r6, lr}
   12e86:	4604      	mov	r4, r0
   12e88:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
   12e8c:	8808      	ldrh	r0, [r1, #0]
   12e8e:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
   12e92:	20ff      	movs	r0, #255	; 0xff
   12e94:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
   12e98:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12e9c:	4616      	mov	r6, r2
   12e9e:	460d      	mov	r5, r1
   12ea0:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
   12ea4:	2b00      	cmp	r3, #0
   12ea6:	bf18      	it	ne
   12ea8:	bd70      	popne	{r4, r5, r6, pc}
   12eaa:	6968      	ldr	r0, [r5, #20]
   12eac:	f00c fbcc 	bl	1f648 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   12eb0:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
   12eb4:	8ba8      	ldrh	r0, [r5, #28]
   12eb6:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
   12eba:	8be8      	ldrh	r0, [r5, #30]
   12ebc:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
   12ec0:	f895 02f9 	ldrb.w	r0, [r5, #761]	; 0x2f9
   12ec4:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
   12ec8:	7ea0      	ldrb	r0, [r4, #26]
   12eca:	2500      	movs	r5, #0
   12ecc:	b148      	cbz	r0, 12ee2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1382>
   12ece:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   12ed2:	2801      	cmp	r0, #1
   12ed4:	d105      	bne.n	12ee2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1382>
   12ed6:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   12eda:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   12ede:	2840      	cmp	r0, #64	; 0x40
   12ee0:	d02e      	beq.n	12f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e0>
   12ee2:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
   12ee6:	b140      	cbz	r0, 12efa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x139a>
   12ee8:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   12eec:	2801      	cmp	r0, #1
   12eee:	bf04      	itt	eq
   12ef0:	f894 006e 	ldrbeq.w	r0, [r4, #110]	; 0x6e
   12ef4:	f010 0fc0 	tsteq.w	r0, #192	; 0xc0
   12ef8:	d022      	beq.n	12f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e0>
   12efa:	f104 009a 	add.w	r0, r4, #154	; 0x9a
   12efe:	f00f fe02 	bl	22b06 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   12f02:	481c      	ldr	r0, [pc, #112]	; (12f74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1414>)
   12f04:	2eff      	cmp	r6, #255	; 0xff
   12f06:	6880      	ldr	r0, [r0, #8]
   12f08:	7801      	ldrb	r1, [r0, #0]
   12f0a:	f3c1 1180 	ubfx	r1, r1, #6, #1
   12f0e:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
   12f12:	f8d0 1003 	ldr.w	r1, [r0, #3]
   12f16:	d021      	beq.n	12f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13fc>
   12f18:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   12f1c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   12f20:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
   12f24:	f104 0294 	add.w	r2, r4, #148	; 0x94
   12f28:	1e51      	subs	r1, r2, #1
   12f2a:	4630      	mov	r0, r6
   12f2c:	f7fb ffa0 	bl	ee70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   12f30:	b178      	cbz	r0, 12f52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13f2>
   12f32:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
   12f36:	f040 0002 	orr.w	r0, r0, #2
   12f3a:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
   12f3e:	bd70      	pop	{r4, r5, r6, pc}
   12f40:	f8d4 0069 	ldr.w	r0, [r4, #105]	; 0x69
   12f44:	f8c4 009a 	str.w	r0, [r4, #154]	; 0x9a
   12f48:	f8b4 006d 	ldrh.w	r0, [r4, #109]	; 0x6d
   12f4c:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
   12f50:	e7d7      	b.n	12f02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13a2>
   12f52:	f640 418b 	movw	r1, #3211	; 0xc8b
   12f56:	202d      	movs	r0, #45	; 0x2d
   12f58:	f7f9 ff96 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   12f5c:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
   12f60:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   12f64:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
   12f68:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
   12f6c:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
   12f70:	bd70      	pop	{r4, r5, r6, pc}
   12f72:	0000      	.short	0x0000
   12f74:	20000108 	.word	0x20000108
   12f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f7c:	b083      	sub	sp, #12
   12f7e:	4e5a      	ldr	r6, [pc, #360]	; (130e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1588>)
   12f80:	f04f 0aff 	mov.w	sl, #255	; 0xff
   12f84:	4604      	mov	r4, r0
   12f86:	f88d a000 	strb.w	sl, [sp]
   12f8a:	68b0      	ldr	r0, [r6, #8]
   12f8c:	f04f 0b01 	mov.w	fp, #1
   12f90:	466a      	mov	r2, sp
   12f92:	7801      	ldrb	r1, [r0, #0]
   12f94:	f3c1 1880 	ubfx	r8, r1, #6, #1
   12f98:	f8d0 1003 	ldr.w	r1, [r0, #3]
   12f9c:	9101      	str	r1, [sp, #4]
   12f9e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   12fa2:	f8ad 0008 	strh.w	r0, [sp, #8]
   12fa6:	2105      	movs	r1, #5
   12fa8:	4620      	mov	r0, r4
   12faa:	f7ff fbb9 	bl	12720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc0>
   12fae:	2800      	cmp	r0, #0
   12fb0:	d07e      	beq.n	130b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1550>
   12fb2:	68b0      	ldr	r0, [r6, #8]
   12fb4:	6a25      	ldr	r5, [r4, #32]
   12fb6:	7967      	ldrb	r7, [r4, #5]
   12fb8:	f8d0 100f 	ldr.w	r1, [r0, #15]
   12fbc:	61a9      	str	r1, [r5, #24]
   12fbe:	f8d0 1013 	ldr.w	r1, [r0, #19]
   12fc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   12fc6:	6229      	str	r1, [r5, #32]
   12fc8:	f8b0 0019 	ldrh.w	r0, [r0, #25]
   12fcc:	f00c fb30 	bl	1f630 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   12fd0:	4681      	mov	r9, r0
   12fd2:	6168      	str	r0, [r5, #20]
   12fd4:	68b0      	ldr	r0, [r6, #8]
   12fd6:	4649      	mov	r1, r9
   12fd8:	7d80      	ldrb	r0, [r0, #22]
   12fda:	f00c fcc3 	bl	1f964 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   12fde:	8528      	strh	r0, [r5, #40]	; 0x28
   12fe0:	68b0      	ldr	r0, [r6, #8]
   12fe2:	4649      	mov	r1, r9
   12fe4:	f8b0 0017 	ldrh.w	r0, [r0, #23]
   12fe8:	f00c fcb3 	bl	1f952 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   12fec:	6268      	str	r0, [r5, #36]	; 0x24
   12fee:	68b0      	ldr	r0, [r6, #8]
   12ff0:	f8b0 101b 	ldrh.w	r1, [r0, #27]
   12ff4:	83a9      	strh	r1, [r5, #28]
   12ff6:	f8b0 101d 	ldrh.w	r1, [r0, #29]
   12ffa:	83e9      	strh	r1, [r5, #30]
   12ffc:	f100 011f 	add.w	r1, r0, #31
   13000:	f105 00ce 	add.w	r0, r5, #206	; 0xce
   13004:	f00f fd7a 	bl	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   13008:	68b0      	ldr	r0, [r6, #8]
   1300a:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   1300e:	f001 011f 	and.w	r1, r1, #31
   13012:	f885 10d9 	strb.w	r1, [r5, #217]	; 0xd9
   13016:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   1301a:	0940      	lsrs	r0, r0, #5
   1301c:	f885 02f9 	strb.w	r0, [r5, #761]	; 0x2f9
   13020:	f885 706e 	strb.w	r7, [r5, #110]	; 0x6e
   13024:	f105 0066 	add.w	r0, r5, #102	; 0x66
   13028:	f885 706f 	strb.w	r7, [r5, #111]	; 0x6f
   1302c:	f880 a00a 	strb.w	sl, [r0, #10]
   13030:	f017 0f0c 	tst.w	r7, #12
   13034:	bf0c      	ite	eq
   13036:	2100      	moveq	r1, #0
   13038:	2101      	movne	r1, #1
   1303a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1303e:	f00d f88c 	bl	2015a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   13042:	7c20      	ldrb	r0, [r4, #16]
   13044:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
   13048:	2300      	movs	r3, #0
   1304a:	f89d 2000 	ldrb.w	r2, [sp]
   1304e:	4620      	mov	r0, r4
   13050:	6a21      	ldr	r1, [r4, #32]
   13052:	f7ff ff17 	bl	12e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1324>
   13056:	6a20      	ldr	r0, [r4, #32]
   13058:	2201      	movs	r2, #1
   1305a:	8801      	ldrh	r1, [r0, #0]
   1305c:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
   13060:	f890 10cd 	ldrb.w	r1, [r0, #205]	; 0xcd
   13064:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
   13068:	4621      	mov	r1, r4
   1306a:	f000 fc85 	bl	13978 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   1306e:	481f      	ldr	r0, [pc, #124]	; (130ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158c>)
   13070:	2100      	movs	r1, #0
   13072:	ad01      	add	r5, sp, #4
   13074:	6807      	ldr	r7, [r0, #0]
   13076:	68b0      	ldr	r0, [r6, #8]
   13078:	8001      	strh	r1, [r0, #0]
   1307a:	2108      	movs	r1, #8
   1307c:	f00c fdf1 	bl	1fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   13080:	2100      	movs	r1, #0
   13082:	68b0      	ldr	r0, [r6, #8]
   13084:	f00c fcb1 	bl	1f9ea <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>
   13088:	2200      	movs	r2, #0
   1308a:	4639      	mov	r1, r7
   1308c:	68b0      	ldr	r0, [r6, #8]
   1308e:	f00c fcb5 	bl	1f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>
   13092:	2306      	movs	r3, #6
   13094:	2200      	movs	r2, #0
   13096:	f104 0169 	add.w	r1, r4, #105	; 0x69
   1309a:	68b0      	ldr	r0, [r6, #8]
   1309c:	f00c fd4c 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   130a0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   130a4:	68b0      	ldr	r0, [r6, #8]
   130a6:	f00c fe15 	bl	1fcd4 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   130aa:	4641      	mov	r1, r8
   130ac:	68b0      	ldr	r0, [r6, #8]
   130ae:	e000      	b.n	130b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1552>
   130b0:	e012      	b.n	130d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1578>
   130b2:	f00c fdff 	bl	1fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   130b6:	2306      	movs	r3, #6
   130b8:	2201      	movs	r2, #1
   130ba:	4629      	mov	r1, r5
   130bc:	68b0      	ldr	r0, [r6, #8]
   130be:	f00c fd3b 	bl	1fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>
   130c2:	7961      	ldrb	r1, [r4, #5]
   130c4:	20ff      	movs	r0, #255	; 0xff
   130c6:	f005 fd23 	bl	18b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   130ca:	68b0      	ldr	r0, [r6, #8]
   130cc:	f005 fabc 	bl	18648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   130d0:	4907      	ldr	r1, [pc, #28]	; (130f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1590>)
   130d2:	2009      	movs	r0, #9
   130d4:	7008      	strb	r0, [r1, #0]
   130d6:	e002      	b.n	130de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x157e>
   130d8:	4620      	mov	r0, r4
   130da:	f7ff fdfd 	bl	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>
   130de:	b003      	add	sp, #12
   130e0:	4658      	mov	r0, fp
   130e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130e6:	0000      	.short	0x0000
   130e8:	20000108 	.word	0x20000108
   130ec:	000132f8 	.word	0x000132f8
   130f0:	2000115c 	.word	0x2000115c
   130f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f8:	f04f 0bff 	mov.w	fp, #255	; 0xff
   130fc:	4604      	mov	r4, r0
   130fe:	f04f 0a01 	mov.w	sl, #1
   13102:	f88d b000 	strb.w	fp, [sp]
   13106:	466a      	mov	r2, sp
   13108:	2105      	movs	r1, #5
   1310a:	f7ff fb09 	bl	12720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc0>
   1310e:	b170      	cbz	r0, 1312e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15ce>
   13110:	4e5a      	ldr	r6, [pc, #360]	; (1327c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x171c>)
   13112:	f8df 8164 	ldr.w	r8, [pc, #356]	; 13278 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1718>
   13116:	68b1      	ldr	r1, [r6, #8]
   13118:	f898 201c 	ldrb.w	r2, [r8, #28]
   1311c:	f108 031d 	add.w	r3, r8, #29
   13120:	f811 0b03 	ldrb.w	r0, [r1], #3
   13124:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13128:	f00c f9ca 	bl	1f4c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   1312c:	b120      	cbz	r0, 13138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15d8>
   1312e:	f04f 0a00 	mov.w	sl, #0
   13132:	4650      	mov	r0, sl
   13134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13138:	68b0      	ldr	r0, [r6, #8]
   1313a:	6a21      	ldr	r1, [r4, #32]
   1313c:	2701      	movs	r7, #1
   1313e:	7803      	ldrb	r3, [r0, #0]
   13140:	f891 20cd 	ldrb.w	r2, [r1, #205]	; 0xcd
   13144:	f3c3 1340 	ubfx	r3, r3, #5, #1
   13148:	401a      	ands	r2, r3
   1314a:	f881 20cd 	strb.w	r2, [r1, #205]	; 0xcd
   1314e:	6a25      	ldr	r5, [r4, #32]
   13150:	f8d0 100f 	ldr.w	r1, [r0, #15]
   13154:	61a9      	str	r1, [r5, #24]
   13156:	f8d0 1013 	ldr.w	r1, [r0, #19]
   1315a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1315e:	6229      	str	r1, [r5, #32]
   13160:	f8b0 0019 	ldrh.w	r0, [r0, #25]
   13164:	f00c fa64 	bl	1f630 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   13168:	4681      	mov	r9, r0
   1316a:	6168      	str	r0, [r5, #20]
   1316c:	68b0      	ldr	r0, [r6, #8]
   1316e:	4649      	mov	r1, r9
   13170:	7d80      	ldrb	r0, [r0, #22]
   13172:	f00c fbf7 	bl	1f964 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   13176:	8528      	strh	r0, [r5, #40]	; 0x28
   13178:	68b0      	ldr	r0, [r6, #8]
   1317a:	4649      	mov	r1, r9
   1317c:	f8b0 0017 	ldrh.w	r0, [r0, #23]
   13180:	f00c fbe7 	bl	1f952 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   13184:	6268      	str	r0, [r5, #36]	; 0x24
   13186:	68b0      	ldr	r0, [r6, #8]
   13188:	f8b0 101b 	ldrh.w	r1, [r0, #27]
   1318c:	83a9      	strh	r1, [r5, #28]
   1318e:	f8b0 101d 	ldrh.w	r1, [r0, #29]
   13192:	83e9      	strh	r1, [r5, #30]
   13194:	f100 011f 	add.w	r1, r0, #31
   13198:	f105 00ce 	add.w	r0, r5, #206	; 0xce
   1319c:	f00f fcae 	bl	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   131a0:	68b0      	ldr	r0, [r6, #8]
   131a2:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
   131a6:	f001 011f 	and.w	r1, r1, #31
   131aa:	f885 10d9 	strb.w	r1, [r5, #217]	; 0xd9
   131ae:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   131b2:	0940      	lsrs	r0, r0, #5
   131b4:	f885 02f9 	strb.w	r0, [r5, #761]	; 0x2f9
   131b8:	f885 706e 	strb.w	r7, [r5, #110]	; 0x6e
   131bc:	f105 0066 	add.w	r0, r5, #102	; 0x66
   131c0:	f885 706f 	strb.w	r7, [r5, #111]	; 0x6f
   131c4:	f880 b00a 	strb.w	fp, [r0, #10]
   131c8:	2700      	movs	r7, #0
   131ca:	4639      	mov	r1, r7
   131cc:	3836      	subs	r0, #54	; 0x36
   131ce:	f00c ffc4 	bl	2015a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   131d2:	7c20      	ldrb	r0, [r4, #16]
   131d4:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
   131d8:	2300      	movs	r3, #0
   131da:	f89d 2000 	ldrb.w	r2, [sp]
   131de:	4620      	mov	r0, r4
   131e0:	6a21      	ldr	r1, [r4, #32]
   131e2:	f7ff fe4f 	bl	12e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1324>
   131e6:	2211      	movs	r2, #17
   131e8:	4925      	ldr	r1, [pc, #148]	; (13280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1720>)
   131ea:	f104 0086 	add.w	r0, r4, #134	; 0x86
   131ee:	f7fc fde9 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   131f2:	6a20      	ldr	r0, [r4, #32]
   131f4:	2205      	movs	r2, #5
   131f6:	8801      	ldrh	r1, [r0, #0]
   131f8:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
   131fc:	f890 00cd 	ldrb.w	r0, [r0, #205]	; 0xcd
   13200:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
   13204:	491f      	ldr	r1, [pc, #124]	; (13284 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1724>)
   13206:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1320a:	f7fc fddb 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   1320e:	6a20      	ldr	r0, [r4, #32]
   13210:	2500      	movs	r5, #0
   13212:	f8b0 9000 	ldrh.w	r9, [r0]
   13216:	f004 fa1d 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   1321a:	b9a8      	cbnz	r0, 13248 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e8>
   1321c:	7821      	ldrb	r1, [r4, #0]
   1321e:	f884 10bb 	strb.w	r1, [r4, #187]	; 0xbb
   13222:	f8a4 90bc 	strh.w	r9, [r4, #188]	; 0xbc
   13226:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
   1322a:	7b60      	ldrb	r0, [r4, #13]
   1322c:	2800      	cmp	r0, #0
   1322e:	bf1a      	itte	ne
   13230:	f894 0048 	ldrbne.w	r0, [r4, #72]	; 0x48
   13234:	f884 00be 	strbne.w	r0, [r4, #190]	; 0xbe
   13238:	f884 70be 	strbeq.w	r7, [r4, #190]	; 0xbe
   1323c:	2216      	movs	r2, #22
   1323e:	4912      	ldr	r1, [pc, #72]	; (13288 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1728>)
   13240:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   13244:	f7fc fdbe 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   13248:	f888 7000 	strb.w	r7, [r8]
   1324c:	2200      	movs	r2, #0
   1324e:	4621      	mov	r1, r4
   13250:	6a20      	ldr	r0, [r4, #32]
   13252:	f000 fb91 	bl	13978 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   13256:	68b0      	ldr	r0, [r6, #8]
   13258:	6a21      	ldr	r1, [r4, #32]
   1325a:	f8d0 2003 	ldr.w	r2, [r0, #3]
   1325e:	f8c1 2003 	str.w	r2, [r1, #3]
   13262:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   13266:	f8a1 2007 	strh.w	r2, [r1, #7]
   1326a:	7800      	ldrb	r0, [r0, #0]
   1326c:	6a21      	ldr	r1, [r4, #32]
   1326e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13272:	7088      	strb	r0, [r1, #2]
   13274:	e75d      	b.n	13132 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15d2>
   13276:	0000      	.short	0x0000
   13278:	2000115c 	.word	0x2000115c
   1327c:	20000108 	.word	0x20000108
   13280:	000207c1 	.word	0x000207c1
   13284:	000207b1 	.word	0x000207b1
   13288:	00020759 	.word	0x00020759
   1328c:	b570      	push	{r4, r5, r6, lr}
   1328e:	4e18      	ldr	r6, [pc, #96]	; (132f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1790>)
   13290:	2100      	movs	r1, #0
   13292:	6870      	ldr	r0, [r6, #4]
   13294:	8842      	ldrh	r2, [r0, #2]
   13296:	2a09      	cmp	r2, #9
   13298:	d004      	beq.n	132a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1744>
   1329a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1329e:	2101      	movs	r1, #1
   132a0:	f7fd be7e 	b.w	10fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b4>
   132a4:	4c13      	ldr	r4, [pc, #76]	; (132f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1794>)
   132a6:	4605      	mov	r5, r0
   132a8:	81a1      	strh	r1, [r4, #12]
   132aa:	7061      	strb	r1, [r4, #1]
   132ac:	2101      	movs	r1, #1
   132ae:	f7fd fb7f 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   132b2:	6861      	ldr	r1, [r4, #4]
   132b4:	4408      	add	r0, r1
   132b6:	6060      	str	r0, [r4, #4]
   132b8:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
   132bc:	1c40      	adds	r0, r0, #1
   132be:	f8a5 0048 	strh.w	r0, [r5, #72]	; 0x48
   132c2:	f7fc ffd7 	bl	10274 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   132c6:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   132ca:	fbb0 f2f1 	udiv	r2, r0, r1
   132ce:	fb01 0012 	mls	r0, r1, r2, r0
   132d2:	6861      	ldr	r1, [r4, #4]
   132d4:	2200      	movs	r2, #0
   132d6:	4408      	add	r0, r1
   132d8:	6060      	str	r0, [r4, #4]
   132da:	f895 1076 	ldrb.w	r1, [r5, #118]	; 0x76
   132de:	4628      	mov	r0, r5
   132e0:	f7fe feaa 	bl	12038 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
   132e4:	6870      	ldr	r0, [r6, #4]
   132e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   132ea:	2101      	movs	r1, #1
   132ec:	f7fd bdce 	b.w	10e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa0>
   132f0:	20000108 	.word	0x20000108
   132f4:	2000115c 	.word	0x2000115c
   132f8:	00000003 	.word	0x00000003
   132fc:	00000001 	.word	0x00000001
   13300:	00000000 	.word	0x00000000
   13304:	00010000 	.word	0x00010000
   13308:	a62c0000 	.word	0xa62c0000
   1330c:	0000a1e0 	.word	0x0000a1e0
   13310:	0000a820 	.word	0x0000a820
   13314:	00000000 	.word	0x00000000
   13318:	0000a820 	.word	0x0000a820
   1331c:	00011a85 	.word	0x00011a85
   13320:	000113cd 	.word	0x000113cd
   13324:	0001184d 	.word	0x0001184d
   13328:	00000000 	.word	0x00000000
   1332c:	00011511 	.word	0x00011511
   13330:	00011625 	.word	0x00011625
   13334:	00011971 	.word	0x00011971
   13338:	0002074d 	.word	0x0002074d
   1333c:	000118f9 	.word	0x000118f9
   13340:	000119f1 	.word	0x000119f1
   13344:	000119c9 	.word	0x000119c9
   13348:	0001187d 	.word	0x0001187d
   1334c:	00020753 	.word	0x00020753
   13350:	00011b01 	.word	0x00011b01
   13354:	00011e31 	.word	0x00011e31
   13358:	00011ed9 	.word	0x00011ed9
   1335c:	0001328d 	.word	0x0001328d
   13360:	0001334c 	.word	0x0001334c
   13364:	00013334 	.word	0x00013334
   13368:	0001332c 	.word	0x0001332c

0001336c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
   1336c:	b510      	push	{r4, lr}
   1336e:	1e42      	subs	r2, r0, #1
   13370:	2a02      	cmp	r2, #2
   13372:	d903      	bls.n	1337c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x10>
   13374:	21ca      	movs	r1, #202	; 0xca
   13376:	202f      	movs	r0, #47	; 0x2f
   13378:	f7f9 fd86 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1337c:	1e40      	subs	r0, r0, #1
   1337e:	2910      	cmp	r1, #16
   13380:	bf02      	ittt	eq
   13382:	490a      	ldreq	r1, [pc, #40]	; (133ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x40>)
   13384:	f831 0010 	ldrheq.w	r0, [r1, r0, lsl #1]
   13388:	bd10      	popeq	{r4, pc}
   1338a:	2912      	cmp	r1, #18
   1338c:	bf14      	ite	ne
   1338e:	2913      	cmpne	r1, #19
   13390:	4907      	ldreq	r1, [pc, #28]	; (133b0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x44>)
   13392:	d007      	beq.n	133a4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
   13394:	2915      	cmp	r1, #21
   13396:	bf08      	it	eq
   13398:	4906      	ldreq	r1, [pc, #24]	; (133b4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x48>)
   1339a:	d003      	beq.n	133a4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x38>
   1339c:	21d8      	movs	r1, #216	; 0xd8
   1339e:	202f      	movs	r0, #47	; 0x2f
   133a0:	f7f9 fd72 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   133a4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   133a8:	bd10      	pop	{r4, pc}
   133aa:	0000      	.short	0x0000
   133ac:	00020a34 	.word	0x00020a34
   133b0:	00020a2e 	.word	0x00020a2e
   133b4:	00020a3a 	.word	0x00020a3a

000133b8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
   133b8:	1e42      	subs	r2, r0, #1
   133ba:	b510      	push	{r4, lr}
   133bc:	b2d2      	uxtb	r2, r2
   133be:	2a01      	cmp	r2, #1
   133c0:	d905      	bls.n	133ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x16>
   133c2:	291d      	cmp	r1, #29
   133c4:	d01e      	beq.n	13404 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
   133c6:	21ee      	movs	r1, #238	; 0xee
   133c8:	202f      	movs	r0, #47	; 0x2f
   133ca:	f7f9 fd5d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   133ce:	2913      	cmp	r1, #19
   133d0:	d014      	beq.n	133fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
   133d2:	dc08      	bgt.n	133e6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
   133d4:	2910      	cmp	r1, #16
   133d6:	bf02      	ittt	eq
   133d8:	480d      	ldreq	r0, [pc, #52]	; (13410 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x58>)
   133da:	f830 0012 	ldrheq.w	r0, [r0, r2, lsl #1]
   133de:	bd10      	popeq	{r4, pc}
   133e0:	2912      	cmp	r1, #18
   133e2:	d00b      	beq.n	133fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x44>
   133e4:	e005      	b.n	133f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3a>
   133e6:	2915      	cmp	r1, #21
   133e8:	bf08      	it	eq
   133ea:	480a      	ldreq	r0, [pc, #40]	; (13414 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x5c>)
   133ec:	d007      	beq.n	133fe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x46>
   133ee:	291d      	cmp	r1, #29
   133f0:	d008      	beq.n	13404 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x4c>
   133f2:	f44f 7181 	mov.w	r1, #258	; 0x102
   133f6:	202f      	movs	r0, #47	; 0x2f
   133f8:	f7f9 fd46 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   133fc:	4806      	ldr	r0, [pc, #24]	; (13418 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x60>)
   133fe:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   13402:	bd10      	pop	{r4, pc}
   13404:	f240 315a 	movw	r1, #858	; 0x35a
   13408:	fb10 f001 	smulbb	r0, r0, r1
   1340c:	bd10      	pop	{r4, pc}
   1340e:	0000      	.short	0x0000
   13410:	00020a22 	.word	0x00020a22
   13414:	00020a2a 	.word	0x00020a2a
   13418:	00020a26 	.word	0x00020a26

0001341c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
   1341c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13420:	4604      	mov	r4, r0
   13422:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
   13426:	b083      	sub	sp, #12
   13428:	4616      	mov	r6, r2
   1342a:	460d      	mov	r5, r1
   1342c:	bb40      	cbnz	r0, 13480 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
   1342e:	4621      	mov	r1, r4
   13430:	486c      	ldr	r0, [pc, #432]	; (135e4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1c8>)
   13432:	f008 fc05 	bl	1bc40 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   13436:	4607      	mov	r7, r0
   13438:	2820      	cmp	r0, #32
   1343a:	d021      	beq.n	13480 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x64>
   1343c:	2250      	movs	r2, #80	; 0x50
   1343e:	2100      	movs	r1, #0
   13440:	f504 7088 	add.w	r0, r4, #272	; 0x110
   13444:	f00f fecb 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   13448:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
   1344c:	f04f 0801 	mov.w	r8, #1
   13450:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   13454:	f884 8128 	strb.w	r8, [r4, #296]	; 0x128
   13458:	b135      	cbz	r5, 13468 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
   1345a:	f7fc ff23 	bl	102a4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
   1345e:	f000 0007 	and.w	r0, r0, #7
   13462:	1c40      	adds	r0, r0, #1
   13464:	f885 032c 	strb.w	r0, [r5, #812]	; 0x32c
   13468:	4620      	mov	r0, r4
   1346a:	f00d f938 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1346e:	2800      	cmp	r0, #0
   13470:	bf08      	it	eq
   13472:	2561      	moveq	r5, #97	; 0x61
   13474:	d029      	beq.n	134ca <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xae>
   13476:	4620      	mov	r0, r4
   13478:	f00d f923 	bl	206c2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1347c:	b120      	cbz	r0, 13488 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x6c>
   1347e:	e00a      	b.n	13496 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
   13480:	b003      	add	sp, #12
   13482:	200c      	movs	r0, #12
   13484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13488:	4620      	mov	r0, r4
   1348a:	f00d f92c 	bl	206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1348e:	2800      	cmp	r0, #0
   13490:	bf08      	it	eq
   13492:	2550      	moveq	r5, #80	; 0x50
   13494:	d000      	beq.n	13498 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7c>
   13496:	2555      	movs	r5, #85	; 0x55
   13498:	4668      	mov	r0, sp
   1349a:	f00a f9d7 	bl	1d84c <mpsl_fem_pa_is_configured>
   1349e:	f89d 0000 	ldrb.w	r0, [sp]
   134a2:	2800      	cmp	r0, #0
   134a4:	bf14      	ite	ne
   134a6:	2701      	movne	r7, #1
   134a8:	2700      	moveq	r7, #0
   134aa:	a801      	add	r0, sp, #4
   134ac:	f00a f9b6 	bl	1d81c <mpsl_fem_lna_is_configured>
   134b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   134b4:	2800      	cmp	r0, #0
   134b6:	bf18      	it	ne
   134b8:	2001      	movne	r0, #1
   134ba:	4338      	orrs	r0, r7
   134bc:	bf18      	it	ne
   134be:	350a      	addne	r5, #10
   134c0:	f00a f900 	bl	1d6c4 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   134c4:	2800      	cmp	r0, #0
   134c6:	bf18      	it	ne
   134c8:	3518      	addne	r5, #24
   134ca:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
   134ce:	2002      	movs	r0, #2
   134d0:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
   134d4:	f884 813b 	strb.w	r8, [r4, #315]	; 0x13b
   134d8:	2500      	movs	r5, #0
   134da:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
   134de:	f00f fc76 	bl	22dce <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   134e2:	4607      	mov	r7, r0
   134e4:	f8b4 9138 	ldrh.w	r9, [r4, #312]	; 0x138
   134e8:	f009 fd6e 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   134ec:	454f      	cmp	r7, r9
   134ee:	bf98      	it	ls
   134f0:	464f      	movls	r7, r9
   134f2:	4438      	add	r0, r7
   134f4:	30cc      	adds	r0, #204	; 0xcc
   134f6:	b287      	uxth	r7, r0
   134f8:	4620      	mov	r0, r4
   134fa:	f00d f8ec 	bl	206d6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   134fe:	b378      	cbz	r0, 13560 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x144>
   13500:	f00f f9eb 	bl	228da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   13504:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
   13508:	b281      	uxth	r1, r0
   1350a:	4630      	mov	r0, r6
   1350c:	f009 fe7c 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13510:	4430      	add	r0, r6
   13512:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   13516:	f008 fdc1 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   1351a:	19c0      	adds	r0, r0, r7
   1351c:	4169      	adcs	r1, r5
   1351e:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
   13522:	f884 8118 	strb.w	r8, [r4, #280]	; 0x118
   13526:	84e5      	strh	r5, [r4, #38]	; 0x26
   13528:	4620      	mov	r0, r4
   1352a:	f00d f8ce 	bl	206ca <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>
   1352e:	b148      	cbz	r0, 13544 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x128>
   13530:	4620      	mov	r0, r4
   13532:	2101      	movs	r1, #1
   13534:	f7fd fa3c 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   13538:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   1353c:	1a30      	subs	r0, r6, r0
   1353e:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
   13542:	e005      	b.n	13550 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x134>
   13544:	2001      	movs	r0, #1
   13546:	f00d fa65 	bl	20a14 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   1354a:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   1354e:	1a30      	subs	r0, r6, r0
   13550:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   13554:	f04f 30ff 	mov.w	r0, #4294967295
   13558:	0841      	lsrs	r1, r0, #1
   1355a:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
   1355e:	e02b      	b.n	135b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x19c>
   13560:	e7ff      	b.n	13562 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x146>
   13562:	4620      	mov	r0, r4
   13564:	2100      	movs	r1, #0
   13566:	f7fd fa23 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   1356a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 135e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1cc>
   1356e:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   13572:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   13576:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1357a:	2000      	movs	r0, #0
   1357c:	2900      	cmp	r1, #0
   1357e:	bf1c      	itt	ne
   13580:	8ce1      	ldrhne	r1, [r4, #38]	; 0x26
   13582:	2900      	cmpne	r1, #0
   13584:	d007      	beq.n	13596 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x17a>
   13586:	f7fc fe8d 	bl	102a4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
   1358a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1358e:	fbb0 f2f1 	udiv	r2, r0, r1
   13592:	fb01 0012 	mls	r0, r1, r2, r0
   13596:	4407      	add	r7, r0
   13598:	f008 fd80 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   1359c:	19c0      	adds	r0, r0, r7
   1359e:	4169      	adcs	r1, r5
   135a0:	2e00      	cmp	r6, #0
   135a2:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
   135a6:	bf04      	itt	eq
   135a8:	f04f 30ff 	moveq.w	r0, #4294967295
   135ac:	0841      	lsreq	r1, r0, #1
   135ae:	d001      	beq.n	135b4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x198>
   135b0:	1980      	adds	r0, r0, r6
   135b2:	4169      	adcs	r1, r5
   135b4:	e9c4 0154 	strd	r0, r1, [r4, #336]	; 0x150
   135b8:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   135bc:	f504 7198 	add.w	r1, r4, #304	; 0x130
   135c0:	f007 fda0 	bl	1b104 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   135c4:	b148      	cbz	r0, 135da <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x1be>
   135c6:	f8a4 5148 	strh.w	r5, [r4, #328]	; 0x148
   135ca:	2100      	movs	r1, #0
   135cc:	4620      	mov	r0, r4
   135ce:	f00d f8b5 	bl	2073c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   135d2:	b003      	add	sp, #12
   135d4:	2000      	movs	r0, #0
   135d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   135da:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   135de:	2030      	movs	r0, #48	; 0x30
   135e0:	f7f9 fc52 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   135e4:	00020ce7 	.word	0x00020ce7
   135e8:	20000120 	.word	0x20000120

000135ec <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
   135ec:	4901      	ldr	r1, [pc, #4]	; (135f4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
   135ee:	8088      	strh	r0, [r1, #4]
   135f0:	4770      	bx	lr
   135f2:	0000      	.short	0x0000
   135f4:	20000120 	.word	0x20000120

000135f8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
   135f8:	4805      	ldr	r0, [pc, #20]	; (13610 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
   135fa:	2100      	movs	r1, #0
   135fc:	7001      	strb	r1, [r0, #0]
   135fe:	2201      	movs	r2, #1
   13600:	7082      	strb	r2, [r0, #2]
   13602:	7041      	strb	r1, [r0, #1]
   13604:	f242 7110 	movw	r1, #10000	; 0x2710
   13608:	8081      	strh	r1, [r0, #4]
   1360a:	f000 b803 	b.w	13614 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1360e:	0000      	.short	0x0000
   13610:	20000120 	.word	0x20000120

00013614 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
   13614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13618:	4e41      	ldr	r6, [pc, #260]	; (13720 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x10c>)
   1361a:	b085      	sub	sp, #20
   1361c:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   13620:	e9cd 0100 	strd	r0, r1, [sp]
   13624:	4668      	mov	r0, sp
   13626:	f7f9 fedd 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1362a:	2701      	movs	r7, #1
   1362c:	2500      	movs	r5, #0
   1362e:	bb10      	cbnz	r0, 13676 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x62>
   13630:	9c00      	ldr	r4, [sp, #0]
   13632:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   13636:	b1c8      	cbz	r0, 1366c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x58>
   13638:	f884 7158 	strb.w	r7, [r4, #344]	; 0x158
   1363c:	2101      	movs	r1, #1
   1363e:	4620      	mov	r0, r4
   13640:	f00d f87c 	bl	2073c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   13644:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   13648:	b180      	cbz	r0, 1366c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x58>
   1364a:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   1364e:	f008 f87b 	bl	1b748 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   13652:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   13656:	f008 f9db 	bl	1ba10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   1365a:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   1365e:	f008 f9b5 	bl	1b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   13662:	2800      	cmp	r0, #0
   13664:	bf18      	it	ne
   13666:	f884 5128 	strbne.w	r5, [r4, #296]	; 0x128
   1366a:	d00f      	beq.n	1368c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x78>
   1366c:	4668      	mov	r0, sp
   1366e:	f7f9 feb9 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   13672:	2800      	cmp	r0, #0
   13674:	d0dc      	beq.n	13630 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
   13676:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 13724 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x110>
   1367a:	f888 7001 	strb.w	r7, [r8, #1]
   1367e:	e9d6 0100 	ldrd	r0, r1, [r6]
   13682:	f64f 77ff 	movw	r7, #65535	; 0xffff
   13686:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1368a:	e027      	b.n	136dc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xc8>
   1368c:	f240 2105 	movw	r1, #517	; 0x205
   13690:	2030      	movs	r0, #48	; 0x30
   13692:	f7f9 fbf9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13696:	9802      	ldr	r0, [sp, #8]
   13698:	2800      	cmp	r0, #0
   1369a:	bf1c      	itt	ne
   1369c:	f890 133c 	ldrbne.w	r1, [r0, #828]	; 0x33c
   136a0:	2900      	cmpne	r1, #0
   136a2:	d01b      	beq.n	136dc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xc8>
   136a4:	8800      	ldrh	r0, [r0, #0]
   136a6:	42b8      	cmp	r0, r7
   136a8:	bf18      	it	ne
   136aa:	f04f 0920 	movne.w	r9, #32
   136ae:	d030      	beq.n	13712 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
   136b0:	2101      	movs	r1, #1
   136b2:	f00b fd1e 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   136b6:	0004      	movs	r4, r0
   136b8:	d016      	beq.n	136e8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xd4>
   136ba:	f894 0384 	ldrb.w	r0, [r4, #900]	; 0x384
   136be:	f008 f9a7 	bl	1ba10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   136c2:	f884 533c 	strb.w	r5, [r4, #828]	; 0x33c
   136c6:	f894 0384 	ldrb.w	r0, [r4, #900]	; 0x384
   136ca:	f008 f97f 	bl	1b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   136ce:	f884 9384 	strb.w	r9, [r4, #900]	; 0x384
   136d2:	e9d6 0100 	ldrd	r0, r1, [r6]
   136d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   136da:	e015      	b.n	13708 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
   136dc:	a802      	add	r0, sp, #8
   136de:	f7f9 fe81 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   136e2:	2800      	cmp	r0, #0
   136e4:	d0d7      	beq.n	13696 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x82>
   136e6:	e014      	b.n	13712 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
   136e8:	f44f 7190 	mov.w	r1, #288	; 0x120
   136ec:	2030      	movs	r0, #48	; 0x30
   136ee:	f7f9 fbcb 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   136f2:	9802      	ldr	r0, [sp, #8]
   136f4:	2800      	cmp	r0, #0
   136f6:	bf1c      	itt	ne
   136f8:	f890 133c 	ldrbne.w	r1, [r0, #828]	; 0x33c
   136fc:	2900      	cmpne	r1, #0
   136fe:	d003      	beq.n	13708 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xf4>
   13700:	8800      	ldrh	r0, [r0, #0]
   13702:	42b8      	cmp	r0, r7
   13704:	d1d4      	bne.n	136b0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x9c>
   13706:	e004      	b.n	13712 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xfe>
   13708:	a802      	add	r0, sp, #8
   1370a:	f7f9 fe6b 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1370e:	2800      	cmp	r0, #0
   13710:	d0ef      	beq.n	136f2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xde>
   13712:	f888 5001 	strb.w	r5, [r8, #1]
   13716:	b005      	add	sp, #20
   13718:	2000      	movs	r0, #0
   1371a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1371e:	0000      	.short	0x0000
   13720:	0001449c 	.word	0x0001449c
   13724:	20000120 	.word	0x20000120

00013728 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
   13728:	4901      	ldr	r1, [pc, #4]	; (13730 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
   1372a:	7008      	strb	r0, [r1, #0]
   1372c:	4770      	bx	lr
   1372e:	0000      	.short	0x0000
   13730:	20000120 	.word	0x20000120

00013734 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
   13734:	4908      	ldr	r1, [pc, #32]	; (13758 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
   13736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1373a:	fbb1 f1f2 	udiv	r1, r1, r2
   1373e:	b510      	push	{r4, lr}
   13740:	f201 11d7 	addw	r1, r1, #471	; 0x1d7
   13744:	f00c fd2d 	bl	201a2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   13748:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   1374c:	bf28      	it	cs
   1374e:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
   13752:	b280      	uxth	r0, r0
   13754:	bd10      	pop	{r4, pc}
   13756:	0000      	.short	0x0000
   13758:	0001527d 	.word	0x0001527d

0001375c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
   1375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13760:	4c13      	ldr	r4, [pc, #76]	; (137b0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x54>)
   13762:	4607      	mov	r7, r0
   13764:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
   13768:	f004 fe5e 	bl	18428 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   1376c:	4606      	mov	r6, r0
   1376e:	4602      	mov	r2, r0
   13770:	4641      	mov	r1, r8
   13772:	4628      	mov	r0, r5
   13774:	f00b ff79 	bl	1f66a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
   13778:	4605      	mov	r5, r0
   1377a:	68a0      	ldr	r0, [r4, #8]
   1377c:	4285      	cmp	r5, r0
   1377e:	d005      	beq.n	1378c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x30>
   13780:	6921      	ldr	r1, [r4, #16]
   13782:	1a28      	subs	r0, r5, r0
   13784:	4408      	add	r0, r1
   13786:	6120      	str	r0, [r4, #16]
   13788:	f008 fb9c 	bl	1bec4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   1378c:	60a5      	str	r5, [r4, #8]
   1378e:	42ae      	cmp	r6, r5
   13790:	d80a      	bhi.n	137a8 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x4c>
   13792:	6978      	ldr	r0, [r7, #20]
   13794:	f641 514c 	movw	r1, #7500	; 0x1d4c
   13798:	4281      	cmp	r1, r0
   1379a:	bf9c      	itt	ls
   1379c:	7860      	ldrbls	r0, [r4, #1]
   1379e:	2800      	cmpls	r0, #0
   137a0:	bf04      	itt	eq
   137a2:	2001      	moveq	r0, #1
   137a4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   137a8:	f04f 0000 	mov.w	r0, #0
   137ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137b0:	20000120 	.word	0x20000120

000137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
   137b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137b8:	2500      	movs	r5, #0
   137ba:	4604      	mov	r4, r0
   137bc:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   137c0:	2906      	cmp	r1, #6
   137c2:	f080 80cf 	bcs.w	13964 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1b0>
   137c6:	e8df f001 	tbb	[pc, r1]
   137ca:	9a07      	.short	0x9a07
   137cc:	b39f9803 	.word	0xb39f9803
   137d0:	2004      	movs	r0, #4
   137d2:	f884 033c 	strb.w	r0, [r4, #828]	; 0x33c
   137d6:	e084      	b.n	138e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x12e>
   137d8:	f8d4 038c 	ldr.w	r0, [r4, #908]	; 0x38c
   137dc:	2800      	cmp	r0, #0
   137de:	bf1c      	itt	ne
   137e0:	f894 0352 	ldrbne.w	r0, [r4, #850]	; 0x352
   137e4:	2800      	cmpne	r0, #0
   137e6:	d06a      	beq.n	138be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10a>
   137e8:	f894 033c 	ldrb.w	r0, [r4, #828]	; 0x33c
   137ec:	2803      	cmp	r0, #3
   137ee:	d166      	bne.n	138be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10a>
   137f0:	f894 606f 	ldrb.w	r6, [r4, #111]	; 0x6f
   137f4:	f00f f871 	bl	228da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   137f8:	4601      	mov	r1, r0
   137fa:	f894 02f9 	ldrb.w	r0, [r4, #761]	; 0x2f9
   137fe:	280c      	cmp	r0, #12
   13800:	d304      	bcc.n	1380c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
   13802:	f240 318b 	movw	r1, #907	; 0x38b
   13806:	2006      	movs	r0, #6
   13808:	f7f9 fb3e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1380c:	4a58      	ldr	r2, [pc, #352]	; (13970 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1bc>)
   1380e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   13812:	4401      	add	r1, r0
   13814:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   13818:	fa1f fa80 	uxth.w	sl, r0
   1381c:	fa1f f881 	uxth.w	r8, r1
   13820:	4630      	mov	r0, r6
   13822:	f004 ff0b 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13826:	f8d4 138c 	ldr.w	r1, [r4, #908]	; 0x38c
   1382a:	f016 0f0c 	tst.w	r6, #12
   1382e:	eba1 0900 	sub.w	r9, r1, r0
   13832:	bf0a      	itet	eq
   13834:	4630      	moveq	r0, r6
   13836:	f64e 2060 	movwne	r0, #60000	; 0xea60
   1383a:	f004 ff4d 	bleq	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1383e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   13842:	fbb0 f0f7 	udiv	r0, r0, r7
   13846:	eba9 0900 	sub.w	r9, r9, r0
   1384a:	4630      	mov	r0, r6
   1384c:	f004 fef6 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13850:	f8d4 1310 	ldr.w	r1, [r4, #784]	; 0x310
   13854:	f016 0f0c 	tst.w	r6, #12
   13858:	eba1 0b00 	sub.w	fp, r1, r0
   1385c:	bf0a      	itet	eq
   1385e:	4630      	moveq	r0, r6
   13860:	f64e 2060 	movwne	r0, #60000	; 0xea60
   13864:	f004 ff38 	bleq	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13868:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   1386c:	4408      	add	r0, r1
   1386e:	fbb0 f0f7 	udiv	r0, r0, r7
   13872:	ebab 0000 	sub.w	r0, fp, r0
   13876:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
   1387a:	fb01 f108 	mul.w	r1, r1, r8
   1387e:	fbb1 f1fa 	udiv	r1, r1, sl
   13882:	2229      	movs	r2, #41	; 0x29
   13884:	eb02 0050 	add.w	r0, r2, r0, lsr #1
   13888:	3160      	adds	r1, #96	; 0x60
   1388a:	eba0 0251 	sub.w	r2, r0, r1, lsr #1
   1388e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   13892:	454a      	cmp	r2, r9
   13894:	d801      	bhi.n	1389a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe6>
   13896:	4548      	cmp	r0, r9
   13898:	d201      	bcs.n	1389e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
   1389a:	f009 fc4d 	bl	1d138 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   1389e:	4641      	mov	r1, r8
   138a0:	6960      	ldr	r0, [r4, #20]
   138a2:	f009 fcb1 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   138a6:	6961      	ldr	r1, [r4, #20]
   138a8:	f641 524c 	movw	r2, #7500	; 0x1d4c
   138ac:	4291      	cmp	r1, r2
   138ae:	bf34      	ite	cc
   138b0:	2102      	movcc	r1, #2
   138b2:	2100      	movcs	r1, #0
   138b4:	4408      	add	r0, r1
   138b6:	f8c4 0344 	str.w	r0, [r4, #836]	; 0x344
   138ba:	f884 5352 	strb.w	r5, [r4, #850]	; 0x352
   138be:	482d      	ldr	r0, [pc, #180]	; (13974 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
   138c0:	7840      	ldrb	r0, [r0, #1]
   138c2:	2800      	cmp	r0, #0
   138c4:	d184      	bne.n	137d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c>
   138c6:	9500      	str	r5, [sp, #0]
   138c8:	f8b4 1304 	ldrh.w	r1, [r4, #772]	; 0x304
   138cc:	2301      	movs	r3, #1
   138ce:	2200      	movs	r2, #0
   138d0:	4620      	mov	r0, r4
   138d2:	f000 f927 	bl	13b24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   138d6:	b120      	cbz	r0, 138e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x12e>
   138d8:	f240 61b5 	movw	r1, #1717	; 0x6b5
   138dc:	2030      	movs	r0, #48	; 0x30
   138de:	f7f9 fad3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   138e2:	f004 fdad 	bl	18440 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   138e6:	f008 f9d3 	bl	1bc90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   138ea:	f8a4 5382 	strh.w	r5, [r4, #898]	; 0x382
   138ee:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
   138f2:	f8a4 034e 	strh.w	r0, [r4, #846]	; 0x34e
   138f6:	f884 5351 	strb.w	r5, [r4, #849]	; 0x351
   138fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138fe:	2003      	movs	r0, #3
   13900:	f884 033c 	strb.w	r0, [r4, #828]	; 0x33c
   13904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13908:	f004 fd94 	bl	18434 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
   1390c:	f8c4 038c 	str.w	r0, [r4, #908]	; 0x38c
   13910:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   13914:	f004 fe92 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13918:	f8d4 138c 	ldr.w	r1, [r4, #908]	; 0x38c
   1391c:	1a09      	subs	r1, r1, r0
   1391e:	4815      	ldr	r0, [pc, #84]	; (13974 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1c0>)
   13920:	6882      	ldr	r2, [r0, #8]
   13922:	440a      	add	r2, r1
   13924:	6082      	str	r2, [r0, #8]
   13926:	68c2      	ldr	r2, [r0, #12]
   13928:	4411      	add	r1, r2
   1392a:	60c1      	str	r1, [r0, #12]
   1392c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13930:	4625      	mov	r5, r4
   13932:	f894 406f 	ldrb.w	r4, [r4, #111]	; 0x6f
   13936:	4620      	mov	r0, r4
   13938:	f004 fece 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1393c:	f64d 7141 	movw	r1, #57153	; 0xdf41
   13940:	4408      	add	r0, r1
   13942:	fbb0 f0f7 	udiv	r0, r0, r7
   13946:	f014 010c 	ands.w	r1, r4, #12
   1394a:	bf18      	it	ne
   1394c:	2128      	movne	r1, #40	; 0x28
   1394e:	4408      	add	r0, r1
   13950:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   13954:	4628      	mov	r0, r5
   13956:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1395a:	f240 111b 	movw	r1, #283	; 0x11b
   1395e:	f00c bbdf 	b.w	20120 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   13962:	bf00      	nop
   13964:	f44f 61e8 	mov.w	r1, #1856	; 0x740
   13968:	2030      	movs	r0, #48	; 0x30
   1396a:	f7f9 fa8d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1396e:	0000      	.short	0x0000
   13970:	000144d8 	.word	0x000144d8
   13974:	20000120 	.word	0x20000120

00013978 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
   13978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1397c:	2600      	movs	r6, #0
   1397e:	460c      	mov	r4, r1
   13980:	4681      	mov	r9, r0
   13982:	2701      	movs	r7, #1
   13984:	b142      	cbz	r2, 13998 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x20>
   13986:	2a01      	cmp	r2, #1
   13988:	d063      	beq.n	13a52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xda>
   1398a:	2a02      	cmp	r2, #2
   1398c:	d067      	beq.n	13a5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
   1398e:	f240 716a 	movw	r1, #1898	; 0x76a
   13992:	2030      	movs	r0, #48	; 0x30
   13994:	f7f9 fa78 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13998:	f004 fd46 	bl	18428 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   1399c:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
   139a0:	4682      	mov	sl, r0
   139a2:	e9d4 5850 	ldrd	r5, r8, [r4, #320]	; 0x140
   139a6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   139aa:	f880 630f 	strb.w	r6, [r0, #783]	; 0x30f
   139ae:	f884 6128 	strb.w	r6, [r4, #296]	; 0x128
   139b2:	f884 7129 	strb.w	r7, [r4, #297]	; 0x129
   139b6:	2101      	movs	r1, #1
   139b8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   139bc:	f7fb fc7e 	bl	f2bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   139c0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   139c4:	f8c0 5370 	str.w	r5, [r0, #880]	; 0x370
   139c8:	f8c0 8374 	str.w	r8, [r0, #884]	; 0x374
   139cc:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   139d0:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   139d4:	f881 0384 	strb.w	r0, [r1, #900]	; 0x384
   139d8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   139dc:	f8c0 a388 	str.w	sl, [r0, #904]	; 0x388
   139e0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   139e4:	e9c0 58de 	strd	r5, r8, [r0, #888]	; 0x378
   139e8:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   139ec:	f885 633c 	strb.w	r6, [r5, #828]	; 0x33c
   139f0:	2300      	movs	r3, #0
   139f2:	f8a5 6380 	strh.w	r6, [r5, #896]	; 0x380
   139f6:	461a      	mov	r2, r3
   139f8:	4619      	mov	r1, r3
   139fa:	4628      	mov	r0, r5
   139fc:	9600      	str	r6, [sp, #0]
   139fe:	f000 f891 	bl	13b24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   13a02:	2800      	cmp	r0, #0
   13a04:	d161      	bne.n	13aca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x152>
   13a06:	f8c5 6338 	str.w	r6, [r5, #824]	; 0x338
   13a0a:	f8c5 6330 	str.w	r6, [r5, #816]	; 0x330
   13a0e:	f885 733c 	strb.w	r7, [r5, #828]	; 0x33c
   13a12:	f8a5 634e 	strh.w	r6, [r5, #846]	; 0x34e
   13a16:	f8a5 634c 	strh.w	r6, [r5, #844]	; 0x34c
   13a1a:	f885 6351 	strb.w	r6, [r5, #849]	; 0x351
   13a1e:	f8b5 00bc 	ldrh.w	r0, [r5, #188]	; 0xbc
   13a22:	1e40      	subs	r0, r0, #1
   13a24:	f8a5 00bc 	strh.w	r0, [r5, #188]	; 0xbc
   13a28:	f8a5 6382 	strh.w	r6, [r5, #898]	; 0x382
   13a2c:	f004 fd08 	bl	18440 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   13a30:	f008 f92e 	bl	1bc90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   13a34:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   13a38:	464a      	mov	r2, r9
   13a3a:	4939      	ldr	r1, [pc, #228]	; (13b20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>)
   13a3c:	f007 ffb6 	bl	1b9ac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
   13a40:	2800      	cmp	r0, #0
   13a42:	bf18      	it	ne
   13a44:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a48:	f240 7153 	movw	r1, #1875	; 0x753
   13a4c:	2030      	movs	r0, #48	; 0x30
   13a4e:	f7f9 fa1b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13a52:	f004 fce9 	bl	18428 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   13a56:	f8c9 0388 	str.w	r0, [r9, #904]	; 0x388
   13a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a5e:	f8d9 a388 	ldr.w	sl, [r9, #904]	; 0x388
   13a62:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
   13a66:	e9d4 5850 	ldrd	r5, r8, [r4, #320]	; 0x140
   13a6a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   13a6e:	2001      	movs	r0, #1
   13a70:	f881 030f 	strb.w	r0, [r1, #783]	; 0x30f
   13a74:	f884 6128 	strb.w	r6, [r4, #296]	; 0x128
   13a78:	f884 7129 	strb.w	r7, [r4, #297]	; 0x129
   13a7c:	2101      	movs	r1, #1
   13a7e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   13a82:	f7fb fc1b 	bl	f2bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   13a86:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   13a8a:	f8c0 5370 	str.w	r5, [r0, #880]	; 0x370
   13a8e:	f8c0 8374 	str.w	r8, [r0, #884]	; 0x374
   13a92:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   13a96:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   13a9a:	f881 0384 	strb.w	r0, [r1, #900]	; 0x384
   13a9e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   13aa2:	f8c0 a388 	str.w	sl, [r0, #904]	; 0x388
   13aa6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   13aaa:	e9c0 58de 	strd	r5, r8, [r0, #888]	; 0x378
   13aae:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   13ab2:	f885 633c 	strb.w	r6, [r5, #828]	; 0x33c
   13ab6:	2300      	movs	r3, #0
   13ab8:	f8a5 6380 	strh.w	r6, [r5, #896]	; 0x380
   13abc:	461a      	mov	r2, r3
   13abe:	4619      	mov	r1, r3
   13ac0:	4628      	mov	r0, r5
   13ac2:	9600      	str	r6, [sp, #0]
   13ac4:	f000 f82e 	bl	13b24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   13ac8:	b120      	cbz	r0, 13ad4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x15c>
   13aca:	f240 2119 	movw	r1, #537	; 0x219
   13ace:	2030      	movs	r0, #48	; 0x30
   13ad0:	f7f9 f9da 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13ad4:	f8c5 6338 	str.w	r6, [r5, #824]	; 0x338
   13ad8:	f8c5 6330 	str.w	r6, [r5, #816]	; 0x330
   13adc:	f885 733c 	strb.w	r7, [r5, #828]	; 0x33c
   13ae0:	f8a5 634e 	strh.w	r6, [r5, #846]	; 0x34e
   13ae4:	f8a5 634c 	strh.w	r6, [r5, #844]	; 0x34c
   13ae8:	f885 6351 	strb.w	r6, [r5, #849]	; 0x351
   13aec:	f8b5 00bc 	ldrh.w	r0, [r5, #188]	; 0xbc
   13af0:	1e40      	subs	r0, r0, #1
   13af2:	f8a5 00bc 	strh.w	r0, [r5, #188]	; 0xbc
   13af6:	f8a5 6382 	strh.w	r6, [r5, #898]	; 0x382
   13afa:	f004 fca1 	bl	18440 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   13afe:	f008 f8c7 	bl	1bc90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   13b02:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   13b06:	464a      	mov	r2, r9
   13b08:	4905      	ldr	r1, [pc, #20]	; (13b20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>)
   13b0a:	f007 ff4f 	bl	1b9ac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
   13b0e:	2800      	cmp	r0, #0
   13b10:	bf18      	it	ne
   13b12:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b16:	f240 7164 	movw	r1, #1892	; 0x764
   13b1a:	2030      	movs	r0, #48	; 0x30
   13b1c:	f7f9 f9b4 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13b20:	000141cd 	.word	0x000141cd
   13b24:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b28:	b08f      	sub	sp, #60	; 0x3c
   13b2a:	4604      	mov	r4, r0
   13b2c:	2000      	movs	r0, #0
   13b2e:	9002      	str	r0, [sp, #8]
   13b30:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   13b34:	469b      	mov	fp, r3
   13b36:	4689      	mov	r9, r1
   13b38:	930b      	str	r3, [sp, #44]	; 0x2c
   13b3a:	9007      	str	r0, [sp, #28]
   13b3c:	f00e fecd 	bl	228da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   13b40:	4601      	mov	r1, r0
   13b42:	f894 02f9 	ldrb.w	r0, [r4, #761]	; 0x2f9
   13b46:	280c      	cmp	r0, #12
   13b48:	d275      	bcs.n	13c36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2be>
   13b4a:	4afb      	ldr	r2, [pc, #1004]	; (13f38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c0>)
   13b4c:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   13b50:	4408      	add	r0, r1
   13b52:	b285      	uxth	r5, r0
   13b54:	f894 00c6 	ldrb.w	r0, [r4, #198]	; 0xc6
   13b58:	280e      	cmp	r0, #14
   13b5a:	bf0c      	ite	eq
   13b5c:	2001      	moveq	r0, #1
   13b5e:	2000      	movne	r0, #0
   13b60:	9008      	str	r0, [sp, #32]
   13b62:	9811      	ldr	r0, [sp, #68]	; 0x44
   13b64:	2800      	cmp	r0, #0
   13b66:	bf04      	itt	eq
   13b68:	f894 033c 	ldrbeq.w	r0, [r4, #828]	; 0x33c
   13b6c:	2803      	cmpeq	r0, #3
   13b6e:	d128      	bne.n	13bc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
   13b70:	9808      	ldr	r0, [sp, #32]
   13b72:	b330      	cbz	r0, 13bc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
   13b74:	f8b4 03d4 	ldrh.w	r0, [r4, #980]	; 0x3d4
   13b78:	4548      	cmp	r0, r9
   13b7a:	d122      	bne.n	13bc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24a>
   13b7c:	f8d4 0344 	ldr.w	r0, [r4, #836]	; 0x344
   13b80:	f8c4 0330 	str.w	r0, [r4, #816]	; 0x330
   13b84:	6960      	ldr	r0, [r4, #20]
   13b86:	f8c4 0334 	str.w	r0, [r4, #820]	; 0x334
   13b8a:	f8b4 0382 	ldrh.w	r0, [r4, #898]	; 0x382
   13b8e:	f8b4 1316 	ldrh.w	r1, [r4, #790]	; 0x316
   13b92:	4408      	add	r0, r1
   13b94:	f8c4 0338 	str.w	r0, [r4, #824]	; 0x338
   13b98:	4620      	mov	r0, r4
   13b9a:	f000 fca9 	bl	144f0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
   13b9e:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
   13ba2:	6260      	str	r0, [r4, #36]	; 0x24
   13ba4:	f8b4 03d6 	ldrh.w	r0, [r4, #982]	; 0x3d6
   13ba8:	8520      	strh	r0, [r4, #40]	; 0x28
   13baa:	f8d4 03dc 	ldr.w	r0, [r4, #988]	; 0x3dc
   13bae:	6160      	str	r0, [r4, #20]
   13bb0:	f8b4 03e0 	ldrh.w	r0, [r4, #992]	; 0x3e0
   13bb4:	83a0      	strh	r0, [r4, #28]
   13bb6:	f8b4 03e2 	ldrh.w	r0, [r4, #994]	; 0x3e2
   13bba:	83e0      	strh	r0, [r4, #30]
   13bbc:	2002      	movs	r0, #2
   13bbe:	f884 033c 	strb.w	r0, [r4, #828]	; 0x33c
   13bc2:	f8b4 00bc 	ldrh.w	r0, [r4, #188]	; 0xbc
   13bc6:	f504 7656 	add.w	r6, r4, #856	; 0x358
   13bca:	eba9 0000 	sub.w	r0, r9, r0
   13bce:	fa0f f880 	sxth.w	r8, r0
   13bd2:	f8b4 0380 	ldrh.w	r0, [r4, #896]	; 0x380
   13bd6:	eba9 0000 	sub.w	r0, r9, r0
   13bda:	b207      	sxth	r7, r0
   13bdc:	2f00      	cmp	r7, #0
   13bde:	da0b      	bge.n	13bf8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
   13be0:	f8d4 0370 	ldr.w	r0, [r4, #880]	; 0x370
   13be4:	f8d4 1374 	ldr.w	r1, [r4, #884]	; 0x374
   13be8:	4647      	mov	r7, r8
   13bea:	e9c4 01de 	strd	r0, r1, [r4, #888]	; 0x378
   13bee:	2001      	movs	r0, #1
   13bf0:	900b      	str	r0, [sp, #44]	; 0x2c
   13bf2:	2000      	movs	r0, #0
   13bf4:	f884 0353 	strb.w	r0, [r4, #851]	; 0x353
   13bf8:	48d0      	ldr	r0, [pc, #832]	; (13f3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
   13bfa:	f04f 0a00 	mov.w	sl, #0
   13bfe:	7880      	ldrb	r0, [r0, #2]
   13c00:	2800      	cmp	r0, #0
   13c02:	d07c      	beq.n	13cfe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x386>
   13c04:	f009 fab6 	bl	1d174 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   13c08:	2800      	cmp	r0, #0
   13c0a:	d078      	beq.n	13cfe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x386>
   13c0c:	f8b4 0328 	ldrh.w	r0, [r4, #808]	; 0x328
   13c10:	2802      	cmp	r0, #2
   13c12:	d37c      	bcc.n	13d0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   13c14:	f894 033c 	ldrb.w	r0, [r4, #828]	; 0x33c
   13c18:	2802      	cmp	r0, #2
   13c1a:	d078      	beq.n	13d0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   13c1c:	f894 0352 	ldrb.w	r0, [r4, #850]	; 0x352
   13c20:	2800      	cmp	r0, #0
   13c22:	d174      	bne.n	13d0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   13c24:	6960      	ldr	r0, [r4, #20]
   13c26:	f641 514c 	movw	r1, #7500	; 0x1d4c
   13c2a:	4288      	cmp	r0, r1
   13c2c:	d36f      	bcc.n	13d0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   13c2e:	f894 12f9 	ldrb.w	r1, [r4, #761]	; 0x2f9
   13c32:	290c      	cmp	r1, #12
   13c34:	d304      	bcc.n	13c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c8>
   13c36:	f240 318b 	movw	r1, #907	; 0x38b
   13c3a:	2006      	movs	r0, #6
   13c3c:	f7f9 f924 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13c40:	4abd      	ldr	r2, [pc, #756]	; (13f38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c0>)
   13c42:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   13c46:	f894 233c 	ldrb.w	r2, [r4, #828]	; 0x33c
   13c4a:	f501 61c8 	add.w	r1, r1, #1600	; 0x640
   13c4e:	b289      	uxth	r1, r1
   13c50:	460d      	mov	r5, r1
   13c52:	2a01      	cmp	r2, #1
   13c54:	d016      	beq.n	13c84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30c>
   13c56:	f009 fad7 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13c5a:	4601      	mov	r1, r0
   13c5c:	6962      	ldr	r2, [r4, #20]
   13c5e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   13c62:	4282      	cmp	r2, r0
   13c64:	bf2c      	ite	cs
   13c66:	2000      	movcs	r0, #0
   13c68:	2002      	movcc	r0, #2
   13c6a:	4408      	add	r0, r1
   13c6c:	f8b4 2316 	ldrh.w	r2, [r4, #790]	; 0x316
   13c70:	4442      	add	r2, r8
   13c72:	1bd1      	subs	r1, r2, r7
   13c74:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
   13c78:	f8c4 0344 	str.w	r0, [r4, #836]	; 0x344
   13c7c:	1a82      	subs	r2, r0, r2
   13c7e:	fb01 aa02 	mla	sl, r1, r2, sl
   13c82:	e041      	b.n	13d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
   13c84:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
   13c88:	2803      	cmp	r0, #3
   13c8a:	d054      	beq.n	13d36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3be>
   13c8c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   13c90:	f894 030f 	ldrb.w	r0, [r4, #783]	; 0x30f
   13c94:	f00b fdd6 	bl	1f844 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   13c98:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13c9a:	4408      	add	r0, r1
   13c9c:	9006      	str	r0, [sp, #24]
   13c9e:	4629      	mov	r1, r5
   13ca0:	f8d4 0334 	ldr.w	r0, [r4, #820]	; 0x334
   13ca4:	f009 fab0 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13ca8:	f8d4 2330 	ldr.w	r2, [r4, #816]	; 0x330
   13cac:	f8d4 1338 	ldr.w	r1, [r4, #824]	; 0x338
   13cb0:	1a82      	subs	r2, r0, r2
   13cb2:	fb01 aa02 	mla	sl, r1, r2, sl
   13cb6:	f8c4 0330 	str.w	r0, [r4, #816]	; 0x330
   13cba:	4629      	mov	r1, r5
   13cbc:	9806      	ldr	r0, [sp, #24]
   13cbe:	f009 faa3 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13cc2:	f8d4 1340 	ldr.w	r1, [r4, #832]	; 0x340
   13cc6:	f8c4 0340 	str.w	r0, [r4, #832]	; 0x340
   13cca:	1a41      	subs	r1, r0, r1
   13ccc:	448a      	add	sl, r1
   13cce:	4629      	mov	r1, r5
   13cd0:	6960      	ldr	r0, [r4, #20]
   13cd2:	f009 fa99 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13cd6:	6962      	ldr	r2, [r4, #20]
   13cd8:	f641 514c 	movw	r1, #7500	; 0x1d4c
   13cdc:	428a      	cmp	r2, r1
   13cde:	bf34      	ite	cc
   13ce0:	2102      	movcc	r1, #2
   13ce2:	2100      	movcs	r1, #0
   13ce4:	4408      	add	r0, r1
   13ce6:	f8b4 2316 	ldrh.w	r2, [r4, #790]	; 0x316
   13cea:	4442      	add	r2, r8
   13cec:	1bd1      	subs	r1, r2, r7
   13cee:	f8d4 2338 	ldr.w	r2, [r4, #824]	; 0x338
   13cf2:	1a89      	subs	r1, r1, r2
   13cf4:	f8d4 2344 	ldr.w	r2, [r4, #836]	; 0x344
   13cf8:	1a82      	subs	r2, r0, r2
   13cfa:	1e49      	subs	r1, r1, #1
   13cfc:	e000      	b.n	13d00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x388>
   13cfe:	e006      	b.n	13d0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x396>
   13d00:	fb01 aa02 	mla	sl, r1, r2, sl
   13d04:	f8c4 0344 	str.w	r0, [r4, #836]	; 0x344
   13d08:	2001      	movs	r0, #1
   13d0a:	f884 0352 	strb.w	r0, [r4, #850]	; 0x352
   13d0e:	f8cd a010 	str.w	sl, [sp, #16]
   13d12:	f894 033c 	ldrb.w	r0, [r4, #828]	; 0x33c
   13d16:	f24a 3aa1 	movw	sl, #41889	; 0xa3a1
   13d1a:	b190      	cbz	r0, 13d42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ca>
   13d1c:	2801      	cmp	r0, #1
   13d1e:	f000 810f 	beq.w	13f40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
   13d22:	2802      	cmp	r0, #2
   13d24:	d07d      	beq.n	13e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4aa>
   13d26:	2803      	cmp	r0, #3
   13d28:	f000 813c 	beq.w	13fa4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x62c>
   13d2c:	f240 5143 	movw	r1, #1347	; 0x543
   13d30:	2030      	movs	r0, #48	; 0x30
   13d32:	f7f9 f8a9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13d36:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13d38:	f8d4 0334 	ldr.w	r0, [r4, #820]	; 0x334
   13d3c:	4408      	add	r0, r1
   13d3e:	9006      	str	r0, [sp, #24]
   13d40:	e7ad      	b.n	13c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x326>
   13d42:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   13d46:	f894 030f 	ldrb.w	r0, [r4, #783]	; 0x30f
   13d4a:	f00b fd7b 	bl	1f844 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   13d4e:	4607      	mov	r7, r0
   13d50:	6a60      	ldr	r0, [r4, #36]	; 0x24
   13d52:	4629      	mov	r1, r5
   13d54:	4438      	add	r0, r7
   13d56:	f009 fa57 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13d5a:	f8c4 0340 	str.w	r0, [r4, #832]	; 0x340
   13d5e:	4629      	mov	r1, r5
   13d60:	6960      	ldr	r0, [r4, #20]
   13d62:	f009 fa51 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13d66:	6962      	ldr	r2, [r4, #20]
   13d68:	f641 514c 	movw	r1, #7500	; 0x1d4c
   13d6c:	428a      	cmp	r2, r1
   13d6e:	bf34      	ite	cc
   13d70:	2102      	movcc	r1, #2
   13d72:	2100      	movcs	r1, #0
   13d74:	4408      	add	r0, r1
   13d76:	f8c4 0344 	str.w	r0, [r4, #836]	; 0x344
   13d7a:	a901      	add	r1, sp, #4
   13d7c:	a807      	add	r0, sp, #28
   13d7e:	f004 fa73 	bl	18268 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
   13d82:	e9d4 01de 	ldrd	r0, r1, [r4, #888]	; 0x378
   13d86:	9b01      	ldr	r3, [sp, #4]
   13d88:	9a07      	ldr	r2, [sp, #28]
   13d8a:	f008 f999 	bl	1c0c0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
   13d8e:	9006      	str	r0, [sp, #24]
   13d90:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   13d94:	4628      	mov	r0, r5
   13d96:	f004 fc9f 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13d9a:	f64d 7141 	movw	r1, #57153	; 0xdf41
   13d9e:	4408      	add	r0, r1
   13da0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   13da4:	fbb0 f0f8 	udiv	r0, r0, r8
   13da8:	f015 010c 	ands.w	r1, r5, #12
   13dac:	bf18      	it	ne
   13dae:	2128      	movne	r1, #40	; 0x28
   13db0:	4408      	add	r0, r1
   13db2:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   13db6:	f240 111b 	movw	r1, #283	; 0x11b
   13dba:	4620      	mov	r0, r4
   13dbc:	f00c f9b0 	bl	20120 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   13dc0:	f8d4 0388 	ldr.w	r0, [r4, #904]	; 0x388
   13dc4:	9002      	str	r0, [sp, #8]
   13dc6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   13dca:	f004 fc85 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13dce:	4450      	add	r0, sl
   13dd0:	fbb0 f0f8 	udiv	r0, r0, r8
   13dd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13dd6:	9a02      	ldr	r2, [sp, #8]
   13dd8:	4439      	add	r1, r7
   13dda:	1a08      	subs	r0, r1, r0
   13ddc:	f8d4 1340 	ldr.w	r1, [r4, #832]	; 0x340
   13de0:	1a40      	subs	r0, r0, r1
   13de2:	4410      	add	r0, r2
   13de4:	9a06      	ldr	r2, [sp, #24]
   13de6:	3820      	subs	r0, #32
   13de8:	1a80      	subs	r0, r0, r2
   13dea:	9002      	str	r0, [sp, #8]
   13dec:	0048      	lsls	r0, r1, #1
   13dee:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   13df0:	3060      	adds	r0, #96	; 0x60
   13df2:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   13df6:	1847      	adds	r7, r0, r1
   13df8:	f015 0f0c 	tst.w	r5, #12
   13dfc:	bf0a      	itet	eq
   13dfe:	4628      	moveq	r0, r5
   13e00:	f64e 2060 	movwne	r0, #60000	; 0xea60
   13e04:	f004 fc68 	bleq	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13e08:	4450      	add	r0, sl
   13e0a:	fbb0 f8f8 	udiv	r8, r0, r8
   13e0e:	4628      	mov	r0, r5
   13e10:	f004 fc14 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13e14:	4440      	add	r0, r8
   13e16:	4438      	add	r0, r7
   13e18:	f100 0122 	add.w	r1, r0, #34	; 0x22
   13e1c:	4847      	ldr	r0, [pc, #284]	; (13f3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
   13e1e:	6141      	str	r1, [r0, #20]
   13e20:	e000      	b.n	13e24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ac>
   13e22:	e00c      	b.n	13e3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c6>
   13e24:	f8d4 0388 	ldr.w	r0, [r4, #904]	; 0x388
   13e28:	9902      	ldr	r1, [sp, #8]
   13e2a:	1a08      	subs	r0, r1, r0
   13e2c:	f5b0 7fec 	cmp.w	r0, #472	; 0x1d8
   13e30:	f080 8133 	bcs.w	1409a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   13e34:	f240 41dc 	movw	r1, #1244	; 0x4dc
   13e38:	2030      	movs	r0, #48	; 0x30
   13e3a:	f7f9 f825 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   13e3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13e40:	f8d4 0334 	ldr.w	r0, [r4, #820]	; 0x334
   13e44:	4408      	add	r0, r1
   13e46:	4629      	mov	r1, r5
   13e48:	f009 f9de 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13e4c:	f8c4 0340 	str.w	r0, [r4, #832]	; 0x340
   13e50:	4629      	mov	r1, r5
   13e52:	6960      	ldr	r0, [r4, #20]
   13e54:	f009 f9d8 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   13e58:	6962      	ldr	r2, [r4, #20]
   13e5a:	f641 514c 	movw	r1, #7500	; 0x1d4c
   13e5e:	428a      	cmp	r2, r1
   13e60:	bf34      	ite	cc
   13e62:	2102      	movcc	r1, #2
   13e64:	2100      	movcs	r1, #0
   13e66:	4408      	add	r0, r1
   13e68:	f8c4 0344 	str.w	r0, [r4, #836]	; 0x344
   13e6c:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   13e70:	4628      	mov	r0, r5
   13e72:	f004 fc31 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13e76:	f64d 7141 	movw	r1, #57153	; 0xdf41
   13e7a:	4401      	add	r1, r0
   13e7c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   13e80:	fbb1 f0f8 	udiv	r0, r1, r8
   13e84:	f015 010c 	ands.w	r1, r5, #12
   13e88:	bf18      	it	ne
   13e8a:	2128      	movne	r1, #40	; 0x28
   13e8c:	4408      	add	r0, r1
   13e8e:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   13e92:	f240 111b 	movw	r1, #283	; 0x11b
   13e96:	4620      	mov	r0, r4
   13e98:	f00c f942 	bl	20120 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
   13e9c:	f8b4 0316 	ldrh.w	r0, [r4, #790]	; 0x316
   13ea0:	b9e0      	cbnz	r0, 13edc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
   13ea2:	f1bb 0f00 	cmp.w	fp, #0
   13ea6:	d019      	beq.n	13edc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
   13ea8:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   13eac:	4628      	mov	r0, r5
   13eae:	f004 fc13 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13eb2:	eb00 010a 	add.w	r1, r0, sl
   13eb6:	fbb1 f0f8 	udiv	r0, r1, r8
   13eba:	f8d4 1340 	ldr.w	r1, [r4, #832]	; 0x340
   13ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13ec0:	4408      	add	r0, r1
   13ec2:	f8d4 1334 	ldr.w	r1, [r4, #820]	; 0x334
   13ec6:	4411      	add	r1, r2
   13ec8:	1a0f      	subs	r7, r1, r0
   13eca:	4628      	mov	r0, r5
   13ecc:	f004 fbb6 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13ed0:	f8d4 138c 	ldr.w	r1, [r4, #908]	; 0x38c
   13ed4:	1a08      	subs	r0, r1, r0
   13ed6:	4438      	add	r0, r7
   13ed8:	3820      	subs	r0, #32
   13eda:	e006      	b.n	13eea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x572>
   13edc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13ede:	f8d4 0334 	ldr.w	r0, [r4, #820]	; 0x334
   13ee2:	4408      	add	r0, r1
   13ee4:	f8d4 1340 	ldr.w	r1, [r4, #832]	; 0x340
   13ee8:	1a40      	subs	r0, r0, r1
   13eea:	9002      	str	r0, [sp, #8]
   13eec:	f8d4 2338 	ldr.w	r2, [r4, #824]	; 0x338
   13ef0:	f8d4 1330 	ldr.w	r1, [r4, #816]	; 0x330
   13ef4:	f8d4 0340 	ldr.w	r0, [r4, #832]	; 0x340
   13ef8:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   13efc:	fb01 0002 	mla	r0, r1, r2, r0
   13f00:	0040      	lsls	r0, r0, #1
   13f02:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   13f04:	3060      	adds	r0, #96	; 0x60
   13f06:	1847      	adds	r7, r0, r1
   13f08:	f015 0f0c 	tst.w	r5, #12
   13f0c:	bf0a      	itet	eq
   13f0e:	4628      	moveq	r0, r5
   13f10:	f64e 2060 	movwne	r0, #60000	; 0xea60
   13f14:	f004 fbe0 	bleq	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13f18:	eb00 010a 	add.w	r1, r0, sl
   13f1c:	fbb1 f8f8 	udiv	r8, r1, r8
   13f20:	4628      	mov	r0, r5
   13f22:	f004 fb8b 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13f26:	4905      	ldr	r1, [pc, #20]	; (13f3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>)
   13f28:	4440      	add	r0, r8
   13f2a:	4438      	add	r0, r7
   13f2c:	6148      	str	r0, [r1, #20]
   13f2e:	2001      	movs	r0, #1
   13f30:	f884 033c 	strb.w	r0, [r4, #828]	; 0x33c
   13f34:	e0b1      	b.n	1409a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   13f36:	0000      	.short	0x0000
   13f38:	000144d8 	.word	0x000144d8
   13f3c:	20000120 	.word	0x20000120
   13f40:	6961      	ldr	r1, [r4, #20]
   13f42:	f8d4 0344 	ldr.w	r0, [r4, #836]	; 0x344
   13f46:	1a09      	subs	r1, r1, r0
   13f48:	4379      	muls	r1, r7
   13f4a:	9102      	str	r1, [sp, #8]
   13f4c:	f8b4 1316 	ldrh.w	r1, [r4, #790]	; 0x316
   13f50:	f8d4 c330 	ldr.w	ip, [r4, #816]	; 0x330
   13f54:	eb01 0208 	add.w	r2, r1, r8
   13f58:	f8d4 1338 	ldr.w	r1, [r4, #824]	; 0x338
   13f5c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   13f60:	1a52      	subs	r2, r2, r1
   13f62:	fb0c 3101 	mla	r1, ip, r1, r3
   13f66:	1e52      	subs	r2, r2, #1
   13f68:	fb02 1000 	mla	r0, r2, r0, r1
   13f6c:	0040      	lsls	r0, r0, #1
   13f6e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   13f70:	3060      	adds	r0, #96	; 0x60
   13f72:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
   13f76:	1847      	adds	r7, r0, r1
   13f78:	f015 0f0c 	tst.w	r5, #12
   13f7c:	bf0a      	itet	eq
   13f7e:	4628      	moveq	r0, r5
   13f80:	f64e 2060 	movwne	r0, #60000	; 0xea60
   13f84:	f004 fba8 	bleq	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   13f88:	eb00 010a 	add.w	r1, r0, sl
   13f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13f90:	fbb1 f8f0 	udiv	r8, r1, r0
   13f94:	4628      	mov	r0, r5
   13f96:	f004 fb51 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   13f9a:	498a      	ldr	r1, [pc, #552]	; (141c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
   13f9c:	4440      	add	r0, r8
   13f9e:	4438      	add	r0, r7
   13fa0:	6148      	str	r0, [r1, #20]
   13fa2:	e07a      	b.n	1409a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   13fa4:	6960      	ldr	r0, [r4, #20]
   13fa6:	4378      	muls	r0, r7
   13fa8:	9002      	str	r0, [sp, #8]
   13faa:	f1bb 0f00 	cmp.w	fp, #0
   13fae:	d007      	beq.n	13fc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x648>
   13fb0:	f8b4 1316 	ldrh.w	r1, [r4, #790]	; 0x316
   13fb4:	2900      	cmp	r1, #0
   13fb6:	bf04      	itt	eq
   13fb8:	2100      	moveq	r1, #0
   13fba:	f884 1353 	strbeq.w	r1, [r4, #851]	; 0x353
   13fbe:	d003      	beq.n	13fc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x650>
   13fc0:	f894 1353 	ldrb.w	r1, [r4, #851]	; 0x353
   13fc4:	2900      	cmp	r1, #0
   13fc6:	d168      	bne.n	1409a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   13fc8:	f8d4 1344 	ldr.w	r1, [r4, #836]	; 0x344
   13fcc:	fb07 0011 	mls	r0, r7, r1, r0
   13fd0:	9002      	str	r0, [sp, #8]
   13fd2:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
   13fd6:	2826      	cmp	r0, #38	; 0x26
   13fd8:	bf1c      	itt	ne
   13fda:	f894 00c6 	ldrbne.w	r0, [r4, #198]	; 0xc6
   13fde:	2826      	cmpne	r0, #38	; 0x26
   13fe0:	d10b      	bne.n	13ffa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x682>
   13fe2:	f8b4 03d4 	ldrh.w	r0, [r4, #980]	; 0x3d4
   13fe6:	eba9 0000 	sub.w	r0, r9, r0
   13fea:	b200      	sxth	r0, r0
   13fec:	2800      	cmp	r0, #0
   13fee:	db04      	blt.n	13ffa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x682>
   13ff0:	f894 03d7 	ldrb.w	r0, [r4, #983]	; 0x3d7
   13ff4:	2800      	cmp	r0, #0
   13ff6:	bf18      	it	ne
   13ff8:	9007      	strne	r0, [sp, #28]
   13ffa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13ffc:	b308      	cbz	r0, 14042 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ca>
   13ffe:	f8b4 0316 	ldrh.w	r0, [r4, #790]	; 0x316
   14002:	b9f0      	cbnz	r0, 14042 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ca>
   14004:	f8d4 038c 	ldr.w	r0, [r4, #908]	; 0x38c
   14008:	2800      	cmp	r0, #0
   1400a:	d07c      	beq.n	14106 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
   1400c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   14010:	f010 0f0c 	tst.w	r0, #12
   14014:	bf14      	ite	ne
   14016:	f64e 2060 	movwne	r0, #60000	; 0xea60
   1401a:	f004 fb5d 	bleq	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1401e:	eb00 010a 	add.w	r1, r0, sl
   14022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14026:	fbb1 f0f0 	udiv	r0, r1, r0
   1402a:	9902      	ldr	r1, [sp, #8]
   1402c:	1a0d      	subs	r5, r1, r0
   1402e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   14032:	f004 fb03 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   14036:	f8d4 138c 	ldr.w	r1, [r4, #908]	; 0x38c
   1403a:	1a08      	subs	r0, r1, r0
   1403c:	4428      	add	r0, r5
   1403e:	3820      	subs	r0, #32
   14040:	9002      	str	r0, [sp, #8]
   14042:	f8b4 0316 	ldrh.w	r0, [r4, #790]	; 0x316
   14046:	f8d4 1344 	ldr.w	r1, [r4, #836]	; 0x344
   1404a:	4440      	add	r0, r8
   1404c:	4348      	muls	r0, r1
   1404e:	0040      	lsls	r0, r0, #1
   14050:	9d07      	ldr	r5, [sp, #28]
   14052:	f100 0760 	add.w	r7, r0, #96	; 0x60
   14056:	f015 0f0c 	tst.w	r5, #12
   1405a:	bf0a      	itet	eq
   1405c:	4628      	moveq	r0, r5
   1405e:	f64e 2060 	movwne	r0, #60000	; 0xea60
   14062:	f004 fb39 	bleq	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   14066:	eb00 010a 	add.w	r1, r0, sl
   1406a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1406e:	fbb1 f8f0 	udiv	r8, r1, r0
   14072:	4628      	mov	r0, r5
   14074:	f004 fae2 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   14078:	eb08 0100 	add.w	r1, r8, r0
   1407c:	19c8      	adds	r0, r1, r7
   1407e:	4951      	ldr	r1, [pc, #324]	; (141c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
   14080:	6148      	str	r0, [r1, #20]
   14082:	6960      	ldr	r0, [r4, #20]
   14084:	f641 514c 	movw	r1, #7500	; 0x1d4c
   14088:	4288      	cmp	r0, r1
   1408a:	d206      	bcs.n	1409a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x722>
   1408c:	ab02      	add	r3, sp, #8
   1408e:	4a4e      	ldr	r2, [pc, #312]	; (141c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x850>)
   14090:	4639      	mov	r1, r7
   14092:	f00b fc4d 	bl	1f930 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>
   14096:	f884 0353 	strb.w	r0, [r4, #851]	; 0x353
   1409a:	9902      	ldr	r1, [sp, #8]
   1409c:	9804      	ldr	r0, [sp, #16]
   1409e:	4a49      	ldr	r2, [pc, #292]	; (141c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x84c>)
   140a0:	1a08      	subs	r0, r1, r0
   140a2:	9002      	str	r0, [sp, #8]
   140a4:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   140a8:	6960      	ldr	r0, [r4, #20]
   140aa:	6951      	ldr	r1, [r2, #20]
   140ac:	1ac0      	subs	r0, r0, r3
   140ae:	f2a0 1089 	subw	r0, r0, #393	; 0x189
   140b2:	6190      	str	r0, [r2, #24]
   140b4:	4281      	cmp	r1, r0
   140b6:	bf98      	it	ls
   140b8:	4608      	movls	r0, r1
   140ba:	2500      	movs	r5, #0
   140bc:	f8c4 0310 	str.w	r0, [r4, #784]	; 0x310
   140c0:	7035      	strb	r5, [r6, #0]
   140c2:	2064      	movs	r0, #100	; 0x64
   140c4:	8130      	strh	r0, [r6, #8]
   140c6:	e9d4 12de 	ldrd	r1, r2, [r4, #888]	; 0x378
   140ca:	9802      	ldr	r0, [sp, #8]
   140cc:	1808      	adds	r0, r1, r0
   140ce:	eb42 0105 	adc.w	r1, r2, r5
   140d2:	e9c6 0104 	strd	r0, r1, [r6, #16]
   140d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   140da:	f00c f81f 	bl	2011c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   140de:	f8d4 1310 	ldr.w	r1, [r4, #784]	; 0x310
   140e2:	4408      	add	r0, r1
   140e4:	6070      	str	r0, [r6, #4]
   140e6:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   140ea:	e9c4 01de 	strd	r0, r1, [r4, #888]	; 0x378
   140ee:	f8a4 9380 	strh.w	r9, [r4, #896]	; 0x380
   140f2:	f000 fa31 	bl	14558 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>
   140f6:	b110      	cbz	r0, 140fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x786>
   140f8:	6870      	ldr	r0, [r6, #4]
   140fa:	301e      	adds	r0, #30
   140fc:	6070      	str	r0, [r6, #4]
   140fe:	72b5      	strb	r5, [r6, #10]
   14100:	f8b4 0300 	ldrh.w	r0, [r4, #768]	; 0x300
   14104:	e000      	b.n	14108 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x790>
   14106:	e039      	b.n	1417c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x804>
   14108:	eba0 0009 	sub.w	r0, r0, r9
   1410c:	b200      	sxth	r0, r0
   1410e:	2800      	cmp	r0, #0
   14110:	bfc4      	itt	gt
   14112:	2002      	movgt	r0, #2
   14114:	72b0      	strbgt	r0, [r6, #10]
   14116:	9808      	ldr	r0, [sp, #32]
   14118:	b378      	cbz	r0, 1417a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
   1411a:	f1bb 0f00 	cmp.w	fp, #0
   1411e:	d01d      	beq.n	1415c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   14120:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
   14124:	2900      	cmp	r1, #0
   14126:	bf0c      	ite	eq
   14128:	2000      	moveq	r0, #0
   1412a:	f8b4 032a 	ldrhne.w	r0, [r4, #810]	; 0x32a
   1412e:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
   14132:	f894 232c 	ldrb.w	r2, [r4, #812]	; 0x32c
   14136:	1c40      	adds	r0, r0, #1
   14138:	4350      	muls	r0, r2
   1413a:	4288      	cmp	r0, r1
   1413c:	d20e      	bcs.n	1415c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   1413e:	7ab0      	ldrb	r0, [r6, #10]
   14140:	b160      	cbz	r0, 1415c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   14142:	72b5      	strb	r5, [r6, #10]
   14144:	f8b4 032a 	ldrh.w	r0, [r4, #810]	; 0x32a
   14148:	1c40      	adds	r0, r0, #1
   1414a:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
   1414e:	f7fc f891 	bl	10274 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   14152:	f000 0007 	and.w	r0, r0, #7
   14156:	1c40      	adds	r0, r0, #1
   14158:	f884 032c 	strb.w	r0, [r4, #812]	; 0x32c
   1415c:	f894 0384 	ldrb.w	r0, [r4, #900]	; 0x384
   14160:	4631      	mov	r1, r6
   14162:	f006 ffcf 	bl	1b104 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   14166:	b338      	cbz	r0, 141b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>
   14168:	9811      	ldr	r0, [sp, #68]	; 0x44
   1416a:	f080 0001 	eor.w	r0, r0, #1
   1416e:	f884 0350 	strb.w	r0, [r4, #848]	; 0x350
   14172:	b013      	add	sp, #76	; 0x4c
   14174:	2000      	movs	r0, #0
   14176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1417a:	e004      	b.n	14186 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80e>
   1417c:	f240 512e 	movw	r1, #1326	; 0x52e
   14180:	2030      	movs	r0, #48	; 0x30
   14182:	f7f8 fe81 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14186:	f1bb 0f00 	cmp.w	fp, #0
   1418a:	d1c9      	bne.n	14120 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7a8>
   1418c:	f894 033c 	ldrb.w	r0, [r4, #828]	; 0x33c
   14190:	2800      	cmp	r0, #0
   14192:	d0e3      	beq.n	1415c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   14194:	f8d4 1344 	ldr.w	r1, [r4, #836]	; 0x344
   14198:	6960      	ldr	r0, [r4, #20]
   1419a:	1a41      	subs	r1, r0, r1
   1419c:	4630      	mov	r0, r6
   1419e:	f00b fb85 	bl	1f8ac <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   141a2:	0400      	lsls	r0, r0, #16
   141a4:	0c00      	lsrs	r0, r0, #16
   141a6:	d0d9      	beq.n	1415c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e4>
   141a8:	991c      	ldr	r1, [sp, #112]	; 0x70
   141aa:	2900      	cmp	r1, #0
   141ac:	bf18      	it	ne
   141ae:	8008      	strhne	r0, [r1, #0]
   141b0:	2001      	movs	r0, #1
   141b2:	b013      	add	sp, #76	; 0x4c
   141b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b8:	f240 518c 	movw	r1, #1420	; 0x58c
   141bc:	2030      	movs	r0, #48	; 0x30
   141be:	f7f8 fe63 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   141c2:	0000      	.short	0x0000
   141c4:	20000120 	.word	0x20000120
   141c8:	20000134 	.word	0x20000134
   141cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141d0:	b082      	sub	sp, #8
   141d2:	0004      	movs	r4, r0
   141d4:	d00b      	beq.n	141ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x876>
   141d6:	2720      	movs	r7, #32
   141d8:	2600      	movs	r6, #0
   141da:	2909      	cmp	r1, #9
   141dc:	f080 8155 	bcs.w	1448a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb12>
   141e0:	e8df f001 	tbb	[pc, r1]
   141e4:	74746a09 	.word	0x74746a09
   141e8:	fbfcfd6f 	.word	0xfbfcfd6f
   141ec:	00fa      	.short	0x00fa
   141ee:	2197      	movs	r1, #151	; 0x97
   141f0:	2030      	movs	r0, #48	; 0x30
   141f2:	f7f8 fe49 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   141f6:	f8c4 638c 	str.w	r6, [r4, #908]	; 0x38c
   141fa:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
   141fe:	4620      	mov	r0, r4
   14200:	b191      	cbz	r1, 14228 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8b0>
   14202:	f8b0 234e 	ldrh.w	r2, [r0, #846]	; 0x34e
   14206:	f8b0 10bc 	ldrh.w	r1, [r0, #188]	; 0xbc
   1420a:	428a      	cmp	r2, r1
   1420c:	d107      	bne.n	1421e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8a6>
   1420e:	f8b0 2304 	ldrh.w	r2, [r0, #772]	; 0x304
   14212:	1a51      	subs	r1, r2, r1
   14214:	f8a0 1306 	strh.w	r1, [r0, #774]	; 0x306
   14218:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
   1421c:	e00f      	b.n	1423e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c6>
   1421e:	1a51      	subs	r1, r2, r1
   14220:	f8a0 1306 	strh.w	r1, [r0, #774]	; 0x306
   14224:	b291      	uxth	r1, r2
   14226:	e008      	b.n	1423a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c2>
   14228:	f8b0 134c 	ldrh.w	r1, [r0, #844]	; 0x34c
   1422c:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
   14230:	1a89      	subs	r1, r1, r2
   14232:	f8a0 1306 	strh.w	r1, [r0, #774]	; 0x306
   14236:	f8b0 134c 	ldrh.w	r1, [r0, #844]	; 0x34c
   1423a:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
   1423e:	e9d0 12da 	ldrd	r1, r2, [r0, #872]	; 0x368
   14242:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
   14246:	f8c0 2374 	str.w	r2, [r0, #884]	; 0x374
   1424a:	f000 fa3b 	bl	146c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   1424e:	f00e fdbe 	bl	22dce <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   14252:	2864      	cmp	r0, #100	; 0x64
   14254:	bf98      	it	ls
   14256:	2064      	movls	r0, #100	; 0x64
   14258:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
   1425c:	f001 010c 	and.w	r1, r1, #12
   14260:	2900      	cmp	r1, #0
   14262:	bf18      	it	ne
   14264:	2128      	movne	r1, #40	; 0x28
   14266:	4408      	add	r0, r1
   14268:	f8d4 1344 	ldr.w	r1, [r4, #836]	; 0x344
   1426c:	f200 1083 	addw	r0, r0, #387	; 0x183
   14270:	eb01 0600 	add.w	r6, r1, r0
   14274:	4620      	mov	r0, r4
   14276:	bf14      	ite	ne
   14278:	2128      	movne	r1, #40	; 0x28
   1427a:	2100      	moveq	r1, #0
   1427c:	f201 12e7 	addw	r2, r1, #487	; 0x1e7
   14280:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14282:	f00b fed1 	bl	20028 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   14286:	4605      	mov	r5, r0
   14288:	4632      	mov	r2, r6
   1428a:	4620      	mov	r0, r4
   1428c:	6961      	ldr	r1, [r4, #20]
   1428e:	f00b fecb 	bl	20028 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   14292:	4980      	ldr	r1, [pc, #512]	; (14494 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb1c>)
   14294:	4285      	cmp	r5, r0
   14296:	60c8      	str	r0, [r1, #12]
   14298:	bf38      	it	cc
   1429a:	4628      	movcc	r0, r5
   1429c:	6088      	str	r0, [r1, #8]
   1429e:	780a      	ldrb	r2, [r1, #0]
   142a0:	2a00      	cmp	r2, #0
   142a2:	bf08      	it	eq
   142a4:	60c8      	streq	r0, [r1, #12]
   142a6:	f8d4 035c 	ldr.w	r0, [r4, #860]	; 0x35c
   142aa:	38ac      	subs	r0, #172	; 0xac
   142ac:	6108      	str	r0, [r1, #16]
   142ae:	b002      	add	sp, #8
   142b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   142b4:	f007 be06 	b.w	1bec4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   142b8:	b002      	add	sp, #8
   142ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   142be:	f000 bb31 	b.w	14924 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   142c2:	b002      	add	sp, #8
   142c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   142c8:	f004 bc5c 	b.w	18b84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   142cc:	f007 fee6 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   142d0:	f8d4 2370 	ldr.w	r2, [r4, #880]	; 0x370
   142d4:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
   142d8:	1a80      	subs	r0, r0, r2
   142da:	eb61 0103 	sbc.w	r1, r1, r3
   142de:	2200      	movs	r2, #0
   142e0:	4613      	mov	r3, r2
   142e2:	1a12      	subs	r2, r2, r0
   142e4:	eb73 0201 	sbcs.w	r2, r3, r1
   142e8:	db04      	blt.n	142f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x97c>
   142ea:	f240 6109 	movw	r1, #1545	; 0x609
   142ee:	2030      	movs	r0, #48	; 0x30
   142f0:	f7f8 fdca 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   142f4:	1c42      	adds	r2, r0, #1
   142f6:	f171 0100 	sbcs.w	r1, r1, #0
   142fa:	db04      	blt.n	14306 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98e>
   142fc:	f240 610a 	movw	r1, #1546	; 0x60a
   14300:	2030      	movs	r0, #48	; 0x30
   14302:	f7f8 fdc1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14306:	6961      	ldr	r1, [r4, #20]
   14308:	2900      	cmp	r1, #0
   1430a:	bf14      	ite	ne
   1430c:	fbb0 f0f1 	udivne	r0, r0, r1
   14310:	4630      	moveq	r0, r6
   14312:	f894 10c6 	ldrb.w	r1, [r4, #198]	; 0xc6
   14316:	290e      	cmp	r1, #14
   14318:	d015      	beq.n	14346 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9ce>
   1431a:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	; 0xbc
   1431e:	f8b4 234e 	ldrh.w	r2, [r4, #846]	; 0x34e
   14322:	180b      	adds	r3, r1, r0
   14324:	1ad3      	subs	r3, r2, r3
   14326:	b21b      	sxth	r3, r3
   14328:	2b00      	cmp	r3, #0
   1432a:	bfae      	itee	ge
   1432c:	1c50      	addge	r0, r2, #1
   1432e:	1c40      	addlt	r0, r0, #1
   14330:	4408      	addlt	r0, r1
   14332:	f8a4 034e 	strh.w	r0, [r4, #846]	; 0x34e
   14336:	f894 0351 	ldrb.w	r0, [r4, #849]	; 0x351
   1433a:	f88d 0000 	strb.w	r0, [sp]
   1433e:	f89d 0000 	ldrb.w	r0, [sp]
   14342:	b978      	cbnz	r0, 14364 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9ec>
   14344:	e005      	b.n	14352 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9da>
   14346:	f8b4 034e 	ldrh.w	r0, [r4, #846]	; 0x34e
   1434a:	1c40      	adds	r0, r0, #1
   1434c:	f8a4 034e 	strh.w	r0, [r4, #846]	; 0x34e
   14350:	e008      	b.n	14364 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9ec>
   14352:	f8b4 034e 	ldrh.w	r0, [r4, #846]	; 0x34e
   14356:	f8b4 1304 	ldrh.w	r1, [r4, #772]	; 0x304
   1435a:	4288      	cmp	r0, r1
   1435c:	bf04      	itt	eq
   1435e:	1c40      	addeq	r0, r0, #1
   14360:	f8a4 034e 	strheq.w	r0, [r4, #846]	; 0x34e
   14364:	f8b4 0382 	ldrh.w	r0, [r4, #898]	; 0x382
   14368:	f10d 0804 	add.w	r8, sp, #4
   1436c:	1c40      	adds	r0, r0, #1
   1436e:	f8a4 0382 	strh.w	r0, [r4, #898]	; 0x382
   14372:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   14376:	f8b4 10f6 	ldrh.w	r1, [r4, #246]	; 0xf6
   1437a:	1a40      	subs	r0, r0, r1
   1437c:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	; 0xbc
   14380:	1e40      	subs	r0, r0, #1
   14382:	4408      	add	r0, r1
   14384:	b285      	uxth	r5, r0
   14386:	e049      	b.n	1441c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa4>
   14388:	2300      	movs	r3, #0
   1438a:	461a      	mov	r2, r3
   1438c:	4620      	mov	r0, r4
   1438e:	f8cd 8000 	str.w	r8, [sp]
   14392:	f7ff fbc7 	bl	13b24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   14396:	b130      	cbz	r0, 143a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa2e>
   14398:	2801      	cmp	r0, #1
   1439a:	d028      	beq.n	143ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa76>
   1439c:	f240 6149 	movw	r1, #1609	; 0x649
   143a0:	2030      	movs	r0, #48	; 0x30
   143a2:	f7f8 fd71 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   143a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   143a8:	2800      	cmp	r0, #0
   143aa:	bf04      	itt	eq
   143ac:	b002      	addeq	sp, #8
   143ae:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   143b2:	f8b4 034e 	ldrh.w	r0, [r4, #846]	; 0x34e
   143b6:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   143ba:	1a80      	subs	r0, r0, r2
   143bc:	b201      	sxth	r1, r0
   143be:	2900      	cmp	r1, #0
   143c0:	bfdc      	itt	le
   143c2:	b002      	addle	sp, #8
   143c4:	e8bd 81f0 	ldmiale.w	sp!, {r4, r5, r6, r7, r8, pc}
   143c8:	f8b4 0078 	ldrh.w	r0, [r4, #120]	; 0x78
   143cc:	4401      	add	r1, r0
   143ce:	1e49      	subs	r1, r1, #1
   143d0:	fb91 f1f0 	sdiv	r1, r1, r0
   143d4:	b289      	uxth	r1, r1
   143d6:	e003      	b.n	143e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa68>
   143d8:	e053      	b.n	14482 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb0a>
   143da:	e03f      	b.n	1445c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae4>
   143dc:	e036      	b.n	1444c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xad4>
   143de:	e054      	b.n	1448a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb12>
   143e0:	fb01 2000 	mla	r0, r1, r0, r2
   143e4:	f8a4 00f2 	strh.w	r0, [r4, #242]	; 0xf2
   143e8:	b002      	add	sp, #8
   143ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143ee:	f8b4 034e 	ldrh.w	r0, [r4, #846]	; 0x34e
   143f2:	f8b4 1300 	ldrh.w	r1, [r4, #768]	; 0x300
   143f6:	1a42      	subs	r2, r0, r1
   143f8:	b212      	sxth	r2, r2
   143fa:	2a00      	cmp	r2, #0
   143fc:	da09      	bge.n	14412 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa9a>
   143fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   14402:	4402      	add	r2, r0
   14404:	1aaa      	subs	r2, r5, r2
   14406:	b212      	sxth	r2, r2
   14408:	2a00      	cmp	r2, #0
   1440a:	bfb8      	it	lt
   1440c:	f8a4 134e 	strhlt.w	r1, [r4, #846]	; 0x34e
   14410:	db04      	blt.n	1441c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa4>
   14412:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   14416:	4408      	add	r0, r1
   14418:	f8a4 034e 	strh.w	r0, [r4, #846]	; 0x34e
   1441c:	f8b4 134e 	ldrh.w	r1, [r4, #846]	; 0x34e
   14420:	1a68      	subs	r0, r5, r1
   14422:	b200      	sxth	r0, r0
   14424:	2800      	cmp	r0, #0
   14426:	daaf      	bge.n	14388 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa10>
   14428:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
   1442c:	2800      	cmp	r0, #0
   1442e:	bf0c      	ite	eq
   14430:	203e      	moveq	r0, #62	; 0x3e
   14432:	2008      	movne	r0, #8
   14434:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
   14438:	220b      	movs	r2, #11
   1443a:	4917      	ldr	r1, [pc, #92]	; (14498 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb20>)
   1443c:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
   14440:	f7fb fcc0 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   14444:	4620      	mov	r0, r4
   14446:	f00c fd3a 	bl	20ebe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   1444a:	e00f      	b.n	1446c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaf4>
   1444c:	2001      	movs	r0, #1
   1444e:	f006 fc5b 	bl	1ad08 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   14452:	b002      	add	sp, #8
   14454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14458:	f00b b8a2 	b.w	1f5a0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   1445c:	f894 033c 	ldrb.w	r0, [r4, #828]	; 0x33c
   14460:	2804      	cmp	r0, #4
   14462:	d003      	beq.n	1446c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaf4>
   14464:	21b9      	movs	r1, #185	; 0xb9
   14466:	2030      	movs	r0, #48	; 0x30
   14468:	f7f8 fd0e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1446c:	f884 633c 	strb.w	r6, [r4, #828]	; 0x33c
   14470:	f894 0384 	ldrb.w	r0, [r4, #900]	; 0x384
   14474:	f007 faaa 	bl	1b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   14478:	f884 7384 	strb.w	r7, [r4, #900]	; 0x384
   1447c:	b002      	add	sp, #8
   1447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14482:	21bf      	movs	r1, #191	; 0xbf
   14484:	2030      	movs	r0, #48	; 0x30
   14486:	f7f8 fcff 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1448a:	21c3      	movs	r1, #195	; 0xc3
   1448c:	2030      	movs	r0, #48	; 0x30
   1448e:	f7f8 fcfb 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14492:	0000      	.short	0x0000
   14494:	20000120 	.word	0x20000120
   14498:	000102d5 	.word	0x000102d5
   1449c:	00000000 	.word	0x00000000
   144a0:	00010000 	.word	0x00010000
   144a4:	00000000 	.word	0x00000000
   144a8:	00020000 	.word	0x00020000
   144ac:	00000000 	.word	0x00000000
   144b0:	00020000 	.word	0x00020000
   144b4:	00000000 	.word	0x00000000
   144b8:	00001e14 	.word	0x00001e14
   144bc:	00001130 	.word	0x00001130
   144c0:	00000000 	.word	0x00000000
   144c4:	0000ea60 	.word	0x0000ea60
	...
   144d4:	0000ea60 	.word	0x0000ea60
   144d8:	00fa01f4 	.word	0x00fa01f4
   144dc:	00640096 	.word	0x00640096
   144e0:	0032004b 	.word	0x0032004b
   144e4:	0014001e 	.word	0x0014001e
   144e8:	0005000a 	.word	0x0005000a
   144ec:	00010002 	.word	0x00010002

000144f0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   144f0:	b510      	push	{r4, lr}
   144f2:	4604      	mov	r4, r0
   144f4:	f8d0 03dc 	ldr.w	r0, [r0, #988]	; 0x3dc
   144f8:	6961      	ldr	r1, [r4, #20]
   144fa:	4288      	cmp	r0, r1
   144fc:	d109      	bne.n	14512 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   144fe:	f8b4 13e0 	ldrh.w	r1, [r4, #992]	; 0x3e0
   14502:	8ba2      	ldrh	r2, [r4, #28]
   14504:	4291      	cmp	r1, r2
   14506:	d104      	bne.n	14512 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   14508:	f8b4 13e2 	ldrh.w	r1, [r4, #994]	; 0x3e2
   1450c:	8be2      	ldrh	r2, [r4, #30]
   1450e:	4291      	cmp	r1, r2
   14510:	d014      	beq.n	1453c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
   14512:	8821      	ldrh	r1, [r4, #0]
   14514:	f8a4 1228 	strh.w	r1, [r4, #552]	; 0x228
   14518:	f00b f896 	bl	1f648 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   1451c:	f8a4 022a 	strh.w	r0, [r4, #554]	; 0x22a
   14520:	f8b4 03e0 	ldrh.w	r0, [r4, #992]	; 0x3e0
   14524:	f8a4 022c 	strh.w	r0, [r4, #556]	; 0x22c
   14528:	f8b4 03e2 	ldrh.w	r0, [r4, #994]	; 0x3e2
   1452c:	f8a4 022e 	strh.w	r0, [r4, #558]	; 0x22e
   14530:	2209      	movs	r2, #9
   14532:	4908      	ldr	r1, [pc, #32]	; (14554 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x64>)
   14534:	f504 7007 	add.w	r0, r4, #540	; 0x21c
   14538:	f7fb fca0 	bl	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   1453c:	2102      	movs	r1, #2
   1453e:	4620      	mov	r0, r4
   14540:	f7fa febc 	bl	f2bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   14544:	2000      	movs	r0, #0
   14546:	f884 00c6 	strb.w	r0, [r4, #198]	; 0xc6
   1454a:	2003      	movs	r0, #3
   1454c:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
   14550:	bd10      	pop	{r4, pc}
   14552:	0000      	.short	0x0000
   14554:	0002029d 	.word	0x0002029d

00014558 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA>:
   14558:	4802      	ldr	r0, [pc, #8]	; (14564 <sym_UFX5YQMS76OVX4LZ7T6GRG5R56NF5732ZNTZZJA+0xc>)
   1455a:	6900      	ldr	r0, [r0, #16]
   1455c:	2800      	cmp	r0, #0
   1455e:	bf18      	it	ne
   14560:	2001      	movne	r0, #1
   14562:	4770      	bx	lr
   14564:	2000013c 	.word	0x2000013c

00014568 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
   14568:	4806      	ldr	r0, [pc, #24]	; (14584 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
   1456a:	4905      	ldr	r1, [pc, #20]	; (14580 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
   1456c:	6501      	str	r1, [r0, #80]	; 0x50
   1456e:	4906      	ldr	r1, [pc, #24]	; (14588 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
   14570:	6541      	str	r1, [r0, #84]	; 0x54
   14572:	4807      	ldr	r0, [pc, #28]	; (14590 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
   14574:	4905      	ldr	r1, [pc, #20]	; (1458c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
   14576:	6501      	str	r1, [r0, #80]	; 0x50
   14578:	4906      	ldr	r1, [pc, #24]	; (14594 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
   1457a:	6541      	str	r1, [r0, #84]	; 0x54
   1457c:	4770      	bx	lr
   1457e:	0000      	.short	0x0000
   14580:	00015ee9 	.word	0x00015ee9
   14584:	2000015c 	.word	0x2000015c
   14588:	00015fe1 	.word	0x00015fe1
   1458c:	00020f51 	.word	0x00020f51
   14590:	20000208 	.word	0x20000208
   14594:	00016749 	.word	0x00016749

00014598 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
   14598:	481f      	ldr	r0, [pc, #124]	; (14618 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
   1459a:	2100      	movs	r1, #0
   1459c:	6101      	str	r1, [r0, #16]
   1459e:	6141      	str	r1, [r0, #20]
   145a0:	7081      	strb	r1, [r0, #2]
   145a2:	481f      	ldr	r0, [pc, #124]	; (14620 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
   145a4:	491d      	ldr	r1, [pc, #116]	; (1461c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
   145a6:	6081      	str	r1, [r0, #8]
   145a8:	491e      	ldr	r1, [pc, #120]	; (14624 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
   145aa:	6041      	str	r1, [r0, #4]
   145ac:	491e      	ldr	r1, [pc, #120]	; (14628 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
   145ae:	6001      	str	r1, [r0, #0]
   145b0:	491e      	ldr	r1, [pc, #120]	; (1462c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
   145b2:	6281      	str	r1, [r0, #40]	; 0x28
   145b4:	491e      	ldr	r1, [pc, #120]	; (14630 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
   145b6:	62c1      	str	r1, [r0, #44]	; 0x2c
   145b8:	491e      	ldr	r1, [pc, #120]	; (14634 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
   145ba:	60c1      	str	r1, [r0, #12]
   145bc:	491e      	ldr	r1, [pc, #120]	; (14638 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
   145be:	6181      	str	r1, [r0, #24]
   145c0:	491e      	ldr	r1, [pc, #120]	; (1463c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
   145c2:	6301      	str	r1, [r0, #48]	; 0x30
   145c4:	491e      	ldr	r1, [pc, #120]	; (14640 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
   145c6:	6201      	str	r1, [r0, #32]
   145c8:	491e      	ldr	r1, [pc, #120]	; (14644 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
   145ca:	64c1      	str	r1, [r0, #76]	; 0x4c
   145cc:	491e      	ldr	r1, [pc, #120]	; (14648 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
   145ce:	6481      	str	r1, [r0, #72]	; 0x48
   145d0:	491e      	ldr	r1, [pc, #120]	; (1464c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
   145d2:	6441      	str	r1, [r0, #68]	; 0x44
   145d4:	491e      	ldr	r1, [pc, #120]	; (14650 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
   145d6:	6341      	str	r1, [r0, #52]	; 0x34
   145d8:	491e      	ldr	r1, [pc, #120]	; (14654 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
   145da:	61c1      	str	r1, [r0, #28]
   145dc:	491e      	ldr	r1, [pc, #120]	; (14658 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
   145de:	6241      	str	r1, [r0, #36]	; 0x24
   145e0:	481f      	ldr	r0, [pc, #124]	; (14660 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
   145e2:	491e      	ldr	r1, [pc, #120]	; (1465c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
   145e4:	6081      	str	r1, [r0, #8]
   145e6:	491f      	ldr	r1, [pc, #124]	; (14664 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
   145e8:	61c1      	str	r1, [r0, #28]
   145ea:	491f      	ldr	r1, [pc, #124]	; (14668 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
   145ec:	6241      	str	r1, [r0, #36]	; 0x24
   145ee:	491f      	ldr	r1, [pc, #124]	; (1466c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
   145f0:	62c1      	str	r1, [r0, #44]	; 0x2c
   145f2:	491f      	ldr	r1, [pc, #124]	; (14670 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
   145f4:	6101      	str	r1, [r0, #16]
   145f6:	491f      	ldr	r1, [pc, #124]	; (14674 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
   145f8:	6141      	str	r1, [r0, #20]
   145fa:	491f      	ldr	r1, [pc, #124]	; (14678 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
   145fc:	6441      	str	r1, [r0, #68]	; 0x44
   145fe:	491f      	ldr	r1, [pc, #124]	; (1467c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
   14600:	6341      	str	r1, [r0, #52]	; 0x34
   14602:	491f      	ldr	r1, [pc, #124]	; (14680 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
   14604:	6181      	str	r1, [r0, #24]
   14606:	491f      	ldr	r1, [pc, #124]	; (14684 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
   14608:	6301      	str	r1, [r0, #48]	; 0x30
   1460a:	491f      	ldr	r1, [pc, #124]	; (14688 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf0>)
   1460c:	6481      	str	r1, [r0, #72]	; 0x48
   1460e:	491f      	ldr	r1, [pc, #124]	; (1468c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf4>)
   14610:	64c1      	str	r1, [r0, #76]	; 0x4c
   14612:	491f      	ldr	r1, [pc, #124]	; (14690 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xf8>)
   14614:	6381      	str	r1, [r0, #56]	; 0x38
   14616:	4770      	bx	lr
   14618:	2000013c 	.word	0x2000013c
   1461c:	0001657d 	.word	0x0001657d
   14620:	2000015c 	.word	0x2000015c
   14624:	00015c55 	.word	0x00015c55
   14628:	00015cc9 	.word	0x00015cc9
   1462c:	000160c1 	.word	0x000160c1
   14630:	00020f0f 	.word	0x00020f0f
   14634:	00015d99 	.word	0x00015d99
   14638:	0001653d 	.word	0x0001653d
   1463c:	0001667d 	.word	0x0001667d
   14640:	00015e8d 	.word	0x00015e8d
   14644:	00020edf 	.word	0x00020edf
   14648:	00016085 	.word	0x00016085
   1464c:	000164b5 	.word	0x000164b5
   14650:	000164e9 	.word	0x000164e9
   14654:	000165b9 	.word	0x000165b9
   14658:	00015e99 	.word	0x00015e99
   1465c:	00021057 	.word	0x00021057
   14660:	20000208 	.word	0x20000208
   14664:	00016899 	.word	0x00016899
   14668:	00020f4d 	.word	0x00020f4d
   1466c:	00020fa5 	.word	0x00020fa5
   14670:	00020f27 	.word	0x00020f27
   14674:	00021039 	.word	0x00021039
   14678:	000167d1 	.word	0x000167d1
   1467c:	00021017 	.word	0x00021017
   14680:	0001681d 	.word	0x0001681d
   14684:	0002107b 	.word	0x0002107b
   14688:	00020f7b 	.word	0x00020f7b
   1468c:	0001679d 	.word	0x0001679d
   14690:	00021035 	.word	0x00021035

00014694 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
   14694:	4806      	ldr	r0, [pc, #24]	; (146b0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
   14696:	4905      	ldr	r1, [pc, #20]	; (146ac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
   14698:	6581      	str	r1, [r0, #88]	; 0x58
   1469a:	4906      	ldr	r1, [pc, #24]	; (146b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
   1469c:	6601      	str	r1, [r0, #96]	; 0x60
   1469e:	4807      	ldr	r0, [pc, #28]	; (146bc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
   146a0:	4905      	ldr	r1, [pc, #20]	; (146b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
   146a2:	6581      	str	r1, [r0, #88]	; 0x58
   146a4:	4906      	ldr	r1, [pc, #24]	; (146c0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
   146a6:	65c1      	str	r1, [r0, #92]	; 0x5c
   146a8:	4770      	bx	lr
   146aa:	0000      	.short	0x0000
   146ac:	00016161 	.word	0x00016161
   146b0:	2000015c 	.word	0x2000015c
   146b4:	00016251 	.word	0x00016251
   146b8:	00020fcb 	.word	0x00020fcb
   146bc:	20000208 	.word	0x20000208
   146c0:	00020ff5 	.word	0x00020ff5

000146c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
   146c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   146c8:	4c8e      	ldr	r4, [pc, #568]	; (14904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>)
   146ca:	2101      	movs	r1, #1
   146cc:	f1a4 0518 	sub.w	r5, r4, #24
   146d0:	7021      	strb	r1, [r4, #0]
   146d2:	2600      	movs	r6, #0
   146d4:	6060      	str	r0, [r4, #4]
   146d6:	80ae      	strh	r6, [r5, #4]
   146d8:	70ee      	strb	r6, [r5, #3]
   146da:	702e      	strb	r6, [r5, #0]
   146dc:	f880 130b 	strb.w	r1, [r0, #779]	; 0x30b
   146e0:	8800      	ldrh	r0, [r0, #0]
   146e2:	f7f9 f8c7 	bl	d874 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   146e6:	0007      	movs	r7, r0
   146e8:	d010      	beq.n	1470c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
   146ea:	6860      	ldr	r0, [r4, #4]
   146ec:	8800      	ldrh	r0, [r0, #0]
   146ee:	f7f9 fb9d 	bl	de2c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
   146f2:	6860      	ldr	r0, [r4, #4]
   146f4:	8800      	ldrh	r0, [r0, #0]
   146f6:	f7f9 fb3f 	bl	dd78 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
   146fa:	6860      	ldr	r0, [r4, #4]
   146fc:	f8b0 1302 	ldrh.w	r1, [r0, #770]	; 0x302
   14700:	b1c1      	cbz	r1, 14734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x70>
   14702:	f890 114e 	ldrb.w	r1, [r0, #334]	; 0x14e
   14706:	29fe      	cmp	r1, #254	; 0xfe
   14708:	d005      	beq.n	14716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
   1470a:	e018      	b.n	1473e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a>
   1470c:	f640 5159 	movw	r1, #3417	; 0xd59
   14710:	2031      	movs	r0, #49	; 0x31
   14712:	f7f8 fbb9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14716:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   1471a:	f88d 1000 	strb.w	r1, [sp]
   1471e:	f89d 1000 	ldrb.w	r1, [sp]
   14722:	b189      	cbz	r1, 14748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
   14724:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
   14728:	2301      	movs	r3, #1
   1472a:	4619      	mov	r1, r3
   1472c:	30a8      	adds	r0, #168	; 0xa8
   1472e:	f00a ffb2 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14732:	b188      	cbz	r0, 14758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
   14734:	6860      	ldr	r0, [r4, #4]
   14736:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
   1473a:	28fe      	cmp	r0, #254	; 0xfe
   1473c:	d004      	beq.n	14748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
   1473e:	6860      	ldr	r0, [r4, #4]
   14740:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
   14744:	f000 fc5c 	bl	15000 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6dc>
   14748:	6861      	ldr	r1, [r4, #4]
   1474a:	f891 030d 	ldrb.w	r0, [r1, #781]	; 0x30d
   1474e:	2800      	cmp	r0, #0
   14750:	bf18      	it	ne
   14752:	80ee      	strhne	r6, [r5, #6]
   14754:	d11f      	bne.n	14796 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
   14756:	e00f      	b.n	14778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
   14758:	6860      	ldr	r0, [r4, #4]
   1475a:	f8a0 60fa 	strh.w	r6, [r0, #250]	; 0xfa
   1475e:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
   14762:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
   14766:	2100      	movs	r1, #0
   14768:	2002      	movs	r0, #2
   1476a:	f001 f963 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   1476e:	6860      	ldr	r0, [r4, #4]
   14770:	f880 630a 	strb.w	r6, [r0, #778]	; 0x30a
   14774:	2002      	movs	r0, #2
   14776:	e7e5      	b.n	14744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
   14778:	f891 0224 	ldrb.w	r0, [r1, #548]	; 0x224
   1477c:	f88d 0000 	strb.w	r0, [sp]
   14780:	f89d 0000 	ldrb.w	r0, [sp]
   14784:	b928      	cbnz	r0, 14792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
   14786:	8d48      	ldrh	r0, [r1, #42]	; 0x2a
   14788:	8b8a      	ldrh	r2, [r1, #28]
   1478a:	4290      	cmp	r0, r2
   1478c:	bf88      	it	hi
   1478e:	80e8      	strhhi	r0, [r5, #6]
   14790:	d801      	bhi.n	14796 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
   14792:	8b88      	ldrh	r0, [r1, #28]
   14794:	80e8      	strh	r0, [r5, #6]
   14796:	f8b1 0306 	ldrh.w	r0, [r1, #774]	; 0x306
   1479a:	1e40      	subs	r0, r0, #1
   1479c:	fa1f f880 	uxth.w	r8, r0
   147a0:	f8b1 0308 	ldrh.w	r0, [r1, #776]	; 0x308
   147a4:	4440      	add	r0, r8
   147a6:	f8a1 0308 	strh.w	r0, [r1, #776]	; 0x308
   147aa:	f8b1 00f6 	ldrh.w	r0, [r1, #246]	; 0xf6
   147ae:	4440      	add	r0, r8
   147b0:	f8a1 00f6 	strh.w	r0, [r1, #246]	; 0xf6
   147b4:	f891 00cb 	ldrb.w	r0, [r1, #203]	; 0xcb
   147b8:	b940      	cbnz	r0, 147cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
   147ba:	f891 20c6 	ldrb.w	r2, [r1, #198]	; 0xc6
   147be:	f101 00a8 	add.w	r0, r1, #168	; 0xa8
   147c2:	2301      	movs	r3, #1
   147c4:	2106      	movs	r1, #6
   147c6:	f00a ff66 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   147ca:	b128      	cbz	r0, 147d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x114>
   147cc:	6860      	ldr	r0, [r4, #4]
   147ce:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
   147d2:	4441      	add	r1, r8
   147d4:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   147d8:	6861      	ldr	r1, [r4, #4]
   147da:	f8b1 0302 	ldrh.w	r0, [r1, #770]	; 0x302
   147de:	2801      	cmp	r0, #1
   147e0:	bf9c      	itt	ls
   147e2:	1c40      	addls	r0, r0, #1
   147e4:	f8a1 0302 	strhls.w	r0, [r1, #770]	; 0x302
   147e8:	f1b8 0f00 	cmp.w	r8, #0
   147ec:	bf18      	it	ne
   147ee:	f881 6314 	strbne.w	r6, [r1, #788]	; 0x314
   147f2:	f881 630a 	strb.w	r6, [r1, #778]	; 0x30a
   147f6:	f8b1 2306 	ldrh.w	r2, [r1, #774]	; 0x306
   147fa:	f101 00a8 	add.w	r0, r1, #168	; 0xa8
   147fe:	f7fa ffa3 	bl	f748 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
   14802:	b120      	cbz	r0, 1480e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
   14804:	f44f 615a 	mov.w	r1, #3488	; 0xda0
   14808:	2031      	movs	r0, #49	; 0x31
   1480a:	f7f8 fb3d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1480e:	6862      	ldr	r2, [r4, #4]
   14810:	f892 00c6 	ldrb.w	r0, [r2, #198]	; 0xc6
   14814:	280b      	cmp	r0, #11
   14816:	bf18      	it	ne
   14818:	280c      	cmpne	r0, #12
   1481a:	d119      	bne.n	14850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c>
   1481c:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	; 0xbc
   14820:	f8b2 33d4 	ldrh.w	r3, [r2, #980]	; 0x3d4
   14824:	eba1 0103 	sub.w	r1, r1, r3
   14828:	b209      	sxth	r1, r1
   1482a:	2900      	cmp	r1, #0
   1482c:	db10      	blt.n	14850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c>
   1482e:	f202 31d6 	addw	r1, r2, #982	; 0x3d6
   14832:	f102 00ce 	add.w	r0, r2, #206	; 0xce
   14836:	f00e f961 	bl	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   1483a:	2103      	movs	r1, #3
   1483c:	6860      	ldr	r0, [r4, #4]
   1483e:	f7fa fd3d 	bl	f2bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   14842:	6860      	ldr	r0, [r4, #4]
   14844:	f880 60c6 	strb.w	r6, [r0, #198]	; 0xc6
   14848:	21ff      	movs	r1, #255	; 0xff
   1484a:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
   1484e:	e027      	b.n	148a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   14850:	2826      	cmp	r0, #38	; 0x26
   14852:	d111      	bne.n	14878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4>
   14854:	f8b2 00bc 	ldrh.w	r0, [r2, #188]	; 0xbc
   14858:	f8b2 13d4 	ldrh.w	r1, [r2, #980]	; 0x3d4
   1485c:	1a40      	subs	r0, r0, r1
   1485e:	b200      	sxth	r0, r0
   14860:	2800      	cmp	r0, #0
   14862:	db09      	blt.n	14878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4>
   14864:	f882 60c6 	strb.w	r6, [r2, #198]	; 0xc6
   14868:	f001 f95c 	bl	15b24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1200>
   1486c:	2800      	cmp	r0, #0
   1486e:	6860      	ldr	r0, [r4, #4]
   14870:	f880 6164 	strb.w	r6, [r0, #356]	; 0x164
   14874:	d114      	bne.n	148a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   14876:	e03e      	b.n	148f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x232>
   14878:	f892 00c5 	ldrb.w	r0, [r2, #197]	; 0xc5
   1487c:	2826      	cmp	r0, #38	; 0x26
   1487e:	bf18      	it	ne
   14880:	2828      	cmpne	r0, #40	; 0x28
   14882:	d10d      	bne.n	148a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   14884:	f8b2 00bc 	ldrh.w	r0, [r2, #188]	; 0xbc
   14888:	f8b2 13d4 	ldrh.w	r1, [r2, #980]	; 0x3d4
   1488c:	eba0 0001 	sub.w	r0, r0, r1
   14890:	b200      	sxth	r0, r0
   14892:	2800      	cmp	r0, #0
   14894:	db04      	blt.n	148a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>
   14896:	f882 60c5 	strb.w	r6, [r2, #197]	; 0xc5
   1489a:	f001 f943 	bl	15b24 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1200>
   1489e:	b350      	cbz	r0, 148f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x232>
   148a0:	4638      	mov	r0, r7
   148a2:	f00a f9c0 	bl	1ec26 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   148a6:	2800      	cmp	r0, #0
   148a8:	6860      	ldr	r0, [r4, #4]
   148aa:	bf17      	itett	ne
   148ac:	f890 030e 	ldrbne.w	r0, [r0, #782]	; 0x30e
   148b0:	f880 630e 	strbeq.w	r6, [r0, #782]	; 0x30e
   148b4:	2800      	cmpne	r0, #0
   148b6:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   148ba:	4813      	ldr	r0, [pc, #76]	; (14908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>)
   148bc:	9000      	str	r0, [sp, #0]
   148be:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
   148c2:	4b12      	ldr	r3, [pc, #72]	; (1490c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
   148c4:	4a12      	ldr	r2, [pc, #72]	; (14910 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>)
   148c6:	f7f9 fb47 	bl	df58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
   148ca:	6969      	ldr	r1, [r5, #20]
   148cc:	2900      	cmp	r1, #0
   148ce:	bf1c      	itt	ne
   148d0:	7868      	ldrbne	r0, [r5, #1]
   148d2:	f003 f9ff 	blne	17cd4 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>
   148d6:	6860      	ldr	r0, [r4, #4]
   148d8:	2301      	movs	r3, #1
   148da:	2105      	movs	r1, #5
   148dc:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   148e0:	30a8      	adds	r0, #168	; 0xa8
   148e2:	f00a fed8 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   148e6:	2800      	cmp	r0, #0
   148e8:	bf08      	it	eq
   148ea:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   148ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   148f2:	f7f9 bb2b 	b.w	df4c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
   148f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   148fa:	2100      	movs	r1, #0
   148fc:	4608      	mov	r0, r1
   148fe:	f000 bca1 	b.w	15244 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x920>
   14902:	0000      	.short	0x0000
   14904:	20000154 	.word	0x20000154
   14908:	00015245 	.word	0x00015245
   1490c:	00014941 	.word	0x00014941
   14910:	00015a6d 	.word	0x00015a6d

00014914 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   14914:	4802      	ldr	r0, [pc, #8]	; (14920 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI+0xc>)
   14916:	2100      	movs	r1, #0
   14918:	6101      	str	r1, [r0, #16]
   1491a:	6141      	str	r1, [r0, #20]
   1491c:	4608      	mov	r0, r1
   1491e:	4770      	bx	lr
   14920:	2000013c 	.word	0x2000013c

00014924 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   14924:	4805      	ldr	r0, [pc, #20]	; (1493c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18>)
   14926:	6840      	ldr	r0, [r0, #4]
   14928:	f890 030e 	ldrb.w	r0, [r0, #782]	; 0x30e
   1492c:	b118      	cbz	r0, 14936 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12>
   1492e:	2100      	movs	r1, #0
   14930:	4608      	mov	r0, r1
   14932:	f000 bc87 	b.w	15244 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x920>
   14936:	f7f9 bd7b 	b.w	e430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
   1493a:	0000      	.short	0x0000
   1493c:	20000154 	.word	0x20000154
   14940:	490f      	ldr	r1, [pc, #60]	; (14980 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5c>)
   14942:	4602      	mov	r2, r0
   14944:	78c8      	ldrb	r0, [r1, #3]
   14946:	b9c8      	cbnz	r0, 1497c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   14948:	f101 0018 	add.w	r0, r1, #24
   1494c:	6840      	ldr	r0, [r0, #4]
   1494e:	b14a      	cbz	r2, 14964 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x40>
   14950:	7909      	ldrb	r1, [r1, #4]
   14952:	f011 0f08 	tst.w	r1, #8
   14956:	d003      	beq.n	14960 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3c>
   14958:	f890 00c7 	ldrb.w	r0, [r0, #199]	; 0xc7
   1495c:	2808      	cmp	r0, #8
   1495e:	d00d      	beq.n	1497c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   14960:	2001      	movs	r0, #1
   14962:	4770      	bx	lr
   14964:	6941      	ldr	r1, [r0, #20]
   14966:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1496a:	4291      	cmp	r1, r2
   1496c:	d306      	bcc.n	1497c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   1496e:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   14972:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   14974:	4291      	cmp	r1, r2
   14976:	d301      	bcc.n	1497c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x58>
   14978:	f7fe bef0 	b.w	1375c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
   1497c:	2000      	movs	r0, #0
   1497e:	4770      	bx	lr
   14980:	2000013c 	.word	0x2000013c
   14984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14986:	4dfd      	ldr	r5, [pc, #1012]	; (14d7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x458>)
   14988:	6869      	ldr	r1, [r5, #4]
   1498a:	f891 214e 	ldrb.w	r2, [r1, #334]	; 0x14e
   1498e:	2afe      	cmp	r2, #254	; 0xfe
   14990:	bf0c      	ite	eq
   14992:	2800      	cmpeq	r0, #0
   14994:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   14996:	f891 20c7 	ldrb.w	r2, [r1, #199]	; 0xc7
   1499a:	f101 00a8 	add.w	r0, r1, #168	; 0xa8
   1499e:	f04f 0301 	mov.w	r3, #1
   149a2:	4619      	mov	r1, r3
   149a4:	f00a fe77 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   149a8:	2800      	cmp	r0, #0
   149aa:	bf18      	it	ne
   149ac:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   149ae:	6868      	ldr	r0, [r5, #4]
   149b0:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   149b4:	f88d 1000 	strb.w	r1, [sp]
   149b8:	f89d 1000 	ldrb.w	r1, [sp]
   149bc:	2400      	movs	r4, #0
   149be:	b159      	cbz	r1, 149d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb4>
   149c0:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
   149c4:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
   149c8:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
   149cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   149d0:	2100      	movs	r1, #0
   149d2:	2002      	movs	r0, #2
   149d4:	f001 b82e 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   149d8:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   149dc:	2301      	movs	r3, #1
   149de:	2104      	movs	r1, #4
   149e0:	30a8      	adds	r0, #168	; 0xa8
   149e2:	f00a fe58 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   149e6:	0006      	movs	r6, r0
   149e8:	6868      	ldr	r0, [r5, #4]
   149ea:	f04f 0702 	mov.w	r7, #2
   149ee:	d00c      	beq.n	14a0a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe6>
   149f0:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   149f4:	2912      	cmp	r1, #18
   149f6:	d07d      	beq.n	14af4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d0>
   149f8:	2916      	cmp	r1, #22
   149fa:	d07c      	beq.n	14af6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d2>
   149fc:	2917      	cmp	r1, #23
   149fe:	d07b      	beq.n	14af8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d4>
   14a00:	291d      	cmp	r1, #29
   14a02:	f000 812c 	beq.w	14c5e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x33a>
   14a06:	f000 b94e 	b.w	14ca6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x382>
   14a0a:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   14a0e:	f011 0f01 	tst.w	r1, #1
   14a12:	d005      	beq.n	14a20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfc>
   14a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14a18:	2101      	movs	r1, #1
   14a1a:	2009      	movs	r0, #9
   14a1c:	f001 b80a 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14a20:	f011 0f02 	tst.w	r1, #2
   14a24:	d00b      	beq.n	14a3e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11a>
   14a26:	2101      	movs	r1, #1
   14a28:	200c      	movs	r0, #12
   14a2a:	f001 f803 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14a2e:	6868      	ldr	r0, [r5, #4]
   14a30:	f890 1107 	ldrb.w	r1, [r0, #263]	; 0x107
   14a34:	f041 0101 	orr.w	r1, r1, #1
   14a38:	f880 1107 	strb.w	r1, [r0, #263]	; 0x107
   14a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a3e:	f011 0f04 	tst.w	r1, #4
   14a42:	d005      	beq.n	14a50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12c>
   14a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14a48:	2101      	movs	r1, #1
   14a4a:	2013      	movs	r0, #19
   14a4c:	f000 bff2 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14a50:	f011 0f08 	tst.w	r1, #8
   14a54:	d009      	beq.n	14a6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x146>
   14a56:	f890 1148 	ldrb.w	r1, [r0, #328]	; 0x148
   14a5a:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
   14a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14a62:	2101      	movs	r1, #1
   14a64:	2007      	movs	r0, #7
   14a66:	f000 bfe5 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14a6a:	f011 0f80 	tst.w	r1, #128	; 0x80
   14a6e:	d005      	beq.n	14a7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x158>
   14a70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14a74:	2101      	movs	r1, #1
   14a76:	201b      	movs	r0, #27
   14a78:	f000 bfdc 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14a7c:	f011 0f30 	tst.w	r1, #48	; 0x30
   14a80:	d056      	beq.n	14b30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20c>
   14a82:	f890 115b 	ldrb.w	r1, [r0, #347]	; 0x15b
   14a86:	f88d 1000 	strb.w	r1, [sp]
   14a8a:	f89d 1000 	ldrb.w	r1, [sp]
   14a8e:	2900      	cmp	r1, #0
   14a90:	d17e      	bne.n	14b90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
   14a92:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
   14a96:	f88d 1000 	strb.w	r1, [sp]
   14a9a:	f89d 1000 	ldrb.w	r1, [sp]
   14a9e:	b1c9      	cbz	r1, 14ad4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0>
   14aa0:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   14aa4:	2926      	cmp	r1, #38	; 0x26
   14aa6:	bf1b      	ittet	ne
   14aa8:	f890 10c5 	ldrbne.w	r1, [r0, #197]	; 0xc5
   14aac:	2926      	cmpne	r1, #38	; 0x26
   14aae:	2301      	moveq	r3, #1
   14ab0:	2300      	movne	r3, #0
   14ab2:	f200 32d6 	addw	r2, r0, #982	; 0x3d6
   14ab6:	f500 71ad 	add.w	r1, r0, #346	; 0x15a
   14aba:	f7fb faa7 	bl	1000c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   14abe:	6868      	ldr	r0, [r5, #4]
   14ac0:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   14ac4:	f021 0120 	bic.w	r1, r1, #32
   14ac8:	f041 0110 	orr.w	r1, r1, #16
   14acc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   14ad0:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
   14ad4:	6868      	ldr	r0, [r5, #4]
   14ad6:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
   14ada:	f011 0f10 	tst.w	r1, #16
   14ade:	d057      	beq.n	14b90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
   14ae0:	f00b fabb 	bl	2005a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   14ae4:	2105      	movs	r1, #5
   14ae6:	6868      	ldr	r0, [r5, #4]
   14ae8:	f7fe fe64 	bl	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   14aec:	6868      	ldr	r0, [r5, #4]
   14aee:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
   14af2:	e002      	b.n	14afa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d6>
   14af4:	e02e      	b.n	14b54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x230>
   14af6:	e033      	b.n	14b60 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x23c>
   14af8:	e072      	b.n	14be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2bc>
   14afa:	2901      	cmp	r1, #1
   14afc:	bf08      	it	eq
   14afe:	f880 7064 	strbeq.w	r7, [r0, #100]	; 0x64
   14b02:	d006      	beq.n	14b12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ee>
   14b04:	f500 72e0 	add.w	r2, r0, #448	; 0x1c0
   14b08:	f100 0130 	add.w	r1, r0, #48	; 0x30
   14b0c:	8800      	ldrh	r0, [r0, #0]
   14b0e:	f7fb fa4f 	bl	ffb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   14b12:	6868      	ldr	r0, [r5, #4]
   14b14:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   14b18:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   14b1c:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   14b20:	f8a0 1152 	strh.w	r1, [r0, #338]	; 0x152
   14b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14b28:	2101      	movs	r1, #1
   14b2a:	2015      	movs	r0, #21
   14b2c:	f000 bf82 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14b30:	f011 0f40 	tst.w	r1, #64	; 0x40
   14b34:	d005      	beq.n	14b42 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x21e>
   14b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14b3a:	2101      	movs	r1, #1
   14b3c:	2024      	movs	r0, #36	; 0x24
   14b3e:	f000 bf79 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14b42:	f411 7f80 	tst.w	r1, #256	; 0x100
   14b46:	d023      	beq.n	14b90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26c>
   14b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14b4c:	2101      	movs	r1, #1
   14b4e:	201e      	movs	r0, #30
   14b50:	f000 bf70 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14b54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14b58:	2101      	movs	r1, #1
   14b5a:	200b      	movs	r0, #11
   14b5c:	f000 bf6a 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14b60:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   14b64:	2908      	cmp	r1, #8
   14b66:	d20d      	bcs.n	14b84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x260>
   14b68:	f501 7248 	add.w	r2, r1, #800	; 0x320
   14b6c:	f1c1 0108 	rsb	r1, r1, #8
   14b70:	b2c9      	uxtb	r1, r1
   14b72:	4410      	add	r0, r2
   14b74:	f7f8 fa38 	bl	cfe8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   14b78:	6869      	ldr	r1, [r5, #4]
   14b7a:	f891 2154 	ldrb.w	r2, [r1, #340]	; 0x154
   14b7e:	4410      	add	r0, r2
   14b80:	f881 0154 	strb.w	r0, [r1, #340]	; 0x154
   14b84:	686a      	ldr	r2, [r5, #4]
   14b86:	f892 0154 	ldrb.w	r0, [r2, #340]	; 0x154
   14b8a:	f1a0 0108 	sub.w	r1, r0, #8
   14b8e:	e000      	b.n	14b92 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x26e>
   14b90:	e06b      	b.n	14c6a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x346>
   14b92:	2904      	cmp	r1, #4
   14b94:	d20f      	bcs.n	14bb6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x292>
   14b96:	1f03      	subs	r3, r0, #4
   14b98:	3808      	subs	r0, #8
   14b9a:	f1c0 0004 	rsb	r0, r0, #4
   14b9e:	b2c1      	uxtb	r1, r0
   14ba0:	f503 70a0 	add.w	r0, r3, #320	; 0x140
   14ba4:	4410      	add	r0, r2
   14ba6:	f7f8 fa1f 	bl	cfe8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   14baa:	6869      	ldr	r1, [r5, #4]
   14bac:	f891 2154 	ldrb.w	r2, [r1, #340]	; 0x154
   14bb0:	4410      	add	r0, r2
   14bb2:	f881 0154 	strb.w	r0, [r1, #340]	; 0x154
   14bb6:	6868      	ldr	r0, [r5, #4]
   14bb8:	f890 1154 	ldrb.w	r1, [r0, #340]	; 0x154
   14bbc:	290c      	cmp	r1, #12
   14bbe:	bf38      	it	cc
   14bc0:	bdf8      	popcc	{r3, r4, r5, r6, r7, pc}
   14bc2:	d005      	beq.n	14bd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2ac>
   14bc4:	f640 1176 	movw	r1, #2422	; 0x976
   14bc8:	f04f 0031 	mov.w	r0, #49	; 0x31
   14bcc:	f7f8 f95c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14bd0:	f880 4154 	strb.w	r4, [r0, #340]	; 0x154
   14bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14bd8:	2101      	movs	r1, #1
   14bda:	2004      	movs	r0, #4
   14bdc:	f000 bf2a 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14be0:	f890 13b8 	ldrb.w	r1, [r0, #952]	; 0x3b8
   14be4:	2901      	cmp	r1, #1
   14be6:	d00b      	beq.n	14c00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2dc>
   14be8:	2902      	cmp	r1, #2
   14bea:	bf18      	it	ne
   14bec:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   14bee:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
   14bf2:	b1f9      	cbz	r1, 14c34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x310>
   14bf4:	2106      	movs	r1, #6
   14bf6:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
   14bfa:	2101      	movs	r1, #1
   14bfc:	2002      	movs	r0, #2
   14bfe:	e028      	b.n	14c52 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x32e>
   14c00:	f890 12e0 	ldrb.w	r1, [r0, #736]	; 0x2e0
   14c04:	f88d 1000 	strb.w	r1, [sp]
   14c08:	f89d 1000 	ldrb.w	r1, [sp]
   14c0c:	2900      	cmp	r1, #0
   14c0e:	bf18      	it	ne
   14c10:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   14c12:	f500 7398 	add.w	r3, r0, #304	; 0x130
   14c16:	f500 7146 	add.w	r1, r0, #792	; 0x318
   14c1a:	2200      	movs	r2, #0
   14c1c:	f200 30b9 	addw	r0, r0, #953	; 0x3b9
   14c20:	f7fa fb0a 	bl	f238 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   14c24:	2101      	movs	r1, #1
   14c26:	2005      	movs	r0, #5
   14c28:	f000 ff04 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14c2c:	6868      	ldr	r0, [r5, #4]
   14c2e:	f880 43b8 	strb.w	r4, [r0, #952]	; 0x3b8
   14c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c34:	2203      	movs	r2, #3
   14c36:	2106      	movs	r1, #6
   14c38:	f880 214b 	strb.w	r2, [r0, #331]	; 0x14b
   14c3c:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
   14c40:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
   14c44:	0880      	lsrs	r0, r0, #2
   14c46:	f010 0f01 	tst.w	r0, #1
   14c4a:	bf14      	ite	ne
   14c4c:	2011      	movne	r0, #17
   14c4e:	200d      	moveq	r0, #13
   14c50:	2101      	movs	r1, #1
   14c52:	f000 feef 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14c56:	6868      	ldr	r0, [r5, #4]
   14c58:	f880 43b8 	strb.w	r4, [r0, #952]	; 0x3b8
   14c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14c62:	2101      	movs	r1, #1
   14c64:	2006      	movs	r0, #6
   14c66:	f000 bee5 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14c6a:	6868      	ldr	r0, [r5, #4]
   14c6c:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   14c70:	2923      	cmp	r1, #35	; 0x23
   14c72:	d009      	beq.n	14c88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x364>
   14c74:	292b      	cmp	r1, #43	; 0x2b
   14c76:	d02f      	beq.n	14cd8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3b4>
   14c78:	2930      	cmp	r1, #48	; 0x30
   14c7a:	d114      	bne.n	14ca6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x382>
   14c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14c80:	2101      	movs	r1, #1
   14c82:	2011      	movs	r0, #17
   14c84:	f000 bed6 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14c88:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
   14c8c:	2902      	cmp	r1, #2
   14c8e:	d01d      	beq.n	14ccc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3a8>
   14c90:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
   14c94:	2901      	cmp	r1, #1
   14c96:	d106      	bne.n	14ca6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x382>
   14c98:	f890 0165 	ldrb.w	r0, [r0, #357]	; 0x165
   14c9c:	f88d 0000 	strb.w	r0, [sp]
   14ca0:	f89d 0000 	ldrb.w	r0, [sp]
   14ca4:	b190      	cbz	r0, 14ccc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3a8>
   14ca6:	6868      	ldr	r0, [r5, #4]
   14ca8:	2301      	movs	r3, #1
   14caa:	2100      	movs	r1, #0
   14cac:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   14cb0:	30a8      	adds	r0, #168	; 0xa8
   14cb2:	f00a fcf0 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14cb6:	b1f8      	cbz	r0, 14cf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d4>
   14cb8:	6868      	ldr	r0, [r5, #4]
   14cba:	2301      	movs	r3, #1
   14cbc:	2104      	movs	r1, #4
   14cbe:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   14cc2:	30a8      	adds	r0, #168	; 0xa8
   14cc4:	f00a fce7 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14cc8:	b160      	cbz	r0, 14ce4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3c0>
   14cca:	e015      	b.n	14cf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d4>
   14ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14cd0:	2101      	movs	r1, #1
   14cd2:	2017      	movs	r0, #23
   14cd4:	f000 beae 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14cd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14cdc:	2101      	movs	r1, #1
   14cde:	2020      	movs	r0, #32
   14ce0:	f000 bea8 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14ce4:	6868      	ldr	r0, [r5, #4]
   14ce6:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
   14cea:	b128      	cbz	r0, 14cf8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x3d4>
   14cec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14cf0:	2100      	movs	r1, #0
   14cf2:	2012      	movs	r0, #18
   14cf4:	f000 be9e 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14cf8:	6868      	ldr	r0, [r5, #4]
   14cfa:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   14cfe:	2a0a      	cmp	r2, #10
   14d00:	d016      	beq.n	14d30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x40c>
   14d02:	2e00      	cmp	r6, #0
   14d04:	bf18      	it	ne
   14d06:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   14d08:	2301      	movs	r3, #1
   14d0a:	2100      	movs	r1, #0
   14d0c:	30a8      	adds	r0, #168	; 0xa8
   14d0e:	f00a fcc2 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14d12:	2800      	cmp	r0, #0
   14d14:	f000 8157 	beq.w	14fc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a2>
   14d18:	6868      	ldr	r0, [r5, #4]
   14d1a:	f890 116b 	ldrb.w	r1, [r0, #363]	; 0x16b
   14d1e:	b189      	cbz	r1, 14d44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x420>
   14d20:	2100      	movs	r1, #0
   14d22:	200e      	movs	r0, #14
   14d24:	f000 fe86 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14d28:	6868      	ldr	r0, [r5, #4]
   14d2a:	f880 416b 	strb.w	r4, [r0, #363]	; 0x16b
   14d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d30:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
   14d34:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
   14d38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14d3c:	2100      	movs	r1, #0
   14d3e:	2007      	movs	r0, #7
   14d40:	f000 be78 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14d44:	f890 116a 	ldrb.w	r1, [r0, #362]	; 0x16a
   14d48:	b121      	cbz	r1, 14d54 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x430>
   14d4a:	f890 1107 	ldrb.w	r1, [r0, #263]	; 0x107
   14d4e:	f011 0f03 	tst.w	r1, #3
   14d52:	d015      	beq.n	14d80 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x45c>
   14d54:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
   14d58:	f88d 1000 	strb.w	r1, [sp]
   14d5c:	f89d 1000 	ldrb.w	r1, [sp]
   14d60:	b131      	cbz	r1, 14d70 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x44c>
   14d62:	f890 115b 	ldrb.w	r1, [r0, #347]	; 0x15b
   14d66:	f88d 1000 	strb.w	r1, [sp]
   14d6a:	f89d 1000 	ldrb.w	r1, [sp]
   14d6e:	b1a9      	cbz	r1, 14d9c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x478>
   14d70:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
   14d74:	2901      	cmp	r1, #1
   14d76:	d140      	bne.n	14dfa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4d6>
   14d78:	e030      	b.n	14ddc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4b8>
   14d7a:	0000      	.short	0x0000
   14d7c:	20000154 	.word	0x20000154
   14d80:	2100      	movs	r1, #0
   14d82:	200c      	movs	r0, #12
   14d84:	f000 fe56 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14d88:	6868      	ldr	r0, [r5, #4]
   14d8a:	f890 1107 	ldrb.w	r1, [r0, #263]	; 0x107
   14d8e:	f041 0101 	orr.w	r1, r1, #1
   14d92:	f880 1107 	strb.w	r1, [r0, #263]	; 0x107
   14d96:	f880 416a 	strb.w	r4, [r0, #362]	; 0x16a
   14d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d9c:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   14da0:	2926      	cmp	r1, #38	; 0x26
   14da2:	bf1d      	ittte	ne
   14da4:	f890 10c5 	ldrbne.w	r1, [r0, #197]	; 0xc5
   14da8:	2926      	cmpne	r1, #38	; 0x26
   14daa:	2300      	movne	r3, #0
   14dac:	2301      	moveq	r3, #1
   14dae:	f200 32d6 	addw	r2, r0, #982	; 0x3d6
   14db2:	f500 71ad 	add.w	r1, r0, #346	; 0x15a
   14db6:	f7fb f929 	bl	1000c <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   14dba:	6868      	ldr	r0, [r5, #4]
   14dbc:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
   14dc0:	2100      	movs	r1, #0
   14dc2:	2014      	movs	r0, #20
   14dc4:	f000 fe36 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14dc8:	6868      	ldr	r0, [r5, #4]
   14dca:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
   14dce:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   14dd2:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   14dd6:	f8a0 1152 	strh.w	r1, [r0, #338]	; 0x152
   14dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ddc:	f890 1165 	ldrb.w	r1, [r0, #357]	; 0x165
   14de0:	f88d 1000 	strb.w	r1, [sp]
   14de4:	f89d 1000 	ldrb.w	r1, [sp]
   14de8:	b939      	cbnz	r1, 14dfa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4d6>
   14dea:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   14dee:	2301      	movs	r3, #1
   14df0:	210b      	movs	r1, #11
   14df2:	30a8      	adds	r0, #168	; 0xa8
   14df4:	f00a fc4f 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14df8:	b168      	cbz	r0, 14e16 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x4f2>
   14dfa:	6868      	ldr	r0, [r5, #4]
   14dfc:	f890 11a1 	ldrb.w	r1, [r0, #417]	; 0x1a1
   14e00:	f88d 1000 	strb.w	r1, [sp]
   14e04:	f89d 1000 	ldrb.w	r1, [sp]
   14e08:	b399      	cbz	r1, 14e72 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x54e>
   14e0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14e0e:	2100      	movs	r1, #0
   14e10:	2023      	movs	r0, #35	; 0x23
   14e12:	f000 be0f 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14e16:	6868      	ldr	r0, [r5, #4]
   14e18:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   14e1c:	2901      	cmp	r1, #1
   14e1e:	bf08      	it	eq
   14e20:	2301      	moveq	r3, #1
   14e22:	d00f      	beq.n	14e44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x520>
   14e24:	2902      	cmp	r1, #2
   14e26:	bf08      	it	eq
   14e28:	2302      	moveq	r3, #2
   14e2a:	d00b      	beq.n	14e44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x520>
   14e2c:	2904      	cmp	r1, #4
   14e2e:	bf14      	ite	ne
   14e30:	2908      	cmpne	r1, #8
   14e32:	2303      	moveq	r3, #3
   14e34:	d006      	beq.n	14e44 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x520>
   14e36:	bf00      	nop
   14e38:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   14e3c:	f04f 0006 	mov.w	r0, #6
   14e40:	f7f8 f822 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   14e44:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
   14e48:	2a01      	cmp	r2, #1
   14e4a:	bf18      	it	ne
   14e4c:	2a02      	cmpne	r2, #2
   14e4e:	d004      	beq.n	14e5a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x536>
   14e50:	2a04      	cmp	r2, #4
   14e52:	bf14      	ite	ne
   14e54:	2a08      	cmpne	r2, #8
   14e56:	2203      	moveq	r2, #3
   14e58:	d1ee      	bne.n	14e38 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x514>
   14e5a:	f890 c166 	ldrb.w	ip, [r0, #358]	; 0x166
   14e5e:	2b01      	cmp	r3, #1
   14e60:	d008      	beq.n	14e74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x550>
   14e62:	2b02      	cmp	r3, #2
   14e64:	d00a      	beq.n	14e7c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x558>
   14e66:	2b03      	cmp	r3, #3
   14e68:	bf08      	it	eq
   14e6a:	f1bc 0f04 	cmpeq.w	ip, #4
   14e6e:	d008      	beq.n	14e82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55e>
   14e70:	e017      	b.n	14ea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x57e>
   14e72:	e040      	b.n	14ef6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5d2>
   14e74:	f1bc 0f01 	cmp.w	ip, #1
   14e78:	d113      	bne.n	14ea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x57e>
   14e7a:	e002      	b.n	14e82 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x55e>
   14e7c:	f1bc 0f02 	cmp.w	ip, #2
   14e80:	d10f      	bne.n	14ea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x57e>
   14e82:	f890 3167 	ldrb.w	r3, [r0, #359]	; 0x167
   14e86:	2a01      	cmp	r2, #1
   14e88:	d006      	beq.n	14e98 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x574>
   14e8a:	2a02      	cmp	r2, #2
   14e8c:	d007      	beq.n	14e9e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x57a>
   14e8e:	2a03      	cmp	r2, #3
   14e90:	bf08      	it	eq
   14e92:	2b04      	cmpeq	r3, #4
   14e94:	d00e      	beq.n	14eb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x590>
   14e96:	e004      	b.n	14ea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x57e>
   14e98:	2b01      	cmp	r3, #1
   14e9a:	d102      	bne.n	14ea2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x57e>
   14e9c:	e00a      	b.n	14eb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x590>
   14e9e:	2b02      	cmp	r3, #2
   14ea0:	d008      	beq.n	14eb4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x590>
   14ea2:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   14ea6:	2301      	movs	r3, #1
   14ea8:	2103      	movs	r1, #3
   14eaa:	30a8      	adds	r0, #168	; 0xa8
   14eac:	f00a fbf3 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14eb0:	bb80      	cbnz	r0, 14f14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5f0>
   14eb2:	e011      	b.n	14ed8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5b4>
   14eb4:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   14eb8:	f500 7275 	add.w	r2, r0, #980	; 0x3d4
   14ebc:	f8b0 0168 	ldrh.w	r0, [r0, #360]	; 0x168
   14ec0:	f00a fcd9 	bl	1f876 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
   14ec4:	b120      	cbz	r0, 14ed0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5ac>
   14ec6:	6869      	ldr	r1, [r5, #4]
   14ec8:	2028      	movs	r0, #40	; 0x28
   14eca:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   14ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ed0:	2000      	movs	r0, #0
   14ed2:	f000 fe85 	bl	15be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>
   14ed6:	e076      	b.n	14fc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a2>
   14ed8:	6868      	ldr	r0, [r5, #4]
   14eda:	2301      	movs	r3, #1
   14edc:	2102      	movs	r1, #2
   14ede:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   14ee2:	30a8      	adds	r0, #168	; 0xa8
   14ee4:	f00a fbd7 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14ee8:	b9a0      	cbnz	r0, 14f14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5f0>
   14eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14eee:	2100      	movs	r1, #0
   14ef0:	2016      	movs	r0, #22
   14ef2:	f000 bd9f 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14ef6:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
   14efa:	f88d 1000 	strb.w	r1, [sp]
   14efe:	f89d 1000 	ldrb.w	r1, [sp]
   14f02:	b141      	cbz	r1, 14f16 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x5f2>
   14f04:	2100      	movs	r1, #0
   14f06:	2025      	movs	r0, #37	; 0x25
   14f08:	f000 fd94 	bl	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14f0c:	6868      	ldr	r0, [r5, #4]
   14f0e:	f880 419e 	strb.w	r4, [r0, #414]	; 0x19e
   14f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f14:	e057      	b.n	14fc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a2>
   14f16:	f890 11a2 	ldrb.w	r1, [r0, #418]	; 0x1a2
   14f1a:	f88d 1000 	strb.w	r1, [sp]
   14f1e:	f89d 1000 	ldrb.w	r1, [sp]
   14f22:	b129      	cbz	r1, 14f30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x60c>
   14f24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14f28:	2100      	movs	r1, #0
   14f2a:	2022      	movs	r0, #34	; 0x22
   14f2c:	f000 bd82 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14f30:	f890 116c 	ldrb.w	r1, [r0, #364]	; 0x16c
   14f34:	f88d 1000 	strb.w	r1, [sp]
   14f38:	f89d 1000 	ldrb.w	r1, [sp]
   14f3c:	b3b1      	cbz	r1, 14fac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x688>
   14f3e:	f890 0170 	ldrb.w	r0, [r0, #368]	; 0x170
   14f42:	f00c f89c 	bl	2107e <sym_WJKL6PNKBRGLYWJPK5M56X5KMOFGBVLV6LZFL2I>
   14f46:	2800      	cmp	r0, #0
   14f48:	6868      	ldr	r0, [r5, #4]
   14f4a:	d008      	beq.n	14f5e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x63a>
   14f4c:	4b2a      	ldr	r3, [pc, #168]	; (14ff8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d4>)
   14f4e:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   14f52:	f200 1171 	addw	r1, r0, #369	; 0x171
   14f56:	681b      	ldr	r3, [r3, #0]
   14f58:	4826      	ldr	r0, [pc, #152]	; (14ff4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d0>)
   14f5a:	4798      	blx	r3
   14f5c:	e00b      	b.n	14f76 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x652>
   14f5e:	f8df c09c 	ldr.w	ip, [pc, #156]	; 14ffc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d8>
   14f62:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
   14f66:	f200 1293 	addw	r2, r0, #403	; 0x193
   14f6a:	f200 1171 	addw	r1, r0, #369	; 0x171
   14f6e:	f8dc c000 	ldr.w	ip, [ip]
   14f72:	4820      	ldr	r0, [pc, #128]	; (14ff4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6d0>)
   14f74:	47e0      	blx	ip
   14f76:	b138      	cbz	r0, 14f88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x664>
   14f78:	2801      	cmp	r0, #1
   14f7a:	d024      	beq.n	14fc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a2>
   14f7c:	2802      	cmp	r0, #2
   14f7e:	bf04      	itt	eq
   14f80:	6868      	ldreq	r0, [r5, #4]
   14f82:	f880 416c 	strbeq.w	r4, [r0, #364]	; 0x16c
   14f86:	e01e      	b.n	14fc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a2>
   14f88:	6868      	ldr	r0, [r5, #4]
   14f8a:	f890 0170 	ldrb.w	r0, [r0, #368]	; 0x170
   14f8e:	f00c f876 	bl	2107e <sym_WJKL6PNKBRGLYWJPK5M56X5KMOFGBVLV6LZFL2I>
   14f92:	f04f 0100 	mov.w	r1, #0
   14f96:	b120      	cbz	r0, 14fa2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x67e>
   14f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14f9c:	201c      	movs	r0, #28
   14f9e:	f000 bd49 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14fa6:	202a      	movs	r0, #42	; 0x2a
   14fa8:	f000 bd44 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14fac:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
   14fb0:	f88d 0000 	strb.w	r0, [sp]
   14fb4:	f89d 0000 	ldrb.w	r0, [sp]
   14fb8:	b128      	cbz	r0, 14fc6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x6a2>
   14fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14fbe:	2100      	movs	r1, #0
   14fc0:	201d      	movs	r0, #29
   14fc2:	f000 bd37 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14fc6:	6868      	ldr	r0, [r5, #4]
   14fc8:	2301      	movs	r3, #1
   14fca:	2100      	movs	r1, #0
   14fcc:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   14fd0:	30a8      	adds	r0, #168	; 0xa8
   14fd2:	f00a fb60 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   14fd6:	2800      	cmp	r0, #0
   14fd8:	bf08      	it	eq
   14fda:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   14fdc:	6868      	ldr	r0, [r5, #4]
   14fde:	f890 03cc 	ldrb.w	r0, [r0, #972]	; 0x3cc
   14fe2:	2800      	cmp	r0, #0
   14fe4:	bf08      	it	eq
   14fe6:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   14fe8:	2100      	movs	r1, #0
   14fea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14fee:	20ff      	movs	r0, #255	; 0xff
   14ff0:	f000 bd20 	b.w	15a34 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1110>
   14ff4:	20000154 	.word	0x20000154
   14ff8:	200002c8 	.word	0x200002c8
   14ffc:	200002cc 	.word	0x200002cc
   15000:	b570      	push	{r4, r5, r6, lr}
   15002:	b082      	sub	sp, #8
   15004:	4605      	mov	r5, r0
   15006:	4668      	mov	r0, sp
   15008:	f7f8 fefa 	bl	de00 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
   1500c:	b330      	cbz	r0, 1505c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x738>
   1500e:	2232      	movs	r2, #50	; 0x32
   15010:	2100      	movs	r1, #0
   15012:	9800      	ldr	r0, [sp, #0]
   15014:	f00e f8e3 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   15018:	9e00      	ldr	r6, [sp, #0]
   1501a:	2103      	movs	r1, #3
   1501c:	4630      	mov	r0, r6
   1501e:	f00a ff68 	bl	1fef2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   15022:	9800      	ldr	r0, [sp, #0]
   15024:	7801      	ldrb	r1, [r0, #0]
   15026:	f001 01ef 	and.w	r1, r1, #239	; 0xef
   1502a:	7001      	strb	r1, [r0, #0]
   1502c:	4629      	mov	r1, r5
   1502e:	f7fa fc0b 	bl	f848 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
   15032:	2100      	movs	r1, #0
   15034:	4c82      	ldr	r4, [pc, #520]	; (15240 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91c>)
   15036:	2d15      	cmp	r5, #21
   15038:	d076      	beq.n	15128 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x804>
   1503a:	dc14      	bgt.n	15066 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x742>
   1503c:	f1a5 0002 	sub.w	r0, r5, #2
   15040:	2813      	cmp	r0, #19
   15042:	d22c      	bcs.n	1509e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x77a>
   15044:	e8df f000 	tbb	[pc, r0]
   15048:	f05d2b30 	.word	0xf05d2b30
   1504c:	6b2b30f0 	.word	0x6b2b30f0
   15050:	4248f02b 	.word	0x4248f02b
   15054:	352b2bba 	.word	0x352b2bba
   15058:	0070f0f0 	.word	0x0070f0f0
   1505c:	f640 31b5 	movw	r1, #2997	; 0xbb5
   15060:	2031      	movs	r0, #49	; 0x31
   15062:	f7f7 ff11 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15066:	2d20      	cmp	r5, #32
   15068:	d077      	beq.n	1515a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x836>
   1506a:	dc0a      	bgt.n	15082 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x75e>
   1506c:	f1a5 0016 	sub.w	r0, r5, #22
   15070:	2809      	cmp	r0, #9
   15072:	d214      	bcs.n	1509e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x77a>
   15074:	e8df f000 	tbb	[pc, r0]
   15078:	13138f3b 	.word	0x13138f3b
   1507c:	acb47413 	.word	0xacb47413
   15080:	00b0      	.short	0x00b0
   15082:	2d25      	cmp	r5, #37	; 0x25
   15084:	d06a      	beq.n	1515c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x838>
   15086:	dc06      	bgt.n	15096 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x772>
   15088:	2d22      	cmp	r5, #34	; 0x22
   1508a:	d068      	beq.n	1515e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x83a>
   1508c:	2d23      	cmp	r5, #35	; 0x23
   1508e:	bf18      	it	ne
   15090:	2d24      	cmpne	r5, #36	; 0x24
   15092:	d063      	beq.n	1515c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x838>
   15094:	e003      	b.n	1509e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x77a>
   15096:	2d2a      	cmp	r5, #42	; 0x2a
   15098:	d07b      	beq.n	15192 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x86e>
   1509a:	2dff      	cmp	r5, #255	; 0xff
   1509c:	d07a      	beq.n	15194 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x870>
   1509e:	f640 4161 	movw	r1, #3169	; 0xc61
   150a2:	2031      	movs	r0, #49	; 0x31
   150a4:	f7f7 fef0 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   150a8:	6861      	ldr	r1, [r4, #4]
   150aa:	9800      	ldr	r0, [sp, #0]
   150ac:	f891 1150 	ldrb.w	r1, [r1, #336]	; 0x150
   150b0:	e010      	b.n	150d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x7b0>
   150b2:	6860      	ldr	r0, [r4, #4]
   150b4:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
   150b8:	9800      	ldr	r0, [sp, #0]
   150ba:	f00a fefa 	bl	1feb2 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
   150be:	6860      	ldr	r0, [r4, #4]
   150c0:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
   150c4:	9800      	ldr	r0, [sp, #0]
   150c6:	f00a fef8 	bl	1feba <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
   150ca:	e0ad      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   150cc:	6861      	ldr	r1, [r4, #4]
   150ce:	9800      	ldr	r0, [sp, #0]
   150d0:	f891 114a 	ldrb.w	r1, [r1, #330]	; 0x14a
   150d4:	7101      	strb	r1, [r0, #4]
   150d6:	e0a7      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   150d8:	9800      	ldr	r0, [sp, #0]
   150da:	220c      	movs	r2, #12
   150dc:	7102      	strb	r2, [r0, #4]
   150de:	2259      	movs	r2, #89	; 0x59
   150e0:	7142      	strb	r2, [r0, #5]
   150e2:	7181      	strb	r1, [r0, #6]
   150e4:	214b      	movs	r1, #75	; 0x4b
   150e6:	71c1      	strb	r1, [r0, #7]
   150e8:	2112      	movs	r1, #18
   150ea:	7201      	strb	r1, [r0, #8]
   150ec:	e09c      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   150ee:	6861      	ldr	r1, [r4, #4]
   150f0:	9800      	ldr	r0, [sp, #0]
   150f2:	f891 1166 	ldrb.w	r1, [r1, #358]	; 0x166
   150f6:	7101      	strb	r1, [r0, #4]
   150f8:	6861      	ldr	r1, [r4, #4]
   150fa:	f891 1167 	ldrb.w	r1, [r1, #359]	; 0x167
   150fe:	7141      	strb	r1, [r0, #5]
   15100:	e092      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   15102:	6860      	ldr	r0, [r4, #4]
   15104:	f500 7148 	add.w	r1, r0, #800	; 0x320
   15108:	9800      	ldr	r0, [sp, #0]
   1510a:	f00a fe7b 	bl	1fe04 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
   1510e:	6860      	ldr	r0, [r4, #4]
   15110:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   15114:	9800      	ldr	r0, [sp, #0]
   15116:	f00a fe72 	bl	1fdfe <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
   1511a:	e085      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   1511c:	e004      	b.n	15128 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x804>
   1511e:	4848      	ldr	r0, [pc, #288]	; (15240 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91c>)
   15120:	9900      	ldr	r1, [sp, #0]
   15122:	f7fb f9a9 	bl	10478 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
   15126:	e07f      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   15128:	6860      	ldr	r0, [r4, #4]
   1512a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
   1512e:	9800      	ldr	r0, [sp, #0]
   15130:	f00a fee7 	bl	1ff02 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
   15134:	6860      	ldr	r0, [r4, #4]
   15136:	f8b0 1152 	ldrh.w	r1, [r0, #338]	; 0x152
   1513a:	9800      	ldr	r0, [sp, #0]
   1513c:	f00a fee5 	bl	1ff0a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
   15140:	6860      	ldr	r0, [r4, #4]
   15142:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   15146:	9800      	ldr	r0, [sp, #0]
   15148:	f00a fee3 	bl	1ff12 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
   1514c:	6860      	ldr	r0, [r4, #4]
   1514e:	f8b0 1150 	ldrh.w	r1, [r0, #336]	; 0x150
   15152:	9800      	ldr	r0, [sp, #0]
   15154:	f00a fee1 	bl	1ff1a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
   15158:	e066      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   1515a:	e051      	b.n	15200 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8dc>
   1515c:	e032      	b.n	151c4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8a0>
   1515e:	e054      	b.n	1520a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8e6>
   15160:	9101      	str	r1, [sp, #4]
   15162:	2101      	movs	r1, #1
   15164:	4630      	mov	r0, r6
   15166:	f00a feaa 	bl	1febe <sym_ML7UWXB7GWXTGW6UFCU3UDXHGUNWX35NXVW5QIA>
   1516a:	6860      	ldr	r0, [r4, #4]
   1516c:	f810 2f10 	ldrb.w	r2, [r0, #16]!
   15170:	2a03      	cmp	r2, #3
   15172:	bf08      	it	eq
   15174:	2200      	moveq	r2, #0
   15176:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1517a:	7840      	ldrb	r0, [r0, #1]
   1517c:	f362 1187 	bfi	r1, r2, #6, #2
   15180:	f360 0104 	bfi	r1, r0, #0, #5
   15184:	f88d 1004 	strb.w	r1, [sp, #4]
   15188:	a901      	add	r1, sp, #4
   1518a:	4630      	mov	r0, r6
   1518c:	f00a fea0 	bl	1fed0 <sym_2FLKUHSSL5LZIVHHB4YVAFHCUF4O55YZBH5NHWQ>
   15190:	e04a      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   15192:	e02c      	b.n	151ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8ca>
   15194:	e040      	b.n	15218 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x8f4>
   15196:	6861      	ldr	r1, [r4, #4]
   15198:	f891 0164 	ldrb.w	r0, [r1, #356]	; 0x164
   1519c:	2801      	cmp	r0, #1
   1519e:	9800      	ldr	r0, [sp, #0]
   151a0:	bf14      	ite	ne
   151a2:	f891 106a 	ldrbne.w	r1, [r1, #106]	; 0x6a
   151a6:	f891 1166 	ldrbeq.w	r1, [r1, #358]	; 0x166
   151aa:	7101      	strb	r1, [r0, #4]
   151ac:	6861      	ldr	r1, [r4, #4]
   151ae:	bf14      	ite	ne
   151b0:	f891 106b 	ldrbne.w	r1, [r1, #107]	; 0x6b
   151b4:	f891 1167 	ldrbeq.w	r1, [r1, #359]	; 0x167
   151b8:	7141      	strb	r1, [r0, #5]
   151ba:	e035      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   151bc:	9800      	ldr	r0, [sp, #0]
   151be:	f7fb f8fb 	bl	103b8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
   151c2:	e031      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   151c4:	4a1e      	ldr	r2, [pc, #120]	; (15240 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91c>)
   151c6:	4628      	mov	r0, r5
   151c8:	9900      	ldr	r1, [sp, #0]
   151ca:	f00c f80e 	bl	211ea <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
   151ce:	e02b      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   151d0:	9800      	ldr	r0, [sp, #0]
   151d2:	f00d fc5a 	bl	22a8a <sym_AGYGMJJLNZ3OUAGF7EU6BV4ZDBZCTDBRZLY27WA>
   151d6:	e027      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   151d8:	9800      	ldr	r0, [sp, #0]
   151da:	f00d fc5e 	bl	22a9a <sym_KEGGHGQL6JDMBU54KJKZYI4X76QJRM6TXCH5TWI>
   151de:	e023      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   151e0:	6860      	ldr	r0, [r4, #4]
   151e2:	f200 1171 	addw	r1, r0, #369	; 0x171
   151e6:	9800      	ldr	r0, [sp, #0]
   151e8:	f00a fe30 	bl	1fe4c <sym_LDFW4OY5TOKCR2MMH4J6WIDM27FFMWUGGCVUBSQ>
   151ec:	e01c      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   151ee:	6860      	ldr	r0, [r4, #4]
   151f0:	f200 1293 	addw	r2, r0, #403	; 0x193
   151f4:	f200 1171 	addw	r1, r0, #369	; 0x171
   151f8:	9800      	ldr	r0, [sp, #0]
   151fa:	f00a fe2b 	bl	1fe54 <sym_NORIA4HWCV5CFHFK4OOXISIP5EQ5LDTDZB2MMQA>
   151fe:	e013      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   15200:	490f      	ldr	r1, [pc, #60]	; (15240 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x91c>)
   15202:	9800      	ldr	r0, [sp, #0]
   15204:	f00b ffb1 	bl	2116a <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y>
   15208:	e00e      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   1520a:	6860      	ldr	r0, [r4, #4]
   1520c:	f500 71ac 	add.w	r1, r0, #344	; 0x158
   15210:	9800      	ldr	r0, [sp, #0]
   15212:	f00b ffd9 	bl	211c8 <sym_UEPRO7A35Z75LB2PPJ4VSGI4I7C3AOKO4ZR5U5A>
   15216:	e007      	b.n	15228 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x904>
   15218:	6860      	ldr	r0, [r4, #4]
   1521a:	f890 23cf 	ldrb.w	r2, [r0, #975]	; 0x3cf
   1521e:	f8d0 13d0 	ldr.w	r1, [r0, #976]	; 0x3d0
   15222:	9800      	ldr	r0, [sp, #0]
   15224:	f00a fe57 	bl	1fed6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
   15228:	f7f8 fdc2 	bl	ddb0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
   1522c:	2800      	cmp	r0, #0
   1522e:	bf1c      	itt	ne
   15230:	b002      	addne	sp, #8
   15232:	bd70      	popne	{r4, r5, r6, pc}
   15234:	f640 4165 	movw	r1, #3173	; 0xc65
   15238:	2031      	movs	r0, #49	; 0x31
   1523a:	f7f7 fe25 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1523e:	0000      	.short	0x0000
   15240:	20000154 	.word	0x20000154
   15244:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15248:	4cff      	ldr	r4, [pc, #1020]	; (15648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd24>)
   1524a:	b087      	sub	sp, #28
   1524c:	4689      	mov	r9, r1
   1524e:	6860      	ldr	r0, [r4, #4]
   15250:	8800      	ldrh	r0, [r0, #0]
   15252:	f7f8 fb0f 	bl	d874 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   15256:	9005      	str	r0, [sp, #20]
   15258:	b170      	cbz	r0, 15278 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x954>
   1525a:	f1a4 0618 	sub.w	r6, r4, #24
   1525e:	f04f 0500 	mov.w	r5, #0
   15262:	88b0      	ldrh	r0, [r6, #4]
   15264:	f410 7f80 	tst.w	r0, #256	; 0x100
   15268:	6860      	ldr	r0, [r4, #4]
   1526a:	bf1c      	itt	ne
   1526c:	f8a0 50f6 	strhne.w	r5, [r0, #246]	; 0xf6
   15270:	f880 5314 	strbne.w	r5, [r0, #788]	; 0x314
   15274:	d005      	beq.n	15282 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x95e>
   15276:	e009      	b.n	1528c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x968>
   15278:	f640 7145 	movw	r1, #3909	; 0xf45
   1527c:	2031      	movs	r0, #49	; 0x31
   1527e:	f7f7 fe03 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15282:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
   15286:	1c49      	adds	r1, r1, #1
   15288:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
   1528c:	6860      	ldr	r0, [r4, #4]
   1528e:	f04f 0a01 	mov.w	sl, #1
   15292:	f890 10cb 	ldrb.w	r1, [r0, #203]	; 0xcb
   15296:	b939      	cbnz	r1, 152a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x984>
   15298:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   1529c:	2301      	movs	r3, #1
   1529e:	2106      	movs	r1, #6
   152a0:	30a8      	adds	r0, #168	; 0xa8
   152a2:	f00a f9f8 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   152a6:	b348      	cbz	r0, 152fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
   152a8:	88b0      	ldrh	r0, [r6, #4]
   152aa:	f410 6f00 	tst.w	r0, #2048	; 0x800
   152ae:	d007      	beq.n	152c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x99c>
   152b0:	6860      	ldr	r0, [r4, #4]
   152b2:	f890 10cb 	ldrb.w	r1, [r0, #203]	; 0xcb
   152b6:	2900      	cmp	r1, #0
   152b8:	bf18      	it	ne
   152ba:	f8c0 50e8 	strne.w	r5, [r0, #232]	; 0xe8
   152be:	d11d      	bne.n	152fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
   152c0:	6860      	ldr	r0, [r4, #4]
   152c2:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
   152c6:	1c49      	adds	r1, r1, #1
   152c8:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   152cc:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
   152d0:	428a      	cmp	r2, r1
   152d2:	bf2c      	ite	cs
   152d4:	1a53      	subcs	r3, r2, r1
   152d6:	2300      	movcc	r3, #0
   152d8:	f8b6 c006 	ldrh.w	ip, [r6, #6]
   152dc:	f10c 0c05 	add.w	ip, ip, #5
   152e0:	4563      	cmp	r3, ip
   152e2:	bf98      	it	ls
   152e4:	f880 a0f4 	strbls.w	sl, [r0, #244]	; 0xf4
   152e8:	4291      	cmp	r1, r2
   152ea:	d307      	bcc.n	152fc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9d8>
   152ec:	f8c0 50e8 	str.w	r5, [r0, #232]	; 0xe8
   152f0:	220f      	movs	r2, #15
   152f2:	49d6      	ldr	r1, [pc, #856]	; (1564c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd28>)
   152f4:	f500 70db 	add.w	r0, r0, #438	; 0x1b6
   152f8:	f7fa fdc0 	bl	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   152fc:	88b0      	ldrh	r0, [r6, #4]
   152fe:	f04f 0802 	mov.w	r8, #2
   15302:	f410 7f40 	tst.w	r0, #768	; 0x300
   15306:	d011      	beq.n	1532c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa08>
   15308:	6860      	ldr	r0, [r4, #4]
   1530a:	f890 10c9 	ldrb.w	r1, [r0, #201]	; 0xc9
   1530e:	b111      	cbz	r1, 15316 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9f2>
   15310:	2903      	cmp	r1, #3
   15312:	d006      	beq.n	15322 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x9fe>
   15314:	e00a      	b.n	1532c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa08>
   15316:	f880 a0c9 	strb.w	sl, [r0, #201]	; 0xc9
   1531a:	2101      	movs	r1, #1
   1531c:	f7fe fa4a 	bl	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   15320:	e004      	b.n	1532c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa08>
   15322:	f880 80c9 	strb.w	r8, [r0, #201]	; 0xc9
   15326:	2101      	movs	r1, #1
   15328:	f7fe fa44 	bl	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   1532c:	6860      	ldr	r0, [r4, #4]
   1532e:	f890 10c9 	ldrb.w	r1, [r0, #201]	; 0xc9
   15332:	2901      	cmp	r1, #1
   15334:	d105      	bne.n	15342 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa1e>
   15336:	88b1      	ldrh	r1, [r6, #4]
   15338:	f411 6f80 	tst.w	r1, #1024	; 0x400
   1533c:	bf18      	it	ne
   1533e:	f880 80c9 	strbne.w	r8, [r0, #201]	; 0xc9
   15342:	9907      	ldr	r1, [sp, #28]
   15344:	2900      	cmp	r1, #0
   15346:	f040 82aa 	bne.w	1589e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf7a>
   1534a:	88b1      	ldrh	r1, [r6, #4]
   1534c:	f011 0f40 	tst.w	r1, #64	; 0x40
   15350:	bf18      	it	ne
   15352:	f8a0 5328 	strhne.w	r5, [r0, #808]	; 0x328
   15356:	d104      	bne.n	15362 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa3e>
   15358:	f8b0 2328 	ldrh.w	r2, [r0, #808]	; 0x328
   1535c:	1c52      	adds	r2, r2, #1
   1535e:	f8a0 2328 	strh.w	r2, [r0, #808]	; 0x328
   15362:	ea5f 0709 	movs.w	r7, r9
   15366:	f040 80f9 	bne.w	1555c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc38>
   1536a:	f011 0f08 	tst.w	r1, #8
   1536e:	d05c      	beq.n	1542a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb06>
   15370:	f890 114e 	ldrb.w	r1, [r0, #334]	; 0x14e
   15374:	291c      	cmp	r1, #28
   15376:	d003      	beq.n	15380 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa5c>
   15378:	2922      	cmp	r1, #34	; 0x22
   1537a:	d00d      	beq.n	15398 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa74>
   1537c:	292a      	cmp	r1, #42	; 0x2a
   1537e:	d108      	bne.n	15392 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa6e>
   15380:	f500 72b6 	add.w	r2, r0, #364	; 0x16c
   15384:	7015      	strb	r5, [r2, #0]
   15386:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
   1538a:	f880 5100 	strb.w	r5, [r0, #256]	; 0x100
   1538e:	f8a0 50fc 	strh.w	r5, [r0, #252]	; 0xfc
   15392:	29fe      	cmp	r1, #254	; 0xfe
   15394:	d109      	bne.n	153aa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa86>
   15396:	e016      	b.n	153c6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaa2>
   15398:	f500 71d1 	add.w	r1, r0, #418	; 0x1a2
   1539c:	700d      	strb	r5, [r1, #0]
   1539e:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
   153a2:	f880 5100 	strb.w	r5, [r0, #256]	; 0x100
   153a6:	f8a0 50fc 	strh.w	r5, [r0, #252]	; 0xfc
   153aa:	21fe      	movs	r1, #254	; 0xfe
   153ac:	f880 114e 	strb.w	r1, [r0, #334]	; 0x14e
   153b0:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   153b4:	291b      	cmp	r1, #27
   153b6:	d00b      	beq.n	153d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaac>
   153b8:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
   153bc:	2921      	cmp	r1, #33	; 0x21
   153be:	d019      	beq.n	153f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xad0>
   153c0:	2932      	cmp	r1, #50	; 0x32
   153c2:	d023      	beq.n	1540c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xae8>
   153c4:	e028      	b.n	15418 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaf4>
   153c6:	f640 110e 	movw	r1, #2318	; 0x90e
   153ca:	2031      	movs	r0, #49	; 0x31
   153cc:	f7f7 fd5c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   153d0:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
   153d4:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   153d8:	1e49      	subs	r1, r1, #1
   153da:	b249      	sxtb	r1, r1
   153dc:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   153e0:	2900      	cmp	r1, #0
   153e2:	bfa8      	it	ge
   153e4:	f880 50c6 	strbge.w	r5, [r0, #198]	; 0xc6
   153e8:	dae6      	bge.n	153b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xa94>
   153ea:	f240 2101 	movw	r1, #513	; 0x201
   153ee:	2031      	movs	r0, #49	; 0x31
   153f0:	f7f7 fd4a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   153f4:	f890 00c6 	ldrb.w	r0, [r0, #198]	; 0xc6
   153f8:	f00a f9c7 	bl	1f78a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   153fc:	2800      	cmp	r0, #0
   153fe:	bf14      	ite	ne
   15400:	202f      	movne	r0, #47	; 0x2f
   15402:	2022      	moveq	r0, #34	; 0x22
   15404:	6861      	ldr	r1, [r4, #4]
   15406:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   1540a:	e005      	b.n	15418 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xaf4>
   1540c:	f880 a3cd 	strb.w	sl, [r0, #973]	; 0x3cd
   15410:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
   15414:	f880 5100 	strb.w	r5, [r0, #256]	; 0x100
   15418:	6860      	ldr	r0, [r4, #4]
   1541a:	f890 10c7 	ldrb.w	r1, [r0, #199]	; 0xc7
   1541e:	2908      	cmp	r1, #8
   15420:	bf04      	itt	eq
   15422:	f886 8000 	strbeq.w	r8, [r6]
   15426:	f880 814e 	strbeq.w	r8, [r0, #334]	; 0x14e
   1542a:	7930      	ldrb	r0, [r6, #4]
   1542c:	f010 0f01 	tst.w	r0, #1
   15430:	d05e      	beq.n	154f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbcc>
   15432:	68f0      	ldr	r0, [r6, #12]
   15434:	2301      	movs	r3, #1
   15436:	2105      	movs	r1, #5
   15438:	f890 b003 	ldrb.w	fp, [r0, #3]
   1543c:	6860      	ldr	r0, [r4, #4]
   1543e:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   15442:	30a8      	adds	r0, #168	; 0xa8
   15444:	f00a f927 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15448:	b160      	cbz	r0, 15464 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb40>
   1544a:	f1ab 0002 	sub.w	r0, fp, #2
   1544e:	280a      	cmp	r0, #10
   15450:	d206      	bcs.n	15460 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb3c>
   15452:	e8df f000 	tbb	[pc, r0]
   15456:	0707      	.short	0x0707
   15458:	07070505 	.word	0x07070505
   1545c:	07070505 	.word	0x07070505
   15460:	2708      	movs	r7, #8
   15462:	e07b      	b.n	1555c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc38>
   15464:	68f0      	ldr	r0, [r6, #12]
   15466:	f7fa f9df 	bl	f828 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
   1546a:	b158      	cbz	r0, 15484 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb60>
   1546c:	68f0      	ldr	r0, [r6, #12]
   1546e:	f890 b003 	ldrb.w	fp, [r0, #3]
   15472:	f1bb 0f00 	cmp.w	fp, #0
   15476:	bf1c      	itt	ne
   15478:	f1bb 0f01 	cmpne.w	fp, #1
   1547c:	f1bb 0f16 	cmpne.w	fp, #22
   15480:	d005      	beq.n	1548e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb6a>
   15482:	e01b      	b.n	154bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb98>
   15484:	4870      	ldr	r0, [pc, #448]	; (15648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd24>)
   15486:	f000 fd0d 	bl	15ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   1548a:	4607      	mov	r7, r0
   1548c:	e027      	b.n	154de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbba>
   1548e:	6860      	ldr	r0, [r4, #4]
   15490:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
   15494:	f00a f979 	bl	1f78a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   15498:	b180      	cbz	r0, 154bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb98>
   1549a:	6861      	ldr	r1, [r4, #4]
   1549c:	f891 00c5 	ldrb.w	r0, [r1, #197]	; 0xc5
   154a0:	2821      	cmp	r0, #33	; 0x21
   154a2:	d00b      	beq.n	154bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb98>
   154a4:	2822      	cmp	r0, #34	; 0x22
   154a6:	bf04      	itt	eq
   154a8:	202f      	moveq	r0, #47	; 0x2f
   154aa:	f881 00c5 	strbeq.w	r0, [r1, #197]	; 0xc5
   154ae:	d005      	beq.n	154bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xb98>
   154b0:	f1bb 0f16 	cmp.w	fp, #22
   154b4:	bf0c      	ite	eq
   154b6:	2720      	moveq	r7, #32
   154b8:	4647      	movne	r7, r8
   154ba:	e04f      	b.n	1555c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc38>
   154bc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   154c0:	d206      	bcs.n	154d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
   154c2:	4863      	ldr	r0, [pc, #396]	; (15650 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd2c>)
   154c4:	f850 102b 	ldr.w	r1, [r0, fp, lsl #2]
   154c8:	b111      	cbz	r1, 154d0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbac>
   154ca:	485f      	ldr	r0, [pc, #380]	; (15648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd24>)
   154cc:	4788      	blx	r1
   154ce:	e005      	b.n	154dc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbb8>
   154d0:	485d      	ldr	r0, [pc, #372]	; (15648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd24>)
   154d2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   154d6:	d004      	beq.n	154e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbbe>
   154d8:	f000 fce4 	bl	15ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   154dc:	4607      	mov	r7, r0
   154de:	b13f      	cbz	r7, 154f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbcc>
   154e0:	e03c      	b.n	1555c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc38>
   154e2:	6931      	ldr	r1, [r6, #16]
   154e4:	2900      	cmp	r1, #0
   154e6:	bf1c      	itt	ne
   154e8:	6840      	ldrne	r0, [r0, #4]
   154ea:	f880 a3ce 	strbne.w	sl, [r0, #974]	; 0x3ce
   154ee:	d018      	beq.n	15522 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbfe>
   154f0:	88b0      	ldrh	r0, [r6, #4]
   154f2:	f010 0f04 	tst.w	r0, #4
   154f6:	d006      	beq.n	15506 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbe2>
   154f8:	6861      	ldr	r1, [r4, #4]
   154fa:	f891 10c7 	ldrb.w	r1, [r1, #199]	; 0xc7
   154fe:	2907      	cmp	r1, #7
   15500:	bf08      	it	eq
   15502:	f886 a000 	strbeq.w	sl, [r6]
   15506:	f010 0f02 	tst.w	r0, #2
   1550a:	d01b      	beq.n	15544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc20>
   1550c:	68b0      	ldr	r0, [r6, #8]
   1550e:	78c0      	ldrb	r0, [r0, #3]
   15510:	282b      	cmp	r0, #43	; 0x2b
   15512:	d20a      	bcs.n	1552a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc06>
   15514:	494f      	ldr	r1, [pc, #316]	; (15654 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd30>)
   15516:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1551a:	b131      	cbz	r1, 1552a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc06>
   1551c:	484a      	ldr	r0, [pc, #296]	; (15648 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd24>)
   1551e:	4788      	blx	r1
   15520:	e010      	b.n	15544 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc20>
   15522:	f000 fcbf 	bl	15ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   15526:	4607      	mov	r7, r0
   15528:	e7d9      	b.n	154de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xbba>
   1552a:	28ff      	cmp	r0, #255	; 0xff
   1552c:	d004      	beq.n	15538 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc14>
   1552e:	f640 1102 	movw	r1, #2306	; 0x902
   15532:	2031      	movs	r0, #49	; 0x31
   15534:	f7f7 fca8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15538:	6860      	ldr	r0, [r4, #4]
   1553a:	2132      	movs	r1, #50	; 0x32
   1553c:	f880 10c5 	strb.w	r1, [r0, #197]	; 0xc5
   15540:	f880 53cc 	strb.w	r5, [r0, #972]	; 0x3cc
   15544:	7930      	ldrb	r0, [r6, #4]
   15546:	f010 0f10 	tst.w	r0, #16
   1554a:	d007      	beq.n	1555c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc38>
   1554c:	6860      	ldr	r0, [r4, #4]
   1554e:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   15552:	290b      	cmp	r1, #11
   15554:	bf04      	itt	eq
   15556:	210c      	moveq	r1, #12
   15558:	f880 10c6 	strbeq.w	r1, [r0, #198]	; 0xc6
   1555c:	78f0      	ldrb	r0, [r6, #3]
   1555e:	f010 0f08 	tst.w	r0, #8
   15562:	d018      	beq.n	15596 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc72>
   15564:	6860      	ldr	r0, [r4, #4]
   15566:	2301      	movs	r3, #1
   15568:	2105      	movs	r1, #5
   1556a:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   1556e:	30a8      	adds	r0, #168	; 0xa8
   15570:	f00a f891 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15574:	2800      	cmp	r0, #0
   15576:	bf18      	it	ne
   15578:	2708      	movne	r7, #8
   1557a:	d10c      	bne.n	15596 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc72>
   1557c:	4669      	mov	r1, sp
   1557e:	2003      	movs	r0, #3
   15580:	9500      	str	r5, [sp, #0]
   15582:	f7f8 fef9 	bl	e378 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
   15586:	9b00      	ldr	r3, [sp, #0]
   15588:	b12b      	cbz	r3, 15596 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xc72>
   1558a:	4618      	mov	r0, r3
   1558c:	7205      	strb	r5, [r0, #8]
   1558e:	222a      	movs	r2, #42	; 0x2a
   15590:	6861      	ldr	r1, [r4, #4]
   15592:	f7fa fc17 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   15596:	6930      	ldr	r0, [r6, #16]
   15598:	ea47 0909 	orr.w	r9, r7, r9
   1559c:	b3f0      	cbz	r0, 1561c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcf8>
   1559e:	9500      	str	r5, [sp, #0]
   155a0:	9501      	str	r5, [sp, #4]
   155a2:	9502      	str	r5, [sp, #8]
   155a4:	9503      	str	r5, [sp, #12]
   155a6:	9504      	str	r5, [sp, #16]
   155a8:	6860      	ldr	r0, [r4, #4]
   155aa:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   155ae:	f003 f893 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   155b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   155b6:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   155ba:	fbb0 f7f1 	udiv	r7, r0, r1
   155be:	6860      	ldr	r0, [r4, #4]
   155c0:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
   155c4:	f003 f83a 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   155c8:	4438      	add	r0, r7
   155ca:	f8ad 0006 	strh.w	r0, [sp, #6]
   155ce:	6860      	ldr	r0, [r4, #4]
   155d0:	8801      	ldrh	r1, [r0, #0]
   155d2:	f8ad 1000 	strh.w	r1, [sp]
   155d6:	f8b0 10bc 	ldrh.w	r1, [r0, #188]	; 0xbc
   155da:	f8ad 1004 	strh.w	r1, [sp, #4]
   155de:	6940      	ldr	r0, [r0, #20]
   155e0:	f00a f832 	bl	1f648 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   155e4:	f8ad 0002 	strh.w	r0, [sp, #2]
   155e8:	6860      	ldr	r0, [r4, #4]
   155ea:	f890 03ce 	ldrb.w	r0, [r0, #974]	; 0x3ce
   155ee:	b130      	cbz	r0, 155fe <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcda>
   155f0:	68f0      	ldr	r0, [r6, #12]
   155f2:	1cc1      	adds	r1, r0, #3
   155f4:	9103      	str	r1, [sp, #12]
   155f6:	f00a fc0a 	bl	1fe0e <sym_SNSRF2OD5RKCBMNHGEBC4PQLTEZDLFXABEHWJNQ>
   155fa:	f88d 0010 	strb.w	r0, [sp, #16]
   155fe:	6860      	ldr	r0, [r4, #4]
   15600:	f890 03cd 	ldrb.w	r0, [r0, #973]	; 0x3cd
   15604:	f88d 0008 	strb.w	r0, [sp, #8]
   15608:	6931      	ldr	r1, [r6, #16]
   1560a:	4668      	mov	r0, sp
   1560c:	4788      	blx	r1
   1560e:	6860      	ldr	r0, [r4, #4]
   15610:	f880 53ce 	strb.w	r5, [r0, #974]	; 0x3ce
   15614:	f880 53cd 	strb.w	r5, [r0, #973]	; 0x3cd
   15618:	9903      	ldr	r1, [sp, #12]
   1561a:	e000      	b.n	1561e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xcfa>
   1561c:	e029      	b.n	15672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4e>
   1561e:	b341      	cbz	r1, 15672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4e>
   15620:	f890 13cc 	ldrb.w	r1, [r0, #972]	; 0x3cc
   15624:	bb29      	cbnz	r1, 15672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4e>
   15626:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
   1562a:	2932      	cmp	r1, #50	; 0x32
   1562c:	d021      	beq.n	15672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4e>
   1562e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   15632:	9a03      	ldr	r2, [sp, #12]
   15634:	b1e9      	cbz	r1, 15672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4e>
   15636:	7813      	ldrb	r3, [r2, #0]
   15638:	2bff      	cmp	r3, #255	; 0xff
   1563a:	d00f      	beq.n	1565c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd38>
   1563c:	2b07      	cmp	r3, #7
   1563e:	bf02      	ittt	eq
   15640:	2902      	cmpeq	r1, #2
   15642:	7851      	ldrbeq	r1, [r2, #1]
   15644:	29ff      	cmpeq	r1, #255	; 0xff
   15646:	e007      	b.n	15658 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd34>
   15648:	20000154 	.word	0x20000154
   1564c:	000203e7 	.word	0x000203e7
   15650:	2000015c 	.word	0x2000015c
   15654:	20000208 	.word	0x20000208
   15658:	d002      	beq.n	15660 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd3c>
   1565a:	e00a      	b.n	15672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4e>
   1565c:	291b      	cmp	r1, #27
   1565e:	d808      	bhi.n	15672 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd4e>
   15660:	f880 a3cc 	strb.w	sl, [r0, #972]	; 0x3cc
   15664:	9903      	ldr	r1, [sp, #12]
   15666:	f8c0 13d0 	str.w	r1, [r0, #976]	; 0x3d0
   1566a:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1566e:	f880 13cf 	strb.w	r1, [r0, #975]	; 0x3cf
   15672:	4648      	mov	r0, r9
   15674:	f7ff f986 	bl	14984 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x60>
   15678:	6867      	ldr	r7, [r4, #4]
   1567a:	f8b7 0308 	ldrh.w	r0, [r7, #776]	; 0x308
   1567e:	1c40      	adds	r0, r0, #1
   15680:	f8a7 0308 	strh.w	r0, [r7, #776]	; 0x308
   15684:	f897 030c 	ldrb.w	r0, [r7, #780]	; 0x30c
   15688:	b130      	cbz	r0, 15698 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd74>
   1568a:	f7f8 febb 	bl	e404 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
   1568e:	2800      	cmp	r0, #0
   15690:	bf18      	it	ne
   15692:	f8a7 5308 	strhne.w	r5, [r7, #776]	; 0x308
   15696:	e018      	b.n	156ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda6>
   15698:	f7f8 fc38 	bl	df0c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
   1569c:	b130      	cbz	r0, 156ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xd88>
   1569e:	6860      	ldr	r0, [r4, #4]
   156a0:	f890 030e 	ldrb.w	r0, [r0, #782]	; 0x30e
   156a4:	2800      	cmp	r0, #0
   156a6:	bf08      	it	eq
   156a8:	f8a7 5308 	strheq.w	r5, [r7, #776]	; 0x308
   156ac:	f7f8 fc28 	bl	df00 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
   156b0:	b158      	cbz	r0, 156ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xda6>
   156b2:	f897 0314 	ldrb.w	r0, [r7, #788]	; 0x314
   156b6:	1c40      	adds	r0, r0, #1
   156b8:	b2c0      	uxtb	r0, r0
   156ba:	f887 0314 	strb.w	r0, [r7, #788]	; 0x314
   156be:	2802      	cmp	r0, #2
   156c0:	bf84      	itt	hi
   156c2:	f8a7 5308 	strhhi.w	r5, [r7, #776]	; 0x308
   156c6:	f887 5314 	strbhi.w	r5, [r7, #788]	; 0x314
   156ca:	6860      	ldr	r0, [r4, #4]
   156cc:	2301      	movs	r3, #1
   156ce:	2100      	movs	r1, #0
   156d0:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   156d4:	30a8      	adds	r0, #168	; 0xa8
   156d6:	f009 ffde 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   156da:	b920      	cbnz	r0, 156e6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xdc2>
   156dc:	6860      	ldr	r0, [r4, #4]
   156de:	f890 00c6 	ldrb.w	r0, [r0, #198]	; 0xc6
   156e2:	280c      	cmp	r0, #12
   156e4:	d15c      	bne.n	157a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe7c>
   156e6:	6860      	ldr	r0, [r4, #4]
   156e8:	2301      	movs	r3, #1
   156ea:	2100      	movs	r1, #0
   156ec:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   156f0:	30a8      	adds	r0, #168	; 0xa8
   156f2:	f009 ffd0 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   156f6:	b3e0      	cbz	r0, 15772 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4e>
   156f8:	6860      	ldr	r0, [r4, #4]
   156fa:	2301      	movs	r3, #1
   156fc:	2100      	movs	r1, #0
   156fe:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
   15702:	30a8      	adds	r0, #168	; 0xa8
   15704:	f009 ffc7 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15708:	b398      	cbz	r0, 15772 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4e>
   1570a:	6860      	ldr	r0, [r4, #4]
   1570c:	f890 10c9 	ldrb.w	r1, [r0, #201]	; 0xc9
   15710:	2902      	cmp	r1, #2
   15712:	bf04      	itt	eq
   15714:	f890 0314 	ldrbeq.w	r0, [r0, #788]	; 0x314
   15718:	2800      	cmpeq	r0, #0
   1571a:	d141      	bne.n	157a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe7c>
   1571c:	9805      	ldr	r0, [sp, #20]
   1571e:	f009 fa82 	bl	1ec26 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   15722:	b330      	cbz	r0, 15772 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe4e>
   15724:	6861      	ldr	r1, [r4, #4]
   15726:	f891 014e 	ldrb.w	r0, [r1, #334]	; 0x14e
   1572a:	28fe      	cmp	r0, #254	; 0xfe
   1572c:	d138      	bne.n	157a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe7c>
   1572e:	f8b1 0302 	ldrh.w	r0, [r1, #770]	; 0x302
   15732:	2801      	cmp	r0, #1
   15734:	d934      	bls.n	157a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe7c>
   15736:	f881 a30a 	strb.w	sl, [r1, #778]	; 0x30a
   1573a:	f8b1 00f8 	ldrh.w	r0, [r1, #248]	; 0xf8
   1573e:	f8b1 20f6 	ldrh.w	r2, [r1, #246]	; 0xf6
   15742:	1e83      	subs	r3, r0, #2
   15744:	429a      	cmp	r2, r3
   15746:	bfaf      	iteee	ge
   15748:	2001      	movge	r0, #1
   1574a:	1a80      	sublt	r0, r0, r2
   1574c:	1e40      	sublt	r0, r0, #1
   1574e:	b280      	uxthlt	r0, r0
   15750:	f8b1 3308 	ldrh.w	r3, [r1, #776]	; 0x308
   15754:	88f2      	ldrh	r2, [r6, #6]
   15756:	4293      	cmp	r3, r2
   15758:	bf2f      	iteee	cs
   1575a:	2201      	movcs	r2, #1
   1575c:	1ad2      	subcc	r2, r2, r3
   1575e:	1c52      	addcc	r2, r2, #1
   15760:	b292      	uxthcc	r2, r2
   15762:	4290      	cmp	r0, r2
   15764:	bf88      	it	hi
   15766:	4610      	movhi	r0, r2
   15768:	2801      	cmp	r0, #1
   1576a:	bf08      	it	eq
   1576c:	f881 530a 	strbeq.w	r5, [r1, #778]	; 0x30a
   15770:	e000      	b.n	15774 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe50>
   15772:	e015      	b.n	157a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe7c>
   15774:	f891 207b 	ldrb.w	r2, [r1, #123]	; 0x7b
   15778:	f88d 2000 	strb.w	r2, [sp]
   1577c:	f89d 2000 	ldrb.w	r2, [sp]
   15780:	b992      	cbnz	r2, 157a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe84>
   15782:	6f4a      	ldr	r2, [r1, #116]	; 0x74
   15784:	b182      	cbz	r2, 157a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe84>
   15786:	f8b1 20f2 	ldrh.w	r2, [r1, #242]	; 0xf2
   1578a:	f8b1 10bc 	ldrh.w	r1, [r1, #188]	; 0xbc
   1578e:	1a51      	subs	r1, r2, r1
   15790:	b209      	sxth	r1, r1
   15792:	2900      	cmp	r1, #0
   15794:	dd08      	ble.n	157a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe84>
   15796:	4281      	cmp	r1, r0
   15798:	bfd8      	it	le
   1579a:	4608      	movle	r0, r1
   1579c:	b280      	uxth	r0, r0
   1579e:	e003      	b.n	157a8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe84>
   157a0:	6861      	ldr	r1, [r4, #4]
   157a2:	2001      	movs	r0, #1
   157a4:	f881 530a 	strb.w	r5, [r1, #778]	; 0x30a
   157a8:	78b1      	ldrb	r1, [r6, #2]
   157aa:	2900      	cmp	r1, #0
   157ac:	bf18      	it	ne
   157ae:	2801      	cmpne	r0, #1
   157b0:	bf9c      	itt	ls
   157b2:	6861      	ldrls	r1, [r4, #4]
   157b4:	f881 530e 	strbls.w	r5, [r1, #782]	; 0x30e
   157b8:	d903      	bls.n	157c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xe9e>
   157ba:	6860      	ldr	r0, [r4, #4]
   157bc:	f880 a30e 	strb.w	sl, [r0, #782]	; 0x30e
   157c0:	2001      	movs	r0, #1
   157c2:	6861      	ldr	r1, [r4, #4]
   157c4:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
   157c8:	4410      	add	r0, r2
   157ca:	b280      	uxth	r0, r0
   157cc:	f8a1 0304 	strh.w	r0, [r1, #772]	; 0x304
   157d0:	f891 30c9 	ldrb.w	r3, [r1, #201]	; 0xc9
   157d4:	2b00      	cmp	r3, #0
   157d6:	bf18      	it	ne
   157d8:	2b01      	cmpne	r3, #1
   157da:	d009      	beq.n	157f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xecc>
   157dc:	2b02      	cmp	r3, #2
   157de:	bf18      	it	ne
   157e0:	2b03      	cmpne	r3, #3
   157e2:	d008      	beq.n	157f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xed2>
   157e4:	f640 41d7 	movw	r1, #3287	; 0xcd7
   157e8:	f04f 0031 	mov.w	r0, #49	; 0x31
   157ec:	f7f7 fb4c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   157f0:	f8a1 0300 	strh.w	r0, [r1, #768]	; 0x300
   157f4:	e053      	b.n	1589e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf7a>
   157f6:	f891 30c7 	ldrb.w	r3, [r1, #199]	; 0xc7
   157fa:	2b08      	cmp	r3, #8
   157fc:	d022      	beq.n	15844 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf20>
   157fe:	f8b1 00f6 	ldrh.w	r0, [r1, #246]	; 0xf6
   15802:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
   15806:	2700      	movs	r7, #0
   15808:	1c83      	adds	r3, r0, #2
   1580a:	429a      	cmp	r2, r3
   1580c:	d306      	bcc.n	1581c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xef8>
   1580e:	1a10      	subs	r0, r2, r0
   15810:	1e80      	subs	r0, r0, #2
   15812:	0407      	lsls	r7, r0, #16
   15814:	0c3f      	lsrs	r7, r7, #16
   15816:	bf1c      	itt	ne
   15818:	1e78      	subne	r0, r7, #1
   1581a:	b287      	uxthne	r7, r0
   1581c:	f891 00f4 	ldrb.w	r0, [r1, #244]	; 0xf4
   15820:	b158      	cbz	r0, 1583a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf16>
   15822:	f891 20c5 	ldrb.w	r2, [r1, #197]	; 0xc5
   15826:	f101 00a8 	add.w	r0, r1, #168	; 0xa8
   1582a:	2301      	movs	r3, #1
   1582c:	2109      	movs	r1, #9
   1582e:	f009 ff32 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15832:	2800      	cmp	r0, #0
   15834:	bf08      	it	eq
   15836:	2700      	moveq	r7, #0
   15838:	d02b      	beq.n	15892 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf6e>
   1583a:	6860      	ldr	r0, [r4, #4]
   1583c:	f890 10cb 	ldrb.w	r1, [r0, #203]	; 0xcb
   15840:	b999      	cbnz	r1, 1586a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf46>
   15842:	e00a      	b.n	1585a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf36>
   15844:	f8b1 30f6 	ldrh.w	r3, [r1, #246]	; 0xf6
   15848:	2b03      	cmp	r3, #3
   1584a:	d3d1      	bcc.n	157f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xecc>
   1584c:	f8b1 00f8 	ldrh.w	r0, [r1, #248]	; 0xf8
   15850:	4410      	add	r0, r2
   15852:	1c40      	adds	r0, r0, #1
   15854:	f8a1 0300 	strh.w	r0, [r1, #768]	; 0x300
   15858:	e021      	b.n	1589e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf7a>
   1585a:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   1585e:	2301      	movs	r3, #1
   15860:	2106      	movs	r1, #6
   15862:	30a8      	adds	r0, #168	; 0xa8
   15864:	f009 ff17 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15868:	b178      	cbz	r0, 1588a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf66>
   1586a:	6862      	ldr	r2, [r4, #4]
   1586c:	2000      	movs	r0, #0
   1586e:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
   15872:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
   15876:	1c93      	adds	r3, r2, #2
   15878:	4299      	cmp	r1, r3
   1587a:	d303      	bcc.n	15884 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf60>
   1587c:	1a88      	subs	r0, r1, r2
   1587e:	1e80      	subs	r0, r0, #2
   15880:	bf18      	it	ne
   15882:	1e40      	subne	r0, r0, #1
   15884:	42b8      	cmp	r0, r7
   15886:	bf38      	it	cc
   15888:	b287      	uxthcc	r7, r0
   1588a:	2f00      	cmp	r7, #0
   1588c:	bf1c      	itt	ne
   1588e:	1e78      	subne	r0, r7, #1
   15890:	b287      	uxthne	r7, r0
   15892:	6860      	ldr	r0, [r4, #4]
   15894:	f8b0 1304 	ldrh.w	r1, [r0, #772]	; 0x304
   15898:	4439      	add	r1, r7
   1589a:	f8a0 1300 	strh.w	r1, [r0, #768]	; 0x300
   1589e:	7930      	ldrb	r0, [r6, #4]
   158a0:	9f07      	ldr	r7, [sp, #28]
   158a2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   158a6:	2800      	cmp	r0, #0
   158a8:	6860      	ldr	r0, [r4, #4]
   158aa:	bf18      	it	ne
   158ac:	f8a0 5316 	strhne.w	r5, [r0, #790]	; 0x316
   158b0:	d106      	bne.n	158c0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xf9c>
   158b2:	f8b0 1316 	ldrh.w	r1, [r0, #790]	; 0x316
   158b6:	f8b0 2306 	ldrh.w	r2, [r0, #774]	; 0x306
   158ba:	4411      	add	r1, r2
   158bc:	f8a0 1316 	strh.w	r1, [r0, #790]	; 0x316
   158c0:	6860      	ldr	r0, [r4, #4]
   158c2:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   158c6:	f88d 1000 	strb.w	r1, [sp]
   158ca:	f89d 1000 	ldrb.w	r1, [sp]
   158ce:	b939      	cbnz	r1, 158e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfbc>
   158d0:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
   158d4:	2301      	movs	r3, #1
   158d6:	4619      	mov	r1, r3
   158d8:	30a8      	adds	r0, #168	; 0xa8
   158da:	f009 fedc 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   158de:	b138      	cbz	r0, 158f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfcc>
   158e0:	6860      	ldr	r0, [r4, #4]
   158e2:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
   158e6:	f8b0 2306 	ldrh.w	r2, [r0, #774]	; 0x306
   158ea:	4411      	add	r1, r2
   158ec:	f8a0 10fa 	strh.w	r1, [r0, #250]	; 0xfa
   158f0:	6860      	ldr	r0, [r4, #4]
   158f2:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
   158f6:	b133      	cbz	r3, 15906 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xfe2>
   158f8:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
   158fc:	f8b0 2306 	ldrh.w	r2, [r0, #774]	; 0x306
   15900:	4411      	add	r1, r2
   15902:	f8a0 10fc 	strh.w	r1, [r0, #252]	; 0xfc
   15906:	f990 2104 	ldrsb.w	r2, [r0, #260]	; 0x104
   1590a:	2a00      	cmp	r2, #0
   1590c:	dd06      	ble.n	1591c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0xff8>
   1590e:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
   15912:	f8b0 c306 	ldrh.w	ip, [r0, #774]	; 0x306
   15916:	4461      	add	r1, ip
   15918:	f8a0 1102 	strh.w	r1, [r0, #258]	; 0x102
   1591c:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
   15920:	bbf1      	cbnz	r1, 159a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x107c>
   15922:	b9d7      	cbnz	r7, 1595a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1036>
   15924:	7831      	ldrb	r1, [r6, #0]
   15926:	2902      	cmp	r1, #2
   15928:	d00a      	beq.n	15940 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x101c>
   1592a:	2901      	cmp	r1, #1
   1592c:	d00e      	beq.n	1594c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1028>
   1592e:	f1b9 0f00 	cmp.w	r9, #0
   15932:	d023      	beq.n	1597c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1058>
   15934:	f019 0f10 	tst.w	r9, #16
   15938:	bf18      	it	ne
   1593a:	211e      	movne	r1, #30
   1593c:	d00a      	beq.n	15954 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1030>
   1593e:	e03c      	b.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   15940:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   15944:	2906      	cmp	r1, #6
   15946:	bf18      	it	ne
   15948:	2116      	movne	r1, #22
   1594a:	e036      	b.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   1594c:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   15950:	bb31      	cbnz	r1, 159a0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x107c>
   15952:	e04a      	b.n	159ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c6>
   15954:	f019 0f08 	tst.w	r9, #8
   15958:	d001      	beq.n	1595e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x103a>
   1595a:	213d      	movs	r1, #61	; 0x3d
   1595c:	e02d      	b.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   1595e:	f019 0f20 	tst.w	r9, #32
   15962:	bf18      	it	ne
   15964:	2123      	movne	r1, #35	; 0x23
   15966:	d128      	bne.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   15968:	f019 0f03 	tst.w	r9, #3
   1596c:	bf18      	it	ne
   1596e:	212a      	movne	r1, #42	; 0x2a
   15970:	d123      	bne.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   15972:	f640 615e 	movw	r1, #3678	; 0xe5e
   15976:	2031      	movs	r0, #49	; 0x31
   15978:	f7f7 fa86 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1597c:	b12b      	cbz	r3, 1598a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1066>
   1597e:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
   15982:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
   15986:	4299      	cmp	r1, r3
   15988:	d216      	bcs.n	159b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1094>
   1598a:	2a00      	cmp	r2, #0
   1598c:	dd05      	ble.n	1599a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1076>
   1598e:	f8b0 1102 	ldrh.w	r1, [r0, #258]	; 0x102
   15992:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
   15996:	4291      	cmp	r1, r2
   15998:	d20e      	bcs.n	159b8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1094>
   1599a:	f8b0 20fa 	ldrh.w	r2, [r0, #250]	; 0xfa
   1599e:	e000      	b.n	159a2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x107e>
   159a0:	e00b      	b.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   159a2:	f8b0 10f8 	ldrh.w	r1, [r0, #248]	; 0xf8
   159a6:	428a      	cmp	r2, r1
   159a8:	d30f      	bcc.n	159ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10a6>
   159aa:	f890 2158 	ldrb.w	r2, [r0, #344]	; 0x158
   159ae:	f88d 2000 	strb.w	r2, [sp]
   159b2:	f89d 2000 	ldrb.w	r2, [sp]
   159b6:	b142      	cbz	r2, 159ca <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10a6>
   159b8:	2122      	movs	r1, #34	; 0x22
   159ba:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   159be:	f88d 2000 	strb.w	r2, [sp]
   159c2:	f89d 2000 	ldrb.w	r2, [sp]
   159c6:	bb12      	cbnz	r2, 15a0e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10ea>
   159c8:	e01a      	b.n	15a00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10dc>
   159ca:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
   159ce:	b132      	cbz	r2, 159de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10ba>
   159d0:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
   159d4:	428a      	cmp	r2, r1
   159d6:	bf28      	it	cs
   159d8:	2108      	movcs	r1, #8
   159da:	d2ee      	bcs.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   159dc:	e005      	b.n	159ea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10c6>
   159de:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
   159e2:	2906      	cmp	r1, #6
   159e4:	bf28      	it	cs
   159e6:	213e      	movcs	r1, #62	; 0x3e
   159e8:	d2e7      	bcs.n	159ba <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1096>
   159ea:	2100      	movs	r1, #0
   159ec:	f7fd fee2 	bl	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   159f0:	6860      	ldr	r0, [r4, #4]
   159f2:	f880 530b 	strb.w	r5, [r0, #779]	; 0x30b
   159f6:	b009      	add	sp, #36	; 0x24
   159f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159fc:	f7f8 b9c2 	b.w	dd84 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   15a00:	f880 10e5 	strb.w	r1, [r0, #229]	; 0xe5
   15a04:	220b      	movs	r2, #11
   15a06:	490a      	ldr	r1, [pc, #40]	; (15a30 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x110c>)
   15a08:	30dc      	adds	r0, #220	; 0xdc
   15a0a:	f7fa f9db 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   15a0e:	6860      	ldr	r0, [r4, #4]
   15a10:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
   15a14:	f880 50c6 	strb.w	r5, [r0, #198]	; 0xc6
   15a18:	f880 50c9 	strb.w	r5, [r0, #201]	; 0xc9
   15a1c:	f890 130b 	ldrb.w	r1, [r0, #779]	; 0x30b
   15a20:	2900      	cmp	r1, #0
   15a22:	bf14      	ite	ne
   15a24:	2102      	movne	r1, #2
   15a26:	2103      	moveq	r1, #3
   15a28:	f7fd fec4 	bl	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   15a2c:	e7e0      	b.n	159f0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x10cc>
   15a2e:	0000      	.short	0x0000
   15a30:	000102d5 	.word	0x000102d5
   15a34:	4a0c      	ldr	r2, [pc, #48]	; (15a68 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1144>)
   15a36:	b510      	push	{r4, lr}
   15a38:	6852      	ldr	r2, [r2, #4]
   15a3a:	f892 314e 	ldrb.w	r3, [r2, #334]	; 0x14e
   15a3e:	2bfe      	cmp	r3, #254	; 0xfe
   15a40:	d004      	beq.n	15a4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1128>
   15a42:	f640 416a 	movw	r1, #3178	; 0xc6a
   15a46:	2031      	movs	r0, #49	; 0x31
   15a48:	f7f7 fa1e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15a4c:	f882 014e 	strb.w	r0, [r2, #334]	; 0x14e
   15a50:	2000      	movs	r0, #0
   15a52:	2901      	cmp	r1, #1
   15a54:	bf04      	itt	eq
   15a56:	f8a2 0102 	strheq.w	r0, [r2, #258]	; 0x102
   15a5a:	bd10      	popeq	{r4, pc}
   15a5c:	f8a2 00fc 	strh.w	r0, [r2, #252]	; 0xfc
   15a60:	2001      	movs	r0, #1
   15a62:	f882 0100 	strb.w	r0, [r2, #256]	; 0x100
   15a66:	bd10      	pop	{r4, pc}
   15a68:	20000154 	.word	0x20000154
   15a6c:	b570      	push	{r4, r5, r6, lr}
   15a6e:	4b2c      	ldr	r3, [pc, #176]	; (15b20 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11fc>)
   15a70:	4602      	mov	r2, r0
   15a72:	8898      	ldrh	r0, [r3, #4]
   15a74:	4310      	orrs	r0, r2
   15a76:	8098      	strh	r0, [r3, #4]
   15a78:	f103 0018 	add.w	r0, r3, #24
   15a7c:	2a40      	cmp	r2, #64	; 0x40
   15a7e:	6840      	ldr	r0, [r0, #4]
   15a80:	d011      	beq.n	15aa6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1182>
   15a82:	f012 0f02 	tst.w	r2, #2
   15a86:	f04f 0400 	mov.w	r4, #0
   15a8a:	f04f 0c01 	mov.w	ip, #1
   15a8e:	f002 0501 	and.w	r5, r2, #1
   15a92:	d00d      	beq.n	15ab0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x118c>
   15a94:	2d00      	cmp	r5, #0
   15a96:	bf08      	it	eq
   15a98:	6099      	streq	r1, [r3, #8]
   15a9a:	d026      	beq.n	15aea <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11c6>
   15a9c:	f640 61b2 	movw	r1, #3762	; 0xeb2
   15aa0:	2031      	movs	r0, #49	; 0x31
   15aa2:	f7f7 f9f1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15aaa:	2104      	movs	r1, #4
   15aac:	f7fd be82 	b.w	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   15ab0:	b1b5      	cbz	r5, 15ae0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11bc>
   15ab2:	60d9      	str	r1, [r3, #12]
   15ab4:	78c9      	ldrb	r1, [r1, #3]
   15ab6:	2906      	cmp	r1, #6
   15ab8:	d009      	beq.n	15ace <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11aa>
   15aba:	290b      	cmp	r1, #11
   15abc:	bf01      	itttt	eq
   15abe:	f890 10c6 	ldrbeq.w	r1, [r0, #198]	; 0xc6
   15ac2:	2913      	cmpeq	r1, #19
   15ac4:	f880 40ca 	strbeq.w	r4, [r0, #202]	; 0xca
   15ac8:	f880 c106 	strbeq.w	ip, [r0, #262]	; 0x106
   15acc:	e008      	b.n	15ae0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11bc>
   15ace:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   15ad2:	2919      	cmp	r1, #25
   15ad4:	d104      	bne.n	15ae0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11bc>
   15ad6:	2100      	movs	r1, #0
   15ad8:	e9c0 1148 	strd	r1, r1, [r0, #288]	; 0x120
   15adc:	f880 c0ca 	strb.w	ip, [r0, #202]	; 0xca
   15ae0:	f012 0f02 	tst.w	r2, #2
   15ae4:	bf18      	it	ne
   15ae6:	6899      	ldrne	r1, [r3, #8]
   15ae8:	d013      	beq.n	15b12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ee>
   15aea:	78c9      	ldrb	r1, [r1, #3]
   15aec:	2905      	cmp	r1, #5
   15aee:	d007      	beq.n	15b00 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11dc>
   15af0:	290b      	cmp	r1, #11
   15af2:	bf02      	ittt	eq
   15af4:	f890 10c6 	ldrbeq.w	r1, [r0, #198]	; 0xc6
   15af8:	2912      	cmpeq	r1, #18
   15afa:	f880 40cb 	strbeq.w	r4, [r0, #203]	; 0xcb
   15afe:	e008      	b.n	15b12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ee>
   15b00:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   15b04:	2917      	cmp	r1, #23
   15b06:	d104      	bne.n	15b12 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x11ee>
   15b08:	2100      	movs	r1, #0
   15b0a:	e9c0 114a 	strd	r1, r1, [r0, #296]	; 0x128
   15b0e:	f880 c0cb 	strb.w	ip, [r0, #203]	; 0xcb
   15b12:	f012 0f20 	tst.w	r2, #32
   15b16:	bf1c      	itt	ne
   15b18:	2008      	movne	r0, #8
   15b1a:	70d8      	strbne	r0, [r3, #3]
   15b1c:	bd70      	pop	{r4, r5, r6, pc}
   15b1e:	0000      	.short	0x0000
   15b20:	2000013c 	.word	0x2000013c
   15b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b28:	4c2c      	ldr	r4, [pc, #176]	; (15bdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12b8>)
   15b2a:	2501      	movs	r5, #1
   15b2c:	6862      	ldr	r2, [r4, #4]
   15b2e:	f892 13d6 	ldrb.w	r1, [r2, #982]	; 0x3d6
   15b32:	2900      	cmp	r1, #0
   15b34:	bf14      	ite	ne
   15b36:	2701      	movne	r7, #1
   15b38:	2700      	moveq	r7, #0
   15b3a:	f892 03d7 	ldrb.w	r0, [r2, #983]	; 0x3d7
   15b3e:	2800      	cmp	r0, #0
   15b40:	bf14      	ite	ne
   15b42:	2601      	movne	r6, #1
   15b44:	2600      	moveq	r6, #0
   15b46:	2f00      	cmp	r7, #0
   15b48:	bf08      	it	eq
   15b4a:	f892 106e 	ldrbeq.w	r1, [r2, #110]	; 0x6e
   15b4e:	2e00      	cmp	r6, #0
   15b50:	bf08      	it	eq
   15b52:	f892 006f 	ldrbeq.w	r0, [r2, #111]	; 0x6f
   15b56:	f102 0366 	add.w	r3, r2, #102	; 0x66
   15b5a:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
   15b5e:	f882 006f 	strb.w	r0, [r2, #111]	; 0x6f
   15b62:	20ff      	movs	r0, #255	; 0xff
   15b64:	7298      	strb	r0, [r3, #10]
   15b66:	4610      	mov	r0, r2
   15b68:	f00b fcca 	bl	21500 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
   15b6c:	6860      	ldr	r0, [r4, #4]
   15b6e:	f890 0164 	ldrb.w	r0, [r0, #356]	; 0x164
   15b72:	2801      	cmp	r0, #1
   15b74:	d003      	beq.n	15b7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x125a>
   15b76:	2f00      	cmp	r7, #0
   15b78:	bf08      	it	eq
   15b7a:	2e00      	cmpeq	r6, #0
   15b7c:	d003      	beq.n	15b86 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1262>
   15b7e:	f04f 0000 	mov.w	r0, #0
   15b82:	f000 f82d 	bl	15be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>
   15b86:	6860      	ldr	r0, [r4, #4]
   15b88:	3030      	adds	r0, #48	; 0x30
   15b8a:	f00a fac7 	bl	2011c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   15b8e:	4606      	mov	r6, r0
   15b90:	6860      	ldr	r0, [r4, #4]
   15b92:	f00a fa62 	bl	2005a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   15b96:	b138      	cbz	r0, 15ba8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1284>
   15b98:	6860      	ldr	r0, [r4, #4]
   15b9a:	f500 72e0 	add.w	r2, r0, #448	; 0x1c0
   15b9e:	f100 0130 	add.w	r1, r0, #48	; 0x30
   15ba2:	8800      	ldrh	r0, [r0, #0]
   15ba4:	f7fa fa04 	bl	ffb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   15ba8:	2105      	movs	r1, #5
   15baa:	6860      	ldr	r0, [r4, #4]
   15bac:	f7fd fe02 	bl	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   15bb0:	6860      	ldr	r0, [r4, #4]
   15bb2:	3030      	adds	r0, #48	; 0x30
   15bb4:	f00a fab2 	bl	2011c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
   15bb8:	4604      	mov	r4, r0
   15bba:	42a6      	cmp	r6, r4
   15bbc:	d20b      	bcs.n	15bd6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12b2>
   15bbe:	f005 f991 	bl	1aee4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
   15bc2:	4601      	mov	r1, r0
   15bc4:	1ba0      	subs	r0, r4, r6
   15bc6:	2865      	cmp	r0, #101	; 0x65
   15bc8:	bf38      	it	cc
   15bca:	2065      	movcc	r0, #101	; 0x65
   15bcc:	f005 f8ac 	bl	1ad28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   15bd0:	2800      	cmp	r0, #0
   15bd2:	bf18      	it	ne
   15bd4:	2500      	movne	r5, #0
   15bd6:	4628      	mov	r0, r5
   15bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15bdc:	20000154 	.word	0x20000154
   15be0:	b510      	push	{r4, lr}
   15be2:	4c1a      	ldr	r4, [pc, #104]	; (15c4c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1328>)
   15be4:	6861      	ldr	r1, [r4, #4]
   15be6:	880a      	ldrh	r2, [r1, #0]
   15be8:	f8a1 2204 	strh.w	r2, [r1, #516]	; 0x204
   15bec:	f881 0202 	strb.w	r0, [r1, #514]	; 0x202
   15bf0:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
   15bf4:	2801      	cmp	r0, #1
   15bf6:	bf18      	it	ne
   15bf8:	2802      	cmpne	r0, #2
   15bfa:	d00b      	beq.n	15c14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12f0>
   15bfc:	2804      	cmp	r0, #4
   15bfe:	bf14      	ite	ne
   15c00:	2808      	cmpne	r0, #8
   15c02:	2003      	moveq	r0, #3
   15c04:	d006      	beq.n	15c14 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12f0>
   15c06:	bf00      	nop
   15c08:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   15c0c:	f04f 0006 	mov.w	r0, #6
   15c10:	f7f7 f93a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   15c14:	f881 0206 	strb.w	r0, [r1, #518]	; 0x206
   15c18:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
   15c1c:	2801      	cmp	r0, #1
   15c1e:	bf18      	it	ne
   15c20:	2802      	cmpne	r0, #2
   15c22:	d004      	beq.n	15c2e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x130a>
   15c24:	2804      	cmp	r0, #4
   15c26:	bf14      	ite	ne
   15c28:	2808      	cmpne	r0, #8
   15c2a:	2003      	moveq	r0, #3
   15c2c:	d1ec      	bne.n	15c08 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12e4>
   15c2e:	f881 0207 	strb.w	r0, [r1, #519]	; 0x207
   15c32:	f501 70fc 	add.w	r0, r1, #504	; 0x1f8
   15c36:	f04f 0215 	mov.w	r2, #21
   15c3a:	4905      	ldr	r1, [pc, #20]	; (15c50 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x132c>)
   15c3c:	f7fa f91e 	bl	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   15c40:	6861      	ldr	r1, [r4, #4]
   15c42:	2000      	movs	r0, #0
   15c44:	f881 0164 	strb.w	r0, [r1, #356]	; 0x164
   15c48:	bd10      	pop	{r4, pc}
   15c4a:	0000      	.short	0x0000
   15c4c:	20000154 	.word	0x20000154
   15c50:	0002290f 	.word	0x0002290f
   15c54:	b570      	push	{r4, r5, r6, lr}
   15c56:	4604      	mov	r4, r0
   15c58:	6840      	ldr	r0, [r0, #4]
   15c5a:	2301      	movs	r3, #1
   15c5c:	2100      	movs	r1, #0
   15c5e:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   15c62:	30a8      	adds	r0, #168	; 0xa8
   15c64:	f009 fd17 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15c68:	2800      	cmp	r0, #0
   15c6a:	bf04      	itt	eq
   15c6c:	2001      	moveq	r0, #1
   15c6e:	bd70      	popeq	{r4, r5, r6, pc}
   15c70:	4d13      	ldr	r5, [pc, #76]	; (15cc0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x139c>)
   15c72:	68e8      	ldr	r0, [r5, #12]
   15c74:	f00a f86d 	bl	1fd52 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
   15c78:	4601      	mov	r1, r0
   15c7a:	6860      	ldr	r0, [r4, #4]
   15c7c:	f8a0 13d4 	strh.w	r1, [r0, #980]	; 0x3d4
   15c80:	6860      	ldr	r0, [r4, #4]
   15c82:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
   15c86:	1a89      	subs	r1, r1, r2
   15c88:	b209      	sxth	r1, r1
   15c8a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   15c8e:	428a      	cmp	r2, r1
   15c90:	bfa8      	it	ge
   15c92:	2900      	cmpge	r1, #0
   15c94:	dd09      	ble.n	15caa <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1386>
   15c96:	f200 31d6 	addw	r1, r0, #982	; 0x3d6
   15c9a:	68e8      	ldr	r0, [r5, #12]
   15c9c:	f00a f854 	bl	1fd48 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
   15ca0:	6861      	ldr	r1, [r4, #4]
   15ca2:	200b      	movs	r0, #11
   15ca4:	f881 00c6 	strb.w	r0, [r1, #198]	; 0xc6
   15ca8:	e008      	b.n	15cbc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1398>
   15caa:	2128      	movs	r1, #40	; 0x28
   15cac:	f880 10e5 	strb.w	r1, [r0, #229]	; 0xe5
   15cb0:	6860      	ldr	r0, [r4, #4]
   15cb2:	220b      	movs	r2, #11
   15cb4:	4903      	ldr	r1, [pc, #12]	; (15cc4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x13a0>)
   15cb6:	30dc      	adds	r0, #220	; 0xdc
   15cb8:	f7fa f884 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   15cbc:	2000      	movs	r0, #0
   15cbe:	bd70      	pop	{r4, r5, r6, pc}
   15cc0:	2000013c 	.word	0x2000013c
   15cc4:	000102d5 	.word	0x000102d5
   15cc8:	b570      	push	{r4, r5, r6, lr}
   15cca:	4604      	mov	r4, r0
   15ccc:	6840      	ldr	r0, [r0, #4]
   15cce:	2301      	movs	r3, #1
   15cd0:	2100      	movs	r1, #0
   15cd2:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   15cd6:	30a8      	adds	r0, #168	; 0xa8
   15cd8:	f009 fcdd 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15cdc:	2800      	cmp	r0, #0
   15cde:	bf04      	itt	eq
   15ce0:	2001      	moveq	r0, #1
   15ce2:	bd70      	popeq	{r4, r5, r6, pc}
   15ce4:	6860      	ldr	r0, [r4, #4]
   15ce6:	4d2a      	ldr	r5, [pc, #168]	; (15d90 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x146c>)
   15ce8:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
   15cec:	68e8      	ldr	r0, [r5, #12]
   15cee:	f00a f833 	bl	1fd58 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
   15cf2:	2800      	cmp	r0, #0
   15cf4:	d03b      	beq.n	15d6e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x144a>
   15cf6:	68ea      	ldr	r2, [r5, #12]
   15cf8:	6861      	ldr	r1, [r4, #4]
   15cfa:	f8b2 000d 	ldrh.w	r0, [r2, #13]
   15cfe:	f8a1 03d4 	strh.w	r0, [r1, #980]	; 0x3d4
   15d02:	6861      	ldr	r1, [r4, #4]
   15d04:	f8b1 30bc 	ldrh.w	r3, [r1, #188]	; 0xbc
   15d08:	1ac0      	subs	r0, r0, r3
   15d0a:	b200      	sxth	r0, r0
   15d0c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   15d10:	4283      	cmp	r3, r0
   15d12:	bfa8      	it	ge
   15d14:	2800      	cmpge	r0, #0
   15d16:	dd2f      	ble.n	15d78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1454>
   15d18:	4610      	mov	r0, r2
   15d1a:	f00a f84a 	bl	1fdb2 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
   15d1e:	f009 fc87 	bl	1f630 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   15d22:	4606      	mov	r6, r0
   15d24:	6860      	ldr	r0, [r4, #4]
   15d26:	4631      	mov	r1, r6
   15d28:	f8c0 63dc 	str.w	r6, [r0, #988]	; 0x3dc
   15d2c:	68e8      	ldr	r0, [r5, #12]
   15d2e:	7900      	ldrb	r0, [r0, #4]
   15d30:	f009 fe18 	bl	1f964 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   15d34:	6861      	ldr	r1, [r4, #4]
   15d36:	f8a1 03d6 	strh.w	r0, [r1, #982]	; 0x3d6
   15d3a:	68e8      	ldr	r0, [r5, #12]
   15d3c:	4631      	mov	r1, r6
   15d3e:	f8b0 0005 	ldrh.w	r0, [r0, #5]
   15d42:	f009 fe06 	bl	1f952 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   15d46:	6861      	ldr	r1, [r4, #4]
   15d48:	f8c1 03d8 	str.w	r0, [r1, #984]	; 0x3d8
   15d4c:	68e8      	ldr	r0, [r5, #12]
   15d4e:	f00a f833 	bl	1fdb8 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
   15d52:	6861      	ldr	r1, [r4, #4]
   15d54:	f8a1 03e0 	strh.w	r0, [r1, #992]	; 0x3e0
   15d58:	68e8      	ldr	r0, [r5, #12]
   15d5a:	f00a f830 	bl	1fdbe <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
   15d5e:	6861      	ldr	r1, [r4, #4]
   15d60:	f8a1 03e2 	strh.w	r0, [r1, #994]	; 0x3e2
   15d64:	6861      	ldr	r1, [r4, #4]
   15d66:	200e      	movs	r0, #14
   15d68:	f881 00c6 	strb.w	r0, [r1, #198]	; 0xc6
   15d6c:	e00d      	b.n	15d8a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1466>
   15d6e:	4620      	mov	r0, r4
   15d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15d74:	f000 b896 	b.w	15ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   15d78:	2028      	movs	r0, #40	; 0x28
   15d7a:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
   15d7e:	6860      	ldr	r0, [r4, #4]
   15d80:	220b      	movs	r2, #11
   15d82:	4904      	ldr	r1, [pc, #16]	; (15d94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1470>)
   15d84:	30dc      	adds	r0, #220	; 0xdc
   15d86:	f7fa f81d 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   15d8a:	2000      	movs	r0, #0
   15d8c:	bd70      	pop	{r4, r5, r6, pc}
   15d8e:	0000      	.short	0x0000
   15d90:	2000013c 	.word	0x2000013c
   15d94:	000102d5 	.word	0x000102d5
   15d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d9c:	4604      	mov	r4, r0
   15d9e:	6840      	ldr	r0, [r0, #4]
   15da0:	2301      	movs	r3, #1
   15da2:	2100      	movs	r1, #0
   15da4:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   15da8:	30a8      	adds	r0, #168	; 0xa8
   15daa:	f009 fc74 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15dae:	b978      	cbnz	r0, 15dd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14ac>
   15db0:	6860      	ldr	r0, [r4, #4]
   15db2:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   15db6:	2a14      	cmp	r2, #20
   15db8:	d00a      	beq.n	15dd0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14ac>
   15dba:	2301      	movs	r3, #1
   15dbc:	2105      	movs	r1, #5
   15dbe:	30a8      	adds	r0, #168	; 0xa8
   15dc0:	f009 fc69 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15dc4:	2800      	cmp	r0, #0
   15dc6:	bf0c      	ite	eq
   15dc8:	2001      	moveq	r0, #1
   15dca:	2008      	movne	r0, #8
   15dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15dd0:	2503      	movs	r5, #3
   15dd2:	6860      	ldr	r0, [r4, #4]
   15dd4:	2107      	movs	r1, #7
   15dd6:	f8b0 0156 	ldrh.w	r0, [r0, #342]	; 0x156
   15dda:	f009 f98a 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   15dde:	4e28      	ldr	r6, [pc, #160]	; (15e80 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x155c>)
   15de0:	2700      	movs	r7, #0
   15de2:	b1a8      	cbz	r0, 15e10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14ec>
   15de4:	3018      	adds	r0, #24
   15de6:	f00c fdf8 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   15dea:	b188      	cbz	r0, 15e10 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x14ec>
   15dec:	6870      	ldr	r0, [r6, #4]
   15dee:	210c      	movs	r1, #12
   15df0:	f880 514b 	strb.w	r5, [r0, #331]	; 0x14b
   15df4:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
   15df8:	6862      	ldr	r2, [r4, #4]
   15dfa:	2130      	movs	r1, #48	; 0x30
   15dfc:	f882 10c6 	strb.w	r1, [r2, #198]	; 0xc6
   15e00:	f8a0 7102 	strh.w	r7, [r0, #258]	; 0x102
   15e04:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   15e08:	1c49      	adds	r1, r1, #1
   15e0a:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   15e0e:	e033      	b.n	15e78 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1554>
   15e10:	6860      	ldr	r0, [r4, #4]
   15e12:	f890 0106 	ldrb.w	r0, [r0, #262]	; 0x106
   15e16:	b938      	cbnz	r0, 15e28 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1504>
   15e18:	6870      	ldr	r0, [r6, #4]
   15e1a:	f8a0 7102 	strh.w	r7, [r0, #258]	; 0x102
   15e1e:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   15e22:	1c49      	adds	r1, r1, #1
   15e24:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   15e28:	6860      	ldr	r0, [r4, #4]
   15e2a:	4d16      	ldr	r5, [pc, #88]	; (15e84 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1560>)
   15e2c:	f500 7146 	add.w	r1, r0, #792	; 0x318
   15e30:	68e8      	ldr	r0, [r5, #12]
   15e32:	f009 ffdd 	bl	1fdf0 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
   15e36:	6860      	ldr	r0, [r4, #4]
   15e38:	f500 71a0 	add.w	r1, r0, #320	; 0x140
   15e3c:	68e8      	ldr	r0, [r5, #12]
   15e3e:	f009 ffce 	bl	1fdde <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
   15e42:	6860      	ldr	r0, [r4, #4]
   15e44:	8801      	ldrh	r1, [r0, #0]
   15e46:	f8a0 13ee 	strh.w	r1, [r0, #1006]	; 0x3ee
   15e4a:	6860      	ldr	r0, [r4, #4]
   15e4c:	f500 717c 	add.w	r1, r0, #1008	; 0x3f0
   15e50:	68e8      	ldr	r0, [r5, #12]
   15e52:	f009 ffc8 	bl	1fde6 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
   15e56:	6860      	ldr	r0, [r4, #4]
   15e58:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
   15e5c:	68e8      	ldr	r0, [r5, #12]
   15e5e:	f009 ffbb 	bl	1fdd8 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
   15e62:	6860      	ldr	r0, [r4, #4]
   15e64:	220a      	movs	r2, #10
   15e66:	4908      	ldr	r1, [pc, #32]	; (15e88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1564>)
   15e68:	f500 7079 	add.w	r0, r0, #996	; 0x3e4
   15e6c:	f7f9 ffaa 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   15e70:	6861      	ldr	r1, [r4, #4]
   15e72:	2016      	movs	r0, #22
   15e74:	f881 00c6 	strb.w	r0, [r1, #198]	; 0xc6
   15e78:	2000      	movs	r0, #0
   15e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15e7e:	0000      	.short	0x0000
   15e80:	20000154 	.word	0x20000154
   15e84:	2000013c 	.word	0x2000013c
   15e88:	0002030f 	.word	0x0002030f
   15e8c:	4901      	ldr	r1, [pc, #4]	; (15e94 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1570>)
   15e8e:	68c9      	ldr	r1, [r1, #12]
   15e90:	f7fa ba58 	b.w	10344 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
   15e94:	2000013c 	.word	0x2000013c
   15e98:	4901      	ldr	r1, [pc, #4]	; (15ea0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x157c>)
   15e9a:	68c9      	ldr	r1, [r1, #12]
   15e9c:	f7fa ba9a 	b.w	103d4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
   15ea0:	2000013c 	.word	0x2000013c
   15ea4:	6842      	ldr	r2, [r0, #4]
   15ea6:	f8d2 10b4 	ldr.w	r1, [r2, #180]	; 0xb4
   15eaa:	f011 0f08 	tst.w	r1, #8
   15eae:	bf1c      	itt	ne
   15eb0:	2001      	movne	r0, #1
   15eb2:	4770      	bxne	lr
   15eb4:	f041 0108 	orr.w	r1, r1, #8
   15eb8:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
   15ebc:	6840      	ldr	r0, [r0, #4]
   15ebe:	4908      	ldr	r1, [pc, #32]	; (15ee0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15bc>)
   15ec0:	68c9      	ldr	r1, [r1, #12]
   15ec2:	78c9      	ldrb	r1, [r1, #3]
   15ec4:	f880 1148 	strb.w	r1, [r0, #328]	; 0x148
   15ec8:	4806      	ldr	r0, [pc, #24]	; (15ee4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x15c0>)
   15eca:	2100      	movs	r1, #0
   15ecc:	6840      	ldr	r0, [r0, #4]
   15ece:	f8a0 1102 	strh.w	r1, [r0, #258]	; 0x102
   15ed2:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   15ed6:	1c49      	adds	r1, r1, #1
   15ed8:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   15edc:	2000      	movs	r0, #0
   15ede:	4770      	bx	lr
   15ee0:	2000013c 	.word	0x2000013c
   15ee4:	20000154 	.word	0x20000154
   15ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15eec:	4605      	mov	r5, r0
   15eee:	6840      	ldr	r0, [r0, #4]
   15ef0:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   15ef4:	f010 0f30 	tst.w	r0, #48	; 0x30
   15ef8:	bf1c      	itt	ne
   15efa:	2001      	movne	r0, #1
   15efc:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15f00:	4c36      	ldr	r4, [pc, #216]	; (15fdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x16b8>)
   15f02:	68e0      	ldr	r0, [r4, #12]
   15f04:	f009 ff91 	bl	1fe2a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
   15f08:	2800      	cmp	r0, #0
   15f0a:	d033      	beq.n	15f74 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1650>
   15f0c:	68e0      	ldr	r0, [r4, #12]
   15f0e:	f009 ff86 	bl	1fe1e <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
   15f12:	4606      	mov	r6, r0
   15f14:	68e0      	ldr	r0, [r4, #12]
   15f16:	f009 ff86 	bl	1fe26 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
   15f1a:	4680      	mov	r8, r0
   15f1c:	68e0      	ldr	r0, [r4, #12]
   15f1e:	f009 ff7c 	bl	1fe1a <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
   15f22:	4607      	mov	r7, r0
   15f24:	68e0      	ldr	r0, [r4, #12]
   15f26:	f009 ff7c 	bl	1fe22 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
   15f2a:	9600      	str	r6, [sp, #0]
   15f2c:	686a      	ldr	r2, [r5, #4]
   15f2e:	4601      	mov	r1, r0
   15f30:	f102 0c30 	add.w	ip, r2, #48	; 0x30
   15f34:	4643      	mov	r3, r8
   15f36:	463a      	mov	r2, r7
   15f38:	4660      	mov	r0, ip
   15f3a:	f00a f93d 	bl	201b8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   15f3e:	7920      	ldrb	r0, [r4, #4]
   15f40:	f104 0618 	add.w	r6, r4, #24
   15f44:	f010 0f02 	tst.w	r0, #2
   15f48:	d003      	beq.n	15f52 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x162e>
   15f4a:	68a0      	ldr	r0, [r4, #8]
   15f4c:	78c0      	ldrb	r0, [r0, #3]
   15f4e:	2814      	cmp	r0, #20
   15f50:	d015      	beq.n	15f7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x165a>
   15f52:	6868      	ldr	r0, [r5, #4]
   15f54:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
   15f58:	291e      	cmp	r1, #30
   15f5a:	d010      	beq.n	15f7e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x165a>
   15f5c:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
   15f60:	2901      	cmp	r1, #1
   15f62:	d018      	beq.n	15f96 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1672>
   15f64:	f890 115b 	ldrb.w	r1, [r0, #347]	; 0x15b
   15f68:	f88d 1000 	strb.w	r1, [sp]
   15f6c:	f89d 1000 	ldrb.w	r1, [sp]
   15f70:	b151      	cbz	r1, 15f88 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1664>
   15f72:	e010      	b.n	15f96 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1672>
   15f74:	4628      	mov	r0, r5
   15f76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f7a:	f7ff bf93 	b.w	15ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   15f7e:	6869      	ldr	r1, [r5, #4]
   15f80:	2001      	movs	r0, #1
   15f82:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
   15f86:	e006      	b.n	15f96 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1672>
   15f88:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
   15f8c:	f88d 1000 	strb.w	r1, [sp]
   15f90:	f89d 1000 	ldrb.w	r1, [sp]
   15f94:	b139      	cbz	r1, 15fa6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1682>
   15f96:	6868      	ldr	r0, [r5, #4]
   15f98:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   15f9c:	f041 0110 	orr.w	r1, r1, #16
   15fa0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   15fa4:	e00d      	b.n	15fc2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x169e>
   15fa6:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   15faa:	f041 0120 	orr.w	r1, r1, #32
   15fae:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   15fb2:	6870      	ldr	r0, [r6, #4]
   15fb4:	f500 72eb 	add.w	r2, r0, #470	; 0x1d6
   15fb8:	f100 0130 	add.w	r1, r0, #48	; 0x30
   15fbc:	8800      	ldrh	r0, [r0, #0]
   15fbe:	f7fa f85f 	bl	10080 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
   15fc2:	6870      	ldr	r0, [r6, #4]
   15fc4:	2100      	movs	r1, #0
   15fc6:	f8a0 1102 	strh.w	r1, [r0, #258]	; 0x102
   15fca:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   15fce:	1c49      	adds	r1, r1, #1
   15fd0:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   15fd4:	2000      	movs	r0, #0
   15fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15fda:	0000      	.short	0x0000
   15fdc:	2000013c 	.word	0x2000013c
   15fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15fe4:	4604      	mov	r4, r0
   15fe6:	6840      	ldr	r0, [r0, #4]
   15fe8:	2301      	movs	r3, #1
   15fea:	210a      	movs	r1, #10
   15fec:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   15ff0:	30a8      	adds	r0, #168	; 0xa8
   15ff2:	f009 fb50 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   15ff6:	2800      	cmp	r0, #0
   15ff8:	bf04      	itt	eq
   15ffa:	2001      	moveq	r0, #1
   15ffc:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16000:	4d1e      	ldr	r5, [pc, #120]	; (1607c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1758>)
   16002:	68e8      	ldr	r0, [r5, #12]
   16004:	f009 ff11 	bl	1fe2a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
   16008:	b1e8      	cbz	r0, 16046 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1722>
   1600a:	68e8      	ldr	r0, [r5, #12]
   1600c:	f009 ff07 	bl	1fe1e <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
   16010:	4606      	mov	r6, r0
   16012:	68e8      	ldr	r0, [r5, #12]
   16014:	f009 ff07 	bl	1fe26 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
   16018:	4607      	mov	r7, r0
   1601a:	68e8      	ldr	r0, [r5, #12]
   1601c:	f009 fefd 	bl	1fe1a <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
   16020:	4680      	mov	r8, r0
   16022:	68e8      	ldr	r0, [r5, #12]
   16024:	f009 fefd 	bl	1fe22 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
   16028:	4601      	mov	r1, r0
   1602a:	9600      	str	r6, [sp, #0]
   1602c:	6860      	ldr	r0, [r4, #4]
   1602e:	463b      	mov	r3, r7
   16030:	4642      	mov	r2, r8
   16032:	3030      	adds	r0, #48	; 0x30
   16034:	f00a f8c0 	bl	201b8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   16038:	6860      	ldr	r0, [r4, #4]
   1603a:	f00a f80e 	bl	2005a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   1603e:	2105      	movs	r1, #5
   16040:	6860      	ldr	r0, [r4, #4]
   16042:	f7fd fbb7 	bl	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   16046:	6861      	ldr	r1, [r4, #4]
   16048:	2000      	movs	r0, #0
   1604a:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
   1604e:	6861      	ldr	r1, [r4, #4]
   16050:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   16054:	480a      	ldr	r0, [pc, #40]	; (16080 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x175c>)
   16056:	6840      	ldr	r0, [r0, #4]
   16058:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
   1605c:	2901      	cmp	r1, #1
   1605e:	bf04      	itt	eq
   16060:	2102      	moveq	r1, #2
   16062:	f880 1064 	strbeq.w	r1, [r0, #100]	; 0x64
   16066:	d006      	beq.n	16076 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1752>
   16068:	f500 72e0 	add.w	r2, r0, #448	; 0x1c0
   1606c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   16070:	8800      	ldrh	r0, [r0, #0]
   16072:	f7f9 ff9d 	bl	ffb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   16076:	2000      	movs	r0, #0
   16078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1607c:	2000013c 	.word	0x2000013c
   16080:	20000154 	.word	0x20000154
   16084:	6841      	ldr	r1, [r0, #4]
   16086:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
   1608a:	f011 0f04 	tst.w	r1, #4
   1608e:	bf1c      	itt	ne
   16090:	2001      	movne	r0, #1
   16092:	4770      	bxne	lr
   16094:	2200      	movs	r2, #0
   16096:	4909      	ldr	r1, [pc, #36]	; (160bc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1798>)
   16098:	6849      	ldr	r1, [r1, #4]
   1609a:	f8a1 2102 	strh.w	r2, [r1, #258]	; 0x102
   1609e:	f891 2104 	ldrb.w	r2, [r1, #260]	; 0x104
   160a2:	1c52      	adds	r2, r2, #1
   160a4:	f881 2104 	strb.w	r2, [r1, #260]	; 0x104
   160a8:	6840      	ldr	r0, [r0, #4]
   160aa:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   160ae:	f041 0104 	orr.w	r1, r1, #4
   160b2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   160b6:	2000      	movs	r0, #0
   160b8:	4770      	bx	lr
   160ba:	0000      	.short	0x0000
   160bc:	20000154 	.word	0x20000154
   160c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160c4:	4604      	mov	r4, r0
   160c6:	6840      	ldr	r0, [r0, #4]
   160c8:	2301      	movs	r3, #1
   160ca:	2100      	movs	r1, #0
   160cc:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   160d0:	30a8      	adds	r0, #168	; 0xa8
   160d2:	f009 fae0 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   160d6:	2800      	cmp	r0, #0
   160d8:	6860      	ldr	r0, [r4, #4]
   160da:	d022      	beq.n	16122 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x17fe>
   160dc:	f890 10cb 	ldrb.w	r1, [r0, #203]	; 0xcb
   160e0:	2900      	cmp	r1, #0
   160e2:	d037      	beq.n	16154 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1830>
   160e4:	260a      	movs	r6, #10
   160e6:	f8b0 0156 	ldrh.w	r0, [r0, #342]	; 0x156
   160ea:	2107      	movs	r1, #7
   160ec:	f009 f801 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   160f0:	4d1a      	ldr	r5, [pc, #104]	; (1615c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1838>)
   160f2:	2700      	movs	r7, #0
   160f4:	b310      	cbz	r0, 1613c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1818>
   160f6:	3018      	adds	r0, #24
   160f8:	f00c fc6f 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   160fc:	b1f0      	cbz	r0, 1613c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1818>
   160fe:	6868      	ldr	r0, [r5, #4]
   16100:	210c      	movs	r1, #12
   16102:	f880 614b 	strb.w	r6, [r0, #331]	; 0x14b
   16106:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
   1610a:	6862      	ldr	r2, [r4, #4]
   1610c:	2130      	movs	r1, #48	; 0x30
   1610e:	f882 10c6 	strb.w	r1, [r2, #198]	; 0xc6
   16112:	f8a0 7102 	strh.w	r7, [r0, #258]	; 0x102
   16116:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   1611a:	1c49      	adds	r1, r1, #1
   1611c:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   16120:	e018      	b.n	16154 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1830>
   16122:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   16126:	2301      	movs	r3, #1
   16128:	2105      	movs	r1, #5
   1612a:	30a8      	adds	r0, #168	; 0xa8
   1612c:	f009 fab3 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16130:	2800      	cmp	r0, #0
   16132:	bf14      	ite	ne
   16134:	2008      	movne	r0, #8
   16136:	2001      	moveq	r0, #1
   16138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1613c:	6868      	ldr	r0, [r5, #4]
   1613e:	f8a0 7102 	strh.w	r7, [r0, #258]	; 0x102
   16142:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   16146:	1c49      	adds	r1, r1, #1
   16148:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   1614c:	6861      	ldr	r1, [r4, #4]
   1614e:	2012      	movs	r0, #18
   16150:	f881 00c6 	strb.w	r0, [r1, #198]	; 0xc6
   16154:	2000      	movs	r0, #0
   16156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1615a:	0000      	.short	0x0000
   1615c:	20000154 	.word	0x20000154
   16160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16162:	4604      	mov	r4, r0
   16164:	6840      	ldr	r0, [r0, #4]
   16166:	2301      	movs	r3, #1
   16168:	210b      	movs	r1, #11
   1616a:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   1616e:	30a8      	adds	r0, #168	; 0xa8
   16170:	f009 fa91 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16174:	2800      	cmp	r0, #0
   16176:	d12d      	bne.n	161d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b0>
   16178:	6860      	ldr	r0, [r4, #4]
   1617a:	2301      	movs	r3, #1
   1617c:	2100      	movs	r1, #0
   1617e:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   16182:	30a8      	adds	r0, #168	; 0xa8
   16184:	f009 fa87 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16188:	2800      	cmp	r0, #0
   1618a:	bf04      	itt	eq
   1618c:	2001      	moveq	r0, #1
   1618e:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
   16190:	6860      	ldr	r0, [r4, #4]
   16192:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
   16196:	2826      	cmp	r0, #38	; 0x26
   16198:	d01c      	beq.n	161d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b0>
   1619a:	4d2b      	ldr	r5, [pc, #172]	; (16248 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1924>)
   1619c:	68e8      	ldr	r0, [r5, #12]
   1619e:	f009 fe67 	bl	1fe70 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
   161a2:	b1c8      	cbz	r0, 161d8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18b4>
   161a4:	68e8      	ldr	r0, [r5, #12]
   161a6:	6862      	ldr	r2, [r4, #4]
   161a8:	7941      	ldrb	r1, [r0, #5]
   161aa:	f001 0107 	and.w	r1, r1, #7
   161ae:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
   161b2:	7900      	ldrb	r0, [r0, #4]
   161b4:	f000 0107 	and.w	r1, r0, #7
   161b8:	6860      	ldr	r0, [r4, #4]
   161ba:	f880 1066 	strb.w	r1, [r0, #102]	; 0x66
   161be:	6860      	ldr	r0, [r4, #4]
   161c0:	f890 2165 	ldrb.w	r2, [r0, #357]	; 0x165
   161c4:	f88d 2000 	strb.w	r2, [sp]
   161c8:	f89d 2000 	ldrb.w	r2, [sp]
   161cc:	2600      	movs	r6, #0
   161ce:	3518      	adds	r5, #24
   161d0:	b13a      	cbz	r2, 161e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x18be>
   161d2:	e02b      	b.n	1622c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1908>
   161d4:	2020      	movs	r0, #32
   161d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161d8:	4620      	mov	r0, r4
   161da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   161de:	f7ff be61 	b.w	15ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   161e2:	f890 2164 	ldrb.w	r2, [r0, #356]	; 0x164
   161e6:	2a01      	cmp	r2, #1
   161e8:	d020      	beq.n	1622c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1908>
   161ea:	f890 c06f 	ldrb.w	ip, [r0, #111]	; 0x6f
   161ee:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   161f2:	f100 026e 	add.w	r2, r0, #110	; 0x6e
   161f6:	458c      	cmp	ip, r1
   161f8:	bf01      	itttt	eq
   161fa:	7811      	ldrbeq	r1, [r2, #0]
   161fc:	4299      	cmpeq	r1, r3
   161fe:	2102      	moveq	r1, #2
   16200:	f880 1164 	strbeq.w	r1, [r0, #356]	; 0x164
   16204:	d012      	beq.n	1622c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1908>
   16206:	6869      	ldr	r1, [r5, #4]
   16208:	f501 70fa 	add.w	r0, r1, #500	; 0x1f4
   1620c:	880a      	ldrh	r2, [r1, #0]
   1620e:	f820 2b02 	strh.w	r2, [r0], #2
   16212:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
   16216:	f800 2b01 	strb.w	r2, [r0], #1
   1621a:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
   1621e:	f800 190d 	strb.w	r1, [r0], #-13
   16222:	f04f 0222 	mov.w	r2, #34	; 0x22
   16226:	4909      	ldr	r1, [pc, #36]	; (1624c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1928>)
   16228:	f7f9 fdcc 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   1622c:	6861      	ldr	r1, [r4, #4]
   1622e:	2023      	movs	r0, #35	; 0x23
   16230:	f881 00c6 	strb.w	r0, [r1, #198]	; 0xc6
   16234:	6868      	ldr	r0, [r5, #4]
   16236:	f8a0 6102 	strh.w	r6, [r0, #258]	; 0x102
   1623a:	f890 1104 	ldrb.w	r1, [r0, #260]	; 0x104
   1623e:	1c49      	adds	r1, r1, #1
   16240:	f880 1104 	strb.w	r1, [r0, #260]	; 0x104
   16244:	2000      	movs	r0, #0
   16246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16248:	2000013c 	.word	0x2000013c
   1624c:	00022939 	.word	0x00022939
   16250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16254:	4604      	mov	r4, r0
   16256:	6840      	ldr	r0, [r0, #4]
   16258:	f890 10c5 	ldrb.w	r1, [r0, #197]	; 0xc5
   1625c:	2922      	cmp	r1, #34	; 0x22
   1625e:	bf0c      	ite	eq
   16260:	2501      	moveq	r5, #1
   16262:	2500      	movne	r5, #0
   16264:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   16268:	2924      	cmp	r1, #36	; 0x24
   1626a:	bf08      	it	eq
   1626c:	f100 07c6 	addeq.w	r7, r0, #198	; 0xc6
   16270:	d006      	beq.n	16280 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x195c>
   16272:	2d00      	cmp	r5, #0
   16274:	bf12      	itee	ne
   16276:	f100 07c5 	addne.w	r7, r0, #197	; 0xc5
   1627a:	2002      	moveq	r0, #2
   1627c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16280:	f8df a228 	ldr.w	sl, [pc, #552]	; 164ac <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b88>
   16284:	f8da 000c 	ldr.w	r0, [sl, #12]
   16288:	f009 fdfe 	bl	1fe88 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
   1628c:	f10a 0618 	add.w	r6, sl, #24
   16290:	f04f 0b01 	mov.w	fp, #1
   16294:	f04f 0900 	mov.w	r9, #0
   16298:	2800      	cmp	r0, #0
   1629a:	d059      	beq.n	16350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a2c>
   1629c:	f8da 800c 	ldr.w	r8, [sl, #12]
   162a0:	4640      	mov	r0, r8
   162a2:	f009 fe00 	bl	1fea6 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
   162a6:	9000      	str	r0, [sp, #0]
   162a8:	4640      	mov	r0, r8
   162aa:	f009 fdfe 	bl	1feaa <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
   162ae:	4680      	mov	r8, r0
   162b0:	f009 fab9 	bl	1f826 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   162b4:	0001      	movs	r1, r0
   162b6:	d01f      	beq.n	162f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d4>
   162b8:	6872      	ldr	r2, [r6, #4]
   162ba:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
   162be:	4288      	cmp	r0, r1
   162c0:	d01a      	beq.n	162f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d4>
   162c2:	f892 3164 	ldrb.w	r3, [r2, #356]	; 0x164
   162c6:	2b01      	cmp	r3, #1
   162c8:	d02c      	beq.n	16324 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a00>
   162ca:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
   162ce:	ea13 0f08 	tst.w	r3, r8
   162d2:	d03d      	beq.n	16350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a2c>
   162d4:	2d00      	cmp	r5, #0
   162d6:	bf04      	itt	eq
   162d8:	f892 2067 	ldrbeq.w	r2, [r2, #103]	; 0x67
   162dc:	ea12 0f08 	tsteq.w	r2, r8
   162e0:	d10a      	bne.n	162f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d4>
   162e2:	b328      	cbz	r0, 16330 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a0c>
   162e4:	2804      	cmp	r0, #4
   162e6:	bf18      	it	ne
   162e8:	2904      	cmpne	r1, #4
   162ea:	d026      	beq.n	1633a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a16>
   162ec:	2808      	cmp	r0, #8
   162ee:	bf18      	it	ne
   162f0:	2908      	cmpne	r1, #8
   162f2:	d025      	beq.n	16340 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a1c>
   162f4:	4288      	cmp	r0, r1
   162f6:	d82b      	bhi.n	16350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a2c>
   162f8:	f8dd 8000 	ldr.w	r8, [sp]
   162fc:	4640      	mov	r0, r8
   162fe:	f009 fa92 	bl	1f826 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   16302:	0001      	movs	r1, r0
   16304:	d045      	beq.n	16392 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a6e>
   16306:	6870      	ldr	r0, [r6, #4]
   16308:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
   1630c:	428a      	cmp	r2, r1
   1630e:	d040      	beq.n	16392 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a6e>
   16310:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
   16314:	2901      	cmp	r1, #1
   16316:	d016      	beq.n	16346 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a22>
   16318:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   1631c:	ea10 0f08 	tst.w	r0, r8
   16320:	d016      	beq.n	16350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a2c>
   16322:	e036      	b.n	16392 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a6e>
   16324:	f892 3166 	ldrb.w	r3, [r2, #358]	; 0x166
   16328:	ea13 0f08 	tst.w	r3, r8
   1632c:	d1d2      	bne.n	162d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19b0>
   1632e:	e00f      	b.n	16350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a2c>
   16330:	f240 11a3 	movw	r1, #419	; 0x1a3
   16334:	2006      	movs	r0, #6
   16336:	f7f6 fda7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1633a:	4288      	cmp	r0, r1
   1633c:	d308      	bcc.n	16350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a2c>
   1633e:	e7db      	b.n	162f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d4>
   16340:	4288      	cmp	r0, r1
   16342:	d305      	bcc.n	16350 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a2c>
   16344:	e7d8      	b.n	162f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x19d4>
   16346:	f890 0167 	ldrb.w	r0, [r0, #359]	; 0x167
   1634a:	ea10 0f08 	tst.w	r0, r8
   1634e:	d120      	bne.n	16392 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1a6e>
   16350:	6860      	ldr	r0, [r4, #4]
   16352:	f04f 0800 	mov.w	r8, #0
   16356:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
   1635a:	2901      	cmp	r1, #1
   1635c:	bf0a      	itet	eq
   1635e:	201e      	moveq	r0, #30
   16360:	f880 9164 	strbne.w	r9, [r0, #356]	; 0x164
   16364:	f7ff fc3c 	bleq	15be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>
   16368:	b3d5      	cbz	r5, 163e0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1abc>
   1636a:	f8da 000c 	ldr.w	r0, [sl, #12]
   1636e:	6861      	ldr	r1, [r4, #4]
   16370:	78c0      	ldrb	r0, [r0, #3]
   16372:	f881 0149 	strb.w	r0, [r1, #329]	; 0x149
   16376:	fa0b f000 	lsl.w	r0, fp, r0
   1637a:	6861      	ldr	r1, [r4, #4]
   1637c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   16380:	d030      	beq.n	163e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ac0>
   16382:	200a      	movs	r0, #10
   16384:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   16388:	6860      	ldr	r0, [r4, #4]
   1638a:	f890 0100 	ldrb.w	r0, [r0, #256]	; 0x100
   1638e:	b340      	cbz	r0, 163e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1abe>
   16390:	e041      	b.n	16416 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1af2>
   16392:	466a      	mov	r2, sp
   16394:	6860      	ldr	r0, [r4, #4]
   16396:	f8da 100c 	ldr.w	r1, [sl, #12]
   1639a:	f7f9 f84f 	bl	f43c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
   1639e:	2528      	movs	r5, #40	; 0x28
   163a0:	b3e0      	cbz	r0, 1641c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1af8>
   163a2:	f8da 000c 	ldr.w	r0, [sl, #12]
   163a6:	f009 fd6d 	bl	1fe84 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
   163aa:	4601      	mov	r1, r0
   163ac:	6860      	ldr	r0, [r4, #4]
   163ae:	f8a0 13d4 	strh.w	r1, [r0, #980]	; 0x3d4
   163b2:	6860      	ldr	r0, [r4, #4]
   163b4:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
   163b8:	1a89      	subs	r1, r1, r2
   163ba:	b209      	sxth	r1, r1
   163bc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   163c0:	428a      	cmp	r2, r1
   163c2:	bfa8      	it	ge
   163c4:	2900      	cmpge	r1, #0
   163c6:	dd50      	ble.n	1646a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b46>
   163c8:	f89d 1000 	ldrb.w	r1, [sp]
   163cc:	f880 13d6 	strb.w	r1, [r0, #982]	; 0x3d6
   163d0:	6861      	ldr	r1, [r4, #4]
   163d2:	f89d 0001 	ldrb.w	r0, [sp, #1]
   163d6:	f881 03d7 	strb.w	r0, [r1, #983]	; 0x3d7
   163da:	2026      	movs	r0, #38	; 0x26
   163dc:	7038      	strb	r0, [r7, #0]
   163de:	e04c      	b.n	1647a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b56>
   163e0:	e00a      	b.n	163f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ad4>
   163e2:	e004      	b.n	163ee <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1aca>
   163e4:	f240 4183 	movw	r1, #1155	; 0x483
   163e8:	2031      	movs	r0, #49	; 0x31
   163ea:	f7f6 fd4d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   163ee:	f240 418b 	movw	r1, #1163	; 0x48b
   163f2:	2031      	movs	r0, #49	; 0x31
   163f4:	f7f6 fd48 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   163f8:	f887 9000 	strb.w	r9, [r7]
   163fc:	6871      	ldr	r1, [r6, #4]
   163fe:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   16402:	1e40      	subs	r0, r0, #1
   16404:	b240      	sxtb	r0, r0
   16406:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   1640a:	2800      	cmp	r0, #0
   1640c:	db46      	blt.n	1649c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b78>
   1640e:	4620      	mov	r0, r4
   16410:	f7ff fd48 	bl	15ea4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1580>
   16414:	4680      	mov	r8, r0
   16416:	4640      	mov	r0, r8
   16418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1641c:	e7ff      	b.n	1641e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1afa>
   1641e:	6860      	ldr	r0, [r4, #4]
   16420:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
   16424:	2901      	cmp	r1, #1
   16426:	bf18      	it	ne
   16428:	f880 9164 	strbne.w	r9, [r0, #356]	; 0x164
   1642c:	d007      	beq.n	1643e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b1a>
   1642e:	6860      	ldr	r0, [r4, #4]
   16430:	f100 01c6 	add.w	r1, r0, #198	; 0xc6
   16434:	42b9      	cmp	r1, r7
   16436:	bf08      	it	eq
   16438:	f880 90c6 	strbeq.w	r9, [r0, #198]	; 0xc6
   1643c:	e01d      	b.n	1647a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b56>
   1643e:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   16442:	f500 7275 	add.w	r2, r0, #980	; 0x3d4
   16446:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   1644a:	f8b0 0168 	ldrh.w	r0, [r0, #360]	; 0x168
   1644e:	f009 fa12 	bl	1f876 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>
   16452:	2800      	cmp	r0, #0
   16454:	bf1c      	itt	ne
   16456:	6860      	ldrne	r0, [r4, #4]
   16458:	f880 50c5 	strbne.w	r5, [r0, #197]	; 0xc5
   1645c:	d1e7      	bne.n	1642e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0a>
   1645e:	2000      	movs	r0, #0
   16460:	f7ff fbbe 	bl	15be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>
   16464:	f887 9000 	strb.w	r9, [r7]
   16468:	e7e1      	b.n	1642e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b0a>
   1646a:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
   1646e:	6860      	ldr	r0, [r4, #4]
   16470:	220b      	movs	r2, #11
   16472:	490f      	ldr	r1, [pc, #60]	; (164b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b8c>)
   16474:	30dc      	adds	r0, #220	; 0xdc
   16476:	f7f9 fca5 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   1647a:	6860      	ldr	r0, [r4, #4]
   1647c:	f100 01c6 	add.w	r1, r0, #198	; 0xc6
   16480:	42b9      	cmp	r1, r7
   16482:	bf18      	it	ne
   16484:	f880 9100 	strbne.w	r9, [r0, #256]	; 0x100
   16488:	d10d      	bne.n	164a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b82>
   1648a:	6871      	ldr	r1, [r6, #4]
   1648c:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   16490:	1e40      	subs	r0, r0, #1
   16492:	b240      	sxtb	r0, r0
   16494:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   16498:	2800      	cmp	r0, #0
   1649a:	da04      	bge.n	164a6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1b82>
   1649c:	f240 2101 	movw	r1, #513	; 0x201
   164a0:	2031      	movs	r0, #49	; 0x31
   164a2:	f7f6 fcf1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   164a6:	2000      	movs	r0, #0
   164a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ac:	2000013c 	.word	0x2000013c
   164b0:	000102d5 	.word	0x000102d5
   164b4:	b570      	push	{r4, r5, r6, lr}
   164b6:	4604      	mov	r4, r0
   164b8:	6840      	ldr	r0, [r0, #4]
   164ba:	4d0a      	ldr	r5, [pc, #40]	; (164e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1bc0>)
   164bc:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
   164c0:	f041 0104 	orr.w	r1, r1, #4
   164c4:	f880 1116 	strb.w	r1, [r0, #278]	; 0x116
   164c8:	68e8      	ldr	r0, [r5, #12]
   164ca:	f009 fcf0 	bl	1feae <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
   164ce:	4606      	mov	r6, r0
   164d0:	68e8      	ldr	r0, [r5, #12]
   164d2:	f009 fcf0 	bl	1feb6 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
   164d6:	4601      	mov	r1, r0
   164d8:	4622      	mov	r2, r4
   164da:	4630      	mov	r0, r6
   164dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   164e0:	f000 b8d2 	b.w	16688 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d64>
   164e4:	2000013c 	.word	0x2000013c
   164e8:	4602      	mov	r2, r0
   164ea:	4812      	ldr	r0, [pc, #72]	; (16534 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c10>)
   164ec:	68c0      	ldr	r0, [r0, #12]
   164ee:	7901      	ldrb	r1, [r0, #4]
   164f0:	4811      	ldr	r0, [pc, #68]	; (16538 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c14>)
   164f2:	6843      	ldr	r3, [r0, #4]
   164f4:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
   164f8:	2822      	cmp	r0, #34	; 0x22
   164fa:	bf14      	ite	ne
   164fc:	282f      	cmpne	r0, #47	; 0x2f
   164fe:	2016      	moveq	r0, #22
   16500:	d015      	beq.n	1652e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0a>
   16502:	2829      	cmp	r0, #41	; 0x29
   16504:	bf08      	it	eq
   16506:	2023      	moveq	r0, #35	; 0x23
   16508:	d011      	beq.n	1652e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0a>
   1650a:	2804      	cmp	r0, #4
   1650c:	bf08      	it	eq
   1650e:	200e      	moveq	r0, #14
   16510:	d00d      	beq.n	1652e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0a>
   16512:	2810      	cmp	r0, #16
   16514:	bf08      	it	eq
   16516:	2012      	moveq	r0, #18
   16518:	d009      	beq.n	1652e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0a>
   1651a:	281e      	cmp	r0, #30
   1651c:	bf08      	it	eq
   1651e:	2014      	moveq	r0, #20
   16520:	d005      	beq.n	1652e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c0a>
   16522:	f893 00c6 	ldrb.w	r0, [r3, #198]	; 0xc6
   16526:	2824      	cmp	r0, #36	; 0x24
   16528:	bf0c      	ite	eq
   1652a:	2017      	moveq	r0, #23
   1652c:	20fe      	movne	r0, #254	; 0xfe
   1652e:	f000 b8ab 	b.w	16688 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d64>
   16532:	0000      	.short	0x0000
   16534:	2000013c 	.word	0x2000013c
   16538:	20000154 	.word	0x20000154
   1653c:	b510      	push	{r4, lr}
   1653e:	6841      	ldr	r1, [r0, #4]
   16540:	f891 10c6 	ldrb.w	r1, [r1, #198]	; 0xc6
   16544:	2919      	cmp	r1, #25
   16546:	bf1c      	itt	ne
   16548:	2002      	movne	r0, #2
   1654a:	bd10      	popne	{r4, pc}
   1654c:	490a      	ldr	r1, [pc, #40]	; (16578 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c54>)
   1654e:	684a      	ldr	r2, [r1, #4]
   16550:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
   16554:	1e49      	subs	r1, r1, #1
   16556:	b249      	sxtb	r1, r1
   16558:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
   1655c:	2900      	cmp	r1, #0
   1655e:	da04      	bge.n	1656a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c46>
   16560:	f240 2101 	movw	r1, #513	; 0x201
   16564:	2031      	movs	r0, #49	; 0x31
   16566:	f7f6 fc8f 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1656a:	6840      	ldr	r0, [r0, #4]
   1656c:	211d      	movs	r1, #29
   1656e:	f880 10c6 	strb.w	r1, [r0, #198]	; 0xc6
   16572:	2000      	movs	r0, #0
   16574:	bd10      	pop	{r4, pc}
   16576:	0000      	.short	0x0000
   16578:	20000154 	.word	0x20000154
   1657c:	b510      	push	{r4, lr}
   1657e:	4604      	mov	r4, r0
   16580:	6840      	ldr	r0, [r0, #4]
   16582:	2301      	movs	r3, #1
   16584:	4619      	mov	r1, r3
   16586:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
   1658a:	30a8      	adds	r0, #168	; 0xa8
   1658c:	f009 f883 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   16590:	2800      	cmp	r0, #0
   16592:	bf1c      	itt	ne
   16594:	2000      	movne	r0, #0
   16596:	bd10      	popne	{r4, pc}
   16598:	4806      	ldr	r0, [pc, #24]	; (165b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1c90>)
   1659a:	68c0      	ldr	r0, [r0, #12]
   1659c:	f009 fcc1 	bl	1ff22 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
   165a0:	6861      	ldr	r1, [r4, #4]
   165a2:	f881 00c8 	strb.w	r0, [r1, #200]	; 0xc8
   165a6:	6861      	ldr	r1, [r4, #4]
   165a8:	2007      	movs	r0, #7
   165aa:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
   165ae:	2000      	movs	r0, #0
   165b0:	bd10      	pop	{r4, pc}
   165b2:	0000      	.short	0x0000
   165b4:	2000013c 	.word	0x2000013c
   165b8:	b570      	push	{r4, r5, r6, lr}
   165ba:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 16670 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d4c>
   165be:	6842      	ldr	r2, [r0, #4]
   165c0:	2400      	movs	r4, #0
   165c2:	f8dc 100c 	ldr.w	r1, [ip, #12]
   165c6:	2501      	movs	r5, #1
   165c8:	790b      	ldrb	r3, [r1, #4]
   165ca:	f892 10c5 	ldrb.w	r1, [r2, #197]	; 0xc5
   165ce:	2b17      	cmp	r3, #23
   165d0:	d00f      	beq.n	165f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cce>
   165d2:	dc07      	bgt.n	165e4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cc0>
   165d4:	2b0e      	cmp	r3, #14
   165d6:	bf1c      	itt	ne
   165d8:	2b12      	cmpne	r3, #18
   165da:	2b14      	cmpne	r3, #20
   165dc:	d009      	beq.n	165f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cce>
   165de:	2b16      	cmp	r3, #22
   165e0:	d00e      	beq.n	16600 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1cdc>
   165e2:	e042      	b.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   165e4:	2b1d      	cmp	r3, #29
   165e6:	d033      	beq.n	16650 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d2c>
   165e8:	2b23      	cmp	r3, #35	; 0x23
   165ea:	d02b      	beq.n	16644 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d20>
   165ec:	2bff      	cmp	r3, #255	; 0xff
   165ee:	d036      	beq.n	1665e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d3a>
   165f0:	e03b      	b.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   165f2:	4602      	mov	r2, r0
   165f4:	2101      	movs	r1, #1
   165f6:	4618      	mov	r0, r3
   165f8:	f000 f990 	bl	1691c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ff8>
   165fc:	4604      	mov	r4, r0
   165fe:	e034      	b.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   16600:	2922      	cmp	r1, #34	; 0x22
   16602:	bf18      	it	ne
   16604:	292f      	cmpne	r1, #47	; 0x2f
   16606:	d130      	bne.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   16608:	f04f 0100 	mov.w	r1, #0
   1660c:	f882 10c5 	strb.w	r1, [r2, #197]	; 0xc5
   16610:	6842      	ldr	r2, [r0, #4]
   16612:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
   16616:	6842      	ldr	r2, [r0, #4]
   16618:	f8a2 10fc 	strh.w	r1, [r2, #252]	; 0xfc
   1661c:	6841      	ldr	r1, [r0, #4]
   1661e:	f891 20c6 	ldrb.w	r2, [r1, #198]	; 0xc6
   16622:	2a23      	cmp	r2, #35	; 0x23
   16624:	d021      	beq.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   16626:	f891 2117 	ldrb.w	r2, [r1, #279]	; 0x117
   1662a:	f022 0201 	bic.w	r2, r2, #1
   1662e:	f881 2117 	strb.w	r2, [r1, #279]	; 0x117
   16632:	6840      	ldr	r0, [r0, #4]
   16634:	f022 0108 	bic.w	r1, r2, #8
   16638:	f880 1117 	strb.w	r1, [r0, #279]	; 0x117
   1663c:	201a      	movs	r0, #26
   1663e:	f7ff facf 	bl	15be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>
   16642:	e012      	b.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   16644:	2929      	cmp	r1, #41	; 0x29
   16646:	d110      	bne.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   16648:	490a      	ldr	r1, [pc, #40]	; (16674 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d50>)
   1664a:	6809      	ldr	r1, [r1, #0]
   1664c:	b929      	cbnz	r1, 1665a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d36>
   1664e:	e00c      	b.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   16650:	2931      	cmp	r1, #49	; 0x31
   16652:	d10a      	bne.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   16654:	4908      	ldr	r1, [pc, #32]	; (16678 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d54>)
   16656:	6809      	ldr	r1, [r1, #0]
   16658:	b139      	cbz	r1, 1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   1665a:	4788      	blx	r1
   1665c:	e005      	b.n	1666a <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d46>
   1665e:	f8dc 0010 	ldr.w	r0, [ip, #16]
   16662:	2800      	cmp	r0, #0
   16664:	bf18      	it	ne
   16666:	f882 53ce 	strbne.w	r5, [r2, #974]	; 0x3ce
   1666a:	4620      	mov	r0, r4
   1666c:	bd70      	pop	{r4, r5, r6, pc}
   1666e:	0000      	.short	0x0000
   16670:	2000013c 	.word	0x2000013c
   16674:	200002bc 	.word	0x200002bc
   16678:	200002c4 	.word	0x200002c4
   1667c:	4901      	ldr	r1, [pc, #4]	; (16684 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d60>)
   1667e:	68c9      	ldr	r1, [r1, #12]
   16680:	f7f9 bf2c 	b.w	104dc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
   16684:	2000013c 	.word	0x2000013c
   16688:	b570      	push	{r4, r5, r6, lr}
   1668a:	4d2b      	ldr	r5, [pc, #172]	; (16738 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e14>)
   1668c:	4603      	mov	r3, r0
   1668e:	2400      	movs	r4, #0
   16690:	6868      	ldr	r0, [r5, #4]
   16692:	4694      	mov	ip, r2
   16694:	2b1d      	cmp	r3, #29
   16696:	d03c      	beq.n	16712 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dee>
   16698:	dc0a      	bgt.n	166b0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1d8c>
   1669a:	f1a3 020e 	sub.w	r2, r3, #14
   1669e:	2a0a      	cmp	r2, #10
   166a0:	d248      	bcs.n	16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   166a2:	e8df f002 	tbb	[pc, r2]
   166a6:	470d      	.short	0x470d
   166a8:	470d4747 	.word	0x470d4747
   166ac:	0d14470d 	.word	0x0d14470d
   166b0:	2b20      	cmp	r3, #32
   166b2:	d034      	beq.n	1671e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dfa>
   166b4:	2b23      	cmp	r3, #35	; 0x23
   166b6:	bf1c      	itt	ne
   166b8:	2b24      	cmpne	r3, #36	; 0x24
   166ba:	2b25      	cmpne	r3, #37	; 0x25
   166bc:	d023      	beq.n	16706 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1de2>
   166be:	e039      	b.n	16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   166c0:	4662      	mov	r2, ip
   166c2:	f04f 0100 	mov.w	r1, #0
   166c6:	4618      	mov	r0, r3
   166c8:	f000 f928 	bl	1691c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ff8>
   166cc:	e01f      	b.n	1670e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dea>
   166ce:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   166d2:	2a22      	cmp	r2, #34	; 0x22
   166d4:	bf08      	it	eq
   166d6:	4608      	moveq	r0, r1
   166d8:	d00c      	beq.n	166f4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dd0>
   166da:	2a2f      	cmp	r2, #47	; 0x2f
   166dc:	d12a      	bne.n	16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   166de:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
   166e2:	2301      	movs	r3, #1
   166e4:	210b      	movs	r1, #11
   166e6:	30a8      	adds	r0, #168	; 0xa8
   166e8:	f008 ffd5 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   166ec:	2800      	cmp	r0, #0
   166ee:	bf08      	it	eq
   166f0:	202a      	moveq	r0, #42	; 0x2a
   166f2:	d101      	bne.n	166f8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dd4>
   166f4:	f7ff fa74 	bl	15be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>
   166f8:	6869      	ldr	r1, [r5, #4]
   166fa:	2000      	movs	r0, #0
   166fc:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   16700:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
   16704:	e016      	b.n	16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   16706:	480d      	ldr	r0, [pc, #52]	; (1673c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e18>)
   16708:	6802      	ldr	r2, [r0, #0]
   1670a:	b92a      	cbnz	r2, 16718 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1df4>
   1670c:	e012      	b.n	16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   1670e:	4604      	mov	r4, r0
   16710:	e010      	b.n	16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   16712:	480b      	ldr	r0, [pc, #44]	; (16740 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e1c>)
   16714:	6802      	ldr	r2, [r0, #0]
   16716:	b16a      	cbz	r2, 16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   16718:	4618      	mov	r0, r3
   1671a:	4790      	blx	r2
   1671c:	e7f7      	b.n	1670e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dea>
   1671e:	4a09      	ldr	r2, [pc, #36]	; (16744 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e20>)
   16720:	f8d2 c000 	ldr.w	ip, [r2]
   16724:	f1bc 0f00 	cmp.w	ip, #0
   16728:	d004      	beq.n	16734 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e10>
   1672a:	460a      	mov	r2, r1
   1672c:	4619      	mov	r1, r3
   1672e:	30a8      	adds	r0, #168	; 0xa8
   16730:	47e0      	blx	ip
   16732:	e7ec      	b.n	1670e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1dea>
   16734:	4620      	mov	r0, r4
   16736:	bd70      	pop	{r4, r5, r6, pc}
   16738:	20000154 	.word	0x20000154
   1673c:	200002b8 	.word	0x200002b8
   16740:	200002c0 	.word	0x200002c0
   16744:	200002b4 	.word	0x200002b4
   16748:	b510      	push	{r4, lr}
   1674a:	6841      	ldr	r1, [r0, #4]
   1674c:	f8d1 00b4 	ldr.w	r0, [r1, #180]	; 0xb4
   16750:	f010 0f10 	tst.w	r0, #16
   16754:	d007      	beq.n	16766 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e42>
   16756:	f010 0f20 	tst.w	r0, #32
   1675a:	d009      	beq.n	16770 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e4c>
   1675c:	f640 0186 	movw	r1, #2182	; 0x886
   16760:	2031      	movs	r0, #49	; 0x31
   16762:	f7f6 fb91 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16766:	f640 0185 	movw	r1, #2181	; 0x885
   1676a:	2031      	movs	r0, #49	; 0x31
   1676c:	f7f6 fb8c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16770:	f020 0010 	bic.w	r0, r0, #16
   16774:	f8c1 00b4 	str.w	r0, [r1, #180]	; 0xb4
   16778:	4807      	ldr	r0, [pc, #28]	; (16798 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1e74>)
   1677a:	6841      	ldr	r1, [r0, #4]
   1677c:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   16780:	1e40      	subs	r0, r0, #1
   16782:	b240      	sxtb	r0, r0
   16784:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   16788:	2800      	cmp	r0, #0
   1678a:	bfa8      	it	ge
   1678c:	bd10      	popge	{r4, pc}
   1678e:	f240 2101 	movw	r1, #513	; 0x201
   16792:	2031      	movs	r0, #49	; 0x31
   16794:	f7f6 fb78 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16798:	20000154 	.word	0x20000154
   1679c:	b510      	push	{r4, lr}
   1679e:	6840      	ldr	r0, [r0, #4]
   167a0:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   167a4:	f021 0104 	bic.w	r1, r1, #4
   167a8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   167ac:	4807      	ldr	r0, [pc, #28]	; (167cc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ea8>)
   167ae:	6841      	ldr	r1, [r0, #4]
   167b0:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   167b4:	1e40      	subs	r0, r0, #1
   167b6:	b240      	sxtb	r0, r0
   167b8:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   167bc:	2800      	cmp	r0, #0
   167be:	bfa8      	it	ge
   167c0:	bd10      	popge	{r4, pc}
   167c2:	f240 2101 	movw	r1, #513	; 0x201
   167c6:	2031      	movs	r0, #49	; 0x31
   167c8:	f7f6 fb5e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   167cc:	20000154 	.word	0x20000154
   167d0:	b510      	push	{r4, lr}
   167d2:	6840      	ldr	r0, [r0, #4]
   167d4:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   167d8:	2930      	cmp	r1, #48	; 0x30
   167da:	d00a      	beq.n	167f2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ece>
   167dc:	2917      	cmp	r1, #23
   167de:	bf02      	ittt	eq
   167e0:	211b      	moveq	r1, #27
   167e2:	f880 10c6 	strbeq.w	r1, [r0, #198]	; 0xc6
   167e6:	bd10      	popeq	{r4, pc}
   167e8:	f640 013d 	movw	r1, #2109	; 0x83d
   167ec:	2031      	movs	r0, #49	; 0x31
   167ee:	f7f6 fb4b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   167f2:	2100      	movs	r1, #0
   167f4:	f880 10c6 	strb.w	r1, [r0, #198]	; 0xc6
   167f8:	4807      	ldr	r0, [pc, #28]	; (16818 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ef4>)
   167fa:	6841      	ldr	r1, [r0, #4]
   167fc:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   16800:	1e40      	subs	r0, r0, #1
   16802:	b240      	sxtb	r0, r0
   16804:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   16808:	2800      	cmp	r0, #0
   1680a:	bfa8      	it	ge
   1680c:	bd10      	popge	{r4, pc}
   1680e:	f240 2101 	movw	r1, #513	; 0x201
   16812:	2031      	movs	r0, #49	; 0x31
   16814:	f7f6 fb38 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16818:	20000154 	.word	0x20000154
   1681c:	b570      	push	{r4, r5, r6, lr}
   1681e:	4604      	mov	r4, r0
   16820:	6840      	ldr	r0, [r0, #4]
   16822:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   16826:	291d      	cmp	r1, #29
   16828:	d004      	beq.n	16834 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f10>
   1682a:	f640 014e 	movw	r1, #2126	; 0x84e
   1682e:	2031      	movs	r0, #49	; 0x31
   16830:	f7f6 fb2a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16834:	2500      	movs	r5, #0
   16836:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
   1683a:	6860      	ldr	r0, [r4, #4]
   1683c:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
   16840:	b181      	cbz	r1, 16864 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f40>
   16842:	f880 5106 	strb.w	r5, [r0, #262]	; 0x106
   16846:	6860      	ldr	r0, [r4, #4]
   16848:	220d      	movs	r2, #13
   1684a:	8801      	ldrh	r1, [r0, #0]
   1684c:	f8a0 12e4 	strh.w	r1, [r0, #740]	; 0x2e4
   16850:	6860      	ldr	r0, [r4, #4]
   16852:	490f      	ldr	r1, [pc, #60]	; (16890 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f6c>)
   16854:	f880 52e2 	strb.w	r5, [r0, #738]	; 0x2e2
   16858:	6860      	ldr	r0, [r4, #4]
   1685a:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
   1685e:	f7f9 fab1 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   16862:	e010      	b.n	16886 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f62>
   16864:	8801      	ldrh	r1, [r0, #0]
   16866:	f8a0 12e4 	strh.w	r1, [r0, #740]	; 0x2e4
   1686a:	6860      	ldr	r0, [r4, #4]
   1686c:	220c      	movs	r2, #12
   1686e:	f880 52e2 	strb.w	r5, [r0, #738]	; 0x2e2
   16872:	6861      	ldr	r1, [r4, #4]
   16874:	2001      	movs	r0, #1
   16876:	f881 02e6 	strb.w	r0, [r1, #742]	; 0x2e6
   1687a:	6860      	ldr	r0, [r4, #4]
   1687c:	4905      	ldr	r1, [pc, #20]	; (16894 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f70>)
   1687e:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
   16882:	f7f9 fa9f 	bl	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   16886:	6860      	ldr	r0, [r4, #4]
   16888:	f880 50c6 	strb.w	r5, [r0, #198]	; 0xc6
   1688c:	bd70      	pop	{r4, r5, r6, pc}
   1688e:	0000      	.short	0x0000
   16890:	000202f9 	.word	0x000202f9
   16894:	000202d9 	.word	0x000202d9
   16898:	491e      	ldr	r1, [pc, #120]	; (16914 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ff0>)
   1689a:	b510      	push	{r4, lr}
   1689c:	6889      	ldr	r1, [r1, #8]
   1689e:	2200      	movs	r2, #0
   168a0:	790b      	ldrb	r3, [r1, #4]
   168a2:	6841      	ldr	r1, [r0, #4]
   168a4:	f891 c0c5 	ldrb.w	ip, [r1, #197]	; 0xc5
   168a8:	f1bc 0f0a 	cmp.w	ip, #10
   168ac:	bf04      	itt	eq
   168ae:	f891 c149 	ldrbeq.w	ip, [r1, #329]	; 0x149
   168b2:	459c      	cmpeq	ip, r3
   168b4:	d105      	bne.n	168c2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1f9e>
   168b6:	f881 20c5 	strb.w	r2, [r1, #197]	; 0xc5
   168ba:	6840      	ldr	r0, [r0, #4]
   168bc:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
   168c0:	bd10      	pop	{r4, pc}
   168c2:	f8d1 c0b4 	ldr.w	ip, [r1, #180]	; 0xb4
   168c6:	f01c 0f08 	tst.w	ip, #8
   168ca:	d014      	beq.n	168f6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1fd2>
   168cc:	f02c 0008 	bic.w	r0, ip, #8
   168d0:	f8c1 00b4 	str.w	r0, [r1, #180]	; 0xb4
   168d4:	4810      	ldr	r0, [pc, #64]	; (16918 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1ff4>)
   168d6:	6841      	ldr	r1, [r0, #4]
   168d8:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   168dc:	f1a0 0001 	sub.w	r0, r0, #1
   168e0:	b240      	sxtb	r0, r0
   168e2:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   168e6:	2800      	cmp	r0, #0
   168e8:	bfa8      	it	ge
   168ea:	bd10      	popge	{r4, pc}
   168ec:	f240 2101 	movw	r1, #513	; 0x201
   168f0:	2031      	movs	r0, #49	; 0x31
   168f2:	f7f6 fac9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   168f6:	2bff      	cmp	r3, #255	; 0xff
   168f8:	d004      	beq.n	16904 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x1fe0>
   168fa:	f240 71ea 	movw	r1, #2026	; 0x7ea
   168fe:	2031      	movs	r0, #49	; 0x31
   16900:	f7f6 fac2 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16904:	2332      	movs	r3, #50	; 0x32
   16906:	f881 30c5 	strb.w	r3, [r1, #197]	; 0xc5
   1690a:	6840      	ldr	r0, [r0, #4]
   1690c:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
   16910:	bd10      	pop	{r4, pc}
   16912:	0000      	.short	0x0000
   16914:	2000013c 	.word	0x2000013c
   16918:	20000154 	.word	0x20000154
   1691c:	b570      	push	{r4, r5, r6, lr}
   1691e:	4684      	mov	ip, r0
   16920:	6850      	ldr	r0, [r2, #4]
   16922:	4614      	mov	r4, r2
   16924:	2600      	movs	r6, #0
   16926:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   1692a:	4635      	mov	r5, r6
   1692c:	f1bc 0f0e 	cmp.w	ip, #14
   16930:	d00e      	beq.n	16950 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x202c>
   16932:	f1bc 0f12 	cmp.w	ip, #18
   16936:	d019      	beq.n	1696c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2048>
   16938:	4b38      	ldr	r3, [pc, #224]	; (16a1c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20f8>)
   1693a:	f1bc 0f14 	cmp.w	ip, #20
   1693e:	d027      	beq.n	16990 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x206c>
   16940:	f1bc 0f17 	cmp.w	ip, #23
   16944:	d047      	beq.n	169d6 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20b2>
   16946:	f240 4115 	movw	r1, #1045	; 0x415
   1694a:	2031      	movs	r0, #49	; 0x31
   1694c:	f7f6 fa9c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16950:	2a04      	cmp	r2, #4
   16952:	d144      	bne.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   16954:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
   16958:	6860      	ldr	r0, [r4, #4]
   1695a:	f880 5100 	strb.w	r5, [r0, #256]	; 0x100
   1695e:	6860      	ldr	r0, [r4, #4]
   16960:	f8a0 50fc 	strh.w	r5, [r0, #252]	; 0xfc
   16964:	4620      	mov	r0, r4
   16966:	f7f9 fd9d 	bl	104a4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
   1696a:	e038      	b.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   1696c:	2a10      	cmp	r2, #16
   1696e:	d136      	bne.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   16970:	2301      	movs	r3, #1
   16972:	2109      	movs	r1, #9
   16974:	30a8      	adds	r0, #168	; 0xa8
   16976:	f008 fe8e 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   1697a:	b358      	cbz	r0, 169d4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20b0>
   1697c:	6860      	ldr	r0, [r4, #4]
   1697e:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
   16982:	6860      	ldr	r0, [r4, #4]
   16984:	f880 5100 	strb.w	r5, [r0, #256]	; 0x100
   16988:	6860      	ldr	r0, [r4, #4]
   1698a:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
   1698e:	e026      	b.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   16990:	2a1e      	cmp	r2, #30
   16992:	d124      	bne.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   16994:	f880 50c5 	strb.w	r5, [r0, #197]	; 0xc5
   16998:	6860      	ldr	r0, [r4, #4]
   1699a:	f880 5100 	strb.w	r5, [r0, #256]	; 0x100
   1699e:	6860      	ldr	r0, [r4, #4]
   169a0:	f8a0 50fc 	strh.w	r5, [r0, #252]	; 0xfc
   169a4:	b131      	cbz	r1, 169b4 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x2090>
   169a6:	6860      	ldr	r0, [r4, #4]
   169a8:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
   169ac:	f021 0120 	bic.w	r1, r1, #32
   169b0:	f880 1116 	strb.w	r1, [r0, #278]	; 0x116
   169b4:	6858      	ldr	r0, [r3, #4]
   169b6:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
   169ba:	2901      	cmp	r1, #1
   169bc:	bf04      	itt	eq
   169be:	2102      	moveq	r1, #2
   169c0:	f880 1064 	strbeq.w	r1, [r0, #100]	; 0x64
   169c4:	d00b      	beq.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   169c6:	f500 72e0 	add.w	r2, r0, #448	; 0x1c0
   169ca:	f100 0130 	add.w	r1, r0, #48	; 0x30
   169ce:	8800      	ldrh	r0, [r0, #0]
   169d0:	f7f9 faee 	bl	ffb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   169d4:	e003      	b.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   169d6:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   169da:	2924      	cmp	r1, #36	; 0x24
   169dc:	d001      	beq.n	169e2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20be>
   169de:	4630      	mov	r0, r6
   169e0:	bd70      	pop	{r4, r5, r6, pc}
   169e2:	f880 50c6 	strb.w	r5, [r0, #198]	; 0xc6
   169e6:	6859      	ldr	r1, [r3, #4]
   169e8:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   169ec:	1e40      	subs	r0, r0, #1
   169ee:	b240      	sxtb	r0, r0
   169f0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   169f4:	2800      	cmp	r0, #0
   169f6:	da04      	bge.n	16a02 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20de>
   169f8:	f240 2101 	movw	r1, #513	; 0x201
   169fc:	2031      	movs	r0, #49	; 0x31
   169fe:	f7f6 fa43 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16a02:	6860      	ldr	r0, [r4, #4]
   16a04:	f890 0164 	ldrb.w	r0, [r0, #356]	; 0x164
   16a08:	2801      	cmp	r0, #1
   16a0a:	bf04      	itt	eq
   16a0c:	2000      	moveq	r0, #0
   16a0e:	f7ff f8e7 	bleq	15be0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x12bc>
   16a12:	6860      	ldr	r0, [r4, #4]
   16a14:	f880 5164 	strb.w	r5, [r0, #356]	; 0x164
   16a18:	e7e1      	b.n	169de <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY+0x20ba>
   16a1a:	0000      	.short	0x0000
   16a1c:	20000154 	.word	0x20000154

00016a20 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
   16a20:	4802      	ldr	r0, [pc, #8]	; (16a2c <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
   16a22:	6840      	ldr	r0, [r0, #4]
   16a24:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
   16a28:	4770      	bx	lr
   16a2a:	0000      	.short	0x0000
   16a2c:	200002d0 	.word	0x200002d0

00016a30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
   16a30:	480c      	ldr	r0, [pc, #48]	; (16a64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>)
   16a32:	6841      	ldr	r1, [r0, #4]
   16a34:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
   16a38:	2803      	cmp	r0, #3
   16a3a:	d004      	beq.n	16a46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
   16a3c:	2801      	cmp	r0, #1
   16a3e:	bf18      	it	ne
   16a40:	2802      	cmpne	r0, #2
   16a42:	d007      	beq.n	16a54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
   16a44:	e004      	b.n	16a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
   16a46:	f891 005a 	ldrb.w	r0, [r1, #90]	; 0x5a
   16a4a:	2801      	cmp	r0, #1
   16a4c:	bf08      	it	eq
   16a4e:	4770      	bxeq	lr
   16a50:	2000      	movs	r0, #0
   16a52:	4770      	bx	lr
   16a54:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
   16a58:	2801      	cmp	r0, #1
   16a5a:	bf14      	ite	ne
   16a5c:	2803      	cmpne	r0, #3
   16a5e:	2001      	moveq	r0, #1
   16a60:	d1f6      	bne.n	16a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20>
   16a62:	4770      	bx	lr
   16a64:	200002d0 	.word	0x200002d0

00016a68 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
   16a68:	4801      	ldr	r0, [pc, #4]	; (16a70 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
   16a6a:	7800      	ldrb	r0, [r0, #0]
   16a6c:	4770      	bx	lr
   16a6e:	0000      	.short	0x0000
   16a70:	20000e20 	.word	0x20000e20

00016a74 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
   16a74:	4901      	ldr	r1, [pc, #4]	; (16a7c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
   16a76:	7048      	strb	r0, [r1, #1]
   16a78:	4770      	bx	lr
   16a7a:	0000      	.short	0x0000
   16a7c:	20001180 	.word	0x20001180

00016a80 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
   16a80:	b570      	push	{r4, r5, r6, lr}
   16a82:	4605      	mov	r5, r0
   16a84:	4909      	ldr	r1, [pc, #36]	; (16aac <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
   16a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16a8a:	fbb1 f4f0 	udiv	r4, r1, r0
   16a8e:	f00a fb07 	bl	210a0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
   16a92:	4420      	add	r0, r4
   16a94:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
   16a98:	4628      	mov	r0, r5
   16a9a:	f009 fb82 	bl	201a2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   16a9e:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   16aa2:	bf28      	it	cs
   16aa4:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
   16aa8:	b280      	uxth	r0, r0
   16aaa:	bd70      	pop	{r4, r5, r6, pc}
   16aac:	000122f9 	.word	0x000122f9

00016ab0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
   16ab0:	6941      	ldr	r1, [r0, #20]
   16ab2:	b149      	cbz	r1, 16ac8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
   16ab4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   16ab8:	441a      	add	r2, r3
   16aba:	68cb      	ldr	r3, [r1, #12]
   16abc:	441a      	add	r2, r3
   16abe:	60ca      	str	r2, [r1, #12]
   16ac0:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   16ac4:	6111      	str	r1, [r2, #16]
   16ac6:	e002      	b.n	16ace <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
   16ac8:	4a06      	ldr	r2, [pc, #24]	; (16ae4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
   16aca:	6901      	ldr	r1, [r0, #16]
   16acc:	6011      	str	r1, [r2, #0]
   16ace:	6901      	ldr	r1, [r0, #16]
   16ad0:	6940      	ldr	r0, [r0, #20]
   16ad2:	2900      	cmp	r1, #0
   16ad4:	bf1c      	itt	ne
   16ad6:	6148      	strne	r0, [r1, #20]
   16ad8:	4770      	bxne	lr
   16ada:	2800      	cmp	r0, #0
   16adc:	bf1c      	itt	ne
   16ade:	2100      	movne	r1, #0
   16ae0:	60c1      	strne	r1, [r0, #12]
   16ae2:	4770      	bx	lr
   16ae4:	200002e0 	.word	0x200002e0

00016ae8 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY>:
   16ae8:	b570      	push	{r4, r5, r6, lr}
   16aea:	460c      	mov	r4, r1
   16aec:	2800      	cmp	r0, #0
   16aee:	d02f      	beq.n	16b50 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x68>
   16af0:	f1a0 05a1 	sub.w	r5, r0, #161	; 0xa1
   16af4:	2600      	movs	r6, #0
   16af6:	7066      	strb	r6, [r4, #1]
   16af8:	2025      	movs	r0, #37	; 0x25
   16afa:	7020      	strb	r0, [r4, #0]
   16afc:	f895 00aa 	ldrb.w	r0, [r5, #170]	; 0xaa
   16b00:	7120      	strb	r0, [r4, #4]
   16b02:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
   16b04:	f8a4 0005 	strh.w	r0, [r4, #5]
   16b08:	6a68      	ldr	r0, [r5, #36]	; 0x24
   16b0a:	f8d4 1009 	ldr.w	r1, [r4, #9]
   16b0e:	f360 211f 	bfi	r1, r0, #8, #24
   16b12:	f8c4 1009 	str.w	r1, [r4, #9]
   16b16:	68a8      	ldr	r0, [r5, #8]
   16b18:	68e1      	ldr	r1, [r4, #12]
   16b1a:	f360 211f 	bfi	r1, r0, #8, #24
   16b1e:	60e1      	str	r1, [r4, #12]
   16b20:	6968      	ldr	r0, [r5, #20]
   16b22:	f8d4 100f 	ldr.w	r1, [r4, #15]
   16b26:	f360 211f 	bfi	r1, r0, #8, #24
   16b2a:	f8c4 100f 	str.w	r1, [r4, #15]
   16b2e:	7c28      	ldrb	r0, [r5, #16]
   16b30:	2801      	cmp	r0, #1
   16b32:	bf18      	it	ne
   16b34:	2802      	cmpne	r0, #2
   16b36:	d00f      	beq.n	16b58 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x70>
   16b38:	2804      	cmp	r0, #4
   16b3a:	bf14      	ite	ne
   16b3c:	2808      	cmpne	r0, #8
   16b3e:	2003      	moveq	r0, #3
   16b40:	d00a      	beq.n	16b58 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x70>
   16b42:	bf00      	nop
   16b44:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   16b48:	f04f 0006 	mov.w	r0, #6
   16b4c:	f7f6 f99c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16b50:	2177      	movs	r1, #119	; 0x77
   16b52:	201a      	movs	r0, #26
   16b54:	f7f6 f998 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16b58:	74e0      	strb	r0, [r4, #19]
   16b5a:	7f28      	ldrb	r0, [r5, #28]
   16b5c:	2801      	cmp	r0, #1
   16b5e:	bf18      	it	ne
   16b60:	2802      	cmpne	r0, #2
   16b62:	d004      	beq.n	16b6e <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x86>
   16b64:	2804      	cmp	r0, #4
   16b66:	bf14      	ite	ne
   16b68:	2808      	cmpne	r0, #8
   16b6a:	2003      	moveq	r0, #3
   16b6c:	d1ea      	bne.n	16b44 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0x5c>
   16b6e:	7520      	strb	r0, [r4, #20]
   16b70:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
   16b74:	7560      	strb	r0, [r4, #21]
   16b76:	7be8      	ldrb	r0, [r5, #15]
   16b78:	75a0      	strb	r0, [r4, #22]
   16b7a:	7ee8      	ldrb	r0, [r5, #27]
   16b7c:	75e0      	strb	r0, [r4, #23]
   16b7e:	7ba8      	ldrb	r0, [r5, #14]
   16b80:	8360      	strh	r0, [r4, #26]
   16b82:	7ea8      	ldrb	r0, [r5, #26]
   16b84:	83a0      	strh	r0, [r4, #28]
   16b86:	8f68      	ldrh	r0, [r5, #58]	; 0x3a
   16b88:	f04f 0107 	mov.w	r1, #7
   16b8c:	f008 fab1 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   16b90:	b308      	cbz	r0, 16bd6 <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0xee>
   16b92:	6901      	ldr	r1, [r0, #16]
   16b94:	f8d4 2006 	ldr.w	r2, [r4, #6]
   16b98:	f361 221f 	bfi	r2, r1, #8, #24
   16b9c:	f8c4 2006 	str.w	r2, [r4, #6]
   16ba0:	7d41      	ldrb	r1, [r0, #21]
   16ba2:	7621      	strb	r1, [r4, #24]
   16ba4:	7d81      	ldrb	r1, [r0, #22]
   16ba6:	7661      	strb	r1, [r4, #25]
   16ba8:	6841      	ldr	r1, [r0, #4]
   16baa:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16bae:	fbb1 f1f2 	udiv	r1, r1, r2
   16bb2:	83e1      	strh	r1, [r4, #30]
   16bb4:	f895 10aa 	ldrb.w	r1, [r5, #170]	; 0xaa
   16bb8:	2900      	cmp	r1, #0
   16bba:	bf08      	it	eq
   16bbc:	bd70      	popeq	{r4, r5, r6, pc}
   16bbe:	7801      	ldrb	r1, [r0, #0]
   16bc0:	b169      	cbz	r1, 16bde <sym_QSBLLXJNE4J2PLB5JSA5I6DVIY2I4GGIJ5BFBGY+0xf6>
   16bc2:	2101      	movs	r1, #1
   16bc4:	3018      	adds	r0, #24
   16bc6:	f00b ff27 	bl	22a18 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII>
   16bca:	f64f 70ff 	movw	r0, #65535	; 0xffff
   16bce:	8728      	strh	r0, [r5, #56]	; 0x38
   16bd0:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
   16bd4:	bd70      	pop	{r4, r5, r6, pc}
   16bd6:	2190      	movs	r1, #144	; 0x90
   16bd8:	201a      	movs	r0, #26
   16bda:	f7f6 f955 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16bde:	8f68      	ldrh	r0, [r5, #58]	; 0x3a
   16be0:	2107      	movs	r1, #7
   16be2:	f7f6 fc8d 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   16be6:	2800      	cmp	r0, #0
   16be8:	bf08      	it	eq
   16bea:	bd70      	popeq	{r4, r5, r6, pc}
   16bec:	2128      	movs	r1, #40	; 0x28
   16bee:	201a      	movs	r0, #26
   16bf0:	f7f6 f94a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00016bf4 <sym_K6D4ZGUN2C55UIS7AV5H24FZ7SST53KXVT53HQQ>:
   16bf4:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
   16bf8:	222b      	movs	r2, #43	; 0x2b
   16bfa:	4902      	ldr	r1, [pc, #8]	; (16c04 <sym_K6D4ZGUN2C55UIS7AV5H24FZ7SST53KXVT53HQQ+0x10>)
   16bfc:	30a1      	adds	r0, #161	; 0xa1
   16bfe:	f7f9 b8e1 	b.w	fdc4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   16c02:	0000      	.short	0x0000
   16c04:	00016ae9 	.word	0x00016ae9

00016c08 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q>:
   16c08:	b51c      	push	{r2, r3, r4, lr}
   16c0a:	2000      	movs	r0, #0
   16c0c:	f000 fd28 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   16c10:	490a      	ldr	r1, [pc, #40]	; (16c3c <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x34>)
   16c12:	2400      	movs	r4, #0
   16c14:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
   16c18:	e9cd 0100 	strd	r0, r1, [sp]
   16c1c:	e007      	b.n	16c2e <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x26>
   16c1e:	bf00      	nop
   16c20:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   16c24:	9800      	ldr	r0, [sp, #0]
   16c26:	f00b fcb3 	bl	22590 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45c>
   16c2a:	b100      	cbz	r0, 16c2e <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x26>
   16c2c:	4604      	mov	r4, r0
   16c2e:	4668      	mov	r0, sp
   16c30:	f7f6 fbd8 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   16c34:	2800      	cmp	r0, #0
   16c36:	d0f3      	beq.n	16c20 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q+0x18>
   16c38:	4620      	mov	r0, r4
   16c3a:	bd1c      	pop	{r2, r3, r4, pc}
   16c3c:	000175bc 	.word	0x000175bc

00016c40 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
   16c40:	4903      	ldr	r1, [pc, #12]	; (16c50 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
   16c42:	884a      	ldrh	r2, [r1, #2]
   16c44:	8002      	strh	r2, [r0, #0]
   16c46:	7809      	ldrb	r1, [r1, #0]
   16c48:	7081      	strb	r1, [r0, #2]
   16c4a:	2000      	movs	r0, #0
   16c4c:	4770      	bx	lr
   16c4e:	0000      	.short	0x0000
   16c50:	2000111c 	.word	0x2000111c

00016c54 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   16c54:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   16c56:	460c      	mov	r4, r1
   16c58:	4605      	mov	r5, r0
   16c5a:	8800      	ldrh	r0, [r0, #0]
   16c5c:	4669      	mov	r1, sp
   16c5e:	f008 fccf 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   16c62:	2200      	movs	r2, #0
   16c64:	b128      	cbz	r0, 16c72 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   16c66:	f8c4 2002 	str.w	r2, [r4, #2]
   16c6a:	71a2      	strb	r2, [r4, #6]
   16c6c:	8022      	strh	r2, [r4, #0]
   16c6e:	2002      	movs	r0, #2
   16c70:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16c72:	9901      	ldr	r1, [sp, #4]
   16c74:	f111 01a8 	adds.w	r1, r1, #168	; 0xa8
   16c78:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
   16c7c:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
   16c80:	f8c4 0002 	str.w	r0, [r4, #2]
   16c84:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
   16c88:	71a0      	strb	r0, [r4, #6]
   16c8a:	8828      	ldrh	r0, [r5, #0]
   16c8c:	8020      	strh	r0, [r4, #0]
   16c8e:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
   16c92:	f88d 0008 	strb.w	r0, [sp, #8]
   16c96:	9802      	ldr	r0, [sp, #8]
   16c98:	9002      	str	r0, [sp, #8]
   16c9a:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16c9e:	2800      	cmp	r0, #0
   16ca0:	d1ea      	bne.n	16c78 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   16ca2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00016ca4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   16ca4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   16ca6:	460d      	mov	r5, r1
   16ca8:	4606      	mov	r6, r0
   16caa:	8800      	ldrh	r0, [r0, #0]
   16cac:	4669      	mov	r1, sp
   16cae:	f008 fca7 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   16cb2:	2800      	cmp	r0, #0
   16cb4:	d11a      	bne.n	16cec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
   16cb6:	f8dd 4004 	ldr.w	r4, [sp, #4]
   16cba:	2700      	movs	r7, #0
   16cbc:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
   16cc0:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
   16cc4:	f00b fa51 	bl	2216a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
   16cc8:	70a8      	strb	r0, [r5, #2]
   16cca:	7860      	ldrb	r0, [r4, #1]
   16ccc:	f00b fa4d 	bl	2216a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
   16cd0:	70e8      	strb	r0, [r5, #3]
   16cd2:	78a0      	ldrb	r0, [r4, #2]
   16cd4:	f88d 0008 	strb.w	r0, [sp, #8]
   16cd8:	9802      	ldr	r0, [sp, #8]
   16cda:	9002      	str	r0, [sp, #8]
   16cdc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16ce0:	3c6e      	subs	r4, #110	; 0x6e
   16ce2:	2800      	cmp	r0, #0
   16ce4:	d1ea      	bne.n	16cbc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
   16ce6:	8830      	ldrh	r0, [r6, #0]
   16ce8:	8028      	strh	r0, [r5, #0]
   16cea:	2000      	movs	r0, #0
   16cec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00016cf0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
   16cf0:	4903      	ldr	r1, [pc, #12]	; (16d00 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
   16cf2:	888a      	ldrh	r2, [r1, #4]
   16cf4:	8002      	strh	r2, [r0, #0]
   16cf6:	88c9      	ldrh	r1, [r1, #6]
   16cf8:	8041      	strh	r1, [r0, #2]
   16cfa:	2000      	movs	r0, #0
   16cfc:	4770      	bx	lr
   16cfe:	0000      	.short	0x0000
   16d00:	20001190 	.word	0x20001190

00016d04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
   16d04:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   16d06:	2400      	movs	r4, #0
   16d08:	a902      	add	r1, sp, #8
   16d0a:	f88d 4004 	strb.w	r4, [sp, #4]
   16d0e:	f88d 4008 	strb.w	r4, [sp, #8]
   16d12:	9100      	str	r1, [sp, #0]
   16d14:	7882      	ldrb	r2, [r0, #2]
   16d16:	7841      	ldrb	r1, [r0, #1]
   16d18:	7800      	ldrb	r0, [r0, #0]
   16d1a:	ab01      	add	r3, sp, #4
   16d1c:	f00b fd3f 	bl	2279e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66a>
   16d20:	2800      	cmp	r0, #0
   16d22:	d112      	bne.n	16d4a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
   16d24:	f89d 0004 	ldrb.w	r0, [sp, #4]
   16d28:	f00b fb12 	bl	22350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   16d2c:	b170      	cbz	r0, 16d4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
   16d2e:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16d32:	f00b fb0d 	bl	22350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   16d36:	b148      	cbz	r0, 16d4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
   16d38:	4805      	ldr	r0, [pc, #20]	; (16d50 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
   16d3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   16d3e:	7481      	strb	r1, [r0, #18]
   16d40:	f89d 1008 	ldrb.w	r1, [sp, #8]
   16d44:	74c1      	strb	r1, [r0, #19]
   16d46:	8284      	strh	r4, [r0, #20]
   16d48:	2000      	movs	r0, #0
   16d4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16d4c:	2011      	movs	r0, #17
   16d4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16d50:	2000111c 	.word	0x2000111c

00016d54 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I>:
   16d54:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   16d56:	4604      	mov	r4, r0
   16d58:	2000      	movs	r0, #0
   16d5a:	f000 fc81 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   16d5e:	7860      	ldrb	r0, [r4, #1]
   16d60:	b300      	cbz	r0, 16da4 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x50>
   16d62:	2500      	movs	r5, #0
   16d64:	e018      	b.n	16d98 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x44>
   16d66:	bf00      	nop
   16d68:	eb04 0685 	add.w	r6, r4, r5, lsl #2
   16d6c:	2102      	movs	r1, #2
   16d6e:	78b0      	ldrb	r0, [r6, #2]
   16d70:	f008 f9bf 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   16d74:	b120      	cbz	r0, 16d80 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x2c>
   16d76:	7821      	ldrb	r1, [r4, #0]
   16d78:	2901      	cmp	r1, #1
   16d7a:	d003      	beq.n	16d84 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x30>
   16d7c:	b131      	cbz	r1, 16d8c <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x38>
   16d7e:	e00f      	b.n	16da0 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4c>
   16d80:	2042      	movs	r0, #66	; 0x42
   16d82:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16d84:	1cb1      	adds	r1, r6, #2
   16d86:	f000 fac1 	bl	1730c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   16d8a:	e001      	b.n	16d90 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x3c>
   16d8c:	f00b fc4b 	bl	22626 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4f2>
   16d90:	2800      	cmp	r0, #0
   16d92:	d1f6      	bne.n	16d82 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x2e>
   16d94:	1c6d      	adds	r5, r5, #1
   16d96:	b2ed      	uxtb	r5, r5
   16d98:	7860      	ldrb	r0, [r4, #1]
   16d9a:	42a8      	cmp	r0, r5
   16d9c:	d8e4      	bhi.n	16d68 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x14>
   16d9e:	e014      	b.n	16dca <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x76>
   16da0:	2012      	movs	r0, #18
   16da2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16da4:	7820      	ldrb	r0, [r4, #0]
   16da6:	2800      	cmp	r0, #0
   16da8:	d1fa      	bne.n	16da0 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4c>
   16daa:	4909      	ldr	r1, [pc, #36]	; (16dd0 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x7c>)
   16dac:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
   16db0:	e9cd 0100 	strd	r0, r1, [sp]
   16db4:	e004      	b.n	16dc0 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x6c>
   16db6:	9800      	ldr	r0, [sp, #0]
   16db8:	f00b fc35 	bl	22626 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4f2>
   16dbc:	2800      	cmp	r0, #0
   16dbe:	d1f0      	bne.n	16da2 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x4e>
   16dc0:	4668      	mov	r0, sp
   16dc2:	f7f6 fb0f 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   16dc6:	2800      	cmp	r0, #0
   16dc8:	d0f5      	beq.n	16db6 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I+0x62>
   16dca:	2000      	movs	r0, #0
   16dcc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16dce:	0000      	.short	0x0000
   16dd0:	000175bc 	.word	0x000175bc

00016dd4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
   16dd4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   16dd6:	4604      	mov	r4, r0
   16dd8:	f008 fbfa 	bl	1f5d0 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
   16ddc:	b148      	cbz	r0, 16df2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
   16dde:	4620      	mov	r0, r4
   16de0:	f7f8 fc3e 	bl	f660 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
   16de4:	4c1d      	ldr	r4, [pc, #116]	; (16e5c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x88>)
   16de6:	25ff      	movs	r5, #255	; 0xff
   16de8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16dec:	e9cd 0100 	strd	r0, r1, [sp]
   16df0:	e004      	b.n	16dfc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
   16df2:	2012      	movs	r0, #18
   16df4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16df6:	9800      	ldr	r0, [sp, #0]
   16df8:	f880 532c 	strb.w	r5, [r0, #812]	; 0x32c
   16dfc:	4668      	mov	r0, sp
   16dfe:	f7f6 faf1 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   16e02:	2800      	cmp	r0, #0
   16e04:	d0f7      	beq.n	16df6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
   16e06:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   16e0a:	2601      	movs	r6, #1
   16e0c:	e9cd 0100 	strd	r0, r1, [sp]
   16e10:	e002      	b.n	16e18 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x44>
   16e12:	9800      	ldr	r0, [sp, #0]
   16e14:	f880 6083 	strb.w	r6, [r0, #131]	; 0x83
   16e18:	4668      	mov	r0, sp
   16e1a:	f7f6 fae3 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   16e1e:	2800      	cmp	r0, #0
   16e20:	d0f7      	beq.n	16e12 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x3e>
   16e22:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   16e26:	e9cd 0100 	strd	r0, r1, [sp]
   16e2a:	e002      	b.n	16e32 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x5e>
   16e2c:	9800      	ldr	r0, [sp, #0]
   16e2e:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
   16e32:	4668      	mov	r0, sp
   16e34:	f7f6 fad6 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   16e38:	2800      	cmp	r0, #0
   16e3a:	d0f7      	beq.n	16e2c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x58>
   16e3c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   16e40:	e9cd 0100 	strd	r0, r1, [sp]
   16e44:	e002      	b.n	16e4c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x78>
   16e46:	9800      	ldr	r0, [sp, #0]
   16e48:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
   16e4c:	4668      	mov	r0, sp
   16e4e:	f7f6 fac9 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   16e52:	2800      	cmp	r0, #0
   16e54:	d0f7      	beq.n	16e46 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x72>
   16e56:	2000      	movs	r0, #0
   16e58:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16e5a:	0000      	.short	0x0000
   16e5c:	000175bc 	.word	0x000175bc

00016e60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   16e60:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   16e64:	460e      	mov	r6, r1
   16e66:	4605      	mov	r5, r0
   16e68:	7807      	ldrb	r7, [r0, #0]
   16e6a:	f00b fa0b 	bl	22284 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x150>
   16e6e:	2800      	cmp	r0, #0
   16e70:	d10a      	bne.n	16e88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   16e72:	4628      	mov	r0, r5
   16e74:	f00b f9cc 	bl	22210 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xdc>
   16e78:	2800      	cmp	r0, #0
   16e7a:	d105      	bne.n	16e88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   16e7c:	2002      	movs	r0, #2
   16e7e:	f7f6 fa2d 	bl	d2dc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   16e82:	4287      	cmp	r7, r0
   16e84:	d302      	bcc.n	16e8c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   16e86:	2007      	movs	r0, #7
   16e88:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   16e8c:	2102      	movs	r1, #2
   16e8e:	4638      	mov	r0, r7
   16e90:	f008 f92f 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   16e94:	0004      	movs	r4, r0
   16e96:	d003      	beq.n	16ea0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x40>
   16e98:	f009 feae 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   16e9c:	bb68      	cbnz	r0, 16efa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
   16e9e:	e00b      	b.n	16eb8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x58>
   16ea0:	2102      	movs	r1, #2
   16ea2:	4638      	mov	r0, r7
   16ea4:	f008 f91b 	bl	1f0de <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   16ea8:	0004      	movs	r4, r0
   16eaa:	d011      	beq.n	16ed0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   16eac:	4825      	ldr	r0, [pc, #148]	; (16f44 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe4>)
   16eae:	f990 1000 	ldrsb.w	r1, [r0]
   16eb2:	4620      	mov	r0, r4
   16eb4:	f009 fb4d 	bl	20552 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   16eb8:	4638      	mov	r0, r7
   16eba:	f00b fb5a 	bl	22572 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43e>
   16ebe:	b1f0      	cbz	r0, 16efe <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
   16ec0:	3040      	adds	r0, #64	; 0x40
   16ec2:	f00b fd6a 	bl	2299a <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
   16ec6:	b1d0      	cbz	r0, 16efe <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
   16ec8:	7868      	ldrb	r0, [r5, #1]
   16eca:	07c1      	lsls	r1, r0, #31
   16ecc:	d10b      	bne.n	16ee6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
   16ece:	e004      	b.n	16eda <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   16ed0:	f241 31e8 	movw	r1, #5096	; 0x13e8
   16ed4:	2039      	movs	r0, #57	; 0x39
   16ed6:	f7f5 ffd7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   16eda:	0781      	lsls	r1, r0, #30
   16edc:	d403      	bmi.n	16ee6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
   16ede:	06c1      	lsls	r1, r0, #27
   16ee0:	d401      	bmi.n	16ee6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x86>
   16ee2:	0680      	lsls	r0, r0, #26
   16ee4:	d501      	bpl.n	16eea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8a>
   16ee6:	2012      	movs	r0, #18
   16ee8:	e7ce      	b.n	16e88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   16eea:	4620      	mov	r0, r4
   16eec:	f009 fc18 	bl	20720 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   16ef0:	f00b f93b 	bl	2216a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36>
   16ef4:	7da9      	ldrb	r1, [r5, #22]
   16ef6:	4288      	cmp	r0, r1
   16ef8:	d001      	beq.n	16efe <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9e>
   16efa:	200c      	movs	r0, #12
   16efc:	e7c4      	b.n	16e88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   16efe:	4620      	mov	r0, r4
   16f00:	f009 fbf5 	bl	206ee <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   16f04:	7030      	strb	r0, [r6, #0]
   16f06:	74e8      	strb	r0, [r5, #19]
   16f08:	4629      	mov	r1, r5
   16f0a:	4620      	mov	r0, r4
   16f0c:	f7f9 fda8 	bl	10a60 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   16f10:	4606      	mov	r6, r0
   16f12:	7e68      	ldrb	r0, [r5, #25]
   16f14:	b1a0      	cbz	r0, 16f40 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe0>
   16f16:	b99e      	cbnz	r6, 16f40 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xe0>
   16f18:	2200      	movs	r2, #0
   16f1a:	4668      	mov	r0, sp
   16f1c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   16f1e:	f008 f9ca 	bl	1f2b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   16f22:	2200      	movs	r2, #0
   16f24:	2101      	movs	r1, #1
   16f26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   16f28:	f008 fa42 	bl	1f3b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   16f2c:	2204      	movs	r2, #4
   16f2e:	4668      	mov	r0, sp
   16f30:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   16f32:	f008 f9c0 	bl	1f2b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   16f36:	2200      	movs	r2, #0
   16f38:	4611      	mov	r1, r2
   16f3a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   16f3c:	f008 fa38 	bl	1f3b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   16f40:	4630      	mov	r0, r6
   16f42:	e7a1      	b.n	16e88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   16f44:	200002e8 	.word	0x200002e8

00016f48 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
   16f48:	7801      	ldrb	r1, [r0, #0]
   16f4a:	b171      	cbz	r1, 16f6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16f4c:	7841      	ldrb	r1, [r0, #1]
   16f4e:	b161      	cbz	r1, 16f6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16f50:	8841      	ldrh	r1, [r0, #2]
   16f52:	291b      	cmp	r1, #27
   16f54:	d309      	bcc.n	16f6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16f56:	8881      	ldrh	r1, [r0, #4]
   16f58:	291b      	cmp	r1, #27
   16f5a:	d306      	bcc.n	16f6a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   16f5c:	4904      	ldr	r1, [pc, #16]	; (16f70 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
   16f5e:	6802      	ldr	r2, [r0, #0]
   16f60:	600a      	str	r2, [r1, #0]
   16f62:	8880      	ldrh	r0, [r0, #4]
   16f64:	8088      	strh	r0, [r1, #4]
   16f66:	2000      	movs	r0, #0
   16f68:	4770      	bx	lr
   16f6a:	2012      	movs	r0, #18
   16f6c:	4770      	bx	lr
   16f6e:	0000      	.short	0x0000
   16f70:	2000111c 	.word	0x2000111c

00016f74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
   16f74:	6800      	ldr	r0, [r0, #0]
   16f76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   16f7a:	d303      	bcc.n	16f84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x10>
   16f7c:	4902      	ldr	r1, [pc, #8]	; (16f88 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x14>)
   16f7e:	6088      	str	r0, [r1, #8]
   16f80:	2000      	movs	r0, #0
   16f82:	4770      	bx	lr
   16f84:	2012      	movs	r0, #18
   16f86:	4770      	bx	lr
   16f88:	2000111c 	.word	0x2000111c

00016f8c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>:
   16f8c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   16f8e:	4605      	mov	r5, r0
   16f90:	7800      	ldrb	r0, [r0, #0]
   16f92:	b198      	cbz	r0, 16fbc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
   16f94:	4668      	mov	r0, sp
   16f96:	f006 fc59 	bl	1d84c <mpsl_fem_pa_is_configured>
   16f9a:	f89d 0000 	ldrb.w	r0, [sp]
   16f9e:	b108      	cbz	r0, 16fa4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x18>
   16fa0:	2401      	movs	r4, #1
   16fa2:	e000      	b.n	16fa6 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x1a>
   16fa4:	2400      	movs	r4, #0
   16fa6:	a801      	add	r0, sp, #4
   16fa8:	f006 fc38 	bl	1d81c <mpsl_fem_lna_is_configured>
   16fac:	f89d 0004 	ldrb.w	r0, [sp, #4]
   16fb0:	b100      	cbz	r0, 16fb4 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x28>
   16fb2:	2001      	movs	r0, #1
   16fb4:	4304      	orrs	r4, r0
   16fb6:	d001      	beq.n	16fbc <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x30>
   16fb8:	200c      	movs	r0, #12
   16fba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16fbc:	4902      	ldr	r1, [pc, #8]	; (16fc8 <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ+0x3c>)
   16fbe:	7828      	ldrb	r0, [r5, #0]
   16fc0:	7208      	strb	r0, [r1, #8]
   16fc2:	2000      	movs	r0, #0
   16fc4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   16fc6:	0000      	.short	0x0000
   16fc8:	20001190 	.word	0x20001190

00016fcc <sym_AZDVN5NCVR7WZFBQMTBKDS4ZECELF7HJDO5FKMQ>:
   16fcc:	4901      	ldr	r1, [pc, #4]	; (16fd4 <sym_AZDVN5NCVR7WZFBQMTBKDS4ZECELF7HJDO5FKMQ+0x8>)
   16fce:	7708      	strb	r0, [r1, #28]
   16fd0:	2000      	movs	r0, #0
   16fd2:	4770      	bx	lr
   16fd4:	20001190 	.word	0x20001190

00016fd8 <sym_BLF47GKHG6ZQOW3KS7Z2FM5ECAJ3LF5DPZBMLNA>:
   16fd8:	4901      	ldr	r1, [pc, #4]	; (16fe0 <sym_BLF47GKHG6ZQOW3KS7Z2FM5ECAJ3LF5DPZBMLNA+0x8>)
   16fda:	7748      	strb	r0, [r1, #29]
   16fdc:	2000      	movs	r0, #0
   16fde:	4770      	bx	lr
   16fe0:	20001190 	.word	0x20001190

00016fe4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
   16fe4:	4a03      	ldr	r2, [pc, #12]	; (16ff4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
   16fe6:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
   16fea:	6001      	str	r1, [r0, #0]
   16fec:	6042      	str	r2, [r0, #4]
   16fee:	2000      	movs	r0, #0
   16ff0:	4770      	bx	lr
   16ff2:	0000      	.short	0x0000
   16ff4:	000175bc 	.word	0x000175bc

00016ff8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   16ff8:	b50e      	push	{r1, r2, r3, lr}
   16ffa:	8800      	ldrh	r0, [r0, #0]
   16ffc:	4669      	mov	r1, sp
   16ffe:	f008 faff 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   17002:	b998      	cbnz	r0, 1702c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   17004:	f89d 0000 	ldrb.w	r0, [sp]
   17008:	2800      	cmp	r0, #0
   1700a:	9801      	ldr	r0, [sp, #4]
   1700c:	d00b      	beq.n	17026 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   1700e:	f00b fa9a 	bl	22546 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x412>
   17012:	b158      	cbz	r0, 1702c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x34>
   17014:	9801      	ldr	r0, [sp, #4]
   17016:	4601      	mov	r1, r0
   17018:	f890 216a 	ldrb.w	r2, [r0, #362]	; 0x16a
   1701c:	30a8      	adds	r0, #168	; 0xa8
   1701e:	f501 71b5 	add.w	r1, r1, #362	; 0x16a
   17022:	b97a      	cbnz	r2, 17044 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x4c>
   17024:	e004      	b.n	17030 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x38>
   17026:	f00b fa78 	bl	2251a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e6>
   1702a:	e7f2      	b.n	17012 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x1a>
   1702c:	2002      	movs	r0, #2
   1702e:	bd0e      	pop	{r1, r2, r3, pc}
   17030:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   17034:	f88d 2008 	strb.w	r2, [sp, #8]
   17038:	9a02      	ldr	r2, [sp, #8]
   1703a:	9202      	str	r2, [sp, #8]
   1703c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17040:	2201      	movs	r2, #1
   17042:	b10b      	cbz	r3, 17048 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x50>
   17044:	203a      	movs	r0, #58	; 0x3a
   17046:	bd0e      	pop	{r1, r2, r3, pc}
   17048:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
   1704c:	079b      	lsls	r3, r3, #30
   1704e:	d006      	beq.n	1705e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x66>
   17050:	2203      	movs	r2, #3
   17052:	4905      	ldr	r1, [pc, #20]	; (17068 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x70>)
   17054:	3060      	adds	r0, #96	; 0x60
   17056:	f7f8 ff11 	bl	fe7c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   1705a:	2000      	movs	r0, #0
   1705c:	bd0e      	pop	{r1, r2, r3, pc}
   1705e:	700a      	strb	r2, [r1, #0]
   17060:	4668      	mov	r0, sp
   17062:	f008 ffca 	bl	1fffa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   17066:	e7f8      	b.n	1705a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x62>
   17068:	000203f9 	.word	0x000203f9

0001706c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
   1706c:	b510      	push	{r4, lr}
   1706e:	2005      	movs	r0, #5
   17070:	f000 fb66 	bl	17740 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   17074:	f7fd fa78 	bl	14568 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
   17078:	4902      	ldr	r1, [pc, #8]	; (17084 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
   1707a:	4801      	ldr	r0, [pc, #4]	; (17080 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
   1707c:	6048      	str	r0, [r1, #4]
   1707e:	bd10      	pop	{r4, pc}
   17080:	000170b5 	.word	0x000170b5
   17084:	200002e8 	.word	0x200002e8
   17088:	b51c      	push	{r2, r3, r4, lr}
   1708a:	4909      	ldr	r1, [pc, #36]	; (170b0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
   1708c:	e9d1 0100 	ldrd	r0, r1, [r1]
   17090:	e9cd 0100 	strd	r0, r1, [sp]
   17094:	e005      	b.n	170a2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
   17096:	9800      	ldr	r0, [sp, #0]
   17098:	f009 fdae 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1709c:	b108      	cbz	r0, 170a2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
   1709e:	2001      	movs	r0, #1
   170a0:	bd1c      	pop	{r2, r3, r4, pc}
   170a2:	4668      	mov	r0, sp
   170a4:	f7f6 f99e 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   170a8:	2800      	cmp	r0, #0
   170aa:	d0f4      	beq.n	17096 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
   170ac:	2000      	movs	r0, #0
   170ae:	bd1c      	pop	{r2, r3, r4, pc}
   170b0:	000175bc 	.word	0x000175bc
   170b4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   170b8:	4613      	mov	r3, r2
   170ba:	4a34      	ldr	r2, [pc, #208]	; (1718c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>)
   170bc:	460f      	mov	r7, r1
   170be:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
   170c2:	8815      	ldrh	r5, [r2, #0]
   170c4:	f8b0 4056 	ldrh.w	r4, [r0, #86]	; 0x56
   170c8:	428d      	cmp	r5, r1
   170ca:	d300      	bcc.n	170ce <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
   170cc:	460d      	mov	r5, r1
   170ce:	8891      	ldrh	r1, [r2, #4]
   170d0:	42a1      	cmp	r1, r4
   170d2:	d200      	bcs.n	170d6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6a>
   170d4:	460c      	mov	r4, r1
   170d6:	8851      	ldrh	r1, [r2, #2]
   170d8:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
   170dc:	4561      	cmp	r1, ip
   170de:	d300      	bcc.n	170e2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x76>
   170e0:	4661      	mov	r1, ip
   170e2:	88d6      	ldrh	r6, [r2, #6]
   170e4:	f640 0248 	movw	r2, #2120	; 0x848
   170e8:	4566      	cmp	r6, ip
   170ea:	d201      	bcs.n	170f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>
   170ec:	4296      	cmp	r6, r2
   170ee:	d300      	bcc.n	170f2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
   170f0:	4616      	mov	r6, r2
   170f2:	4291      	cmp	r1, r2
   170f4:	d300      	bcc.n	170f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x8c>
   170f6:	4611      	mov	r1, r2
   170f8:	4688      	mov	r8, r1
   170fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   170fe:	2c1b      	cmp	r4, #27
   17100:	d001      	beq.n	17106 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9a>
   17102:	4296      	cmp	r6, r2
   17104:	d103      	bne.n	1710e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xa2>
   17106:	2d1b      	cmp	r5, #27
   17108:	d03e      	beq.n	17188 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
   1710a:	4590      	cmp	r8, r2
   1710c:	d03c      	beq.n	17188 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
   1710e:	466a      	mov	r2, sp
   17110:	4619      	mov	r1, r3
   17112:	f00b f93f 	bl	22394 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x260>
   17116:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1711a:	42a8      	cmp	r0, r5
   1711c:	d800      	bhi.n	17120 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb4>
   1711e:	4605      	mov	r5, r0
   17120:	80fd      	strh	r5, [r7, #6]
   17122:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   17126:	4641      	mov	r1, r8
   17128:	4540      	cmp	r0, r8
   1712a:	d900      	bls.n	1712e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc2>
   1712c:	4608      	mov	r0, r1
   1712e:	8138      	strh	r0, [r7, #8]
   17130:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   17134:	42a1      	cmp	r1, r4
   17136:	d800      	bhi.n	1713a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xce>
   17138:	460c      	mov	r4, r1
   1713a:	807c      	strh	r4, [r7, #2]
   1713c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   17140:	42b1      	cmp	r1, r6
   17142:	d800      	bhi.n	17146 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xda>
   17144:	460e      	mov	r6, r1
   17146:	80be      	strh	r6, [r7, #4]
   17148:	21ff      	movs	r1, #255	; 0xff
   1714a:	7039      	strb	r1, [r7, #0]
   1714c:	3d1b      	subs	r5, #27
   1714e:	2de0      	cmp	r5, #224	; 0xe0
   17150:	d902      	bls.n	17158 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xec>
   17152:	f640 516e 	movw	r1, #3438	; 0xd6e
   17156:	e014      	b.n	17182 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
   17158:	3c1b      	subs	r4, #27
   1715a:	2ce0      	cmp	r4, #224	; 0xe0
   1715c:	d902      	bls.n	17164 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf8>
   1715e:	f44f 6157 	mov.w	r1, #3440	; 0xd70
   17162:	e00e      	b.n	17182 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
   17164:	f640 1148 	movw	r1, #2376	; 0x948
   17168:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1716c:	4288      	cmp	r0, r1
   1716e:	d902      	bls.n	17176 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x10a>
   17170:	f640 5172 	movw	r1, #3442	; 0xd72
   17174:	e005      	b.n	17182 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
   17176:	f5a6 76a4 	sub.w	r6, r6, #328	; 0x148
   1717a:	428e      	cmp	r6, r1
   1717c:	d904      	bls.n	17188 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>
   1717e:	f640 5174 	movw	r1, #3444	; 0xd74
   17182:	2039      	movs	r0, #57	; 0x39
   17184:	f7f5 fe80 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17188:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   1718c:	20001190 	.word	0x20001190
   17190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17194:	461d      	mov	r5, r3
   17196:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   1719a:	f1a1 0c06 	sub.w	ip, r1, #6
   1719e:	f640 437a 	movw	r3, #3194	; 0xc7a
   171a2:	9e08      	ldr	r6, [sp, #32]
   171a4:	459c      	cmp	ip, r3
   171a6:	d805      	bhi.n	171b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x148>
   171a8:	f1a2 0c06 	sub.w	ip, r2, #6
   171ac:	459c      	cmp	ip, r3
   171ae:	d801      	bhi.n	171b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x148>
   171b0:	2301      	movs	r3, #1
   171b2:	e000      	b.n	171b6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14a>
   171b4:	2300      	movs	r3, #0
   171b6:	b120      	cbz	r0, 171c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x156>
   171b8:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
   171bc:	b168      	cbz	r0, 171da <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x16e>
   171be:	b96b      	cbnz	r3, 171dc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>
   171c0:	e002      	b.n	171c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>
   171c2:	4815      	ldr	r0, [pc, #84]	; (17218 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1ac>)
   171c4:	7a00      	ldrb	r0, [r0, #8]
   171c6:	e7f9      	b.n	171bc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x150>
   171c8:	f6a1 5001 	subw	r0, r1, #3329	; 0xd01
   171cc:	2806      	cmp	r0, #6
   171ce:	d821      	bhi.n	17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   171d0:	f6a2 5001 	subw	r0, r2, #3329	; 0xd01
   171d4:	2806      	cmp	r0, #6
   171d6:	d901      	bls.n	171dc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x170>
   171d8:	e01c      	b.n	17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   171da:	b1db      	cbz	r3, 17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   171dc:	4291      	cmp	r1, r2
   171de:	d819      	bhi.n	17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   171e0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   171e4:	d216      	bcs.n	17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   171e6:	f1a4 000a 	sub.w	r0, r4, #10
   171ea:	f640 4176 	movw	r1, #3190	; 0xc76
   171ee:	4288      	cmp	r0, r1
   171f0:	d810      	bhi.n	17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   171f2:	4610      	mov	r0, r2
   171f4:	f008 fa1c 	bl	1f630 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   171f8:	1c6d      	adds	r5, r5, #1
   171fa:	4368      	muls	r0, r5
   171fc:	f240 2171 	movw	r1, #625	; 0x271
   17200:	0040      	lsls	r0, r0, #1
   17202:	434c      	muls	r4, r1
   17204:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   17208:	d204      	bcs.n	17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1720a:	42b7      	cmp	r7, r6
   1720c:	d802      	bhi.n	17214 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a8>
   1720e:	2001      	movs	r0, #1
   17210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17214:	2000      	movs	r0, #0
   17216:	e7fb      	b.n	17210 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1a4>
   17218:	20001190 	.word	0x20001190
   1721c:	b510      	push	{r4, lr}
   1721e:	4812      	ldr	r0, [pc, #72]	; (17268 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1fc>)
   17220:	2100      	movs	r1, #0
   17222:	4a12      	ldr	r2, [pc, #72]	; (1726c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x200>)
   17224:	75c1      	strb	r1, [r0, #23]
   17226:	8301      	strh	r1, [r0, #24]
   17228:	231b      	movs	r3, #27
   1722a:	8013      	strh	r3, [r2, #0]
   1722c:	f44f 74a4 	mov.w	r4, #328	; 0x148
   17230:	8054      	strh	r4, [r2, #2]
   17232:	8093      	strh	r3, [r2, #4]
   17234:	80d4      	strh	r4, [r2, #6]
   17236:	7481      	strb	r1, [r0, #18]
   17238:	74c1      	strb	r1, [r0, #19]
   1723a:	7251      	strb	r1, [r2, #9]
   1723c:	2403      	movs	r4, #3
   1723e:	7004      	strb	r4, [r0, #0]
   17240:	2402      	movs	r4, #2
   17242:	7044      	strb	r4, [r0, #1]
   17244:	8043      	strh	r3, [r0, #2]
   17246:	8083      	strh	r3, [r0, #4]
   17248:	f640 63a6 	movw	r3, #3750	; 0xea6
   1724c:	6083      	str	r3, [r0, #8]
   1724e:	005b      	lsls	r3, r3, #1
   17250:	60c3      	str	r3, [r0, #12]
   17252:	23f9      	movs	r3, #249	; 0xf9
   17254:	7713      	strb	r3, [r2, #28]
   17256:	7751      	strb	r1, [r2, #29]
   17258:	7211      	strb	r1, [r2, #8]
   1725a:	7691      	strb	r1, [r2, #26]
   1725c:	7581      	strb	r1, [r0, #22]
   1725e:	7401      	strb	r1, [r0, #16]
   17260:	4803      	ldr	r0, [pc, #12]	; (17270 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x204>)
   17262:	7001      	strb	r1, [r0, #0]
   17264:	bd10      	pop	{r4, pc}
   17266:	0000      	.short	0x0000
   17268:	2000111c 	.word	0x2000111c
   1726c:	20001190 	.word	0x20001190
   17270:	200002f0 	.word	0x200002f0
   17274:	b530      	push	{r4, r5, lr}
   17276:	b087      	sub	sp, #28
   17278:	4605      	mov	r5, r0
   1727a:	8808      	ldrh	r0, [r1, #0]
   1727c:	f8ad 0004 	strh.w	r0, [sp, #4]
   17280:	4813      	ldr	r0, [pc, #76]	; (172d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x264>)
   17282:	460c      	mov	r4, r1
   17284:	ab03      	add	r3, sp, #12
   17286:	7c81      	ldrb	r1, [r0, #18]
   17288:	f88d 1006 	strb.w	r1, [sp, #6]
   1728c:	7cc1      	ldrb	r1, [r0, #19]
   1728e:	f88d 1007 	strb.w	r1, [sp, #7]
   17292:	8a80      	ldrh	r0, [r0, #20]
   17294:	f8ad 0008 	strh.w	r0, [sp, #8]
   17298:	a804      	add	r0, sp, #16
   1729a:	9000      	str	r0, [sp, #0]
   1729c:	aa01      	add	r2, sp, #4
   1729e:	4621      	mov	r1, r4
   172a0:	4628      	mov	r0, r5
   172a2:	f00b f8b1 	bl	22408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d4>
   172a6:	0005      	movs	r5, r0
   172a8:	d110      	bne.n	172cc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x260>
   172aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
   172ae:	f88d 0014 	strb.w	r0, [sp, #20]
   172b2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   172b6:	f88d 0015 	strb.w	r0, [sp, #21]
   172ba:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   172be:	f8ad 0016 	strh.w	r0, [sp, #22]
   172c2:	a905      	add	r1, sp, #20
   172c4:	4620      	mov	r0, r4
   172c6:	f008 faaa 	bl	1f81e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   172ca:	4628      	mov	r0, r5
   172cc:	b007      	add	sp, #28
   172ce:	bd30      	pop	{r4, r5, pc}
   172d0:	2000111c 	.word	0x2000111c
   172d4:	b510      	push	{r4, lr}
   172d6:	2102      	movs	r1, #2
   172d8:	2000      	movs	r0, #0
   172da:	f007 ff0a 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   172de:	0004      	movs	r4, r0
   172e0:	d10a      	bne.n	172f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x28c>
   172e2:	2102      	movs	r1, #2
   172e4:	f007 fefb 	bl	1f0de <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   172e8:	0004      	movs	r4, r0
   172ea:	d007      	beq.n	172fc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x290>
   172ec:	4806      	ldr	r0, [pc, #24]	; (17308 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x29c>)
   172ee:	f990 1000 	ldrsb.w	r1, [r0]
   172f2:	4620      	mov	r0, r4
   172f4:	f009 f92d 	bl	20552 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   172f8:	4620      	mov	r0, r4
   172fa:	bd10      	pop	{r4, pc}
   172fc:	f44f 712c 	mov.w	r1, #688	; 0x2b0
   17300:	2039      	movs	r0, #57	; 0x39
   17302:	f7f5 fdc1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17306:	0000      	.short	0x0000
   17308:	200002e8 	.word	0x200002e8

0001730c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
   1730c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   17310:	460d      	mov	r5, r1
   17312:	4680      	mov	r8, r0
   17314:	4604      	mov	r4, r0
   17316:	f009 f9ed 	bl	206f4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1731a:	b198      	cbz	r0, 17344 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
   1731c:	4620      	mov	r0, r4
   1731e:	f009 f9da 	bl	206d6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   17322:	b130      	cbz	r0, 17332 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
   17324:	f8b5 1001 	ldrh.w	r1, [r5, #1]
   17328:	2012      	movs	r0, #18
   1732a:	2900      	cmp	r1, #0
   1732c:	d00b      	beq.n	17346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1732e:	2980      	cmp	r1, #128	; 0x80
   17330:	d809      	bhi.n	17346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   17332:	4620      	mov	r0, r4
   17334:	f009 f997 	bl	20666 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
   17338:	b140      	cbz	r0, 1734c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   1733a:	4640      	mov	r0, r8
   1733c:	f009 f8ca 	bl	204d4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
   17340:	b130      	cbz	r0, 17350 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
   17342:	e00a      	b.n	1735a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
   17344:	2042      	movs	r0, #66	; 0x42
   17346:	b004      	add	sp, #16
   17348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1734c:	200c      	movs	r0, #12
   1734e:	e7fa      	b.n	17346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   17350:	4640      	mov	r0, r8
   17352:	f009 f9b2 	bl	206ba <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
   17356:	2800      	cmp	r0, #0
   17358:	d07e      	beq.n	17458 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
   1735a:	4640      	mov	r0, r8
   1735c:	f009 fc4c 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   17360:	2800      	cmp	r0, #0
   17362:	d1f3      	bne.n	1734c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   17364:	4640      	mov	r0, r8
   17366:	f009 f8d2 	bl	2050e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   1736a:	2800      	cmp	r0, #0
   1736c:	d1ee      	bne.n	1734c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
   1736e:	4640      	mov	r0, r8
   17370:	f7f9 fa56 	bl	10820 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
   17374:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   17378:	f242 7110 	movw	r1, #10000	; 0x2710
   1737c:	fb00 f901 	mul.w	r9, r0, r1
   17380:	78e9      	ldrb	r1, [r5, #3]
   17382:	4640      	mov	r0, r8
   17384:	f009 f966 	bl	20654 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
   17388:	7828      	ldrb	r0, [r5, #0]
   1738a:	2103      	movs	r1, #3
   1738c:	f007 feb1 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   17390:	4604      	mov	r4, r0
   17392:	7828      	ldrb	r0, [r5, #0]
   17394:	2105      	movs	r1, #5
   17396:	f007 feac 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1739a:	4d64      	ldr	r5, [pc, #400]	; (1752c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x220>)
   1739c:	b11c      	cbz	r4, 173a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x9a>
   1739e:	b1a0      	cbz	r0, 173ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
   173a0:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
   173a4:	e0b5      	b.n	17512 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
   173a6:	b318      	cbz	r0, 173f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
   173a8:	f890 60bd 	ldrb.w	r6, [r0, #189]	; 0xbd
   173ac:	4604      	mov	r4, r0
   173ae:	4f60      	ldr	r7, [pc, #384]	; (17530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x224>)
   173b0:	6838      	ldr	r0, [r7, #0]
   173b2:	b1e8      	cbz	r0, 173f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
   173b4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   173b8:	4604      	mov	r4, r0
   173ba:	f00b faee 	bl	2299a <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
   173be:	b1b8      	cbz	r0, 173f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
   173c0:	4620      	mov	r0, r4
   173c2:	f00b fb0a 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   173c6:	b110      	cbz	r0, 173ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
   173c8:	e012      	b.n	173f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
   173ca:	2600      	movs	r6, #0
   173cc:	e7ef      	b.n	173ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xa2>
   173ce:	b13e      	cbz	r6, 173e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd4>
   173d0:	4958      	ldr	r1, [pc, #352]	; (17534 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x228>)
   173d2:	4620      	mov	r0, r4
   173d4:	6809      	ldr	r1, [r1, #0]
   173d6:	4788      	blx	r1
   173d8:	b150      	cbz	r0, 173f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
   173da:	f241 6114 	movw	r1, #5652	; 0x1614
   173de:	e098      	b.n	17512 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
   173e0:	683a      	ldr	r2, [r7, #0]
   173e2:	4620      	mov	r0, r4
   173e4:	68e9      	ldr	r1, [r5, #12]
   173e6:	4790      	blx	r2
   173e8:	b110      	cbz	r0, 173f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe4>
   173ea:	f241 6119 	movw	r1, #5657	; 0x1619
   173ee:	e090      	b.n	17512 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
   173f0:	4640      	mov	r0, r8
   173f2:	f009 f966 	bl	206c2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   173f6:	b148      	cbz	r0, 1740c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>
   173f8:	4640      	mov	r0, r8
   173fa:	f009 f96c 	bl	206d6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   173fe:	4e4e      	ldr	r6, [pc, #312]	; (17538 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22c>)
   17400:	b180      	cbz	r0, 17424 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x118>
   17402:	4640      	mov	r0, r8
   17404:	f009 f96b 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   17408:	b150      	cbz	r0, 17420 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x114>
   1740a:	e00b      	b.n	17424 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x118>
   1740c:	464a      	mov	r2, r9
   1740e:	2100      	movs	r1, #0
   17410:	4640      	mov	r0, r8
   17412:	f7fc f803 	bl	1341c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   17416:	2800      	cmp	r0, #0
   17418:	d095      	beq.n	17346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1741a:	f241 6122 	movw	r1, #5666	; 0x1622
   1741e:	e078      	b.n	17512 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
   17420:	7a30      	ldrb	r0, [r6, #8]
   17422:	b1c8      	cbz	r0, 17458 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14c>
   17424:	2101      	movs	r1, #1
   17426:	a801      	add	r0, sp, #4
   17428:	f7f5 fffe 	bl	d428 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
   1742c:	0004      	movs	r4, r0
   1742e:	d05a      	beq.n	174e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
   17430:	2100      	movs	r1, #0
   17432:	f7f7 ff43 	bl	f2bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   17436:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1743a:	8020      	strh	r0, [r4, #0]
   1743c:	4621      	mov	r1, r4
   1743e:	4640      	mov	r0, r8
   17440:	f009 f970 	bl	20724 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
   17444:	f000 f988 	bl	17758 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   17448:	0940      	lsrs	r0, r0, #5
   1744a:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   1744e:	07c0      	lsls	r0, r0, #31
   17450:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17454:	d006      	beq.n	17464 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
   17456:	e000      	b.n	1745a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
   17458:	e002      	b.n	17460 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x154>
   1745a:	886a      	ldrh	r2, [r5, #2]
   1745c:	88a9      	ldrh	r1, [r5, #4]
   1745e:	e003      	b.n	17468 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
   17460:	2012      	movs	r0, #18
   17462:	e770      	b.n	17346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   17464:	221b      	movs	r2, #27
   17466:	4611      	mov	r1, r2
   17468:	84c2      	strh	r2, [r0, #38]	; 0x26
   1746a:	8501      	strh	r1, [r0, #40]	; 0x28
   1746c:	f000 f974 	bl	17758 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   17470:	0788      	lsls	r0, r1, #30
   17472:	d506      	bpl.n	17482 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x176>
   17474:	2001      	movs	r0, #1
   17476:	f88d 0008 	strb.w	r0, [sp, #8]
   1747a:	a802      	add	r0, sp, #8
   1747c:	9403      	str	r4, [sp, #12]
   1747e:	f009 ff55 	bl	2132c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
   17482:	7a30      	ldrb	r0, [r6, #8]
   17484:	b100      	cbz	r0, 17488 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17c>
   17486:	2001      	movs	r0, #1
   17488:	492b      	ldr	r1, [pc, #172]	; (17538 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x22c>)
   1748a:	f884 0073 	strb.w	r0, [r4, #115]	; 0x73
   1748e:	220b      	movs	r2, #11
   17490:	310c      	adds	r1, #12
   17492:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   17496:	f00b fe28 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1749a:	7df0      	ldrb	r0, [r6, #23]
   1749c:	f884 0087 	strb.w	r0, [r4, #135]	; 0x87
   174a0:	69b0      	ldr	r0, [r6, #24]
   174a2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   174a6:	68a8      	ldr	r0, [r5, #8]
   174a8:	6320      	str	r0, [r4, #48]	; 0x30
   174aa:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
   174ae:	b110      	cbz	r0, 174b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1aa>
   174b0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   174b4:	e001      	b.n	174ba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
   174b6:	f641 564c 	movw	r6, #7500	; 0x1d4c
   174ba:	4640      	mov	r0, r8
   174bc:	f009 f90f 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   174c0:	b910      	cbnz	r0, 174c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>
   174c2:	4640      	mov	r0, r8
   174c4:	f009 f92c 	bl	20720 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   174c8:	4621      	mov	r1, r4
   174ca:	2001      	movs	r0, #1
   174cc:	6166      	str	r6, [r4, #20]
   174ce:	f7ff fed1 	bl	17274 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x208>
   174d2:	b150      	cbz	r0, 174ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
   174d4:	2101      	movs	r1, #1
   174d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   174da:	f7f6 f811 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   174de:	b110      	cbz	r0, 174e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1da>
   174e0:	f241 617c 	movw	r1, #5756	; 0x167c
   174e4:	e015      	b.n	17512 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
   174e6:	2009      	movs	r0, #9
   174e8:	e72d      	b.n	17346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   174ea:	7868      	ldrb	r0, [r5, #1]
   174ec:	9000      	str	r0, [sp, #0]
   174ee:	782b      	ldrb	r3, [r5, #0]
   174f0:	88aa      	ldrh	r2, [r5, #4]
   174f2:	8869      	ldrh	r1, [r5, #2]
   174f4:	8820      	ldrh	r0, [r4, #0]
   174f6:	f7f6 f8e7 	bl	d6c8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
   174fa:	b110      	cbz	r0, 17502 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
   174fc:	f241 6187 	movw	r1, #5767	; 0x1687
   17500:	e007      	b.n	17512 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x206>
   17502:	464a      	mov	r2, r9
   17504:	4621      	mov	r1, r4
   17506:	4640      	mov	r0, r8
   17508:	f7fb ff88 	bl	1341c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   1750c:	b120      	cbz	r0, 17518 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   1750e:	f241 6189 	movw	r1, #5769	; 0x1689
   17512:	2039      	movs	r0, #57	; 0x39
   17514:	f7f5 fcb8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17518:	4808      	ldr	r0, [pc, #32]	; (1753c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>)
   1751a:	6843      	ldr	r3, [r0, #4]
   1751c:	b123      	cbz	r3, 17528 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21c>
   1751e:	2200      	movs	r2, #0
   17520:	f504 71ad 	add.w	r1, r4, #346	; 0x15a
   17524:	4620      	mov	r0, r4
   17526:	4798      	blx	r3
   17528:	2000      	movs	r0, #0
   1752a:	e70c      	b.n	17346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   1752c:	2000111c 	.word	0x2000111c
   17530:	200002fc 	.word	0x200002fc
   17534:	200002f8 	.word	0x200002f8
   17538:	20001190 	.word	0x20001190
   1753c:	200002e8 	.word	0x200002e8
   17540:	b51c      	push	{r2, r3, r4, lr}
   17542:	f00b f865 	bl	22610 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4dc>
   17546:	b110      	cbz	r0, 1754e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x242>
   17548:	f7ff fa72 	bl	16a30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1754c:	b970      	cbnz	r0, 1756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x260>
   1754e:	490c      	ldr	r1, [pc, #48]	; (17580 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>)
   17550:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   17554:	e9cd 0100 	strd	r0, r1, [sp]
   17558:	e00a      	b.n	17570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
   1755a:	9c00      	ldr	r4, [sp, #0]
   1755c:	4620      	mov	r0, r4
   1755e:	f009 fb4b 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   17562:	b128      	cbz	r0, 17570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
   17564:	4620      	mov	r0, r4
   17566:	f009 f8ec 	bl	20742 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1756a:	b108      	cbz	r0, 17570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
   1756c:	2001      	movs	r0, #1
   1756e:	bd1c      	pop	{r2, r3, r4, pc}
   17570:	4668      	mov	r0, sp
   17572:	f7f5 ff37 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   17576:	2800      	cmp	r0, #0
   17578:	d0ef      	beq.n	1755a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
   1757a:	2000      	movs	r0, #0
   1757c:	bd1c      	pop	{r2, r3, r4, pc}
   1757e:	0000      	.short	0x0000
   17580:	000175bc 	.word	0x000175bc
   17584:	b510      	push	{r4, lr}
   17586:	4604      	mov	r4, r0
   17588:	88c1      	ldrh	r1, [r0, #6]
   1758a:	8880      	ldrh	r0, [r0, #4]
   1758c:	f00a fef4 	bl	22378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   17590:	2800      	cmp	r0, #0
   17592:	d10f      	bne.n	175b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
   17594:	8861      	ldrh	r1, [r4, #2]
   17596:	8820      	ldrh	r0, [r4, #0]
   17598:	f00a feee 	bl	22378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   1759c:	2800      	cmp	r0, #0
   1759e:	d109      	bne.n	175b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
   175a0:	4805      	ldr	r0, [pc, #20]	; (175b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ac>)
   175a2:	88a1      	ldrh	r1, [r4, #4]
   175a4:	8081      	strh	r1, [r0, #4]
   175a6:	8821      	ldrh	r1, [r4, #0]
   175a8:	8001      	strh	r1, [r0, #0]
   175aa:	88e1      	ldrh	r1, [r4, #6]
   175ac:	80c1      	strh	r1, [r0, #6]
   175ae:	8861      	ldrh	r1, [r4, #2]
   175b0:	8041      	strh	r1, [r0, #2]
   175b2:	2000      	movs	r0, #0
   175b4:	bd10      	pop	{r4, pc}
   175b6:	0000      	.short	0x0000
   175b8:	20001190 	.word	0x20001190
   175bc:	00000000 	.word	0x00000000
   175c0:	00020000 	.word	0x00020000
   175c4:	00000000 	.word	0x00000000
   175c8:	00020000 	.word	0x00020000
   175cc:	0c124b0c 	.word	0x0c124b0c
   175d0:	124b0059 	.word	0x124b0059
	...
   175e0:	00020000 	.word	0x00020000
   175e4:	00000000 	.word	0x00000000
   175e8:	00030000 	.word	0x00030000
   175ec:	00000000 	.word	0x00000000
   175f0:	00050000 	.word	0x00050000
   175f4:	00000000 	.word	0x00000000
   175f8:	00020000 	.word	0x00020000
   175fc:	00000000 	.word	0x00000000
   17600:	00020000 	.word	0x00020000
   17604:	00000000 	.word	0x00000000
   17608:	00040000 	.word	0x00040000
   1760c:	00fa01f4 	.word	0x00fa01f4
   17610:	00640096 	.word	0x00640096
   17614:	0032004b 	.word	0x0032004b
   17618:	0014001e 	.word	0x0014001e
   1761c:	0005000a 	.word	0x0005000a
   17620:	00010002 	.word	0x00010002

00017624 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
   17624:	b570      	push	{r4, r5, r6, lr}
   17626:	460d      	mov	r5, r1
   17628:	f7f8 fbb0 	bl	fd8c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
   1762c:	4c05      	ldr	r4, [pc, #20]	; (17644 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
   1762e:	6065      	str	r5, [r4, #4]
   17630:	68a0      	ldr	r0, [r4, #8]
   17632:	f00b f92a 	bl	2288a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x756>
   17636:	f00a fcc1 	bl	21fbc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
   1763a:	f7f8 fdfd 	bl	10238 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   1763e:	2001      	movs	r0, #1
   17640:	7020      	strb	r0, [r4, #0]
   17642:	bd70      	pop	{r4, r5, r6, pc}
   17644:	20000300 	.word	0x20000300

00017648 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
   17648:	4801      	ldr	r0, [pc, #4]	; (17650 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
   1764a:	7800      	ldrb	r0, [r0, #0]
   1764c:	4770      	bx	lr
   1764e:	0000      	.short	0x0000
   17650:	20000300 	.word	0x20000300

00017654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>:
   17654:	4801      	ldr	r0, [pc, #4]	; (1765c <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A+0x8>)
   17656:	7840      	ldrb	r0, [r0, #1]
   17658:	4770      	bx	lr
   1765a:	0000      	.short	0x0000
   1765c:	20000300 	.word	0x20000300

00017660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>:
   17660:	4901      	ldr	r1, [pc, #4]	; (17668 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q+0x8>)
   17662:	7048      	strb	r0, [r1, #1]
   17664:	4770      	bx	lr
   17666:	0000      	.short	0x0000
   17668:	20000300 	.word	0x20000300

0001766c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
   1766c:	b510      	push	{r4, lr}
   1766e:	4c06      	ldr	r4, [pc, #24]	; (17688 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
   17670:	68e0      	ldr	r0, [r4, #12]
   17672:	f00b f90a 	bl	2288a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x756>
   17676:	6920      	ldr	r0, [r4, #16]
   17678:	f00b f907 	bl	2288a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x756>
   1767c:	f00a fd4a 	bl	22114 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
   17680:	2000      	movs	r0, #0
   17682:	7020      	strb	r0, [r4, #0]
   17684:	bd10      	pop	{r4, pc}
   17686:	0000      	.short	0x0000
   17688:	20000300 	.word	0x20000300

0001768c <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ>:
   1768c:	b510      	push	{r4, lr}
   1768e:	4905      	ldr	r1, [pc, #20]	; (176a4 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x18>)
   17690:	4805      	ldr	r0, [pc, #20]	; (176a8 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x1c>)
   17692:	f00b f8ed 	bl	22870 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x73c>
   17696:	4804      	ldr	r0, [pc, #16]	; (176a8 <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x1c>)
   17698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1769c:	4903      	ldr	r1, [pc, #12]	; (176ac <sym_QPSGGC6LIDS7QWN3UK6QRANELMYXU35MAVBCJFQ+0x20>)
   1769e:	1d00      	adds	r0, r0, #4
   176a0:	f00b b8e6 	b.w	22870 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x73c>
   176a4:	20000314 	.word	0x20000314
   176a8:	20000308 	.word	0x20000308
   176ac:	2000031c 	.word	0x2000031c

000176b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
   176b0:	b510      	push	{r4, lr}
   176b2:	4908      	ldr	r1, [pc, #32]	; (176d4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
   176b4:	4808      	ldr	r0, [pc, #32]	; (176d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   176b6:	f00b f8db 	bl	22870 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x73c>
   176ba:	4807      	ldr	r0, [pc, #28]	; (176d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   176bc:	4907      	ldr	r1, [pc, #28]	; (176dc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
   176be:	1d00      	adds	r0, r0, #4
   176c0:	f00b f8d6 	bl	22870 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x73c>
   176c4:	4804      	ldr	r0, [pc, #16]	; (176d8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   176c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   176ca:	4905      	ldr	r1, [pc, #20]	; (176e0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
   176cc:	3008      	adds	r0, #8
   176ce:	f00b b8cf 	b.w	22870 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x73c>
   176d2:	0000      	.short	0x0000
   176d4:	2000032c 	.word	0x2000032c
   176d8:	20000308 	.word	0x20000308
   176dc:	20000334 	.word	0x20000334
   176e0:	20000324 	.word	0x20000324

000176e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
   176e4:	4801      	ldr	r0, [pc, #4]	; (176ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
   176e6:	7880      	ldrb	r0, [r0, #2]
   176e8:	4770      	bx	lr
   176ea:	0000      	.short	0x0000
   176ec:	20000300 	.word	0x20000300
   176f0:	b510      	push	{r4, lr}
   176f2:	f7fb ff81 	bl	135f8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
   176f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   176fa:	4801      	ldr	r0, [pc, #4]	; (17700 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x1c>)
   176fc:	f7f9 bb0e 	b.w	10d1c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
   17700:	200018c5 	.word	0x200018c5
   17704:	b510      	push	{r4, lr}
   17706:	f7f6 fb97 	bl	de38 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
   1770a:	4904      	ldr	r1, [pc, #16]	; (1771c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
   1770c:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
   17710:	f7f6 fc02 	bl	df18 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
   17714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17718:	f00b b8a1 	b.w	2285e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x72a>
   1771c:	200019c7 	.word	0x200019c7
   17720:	4906      	ldr	r1, [pc, #24]	; (1773c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x58>)
   17722:	b510      	push	{r4, lr}
   17724:	2001      	movs	r0, #1
   17726:	7088      	strb	r0, [r1, #2]
   17728:	f7f9 fb50 	bl	10dcc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
   1772c:	f7fc ff34 	bl	14598 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
   17730:	f7ff ffe8 	bl	17704 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>
   17734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17738:	f7f8 bb98 	b.w	fe6c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
   1773c:	20000300 	.word	0x20000300

00017740 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
   17740:	4a04      	ldr	r2, [pc, #16]	; (17754 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
   17742:	08c1      	lsrs	r1, r0, #3
   17744:	f000 0307 	and.w	r3, r0, #7
   17748:	2001      	movs	r0, #1
   1774a:	4098      	lsls	r0, r3
   1774c:	5c53      	ldrb	r3, [r2, r1]
   1774e:	4303      	orrs	r3, r0
   17750:	5453      	strb	r3, [r2, r1]
   17752:	4770      	bx	lr
   17754:	20000020 	.word	0x20000020

00017758 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
   17758:	4901      	ldr	r1, [pc, #4]	; (17760 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
   1775a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1775e:	4770      	bx	lr
   17760:	20000020 	.word	0x20000020

00017764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
   17764:	4909      	ldr	r1, [pc, #36]	; (1778c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x28>)
   17766:	8808      	ldrh	r0, [r1, #0]
   17768:	7909      	ldrb	r1, [r1, #4]
   1776a:	0ac2      	lsrs	r2, r0, #11
   1776c:	0a00      	lsrs	r0, r0, #8
   1776e:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
   17772:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   17776:	07d2      	lsls	r2, r2, #31
   17778:	f000 0001 	and.w	r0, r0, #1
   1777c:	1800      	adds	r0, r0, r0
   1777e:	ea40 7252 	orr.w	r2, r0, r2, lsr #29
   17782:	b2d0      	uxtb	r0, r2
   17784:	f040 0001 	orr.w	r0, r0, #1
   17788:	4770      	bx	lr
   1778a:	0000      	.short	0x0000
   1778c:	20000020 	.word	0x20000020

00017790 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
   17790:	b510      	push	{r4, lr}
   17792:	f005 fccb 	bl	1d12c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   17796:	2200      	movs	r2, #0
   17798:	4b08      	ldr	r3, [pc, #32]	; (177bc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
   1779a:	4611      	mov	r1, r2
   1779c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
   177a0:	4284      	cmp	r4, r0
   177a2:	d303      	bcc.n	177ac <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
   177a4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   177a8:	7882      	ldrb	r2, [r0, #2]
   177aa:	e003      	b.n	177b4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
   177ac:	1c49      	adds	r1, r1, #1
   177ae:	b2c9      	uxtb	r1, r1
   177b0:	290c      	cmp	r1, #12
   177b2:	d3f3      	bcc.n	1779c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
   177b4:	4802      	ldr	r0, [pc, #8]	; (177c0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
   177b6:	7002      	strb	r2, [r0, #0]
   177b8:	bd10      	pop	{r4, pc}
   177ba:	0000      	.short	0x0000
   177bc:	000228de 	.word	0x000228de
   177c0:	20000424 	.word	0x20000424

000177c4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
   177c4:	4802      	ldr	r0, [pc, #8]	; (177d0 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
   177c6:	7800      	ldrb	r0, [r0, #0]
   177c8:	f000 0007 	and.w	r0, r0, #7
   177cc:	4770      	bx	lr
   177ce:	0000      	.short	0x0000
   177d0:	20000424 	.word	0x20000424

000177d4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
   177d4:	b570      	push	{r4, r5, r6, lr}
   177d6:	4605      	mov	r5, r0
   177d8:	4616      	mov	r6, r2
   177da:	460c      	mov	r4, r1
   177dc:	2002      	movs	r0, #2
   177de:	f000 fa31 	bl	17c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   177e2:	4905      	ldr	r1, [pc, #20]	; (177f8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x24>)
   177e4:	2001      	movs	r0, #1
   177e6:	7008      	strb	r0, [r1, #0]
   177e8:	4904      	ldr	r1, [pc, #16]	; (177fc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
   177ea:	1ef0      	subs	r0, r6, #3
   177ec:	6008      	str	r0, [r1, #0]
   177ee:	4804      	ldr	r0, [pc, #16]	; (17800 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   177f0:	6005      	str	r5, [r0, #0]
   177f2:	1f00      	subs	r0, r0, #4
   177f4:	6004      	str	r4, [r0, #0]
   177f6:	bd70      	pop	{r4, r5, r6, pc}
   177f8:	20000425 	.word	0x20000425
   177fc:	4000f510 	.word	0x4000f510
   17800:	4000f508 	.word	0x4000f508

00017804 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
   17804:	4810      	ldr	r0, [pc, #64]	; (17848 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x44>)
   17806:	7801      	ldrb	r1, [r0, #0]
   17808:	b1a9      	cbz	r1, 17836 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x32>
   1780a:	4a10      	ldr	r2, [pc, #64]	; (1784c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x48>)
   1780c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   17810:	6011      	str	r1, [r2, #0]
   17812:	490f      	ldr	r1, [pc, #60]	; (17850 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x4c>)
   17814:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
   17818:	2200      	movs	r2, #0
   1781a:	2b00      	cmp	r3, #0
   1781c:	bf1c      	itt	ne
   1781e:	f8d1 3104 	ldrne.w	r3, [r1, #260]	; 0x104
   17822:	2b00      	cmpne	r3, #0
   17824:	d002      	beq.n	1782c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x28>
   17826:	f8d1 1108 	ldr.w	r1, [r1, #264]	; 0x108
   1782a:	b141      	cbz	r1, 1783e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3a>
   1782c:	7042      	strb	r2, [r0, #1]
   1782e:	f04f 0110 	mov.w	r1, #16
   17832:	7081      	strb	r1, [r0, #2]
   17834:	7002      	strb	r2, [r0, #0]
   17836:	f04f 0000 	mov.w	r0, #0
   1783a:	f000 ba03 	b.w	17c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   1783e:	2101      	movs	r1, #1
   17840:	7041      	strb	r1, [r0, #1]
   17842:	4904      	ldr	r1, [pc, #16]	; (17854 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x50>)
   17844:	6809      	ldr	r1, [r1, #0]
   17846:	e7f4      	b.n	17832 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2e>
   17848:	20000425 	.word	0x20000425
   1784c:	4001f508 	.word	0x4001f508
   17850:	4000f000 	.word	0x4000f000
   17854:	4000f400 	.word	0x4000f400

00017858 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
   17858:	b510      	push	{r4, lr}
   1785a:	2002      	movs	r0, #2
   1785c:	f000 f9f2 	bl	17c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17860:	4907      	ldr	r1, [pc, #28]	; (17880 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x28>)
   17862:	2001      	movs	r0, #1
   17864:	7008      	strb	r0, [r1, #0]
   17866:	4907      	ldr	r1, [pc, #28]	; (17884 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x2c>)
   17868:	2000      	movs	r0, #0
   1786a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   1786e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
   17872:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
   17876:	4904      	ldr	r1, [pc, #16]	; (17888 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x30>)
   17878:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1787c:	6008      	str	r0, [r1, #0]
   1787e:	bd10      	pop	{r4, pc}
   17880:	20000425 	.word	0x20000425
   17884:	4000f000 	.word	0x4000f000
   17888:	4001f504 	.word	0x4001f504

0001788c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
   1788c:	4803      	ldr	r0, [pc, #12]	; (1789c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
   1788e:	2100      	movs	r1, #0
   17890:	7001      	strb	r1, [r0, #0]
   17892:	7041      	strb	r1, [r0, #1]
   17894:	2110      	movs	r1, #16
   17896:	7081      	strb	r1, [r0, #2]
   17898:	4770      	bx	lr
   1789a:	0000      	.short	0x0000
   1789c:	20000425 	.word	0x20000425

000178a0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
   178a0:	480c      	ldr	r0, [pc, #48]	; (178d4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x34>)
   178a2:	7801      	ldrb	r1, [r0, #0]
   178a4:	2900      	cmp	r1, #0
   178a6:	bf04      	itt	eq
   178a8:	7880      	ldrbeq	r0, [r0, #2]
   178aa:	4770      	bxeq	lr
   178ac:	480a      	ldr	r0, [pc, #40]	; (178d8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x38>)
   178ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   178b2:	2900      	cmp	r1, #0
   178b4:	bf1c      	itt	ne
   178b6:	f8d0 1104 	ldrne.w	r1, [r0, #260]	; 0x104
   178ba:	2900      	cmpne	r1, #0
   178bc:	d002      	beq.n	178c4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>
   178be:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   178c2:	b110      	cbz	r0, 178ca <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x2a>
   178c4:	f04f 0010 	mov.w	r0, #16
   178c8:	4770      	bx	lr
   178ca:	4804      	ldr	r0, [pc, #16]	; (178dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x3c>)
   178cc:	6800      	ldr	r0, [r0, #0]
   178ce:	b2c0      	uxtb	r0, r0
   178d0:	4770      	bx	lr
   178d2:	0000      	.short	0x0000
   178d4:	20000425 	.word	0x20000425
   178d8:	4000f000 	.word	0x4000f000
   178dc:	4000f400 	.word	0x4000f400

000178e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   178e0:	4811      	ldr	r0, [pc, #68]	; (17928 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x48>)
   178e2:	b510      	push	{r4, lr}
   178e4:	7802      	ldrb	r2, [r0, #0]
   178e6:	4b11      	ldr	r3, [pc, #68]	; (1792c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4c>)
   178e8:	7840      	ldrb	r0, [r0, #1]
   178ea:	21c8      	movs	r1, #200	; 0xc8
   178ec:	1e49      	subs	r1, r1, #1
   178ee:	b2c9      	uxtb	r1, r1
   178f0:	b15a      	cbz	r2, 1790a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2a>
   178f2:	f8d3 c100 	ldr.w	ip, [r3, #256]	; 0x100
   178f6:	f1bc 0f00 	cmp.w	ip, #0
   178fa:	d00c      	beq.n	17916 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
   178fc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   17900:	b138      	cbz	r0, 17912 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
   17902:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   17906:	b160      	cbz	r0, 17922 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
   17908:	e003      	b.n	17912 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x32>
   1790a:	2802      	cmp	r0, #2
   1790c:	d003      	beq.n	17916 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x36>
   1790e:	2801      	cmp	r0, #1
   17910:	d007      	beq.n	17922 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x42>
   17912:	2000      	movs	r0, #0
   17914:	bd10      	pop	{r4, pc}
   17916:	2900      	cmp	r1, #0
   17918:	d1e8      	bne.n	178ec <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0xc>
   1791a:	21ca      	movs	r1, #202	; 0xca
   1791c:	203b      	movs	r0, #59	; 0x3b
   1791e:	f7f5 fab3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17922:	2001      	movs	r0, #1
   17924:	bd10      	pop	{r4, pc}
   17926:	0000      	.short	0x0000
   17928:	20000425 	.word	0x20000425
   1792c:	4000f000 	.word	0x4000f000

00017930 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
   17930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17934:	4604      	mov	r4, r0
   17936:	461e      	mov	r6, r3
   17938:	4691      	mov	r9, r2
   1793a:	468a      	mov	sl, r1
   1793c:	2001      	movs	r0, #1
   1793e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   17942:	f000 f97f 	bl	17c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   17946:	4d35      	ldr	r5, [pc, #212]	; (17a1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xec>)
   17948:	4835      	ldr	r0, [pc, #212]	; (17a20 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xf0>)
   1794a:	f004 0103 	and.w	r1, r4, #3
   1794e:	712e      	strb	r6, [r5, #4]
   17950:	6800      	ldr	r0, [r0, #0]
   17952:	0432      	lsls	r2, r6, #16
   17954:	f361 0007 	bfi	r0, r1, #0, #8
   17958:	f366 200f 	bfi	r0, r6, #8, #8
   1795c:	0c00      	lsrs	r0, r0, #16
   1795e:	4f31      	ldr	r7, [pc, #196]	; (17a24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xf4>)
   17960:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
   17964:	4308      	orrs	r0, r1
   17966:	f8c7 0504 	str.w	r0, [r7, #1284]	; 0x504
   1796a:	482f      	ldr	r0, [pc, #188]	; (17a28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xf8>)
   1796c:	f8c0 a000 	str.w	sl, [r0]
   17970:	f00b fb30 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   17974:	b930      	cbnz	r0, 17984 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x54>
   17976:	482d      	ldr	r0, [pc, #180]	; (17a2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xfc>)
   17978:	6801      	ldr	r1, [r0, #0]
   1797a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1797e:	ea41 0109 	orr.w	r1, r1, r9
   17982:	6001      	str	r1, [r0, #0]
   17984:	492b      	ldr	r1, [pc, #172]	; (17a34 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x104>)
   17986:	482a      	ldr	r0, [pc, #168]	; (17a30 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x100>)
   17988:	6008      	str	r0, [r1, #0]
   1798a:	482b      	ldr	r0, [pc, #172]	; (17a38 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x108>)
   1798c:	4e2b      	ldr	r6, [pc, #172]	; (17a3c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x10c>)
   1798e:	2c00      	cmp	r4, #0
   17990:	bf18      	it	ne
   17992:	2c04      	cmpne	r4, #4
   17994:	d104      	bne.n	179a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x70>
   17996:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
   1799a:	4829      	ldr	r0, [pc, #164]	; (17a40 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x110>)
   1799c:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
   179a0:	f1b8 0f01 	cmp.w	r8, #1
   179a4:	bf0c      	ite	eq
   179a6:	f04f 09a3 	moveq.w	r9, #163	; 0xa3
   179aa:	f04f 09e3 	movne.w	r9, #227	; 0xe3
   179ae:	f00b fadc 	bl	22f6a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   179b2:	b980      	cbnz	r0, 179d6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa6>
   179b4:	f00b fae3 	bl	22f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   179b8:	b968      	cbnz	r0, 179d6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa6>
   179ba:	f00b faf7 	bl	22fac <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   179be:	b950      	cbnz	r0, 179d6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa6>
   179c0:	f00b fb08 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   179c4:	b938      	cbnz	r0, 179d6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa6>
   179c6:	f00b fb3b 	bl	23040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   179ca:	2800      	cmp	r0, #0
   179cc:	bf04      	itt	eq
   179ce:	481d      	ldreq	r0, [pc, #116]	; (17a44 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x114>)
   179d0:	f8c0 9000 	streq.w	r9, [r0]
   179d4:	d007      	beq.n	179e6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb6>
   179d6:	f1b8 0f00 	cmp.w	r8, #0
   179da:	d004      	beq.n	179e6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xb6>
   179dc:	f240 1199 	movw	r1, #409	; 0x199
   179e0:	203c      	movs	r0, #60	; 0x3c
   179e2:	f7f5 fa51 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   179e6:	2c01      	cmp	r4, #1
   179e8:	d105      	bne.n	179f6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xc6>
   179ea:	4817      	ldr	r0, [pc, #92]	; (17a48 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x118>)
   179ec:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
   179f0:	4816      	ldr	r0, [pc, #88]	; (17a4c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x11c>)
   179f2:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
   179f6:	2001      	movs	r0, #1
   179f8:	7068      	strb	r0, [r5, #1]
   179fa:	70ec      	strb	r4, [r5, #3]
   179fc:	2c00      	cmp	r4, #0
   179fe:	bf1e      	ittt	ne
   17a00:	2c01      	cmpne	r4, #1
   17a02:	2c02      	cmpne	r4, #2
   17a04:	e8bd 87f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17a08:	7028      	strb	r0, [r5, #0]
   17a0a:	f04f 0100 	mov.w	r1, #0
   17a0e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
   17a12:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
   17a16:	6038      	str	r0, [r7, #0]
   17a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17a1c:	20000428 	.word	0x20000428
   17a20:	00017c0c 	.word	0x00017c0c
   17a24:	4000f000 	.word	0x4000f000
   17a28:	4000f508 	.word	0x4000f508
   17a2c:	4000f518 	.word	0x4000f518
   17a30:	02020000 	.word	0x02020000
   17a34:	4001f508 	.word	0x4001f508
   17a38:	4000f100 	.word	0x4000f100
   17a3c:	4001f088 	.word	0x4001f088
   17a40:	4000f004 	.word	0x4000f004
   17a44:	4000f520 	.word	0x4000f520
   17a48:	40001150 	.word	0x40001150
   17a4c:	4000f00c 	.word	0x4000f00c

00017a50 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
   17a50:	b570      	push	{r4, r5, r6, lr}
   17a52:	4a27      	ldr	r2, [pc, #156]	; (17af0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa0>)
   17a54:	7853      	ldrb	r3, [r2, #1]
   17a56:	b1d3      	cbz	r3, 17a8e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x3e>
   17a58:	4b26      	ldr	r3, [pc, #152]	; (17af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa4>)
   17a5a:	6019      	str	r1, [r3, #0]
   17a5c:	1d19      	adds	r1, r3, #4
   17a5e:	6008      	str	r0, [r1, #0]
   17a60:	2101      	movs	r1, #1
   17a62:	7091      	strb	r1, [r2, #2]
   17a64:	4610      	mov	r0, r2
   17a66:	78d5      	ldrb	r5, [r2, #3]
   17a68:	f890 c000 	ldrb.w	ip, [r0]
   17a6c:	4c22      	ldr	r4, [pc, #136]	; (17af8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xa8>)
   17a6e:	4823      	ldr	r0, [pc, #140]	; (17afc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xac>)
   17a70:	2300      	movs	r3, #0
   17a72:	b195      	cbz	r5, 17a9a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x4a>
   17a74:	2d04      	cmp	r5, #4
   17a76:	d027      	beq.n	17ac8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>
   17a78:	f1bc 0f00 	cmp.w	ip, #0
   17a7c:	d02b      	beq.n	17ad6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x86>
   17a7e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   17a82:	7910      	ldrb	r0, [r2, #4]
   17a84:	2802      	cmp	r0, #2
   17a86:	bf18      	it	ne
   17a88:	2803      	cmpne	r0, #3
   17a8a:	d028      	beq.n	17ade <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x8e>
   17a8c:	e02d      	b.n	17aea <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x9a>
   17a8e:	f240 11bd 	movw	r1, #445	; 0x1bd
   17a92:	f04f 003c 	mov.w	r0, #60	; 0x3c
   17a96:	f7f5 f9f7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17a9a:	f1bc 0f00 	cmp.w	ip, #0
   17a9e:	d00f      	beq.n	17ac0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x70>
   17aa0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   17aa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17aa8:	6022      	str	r2, [r4, #0]
   17aaa:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
   17aae:	2a00      	cmp	r2, #0
   17ab0:	bf08      	it	eq
   17ab2:	bd70      	popeq	{r4, r5, r6, pc}
   17ab4:	6041      	str	r1, [r0, #4]
   17ab6:	4912      	ldr	r1, [pc, #72]	; (17b00 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb0>)
   17ab8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17abc:	6008      	str	r0, [r1, #0]
   17abe:	bd70      	pop	{r4, r5, r6, pc}
   17ac0:	21b3      	movs	r1, #179	; 0xb3
   17ac2:	203c      	movs	r0, #60	; 0x3c
   17ac4:	f7f5 f9e0 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17ac8:	7011      	strb	r1, [r2, #0]
   17aca:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   17ace:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   17ad2:	6001      	str	r1, [r0, #0]
   17ad4:	bd70      	pop	{r4, r5, r6, pc}
   17ad6:	21c6      	movs	r1, #198	; 0xc6
   17ad8:	203c      	movs	r0, #60	; 0x3c
   17ada:	f7f5 f9d5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17ade:	4809      	ldr	r0, [pc, #36]	; (17b04 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb4>)
   17ae0:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
   17ae4:	4808      	ldr	r0, [pc, #32]	; (17b08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xb8>)
   17ae6:	2103      	movs	r1, #3
   17ae8:	6001      	str	r1, [r0, #0]
   17aea:	4808      	ldr	r0, [pc, #32]	; (17b0c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0xbc>)
   17aec:	6020      	str	r0, [r4, #0]
   17aee:	bd70      	pop	{r4, r5, r6, pc}
   17af0:	20000428 	.word	0x20000428
   17af4:	4000f50c 	.word	0x4000f50c
   17af8:	4001f504 	.word	0x4001f504
   17afc:	4000f000 	.word	0x4000f000
   17b00:	4001f508 	.word	0x4001f508
   17b04:	40001000 	.word	0x40001000
   17b08:	4000f51c 	.word	0x4000f51c
   17b0c:	02020000 	.word	0x02020000

00017b10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
   17b10:	4905      	ldr	r1, [pc, #20]	; (17b28 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
   17b12:	2000      	movs	r0, #0
   17b14:	780a      	ldrb	r2, [r1, #0]
   17b16:	b11a      	cbz	r2, 17b20 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
   17b18:	4b05      	ldr	r3, [pc, #20]	; (17b30 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>)
   17b1a:	4a04      	ldr	r2, [pc, #16]	; (17b2c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1c>)
   17b1c:	601a      	str	r2, [r3, #0]
   17b1e:	7008      	strb	r0, [r1, #0]
   17b20:	7048      	strb	r0, [r1, #1]
   17b22:	7088      	strb	r0, [r1, #2]
   17b24:	4770      	bx	lr
   17b26:	0000      	.short	0x0000
   17b28:	20000428 	.word	0x20000428
   17b2c:	02020000 	.word	0x02020000
   17b30:	4001f508 	.word	0x4001f508

00017b34 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
   17b34:	4802      	ldr	r0, [pc, #8]	; (17b40 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
   17b36:	2100      	movs	r1, #0
   17b38:	7001      	strb	r1, [r0, #0]
   17b3a:	7041      	strb	r1, [r0, #1]
   17b3c:	7081      	strb	r1, [r0, #2]
   17b3e:	4770      	bx	lr
   17b40:	20000428 	.word	0x20000428

00017b44 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
   17b44:	480b      	ldr	r0, [pc, #44]	; (17b74 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
   17b46:	b510      	push	{r4, lr}
   17b48:	7800      	ldrb	r0, [r0, #0]
   17b4a:	b148      	cbz	r0, 17b60 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>
   17b4c:	480a      	ldr	r0, [pc, #40]	; (17b78 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
   17b4e:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
   17b52:	b150      	cbz	r0, 17b6a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
   17b54:	4809      	ldr	r0, [pc, #36]	; (17b7c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
   17b56:	6800      	ldr	r0, [r0, #0]
   17b58:	2800      	cmp	r0, #0
   17b5a:	bf18      	it	ne
   17b5c:	2001      	movne	r0, #1
   17b5e:	bd10      	pop	{r4, pc}
   17b60:	f240 2123 	movw	r1, #547	; 0x223
   17b64:	203c      	movs	r0, #60	; 0x3c
   17b66:	f7f5 f98f 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17b6a:	f44f 7109 	mov.w	r1, #548	; 0x224
   17b6e:	203c      	movs	r0, #60	; 0x3c
   17b70:	f7f5 f98a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17b74:	20000428 	.word	0x20000428
   17b78:	4000f000 	.word	0x4000f000
   17b7c:	4000f400 	.word	0x4000f400

00017b80 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
   17b80:	4901      	ldr	r1, [pc, #4]	; (17b88 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
   17b82:	2001      	movs	r0, #1
   17b84:	6088      	str	r0, [r1, #8]
   17b86:	4770      	bx	lr
   17b88:	4000f000 	.word	0x4000f000

00017b8c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
   17b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b90:	481b      	ldr	r0, [pc, #108]	; (17c00 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
   17b92:	7800      	ldrb	r0, [r0, #0]
   17b94:	b1d8      	cbz	r0, 17bce <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
   17b96:	4c1b      	ldr	r4, [pc, #108]	; (17c04 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>)
   17b98:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   17b9c:	2800      	cmp	r0, #0
   17b9e:	bf18      	it	ne
   17ba0:	e8bd 81f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ba4:	2002      	movs	r0, #2
   17ba6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   17baa:	4f17      	ldr	r7, [pc, #92]	; (17c08 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
   17bac:	6838      	ldr	r0, [r7, #0]
   17bae:	f3c0 1800 	ubfx	r8, r0, #4, #1
   17bb2:	6838      	ldr	r0, [r7, #0]
   17bb4:	f040 0010 	orr.w	r0, r0, #16
   17bb8:	6038      	str	r0, [r7, #0]
   17bba:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   17bbe:	2800      	cmp	r0, #0
   17bc0:	bf04      	itt	eq
   17bc2:	f44f 4500 	moveq.w	r5, #32768	; 0x8000
   17bc6:	f04f 26e0 	moveq.w	r6, #3758153728	; 0xe000e000
   17bca:	d10d      	bne.n	17be8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5c>
   17bcc:	e004      	b.n	17bd8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
   17bce:	f240 212f 	movw	r1, #559	; 0x22f
   17bd2:	203c      	movs	r0, #60	; 0x3c
   17bd4:	f7f5 f958 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17bd8:	f8c6 5280 	str.w	r5, [r6, #640]	; 0x280
   17bdc:	f00b fa3a 	bl	23054 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   17be0:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   17be4:	2800      	cmp	r0, #0
   17be6:	d0f7      	beq.n	17bd8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
   17be8:	f1b8 0f00 	cmp.w	r8, #0
   17bec:	d103      	bne.n	17bf6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
   17bee:	6838      	ldr	r0, [r7, #0]
   17bf0:	f020 0010 	bic.w	r0, r0, #16
   17bf4:	6038      	str	r0, [r7, #0]
   17bf6:	2002      	movs	r0, #2
   17bf8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   17bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c00:	20000428 	.word	0x20000428
   17c04:	4000f000 	.word	0x4000f000
   17c08:	e000ed10 	.word	0xe000ed10
   17c0c:	00010000 	.word	0x00010000

00017c10 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   17c10:	b510      	push	{r4, lr}
   17c12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   17c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17c1a:	2000      	movs	r0, #0
   17c1c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   17c20:	f3bf 8f4f 	dsb	sy
   17c24:	f3bf 8f6f 	isb	sy
   17c28:	4904      	ldr	r1, [pc, #16]	; (17c3c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x2c>)
   17c2a:	6008      	str	r0, [r1, #0]
   17c2c:	6008      	str	r0, [r1, #0]
   17c2e:	f7ff ff6f 	bl	17b10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   17c32:	4903      	ldr	r1, [pc, #12]	; (17c40 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>)
   17c34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17c38:	6008      	str	r0, [r1, #0]
   17c3a:	bd10      	pop	{r4, pc}
   17c3c:	4000f500 	.word	0x4000f500
   17c40:	4001f508 	.word	0x4001f508

00017c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
   17c44:	b570      	push	{r4, r5, r6, lr}
   17c46:	4c11      	ldr	r4, [pc, #68]	; (17c8c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
   17c48:	4605      	mov	r5, r0
   17c4a:	2000      	movs	r0, #0
   17c4c:	6020      	str	r0, [r4, #0]
   17c4e:	6020      	str	r0, [r4, #0]
   17c50:	f7ff ff5e 	bl	17b10 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   17c54:	490e      	ldr	r1, [pc, #56]	; (17c90 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>)
   17c56:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17c5a:	6008      	str	r0, [r1, #0]
   17c5c:	2d00      	cmp	r5, #0
   17c5e:	bf08      	it	eq
   17c60:	bd70      	popeq	{r4, r5, r6, pc}
   17c62:	480c      	ldr	r0, [pc, #48]	; (17c94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x50>)
   17c64:	490c      	ldr	r1, [pc, #48]	; (17c98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x54>)
   17c66:	2d01      	cmp	r5, #1
   17c68:	bf04      	itt	eq
   17c6a:	2202      	moveq	r2, #2
   17c6c:	6022      	streq	r2, [r4, #0]
   17c6e:	d00b      	beq.n	17c88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>
   17c70:	2d02      	cmp	r5, #2
   17c72:	d003      	beq.n	17c7c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x38>
   17c74:	2182      	movs	r1, #130	; 0x82
   17c76:	203d      	movs	r0, #61	; 0x3d
   17c78:	f7f5 f906 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17c7c:	2203      	movs	r2, #3
   17c7e:	6022      	str	r2, [r4, #0]
   17c80:	6008      	str	r0, [r1, #0]
   17c82:	4906      	ldr	r1, [pc, #24]	; (17c9c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x58>)
   17c84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17c88:	6008      	str	r0, [r1, #0]
   17c8a:	bd70      	pop	{r4, r5, r6, pc}
   17c8c:	4000f500 	.word	0x4000f500
   17c90:	4001f508 	.word	0x4001f508
   17c94:	20001ac9 	.word	0x20001ac9
   17c98:	4000f514 	.word	0x4000f514
   17c9c:	4001f504 	.word	0x4001f504

00017ca0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
   17ca0:	4805      	ldr	r0, [pc, #20]	; (17cb8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
   17ca2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   17ca6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   17caa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   17cae:	2100      	movs	r1, #0
   17cb0:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
   17cb4:	4770      	bx	lr
   17cb6:	0000      	.short	0x0000
   17cb8:	40001000 	.word	0x40001000

00017cbc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
   17cbc:	4904      	ldr	r1, [pc, #16]	; (17cd0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
   17cbe:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
   17cc2:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   17cc6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17cca:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   17cce:	4770      	bx	lr
   17cd0:	40001000 	.word	0x40001000

00017cd4 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA>:
   17cd4:	00c2      	lsls	r2, r0, #3
   17cd6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17cda:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
   17cde:	4b07      	ldr	r3, [pc, #28]	; (17cfc <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x28>)
   17ce0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   17ce4:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   17ce8:	2101      	movs	r1, #1
   17cea:	fa01 f000 	lsl.w	r0, r1, r0
   17cee:	4904      	ldr	r1, [pc, #16]	; (17d00 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x2c>)
   17cf0:	6008      	str	r0, [r1, #0]
   17cf2:	4904      	ldr	r1, [pc, #16]	; (17d04 <sym_JSHLXOVZJZP3KPTLSJTCXHNIGRQ2VOB7UW7IQAA+0x30>)
   17cf4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   17cf6:	4310      	orrs	r0, r2
   17cf8:	6308      	str	r0, [r1, #48]	; 0x30
   17cfa:	4770      	bx	lr
   17cfc:	40001104 	.word	0x40001104
   17d00:	4001f504 	.word	0x4001f504
   17d04:	200011c0 	.word	0x200011c0

00017d08 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
   17d08:	4801      	ldr	r0, [pc, #4]	; (17d10 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
   17d0a:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
   17d0e:	4770      	bx	lr
   17d10:	200011c0 	.word	0x200011c0

00017d14 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
   17d14:	4902      	ldr	r1, [pc, #8]	; (17d20 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
   17d16:	5c08      	ldrb	r0, [r1, r0]
   17d18:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   17d1c:	4770      	bx	lr
   17d1e:	0000      	.short	0x0000
   17d20:	00019500 	.word	0x00019500

00017d24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
   17d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d28:	f005 fcb8 	bl	1d69c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>
   17d2c:	f005 fd2c 	bl	1d788 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>
   17d30:	4c4d      	ldr	r4, [pc, #308]	; (17e68 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x144>)
   17d32:	4680      	mov	r8, r0
   17d34:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   17d38:	f010 0f10 	tst.w	r0, #16
   17d3c:	bf14      	ite	ne
   17d3e:	f04f 0901 	movne.w	r9, #1
   17d42:	f04f 0900 	moveq.w	r9, #0
   17d46:	2010      	movs	r0, #16
   17d48:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   17d4c:	2002      	movs	r0, #2
   17d4e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   17d52:	4d46      	ldr	r5, [pc, #280]	; (17e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x148>)
   17d54:	f8df a118 	ldr.w	sl, [pc, #280]	; 17e70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14c>
   17d58:	2600      	movs	r6, #0
   17d5a:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
   17d5e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
   17d62:	f8ca 0000 	str.w	r0, [sl]
   17d66:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   17d6a:	f04f 0701 	mov.w	r7, #1
   17d6e:	f010 0fff 	tst.w	r0, #255	; 0xff
   17d72:	d016      	beq.n	17da2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7e>
   17d74:	20ff      	movs	r0, #255	; 0xff
   17d76:	f88d 0000 	strb.w	r0, [sp]
   17d7a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   17d7e:	6127      	str	r7, [r4, #16]
   17d80:	e005      	b.n	17d8e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6a>
   17d82:	bf00      	nop
   17d84:	f89d 0000 	ldrb.w	r0, [sp]
   17d88:	1e40      	subs	r0, r0, #1
   17d8a:	f88d 0000 	strb.w	r0, [sp]
   17d8e:	f89d 1000 	ldrb.w	r1, [sp]
   17d92:	b119      	cbz	r1, 17d9c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x78>
   17d94:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   17d98:	2800      	cmp	r0, #0
   17d9a:	d0f3      	beq.n	17d84 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x60>
   17d9c:	f89d 0000 	ldrb.w	r0, [sp]
   17da0:	b140      	cbz	r0, 17db4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>
   17da2:	8ba8      	ldrh	r0, [r5, #28]
   17da4:	2896      	cmp	r0, #150	; 0x96
   17da6:	d324      	bcc.n	17df2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   17da8:	7a68      	ldrb	r0, [r5, #9]
   17daa:	2801      	cmp	r0, #1
   17dac:	d007      	beq.n	17dbe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9a>
   17dae:	2802      	cmp	r0, #2
   17db0:	d012      	beq.n	17dd8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xb4>
   17db2:	e01e      	b.n	17df2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   17db4:	f640 01aa 	movw	r1, #2218	; 0x8aa
   17db8:	203e      	movs	r0, #62	; 0x3e
   17dba:	f7f5 f865 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17dbe:	f005 fd33 	bl	1d828 <mpsl_fem_pa_configuration_clear>
   17dc2:	2800      	cmp	r0, #0
   17dc4:	bf18      	it	ne
   17dc6:	f1b0 3fff 	cmpne.w	r0, #4294967295
   17dca:	d012      	beq.n	17df2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   17dcc:	f640 01bb 	movw	r1, #2235	; 0x8bb
   17dd0:	f04f 003e 	mov.w	r0, #62	; 0x3e
   17dd4:	f7f5 f858 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17dd8:	f005 fd14 	bl	1d804 <mpsl_fem_lna_configuration_clear>
   17ddc:	2800      	cmp	r0, #0
   17dde:	bf18      	it	ne
   17de0:	f1b0 3fff 	cmpne.w	r0, #4294967295
   17de4:	d005      	beq.n	17df2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0xce>
   17de6:	f640 01c1 	movw	r1, #2241	; 0x8c1
   17dea:	f04f 003e 	mov.w	r0, #62	; 0x3e
   17dee:	f7f5 f84b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17df2:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
   17df6:	2000      	movs	r0, #0
   17df8:	f001 fa4c 	bl	19294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   17dfc:	71ee      	strb	r6, [r5, #7]
   17dfe:	722e      	strb	r6, [r5, #8]
   17e00:	726e      	strb	r6, [r5, #9]
   17e02:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
   17e06:	b1e0      	cbz	r0, 17e42 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x11e>
   17e08:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   17e0c:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
   17e10:	f040 0002 	orr.w	r0, r0, #2
   17e14:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   17e18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   17e1c:	f8ca 0000 	str.w	r0, [sl]
   17e20:	4914      	ldr	r1, [pc, #80]	; (17e74 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x150>)
   17e22:	2000      	movs	r0, #0
   17e24:	680a      	ldr	r2, [r1, #0]
   17e26:	f360 4213 	bfi	r2, r0, #16, #4
   17e2a:	600a      	str	r2, [r1, #0]
   17e2c:	6968      	ldr	r0, [r5, #20]
   17e2e:	4912      	ldr	r1, [pc, #72]	; (17e78 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x154>)
   17e30:	f020 0003 	bic.w	r0, r0, #3
   17e34:	6168      	str	r0, [r5, #20]
   17e36:	6008      	str	r0, [r1, #0]
   17e38:	4911      	ldr	r1, [pc, #68]	; (17e80 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x15c>)
   17e3a:	4810      	ldr	r0, [pc, #64]	; (17e7c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x158>)
   17e3c:	6008      	str	r0, [r1, #0]
   17e3e:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
   17e42:	f1b9 0f00 	cmp.w	r9, #0
   17e46:	bf1c      	itt	ne
   17e48:	2010      	movne	r0, #16
   17e4a:	f8c4 0304 	strne.w	r0, [r4, #772]	; 0x304
   17e4e:	f1b8 0f00 	cmp.w	r8, #0
   17e52:	bf18      	it	ne
   17e54:	6127      	strne	r7, [r4, #16]
   17e56:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
   17e5a:	2800      	cmp	r0, #0
   17e5c:	bf1c      	itt	ne
   17e5e:	6127      	strne	r7, [r4, #16]
   17e60:	f885 6045 	strbne.w	r6, [r5, #69]	; 0x45
   17e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e68:	40001000 	.word	0x40001000
   17e6c:	200011c0 	.word	0x200011c0
   17e70:	4001f508 	.word	0x4001f508
   17e74:	40001514 	.word	0x40001514
   17e78:	40001900 	.word	0x40001900
   17e7c:	00023280 	.word	0x00023280
   17e80:	40001910 	.word	0x40001910

00017e84 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
   17e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17e88:	4c54      	ldr	r4, [pc, #336]	; (17fdc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x158>)
   17e8a:	4605      	mov	r5, r0
   17e8c:	b087      	sub	sp, #28
   17e8e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   17e92:	4689      	mov	r9, r1
   17e94:	f010 0f01 	tst.w	r0, #1
   17e98:	d013      	beq.n	17ec2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3e>
   17e9a:	2d00      	cmp	r5, #0
   17e9c:	bf0c      	ite	eq
   17e9e:	2004      	moveq	r0, #4
   17ea0:	2002      	movne	r0, #2
   17ea2:	f88d 0014 	strb.w	r0, [sp, #20]
   17ea6:	2000      	movs	r0, #0
   17ea8:	f88d 0015 	strb.w	r0, [sp, #21]
   17eac:	f88d 0016 	strb.w	r0, [sp, #22]
   17eb0:	a805      	add	r0, sp, #20
   17eb2:	f005 fbc3 	bl	1d63c <mpsl_cx_request>
   17eb6:	b148      	cbz	r0, 17ecc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x48>
   17eb8:	f640 21d2 	movw	r1, #2770	; 0xad2
   17ebc:	203e      	movs	r0, #62	; 0x3e
   17ebe:	f7f4 ffe3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17ec2:	f240 7185 	movw	r1, #1925	; 0x785
   17ec6:	203e      	movs	r0, #62	; 0x3e
   17ec8:	f7f4 ffde 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17ecc:	4e44      	ldr	r6, [pc, #272]	; (17fe0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x15c>)
   17ece:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   17ed2:	f040 0001 	orr.w	r0, r0, #1
   17ed6:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   17eda:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   17ede:	f04f 0802 	mov.w	r8, #2
   17ee2:	f040 0002 	orr.w	r0, r0, #2
   17ee6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   17eea:	2701      	movs	r7, #1
   17eec:	b115      	cbz	r5, 17ef4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>
   17eee:	2d01      	cmp	r5, #1
   17ef0:	d006      	beq.n	17f00 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x7c>
   17ef2:	e00b      	b.n	17f0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>
   17ef4:	4648      	mov	r0, r9
   17ef6:	f001 fa8b 	bl	19410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
   17efa:	7267      	strb	r7, [r4, #9]
   17efc:	6037      	str	r7, [r6, #0]
   17efe:	e005      	b.n	17f0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>
   17f00:	4648      	mov	r0, r9
   17f02:	f001 fa01 	bl	19308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
   17f06:	f884 8009 	strb.w	r8, [r4, #9]
   17f0a:	6077      	str	r7, [r6, #4]
   17f0c:	4835      	ldr	r0, [pc, #212]	; (17fe4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x160>)
   17f0e:	64c7      	str	r7, [r0, #76]	; 0x4c
   17f10:	4835      	ldr	r0, [pc, #212]	; (17fe8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x164>)
   17f12:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   17f16:	8ba1      	ldrh	r1, [r4, #28]
   17f18:	2996      	cmp	r1, #150	; 0x96
   17f1a:	d32e      	bcc.n	17f7a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
   17f1c:	4933      	ldr	r1, [pc, #204]	; (17fec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
   17f1e:	b135      	cbz	r5, 17f2e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xaa>
   17f20:	2d01      	cmp	r5, #1
   17f22:	d017      	beq.n	17f54 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xd0>
   17f24:	f240 7169 	movw	r1, #1897	; 0x769
   17f28:	203e      	movs	r0, #62	; 0x3e
   17f2a:	f7f4 ffad 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17f2e:	f100 0228 	add.w	r2, r0, #40	; 0x28
   17f32:	e9c1 0202 	strd	r0, r2, [r1, #8]
   17f36:	492e      	ldr	r1, [pc, #184]	; (17ff0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x16c>)
   17f38:	482c      	ldr	r0, [pc, #176]	; (17fec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
   17f3a:	f005 fc7b 	bl	1d834 <mpsl_fem_pa_configuration_set>
   17f3e:	2800      	cmp	r0, #0
   17f40:	bf18      	it	ne
   17f42:	f1b0 3fff 	cmpne.w	r0, #4294967295
   17f46:	d018      	beq.n	17f7a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
   17f48:	f44f 61eb 	mov.w	r1, #1880	; 0x758
   17f4c:	f04f 003e 	mov.w	r0, #62	; 0x3e
   17f50:	f7f4 ff9a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17f54:	f100 0229 	add.w	r2, r0, #41	; 0x29
   17f58:	e9c1 0202 	strd	r0, r2, [r1, #8]
   17f5c:	4924      	ldr	r1, [pc, #144]	; (17ff0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x16c>)
   17f5e:	4823      	ldr	r0, [pc, #140]	; (17fec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x168>)
   17f60:	f005 fc56 	bl	1d810 <mpsl_fem_lna_configuration_set>
   17f64:	2800      	cmp	r0, #0
   17f66:	bf18      	it	ne
   17f68:	f1b0 3fff 	cmpne.w	r0, #4294967295
   17f6c:	d005      	beq.n	17f7a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0xf6>
   17f6e:	f240 7165 	movw	r1, #1893	; 0x765
   17f72:	f04f 003e 	mov.w	r0, #62	; 0x3e
   17f76:	f7f4 ff87 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17f7a:	f88d 8000 	strb.w	r8, [sp]
   17f7e:	2d00      	cmp	r5, #0
   17f80:	bf0c      	ite	eq
   17f82:	2001      	moveq	r0, #1
   17f84:	2000      	movne	r0, #0
   17f86:	f88d 0001 	strb.w	r0, [sp, #1]
   17f8a:	4668      	mov	r0, sp
   17f8c:	f005 fbe0 	bl	1d750 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   17f90:	a805      	add	r0, sp, #20
   17f92:	f005 fb41 	bl	1d618 <mpsl_cx_granted_ops_get>
   17f96:	b120      	cbz	r0, 17fa2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x11e>
   17f98:	f640 21f2 	movw	r1, #2802	; 0xaf2
   17f9c:	203e      	movs	r0, #62	; 0x3e
   17f9e:	f7f4 ff73 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   17fa2:	7a61      	ldrb	r1, [r4, #9]
   17fa4:	f89d 0014 	ldrb.w	r0, [sp, #20]
   17fa8:	2901      	cmp	r1, #1
   17faa:	bf08      	it	eq
   17fac:	ea27 0090 	biceq.w	r0, r7, r0, lsr #2
   17fb0:	d004      	beq.n	17fbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x138>
   17fb2:	2902      	cmp	r1, #2
   17fb4:	bf14      	ite	ne
   17fb6:	2000      	movne	r0, #0
   17fb8:	ea27 0050 	biceq.w	r0, r7, r0, lsr #1
   17fbc:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
   17fc0:	2800      	cmp	r0, #0
   17fc2:	bf04      	itt	eq
   17fc4:	b007      	addeq	sp, #28
   17fc6:	e8bd 83f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17fca:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
   17fce:	4909      	ldr	r1, [pc, #36]	; (17ff4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x170>)
   17fd0:	6008      	str	r0, [r1, #0]
   17fd2:	6137      	str	r7, [r6, #16]
   17fd4:	b007      	add	sp, #28
   17fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17fda:	0000      	.short	0x0000
   17fdc:	200011c0 	.word	0x200011c0
   17fe0:	40001000 	.word	0x40001000
   17fe4:	40008000 	.word	0x40008000
   17fe8:	4000800c 	.word	0x4000800c
   17fec:	20000344 	.word	0x20000344
   17ff0:	00019528 	.word	0x00019528
   17ff4:	4001f508 	.word	0x4001f508

00017ff8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
   17ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ffc:	4c90      	ldr	r4, [pc, #576]	; (18240 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x248>)
   17ffe:	0005      	movs	r5, r0
   18000:	b087      	sub	sp, #28
   18002:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   18006:	460f      	mov	r7, r1
   18008:	f040 0002 	orr.w	r0, r0, #2
   1800c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   18010:	bf0c      	ite	eq
   18012:	2004      	moveq	r0, #4
   18014:	2002      	movne	r0, #2
   18016:	f88d 0000 	strb.w	r0, [sp]
   1801a:	f04f 0a00 	mov.w	sl, #0
   1801e:	f88d a001 	strb.w	sl, [sp, #1]
   18022:	f88d a002 	strb.w	sl, [sp, #2]
   18026:	4668      	mov	r0, sp
   18028:	f005 fb08 	bl	1d63c <mpsl_cx_request>
   1802c:	b120      	cbz	r0, 18038 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x40>
   1802e:	f640 21d2 	movw	r1, #2770	; 0xad2
   18032:	203e      	movs	r0, #62	; 0x3e
   18034:	f7f4 ff28 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18038:	f8df b208 	ldr.w	fp, [pc, #520]	; 18244 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x24c>
   1803c:	4e82      	ldr	r6, [pc, #520]	; (18248 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x250>)
   1803e:	f04f 0800 	mov.w	r8, #0
   18042:	f04f 0901 	mov.w	r9, #1
   18046:	b115      	cbz	r5, 1804e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x56>
   18048:	2d01      	cmp	r5, #1
   1804a:	d020      	beq.n	1808e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
   1804c:	e037      	b.n	180be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
   1804e:	4638      	mov	r0, r7
   18050:	f001 f9de 	bl	19410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
   18054:	f884 9009 	strb.w	r9, [r4, #9]
   18058:	79e0      	ldrb	r0, [r4, #7]
   1805a:	2801      	cmp	r0, #1
   1805c:	d105      	bne.n	1806a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x72>
   1805e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   18062:	f040 0008 	orr.w	r0, r0, #8
   18066:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   1806a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1806c:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   18070:	6320      	str	r0, [r4, #48]	; 0x30
   18072:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18076:	f8cb 0000 	str.w	r0, [fp]
   1807a:	4874      	ldr	r0, [pc, #464]	; (1824c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x254>)
   1807c:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
   18080:	f500 71fa 	add.w	r1, r0, #500	; 0x1f4
   18084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18088:	fbb1 f8f0 	udiv	r8, r1, r0
   1808c:	e017      	b.n	180be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc6>
   1808e:	4638      	mov	r0, r7
   18090:	f001 f93a 	bl	19308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
   18094:	2002      	movs	r0, #2
   18096:	7260      	strb	r0, [r4, #9]
   18098:	79e0      	ldrb	r0, [r4, #7]
   1809a:	2801      	cmp	r0, #1
   1809c:	d105      	bne.n	180aa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb2>
   1809e:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   180a2:	f040 0004 	orr.w	r0, r0, #4
   180a6:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   180aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
   180ac:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   180b0:	6320      	str	r0, [r4, #48]	; 0x30
   180b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   180b6:	f8cb 0000 	str.w	r0, [fp]
   180ba:	f04f 0829 	mov.w	r8, #41	; 0x29
   180be:	79e0      	ldrb	r0, [r4, #7]
   180c0:	2800      	cmp	r0, #0
   180c2:	bf04      	itt	eq
   180c4:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
   180c8:	f040 0002 	orreq.w	r0, r0, #2
   180cc:	d006      	beq.n	180dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
   180ce:	2801      	cmp	r0, #1
   180d0:	bf04      	itt	eq
   180d2:	f894 0034 	ldrbeq.w	r0, [r4, #52]	; 0x34
   180d6:	f040 0004 	orreq.w	r0, r0, #4
   180da:	d101      	bne.n	180e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe8>
   180dc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   180e0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   180e4:	f8df b168 	ldr.w	fp, [pc, #360]	; 18250 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x258>
   180e8:	f010 0f01 	tst.w	r0, #1
   180ec:	d029      	beq.n	18142 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   180ee:	f010 0f02 	tst.w	r0, #2
   180f2:	d016      	beq.n	18122 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x12a>
   180f4:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   180f8:	f040 0001 	orr.w	r0, r0, #1
   180fc:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   18100:	f8d6 0550 	ldr.w	r0, [r6, #1360]	; 0x550
   18104:	b2c0      	uxtb	r0, r0
   18106:	280b      	cmp	r0, #11
   18108:	bf18      	it	ne
   1810a:	280a      	cmpne	r0, #10
   1810c:	d003      	beq.n	18116 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x11e>
   1810e:	2803      	cmp	r0, #3
   18110:	bf18      	it	ne
   18112:	2802      	cmpne	r0, #2
   18114:	d115      	bne.n	18142 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   18116:	f240 613e 	movw	r1, #1598	; 0x63e
   1811a:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1811e:	f7f4 feb3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18122:	f010 0f04 	tst.w	r0, #4
   18126:	d00c      	beq.n	18142 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   18128:	494b      	ldr	r1, [pc, #300]	; (18258 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x260>)
   1812a:	484a      	ldr	r0, [pc, #296]	; (18254 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x25c>)
   1812c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   18130:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   18134:	b128      	cbz	r0, 18142 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x14a>
   18136:	f240 6146 	movw	r1, #1606	; 0x646
   1813a:	f04f 003e 	mov.w	r0, #62	; 0x3e
   1813e:	f7f4 fea3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18142:	f00a fe3b 	bl	22dbc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
   18146:	b128      	cbz	r0, 18154 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x15c>
   18148:	f7ff fdec 	bl	17d24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   1814c:	b007      	add	sp, #28
   1814e:	2000      	movs	r0, #0
   18150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18154:	f00a fe44 	bl	22de0 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>
   18158:	f88d a004 	strb.w	sl, [sp, #4]
   1815c:	2d00      	cmp	r5, #0
   1815e:	bf14      	ite	ne
   18160:	2100      	movne	r1, #0
   18162:	2101      	moveq	r1, #1
   18164:	f88d 1005 	strb.w	r1, [sp, #5]
   18168:	e9cd b002 	strd	fp, r0, [sp, #8]
   1816c:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   18170:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   18174:	9004      	str	r0, [sp, #16]
   18176:	bf18      	it	ne
   18178:	f649 71ba 	movwne	r1, #40890	; 0x9fba
   1817c:	d104      	bne.n	18188 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x190>
   1817e:	4833      	ldr	r0, [pc, #204]	; (1824c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x254>)
   18180:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
   18184:	f500 7116 	add.w	r1, r0, #600	; 0x258
   18188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1818c:	fbb1 f0f0 	udiv	r0, r1, r0
   18190:	9005      	str	r0, [sp, #20]
   18192:	a801      	add	r0, sp, #4
   18194:	f005 fadc 	bl	1d750 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   18198:	8ba1      	ldrh	r1, [r4, #28]
   1819a:	2000      	movs	r0, #0
   1819c:	2996      	cmp	r1, #150	; 0x96
   1819e:	d32c      	bcc.n	181fa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
   181a0:	492e      	ldr	r1, [pc, #184]	; (1825c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
   181a2:	b135      	cbz	r5, 181b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1ba>
   181a4:	2d01      	cmp	r5, #1
   181a6:	d016      	beq.n	181d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x1de>
   181a8:	f240 7169 	movw	r1, #1897	; 0x769
   181ac:	203e      	movs	r0, #62	; 0x3e
   181ae:	f7f4 fe6b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181b2:	2228      	movs	r2, #40	; 0x28
   181b4:	e9c1 0202 	strd	r0, r2, [r1, #8]
   181b8:	4929      	ldr	r1, [pc, #164]	; (18260 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x268>)
   181ba:	4828      	ldr	r0, [pc, #160]	; (1825c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
   181bc:	f005 fb3a 	bl	1d834 <mpsl_fem_pa_configuration_set>
   181c0:	2800      	cmp	r0, #0
   181c2:	bf18      	it	ne
   181c4:	f1b0 3fff 	cmpne.w	r0, #4294967295
   181c8:	d017      	beq.n	181fa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
   181ca:	f44f 61eb 	mov.w	r1, #1880	; 0x758
   181ce:	f04f 003e 	mov.w	r0, #62	; 0x3e
   181d2:	f7f4 fe59 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181d6:	2229      	movs	r2, #41	; 0x29
   181d8:	e9c1 0202 	strd	r0, r2, [r1, #8]
   181dc:	4920      	ldr	r1, [pc, #128]	; (18260 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x268>)
   181de:	481f      	ldr	r0, [pc, #124]	; (1825c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x264>)
   181e0:	f005 fb16 	bl	1d810 <mpsl_fem_lna_configuration_set>
   181e4:	2800      	cmp	r0, #0
   181e6:	bf18      	it	ne
   181e8:	f1b0 3fff 	cmpne.w	r0, #4294967295
   181ec:	d005      	beq.n	181fa <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x202>
   181ee:	f240 7165 	movw	r1, #1893	; 0x765
   181f2:	f04f 003e 	mov.w	r0, #62	; 0x3e
   181f6:	f7f4 fe47 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   181fa:	a806      	add	r0, sp, #24
   181fc:	f005 fa0c 	bl	1d618 <mpsl_cx_granted_ops_get>
   18200:	b120      	cbz	r0, 1820c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x214>
   18202:	f640 21f2 	movw	r1, #2802	; 0xaf2
   18206:	203e      	movs	r0, #62	; 0x3e
   18208:	f7f4 fe3e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1820c:	7a61      	ldrb	r1, [r4, #9]
   1820e:	f89d 0018 	ldrb.w	r0, [sp, #24]
   18212:	2901      	cmp	r1, #1
   18214:	bf08      	it	eq
   18216:	ea29 0090 	biceq.w	r0, r9, r0, lsr #2
   1821a:	d004      	beq.n	18226 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x22e>
   1821c:	2902      	cmp	r1, #2
   1821e:	bf14      	ite	ne
   18220:	2000      	movne	r0, #0
   18222:	ea29 0050 	biceq.w	r0, r9, r0, lsr #1
   18226:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
   1822a:	b128      	cbz	r0, 18238 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x240>
   1822c:	490d      	ldr	r1, [pc, #52]	; (18264 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x26c>)
   1822e:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
   18232:	6008      	str	r0, [r1, #0]
   18234:	f8c6 9010 	str.w	r9, [r6, #16]
   18238:	b007      	add	sp, #28
   1823a:	4640      	mov	r0, r8
   1823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18240:	200011c0 	.word	0x200011c0
   18244:	4001f504 	.word	0x4001f504
   18248:	40001000 	.word	0x40001000
   1824c:	000194ee 	.word	0x000194ee
   18250:	40008000 	.word	0x40008000
   18254:	40001008 	.word	0x40001008
   18258:	4001f098 	.word	0x4001f098
   1825c:	20000344 	.word	0x20000344
   18260:	00019528 	.word	0x00019528
   18264:	4001f508 	.word	0x4001f508

00018268 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
   18268:	4a02      	ldr	r2, [pc, #8]	; (18274 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
   1826a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1826c:	6003      	str	r3, [r0, #0]
   1826e:	6c10      	ldr	r0, [r2, #64]	; 0x40
   18270:	6008      	str	r0, [r1, #0]
   18272:	4770      	bx	lr
   18274:	200011c0 	.word	0x200011c0

00018278 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
   18278:	b510      	push	{r4, lr}
   1827a:	4604      	mov	r4, r0
   1827c:	4807      	ldr	r0, [pc, #28]	; (1829c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x24>)
   1827e:	f005 f9d1 	bl	1d624 <mpsl_cx_register_callback>
   18282:	b120      	cbz	r0, 1828e <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x16>
   18284:	f640 112a 	movw	r1, #2346	; 0x92a
   18288:	203e      	movs	r0, #62	; 0x3e
   1828a:	f7f4 fdfd 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1828e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
   18292:	4803      	ldr	r0, [pc, #12]	; (182a0 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0x28>)
   18294:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
   18298:	bd10      	pop	{r4, pc}
   1829a:	0000      	.short	0x0000
   1829c:	000192dd 	.word	0x000192dd
   182a0:	200011b0 	.word	0x200011b0

000182a4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
   182a4:	4916      	ldr	r1, [pc, #88]	; (18300 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x5c>)
   182a6:	b510      	push	{r4, lr}
   182a8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   182aa:	4282      	cmp	r2, r0
   182ac:	d304      	bcc.n	182b8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x14>
   182ae:	f640 113a 	movw	r1, #2362	; 0x93a
   182b2:	203e      	movs	r0, #62	; 0x3e
   182b4:	f7f4 fde8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   182b8:	2201      	movs	r2, #1
   182ba:	f8df c048 	ldr.w	ip, [pc, #72]	; 18304 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x60>
   182be:	730a      	strb	r2, [r1, #12]
   182c0:	6108      	str	r0, [r1, #16]
   182c2:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
   182c6:	f10c 0304 	add.w	r3, ip, #4
   182ca:	f8d3 4540 	ldr.w	r4, [r3, #1344]	; 0x540
   182ce:	1d64      	adds	r4, r4, #5
   182d0:	4284      	cmp	r4, r0
   182d2:	d306      	bcc.n	182e2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3e>
   182d4:	480c      	ldr	r0, [pc, #48]	; (18308 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x64>)
   182d6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   182da:	2900      	cmp	r1, #0
   182dc:	bf08      	it	eq
   182de:	6102      	streq	r2, [r0, #16]
   182e0:	bd10      	pop	{r4, pc}
   182e2:	2200      	movs	r2, #0
   182e4:	f8cc 2144 	str.w	r2, [ip, #324]	; 0x144
   182e8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   182ec:	6b08      	ldr	r0, [r1, #48]	; 0x30
   182ee:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   182f2:	6308      	str	r0, [r1, #48]	; 0x30
   182f4:	4905      	ldr	r1, [pc, #20]	; (1830c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x68>)
   182f6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   182fa:	6008      	str	r0, [r1, #0]
   182fc:	bd10      	pop	{r4, pc}
   182fe:	0000      	.short	0x0000
   18300:	200011c0 	.word	0x200011c0
   18304:	40008000 	.word	0x40008000
   18308:	40001000 	.word	0x40001000
   1830c:	4001f504 	.word	0x4001f504

00018310 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
   18310:	b510      	push	{r4, lr}
   18312:	4c0f      	ldr	r4, [pc, #60]	; (18350 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
   18314:	4603      	mov	r3, r0
   18316:	2002      	movs	r0, #2
   18318:	7320      	strb	r0, [r4, #12]
   1831a:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
   1831e:	8ba0      	ldrh	r0, [r4, #28]
   18320:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   18324:	7e22      	ldrb	r2, [r4, #24]
   18326:	f1bc 0f01 	cmp.w	ip, #1
   1832a:	d00d      	beq.n	18348 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
   1832c:	f001 f96a 	bl	19604 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
   18330:	6120      	str	r0, [r4, #16]
   18332:	4808      	ldr	r0, [pc, #32]	; (18354 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
   18334:	2100      	movs	r1, #0
   18336:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1833a:	6921      	ldr	r1, [r4, #16]
   1833c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1833e:	4408      	add	r0, r1
   18340:	4905      	ldr	r1, [pc, #20]	; (18358 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
   18342:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   18346:	bd10      	pop	{r4, pc}
   18348:	f001 f97a 	bl	19640 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
   1834c:	e7f0      	b.n	18330 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x20>
   1834e:	0000      	.short	0x0000
   18350:	200011c0 	.word	0x200011c0
   18354:	40008000 	.word	0x40008000
   18358:	40008004 	.word	0x40008004

0001835c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
   1835c:	b510      	push	{r4, lr}
   1835e:	f00a fe55 	bl	2300c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   18362:	2800      	cmp	r0, #0
   18364:	bf08      	it	eq
   18366:	bd10      	popeq	{r4, pc}
   18368:	4803      	ldr	r0, [pc, #12]	; (18378 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
   1836a:	6801      	ldr	r1, [r0, #0]
   1836c:	f021 0101 	bic.w	r1, r1, #1
   18370:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   18374:	6001      	str	r1, [r0, #0]
   18376:	bd10      	pop	{r4, pc}
   18378:	40001774 	.word	0x40001774

0001837c <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY>:
   1837c:	b510      	push	{r4, lr}
   1837e:	2896      	cmp	r0, #150	; 0x96
   18380:	bf9e      	ittt	ls
   18382:	4904      	ldrls	r1, [pc, #16]	; (18394 <sym_2ORM7WHEENMS7XIJEHICWP3BYWWMKP4MLHSFBTY+0x18>)
   18384:	8388      	strhls	r0, [r1, #28]
   18386:	bd10      	popls	{r4, pc}
   18388:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1838c:	203e      	movs	r0, #62	; 0x3e
   1838e:	f7f4 fd7b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18392:	0000      	.short	0x0000
   18394:	200011c0 	.word	0x200011c0

00018398 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
   18398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1839c:	2248      	movs	r2, #72	; 0x48
   1839e:	2100      	movs	r1, #0
   183a0:	481d      	ldr	r0, [pc, #116]	; (18418 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
   183a2:	f00a ff1c 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   183a6:	481c      	ldr	r0, [pc, #112]	; (18418 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x80>)
   183a8:	2400      	movs	r4, #0
   183aa:	21ff      	movs	r1, #255	; 0xff
   183ac:	71c4      	strb	r4, [r0, #7]
   183ae:	7204      	strb	r4, [r0, #8]
   183b0:	7244      	strb	r4, [r0, #9]
   183b2:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
   183b6:	215f      	movs	r1, #95	; 0x5f
   183b8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
   183bc:	f00a fddf 	bl	22f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   183c0:	4f16      	ldr	r7, [pc, #88]	; (1841c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x84>)
   183c2:	4d17      	ldr	r5, [pc, #92]	; (18420 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x88>)
   183c4:	4e17      	ldr	r6, [pc, #92]	; (18424 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x8c>)
   183c6:	b928      	cbnz	r0, 183d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
   183c8:	f00a fdf0 	bl	22fac <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   183cc:	b910      	cbnz	r0, 183d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x3c>
   183ce:	f00a fdf7 	bl	22fc0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   183d2:	b140      	cbz	r0, 183e6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x4e>
   183d4:	2224      	movs	r2, #36	; 0x24
   183d6:	21ff      	movs	r1, #255	; 0xff
   183d8:	4638      	mov	r0, r7
   183da:	f00a ff00 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   183de:	602c      	str	r4, [r5, #0]
   183e0:	6034      	str	r4, [r6, #0]
   183e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   183e6:	f00a fe2b 	bl	23040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   183ea:	b910      	cbnz	r0, 183f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5a>
   183ec:	f00a fe1e 	bl	2302c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   183f0:	b140      	cbz	r0, 18404 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x6c>
   183f2:	2240      	movs	r2, #64	; 0x40
   183f4:	21ff      	movs	r1, #255	; 0xff
   183f6:	4638      	mov	r0, r7
   183f8:	f00a fef1 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   183fc:	602c      	str	r4, [r5, #0]
   183fe:	6034      	str	r4, [r6, #0]
   18400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18404:	2238      	movs	r2, #56	; 0x38
   18406:	21ff      	movs	r1, #255	; 0xff
   18408:	4638      	mov	r0, r7
   1840a:	f00a fee8 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1840e:	602c      	str	r4, [r5, #0]
   18410:	6034      	str	r4, [r6, #0]
   18412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18416:	0000      	.short	0x0000
   18418:	200011c0 	.word	0x200011c0
   1841c:	40000e00 	.word	0x40000e00
   18420:	40000e08 	.word	0x40000e08
   18424:	40000e10 	.word	0x40000e10

00018428 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
   18428:	4801      	ldr	r0, [pc, #4]	; (18430 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
   1842a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1842c:	4770      	bx	lr
   1842e:	0000      	.short	0x0000
   18430:	200011c0 	.word	0x200011c0

00018434 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
   18434:	4801      	ldr	r0, [pc, #4]	; (1843c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
   18436:	6a00      	ldr	r0, [r0, #32]
   18438:	4770      	bx	lr
   1843a:	0000      	.short	0x0000
   1843c:	200011c0 	.word	0x200011c0

00018440 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
   18440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18444:	4e29      	ldr	r6, [pc, #164]	; (184ec <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xac>)
   18446:	4c28      	ldr	r4, [pc, #160]	; (184e8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xa8>)
   18448:	2000      	movs	r0, #0
   1844a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   1844e:	1d27      	adds	r7, r4, #4
   18450:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
   18454:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
   18458:	f106 0804 	add.w	r8, r6, #4
   1845c:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   18460:	f7ff fc60 	bl	17d24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   18464:	4d22      	ldr	r5, [pc, #136]	; (184f0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb0>)
   18466:	8ba8      	ldrh	r0, [r5, #28]
   18468:	2896      	cmp	r0, #150	; 0x96
   1846a:	d30c      	bcc.n	18486 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
   1846c:	f005 f9ba 	bl	1d7e4 <mpsl_fem_disable>
   18470:	2800      	cmp	r0, #0
   18472:	bf18      	it	ne
   18474:	f1b0 3fff 	cmpne.w	r0, #4294967295
   18478:	d005      	beq.n	18486 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x46>
   1847a:	f240 516d 	movw	r1, #1389	; 0x56d
   1847e:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18482:	f7f4 fd01 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18486:	f005 f8d3 	bl	1d630 <mpsl_cx_release>
   1848a:	b120      	cbz	r0, 18496 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x56>
   1848c:	f240 5181 	movw	r1, #1409	; 0x581
   18490:	203e      	movs	r0, #62	; 0x3e
   18492:	f7f4 fcf9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18496:	6b28      	ldr	r0, [r5, #48]	; 0x30
   18498:	4916      	ldr	r1, [pc, #88]	; (184f4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0xb4>)
   1849a:	f040 6044 	orr.w	r0, r0, #205520896	; 0xc400000
   1849e:	6008      	str	r0, [r1, #0]
   184a0:	2000      	movs	r0, #0
   184a2:	6328      	str	r0, [r5, #48]	; 0x30
   184a4:	7328      	strb	r0, [r5, #12]
   184a6:	6268      	str	r0, [r5, #36]	; 0x24
   184a8:	6228      	str	r0, [r5, #32]
   184aa:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   184ae:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
   184b2:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
   184b6:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   184ba:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   184be:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
   184c2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
   184c6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
   184ca:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   184ce:	2002      	movs	r0, #2
   184d0:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   184d4:	f501 71c0 	add.w	r1, r1, #384	; 0x180
   184d8:	f3bf 8f4f 	dsb	sy
   184dc:	f3bf 8f6f 	isb	sy
   184e0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   184e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   184e8:	40008000 	.word	0x40008000
   184ec:	40008008 	.word	0x40008008
   184f0:	200011c0 	.word	0x200011c0
   184f4:	4001f508 	.word	0x4001f508

000184f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
   184f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   184fc:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
   18500:	2701      	movs	r7, #1
   18502:	f04f 0902 	mov.w	r9, #2
   18506:	2500      	movs	r5, #0
   18508:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1850c:	f3bf 8f4f 	dsb	sy
   18510:	f3bf 8f6f 	isb	sy
   18514:	4c39      	ldr	r4, [pc, #228]	; (185fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
   18516:	f8c4 5ffc 	str.w	r5, [r4, #4092]	; 0xffc
   1851a:	f8c4 7ffc 	str.w	r7, [r4, #4092]	; 0xffc
   1851e:	f00a fd65 	bl	22fec <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   18522:	4e37      	ldr	r6, [pc, #220]	; (18600 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
   18524:	b118      	cbz	r0, 1852e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
   18526:	6830      	ldr	r0, [r6, #0]
   18528:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1852c:	6030      	str	r0, [r6, #0]
   1852e:	f00a fd51 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   18532:	b138      	cbz	r0, 18544 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
   18534:	6830      	ldr	r0, [r6, #0]
   18536:	f020 0069 	bic.w	r0, r0, #105	; 0x69
   1853a:	f040 0096 	orr.w	r0, r0, #150	; 0x96
   1853e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   18542:	6030      	str	r0, [r6, #0]
   18544:	f00a fd62 	bl	2300c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   18548:	b130      	cbz	r0, 18558 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x60>
   1854a:	482e      	ldr	r0, [pc, #184]	; (18604 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
   1854c:	6801      	ldr	r1, [r0, #0]
   1854e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
   18552:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
   18556:	6001      	str	r1, [r0, #0]
   18558:	492c      	ldr	r1, [pc, #176]	; (1860c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x114>)
   1855a:	482b      	ldr	r0, [pc, #172]	; (18608 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
   1855c:	6008      	str	r0, [r1, #0]
   1855e:	f005 f985 	bl	1d86c <mpsl_fem_device_config_254_apply_get>
   18562:	b140      	cbz	r0, 18576 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
   18564:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   18568:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
   1856c:	f1b0 3fff 	cmp.w	r0, #4294967295
   18570:	bf1c      	itt	ne
   18572:	4927      	ldrne	r1, [pc, #156]	; (18610 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x118>)
   18574:	6008      	strne	r0, [r1, #0]
   18576:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1857a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1857c:	f1b0 3fff 	cmp.w	r0, #4294967295
   18580:	d004      	beq.n	1858c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x94>
   18582:	4924      	ldr	r1, [pc, #144]	; (18614 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x11c>)
   18584:	680a      	ldr	r2, [r1, #0]
   18586:	f360 4217 	bfi	r2, r0, #16, #8
   1858a:	600a      	str	r2, [r1, #0]
   1858c:	f240 1103 	movw	r1, #259	; 0x103
   18590:	f240 605b 	movw	r0, #1627	; 0x65b
   18594:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
   18598:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   1859c:	481e      	ldr	r0, [pc, #120]	; (18618 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x120>)
   1859e:	6007      	str	r7, [r0, #0]
   185a0:	481e      	ldr	r0, [pc, #120]	; (1861c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x124>)
   185a2:	4a1f      	ldr	r2, [pc, #124]	; (18620 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x128>)
   185a4:	2103      	movs	r1, #3
   185a6:	7607      	strb	r7, [r0, #24]
   185a8:	6011      	str	r1, [r2, #0]
   185aa:	f240 2101 	movw	r1, #513	; 0x201
   185ae:	f8c4 1650 	str.w	r1, [r4, #1616]	; 0x650
   185b2:	2102      	movs	r1, #2
   185b4:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   185b8:	4a1a      	ldr	r2, [pc, #104]	; (18624 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x12c>)
   185ba:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
   185be:	6011      	str	r1, [r2, #0]
   185c0:	f1a0 0110 	sub.w	r1, r0, #16
   185c4:	2296      	movs	r2, #150	; 0x96
   185c6:	870d      	strh	r5, [r1, #56]	; 0x38
   185c8:	4917      	ldr	r1, [pc, #92]	; (18628 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x130>)
   185ca:	6245      	str	r5, [r0, #36]	; 0x24
   185cc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
   185d0:	700d      	strb	r5, [r1, #0]
   185d2:	8382      	strh	r2, [r0, #28]
   185d4:	4a15      	ldr	r2, [pc, #84]	; (1862c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x134>)
   185d6:	6812      	ldr	r2, [r2, #0]
   185d8:	6142      	str	r2, [r0, #20]
   185da:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
   185de:	f8c8 9280 	str.w	r9, [r8, #640]	; 0x280
   185e2:	2010      	movs	r0, #16
   185e4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   185e8:	f8c8 9100 	str.w	r9, [r8, #256]	; 0x100
   185ec:	6848      	ldr	r0, [r1, #4]
   185ee:	2800      	cmp	r0, #0
   185f0:	bf08      	it	eq
   185f2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   185f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   185fa:	4700      	bx	r0
   185fc:	40001000 	.word	0x40001000
   18600:	4000173c 	.word	0x4000173c
   18604:	40001740 	.word	0x40001740
   18608:	8900002c 	.word	0x8900002c
   1860c:	40001778 	.word	0x40001778
   18610:	4000174c 	.word	0x4000174c
   18614:	4000158c 	.word	0x4000158c
   18618:	40001530 	.word	0x40001530
   1861c:	200011c0 	.word	0x200011c0
   18620:	40001510 	.word	0x40001510
   18624:	4001f504 	.word	0x4001f504
   18628:	2000033c 	.word	0x2000033c
   1862c:	40001900 	.word	0x40001900

00018630 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
   18630:	4901      	ldr	r1, [pc, #4]	; (18638 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
   18632:	7648      	strb	r0, [r1, #25]
   18634:	4770      	bx	lr
   18636:	0000      	.short	0x0000
   18638:	200011c0 	.word	0x200011c0

0001863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1863c:	4901      	ldr	r1, [pc, #4]	; (18644 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
   1863e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   18642:	4770      	bx	lr
   18644:	00019564 	.word	0x00019564

00018648 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
   18648:	491e      	ldr	r1, [pc, #120]	; (186c4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x7c>)
   1864a:	b510      	push	{r4, lr}
   1864c:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   18650:	4a1d      	ldr	r2, [pc, #116]	; (186c8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x80>)
   18652:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
   18656:	f040 0001 	orr.w	r0, r0, #1
   1865a:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
   1865e:	f010 0f01 	tst.w	r0, #1
   18662:	bf08      	it	eq
   18664:	bd10      	popeq	{r4, pc}
   18666:	f010 0f02 	tst.w	r0, #2
   1866a:	d016      	beq.n	1869a <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x52>
   1866c:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   18670:	f040 0001 	orr.w	r0, r0, #1
   18674:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   18678:	f8d1 0550 	ldr.w	r0, [r1, #1360]	; 0x550
   1867c:	b2c0      	uxtb	r0, r0
   1867e:	280b      	cmp	r0, #11
   18680:	bf18      	it	ne
   18682:	280a      	cmpne	r0, #10
   18684:	d003      	beq.n	1868e <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x46>
   18686:	2803      	cmp	r0, #3
   18688:	bf1c      	itt	ne
   1868a:	2802      	cmpne	r0, #2
   1868c:	bd10      	popne	{r4, pc}
   1868e:	f240 613e 	movw	r1, #1598	; 0x63e
   18692:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18696:	f7f4 fbf7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1869a:	f010 0f04 	tst.w	r0, #4
   1869e:	bf08      	it	eq
   186a0:	bd10      	popeq	{r4, pc}
   186a2:	480a      	ldr	r0, [pc, #40]	; (186cc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x84>)
   186a4:	490a      	ldr	r1, [pc, #40]	; (186d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x88>)
   186a6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   186aa:	480a      	ldr	r0, [pc, #40]	; (186d4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x8c>)
   186ac:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
   186b0:	2800      	cmp	r0, #0
   186b2:	bf08      	it	eq
   186b4:	bd10      	popeq	{r4, pc}
   186b6:	f240 6146 	movw	r1, #1606	; 0x646
   186ba:	f04f 003e 	mov.w	r0, #62	; 0x3e
   186be:	f7f4 fbe3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   186c2:	0000      	.short	0x0000
   186c4:	40001000 	.word	0x40001000
   186c8:	200011c0 	.word	0x200011c0
   186cc:	40001008 	.word	0x40001008
   186d0:	4001f098 	.word	0x4001f098
   186d4:	40008000 	.word	0x40008000

000186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   186d8:	4901      	ldr	r1, [pc, #4]	; (186e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
   186da:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   186de:	4770      	bx	lr
   186e0:	00019588 	.word	0x00019588

000186e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
   186e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186e8:	b089      	sub	sp, #36	; 0x24
   186ea:	4690      	mov	r8, r2
   186ec:	460d      	mov	r5, r1
   186ee:	0007      	movs	r7, r0
   186f0:	bf0c      	ite	eq
   186f2:	2004      	moveq	r0, #4
   186f4:	2002      	movne	r0, #2
   186f6:	f88d 0000 	strb.w	r0, [sp]
   186fa:	2000      	movs	r0, #0
   186fc:	f88d 0001 	strb.w	r0, [sp, #1]
   18700:	f88d 0002 	strb.w	r0, [sp, #2]
   18704:	4668      	mov	r0, sp
   18706:	f004 ff99 	bl	1d63c <mpsl_cx_request>
   1870a:	b120      	cbz	r0, 18716 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
   1870c:	f640 21d2 	movw	r1, #2770	; 0xad2
   18710:	203e      	movs	r0, #62	; 0x3e
   18712:	f7f4 fbb9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18716:	4e8a      	ldr	r6, [pc, #552]	; (18940 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x25c>)
   18718:	f8df a228 	ldr.w	sl, [pc, #552]	; 18944 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x260>
   1871c:	4c8a      	ldr	r4, [pc, #552]	; (18948 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x264>)
   1871e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
   18722:	f04f 0901 	mov.w	r9, #1
   18726:	b137      	cbz	r7, 18736 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x52>
   18728:	2f01      	cmp	r7, #1
   1872a:	d01a      	beq.n	18762 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7e>
   1872c:	f640 012d 	movw	r1, #2093	; 0x82d
   18730:	203e      	movs	r0, #62	; 0x3e
   18732:	f7f4 fba9 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18736:	4640      	mov	r0, r8
   18738:	f000 fe6a 	bl	19410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
   1873c:	4883      	ldr	r0, [pc, #524]	; (1894c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x268>)
   1873e:	f884 9009 	strb.w	r9, [r4, #9]
   18742:	f830 1018 	ldrh.w	r1, [r0, r8, lsl #1]
   18746:	79e0      	ldrb	r0, [r4, #7]
   18748:	2801      	cmp	r0, #1
   1874a:	d004      	beq.n	18756 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x72>
   1874c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
   18750:	fbb1 f1fb 	udiv	r1, r1, fp
   18754:	1a6d      	subs	r5, r5, r1
   18756:	2800      	cmp	r0, #0
   18758:	bf04      	itt	eq
   1875a:	4630      	moveq	r0, r6
   1875c:	f8ca 6514 	streq.w	r6, [sl, #1300]	; 0x514
   18760:	e011      	b.n	18786 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa2>
   18762:	4640      	mov	r0, r8
   18764:	f000 fdd0 	bl	19308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>
   18768:	2002      	movs	r0, #2
   1876a:	7260      	strb	r0, [r4, #9]
   1876c:	79e1      	ldrb	r1, [r4, #7]
   1876e:	2901      	cmp	r1, #1
   18770:	d004      	beq.n	1877c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x98>
   18772:	f24a 10ae 	movw	r0, #41390	; 0xa1ae
   18776:	fbb0 f0fb 	udiv	r0, r0, fp
   1877a:	1a2d      	subs	r5, r5, r0
   1877c:	4874      	ldr	r0, [pc, #464]	; (18950 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x26c>)
   1877e:	2900      	cmp	r1, #0
   18780:	bf08      	it	eq
   18782:	f8ca 0514 	streq.w	r0, [sl, #1300]	; 0x514
   18786:	4873      	ldr	r0, [pc, #460]	; (18954 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x270>)
   18788:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
   1878c:	4a72      	ldr	r2, [pc, #456]	; (18958 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x274>)
   1878e:	4651      	mov	r1, sl
   18790:	f8ca 2510 	str.w	r2, [sl, #1296]	; 0x510
   18794:	2210      	movs	r2, #16
   18796:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
   1879a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1879c:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1895c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x278>
   187a0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   187a4:	0103      	lsls	r3, r0, #4
   187a6:	6322      	str	r2, [r4, #48]	; 0x30
   187a8:	f8cc 3000 	str.w	r3, [ip]
   187ac:	79e3      	ldrb	r3, [r4, #7]
   187ae:	2b00      	cmp	r3, #0
   187b0:	bf04      	itt	eq
   187b2:	f894 3034 	ldrbeq.w	r3, [r4, #52]	; 0x34
   187b6:	f043 0302 	orreq.w	r3, r3, #2
   187ba:	d006      	beq.n	187ca <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe6>
   187bc:	2b01      	cmp	r3, #1
   187be:	bf04      	itt	eq
   187c0:	f894 3034 	ldrbeq.w	r3, [r4, #52]	; 0x34
   187c4:	f043 0304 	orreq.w	r3, r3, #4
   187c8:	d101      	bne.n	187ce <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xea>
   187ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   187ce:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   187d2:	f013 0f01 	tst.w	r3, #1
   187d6:	d028      	beq.n	1882a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
   187d8:	f013 0f02 	tst.w	r3, #2
   187dc:	d016      	beq.n	1880c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x128>
   187de:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   187e2:	f043 0301 	orr.w	r3, r3, #1
   187e6:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
   187ea:	f8d6 3550 	ldr.w	r3, [r6, #1360]	; 0x550
   187ee:	b2db      	uxtb	r3, r3
   187f0:	2b0b      	cmp	r3, #11
   187f2:	bf18      	it	ne
   187f4:	2b0a      	cmpne	r3, #10
   187f6:	d003      	beq.n	18800 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x11c>
   187f8:	2b03      	cmp	r3, #3
   187fa:	bf18      	it	ne
   187fc:	2b02      	cmpne	r3, #2
   187fe:	d114      	bne.n	1882a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
   18800:	f240 613e 	movw	r1, #1598	; 0x63e
   18804:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18808:	f7f4 fb3e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1880c:	f013 0f04 	tst.w	r3, #4
   18810:	d00b      	beq.n	1882a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
   18812:	4b53      	ldr	r3, [pc, #332]	; (18960 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x27c>)
   18814:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
   18818:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   1881c:	b12b      	cbz	r3, 1882a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x146>
   1881e:	f240 6146 	movw	r1, #1606	; 0x646
   18822:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18826:	f7f4 fb2f 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1882a:	f8c0 904c 	str.w	r9, [r0, #76]	; 0x4c
   1882e:	4b4d      	ldr	r3, [pc, #308]	; (18964 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x280>)
   18830:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
   18834:	f8df a130 	ldr.w	sl, [pc, #304]	; 18968 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x284>
   18838:	42ab      	cmp	r3, r5
   1883a:	d311      	bcc.n	18860 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x17c>
   1883c:	2300      	movs	r3, #0
   1883e:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   18842:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
   18846:	f422 2000 	bic.w	r0, r2, #524288	; 0x80000
   1884a:	6320      	str	r0, [r4, #48]	; 0x30
   1884c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   18850:	f8ca 0000 	str.w	r0, [sl]
   18854:	f7ff fa66 	bl	17d24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   18858:	b009      	add	sp, #36	; 0x24
   1885a:	2000      	movs	r0, #0
   1885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18860:	2100      	movs	r1, #0
   18862:	f88d 1004 	strb.w	r1, [sp, #4]
   18866:	2f00      	cmp	r7, #0
   18868:	bf0c      	ite	eq
   1886a:	2201      	moveq	r2, #1
   1886c:	2200      	movne	r2, #0
   1886e:	f88d 2005 	strb.w	r2, [sp, #5]
   18872:	9504      	str	r5, [sp, #16]
   18874:	e9cd 0102 	strd	r0, r1, [sp, #8]
   18878:	bf03      	ittte	eq
   1887a:	4834      	ldreq	r0, [pc, #208]	; (1894c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x268>)
   1887c:	f830 0018 	ldrheq.w	r0, [r0, r8, lsl #1]
   18880:	f500 7016 	addeq.w	r0, r0, #600	; 0x258
   18884:	f649 70ba 	movwne	r0, #40890	; 0x9fba
   18888:	fbb0 f0fb 	udiv	r0, r0, fp
   1888c:	9005      	str	r0, [sp, #20]
   1888e:	a801      	add	r0, sp, #4
   18890:	f004 ff5e 	bl	1d750 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   18894:	8ba0      	ldrh	r0, [r4, #28]
   18896:	2896      	cmp	r0, #150	; 0x96
   18898:	d32e      	bcc.n	188f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x214>
   1889a:	4834      	ldr	r0, [pc, #208]	; (1896c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
   1889c:	b137      	cbz	r7, 188ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1c8>
   1889e:	2f01      	cmp	r7, #1
   188a0:	d017      	beq.n	188d2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x1ee>
   188a2:	f240 7169 	movw	r1, #1897	; 0x769
   188a6:	203e      	movs	r0, #62	; 0x3e
   188a8:	f7f4 faee 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   188ac:	f105 0128 	add.w	r1, r5, #40	; 0x28
   188b0:	e9c0 5102 	strd	r5, r1, [r0, #8]
   188b4:	492e      	ldr	r1, [pc, #184]	; (18970 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
   188b6:	482d      	ldr	r0, [pc, #180]	; (1896c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
   188b8:	f004 ffbc 	bl	1d834 <mpsl_fem_pa_configuration_set>
   188bc:	2800      	cmp	r0, #0
   188be:	bf18      	it	ne
   188c0:	f1b0 3fff 	cmpne.w	r0, #4294967295
   188c4:	d018      	beq.n	188f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x214>
   188c6:	f44f 61eb 	mov.w	r1, #1880	; 0x758
   188ca:	f04f 003e 	mov.w	r0, #62	; 0x3e
   188ce:	f7f4 fadb 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   188d2:	f105 0129 	add.w	r1, r5, #41	; 0x29
   188d6:	e9c0 5102 	strd	r5, r1, [r0, #8]
   188da:	4925      	ldr	r1, [pc, #148]	; (18970 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x28c>)
   188dc:	4823      	ldr	r0, [pc, #140]	; (1896c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x288>)
   188de:	f004 ff97 	bl	1d810 <mpsl_fem_lna_configuration_set>
   188e2:	2800      	cmp	r0, #0
   188e4:	bf18      	it	ne
   188e6:	f1b0 3fff 	cmpne.w	r0, #4294967295
   188ea:	d005      	beq.n	188f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x214>
   188ec:	f240 7165 	movw	r1, #1893	; 0x765
   188f0:	f04f 003e 	mov.w	r0, #62	; 0x3e
   188f4:	f7f4 fac8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   188f8:	4668      	mov	r0, sp
   188fa:	f004 fe8d 	bl	1d618 <mpsl_cx_granted_ops_get>
   188fe:	b120      	cbz	r0, 1890a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x226>
   18900:	f640 21f2 	movw	r1, #2802	; 0xaf2
   18904:	203e      	movs	r0, #62	; 0x3e
   18906:	f7f4 fabf 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1890a:	7a61      	ldrb	r1, [r4, #9]
   1890c:	f89d 0000 	ldrb.w	r0, [sp]
   18910:	2901      	cmp	r1, #1
   18912:	bf08      	it	eq
   18914:	ea29 0090 	biceq.w	r0, r9, r0, lsr #2
   18918:	d004      	beq.n	18924 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x240>
   1891a:	2902      	cmp	r1, #2
   1891c:	bf14      	ite	ne
   1891e:	2000      	movne	r0, #0
   18920:	ea29 0050 	biceq.w	r0, r9, r0, lsr #1
   18924:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
   18928:	b128      	cbz	r0, 18936 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x252>
   1892a:	f44f 1060 	mov.w	r0, #3670016	; 0x380000
   1892e:	f8ca 0000 	str.w	r0, [sl]
   18932:	f8c6 9010 	str.w	r9, [r6, #16]
   18936:	b009      	add	sp, #36	; 0x24
   18938:	2001      	movs	r0, #1
   1893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1893e:	0000      	.short	0x0000
   18940:	40001000 	.word	0x40001000
   18944:	4001f098 	.word	0x4001f098
   18948:	200011c0 	.word	0x200011c0
   1894c:	000194ee 	.word	0x000194ee
   18950:	40001004 	.word	0x40001004
   18954:	40008000 	.word	0x40008000
   18958:	40008140 	.word	0x40008140
   1895c:	4001f504 	.word	0x4001f504
   18960:	40001008 	.word	0x40001008
   18964:	4000800c 	.word	0x4000800c
   18968:	4001f508 	.word	0x4001f508
   1896c:	20000344 	.word	0x20000344
   18970:	00019528 	.word	0x00019528

00018974 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ>:
   18974:	b570      	push	{r4, r5, r6, lr}
   18976:	4c1f      	ldr	r4, [pc, #124]	; (189f4 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x80>)
   18978:	4605      	mov	r5, r0
   1897a:	2000      	movs	r0, #0
   1897c:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
   18980:	4616      	mov	r6, r2
   18982:	460b      	mov	r3, r1
   18984:	f1bc 0f00 	cmp.w	ip, #0
   18988:	d006      	beq.n	18998 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x24>
   1898a:	4621      	mov	r1, r4
   1898c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
   18990:	b13d      	cbz	r5, 189a2 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x2e>
   18992:	2d01      	cmp	r5, #1
   18994:	d013      	beq.n	189be <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x4a>
   18996:	e01a      	b.n	189ce <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x5a>
   18998:	f640 016e 	movw	r1, #2158	; 0x86e
   1899c:	203e      	movs	r0, #62	; 0x3e
   1899e:	f7f4 fa73 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   189a2:	f1bc 0f01 	cmp.w	ip, #1
   189a6:	4618      	mov	r0, r3
   189a8:	d004      	beq.n	189b4 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x40>
   189aa:	f00a f89c 	bl	22ae6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   189ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
   189b0:	4408      	add	r0, r1
   189b2:	e00c      	b.n	189ce <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x5a>
   189b4:	f000 fe7a 	bl	196ac <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   189b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   189ba:	4408      	add	r0, r1
   189bc:	e007      	b.n	189ce <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x5a>
   189be:	f1bc 0f01 	cmp.w	ip, #1
   189c2:	4618      	mov	r0, r3
   189c4:	d010      	beq.n	189e8 <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x74>
   189c6:	f00a f880 	bl	22aca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   189ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   189cc:	4408      	add	r0, r1
   189ce:	4601      	mov	r1, r0
   189d0:	4632      	mov	r2, r6
   189d2:	4628      	mov	r0, r5
   189d4:	f7ff fe86 	bl	186e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   189d8:	2800      	cmp	r0, #0
   189da:	bf18      	it	ne
   189dc:	bd70      	popne	{r4, r5, r6, pc}
   189de:	f640 0195 	movw	r1, #2197	; 0x895
   189e2:	203e      	movs	r0, #62	; 0x3e
   189e4:	f7f4 fa50 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   189e8:	f000 fe52 	bl	19690 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   189ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   189ee:	4408      	add	r0, r1
   189f0:	e7ed      	b.n	189ce <sym_X2OPELT6OFJBU77R5R7QDKLXQUDKTQW6IEUFVIQ+0x5a>
   189f2:	0000      	.short	0x0000
   189f4:	200011c0 	.word	0x200011c0

000189f8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
   189f8:	b530      	push	{r4, r5, lr}
   189fa:	4c2d      	ldr	r4, [pc, #180]	; (18ab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xb8>)
   189fc:	b087      	sub	sp, #28
   189fe:	000d      	movs	r5, r1
   18a00:	71e0      	strb	r0, [r4, #7]
   18a02:	72a2      	strb	r2, [r4, #10]
   18a04:	bf0c      	ite	eq
   18a06:	2001      	moveq	r0, #1
   18a08:	2002      	movne	r0, #2
   18a0a:	7220      	strb	r0, [r4, #8]
   18a0c:	2801      	cmp	r0, #1
   18a0e:	d006      	beq.n	18a1e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x26>
   18a10:	2802      	cmp	r0, #2
   18a12:	d026      	beq.n	18a62 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
   18a14:	f640 2163 	movw	r1, #2659	; 0xa63
   18a18:	203e      	movs	r0, #62	; 0x3e
   18a1a:	f7f4 fa35 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18a1e:	7a60      	ldrb	r0, [r4, #9]
   18a20:	2802      	cmp	r0, #2
   18a22:	d11e      	bne.n	18a62 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x6a>
   18a24:	4610      	mov	r0, r2
   18a26:	f994 2019 	ldrsb.w	r2, [r4, #25]
   18a2a:	7ea1      	ldrb	r1, [r4, #26]
   18a2c:	ab05      	add	r3, sp, #20
   18a2e:	f000 fe67 	bl	19700 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   18a32:	f99d 0014 	ldrsb.w	r0, [sp, #20]
   18a36:	f000 fe25 	bl	19684 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   18a3a:	f10d 0015 	add.w	r0, sp, #21
   18a3e:	f004 feff 	bl	1d840 <mpsl_fem_pa_gain_set>
   18a42:	b120      	cbz	r0, 18a4e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x56>
   18a44:	f240 6115 	movw	r1, #1557	; 0x615
   18a48:	203e      	movs	r0, #62	; 0x3e
   18a4a:	f7f4 fa1d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18a4e:	20ff      	movs	r0, #255	; 0xff
   18a50:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   18a54:	4817      	ldr	r0, [pc, #92]	; (18ab4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xbc>)
   18a56:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   18a5a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
   18a5e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   18a62:	7a62      	ldrb	r2, [r4, #9]
   18a64:	7e20      	ldrb	r0, [r4, #24]
   18a66:	2a02      	cmp	r2, #2
   18a68:	8ba2      	ldrh	r2, [r4, #28]
   18a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18a6e:	d016      	beq.n	18a9e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xa6>
   18a70:	4b11      	ldr	r3, [pc, #68]	; (18ab8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc0>)
   18a72:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18a76:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   18a7a:	fbb0 f0f1 	udiv	r0, r0, r1
   18a7e:	4410      	add	r0, r2
   18a80:	2101      	movs	r1, #1
   18a82:	f88d 1000 	strb.w	r1, [sp]
   18a86:	2d00      	cmp	r5, #0
   18a88:	bf0c      	ite	eq
   18a8a:	2101      	moveq	r1, #1
   18a8c:	2100      	movne	r1, #0
   18a8e:	f88d 1001 	strb.w	r1, [sp, #1]
   18a92:	9001      	str	r0, [sp, #4]
   18a94:	4668      	mov	r0, sp
   18a96:	f004 fe5b 	bl	1d750 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>
   18a9a:	b007      	add	sp, #28
   18a9c:	bd30      	pop	{r4, r5, pc}
   18a9e:	4b07      	ldr	r3, [pc, #28]	; (18abc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc4>)
   18aa0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18aa4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   18aa8:	fbb0 f0f1 	udiv	r0, r0, r1
   18aac:	1a10      	subs	r0, r2, r0
   18aae:	e7e7      	b.n	18a80 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x88>
   18ab0:	200011c0 	.word	0x200011c0
   18ab4:	40001000 	.word	0x40001000
   18ab8:	000194dc 	.word	0x000194dc
   18abc:	00019588 	.word	0x00019588

00018ac0 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q>:
   18ac0:	4901      	ldr	r1, [pc, #4]	; (18ac8 <sym_VLV66Y4WSZXQCNOAJYFTKZXZ4LIVJF5RFO44B5Q+0x8>)
   18ac2:	71c8      	strb	r0, [r1, #7]
   18ac4:	4770      	bx	lr
   18ac6:	0000      	.short	0x0000
   18ac8:	200011c0 	.word	0x200011c0

00018acc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
   18acc:	4902      	ldr	r1, [pc, #8]	; (18ad8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
   18ace:	2000      	movs	r0, #0
   18ad0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   18ad4:	4770      	bx	lr
   18ad6:	0000      	.short	0x0000
   18ad8:	40008000 	.word	0x40008000

00018adc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
   18adc:	4903      	ldr	r1, [pc, #12]	; (18aec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>)
   18ade:	6809      	ldr	r1, [r1, #0]
   18ae0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   18ae4:	4249      	negs	r1, r1
   18ae6:	7001      	strb	r1, [r0, #0]
   18ae8:	2001      	movs	r0, #1
   18aea:	4770      	bx	lr
   18aec:	40001548 	.word	0x40001548

00018af0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
   18af0:	4903      	ldr	r1, [pc, #12]	; (18b00 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
   18af2:	0e02      	lsrs	r2, r0, #24
   18af4:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
   18af8:	0200      	lsls	r0, r0, #8
   18afa:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
   18afe:	4770      	bx	lr
   18b00:	40001000 	.word	0x40001000

00018b04 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
   18b04:	4901      	ldr	r1, [pc, #4]	; (18b0c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
   18b06:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   18b0a:	4770      	bx	lr
   18b0c:	40001000 	.word	0x40001000

00018b10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
   18b10:	b510      	push	{r4, lr}
   18b12:	2200      	movs	r2, #0
   18b14:	2901      	cmp	r1, #1
   18b16:	d010      	beq.n	18b3a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
   18b18:	2902      	cmp	r1, #2
   18b1a:	bf08      	it	eq
   18b1c:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
   18b20:	d00b      	beq.n	18b3a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
   18b22:	2904      	cmp	r1, #4
   18b24:	bf14      	ite	ne
   18b26:	2908      	cmpne	r1, #8
   18b28:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   18b2c:	d005      	beq.n	18b3a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x2a>
   18b2e:	f240 21d9 	movw	r1, #729	; 0x2d9
   18b32:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18b36:	f7f4 f9a7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18b3a:	f442 7184 	orr.w	r1, r2, #264	; 0x108
   18b3e:	4a0c      	ldr	r2, [pc, #48]	; (18b70 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x60>)
   18b40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18b44:	6011      	str	r1, [r2, #0]
   18b46:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
   18b4a:	1d11      	adds	r1, r2, #4
   18b4c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
   18b50:	6008      	str	r0, [r1, #0]
   18b52:	4808      	ldr	r0, [pc, #32]	; (18b74 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x64>)
   18b54:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   18b58:	b2c0      	uxtb	r0, r0
   18b5a:	2803      	cmp	r0, #3
   18b5c:	bf1c      	itt	ne
   18b5e:	280b      	cmpne	r0, #11
   18b60:	bd10      	popne	{r4, pc}
   18b62:	f240 21f1 	movw	r1, #753	; 0x2f1
   18b66:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18b6a:	f7f4 f98d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18b6e:	0000      	.short	0x0000
   18b70:	40001514 	.word	0x40001514
   18b74:	40001000 	.word	0x40001000

00018b78 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
   18b78:	4901      	ldr	r1, [pc, #4]	; (18b80 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
   18b7a:	7688      	strb	r0, [r1, #26]
   18b7c:	4770      	bx	lr
   18b7e:	0000      	.short	0x0000
   18b80:	200011c0 	.word	0x200011c0

00018b84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
   18b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b88:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; 18f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3fc>
   18b8c:	2701      	movs	r7, #1
   18b8e:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
   18b92:	48fc      	ldr	r0, [pc, #1008]	; (18f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x400>)
   18b94:	f8d0 b540 	ldr.w	fp, [r0, #1344]	; 0x540
   18b98:	f00a f90e 	bl	22db8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
   18b9c:	4cfa      	ldr	r4, [pc, #1000]	; (18f88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
   18b9e:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; 18f8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
   18ba2:	4dfb      	ldr	r5, [pc, #1004]	; (18f90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>)
   18ba4:	e9c4 0b0f 	strd	r0, fp, [r4, #60]	; 0x3c
   18ba8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
   18bac:	2600      	movs	r6, #0
   18bae:	b1d8      	cbz	r0, 18be8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x64>
   18bb0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   18bb4:	f110 0900 	adds.w	r9, r0, #0
   18bb8:	bf18      	it	ne
   18bba:	f04f 0901 	movne.w	r9, #1
   18bbe:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   18bc2:	2800      	cmp	r0, #0
   18bc4:	bf18      	it	ne
   18bc6:	2001      	movne	r0, #1
   18bc8:	ea50 0109 	orrs.w	r1, r0, r9
   18bcc:	d015      	beq.n	18bfa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
   18bce:	2180      	movs	r1, #128	; 0x80
   18bd0:	f8c5 1308 	str.w	r1, [r5, #776]	; 0x308
   18bd4:	0309      	lsls	r1, r1, #12
   18bd6:	f8ca 1000 	str.w	r1, [sl]
   18bda:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
   18bde:	f090 0f01 	teq	r0, #1
   18be2:	bf18      	it	ne
   18be4:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be8:	8ba0      	ldrh	r0, [r4, #28]
   18bea:	2896      	cmp	r0, #150	; 0x96
   18bec:	d37e      	bcc.n	18cec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>
   18bee:	7a60      	ldrb	r0, [r4, #9]
   18bf0:	2801      	cmp	r0, #1
   18bf2:	d07c      	beq.n	18cee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16a>
   18bf4:	2802      	cmp	r0, #2
   18bf6:	d07b      	beq.n	18cf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>
   18bf8:	e0ba      	b.n	18d70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   18bfa:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   18bfe:	49e5      	ldr	r1, [pc, #916]	; (18f94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x410>)
   18c00:	f8df b394 	ldr.w	fp, [pc, #916]	; 18f98 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x414>
   18c04:	b338      	cbz	r0, 18c56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd2>
   18c06:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
   18c0a:	616f      	str	r7, [r5, #20]
   18c0c:	20ff      	movs	r0, #255	; 0xff
   18c0e:	9000      	str	r0, [sp, #0]
   18c10:	e002      	b.n	18c18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x94>
   18c12:	1e40      	subs	r0, r0, #1
   18c14:	9000      	str	r0, [sp, #0]
   18c16:	d019      	beq.n	18c4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
   18c18:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
   18c1c:	2800      	cmp	r0, #0
   18c1e:	9800      	ldr	r0, [sp, #0]
   18c20:	d0f7      	beq.n	18c12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
   18c22:	b198      	cbz	r0, 18c4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc8>
   18c24:	6808      	ldr	r0, [r1, #0]
   18c26:	f000 0b7f 	and.w	fp, r0, #127	; 0x7f
   18c2a:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
   18c2e:	4558      	cmp	r0, fp
   18c30:	bf3c      	itt	cc
   18c32:	2000      	movcc	r0, #0
   18c34:	f000 fb2e 	blcc	19294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   18c38:	f884 b037 	strb.w	fp, [r4, #55]	; 0x37
   18c3c:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
   18c40:	2001      	movs	r0, #1
   18c42:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   18c46:	642f      	str	r7, [r5, #64]	; 0x40
   18c48:	63af      	str	r7, [r5, #56]	; 0x38
   18c4a:	e007      	b.n	18c5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd8>
   18c4c:	f640 3199 	movw	r1, #2969	; 0xb99
   18c50:	203e      	movs	r0, #62	; 0x3e
   18c52:	f7f4 f919 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18c56:	f1b9 0f00 	cmp.w	r9, #0
   18c5a:	d003      	beq.n	18c64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
   18c5c:	f1b9 0f00 	cmp.w	r9, #0
   18c60:	d02a      	beq.n	18cb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
   18c62:	e063      	b.n	18d2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a8>
   18c64:	6808      	ldr	r0, [r1, #0]
   18c66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   18c6a:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   18c6e:	f8c5 611c 	str.w	r6, [r5, #284]	; 0x11c
   18c72:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   18c76:	b149      	cbz	r1, 18c8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
   18c78:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   18c7c:	4281      	cmp	r1, r0
   18c7e:	d218      	bcs.n	18cb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
   18c80:	2000      	movs	r0, #0
   18c82:	f000 fb07 	bl	19294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   18c86:	642f      	str	r7, [r5, #64]	; 0x40
   18c88:	63af      	str	r7, [r5, #56]	; 0x38
   18c8a:	e012      	b.n	18cb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
   18c8c:	49c3      	ldr	r1, [pc, #780]	; (18f9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x418>)
   18c8e:	6809      	ldr	r1, [r1, #0]
   18c90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   18c94:	b28a      	uxth	r2, r1
   18c96:	0c09      	lsrs	r1, r1, #16
   18c98:	4298      	cmp	r0, r3
   18c9a:	d303      	bcc.n	18ca4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x120>
   18c9c:	2a0f      	cmp	r2, #15
   18c9e:	d906      	bls.n	18cae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
   18ca0:	2902      	cmp	r1, #2
   18ca2:	d204      	bcs.n	18cae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
   18ca4:	2001      	movs	r0, #1
   18ca6:	f000 faf5 	bl	19294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   18caa:	642f      	str	r7, [r5, #64]	; 0x40
   18cac:	e001      	b.n	18cb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
   18cae:	642f      	str	r7, [r5, #64]	; 0x40
   18cb0:	63af      	str	r7, [r5, #56]	; 0x38
   18cb2:	f8db 0000 	ldr.w	r0, [fp]
   18cb6:	9000      	str	r0, [sp, #0]
   18cb8:	2080      	movs	r0, #128	; 0x80
   18cba:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   18cbe:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40
   18cc2:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
   18cc6:	49b6      	ldr	r1, [pc, #728]	; (18fa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
   18cc8:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
   18ccc:	f643 2298 	movw	r2, #15000	; 0x3a98
   18cd0:	4410      	add	r0, r2
   18cd2:	4ab4      	ldr	r2, [pc, #720]	; (18fa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
   18cd4:	4288      	cmp	r0, r1
   18cd6:	d21c      	bcs.n	18d12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x18e>
   18cd8:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
   18cdc:	f242 7110 	movw	r1, #10000	; 0x2710
   18ce0:	4408      	add	r0, r1
   18ce2:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   18ce6:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
   18cea:	e002      	b.n	18cf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16e>
   18cec:	e040      	b.n	18d70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   18cee:	e025      	b.n	18d3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
   18cf0:	e031      	b.n	18d56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d2>
   18cf2:	49ad      	ldr	r1, [pc, #692]	; (18fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
   18cf4:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
   18cf8:	48ac      	ldr	r0, [pc, #688]	; (18fac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>)
   18cfa:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   18cfe:	49ac      	ldr	r1, [pc, #688]	; (18fb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x42c>)
   18d00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   18d04:	6008      	str	r0, [r1, #0]
   18d06:	6b20      	ldr	r0, [r4, #48]	; 0x30
   18d08:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   18d0c:	6320      	str	r0, [r4, #48]	; 0x30
   18d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d12:	2000      	movs	r0, #0
   18d14:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
   18d18:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
   18d1c:	2080      	movs	r0, #128	; 0x80
   18d1e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   18d22:	0300      	lsls	r0, r0, #12
   18d24:	f8ca 0000 	str.w	r0, [sl]
   18d28:	f8c8 6140 	str.w	r6, [r8, #320]	; 0x140
   18d2c:	2080      	movs	r0, #128	; 0x80
   18d2e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   18d32:	0300      	lsls	r0, r0, #12
   18d34:	f8ca 0000 	str.w	r0, [sl]
   18d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d3c:	f004 fd74 	bl	1d828 <mpsl_fem_pa_configuration_clear>
   18d40:	2800      	cmp	r0, #0
   18d42:	bf18      	it	ne
   18d44:	f1b0 3fff 	cmpne.w	r0, #4294967295
   18d48:	d012      	beq.n	18d70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   18d4a:	f640 01bb 	movw	r1, #2235	; 0x8bb
   18d4e:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18d52:	f7f4 f899 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18d56:	f004 fd55 	bl	1d804 <mpsl_fem_lna_configuration_clear>
   18d5a:	2800      	cmp	r0, #0
   18d5c:	bf18      	it	ne
   18d5e:	f1b0 3fff 	cmpne.w	r0, #4294967295
   18d62:	d005      	beq.n	18d70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ec>
   18d64:	f640 01c1 	movw	r1, #2241	; 0x8c1
   18d68:	f04f 003e 	mov.w	r0, #62	; 0x3e
   18d6c:	f7f4 f88c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18d70:	4986      	ldr	r1, [pc, #536]	; (18f8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
   18d72:	6b20      	ldr	r0, [r4, #48]	; 0x30
   18d74:	6008      	str	r0, [r1, #0]
   18d76:	6326      	str	r6, [r4, #48]	; 0x30
   18d78:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   18d7c:	f020 001d 	bic.w	r0, r0, #29
   18d80:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   18d84:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   18d88:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
   18d8c:	7b20      	ldrb	r0, [r4, #12]
   18d8e:	f04f 0900 	mov.w	r9, #0
   18d92:	2800      	cmp	r0, #0
   18d94:	bf1b      	ittet	ne
   18d96:	f8d8 0144 	ldrne.w	r0, [r8, #324]	; 0x144
   18d9a:	2800      	cmpne	r0, #0
   18d9c:	2000      	moveq	r0, #0
   18d9e:	2001      	movne	r0, #1
   18da0:	7a61      	ldrb	r1, [r4, #9]
   18da2:	2901      	cmp	r1, #1
   18da4:	d002      	beq.n	18dac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x228>
   18da6:	2902      	cmp	r1, #2
   18da8:	d00a      	beq.n	18dc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x23c>
   18daa:	e005      	b.n	18db8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
   18dac:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
   18db0:	2800      	cmp	r0, #0
   18db2:	bf18      	it	ne
   18db4:	f04f 0908 	movne.w	r9, #8
   18db8:	f019 0f0b 	tst.w	r9, #11
   18dbc:	d118      	bne.n	18df0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x26c>
   18dbe:	e011      	b.n	18de4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x260>
   18dc0:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
   18dc4:	2900      	cmp	r1, #0
   18dc6:	bf18      	it	ne
   18dc8:	f04f 0902 	movne.w	r9, #2
   18dcc:	4979      	ldr	r1, [pc, #484]	; (18fb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x430>)
   18dce:	6809      	ldr	r1, [r1, #0]
   18dd0:	f011 0f01 	tst.w	r1, #1
   18dd4:	bf08      	it	eq
   18dd6:	f049 0904 	orreq.w	r9, r9, #4
   18dda:	2800      	cmp	r0, #0
   18ddc:	bf18      	it	ne
   18dde:	f049 0901 	orrne.w	r9, r9, #1
   18de2:	e7e9      	b.n	18db8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x234>
   18de4:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   18de8:	2800      	cmp	r0, #0
   18dea:	bf18      	it	ne
   18dec:	f049 0910 	orrne.w	r9, r9, #16
   18df0:	4871      	ldr	r0, [pc, #452]	; (18fb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x434>)
   18df2:	7800      	ldrb	r0, [r0, #0]
   18df4:	b1c0      	cbz	r0, 18e28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a4>
   18df6:	4871      	ldr	r0, [pc, #452]	; (18fbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x438>)
   18df8:	6800      	ldr	r0, [r0, #0]
   18dfa:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   18dfe:	bf1b      	ittet	ne
   18e00:	f8d5 1114 	ldrne.w	r1, [r5, #276]	; 0x114
   18e04:	2900      	cmpne	r1, #0
   18e06:	2100      	moveq	r1, #0
   18e08:	2101      	movne	r1, #1
   18e0a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
   18e0e:	2800      	cmp	r0, #0
   18e10:	bf1b      	ittet	ne
   18e12:	f8d5 0118 	ldrne.w	r0, [r5, #280]	; 0x118
   18e16:	2800      	cmpne	r0, #0
   18e18:	2000      	moveq	r0, #0
   18e1a:	2001      	movne	r0, #1
   18e1c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
   18e20:	f8d5 0410 	ldr.w	r0, [r5, #1040]	; 0x410
   18e24:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
   18e28:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   18e2c:	2800      	cmp	r0, #0
   18e2e:	bf18      	it	ne
   18e30:	2001      	movne	r0, #1
   18e32:	f88d 0000 	strb.w	r0, [sp]
   18e36:	f8c5 6100 	str.w	r6, [r5, #256]	; 0x100
   18e3a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
   18e3e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   18e42:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
   18e46:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   18e4a:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
   18e4e:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
   18e52:	f8c5 616c 	str.w	r6, [r5, #364]	; 0x16c
   18e56:	4668      	mov	r0, sp
   18e58:	f004 fc6c 	bl	1d734 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>
   18e5c:	2800      	cmp	r0, #0
   18e5e:	bf18      	it	ne
   18e60:	f049 0910 	orrne.w	r9, r9, #16
   18e64:	f8c8 6144 	str.w	r6, [r8, #324]	; 0x144
   18e68:	f019 0f10 	tst.w	r9, #16
   18e6c:	d006      	beq.n	18e7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2f8>
   18e6e:	f019 0f08 	tst.w	r9, #8
   18e72:	bf02      	ittt	eq
   18e74:	7a60      	ldrbeq	r0, [r4, #9]
   18e76:	2801      	cmpeq	r0, #1
   18e78:	f049 0920 	orreq.w	r9, r9, #32
   18e7c:	4850      	ldr	r0, [pc, #320]	; (18fc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x43c>)
   18e7e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   18e82:	6260      	str	r0, [r4, #36]	; 0x24
   18e84:	4846      	ldr	r0, [pc, #280]	; (18fa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
   18e86:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   18e8a:	6220      	str	r0, [r4, #32]
   18e8c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   18e90:	2802      	cmp	r0, #2
   18e92:	bf1c      	itt	ne
   18e94:	7a60      	ldrbne	r0, [r4, #9]
   18e96:	2802      	cmpne	r0, #2
   18e98:	7e21      	ldrb	r1, [r4, #24]
   18e9a:	d00e      	beq.n	18eba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x336>
   18e9c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   18ea0:	7a62      	ldrb	r2, [r4, #9]
   18ea2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
   18ea6:	7a20      	ldrb	r0, [r4, #8]
   18ea8:	f04f 0a00 	mov.w	sl, #0
   18eac:	b188      	cbz	r0, 18ed2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x34e>
   18eae:	f019 0f11 	tst.w	r9, #17
   18eb2:	d013      	beq.n	18edc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
   18eb4:	f7fe ff36 	bl	17d24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   18eb8:	e03e      	b.n	18f38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
   18eba:	2904      	cmp	r1, #4
   18ebc:	bf18      	it	ne
   18ebe:	2908      	cmpne	r1, #8
   18ec0:	d1ec      	bne.n	18e9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
   18ec2:	4840      	ldr	r0, [pc, #256]	; (18fc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x440>)
   18ec4:	6800      	ldr	r0, [r0, #0]
   18ec6:	f010 0f06 	tst.w	r0, #6
   18eca:	bf0c      	ite	eq
   18ecc:	2108      	moveq	r1, #8
   18ece:	2104      	movne	r1, #4
   18ed0:	e7e4      	b.n	18e9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
   18ed2:	71e6      	strb	r6, [r4, #7]
   18ed4:	7226      	strb	r6, [r4, #8]
   18ed6:	7266      	strb	r6, [r4, #9]
   18ed8:	7326      	strb	r6, [r4, #12]
   18eda:	e02d      	b.n	18f38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
   18edc:	2801      	cmp	r0, #1
   18ede:	bf14      	ite	ne
   18ee0:	f04f 0801 	movne.w	r8, #1
   18ee4:	f04f 0800 	moveq.w	r8, #0
   18ee8:	79e0      	ldrb	r0, [r4, #7]
   18eea:	2801      	cmp	r0, #1
   18eec:	bf18      	it	ne
   18eee:	2000      	movne	r0, #0
   18ef0:	9000      	str	r0, [sp, #0]
   18ef2:	71e6      	strb	r6, [r4, #7]
   18ef4:	7226      	strb	r6, [r4, #8]
   18ef6:	7266      	strb	r6, [r4, #9]
   18ef8:	8ba0      	ldrh	r0, [r4, #28]
   18efa:	2300      	movs	r3, #0
   18efc:	b3ea      	cbz	r2, 18f7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f6>
   18efe:	f1b8 0f00 	cmp.w	r8, #0
   18f02:	d077      	beq.n	18ff4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
   18f04:	f1b8 0f00 	cmp.w	r8, #0
   18f08:	d005      	beq.n	18f16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   18f0a:	2a01      	cmp	r2, #1
   18f0c:	d07f      	beq.n	1900e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48a>
   18f0e:	f009 fddc 	bl	22aca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   18f12:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18f14:	1843      	adds	r3, r0, r1
   18f16:	9800      	ldr	r0, [sp, #0]
   18f18:	4619      	mov	r1, r3
   18f1a:	b140      	cbz	r0, 18f2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
   18f1c:	f10b 003b 	add.w	r0, fp, #59	; 0x3b
   18f20:	4288      	cmp	r0, r1
   18f22:	bf92      	itee	ls
   18f24:	71e7      	strbls	r7, [r4, #7]
   18f26:	612f      	strhi	r7, [r5, #16]
   18f28:	f04f 0a01 	movhi.w	sl, #1
   18f2c:	d804      	bhi.n	18f38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
   18f2e:	7aa2      	ldrb	r2, [r4, #10]
   18f30:	4640      	mov	r0, r8
   18f32:	f7ff fbd7 	bl	186e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   18f36:	b308      	cbz	r0, 18f7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
   18f38:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   18f3c:	b1e0      	cbz	r0, 18f78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
   18f3e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   18f42:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
   18f46:	f040 0002 	orr.w	r0, r0, #2
   18f4a:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   18f4e:	480f      	ldr	r0, [pc, #60]	; (18f8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
   18f50:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   18f54:	6001      	str	r1, [r0, #0]
   18f56:	481c      	ldr	r0, [pc, #112]	; (18fc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
   18f58:	2100      	movs	r1, #0
   18f5a:	6802      	ldr	r2, [r0, #0]
   18f5c:	f361 4213 	bfi	r2, r1, #16, #4
   18f60:	6002      	str	r2, [r0, #0]
   18f62:	6960      	ldr	r0, [r4, #20]
   18f64:	4919      	ldr	r1, [pc, #100]	; (18fcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
   18f66:	f020 0003 	bic.w	r0, r0, #3
   18f6a:	6160      	str	r0, [r4, #20]
   18f6c:	6008      	str	r0, [r1, #0]
   18f6e:	4919      	ldr	r1, [pc, #100]	; (18fd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x450>)
   18f70:	4817      	ldr	r0, [pc, #92]	; (18fd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>)
   18f72:	6008      	str	r0, [r1, #0]
   18f74:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
   18f78:	e02e      	b.n	18fd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x454>
   18f7a:	e036      	b.n	18fea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x466>
   18f7c:	e04c      	b.n	19018 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x494>
   18f7e:	e039      	b.n	18ff4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
   18f80:	40008000 	.word	0x40008000
   18f84:	4000800c 	.word	0x4000800c
   18f88:	200011c0 	.word	0x200011c0
   18f8c:	4001f508 	.word	0x4001f508
   18f90:	40001000 	.word	0x40001000
   18f94:	40001548 	.word	0x40001548
   18f98:	4000111c 	.word	0x4000111c
   18f9c:	40001574 	.word	0x40001574
   18fa0:	40008004 	.word	0x40008004
   18fa4:	40008140 	.word	0x40008140
   18fa8:	4001f098 	.word	0x4001f098
   18fac:	40001014 	.word	0x40001014
   18fb0:	4001f504 	.word	0x4001f504
   18fb4:	40001400 	.word	0x40001400
   18fb8:	2000033c 	.word	0x2000033c
   18fbc:	40001640 	.word	0x40001640
   18fc0:	40008008 	.word	0x40008008
   18fc4:	40001414 	.word	0x40001414
   18fc8:	40001514 	.word	0x40001514
   18fcc:	40001900 	.word	0x40001900
   18fd0:	00023280 	.word	0x00023280
   18fd4:	40001910 	.word	0x40001910
   18fd8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 19140 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5bc>
   18fdc:	f019 0f01 	tst.w	r9, #1
   18fe0:	d01f      	beq.n	19022 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x49e>
   18fe2:	f8d8 0000 	ldr.w	r0, [r8]
   18fe6:	4780      	blx	r0
   18fe8:	e052      	b.n	19090 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x50c>
   18fea:	f640 016e 	movw	r1, #2158	; 0x86e
   18fee:	203e      	movs	r0, #62	; 0x3e
   18ff0:	f7f3 ff4a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   18ff4:	2a01      	cmp	r2, #1
   18ff6:	d005      	beq.n	19004 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x480>
   18ff8:	f009 fd75 	bl	22ae6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   18ffc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18ffe:	1843      	adds	r3, r0, r1
   19000:	e789      	b.n	18f16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   19002:	e004      	b.n	1900e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48a>
   19004:	f000 fb52 	bl	196ac <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   19008:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1900a:	1843      	adds	r3, r0, r1
   1900c:	e783      	b.n	18f16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   1900e:	f000 fb3f 	bl	19690 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   19012:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19014:	1843      	adds	r3, r0, r1
   19016:	e77e      	b.n	18f16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x392>
   19018:	f640 21c4 	movw	r1, #2756	; 0xac4
   1901c:	203e      	movs	r0, #62	; 0x3e
   1901e:	f7f3 ff33 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19022:	f019 0f02 	tst.w	r9, #2
   19026:	d02a      	beq.n	1907e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4fa>
   19028:	f019 0f04 	tst.w	r9, #4
   1902c:	d121      	bne.n	19072 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
   1902e:	f009 ffed 	bl	2300c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   19032:	b9f0      	cbnz	r0, 19072 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
   19034:	f009 ffda 	bl	22fec <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   19038:	b9d8      	cbnz	r0, 19072 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
   1903a:	4842      	ldr	r0, [pc, #264]	; (19144 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c0>)
   1903c:	6800      	ldr	r0, [r0, #0]
   1903e:	f3c0 6b00 	ubfx	fp, r0, #24, #1
   19042:	f3c0 5342 	ubfx	r3, r0, #21, #3
   19046:	f000 020f 	and.w	r2, r0, #15
   1904a:	f3c0 1103 	ubfx	r1, r0, #4, #4
   1904e:	f3c0 2c03 	ubfx	ip, r0, #8, #4
   19052:	f1bb 0f00 	cmp.w	fp, #0
   19056:	d00c      	beq.n	19072 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
   19058:	2a00      	cmp	r2, #0
   1905a:	bf19      	ittee	ne
   1905c:	2900      	cmpne	r1, #0
   1905e:	f1bc 0f00 	cmpne.w	ip, #0
   19062:	f3c0 4004 	ubfxeq	r0, r0, #16, #5
   19066:	2801      	cmpeq	r0, #1
   19068:	d103      	bne.n	19072 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ee>
   1906a:	2b03      	cmp	r3, #3
   1906c:	bf38      	it	cc
   1906e:	f049 0904 	orrcc.w	r9, r9, #4
   19072:	ea27 0099 	bic.w	r0, r7, r9, lsr #2
   19076:	4651      	mov	r1, sl
   19078:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1907c:	e007      	b.n	1908e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x50a>
   1907e:	f019 0f28 	tst.w	r9, #40	; 0x28
   19082:	d005      	beq.n	19090 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x50c>
   19084:	f8d8 2008 	ldr.w	r2, [r8, #8]
   19088:	ea27 1159 	bic.w	r1, r7, r9, lsr #5
   1908c:	4650      	mov	r0, sl
   1908e:	4790      	blx	r2
   19090:	f019 0f10 	tst.w	r9, #16
   19094:	bf1c      	itt	ne
   19096:	f8d8 000c 	ldrne.w	r0, [r8, #12]
   1909a:	4780      	blxne	r0
   1909c:	7a60      	ldrb	r0, [r4, #9]
   1909e:	2802      	cmp	r0, #2
   190a0:	d118      	bne.n	190d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x550>
   190a2:	7b20      	ldrb	r0, [r4, #12]
   190a4:	b1b0      	cbz	r0, 190d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x550>
   190a6:	2802      	cmp	r0, #2
   190a8:	d006      	beq.n	190b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x534>
   190aa:	2801      	cmp	r0, #1
   190ac:	d035      	beq.n	1911a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x596>
   190ae:	f640 4166 	movw	r1, #3174	; 0xc66
   190b2:	203e      	movs	r0, #62	; 0x3e
   190b4:	f7f3 fee8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   190b8:	6921      	ldr	r1, [r4, #16]
   190ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   190bc:	4408      	add	r0, r1
   190be:	4922      	ldr	r1, [pc, #136]	; (19148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c4>)
   190c0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   190c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   190c6:	4921      	ldr	r1, [pc, #132]	; (1914c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c8>)
   190c8:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   190cc:	6320      	str	r0, [r4, #48]	; 0x30
   190ce:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   190d2:	6008      	str	r0, [r1, #0]
   190d4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   190d8:	2800      	cmp	r0, #0
   190da:	bf18      	it	ne
   190dc:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190e0:	f019 0f10 	tst.w	r9, #16
   190e4:	bf14      	ite	ne
   190e6:	9600      	strne	r6, [sp, #0]
   190e8:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190ec:	9800      	ldr	r0, [sp, #0]
   190ee:	1c40      	adds	r0, r0, #1
   190f0:	9000      	str	r0, [sp, #0]
   190f2:	f1b0 3fff 	cmp.w	r0, #4294967295
   190f6:	d01d      	beq.n	19134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>
   190f8:	f8d5 0550 	ldr.w	r0, [r5, #1360]	; 0x550
   190fc:	b2c0      	uxtb	r0, r0
   190fe:	2804      	cmp	r0, #4
   19100:	bf18      	it	ne
   19102:	280c      	cmpne	r0, #12
   19104:	d0f2      	beq.n	190ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
   19106:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   1910a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1910e:	f04f 0002 	mov.w	r0, #2
   19112:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
   19116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1911a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1911c:	6920      	ldr	r0, [r4, #16]
   1911e:	4288      	cmp	r0, r1
   19120:	bf84      	itt	hi
   19122:	4909      	ldrhi	r1, [pc, #36]	; (19148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5c4>)
   19124:	f8c1 0540 	strhi.w	r0, [r1, #1344]	; 0x540
   19128:	d8cc      	bhi.n	190c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x540>
   1912a:	f640 4167 	movw	r1, #3175	; 0xc67
   1912e:	203e      	movs	r0, #62	; 0x3e
   19130:	f7f3 feaa 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19134:	f640 418f 	movw	r1, #3215	; 0xc8f
   19138:	203e      	movs	r0, #62	; 0x3e
   1913a:	f7f3 fea5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1913e:	0000      	.short	0x0000
   19140:	200011b0 	.word	0x200011b0
   19144:	40001450 	.word	0x40001450
   19148:	40008004 	.word	0x40008004
   1914c:	4001f504 	.word	0x4001f504

00019150 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA>:
   19150:	b570      	push	{r4, r5, r6, lr}
   19152:	4b28      	ldr	r3, [pc, #160]	; (191f4 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xa4>)
   19154:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19158:	f022 0202 	bic.w	r2, r2, #2
   1915c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   19160:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   19164:	4a25      	ldr	r2, [pc, #148]	; (191fc <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xac>)
   19166:	4b24      	ldr	r3, [pc, #144]	; (191f8 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xa8>)
   19168:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1916c:	4b24      	ldr	r3, [pc, #144]	; (19200 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xb0>)
   1916e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   19172:	4b24      	ldr	r3, [pc, #144]	; (19204 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xb4>)
   19174:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   19178:	601a      	str	r2, [r3, #0]
   1917a:	7802      	ldrb	r2, [r0, #0]
   1917c:	2a03      	cmp	r2, #3
   1917e:	d004      	beq.n	1918a <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0x3a>
   19180:	f240 3149 	movw	r1, #841	; 0x349
   19184:	203e      	movs	r0, #62	; 0x3e
   19186:	f7f3 fe7f 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1918a:	4b22      	ldr	r3, [pc, #136]	; (19214 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xc4>)
   1918c:	2901      	cmp	r1, #1
   1918e:	f8df c078 	ldr.w	ip, [pc, #120]	; 19208 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xb8>
   19192:	695a      	ldr	r2, [r3, #20]
   19194:	4c1d      	ldr	r4, [pc, #116]	; (1920c <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xbc>)
   19196:	4d1e      	ldr	r5, [pc, #120]	; (19210 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0xc0>)
   19198:	7841      	ldrb	r1, [r0, #1]
   1919a:	f022 0203 	bic.w	r2, r2, #3
   1919e:	d015      	beq.n	191cc <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0x7c>
   191a0:	f8dc 6000 	ldr.w	r6, [ip]
   191a4:	2000      	movs	r0, #0
   191a6:	f360 4613 	bfi	r6, r0, #16, #4
   191aa:	f8cc 6000 	str.w	r6, [ip]
   191ae:	f042 0003 	orr.w	r0, r2, #3
   191b2:	6158      	str	r0, [r3, #20]
   191b4:	6020      	str	r0, [r4, #0]
   191b6:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   191ba:	f440 504a 	orr.w	r0, r0, #12928	; 0x3280
   191be:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
   191c2:	6028      	str	r0, [r5, #0]
   191c4:	2001      	movs	r0, #1
   191c6:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
   191ca:	bd70      	pop	{r4, r5, r6, pc}
   191cc:	f8dc 6000 	ldr.w	r6, [ip]
   191d0:	2008      	movs	r0, #8
   191d2:	f360 4613 	bfi	r6, r0, #16, #4
   191d6:	f8cc 6000 	str.w	r6, [ip]
   191da:	f042 0003 	orr.w	r0, r2, #3
   191de:	6158      	str	r0, [r3, #20]
   191e0:	6020      	str	r0, [r4, #0]
   191e2:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   191e6:	f440 504a 	orr.w	r0, r0, #12928	; 0x3280
   191ea:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
   191ee:	6028      	str	r0, [r5, #0]
   191f0:	e7e8      	b.n	191c4 <sym_FY64OI6JRV3CK6UZDJBVOPA33ZIK3BGBMGMWYKA+0x74>
   191f2:	0000      	.short	0x0000
   191f4:	40001000 	.word	0x40001000
   191f8:	4000112c 	.word	0x4000112c
   191fc:	4001f090 	.word	0x4001f090
   19200:	40008048 	.word	0x40008048
   19204:	4001f504 	.word	0x4001f504
   19208:	40001514 	.word	0x40001514
   1920c:	40001900 	.word	0x40001900
   19210:	40001910 	.word	0x40001910
   19214:	200011c0 	.word	0x200011c0

00019218 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
   19218:	b510      	push	{r4, lr}
   1921a:	4b19      	ldr	r3, [pc, #100]	; (19280 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x68>)
   1921c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
   19220:	eb03 0480 	add.w	r4, r3, r0, lsl #2
   19224:	f8c4 c620 	str.w	ip, [r4, #1568]	; 0x620
   19228:	f891 c000 	ldrb.w	ip, [r1]
   1922c:	f8d1 1001 	ldr.w	r1, [r1, #1]
   19230:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   19234:	f8c4 1600 	str.w	r1, [r4, #1536]	; 0x600
   19238:	4912      	ldr	r1, [pc, #72]	; (19284 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x6c>)
   1923a:	f8d1 c000 	ldr.w	ip, [r1]
   1923e:	2101      	movs	r1, #1
   19240:	fa01 f000 	lsl.w	r0, r1, r0
   19244:	ea4c 0100 	orr.w	r1, ip, r0
   19248:	b2c9      	uxtb	r1, r1
   1924a:	b132      	cbz	r2, 1925a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42>
   1924c:	2a01      	cmp	r2, #1
   1924e:	d00b      	beq.n	19268 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
   19250:	f240 51d4 	movw	r1, #1492	; 0x5d4
   19254:	203e      	movs	r0, #62	; 0x3e
   19256:	f7f3 fe17 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1925a:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
   1925e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19262:	ea22 0000 	bic.w	r0, r2, r0
   19266:	e005      	b.n	19274 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>
   19268:	f8d3 2640 	ldr.w	r2, [r3, #1600]	; 0x640
   1926c:	b2c0      	uxtb	r0, r0
   1926e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19272:	4310      	orrs	r0, r2
   19274:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   19278:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   1927c:	bd10      	pop	{r4, pc}
   1927e:	0000      	.short	0x0000
   19280:	40001000 	.word	0x40001000
   19284:	40001640 	.word	0x40001640

00019288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
   19288:	4901      	ldr	r1, [pc, #4]	; (19290 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
   1928a:	2001      	movs	r0, #1
   1928c:	7008      	strb	r0, [r1, #0]
   1928e:	4770      	bx	lr
   19290:	2000033c 	.word	0x2000033c
   19294:	4a0e      	ldr	r2, [pc, #56]	; (192d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>)
   19296:	490f      	ldr	r1, [pc, #60]	; (192d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c>)
   19298:	6813      	ldr	r3, [r2, #0]
   1929a:	b170      	cbz	r0, 192ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32>
   1929c:	f023 0382 	bic.w	r3, r3, #130	; 0x82
   192a0:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   192a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   192a8:	6013      	str	r3, [r2, #0]
   192aa:	680a      	ldr	r2, [r1, #0]
   192ac:	f022 0210 	bic.w	r2, r2, #16
   192b0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   192b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   192b8:	e005      	b.n	192c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e>
   192ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   192be:	6013      	str	r3, [r2, #0]
   192c0:	680a      	ldr	r2, [r1, #0]
   192c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   192c6:	600a      	str	r2, [r1, #0]
   192c8:	4903      	ldr	r1, [pc, #12]	; (192d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x50>)
   192ca:	f881 0036 	strb.w	r0, [r1, #54]	; 0x36
   192ce:	4770      	bx	lr
   192d0:	4000173c 	.word	0x4000173c
   192d4:	4000177c 	.word	0x4000177c
   192d8:	200011c0 	.word	0x200011c0
   192dc:	4908      	ldr	r1, [pc, #32]	; (19300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
   192de:	7a4a      	ldrb	r2, [r1, #9]
   192e0:	2101      	movs	r1, #1
   192e2:	2a01      	cmp	r2, #1
   192e4:	bf08      	it	eq
   192e6:	ea21 0090 	biceq.w	r0, r1, r0, lsr #2
   192ea:	d004      	beq.n	192f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
   192ec:	2a02      	cmp	r2, #2
   192ee:	bf0c      	ite	eq
   192f0:	ea21 0050 	biceq.w	r0, r1, r0, lsr #1
   192f4:	4770      	bxne	lr
   192f6:	2800      	cmp	r0, #0
   192f8:	bf1c      	itt	ne
   192fa:	4802      	ldrne	r0, [pc, #8]	; (19304 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
   192fc:	6101      	strne	r1, [r0, #16]
   192fe:	4770      	bx	lr
   19300:	200011c0 	.word	0x200011c0
   19304:	40001000 	.word	0x40001000
   19308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1930a:	4c3b      	ldr	r4, [pc, #236]	; (193f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x170>)
   1930c:	4605      	mov	r5, r0
   1930e:	2d01      	cmp	r5, #1
   19310:	7620      	strb	r0, [r4, #24]
   19312:	483a      	ldr	r0, [pc, #232]	; (193fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x174>)
   19314:	bf08      	it	eq
   19316:	2103      	moveq	r1, #3
   19318:	d010      	beq.n	1933c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   1931a:	2d02      	cmp	r5, #2
   1931c:	bf08      	it	eq
   1931e:	2104      	moveq	r1, #4
   19320:	d00c      	beq.n	1933c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   19322:	2d04      	cmp	r5, #4
   19324:	bf08      	it	eq
   19326:	2106      	moveq	r1, #6
   19328:	d008      	beq.n	1933c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   1932a:	2d08      	cmp	r5, #8
   1932c:	bf08      	it	eq
   1932e:	2105      	moveq	r1, #5
   19330:	d004      	beq.n	1933c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
   19332:	f640 5186 	movw	r1, #3462	; 0xd86
   19336:	203e      	movs	r0, #62	; 0x3e
   19338:	f7f3 fda6 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1933c:	6001      	str	r1, [r0, #0]
   1933e:	7ea1      	ldrb	r1, [r4, #26]
   19340:	482f      	ldr	r0, [pc, #188]	; (19400 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x178>)
   19342:	5c40      	ldrb	r0, [r0, r1]
   19344:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   19348:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   1934c:	bf3a      	itte	cc
   1934e:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
   19352:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
   19356:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
   1935a:	4e2a      	ldr	r6, [pc, #168]	; (19404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>)
   1935c:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
   19360:	4a29      	ldr	r2, [pc, #164]	; (19408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>)
   19362:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   19366:	6010      	str	r0, [r2, #0]
   19368:	7a20      	ldrb	r0, [r4, #8]
   1936a:	2801      	cmp	r0, #1
   1936c:	d113      	bne.n	19396 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x10e>
   1936e:	7aa0      	ldrb	r0, [r4, #10]
   19370:	f994 2019 	ldrsb.w	r2, [r4, #25]
   19374:	466b      	mov	r3, sp
   19376:	f000 f9c3 	bl	19700 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   1937a:	f99d 0000 	ldrsb.w	r0, [sp]
   1937e:	f000 f981 	bl	19684 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   19382:	f10d 0001 	add.w	r0, sp, #1
   19386:	f004 fa5b 	bl	1d840 <mpsl_fem_pa_gain_set>
   1938a:	b120      	cbz	r0, 19396 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x10e>
   1938c:	f240 6115 	movw	r1, #1557	; 0x615
   19390:	203e      	movs	r0, #62	; 0x3e
   19392:	f7f3 fd79 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19396:	20ff      	movs	r0, #255	; 0xff
   19398:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   1939c:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   193a0:	f440 7088 	orr.w	r0, r0, #272	; 0x110
   193a4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
   193a8:	f009 fe4a 	bl	23040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   193ac:	b180      	cbz	r0, 193d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   193ae:	f015 0f0c 	tst.w	r5, #12
   193b2:	d00a      	beq.n	193ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x142>
   193b4:	2001      	movs	r0, #1
   193b6:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
   193ba:	f7ff ff6b 	bl	19294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   193be:	2001      	movs	r0, #1
   193c0:	63f0      	str	r0, [r6, #60]	; 0x3c
   193c2:	6430      	str	r0, [r6, #64]	; 0x40
   193c4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
   193c8:	e002      	b.n	193d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
   193ca:	2000      	movs	r0, #0
   193cc:	f7ff ff62 	bl	19294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
   193d0:	4628      	mov	r0, r5
   193d2:	f000 f8fd 	bl	195d0 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>
   193d6:	f009 fe19 	bl	2300c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   193da:	2800      	cmp	r0, #0
   193dc:	bf18      	it	ne
   193de:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   193e0:	f009 fe04 	bl	22fec <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   193e4:	2800      	cmp	r0, #0
   193e6:	bf18      	it	ne
   193e8:	bdf8      	popne	{r3, r4, r5, r6, r7, pc}
   193ea:	4808      	ldr	r0, [pc, #32]	; (1940c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>)
   193ec:	6801      	ldr	r1, [r0, #0]
   193ee:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
   193f2:	6001      	str	r1, [r0, #0]
   193f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   193f6:	0000      	.short	0x0000
   193f8:	200011c0 	.word	0x200011c0
   193fc:	40001510 	.word	0x40001510
   19400:	00019500 	.word	0x00019500
   19404:	40001000 	.word	0x40001000
   19408:	40001554 	.word	0x40001554
   1940c:	40001568 	.word	0x40001568
   19410:	b538      	push	{r3, r4, r5, lr}
   19412:	4a2c      	ldr	r2, [pc, #176]	; (194c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>)
   19414:	4604      	mov	r4, r0
   19416:	2c01      	cmp	r4, #1
   19418:	7610      	strb	r0, [r2, #24]
   1941a:	482b      	ldr	r0, [pc, #172]	; (194c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x240>)
   1941c:	bf08      	it	eq
   1941e:	2103      	moveq	r1, #3
   19420:	d010      	beq.n	19444 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   19422:	2c02      	cmp	r4, #2
   19424:	bf08      	it	eq
   19426:	2104      	moveq	r1, #4
   19428:	d00c      	beq.n	19444 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   1942a:	2c04      	cmp	r4, #4
   1942c:	bf08      	it	eq
   1942e:	2106      	moveq	r1, #6
   19430:	d008      	beq.n	19444 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   19432:	2c08      	cmp	r4, #8
   19434:	bf08      	it	eq
   19436:	2105      	moveq	r1, #5
   19438:	d004      	beq.n	19444 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
   1943a:	f640 5186 	movw	r1, #3462	; 0xd86
   1943e:	203e      	movs	r0, #62	; 0x3e
   19440:	f7f3 fd22 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19444:	6001      	str	r1, [r0, #0]
   19446:	7e91      	ldrb	r1, [r2, #26]
   19448:	4820      	ldr	r0, [pc, #128]	; (194cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>)
   1944a:	5c40      	ldrb	r0, [r0, r1]
   1944c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   19450:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   19454:	bf3a      	itte	cc
   19456:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
   1945a:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
   1945e:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
   19462:	4b1b      	ldr	r3, [pc, #108]	; (194d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>)
   19464:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   19468:	4b1a      	ldr	r3, [pc, #104]	; (194d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24c>)
   1946a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   1946e:	6018      	str	r0, [r3, #0]
   19470:	4620      	mov	r0, r4
   19472:	f992 2019 	ldrsb.w	r2, [r2, #25]
   19476:	466b      	mov	r3, sp
   19478:	f000 f942 	bl	19700 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   1947c:	f99d 0000 	ldrsb.w	r0, [sp]
   19480:	f000 f900 	bl	19684 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   19484:	f10d 0001 	add.w	r0, sp, #1
   19488:	f004 f9da 	bl	1d840 <mpsl_fem_pa_gain_set>
   1948c:	b120      	cbz	r0, 19498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x210>
   1948e:	f240 6115 	movw	r1, #1557	; 0x615
   19492:	203e      	movs	r0, #62	; 0x3e
   19494:	f7f3 fcf8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19498:	f009 fdb8 	bl	2300c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   1949c:	2800      	cmp	r0, #0
   1949e:	bf08      	it	eq
   194a0:	bd38      	popeq	{r3, r4, r5, pc}
   194a2:	4a0d      	ldr	r2, [pc, #52]	; (194d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x250>)
   194a4:	6811      	ldr	r1, [r2, #0]
   194a6:	0650      	lsls	r0, r2, #25
   194a8:	2c02      	cmp	r4, #2
   194aa:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
   194ae:	bf0c      	ite	eq
   194b0:	f3c0 6006 	ubfxeq	r0, r0, #24, #7
   194b4:	f3c0 2006 	ubfxne	r0, r0, #8, #7
   194b8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
   194bc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   194c0:	6010      	str	r0, [r2, #0]
   194c2:	bd38      	pop	{r3, r4, r5, pc}
   194c4:	200011c0 	.word	0x200011c0
   194c8:	40001510 	.word	0x40001510
   194cc:	00019500 	.word	0x00019500
   194d0:	40001000 	.word	0x40001000
   194d4:	40001554 	.word	0x40001554
   194d8:	40001588 	.word	0x40001588
   194dc:	05dc0000 	.word	0x05dc0000
   194e0:	000003e8 	.word	0x000003e8
	...
   194ec:	000017d4 	.word	0x000017d4
   194f0:	a1e0a62c 	.word	0xa1e0a62c
   194f4:	a8200000 	.word	0xa8200000
   194f8:	00000000 	.word	0x00000000
   194fc:	a8200000 	.word	0xa8200000
   19500:	0a080604 	.word	0x0a080604
   19504:	12100e0c 	.word	0x12100e0c
   19508:	1c181614 	.word	0x1c181614
   1950c:	2422201e 	.word	0x2422201e
   19510:	2c2a2826 	.word	0x2c2a2826
   19514:	3432302e 	.word	0x3432302e
   19518:	3c3a3836 	.word	0x3c3a3836
   1951c:	4442403e 	.word	0x4442403e
   19520:	4c4a4846 	.word	0x4c4a4846
   19524:	501a024e 	.word	0x501a024e
   19528:	00000001 	.word	0x00000001
   1952c:	40001110 	.word	0x40001110
	...
   19544:	00001e14 	.word	0x00001e14
   19548:	00001130 	.word	0x00001130
   1954c:	00000000 	.word	0x00000000
   19550:	0000ea60 	.word	0x0000ea60
	...
   19560:	0000ea60 	.word	0x0000ea60
   19564:	00000000 	.word	0x00000000
   19568:	00000028 	.word	0x00000028
   1956c:	00000018 	.word	0x00000018
   19570:	00000000 	.word	0x00000000
   19574:	00000150 	.word	0x00000150
	...
   19584:	00000150 	.word	0x00000150
   19588:	00000000 	.word	0x00000000
   1958c:	00001e14 	.word	0x00001e14
   19590:	00001130 	.word	0x00001130
   19594:	00000000 	.word	0x00000000
   19598:	00005fb4 	.word	0x00005fb4
	...
   195a8:	0000733c 	.word	0x0000733c
   195ac:	00000000 	.word	0x00000000
   195b0:	00001770 	.word	0x00001770
   195b4:	00000fa0 	.word	0x00000fa0
   195b8:	00000000 	.word	0x00000000
   195bc:	0000283c 	.word	0x0000283c
	...
   195cc:	0000283c 	.word	0x0000283c

000195d0 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI>:
   195d0:	b510      	push	{r4, lr}
   195d2:	4604      	mov	r4, r0
   195d4:	f009 fd34 	bl	23040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   195d8:	2800      	cmp	r0, #0
   195da:	bf08      	it	eq
   195dc:	bd10      	popeq	{r4, pc}
   195de:	4908      	ldr	r1, [pc, #32]	; (19600 <sym_MEIHG7NCZGGHWUGVLRGXMDTZB2OODFJAGHVWGLI+0x30>)
   195e0:	2c08      	cmp	r4, #8
   195e2:	bf18      	it	ne
   195e4:	2c04      	cmpne	r4, #4
   195e6:	6808      	ldr	r0, [r1, #0]
   195e8:	bf03      	ittte	eq
   195ea:	f420 506c 	biceq.w	r0, r0, #15104	; 0x3b00
   195ee:	f440 4044 	orreq.w	r0, r0, #50176	; 0xc400
   195f2:	f040 4000 	orreq.w	r0, r0, #2147483648	; 0x80000000
   195f6:	f020 4000 	bicne.w	r0, r0, #2147483648	; 0x80000000
   195fa:	6008      	str	r0, [r1, #0]
   195fc:	bd10      	pop	{r4, pc}
   195fe:	0000      	.short	0x0000
   19600:	40001740 	.word	0x40001740

00019604 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   19604:	b570      	push	{r4, r5, r6, lr}
   19606:	4605      	mov	r5, r0
   19608:	4614      	mov	r4, r2
   1960a:	4608      	mov	r0, r1
   1960c:	f7ff f864 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   19610:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   19614:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   19618:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
   1961c:	4807      	ldr	r0, [pc, #28]	; (1963c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
   1961e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   19622:	4408      	add	r0, r1
   19624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19628:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1962c:	fbb0 f5f1 	udiv	r5, r0, r1
   19630:	4620      	mov	r0, r4
   19632:	f7ff f803 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   19636:	4428      	add	r0, r5
   19638:	1d40      	adds	r0, r0, #5
   1963a:	bd70      	pop	{r4, r5, r6, pc}
   1963c:	000196dc 	.word	0x000196dc

00019640 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   19640:	b570      	push	{r4, r5, r6, lr}
   19642:	f8df c03c 	ldr.w	ip, [pc, #60]	; 19680 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x40>
   19646:	461c      	mov	r4, r3
   19648:	4b0c      	ldr	r3, [pc, #48]	; (1967c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
   1964a:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
   1964e:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
   19652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19656:	ebcc 10c0 	rsb	r0, ip, r0, lsl #7
   1965a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1965e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
   19662:	4418      	add	r0, r3
   19664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19668:	fbb0 f5f1 	udiv	r5, r0, r1
   1966c:	4610      	mov	r0, r2
   1966e:	f7fe ffe5 	bl	1863c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   19672:	4428      	add	r0, r5
   19674:	4420      	add	r0, r4
   19676:	1d40      	adds	r0, r0, #5
   19678:	bd70      	pop	{r4, r5, r6, pc}
   1967a:	0000      	.short	0x0000
   1967c:	000196dc 	.word	0x000196dc
   19680:	000196c8 	.word	0x000196c8

00019684 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
   19684:	4901      	ldr	r1, [pc, #4]	; (1968c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
   19686:	b2c0      	uxtb	r0, r0
   19688:	6008      	str	r0, [r1, #0]
   1968a:	4770      	bx	lr
   1968c:	4000150c 	.word	0x4000150c

00019690 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   19690:	4a05      	ldr	r2, [pc, #20]	; (196a8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
   19692:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   19696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1969a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1969e:	fbb1 f1f2 	udiv	r1, r1, r2
   196a2:	4408      	add	r0, r1
   196a4:	1e80      	subs	r0, r0, #2
   196a6:	4770      	bx	lr
   196a8:	000196c8 	.word	0x000196c8

000196ac <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   196ac:	4a05      	ldr	r2, [pc, #20]	; (196c4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
   196ae:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   196b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   196b6:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   196ba:	fbb1 f1f2 	udiv	r1, r1, r2
   196be:	4408      	add	r0, r1
   196c0:	4770      	bx	lr
   196c2:	0000      	.short	0x0000
   196c4:	000196c8 	.word	0x000196c8
   196c8:	05dc0000 	.word	0x05dc0000
   196cc:	000003e8 	.word	0x000003e8
	...
   196d8:	000017d4 	.word	0x000017d4
   196dc:	00000000 	.word	0x00000000
   196e0:	00001e14 	.word	0x00001e14
   196e4:	00001130 	.word	0x00001130
   196e8:	00000000 	.word	0x00000000
   196ec:	0000ea60 	.word	0x0000ea60
	...
   196fc:	0000ea60 	.word	0x0000ea60

00019700 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
   19700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19704:	461e      	mov	r6, r3
   19706:	4690      	mov	r8, r2
   19708:	460f      	mov	r7, r1
   1970a:	4605      	mov	r5, r0
   1970c:	f000 f85a 	bl	197c4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
   19710:	4c25      	ldr	r4, [pc, #148]	; (197a8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa8>)
   19712:	4681      	mov	r9, r0
   19714:	7820      	ldrb	r0, [r4, #0]
   19716:	42a8      	cmp	r0, r5
   19718:	bf04      	itt	eq
   1971a:	7860      	ldrbeq	r0, [r4, #1]
   1971c:	42b8      	cmpeq	r0, r7
   1971e:	d10b      	bne.n	19738 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
   19720:	f994 0002 	ldrsb.w	r0, [r4, #2]
   19724:	4540      	cmp	r0, r8
   19726:	bf04      	itt	eq
   19728:	78e0      	ldrbeq	r0, [r4, #3]
   1972a:	4548      	cmpeq	r0, r9
   1972c:	d104      	bne.n	19738 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x38>
   1972e:	88a0      	ldrh	r0, [r4, #4]
   19730:	8030      	strh	r0, [r6, #0]
   19732:	79a0      	ldrb	r0, [r4, #6]
   19734:	70b0      	strb	r0, [r6, #2]
   19736:	e033      	b.n	197a0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xa0>
   19738:	4642      	mov	r2, r8
   1973a:	2d01      	cmp	r5, #1
   1973c:	bf08      	it	eq
   1973e:	2000      	moveq	r0, #0
   19740:	d010      	beq.n	19764 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   19742:	2d02      	cmp	r5, #2
   19744:	bf08      	it	eq
   19746:	2001      	moveq	r0, #1
   19748:	d00c      	beq.n	19764 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1974a:	2d04      	cmp	r5, #4
   1974c:	bf08      	it	eq
   1974e:	2003      	moveq	r0, #3
   19750:	d008      	beq.n	19764 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   19752:	2d08      	cmp	r5, #8
   19754:	bf08      	it	eq
   19756:	2002      	moveq	r0, #2
   19758:	d004      	beq.n	19764 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   1975a:	f240 4162 	movw	r1, #1122	; 0x462
   1975e:	2006      	movs	r0, #6
   19760:	f7f3 fb92 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19764:	466b      	mov	r3, sp
   19766:	4639      	mov	r1, r7
   19768:	f000 f8a4 	bl	198b4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
   1976c:	b118      	cbz	r0, 19776 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
   1976e:	213d      	movs	r1, #61	; 0x3d
   19770:	2075      	movs	r0, #117	; 0x75
   19772:	f7f3 fb89 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   19776:	4638      	mov	r0, r7
   19778:	f7fe facc 	bl	17d14 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
   1977c:	4602      	mov	r2, r0
   1977e:	2300      	movs	r3, #0
   19780:	4631      	mov	r1, r6
   19782:	f99d 0000 	ldrsb.w	r0, [sp]
   19786:	f004 f867 	bl	1d858 <mpsl_fem_tx_power_split>
   1978a:	71e0      	strb	r0, [r4, #7]
   1978c:	8830      	ldrh	r0, [r6, #0]
   1978e:	80a0      	strh	r0, [r4, #4]
   19790:	78b0      	ldrb	r0, [r6, #2]
   19792:	71a0      	strb	r0, [r4, #6]
   19794:	7025      	strb	r5, [r4, #0]
   19796:	7067      	strb	r7, [r4, #1]
   19798:	f884 8002 	strb.w	r8, [r4, #2]
   1979c:	f884 9003 	strb.w	r9, [r4, #3]
   197a0:	f994 0007 	ldrsb.w	r0, [r4, #7]
   197a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   197a8:	2000042d 	.word	0x2000042d

000197ac <sym_J56TGVTWOJVG4QNSVN7ORTC7AKSOICPGYZ3JG6A>:
   197ac:	4901      	ldr	r1, [pc, #4]	; (197b4 <sym_J56TGVTWOJVG4QNSVN7ORTC7AKSOICPGYZ3JG6A+0x8>)
   197ae:	6008      	str	r0, [r1, #0]
   197b0:	4770      	bx	lr
   197b2:	0000      	.short	0x0000
   197b4:	2000035c 	.word	0x2000035c

000197b8 <sym_GNNG3GPFBTJTB7WCYU4SVHQQOQZGAXXXZFSD6PY>:
   197b8:	4901      	ldr	r1, [pc, #4]	; (197c0 <sym_GNNG3GPFBTJTB7WCYU4SVHQQOQZGAXXXZFSD6PY+0x8>)
   197ba:	6048      	str	r0, [r1, #4]
   197bc:	4770      	bx	lr
   197be:	0000      	.short	0x0000
   197c0:	2000035c 	.word	0x2000035c

000197c4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
   197c4:	4801      	ldr	r0, [pc, #4]	; (197cc <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
   197c6:	7800      	ldrb	r0, [r0, #0]
   197c8:	4770      	bx	lr
   197ca:	0000      	.short	0x0000
   197cc:	20000364 	.word	0x20000364

000197d0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
   197d0:	b570      	push	{r4, r5, r6, lr}
   197d2:	4c17      	ldr	r4, [pc, #92]	; (19830 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
   197d4:	7860      	ldrb	r0, [r4, #1]
   197d6:	2800      	cmp	r0, #0
   197d8:	d123      	bne.n	19822 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
   197da:	2001      	movs	r0, #1
   197dc:	7060      	strb	r0, [r4, #1]
   197de:	f009 fbef 	bl	22fc0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   197e2:	f06f 0527 	mvn.w	r5, #39	; 0x27
   197e6:	b928      	cbnz	r0, 197f4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
   197e8:	f009 fc20 	bl	2302c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   197ec:	b910      	cbnz	r0, 197f4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
   197ee:	f009 fc27 	bl	23040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   197f2:	b120      	cbz	r0, 197fe <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
   197f4:	480f      	ldr	r0, [pc, #60]	; (19834 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
   197f6:	6060      	str	r0, [r4, #4]
   197f8:	70a5      	strb	r5, [r4, #2]
   197fa:	2008      	movs	r0, #8
   197fc:	e010      	b.n	19820 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
   197fe:	f009 fbb4 	bl	22f6a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   19802:	b940      	cbnz	r0, 19816 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
   19804:	f009 fbbb 	bl	22f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   19808:	b928      	cbnz	r0, 19816 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
   1980a:	f009 fbcf 	bl	22fac <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1980e:	b910      	cbnz	r0, 19816 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
   19810:	f009 fbe0 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   19814:	b130      	cbz	r0, 19824 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
   19816:	4807      	ldr	r0, [pc, #28]	; (19834 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
   19818:	3031      	adds	r0, #49	; 0x31
   1981a:	6060      	str	r0, [r4, #4]
   1981c:	70a5      	strb	r5, [r4, #2]
   1981e:	2004      	movs	r0, #4
   19820:	70e0      	strb	r0, [r4, #3]
   19822:	bd70      	pop	{r4, r5, r6, pc}
   19824:	f240 113f 	movw	r1, #319	; 0x13f
   19828:	2074      	movs	r0, #116	; 0x74
   1982a:	f003 fd8b 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1982e:	0000      	.short	0x0000
   19830:	20000364 	.word	0x20000364
   19834:	0002346f 	.word	0x0002346f

00019838 <mpsl_tx_power_radio_supported_power_adjust>:
   19838:	4a06      	ldr	r2, [pc, #24]	; (19854 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
   1983a:	b500      	push	{lr}
   1983c:	f992 2003 	ldrsb.w	r2, [r2, #3]
   19840:	4290      	cmp	r0, r2
   19842:	db01      	blt.n	19848 <mpsl_tx_power_radio_supported_power_adjust+0x10>
   19844:	4610      	mov	r0, r2
   19846:	bd00      	pop	{pc}
   19848:	f000 f808 	bl	1985c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
   1984c:	4902      	ldr	r1, [pc, #8]	; (19858 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
   1984e:	5608      	ldrsb	r0, [r1, r0]
   19850:	bd00      	pop	{pc}
   19852:	0000      	.short	0x0000
   19854:	20000364 	.word	0x20000364
   19858:	00023461 	.word	0x00023461

0001985c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
   1985c:	4602      	mov	r2, r0
   1985e:	4813      	ldr	r0, [pc, #76]	; (198ac <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
   19860:	b510      	push	{r4, lr}
   19862:	f990 3003 	ldrsb.w	r3, [r0, #3]
   19866:	429a      	cmp	r2, r3
   19868:	db01      	blt.n	1986e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
   1986a:	200d      	movs	r0, #13
   1986c:	bd10      	pop	{r4, pc}
   1986e:	f990 3002 	ldrsb.w	r3, [r0, #2]
   19872:	429a      	cmp	r2, r3
   19874:	dc01      	bgt.n	1987a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
   19876:	2000      	movs	r0, #0
   19878:	bd10      	pop	{r4, pc}
   1987a:	b101      	cbz	r1, 1987e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
   1987c:	2101      	movs	r1, #1
   1987e:	1ad4      	subs	r4, r2, r3
   19880:	6843      	ldr	r3, [r0, #4]
   19882:	5d18      	ldrb	r0, [r3, r4]
   19884:	4c0a      	ldr	r4, [pc, #40]	; (198b0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
   19886:	5624      	ldrsb	r4, [r4, r0]
   19888:	4294      	cmp	r4, r2
   1988a:	d0f5      	beq.n	19878 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   1988c:	4c08      	ldr	r4, [pc, #32]	; (198b0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
   1988e:	4408      	add	r0, r1
   19890:	343f      	adds	r4, #63	; 0x3f
   19892:	b2c0      	uxtb	r0, r0
   19894:	b2d2      	uxtb	r2, r2
   19896:	42a3      	cmp	r3, r4
   19898:	d1ee      	bne.n	19878 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   1989a:	2900      	cmp	r1, #0
   1989c:	d0ec      	beq.n	19878 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   1989e:	2a01      	cmp	r2, #1
   198a0:	d001      	beq.n	198a6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
   198a2:	2a02      	cmp	r2, #2
   198a4:	d1e8      	bne.n	19878 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   198a6:	1c40      	adds	r0, r0, #1
   198a8:	b2c0      	uxtb	r0, r0
   198aa:	bd10      	pop	{r4, pc}
   198ac:	20000364 	.word	0x20000364
   198b0:	00023461 	.word	0x00023461

000198b4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
   198b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198b8:	461c      	mov	r4, r3
   198ba:	4690      	mov	r8, r2
   198bc:	460d      	mov	r5, r1
   198be:	4606      	mov	r6, r0
   198c0:	f06f 0715 	mvn.w	r7, #21
   198c4:	2804      	cmp	r0, #4
   198c6:	d804      	bhi.n	198d2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
   198c8:	b11c      	cbz	r4, 198d2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
   198ca:	f009 f920 	bl	22b0e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x8>
   198ce:	42a8      	cmp	r0, r5
   198d0:	d802      	bhi.n	198d8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
   198d2:	4638      	mov	r0, r7
   198d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198d8:	4805      	ldr	r0, [pc, #20]	; (198f0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
   198da:	4642      	mov	r2, r8
   198dc:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   198e0:	b118      	cbz	r0, 198ea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
   198e2:	5740      	ldrsb	r0, [r0, r5]
   198e4:	4282      	cmp	r2, r0
   198e6:	dd00      	ble.n	198ea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
   198e8:	4602      	mov	r2, r0
   198ea:	7022      	strb	r2, [r4, #0]
   198ec:	2000      	movs	r0, #0
   198ee:	e7f1      	b.n	198d4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
   198f0:	20001208 	.word	0x20001208
   198f4:	b570      	push	{r4, r5, r6, lr}
   198f6:	460d      	mov	r5, r1
   198f8:	0004      	movs	r4, r0
   198fa:	d00c      	beq.n	19916 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
   198fc:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
   19900:	2100      	movs	r1, #0
   19902:	2002      	movs	r0, #2
   19904:	2d09      	cmp	r5, #9
   19906:	d26e      	bcs.n	199e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
   19908:	e8df f005 	tbb	[pc, r5]
   1990c:	36361108 	.word	0x36361108
   19910:	a6897166 	.word	0xa6897166
   19914:	0094      	.short	0x0094
   19916:	f44f 71cb 	mov.w	r1, #406	; 0x196
   1991a:	e0f7      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   1991c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   19920:	2804      	cmp	r0, #4
   19922:	d07b      	beq.n	19a1c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
   19924:	2803      	cmp	r0, #3
   19926:	d0fc      	beq.n	19922 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
   19928:	f240 11a1 	movw	r1, #417	; 0x1a1
   1992c:	e0ee      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   1992e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   19932:	2804      	cmp	r0, #4
   19934:	d004      	beq.n	19940 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
   19936:	2803      	cmp	r0, #3
   19938:	d002      	beq.n	19940 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
   1993a:	f240 11a5 	movw	r1, #421	; 0x1a5
   1993e:	e0e5      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19940:	2005      	movs	r0, #5
   19942:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   19946:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
   1994a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1994e:	bbb8      	cbnz	r0, 199c0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
   19950:	2100      	movs	r1, #0
   19952:	4620      	mov	r0, r4
   19954:	f009 f93c 	bl	22bd0 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xca>
   19958:	7820      	ldrb	r0, [r4, #0]
   1995a:	2801      	cmp	r0, #1
   1995c:	d007      	beq.n	1996e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
   1995e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   19962:	bf00      	nop
   19964:	e9c4 0106 	strd	r0, r1, [r4, #24]
   19968:	2100      	movs	r1, #0
   1996a:	6a22      	ldr	r2, [r4, #32]
   1996c:	e048      	b.n	19a00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
   1996e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   19972:	f001 fac7 	bl	1af04 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
   19976:	e7f5      	b.n	19964 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
   19978:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   1997c:	2904      	cmp	r1, #4
   1997e:	d004      	beq.n	1998a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
   19980:	2903      	cmp	r1, #3
   19982:	d002      	beq.n	1998a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
   19984:	f240 11c3 	movw	r1, #451	; 0x1c3
   19988:	e0c0      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   1998a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1998e:	b122      	cbz	r2, 1999a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
   19990:	4621      	mov	r1, r4
   19992:	4630      	mov	r0, r6
   19994:	f009 f95c 	bl	22c50 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x14a>
   19998:	e0b0      	b.n	19afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
   1999a:	2904      	cmp	r1, #4
   1999c:	d000      	beq.n	199a0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
   1999e:	2001      	movs	r0, #1
   199a0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   199a4:	6a22      	ldr	r2, [r4, #32]
   199a6:	2d02      	cmp	r5, #2
   199a8:	d00b      	beq.n	199c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
   199aa:	2106      	movs	r1, #6
   199ac:	4630      	mov	r0, r6
   199ae:	4790      	blx	r2
   199b0:	2800      	cmp	r0, #0
   199b2:	d06d      	beq.n	19a90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
   199b4:	7800      	ldrb	r0, [r0, #0]
   199b6:	2800      	cmp	r0, #0
   199b8:	d06a      	beq.n	19a90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
   199ba:	f240 11dd 	movw	r1, #477	; 0x1dd
   199be:	e0a5      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   199c0:	e034      	b.n	19a2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
   199c2:	2105      	movs	r1, #5
   199c4:	4630      	mov	r0, r6
   199c6:	4790      	blx	r2
   199c8:	2800      	cmp	r0, #0
   199ca:	d070      	beq.n	19aae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
   199cc:	7800      	ldrb	r0, [r0, #0]
   199ce:	2800      	cmp	r0, #0
   199d0:	d06d      	beq.n	19aae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
   199d2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   199d6:	e099      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   199d8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   199dc:	2805      	cmp	r0, #5
   199de:	d003      	beq.n	199e8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
   199e0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   199e4:	e092      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   199e6:	e080      	b.n	19aea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
   199e8:	2102      	movs	r1, #2
   199ea:	6a22      	ldr	r2, [r4, #32]
   199ec:	e008      	b.n	19a00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
   199ee:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   199f2:	2805      	cmp	r0, #5
   199f4:	d002      	beq.n	199fc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
   199f6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   199fa:	e087      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   199fc:	6a22      	ldr	r2, [r4, #32]
   199fe:	2101      	movs	r1, #1
   19a00:	4630      	mov	r0, r6
   19a02:	4790      	blx	r2
   19a04:	4601      	mov	r1, r0
   19a06:	4620      	mov	r0, r4
   19a08:	f009 f88d 	bl	22b26 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x20>
   19a0c:	2802      	cmp	r0, #2
   19a0e:	d075      	beq.n	19afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
   19a10:	b3e8      	cbz	r0, 19a8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
   19a12:	2801      	cmp	r0, #1
   19a14:	d06c      	beq.n	19af0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
   19a16:	f240 212a 	movw	r1, #554	; 0x22a
   19a1a:	e077      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19a1c:	e070      	b.n	19b00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
   19a1e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   19a22:	2805      	cmp	r0, #5
   19a24:	d002      	beq.n	19a2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
   19a26:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   19a2a:	e06f      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19a30:	f000 b89e 	b.w	19b70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   19a34:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   19a38:	2805      	cmp	r0, #5
   19a3a:	d002      	beq.n	19a42 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
   19a3c:	f240 11f5 	movw	r1, #501	; 0x1f5
   19a40:	e064      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19a42:	6a22      	ldr	r2, [r4, #32]
   19a44:	210a      	movs	r1, #10
   19a46:	4630      	mov	r0, r6
   19a48:	4790      	blx	r2
   19a4a:	4601      	mov	r1, r0
   19a4c:	4620      	mov	r0, r4
   19a4e:	f009 f86a 	bl	22b26 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x20>
   19a52:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   19a56:	e059      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19a58:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   19a5c:	2a05      	cmp	r2, #5
   19a5e:	d007      	beq.n	19a70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
   19a60:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   19a64:	b10b      	cbz	r3, 19a6a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
   19a66:	2a03      	cmp	r2, #3
   19a68:	d002      	beq.n	19a70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
   19a6a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   19a6e:	e04d      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19a70:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   19a74:	b12a      	cbz	r2, 19a82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
   19a76:	4621      	mov	r1, r4
   19a78:	4630      	mov	r0, r6
   19a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19a7e:	f009 b8e7 	b.w	22c50 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x14a>
   19a82:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   19a86:	b19a      	cbz	r2, 19ab0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
   19a88:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
   19a8c:	e001      	b.n	19a92 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
   19a8e:	e032      	b.n	19af6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
   19a90:	e034      	b.n	19afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
   19a92:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   19a96:	6a22      	ldr	r2, [r4, #32]
   19a98:	2108      	movs	r1, #8
   19a9a:	4630      	mov	r0, r6
   19a9c:	4790      	blx	r2
   19a9e:	2800      	cmp	r0, #0
   19aa0:	d037      	beq.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19aa2:	7800      	ldrb	r0, [r0, #0]
   19aa4:	2800      	cmp	r0, #0
   19aa6:	d034      	beq.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19aa8:	f44f 7102 	mov.w	r1, #520	; 0x208
   19aac:	e02e      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19aae:	e030      	b.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19ab0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   19ab4:	b15a      	cbz	r2, 19ace <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
   19ab6:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
   19aba:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   19abe:	4621      	mov	r1, r4
   19ac0:	f009 f884 	bl	22bcc <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xc6>
   19ac4:	2800      	cmp	r0, #0
   19ac6:	d124      	bne.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19ac8:	f240 210d 	movw	r1, #525	; 0x20d
   19acc:	e01e      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19ace:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   19ad2:	6a22      	ldr	r2, [r4, #32]
   19ad4:	2107      	movs	r1, #7
   19ad6:	4630      	mov	r0, r6
   19ad8:	4790      	blx	r2
   19ada:	2800      	cmp	r0, #0
   19adc:	d019      	beq.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19ade:	7800      	ldrb	r0, [r0, #0]
   19ae0:	2800      	cmp	r0, #0
   19ae2:	d016      	beq.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19ae4:	f44f 7105 	mov.w	r1, #532	; 0x214
   19ae8:	e010      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19aea:	f240 2119 	movw	r1, #537	; 0x219
   19aee:	e00d      	b.n	19b0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
   19af0:	2104      	movs	r1, #4
   19af2:	6a22      	ldr	r2, [r4, #32]
   19af4:	e784      	b.n	19a00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
   19af6:	2103      	movs	r1, #3
   19af8:	6a22      	ldr	r2, [r4, #32]
   19afa:	e781      	b.n	19a00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
   19afc:	2d00      	cmp	r5, #0
   19afe:	d108      	bne.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19b00:	f009 f95c 	bl	22dbc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
   19b04:	2800      	cmp	r0, #0
   19b06:	d004      	beq.n	19b12 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
   19b08:	f240 2133 	movw	r1, #563	; 0x233
   19b0c:	206a      	movs	r0, #106	; 0x6a
   19b0e:	f003 fc19 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   19b12:	bd70      	pop	{r4, r5, r6, pc}
   19b14:	2800      	cmp	r0, #0
   19b16:	d019      	beq.n	19b4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
   19b18:	7803      	ldrb	r3, [r0, #0]
   19b1a:	4913      	ldr	r1, [pc, #76]	; (19b68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
   19b1c:	4a13      	ldr	r2, [pc, #76]	; (19b6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
   19b1e:	b113      	cbz	r3, 19b26 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
   19b20:	2b01      	cmp	r3, #1
   19b22:	d00e      	beq.n	19b42 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
   19b24:	e011      	b.n	19b4a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
   19b26:	7903      	ldrb	r3, [r0, #4]
   19b28:	2b01      	cmp	r3, #1
   19b2a:	d000      	beq.n	19b2e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
   19b2c:	b96b      	cbnz	r3, 19b4a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
   19b2e:	7943      	ldrb	r3, [r0, #5]
   19b30:	b10b      	cbz	r3, 19b36 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
   19b32:	2b01      	cmp	r3, #1
   19b34:	d109      	bne.n	19b4a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
   19b36:	6883      	ldr	r3, [r0, #8]
   19b38:	3b64      	subs	r3, #100	; 0x64
   19b3a:	428b      	cmp	r3, r1
   19b3c:	d205      	bcs.n	19b4a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
   19b3e:	68c0      	ldr	r0, [r0, #12]
   19b40:	e00e      	b.n	19b60 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
   19b42:	7903      	ldrb	r3, [r0, #4]
   19b44:	2b01      	cmp	r3, #1
   19b46:	d002      	beq.n	19b4e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
   19b48:	b10b      	cbz	r3, 19b4e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
   19b4a:	2000      	movs	r0, #0
   19b4c:	4770      	bx	lr
   19b4e:	7943      	ldrb	r3, [r0, #5]
   19b50:	b10b      	cbz	r3, 19b56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
   19b52:	2b01      	cmp	r3, #1
   19b54:	d1f9      	bne.n	19b4a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
   19b56:	68c3      	ldr	r3, [r0, #12]
   19b58:	3b64      	subs	r3, #100	; 0x64
   19b5a:	428b      	cmp	r3, r1
   19b5c:	d2f5      	bcs.n	19b4a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
   19b5e:	6880      	ldr	r0, [r0, #8]
   19b60:	4290      	cmp	r0, r2
   19b62:	d8f2      	bhi.n	19b4a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
   19b64:	2001      	movs	r0, #1
   19b66:	4770      	bx	lr
   19b68:	0001863d 	.word	0x0001863d
   19b6c:	0f423fff 	.word	0x0f423fff
   19b70:	b510      	push	{r4, lr}
   19b72:	4c05      	ldr	r4, [pc, #20]	; (19b88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
   19b74:	6820      	ldr	r0, [r4, #0]
   19b76:	b110      	cbz	r0, 19b7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
   19b78:	4780      	blx	r0
   19b7a:	2000      	movs	r0, #0
   19b7c:	6020      	str	r0, [r4, #0]
   19b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19b82:	f002 b885 	b.w	1bc90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   19b86:	0000      	.short	0x0000
   19b88:	2000036c 	.word	0x2000036c

00019b8c <mpsl_timeslot_session_open>:
   19b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b90:	460e      	mov	r6, r1
   19b92:	0005      	movs	r5, r0
   19b94:	d004      	beq.n	19ba0 <mpsl_timeslot_session_open+0x14>
   19b96:	f000 f847 	bl	19c28 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   19b9a:	4607      	mov	r7, r0
   19b9c:	2400      	movs	r4, #0
   19b9e:	e00b      	b.n	19bb8 <mpsl_timeslot_session_open+0x2c>
   19ba0:	f06f 0015 	mvn.w	r0, #21
   19ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ba8:	4620      	mov	r0, r4
   19baa:	f000 f843 	bl	19c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   19bae:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   19bb2:	b130      	cbz	r0, 19bc2 <mpsl_timeslot_session_open+0x36>
   19bb4:	1c64      	adds	r4, r4, #1
   19bb6:	b2e4      	uxtb	r4, r4
   19bb8:	42bc      	cmp	r4, r7
   19bba:	d3f5      	bcc.n	19ba8 <mpsl_timeslot_session_open+0x1c>
   19bbc:	f06f 000b 	mvn.w	r0, #11
   19bc0:	e7f0      	b.n	19ba4 <mpsl_timeslot_session_open+0x18>
   19bc2:	4627      	mov	r7, r4
   19bc4:	2cff      	cmp	r4, #255	; 0xff
   19bc6:	d0f9      	beq.n	19bbc <mpsl_timeslot_session_open+0x30>
   19bc8:	4620      	mov	r0, r4
   19bca:	f000 f833 	bl	19c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   19bce:	4604      	mov	r4, r0
   19bd0:	f009 f859 	bl	22c86 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x180>
   19bd4:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
   19bd8:	4621      	mov	r1, r4
   19bda:	4808      	ldr	r0, [pc, #32]	; (19bfc <mpsl_timeslot_session_open+0x70>)
   19bdc:	f002 f830 	bl	1bc40 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   19be0:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
   19be4:	2820      	cmp	r0, #32
   19be6:	d006      	beq.n	19bf6 <mpsl_timeslot_session_open+0x6a>
   19be8:	2001      	movs	r0, #1
   19bea:	6225      	str	r5, [r4, #32]
   19bec:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   19bf0:	7037      	strb	r7, [r6, #0]
   19bf2:	2000      	movs	r0, #0
   19bf4:	e7d6      	b.n	19ba4 <mpsl_timeslot_session_open+0x18>
   19bf6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19bfa:	e7d3      	b.n	19ba4 <mpsl_timeslot_session_open+0x18>
   19bfc:	000198f5 	.word	0x000198f5

00019c00 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
   19c00:	b510      	push	{r4, lr}
   19c02:	0782      	lsls	r2, r0, #30
   19c04:	d002      	beq.n	19c0c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
   19c06:	f06f 000d 	mvn.w	r0, #13
   19c0a:	bd10      	pop	{r4, pc}
   19c0c:	4a05      	ldr	r2, [pc, #20]	; (19c24 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
   19c0e:	7011      	strb	r1, [r2, #0]
   19c10:	6050      	str	r0, [r2, #4]
   19c12:	b128      	cbz	r0, 19c20 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
   19c14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   19c18:	010a      	lsls	r2, r1, #4
   19c1a:	2100      	movs	r1, #0
   19c1c:	f009 fadf 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   19c20:	2000      	movs	r0, #0
   19c22:	bd10      	pop	{r4, pc}
   19c24:	20000370 	.word	0x20000370

00019c28 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
   19c28:	4801      	ldr	r0, [pc, #4]	; (19c30 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
   19c2a:	7800      	ldrb	r0, [r0, #0]
   19c2c:	4770      	bx	lr
   19c2e:	0000      	.short	0x0000
   19c30:	20000370 	.word	0x20000370

00019c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
   19c34:	4905      	ldr	r1, [pc, #20]	; (19c4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
   19c36:	780a      	ldrb	r2, [r1, #0]
   19c38:	4290      	cmp	r0, r2
   19c3a:	d301      	bcc.n	19c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
   19c3c:	2000      	movs	r0, #0
   19c3e:	4770      	bx	lr
   19c40:	6849      	ldr	r1, [r1, #4]
   19c42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19c46:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   19c4a:	4770      	bx	lr
   19c4c:	20000370 	.word	0x20000370

00019c50 <MPSL_IRQ_RADIO_Handler>:
   19c50:	490e      	ldr	r1, [pc, #56]	; (19c8c <MPSL_IRQ_RADIO_Handler+0x3c>)
   19c52:	b510      	push	{r4, lr}
   19c54:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
   19c58:	2820      	cmp	r0, #32
   19c5a:	d012      	beq.n	19c82 <MPSL_IRQ_RADIO_Handler+0x32>
   19c5c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
   19c60:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
   19c64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   19c68:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   19c6c:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
   19c70:	6840      	ldr	r0, [r0, #4]
   19c72:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   19c76:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   19c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19c7e:	2104      	movs	r1, #4
   19c80:	4710      	bx	r2
   19c82:	f640 01bc 	movw	r1, #2236	; 0x8bc
   19c86:	2070      	movs	r0, #112	; 0x70
   19c88:	f003 fb5c 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   19c8c:	2000161c 	.word	0x2000161c
   19c90:	b570      	push	{r4, r5, r6, lr}
   19c92:	4605      	mov	r5, r0
   19c94:	2a20      	cmp	r2, #32
   19c96:	d028      	beq.n	19cea <MPSL_IRQ_RADIO_Handler+0x9a>
   19c98:	4819      	ldr	r0, [pc, #100]	; (19d00 <MPSL_IRQ_RADIO_Handler+0xb0>)
   19c9a:	4c1a      	ldr	r4, [pc, #104]	; (19d04 <MPSL_IRQ_RADIO_Handler+0xb4>)
   19c9c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
   19ca0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19ca4:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
   19ca8:	4423      	add	r3, r4
   19caa:	2920      	cmp	r1, #32
   19cac:	d022      	beq.n	19cf4 <MPSL_IRQ_RADIO_Handler+0xa4>
   19cae:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
   19cb2:	7840      	ldrb	r0, [r0, #1]
   19cb4:	784c      	ldrb	r4, [r1, #1]
   19cb6:	7048      	strb	r0, [r1, #1]
   19cb8:	4620      	mov	r0, r4
   19cba:	4601      	mov	r1, r0
   19cbc:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
   19cc0:	4291      	cmp	r1, r2
   19cc2:	7005      	strb	r5, [r0, #0]
   19cc4:	7840      	ldrb	r0, [r0, #1]
   19cc6:	d1f8      	bne.n	19cba <MPSL_IRQ_RADIO_Handler+0x6a>
   19cc8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   19ccc:	2a20      	cmp	r2, #32
   19cce:	bf1a      	itte	ne
   19cd0:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
   19cd4:	7054      	strbne	r4, [r2, #1]
   19cd6:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
   19cda:	2220      	movs	r2, #32
   19cdc:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
   19ce0:	f88c 2001 	strb.w	r2, [ip, #1]
   19ce4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
   19ce8:	bd70      	pop	{r4, r5, r6, pc}
   19cea:	f44f 7126 	mov.w	r1, #664	; 0x298
   19cee:	2070      	movs	r0, #112	; 0x70
   19cf0:	f003 fb28 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   19cf4:	f893 4020 	ldrb.w	r4, [r3, #32]
   19cf8:	7840      	ldrb	r0, [r0, #1]
   19cfa:	f883 0020 	strb.w	r0, [r3, #32]
   19cfe:	e7db      	b.n	19cb8 <MPSL_IRQ_RADIO_Handler+0x68>
   19d00:	2000159c 	.word	0x2000159c
   19d04:	2000161c 	.word	0x2000161c
   19d08:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d0c:	b08d      	sub	sp, #52	; 0x34
   19d0e:	4615      	mov	r5, r2
   19d10:	460c      	mov	r4, r1
   19d12:	f002 fa27 	bl	1c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   19d16:	4428      	add	r0, r5
   19d18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   19d1c:	9008      	str	r0, [sp, #32]
   19d1e:	6821      	ldr	r1, [r4, #0]
   19d20:	1a08      	subs	r0, r1, r0
   19d22:	0200      	lsls	r0, r0, #8
   19d24:	17c1      	asrs	r1, r0, #31
   19d26:	eb00 6011 	add.w	r0, r0, r1, lsr #24
   19d2a:	1200      	asrs	r0, r0, #8
   19d2c:	2800      	cmp	r0, #0
   19d2e:	f300 80f0 	bgt.w	19f12 <MPSL_IRQ_RADIO_Handler+0x2c2>
   19d32:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   19d36:	48cd      	ldr	r0, [pc, #820]	; (1a06c <MPSL_IRQ_RADIO_Handler+0x41c>)
   19d38:	eb08 0148 	add.w	r1, r8, r8, lsl #1
   19d3c:	4408      	add	r0, r1
   19d3e:	9009      	str	r0, [sp, #36]	; 0x24
   19d40:	f890 5020 	ldrb.w	r5, [r0, #32]
   19d44:	2020      	movs	r0, #32
   19d46:	4eca      	ldr	r6, [pc, #808]	; (1a070 <MPSL_IRQ_RADIO_Handler+0x420>)
   19d48:	f10d 0a18 	add.w	sl, sp, #24
   19d4c:	f10d 091c 	add.w	r9, sp, #28
   19d50:	f88d 0018 	strb.w	r0, [sp, #24]
   19d54:	2d20      	cmp	r5, #32
   19d56:	bf1c      	itt	ne
   19d58:	48c6      	ldrne	r0, [pc, #792]	; (1a074 <MPSL_IRQ_RADIO_Handler+0x424>)
   19d5a:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
   19d5e:	d038      	beq.n	19dd2 <MPSL_IRQ_RADIO_Handler+0x182>
   19d60:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   19d64:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   19d68:	f100 0108 	add.w	r1, r0, #8
   19d6c:	68c0      	ldr	r0, [r0, #12]
   19d6e:	6827      	ldr	r7, [r4, #0]
   19d70:	1a38      	subs	r0, r7, r0
   19d72:	0200      	lsls	r0, r0, #8
   19d74:	17c2      	asrs	r2, r0, #31
   19d76:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   19d7a:	1200      	asrs	r0, r0, #8
   19d7c:	d429      	bmi.n	19dd2 <MPSL_IRQ_RADIO_Handler+0x182>
   19d7e:	89e0      	ldrh	r0, [r4, #14]
   19d80:	b300      	cbz	r0, 19dc4 <MPSL_IRQ_RADIO_Handler+0x174>
   19d82:	89c8      	ldrh	r0, [r1, #14]
   19d84:	b9f0      	cbnz	r0, 19dc4 <MPSL_IRQ_RADIO_Handler+0x174>
   19d86:	6808      	ldr	r0, [r1, #0]
   19d88:	9003      	str	r0, [sp, #12]
   19d8a:	f003 f91d 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   19d8e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   19d92:	bf08      	it	eq
   19d94:	200d      	moveq	r0, #13
   19d96:	d00b      	beq.n	19db0 <MPSL_IRQ_RADIO_Handler+0x160>
   19d98:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   19d9c:	3856      	subs	r0, #86	; 0x56
   19d9e:	bf08      	it	eq
   19da0:	201c      	moveq	r0, #28
   19da2:	d005      	beq.n	19db0 <MPSL_IRQ_RADIO_Handler+0x160>
   19da4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   19da8:	389f      	subs	r0, #159	; 0x9f
   19daa:	bf14      	ite	ne
   19dac:	2000      	movne	r0, #0
   19dae:	2032      	moveq	r0, #50	; 0x32
   19db0:	1c41      	adds	r1, r0, #1
   19db2:	9803      	ldr	r0, [sp, #12]
   19db4:	1a38      	subs	r0, r7, r0
   19db6:	0200      	lsls	r0, r0, #8
   19db8:	17c2      	asrs	r2, r0, #31
   19dba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   19dbe:	1200      	asrs	r0, r0, #8
   19dc0:	4288      	cmp	r0, r1
   19dc2:	db06      	blt.n	19dd2 <MPSL_IRQ_RADIO_Handler+0x182>
   19dc4:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
   19dc8:	f88a 5000 	strb.w	r5, [sl]
   19dcc:	7845      	ldrb	r5, [r0, #1]
   19dce:	2d20      	cmp	r5, #32
   19dd0:	d1c6      	bne.n	19d60 <MPSL_IRQ_RADIO_Handler+0x110>
   19dd2:	f89a 0000 	ldrb.w	r0, [sl]
   19dd6:	f889 0000 	strb.w	r0, [r9]
   19dda:	2d20      	cmp	r5, #32
   19ddc:	bf1c      	itt	ne
   19dde:	48a5      	ldrne	r0, [pc, #660]	; (1a074 <MPSL_IRQ_RADIO_Handler+0x424>)
   19de0:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
   19de4:	f000 813e 	beq.w	1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   19de8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   19dec:	eb06 0780 	add.w	r7, r6, r0, lsl #2
   19df0:	6861      	ldr	r1, [r4, #4]
   19df2:	f8d7 8008 	ldr.w	r8, [r7, #8]
   19df6:	f107 0008 	add.w	r0, r7, #8
   19dfa:	eba8 0101 	sub.w	r1, r8, r1
   19dfe:	0209      	lsls	r1, r1, #8
   19e00:	17ca      	asrs	r2, r1, #31
   19e02:	eb01 6112 	add.w	r1, r1, r2, lsr #24
   19e06:	1209      	asrs	r1, r1, #8
   19e08:	d427      	bmi.n	19e5a <MPSL_IRQ_RADIO_Handler+0x20a>
   19e0a:	89c0      	ldrh	r0, [r0, #14]
   19e0c:	2800      	cmp	r0, #0
   19e0e:	f000 8129 	beq.w	1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   19e12:	89e0      	ldrh	r0, [r4, #14]
   19e14:	2800      	cmp	r0, #0
   19e16:	f040 8125 	bne.w	1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   19e1a:	f8d4 a000 	ldr.w	sl, [r4]
   19e1e:	f003 f8d3 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   19e22:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   19e26:	bf08      	it	eq
   19e28:	200d      	moveq	r0, #13
   19e2a:	d00b      	beq.n	19e44 <MPSL_IRQ_RADIO_Handler+0x1f4>
   19e2c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   19e30:	3856      	subs	r0, #86	; 0x56
   19e32:	bf08      	it	eq
   19e34:	201c      	moveq	r0, #28
   19e36:	d005      	beq.n	19e44 <MPSL_IRQ_RADIO_Handler+0x1f4>
   19e38:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   19e3c:	389f      	subs	r0, #159	; 0x9f
   19e3e:	bf14      	ite	ne
   19e40:	2000      	movne	r0, #0
   19e42:	2032      	moveq	r0, #50	; 0x32
   19e44:	1c41      	adds	r1, r0, #1
   19e46:	eba8 000a 	sub.w	r0, r8, sl
   19e4a:	0200      	lsls	r0, r0, #8
   19e4c:	17c2      	asrs	r2, r0, #31
   19e4e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   19e52:	1200      	asrs	r0, r0, #8
   19e54:	4288      	cmp	r0, r1
   19e56:	f280 8105 	bge.w	1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   19e5a:	f889 5000 	strb.w	r5, [r9]
   19e5e:	7e38      	ldrb	r0, [r7, #24]
   19e60:	7c21      	ldrb	r1, [r4, #16]
   19e62:	4288      	cmp	r0, r1
   19e64:	d906      	bls.n	19e74 <MPSL_IRQ_RADIO_Handler+0x224>
   19e66:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
   19e6a:	7845      	ldrb	r5, [r0, #1]
   19e6c:	2d20      	cmp	r5, #32
   19e6e:	d1bb      	bne.n	19de8 <MPSL_IRQ_RADIO_Handler+0x198>
   19e70:	f000 b8f8 	b.w	1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   19e74:	f89d 001c 	ldrb.w	r0, [sp, #28]
   19e78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   19e7c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   19e80:	8ac1      	ldrh	r1, [r0, #22]
   19e82:	68c5      	ldr	r5, [r0, #12]
   19e84:	bbe1      	cbnz	r1, 19f00 <MPSL_IRQ_RADIO_Handler+0x2b0>
   19e86:	89e1      	ldrh	r1, [r4, #14]
   19e88:	b3d1      	cbz	r1, 19f00 <MPSL_IRQ_RADIO_Handler+0x2b0>
   19e8a:	6887      	ldr	r7, [r0, #8]
   19e8c:	f003 f89c 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   19e90:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   19e94:	bf08      	it	eq
   19e96:	200d      	moveq	r0, #13
   19e98:	d00b      	beq.n	19eb2 <MPSL_IRQ_RADIO_Handler+0x262>
   19e9a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   19e9e:	3856      	subs	r0, #86	; 0x56
   19ea0:	bf08      	it	eq
   19ea2:	201c      	moveq	r0, #28
   19ea4:	d005      	beq.n	19eb2 <MPSL_IRQ_RADIO_Handler+0x262>
   19ea6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   19eaa:	389f      	subs	r0, #159	; 0x9f
   19eac:	bf14      	ite	ne
   19eae:	2000      	movne	r0, #0
   19eb0:	2032      	moveq	r0, #50	; 0x32
   19eb2:	1c41      	adds	r1, r0, #1
   19eb4:	1be8      	subs	r0, r5, r7
   19eb6:	0200      	lsls	r0, r0, #8
   19eb8:	17c2      	asrs	r2, r0, #31
   19eba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   19ebe:	1200      	asrs	r0, r0, #8
   19ec0:	4288      	cmp	r0, r1
   19ec2:	da1d      	bge.n	19f00 <MPSL_IRQ_RADIO_Handler+0x2b0>
   19ec4:	f003 f880 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   19ec8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   19ecc:	bf08      	it	eq
   19ece:	200d      	moveq	r0, #13
   19ed0:	d00b      	beq.n	19eea <MPSL_IRQ_RADIO_Handler+0x29a>
   19ed2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   19ed6:	3856      	subs	r0, #86	; 0x56
   19ed8:	bf08      	it	eq
   19eda:	201c      	moveq	r0, #28
   19edc:	d005      	beq.n	19eea <MPSL_IRQ_RADIO_Handler+0x29a>
   19ede:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   19ee2:	389f      	subs	r0, #159	; 0x9f
   19ee4:	bf14      	ite	ne
   19ee6:	2000      	movne	r0, #0
   19ee8:	2032      	moveq	r0, #50	; 0x32
   19eea:	f89d 101c 	ldrb.w	r1, [sp, #28]
   19eee:	1c40      	adds	r0, r0, #1
   19ef0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   19ef4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   19ef8:	6889      	ldr	r1, [r1, #8]
   19efa:	4408      	add	r0, r1
   19efc:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
   19f00:	9808      	ldr	r0, [sp, #32]
   19f02:	1a28      	subs	r0, r5, r0
   19f04:	0200      	lsls	r0, r0, #8
   19f06:	17c1      	asrs	r1, r0, #31
   19f08:	eb00 6011 	add.w	r0, r0, r1, lsr #24
   19f0c:	1200      	asrs	r0, r0, #8
   19f0e:	2800      	cmp	r0, #0
   19f10:	dd03      	ble.n	19f1a <MPSL_IRQ_RADIO_Handler+0x2ca>
   19f12:	b011      	add	sp, #68	; 0x44
   19f14:	2000      	movs	r0, #0
   19f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f1a:	6820      	ldr	r0, [r4, #0]
   19f1c:	42a8      	cmp	r0, r5
   19f1e:	d902      	bls.n	19f26 <MPSL_IRQ_RADIO_Handler+0x2d6>
   19f20:	68a1      	ldr	r1, [r4, #8]
   19f22:	1c49      	adds	r1, r1, #1
   19f24:	60a1      	str	r1, [r4, #8]
   19f26:	6861      	ldr	r1, [r4, #4]
   19f28:	f10d 0a18 	add.w	sl, sp, #24
   19f2c:	1a08      	subs	r0, r1, r0
   19f2e:	4428      	add	r0, r5
   19f30:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
   19f34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   19f38:	e9c4 1000 	strd	r1, r0, [r4]
   19f3c:	9810      	ldr	r0, [sp, #64]	; 0x40
   19f3e:	900b      	str	r0, [sp, #44]	; 0x2c
   19f40:	9809      	ldr	r0, [sp, #36]	; 0x24
   19f42:	f10d 081c 	add.w	r8, sp, #28
   19f46:	f890 5020 	ldrb.w	r5, [r0, #32]
   19f4a:	2020      	movs	r0, #32
   19f4c:	f88d 0018 	strb.w	r0, [sp, #24]
   19f50:	2d20      	cmp	r5, #32
   19f52:	d03c      	beq.n	19fce <MPSL_IRQ_RADIO_Handler+0x37e>
   19f54:	4947      	ldr	r1, [pc, #284]	; (1a074 <MPSL_IRQ_RADIO_Handler+0x424>)
   19f56:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19f58:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
   19f5c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   19f60:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   19f64:	f100 0108 	add.w	r1, r0, #8
   19f68:	68c0      	ldr	r0, [r0, #12]
   19f6a:	6827      	ldr	r7, [r4, #0]
   19f6c:	1a38      	subs	r0, r7, r0
   19f6e:	0200      	lsls	r0, r0, #8
   19f70:	17c2      	asrs	r2, r0, #31
   19f72:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   19f76:	1200      	asrs	r0, r0, #8
   19f78:	d429      	bmi.n	19fce <MPSL_IRQ_RADIO_Handler+0x37e>
   19f7a:	89e0      	ldrh	r0, [r4, #14]
   19f7c:	b300      	cbz	r0, 19fc0 <MPSL_IRQ_RADIO_Handler+0x370>
   19f7e:	89c8      	ldrh	r0, [r1, #14]
   19f80:	b9f0      	cbnz	r0, 19fc0 <MPSL_IRQ_RADIO_Handler+0x370>
   19f82:	f8d1 9000 	ldr.w	r9, [r1]
   19f86:	f003 f81f 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   19f8a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   19f8e:	bf08      	it	eq
   19f90:	200d      	moveq	r0, #13
   19f92:	d00b      	beq.n	19fac <MPSL_IRQ_RADIO_Handler+0x35c>
   19f94:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   19f98:	3856      	subs	r0, #86	; 0x56
   19f9a:	bf08      	it	eq
   19f9c:	201c      	moveq	r0, #28
   19f9e:	d005      	beq.n	19fac <MPSL_IRQ_RADIO_Handler+0x35c>
   19fa0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   19fa4:	389f      	subs	r0, #159	; 0x9f
   19fa6:	bf14      	ite	ne
   19fa8:	2000      	movne	r0, #0
   19faa:	2032      	moveq	r0, #50	; 0x32
   19fac:	1c41      	adds	r1, r0, #1
   19fae:	eba7 0009 	sub.w	r0, r7, r9
   19fb2:	0200      	lsls	r0, r0, #8
   19fb4:	17c2      	asrs	r2, r0, #31
   19fb6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   19fba:	1200      	asrs	r0, r0, #8
   19fbc:	4288      	cmp	r0, r1
   19fbe:	db06      	blt.n	19fce <MPSL_IRQ_RADIO_Handler+0x37e>
   19fc0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
   19fc4:	f88a 5000 	strb.w	r5, [sl]
   19fc8:	7845      	ldrb	r5, [r0, #1]
   19fca:	2d20      	cmp	r5, #32
   19fcc:	d1c6      	bne.n	19f5c <MPSL_IRQ_RADIO_Handler+0x30c>
   19fce:	f89a 0000 	ldrb.w	r0, [sl]
   19fd2:	f888 0000 	strb.w	r0, [r8]
   19fd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   19fd8:	2d20      	cmp	r5, #32
   19fda:	bf1c      	itt	ne
   19fdc:	4925      	ldrne	r1, [pc, #148]	; (1a074 <MPSL_IRQ_RADIO_Handler+0x424>)
   19fde:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
   19fe2:	d03f      	beq.n	1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   19fe4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   19fe8:	eb06 0780 	add.w	r7, r6, r0, lsl #2
   19fec:	6860      	ldr	r0, [r4, #4]
   19fee:	f8d7 9008 	ldr.w	r9, [r7, #8]
   19ff2:	f107 0108 	add.w	r1, r7, #8
   19ff6:	eba9 0000 	sub.w	r0, r9, r0
   19ffa:	0200      	lsls	r0, r0, #8
   19ffc:	17c2      	asrs	r2, r0, #31
   19ffe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   1a002:	1200      	asrs	r0, r0, #8
   1a004:	d422      	bmi.n	1a04c <MPSL_IRQ_RADIO_Handler+0x3fc>
   1a006:	89c8      	ldrh	r0, [r1, #14]
   1a008:	b360      	cbz	r0, 1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   1a00a:	89e0      	ldrh	r0, [r4, #14]
   1a00c:	bb50      	cbnz	r0, 1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   1a00e:	f8d4 a000 	ldr.w	sl, [r4]
   1a012:	f002 ffd9 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1a016:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1a01a:	bf08      	it	eq
   1a01c:	200d      	moveq	r0, #13
   1a01e:	d00b      	beq.n	1a038 <MPSL_IRQ_RADIO_Handler+0x3e8>
   1a020:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1a024:	3856      	subs	r0, #86	; 0x56
   1a026:	bf08      	it	eq
   1a028:	201c      	moveq	r0, #28
   1a02a:	d005      	beq.n	1a038 <MPSL_IRQ_RADIO_Handler+0x3e8>
   1a02c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1a030:	389f      	subs	r0, #159	; 0x9f
   1a032:	bf14      	ite	ne
   1a034:	2000      	movne	r0, #0
   1a036:	2032      	moveq	r0, #50	; 0x32
   1a038:	1c41      	adds	r1, r0, #1
   1a03a:	eba9 000a 	sub.w	r0, r9, sl
   1a03e:	0200      	lsls	r0, r0, #8
   1a040:	17c2      	asrs	r2, r0, #31
   1a042:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   1a046:	1200      	asrs	r0, r0, #8
   1a048:	4288      	cmp	r0, r1
   1a04a:	da0b      	bge.n	1a064 <MPSL_IRQ_RADIO_Handler+0x414>
   1a04c:	f888 5000 	strb.w	r5, [r8]
   1a050:	7e38      	ldrb	r0, [r7, #24]
   1a052:	7c21      	ldrb	r1, [r4, #16]
   1a054:	4288      	cmp	r0, r1
   1a056:	f67f af0d 	bls.w	19e74 <MPSL_IRQ_RADIO_Handler+0x224>
   1a05a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
   1a05e:	7845      	ldrb	r5, [r0, #1]
   1a060:	2d20      	cmp	r5, #32
   1a062:	d1bf      	bne.n	19fe4 <MPSL_IRQ_RADIO_Handler+0x394>
   1a064:	b011      	add	sp, #68	; 0x44
   1a066:	2001      	movs	r0, #1
   1a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a06c:	2000161c 	.word	0x2000161c
   1a070:	2000121c 	.word	0x2000121c
   1a074:	2000159c 	.word	0x2000159c
   1a078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a07c:	460f      	mov	r7, r1
   1a07e:	4606      	mov	r6, r0
   1a080:	eb01 0047 	add.w	r0, r1, r7, lsl #1
   1a084:	494b      	ldr	r1, [pc, #300]	; (1a1b4 <MPSL_IRQ_RADIO_Handler+0x564>)
   1a086:	4699      	mov	r9, r3
   1a088:	4408      	add	r0, r1
   1a08a:	4692      	mov	sl, r2
   1a08c:	f890 4020 	ldrb.w	r4, [r0, #32]
   1a090:	2020      	movs	r0, #32
   1a092:	7010      	strb	r0, [r2, #0]
   1a094:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
   1a098:	2c20      	cmp	r4, #32
   1a09a:	bf1c      	itt	ne
   1a09c:	4846      	ldrne	r0, [pc, #280]	; (1a1b8 <MPSL_IRQ_RADIO_Handler+0x568>)
   1a09e:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
   1a0a2:	d038      	beq.n	1a116 <MPSL_IRQ_RADIO_Handler+0x4c6>
   1a0a4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1a0a8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   1a0ac:	f100 0108 	add.w	r1, r0, #8
   1a0b0:	68c0      	ldr	r0, [r0, #12]
   1a0b2:	6835      	ldr	r5, [r6, #0]
   1a0b4:	1a28      	subs	r0, r5, r0
   1a0b6:	0200      	lsls	r0, r0, #8
   1a0b8:	17c2      	asrs	r2, r0, #31
   1a0ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   1a0be:	1200      	asrs	r0, r0, #8
   1a0c0:	d429      	bmi.n	1a116 <MPSL_IRQ_RADIO_Handler+0x4c6>
   1a0c2:	89f0      	ldrh	r0, [r6, #14]
   1a0c4:	b300      	cbz	r0, 1a108 <MPSL_IRQ_RADIO_Handler+0x4b8>
   1a0c6:	89c8      	ldrh	r0, [r1, #14]
   1a0c8:	b9f0      	cbnz	r0, 1a108 <MPSL_IRQ_RADIO_Handler+0x4b8>
   1a0ca:	6808      	ldr	r0, [r1, #0]
   1a0cc:	9000      	str	r0, [sp, #0]
   1a0ce:	f002 ff7b 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1a0d2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1a0d6:	bf08      	it	eq
   1a0d8:	200d      	moveq	r0, #13
   1a0da:	d00b      	beq.n	1a0f4 <MPSL_IRQ_RADIO_Handler+0x4a4>
   1a0dc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1a0e0:	3856      	subs	r0, #86	; 0x56
   1a0e2:	bf08      	it	eq
   1a0e4:	201c      	moveq	r0, #28
   1a0e6:	d005      	beq.n	1a0f4 <MPSL_IRQ_RADIO_Handler+0x4a4>
   1a0e8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1a0ec:	389f      	subs	r0, #159	; 0x9f
   1a0ee:	bf14      	ite	ne
   1a0f0:	2000      	movne	r0, #0
   1a0f2:	2032      	moveq	r0, #50	; 0x32
   1a0f4:	1c41      	adds	r1, r0, #1
   1a0f6:	9800      	ldr	r0, [sp, #0]
   1a0f8:	1a28      	subs	r0, r5, r0
   1a0fa:	0200      	lsls	r0, r0, #8
   1a0fc:	17c2      	asrs	r2, r0, #31
   1a0fe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   1a102:	1200      	asrs	r0, r0, #8
   1a104:	4288      	cmp	r0, r1
   1a106:	db06      	blt.n	1a116 <MPSL_IRQ_RADIO_Handler+0x4c6>
   1a108:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
   1a10c:	f88a 4000 	strb.w	r4, [sl]
   1a110:	7844      	ldrb	r4, [r0, #1]
   1a112:	2c20      	cmp	r4, #32
   1a114:	d1c6      	bne.n	1a0a4 <MPSL_IRQ_RADIO_Handler+0x454>
   1a116:	f89a 0000 	ldrb.w	r0, [sl]
   1a11a:	f889 0000 	strb.w	r0, [r9]
   1a11e:	2c20      	cmp	r4, #32
   1a120:	bf1c      	itt	ne
   1a122:	4825      	ldrne	r0, [pc, #148]	; (1a1b8 <MPSL_IRQ_RADIO_Handler+0x568>)
   1a124:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
   1a128:	d040      	beq.n	1a1ac <MPSL_IRQ_RADIO_Handler+0x55c>
   1a12a:	bf00      	nop
   1a12c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1a130:	eb08 0780 	add.w	r7, r8, r0, lsl #2
   1a134:	6870      	ldr	r0, [r6, #4]
   1a136:	68bd      	ldr	r5, [r7, #8]
   1a138:	f107 0108 	add.w	r1, r7, #8
   1a13c:	1a28      	subs	r0, r5, r0
   1a13e:	0200      	lsls	r0, r0, #8
   1a140:	17c2      	asrs	r2, r0, #31
   1a142:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   1a146:	1200      	asrs	r0, r0, #8
   1a148:	d422      	bmi.n	1a190 <MPSL_IRQ_RADIO_Handler+0x540>
   1a14a:	89c8      	ldrh	r0, [r1, #14]
   1a14c:	b370      	cbz	r0, 1a1ac <MPSL_IRQ_RADIO_Handler+0x55c>
   1a14e:	89f0      	ldrh	r0, [r6, #14]
   1a150:	bb60      	cbnz	r0, 1a1ac <MPSL_IRQ_RADIO_Handler+0x55c>
   1a152:	f8d6 b000 	ldr.w	fp, [r6]
   1a156:	f002 ff37 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1a15a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1a15e:	bf08      	it	eq
   1a160:	200d      	moveq	r0, #13
   1a162:	d00b      	beq.n	1a17c <MPSL_IRQ_RADIO_Handler+0x52c>
   1a164:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1a168:	3856      	subs	r0, #86	; 0x56
   1a16a:	bf08      	it	eq
   1a16c:	201c      	moveq	r0, #28
   1a16e:	d005      	beq.n	1a17c <MPSL_IRQ_RADIO_Handler+0x52c>
   1a170:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1a174:	389f      	subs	r0, #159	; 0x9f
   1a176:	bf14      	ite	ne
   1a178:	2000      	movne	r0, #0
   1a17a:	2032      	moveq	r0, #50	; 0x32
   1a17c:	1c41      	adds	r1, r0, #1
   1a17e:	eba5 000b 	sub.w	r0, r5, fp
   1a182:	0200      	lsls	r0, r0, #8
   1a184:	17c2      	asrs	r2, r0, #31
   1a186:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   1a18a:	1200      	asrs	r0, r0, #8
   1a18c:	4288      	cmp	r0, r1
   1a18e:	da0d      	bge.n	1a1ac <MPSL_IRQ_RADIO_Handler+0x55c>
   1a190:	f889 4000 	strb.w	r4, [r9]
   1a194:	7e38      	ldrb	r0, [r7, #24]
   1a196:	7c31      	ldrb	r1, [r6, #16]
   1a198:	4288      	cmp	r0, r1
   1a19a:	d802      	bhi.n	1a1a2 <MPSL_IRQ_RADIO_Handler+0x552>
   1a19c:	2000      	movs	r0, #0
   1a19e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1a2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   1a1a6:	7844      	ldrb	r4, [r0, #1]
   1a1a8:	2c20      	cmp	r4, #32
   1a1aa:	d1bf      	bne.n	1a12c <MPSL_IRQ_RADIO_Handler+0x4dc>
   1a1ac:	2001      	movs	r0, #1
   1a1ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1b2:	0000      	.short	0x0000
   1a1b4:	2000161c 	.word	0x2000161c
   1a1b8:	2000159c 	.word	0x2000159c
   1a1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c0:	b098      	sub	sp, #96	; 0x60
   1a1c2:	4615      	mov	r5, r2
   1a1c4:	f002 fa90 	bl	1c6e8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
   1a1c8:	4604      	mov	r4, r0
   1a1ca:	f002 fd25 	bl	1cc18 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1a1ce:	4606      	mov	r6, r0
   1a1d0:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a1d2:	2801      	cmp	r0, #1
   1a1d4:	bf18      	it	ne
   1a1d6:	2802      	cmpne	r0, #2
   1a1d8:	d005      	beq.n	1a1e6 <MPSL_IRQ_RADIO_Handler+0x596>
   1a1da:	f640 1192 	movw	r1, #2450	; 0x992
   1a1de:	f04f 0070 	mov.w	r0, #112	; 0x70
   1a1e2:	f003 f8af 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a1e6:	49fa      	ldr	r1, [pc, #1000]	; (1a5d0 <MPSL_IRQ_RADIO_Handler+0x980>)
   1a1e8:	2001      	movs	r0, #1
   1a1ea:	6008      	str	r0, [r1, #0]
   1a1ec:	49f9      	ldr	r1, [pc, #996]	; (1a5d4 <MPSL_IRQ_RADIO_Handler+0x984>)
   1a1ee:	6889      	ldr	r1, [r1, #8]
   1a1f0:	6008      	str	r0, [r1, #0]
   1a1f2:	2000      	movs	r0, #0
   1a1f4:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
   1a1f8:	900a      	str	r0, [sp, #40]	; 0x28
   1a1fa:	1e40      	subs	r0, r0, #1
   1a1fc:	900b      	str	r0, [sp, #44]	; 0x2c
   1a1fe:	49f6      	ldr	r1, [pc, #984]	; (1a5d8 <MPSL_IRQ_RADIO_Handler+0x988>)
   1a200:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   1a204:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1a208:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
   1a20c:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
   1a210:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
   1a214:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
   1a218:	6989      	ldr	r1, [r1, #24]
   1a21a:	9110      	str	r1, [sp, #64]	; 0x40
   1a21c:	f008 fde2 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1a220:	4602      	mov	r2, r0
   1a222:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
   1a226:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1a22a:	4bec      	ldr	r3, [pc, #944]	; (1a5dc <MPSL_IRQ_RADIO_Handler+0x98c>)
   1a22c:	4440      	add	r0, r8
   1a22e:	1c41      	adds	r1, r0, #1
   1a230:	1850      	adds	r0, r2, r1
   1a232:	429a      	cmp	r2, r3
   1a234:	d854      	bhi.n	1a2e0 <MPSL_IRQ_RADIO_Handler+0x690>
   1a236:	4dea      	ldr	r5, [pc, #936]	; (1a5e0 <MPSL_IRQ_RADIO_Handler+0x990>)
   1a238:	42a9      	cmp	r1, r5
   1a23a:	dc58      	bgt.n	1a2ee <MPSL_IRQ_RADIO_Handler+0x69e>
   1a23c:	426a      	negs	r2, r5
   1a23e:	4291      	cmp	r1, r2
   1a240:	db5d      	blt.n	1a2fe <MPSL_IRQ_RADIO_Handler+0x6ae>
   1a242:	1c59      	adds	r1, r3, #1
   1a244:	4281      	cmp	r1, r0
   1a246:	bfdc      	itt	le
   1a248:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   1a24c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   1a250:	dd05      	ble.n	1a25e <MPSL_IRQ_RADIO_Handler+0x60e>
   1a252:	2800      	cmp	r0, #0
   1a254:	bfbc      	itt	lt
   1a256:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   1a25a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   1a25e:	9014      	str	r0, [sp, #80]	; 0x50
   1a260:	48e0      	ldr	r0, [pc, #896]	; (1a5e4 <MPSL_IRQ_RADIO_Handler+0x994>)
   1a262:	f1b8 0f00 	cmp.w	r8, #0
   1a266:	8b80      	ldrh	r0, [r0, #28]
   1a268:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
   1a26c:	bf14      	ite	ne
   1a26e:	f04f 0a01 	movne.w	sl, #1
   1a272:	f04f 0a00 	moveq.w	sl, #0
   1a276:	f002 ffed 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1a27a:	9016      	str	r0, [sp, #88]	; 0x58
   1a27c:	f1ba 0f00 	cmp.w	sl, #0
   1a280:	d008      	beq.n	1a294 <MPSL_IRQ_RADIO_Handler+0x644>
   1a282:	48d8      	ldr	r0, [pc, #864]	; (1a5e4 <MPSL_IRQ_RADIO_Handler+0x994>)
   1a284:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1a286:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a28a:	bf02      	ittt	eq
   1a28c:	9816      	ldreq	r0, [sp, #88]	; 0x58
   1a28e:	2800      	cmpeq	r0, #0
   1a290:	2701      	moveq	r7, #1
   1a292:	d001      	beq.n	1a298 <MPSL_IRQ_RADIO_Handler+0x648>
   1a294:	f04f 0700 	mov.w	r7, #0
   1a298:	f002 fe96 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1a29c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1a2a0:	bf08      	it	eq
   1a2a2:	200d      	moveq	r0, #13
   1a2a4:	d00b      	beq.n	1a2be <MPSL_IRQ_RADIO_Handler+0x66e>
   1a2a6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1a2aa:	3856      	subs	r0, #86	; 0x56
   1a2ac:	bf08      	it	eq
   1a2ae:	201c      	moveq	r0, #28
   1a2b0:	d005      	beq.n	1a2be <MPSL_IRQ_RADIO_Handler+0x66e>
   1a2b2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1a2b6:	389f      	subs	r0, #159	; 0x9f
   1a2b8:	bf14      	ite	ne
   1a2ba:	2000      	movne	r0, #0
   1a2bc:	2032      	moveq	r0, #50	; 0x32
   1a2be:	f04f 0900 	mov.w	r9, #0
   1a2c2:	46cb      	mov	fp, r9
   1a2c4:	9013      	str	r0, [sp, #76]	; 0x4c
   1a2c6:	4546      	cmp	r6, r8
   1a2c8:	d936      	bls.n	1a338 <MPSL_IRQ_RADIO_Handler+0x6e8>
   1a2ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a2cc:	f8df 930c 	ldr.w	r9, [pc, #780]	; 1a5dc <MPSL_IRQ_RADIO_Handler+0x98c>
   1a2d0:	ea6f 0c06 	mvn.w	ip, r6
   1a2d4:	4669      	mov	r1, sp
   1a2d6:	aa17      	add	r2, sp, #92	; 0x5c
   1a2d8:	eb03 000c 	add.w	r0, r3, ip
   1a2dc:	454b      	cmp	r3, r9
   1a2de:	d904      	bls.n	1a2ea <MPSL_IRQ_RADIO_Handler+0x69a>
   1a2e0:	f240 519e 	movw	r1, #1438	; 0x59e
   1a2e4:	2070      	movs	r0, #112	; 0x70
   1a2e6:	f003 f82d 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a2ea:	45ac      	cmp	ip, r5
   1a2ec:	dd04      	ble.n	1a2f8 <MPSL_IRQ_RADIO_Handler+0x6a8>
   1a2ee:	f240 519f 	movw	r1, #1439	; 0x59f
   1a2f2:	2070      	movs	r0, #112	; 0x70
   1a2f4:	f003 f826 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a2f8:	4bbb      	ldr	r3, [pc, #748]	; (1a5e8 <MPSL_IRQ_RADIO_Handler+0x998>)
   1a2fa:	459c      	cmp	ip, r3
   1a2fc:	da04      	bge.n	1a308 <MPSL_IRQ_RADIO_Handler+0x6b8>
   1a2fe:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
   1a302:	2070      	movs	r0, #112	; 0x70
   1a304:	f003 f81e 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a308:	4bb8      	ldr	r3, [pc, #736]	; (1a5ec <MPSL_IRQ_RADIO_Handler+0x99c>)
   1a30a:	4283      	cmp	r3, r0
   1a30c:	bfdc      	itt	le
   1a30e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   1a312:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   1a316:	dd05      	ble.n	1a324 <MPSL_IRQ_RADIO_Handler+0x6d4>
   1a318:	2800      	cmp	r0, #0
   1a31a:	bfbc      	itt	lt
   1a31c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   1a320:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   1a324:	f001 ff3a 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1a328:	9800      	ldr	r0, [sp, #0]
   1a32a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a32c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a330:	9000      	str	r0, [sp, #0]
   1a332:	1a08      	subs	r0, r1, r0
   1a334:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
   1a338:	2f00      	cmp	r7, #0
   1a33a:	bf18      	it	ne
   1a33c:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
   1a340:	d105      	bne.n	1a34e <MPSL_IRQ_RADIO_Handler+0x6fe>
   1a342:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1a346:	2800      	cmp	r0, #0
   1a348:	bf18      	it	ne
   1a34a:	f04f 0b02 	movne.w	fp, #2
   1a34e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   1a352:	d008      	beq.n	1a366 <MPSL_IRQ_RADIO_Handler+0x716>
   1a354:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a356:	1b00      	subs	r0, r0, r4
   1a358:	0200      	lsls	r0, r0, #8
   1a35a:	17c1      	asrs	r1, r0, #31
   1a35c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
   1a360:	1200      	asrs	r0, r0, #8
   1a362:	2801      	cmp	r0, #1
   1a364:	da02      	bge.n	1a36c <MPSL_IRQ_RADIO_Handler+0x71c>
   1a366:	2003      	movs	r0, #3
   1a368:	9d18      	ldr	r5, [sp, #96]	; 0x60
   1a36a:	e00d      	b.n	1a388 <MPSL_IRQ_RADIO_Handler+0x738>
   1a36c:	b157      	cbz	r7, 1a384 <MPSL_IRQ_RADIO_Handler+0x734>
   1a36e:	489d      	ldr	r0, [pc, #628]	; (1a5e4 <MPSL_IRQ_RADIO_Handler+0x994>)
   1a370:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   1a374:	b130      	cbz	r0, 1a384 <MPSL_IRQ_RADIO_Handler+0x734>
   1a376:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1a37a:	f110 0b00 	adds.w	fp, r0, #0
   1a37e:	bf18      	it	ne
   1a380:	f04f 0b02 	movne.w	fp, #2
   1a384:	4625      	mov	r5, r4
   1a386:	2000      	movs	r0, #0
   1a388:	4483      	add	fp, r0
   1a38a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a38c:	eba0 0009 	sub.w	r0, r0, r9
   1a390:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   1a394:	1e48      	subs	r0, r1, #1
   1a396:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a39a:	1b42      	subs	r2, r0, r5
   1a39c:	0212      	lsls	r2, r2, #8
   1a39e:	17d3      	asrs	r3, r2, #31
   1a3a0:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   1a3a4:	1212      	asrs	r2, r2, #8
   1a3a6:	455a      	cmp	r2, fp
   1a3a8:	db04      	blt.n	1a3b4 <MPSL_IRQ_RADIO_Handler+0x764>
   1a3aa:	f1b9 0f00 	cmp.w	r9, #0
   1a3ae:	bf18      	it	ne
   1a3b0:	910c      	strne	r1, [sp, #48]	; 0x30
   1a3b2:	e02d      	b.n	1a410 <MPSL_IRQ_RADIO_Handler+0x7c0>
   1a3b4:	f1b9 0f00 	cmp.w	r9, #0
   1a3b8:	d005      	beq.n	1a3c6 <MPSL_IRQ_RADIO_Handler+0x776>
   1a3ba:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   1a3be:	b920      	cbnz	r0, 1a3ca <MPSL_IRQ_RADIO_Handler+0x77a>
   1a3c0:	f002 fc20 	bl	1cc04 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
   1a3c4:	b108      	cbz	r0, 1a3ca <MPSL_IRQ_RADIO_Handler+0x77a>
   1a3c6:	b9af      	cbnz	r7, 1a3f4 <MPSL_IRQ_RADIO_Handler+0x7a4>
   1a3c8:	e00c      	b.n	1a3e4 <MPSL_IRQ_RADIO_Handler+0x794>
   1a3ca:	b92f      	cbnz	r7, 1a3d8 <MPSL_IRQ_RADIO_Handler+0x788>
   1a3cc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1a3d0:	2800      	cmp	r0, #0
   1a3d2:	bf18      	it	ne
   1a3d4:	f1ab 0b02 	subne.w	fp, fp, #2
   1a3d8:	f04f 0900 	mov.w	r9, #0
   1a3dc:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
   1a3e0:	464e      	mov	r6, r9
   1a3e2:	e007      	b.n	1a3f4 <MPSL_IRQ_RADIO_Handler+0x7a4>
   1a3e4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1a3e8:	b120      	cbz	r0, 1a3f4 <MPSL_IRQ_RADIO_Handler+0x7a4>
   1a3ea:	2000      	movs	r0, #0
   1a3ec:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   1a3f0:	f1ab 0b02 	sub.w	fp, fp, #2
   1a3f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a3f6:	eba0 0109 	sub.w	r1, r0, r9
   1a3fa:	1e48      	subs	r0, r1, #1
   1a3fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a400:	1b42      	subs	r2, r0, r5
   1a402:	0212      	lsls	r2, r2, #8
   1a404:	17d3      	asrs	r3, r2, #31
   1a406:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   1a40a:	1212      	asrs	r2, r2, #8
   1a40c:	455a      	cmp	r2, fp
   1a40e:	db7d      	blt.n	1a50c <MPSL_IRQ_RADIO_Handler+0x8bc>
   1a410:	4a74      	ldr	r2, [pc, #464]	; (1a5e4 <MPSL_IRQ_RADIO_Handler+0x994>)
   1a412:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1a414:	1a89      	subs	r1, r1, r2
   1a416:	0209      	lsls	r1, r1, #8
   1a418:	17cb      	asrs	r3, r1, #31
   1a41a:	eb01 6113 	add.w	r1, r1, r3, lsr #24
   1a41e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a420:	1209      	asrs	r1, r1, #8
   1a422:	b93b      	cbnz	r3, 1a434 <MPSL_IRQ_RADIO_Handler+0x7e4>
   1a424:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a428:	bf1c      	itt	ne
   1a42a:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
   1a42c:	4291      	cmpne	r1, r2
   1a42e:	bfb8      	it	lt
   1a430:	2100      	movlt	r1, #0
   1a432:	db00      	blt.n	1a436 <MPSL_IRQ_RADIO_Handler+0x7e6>
   1a434:	2101      	movs	r1, #1
   1a436:	ea3a 0101 	bics.w	r1, sl, r1
   1a43a:	d167      	bne.n	1a50c <MPSL_IRQ_RADIO_Handler+0x8bc>
   1a43c:	9919      	ldr	r1, [sp, #100]	; 0x64
   1a43e:	4605      	mov	r5, r0
   1a440:	f04f 0900 	mov.w	r9, #0
   1a444:	9105      	str	r1, [sp, #20]
   1a446:	f002 f813 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1a44a:	1a28      	subs	r0, r5, r0
   1a44c:	0200      	lsls	r0, r0, #8
   1a44e:	17c1      	asrs	r1, r0, #31
   1a450:	eb00 6011 	add.w	r0, r0, r1, lsr #24
   1a454:	ea4f 2b20 	mov.w	fp, r0, asr #8
   1a458:	f002 fdb6 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1a45c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1a460:	bf08      	it	eq
   1a462:	200d      	moveq	r0, #13
   1a464:	d00b      	beq.n	1a47e <MPSL_IRQ_RADIO_Handler+0x82e>
   1a466:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1a46a:	3856      	subs	r0, #86	; 0x56
   1a46c:	bf08      	it	eq
   1a46e:	201c      	moveq	r0, #28
   1a470:	d005      	beq.n	1a47e <MPSL_IRQ_RADIO_Handler+0x82e>
   1a472:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1a476:	389f      	subs	r0, #159	; 0x9f
   1a478:	bf14      	ite	ne
   1a47a:	2000      	movne	r0, #0
   1a47c:	2032      	moveq	r0, #50	; 0x32
   1a47e:	300b      	adds	r0, #11
   1a480:	4558      	cmp	r0, fp
   1a482:	dd1f      	ble.n	1a4c4 <MPSL_IRQ_RADIO_Handler+0x874>
   1a484:	9805      	ldr	r0, [sp, #20]
   1a486:	2801      	cmp	r0, #1
   1a488:	d001      	beq.n	1a48e <MPSL_IRQ_RADIO_Handler+0x83e>
   1a48a:	b147      	cbz	r7, 1a49e <MPSL_IRQ_RADIO_Handler+0x84e>
   1a48c:	e012      	b.n	1a4b4 <MPSL_IRQ_RADIO_Handler+0x864>
   1a48e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   1a492:	d11c      	bne.n	1a4ce <MPSL_IRQ_RADIO_Handler+0x87e>
   1a494:	f640 1113 	movw	r1, #2323	; 0x913
   1a498:	2070      	movs	r0, #112	; 0x70
   1a49a:	f002 ff53 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a49e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   1a4a2:	d007      	beq.n	1a4b4 <MPSL_IRQ_RADIO_Handler+0x864>
   1a4a4:	1b60      	subs	r0, r4, r5
   1a4a6:	0200      	lsls	r0, r0, #8
   1a4a8:	17c1      	asrs	r1, r0, #31
   1a4aa:	eb00 6011 	add.w	r0, r0, r1, lsr #24
   1a4ae:	1200      	asrs	r0, r0, #8
   1a4b0:	2804      	cmp	r0, #4
   1a4b2:	dd04      	ble.n	1a4be <MPSL_IRQ_RADIO_Handler+0x86e>
   1a4b4:	462c      	mov	r4, r5
   1a4b6:	4620      	mov	r0, r4
   1a4b8:	f002 f800 	bl	1c4bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   1a4bc:	e007      	b.n	1a4ce <MPSL_IRQ_RADIO_Handler+0x87e>
   1a4be:	2800      	cmp	r0, #0
   1a4c0:	dc63      	bgt.n	1a58a <MPSL_IRQ_RADIO_Handler+0x93a>
   1a4c2:	e004      	b.n	1a4ce <MPSL_IRQ_RADIO_Handler+0x87e>
   1a4c4:	462c      	mov	r4, r5
   1a4c6:	4620      	mov	r0, r4
   1a4c8:	f001 fff8 	bl	1c4bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   1a4cc:	46d1      	mov	r9, sl
   1a4ce:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   1a4d2:	d055      	beq.n	1a580 <MPSL_IRQ_RADIO_Handler+0x930>
   1a4d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a4d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a4d8:	1b00      	subs	r0, r0, r4
   1a4da:	1b12      	subs	r2, r2, r4
   1a4dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a4e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1a4e4:	2801      	cmp	r0, #1
   1a4e6:	d350      	bcc.n	1a58a <MPSL_IRQ_RADIO_Handler+0x93a>
   1a4e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a4ec:	bf98      	it	ls
   1a4ee:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
   1a4f2:	d84a      	bhi.n	1a58a <MPSL_IRQ_RADIO_Handler+0x93a>
   1a4f4:	4620      	mov	r0, r4
   1a4f6:	f008 fc75 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1a4fa:	9914      	ldr	r1, [sp, #80]	; 0x50
   1a4fc:	4a38      	ldr	r2, [pc, #224]	; (1a5e0 <MPSL_IRQ_RADIO_Handler+0x990>)
   1a4fe:	1a0d      	subs	r5, r1, r0
   1a500:	f04f 0b00 	mov.w	fp, #0
   1a504:	1aaa      	subs	r2, r5, r2
   1a506:	f17b 0200 	sbcs.w	r2, fp, #0
   1a50a:	e000      	b.n	1a50e <MPSL_IRQ_RADIO_Handler+0x8be>
   1a50c:	e03d      	b.n	1a58a <MPSL_IRQ_RADIO_Handler+0x93a>
   1a50e:	d316      	bcc.n	1a53e <MPSL_IRQ_RADIO_Handler+0x8ee>
   1a510:	4a33      	ldr	r2, [pc, #204]	; (1a5e0 <MPSL_IRQ_RADIO_Handler+0x990>)
   1a512:	1a43      	subs	r3, r0, r1
   1a514:	1a9a      	subs	r2, r3, r2
   1a516:	f17b 0200 	sbcs.w	r2, fp, #0
   1a51a:	d310      	bcc.n	1a53e <MPSL_IRQ_RADIO_Handler+0x8ee>
   1a51c:	4a2f      	ldr	r2, [pc, #188]	; (1a5dc <MPSL_IRQ_RADIO_Handler+0x98c>)
   1a51e:	42aa      	cmp	r2, r5
   1a520:	bf3e      	ittt	cc
   1a522:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
   1a526:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
   1a52a:	1845      	addcc	r5, r0, r1
   1a52c:	d307      	bcc.n	1a53e <MPSL_IRQ_RADIO_Handler+0x8ee>
   1a52e:	429a      	cmp	r2, r3
   1a530:	d22f      	bcs.n	1a592 <MPSL_IRQ_RADIO_Handler+0x942>
   1a532:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
   1a536:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
   1a53a:	4408      	add	r0, r1
   1a53c:	4245      	negs	r5, r0
   1a53e:	4f29      	ldr	r7, [pc, #164]	; (1a5e4 <MPSL_IRQ_RADIO_Handler+0x994>)
   1a540:	7fb8      	ldrb	r0, [r7, #30]
   1a542:	b358      	cbz	r0, 1a59c <MPSL_IRQ_RADIO_Handler+0x94c>
   1a544:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a546:	2801      	cmp	r0, #1
   1a548:	d005      	beq.n	1a556 <MPSL_IRQ_RADIO_Handler+0x906>
   1a54a:	2002      	movs	r0, #2
   1a54c:	f002 fa06 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1a550:	2001      	movs	r0, #1
   1a552:	f002 fa03 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1a556:	45b0      	cmp	r8, r6
   1a558:	d22c      	bcs.n	1a5b4 <MPSL_IRQ_RADIO_Handler+0x964>
   1a55a:	eba5 0106 	sub.w	r1, r5, r6
   1a55e:	f04f 0002 	mov.w	r0, #2
   1a562:	f002 f945 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1a566:	b390      	cbz	r0, 1a5ce <MPSL_IRQ_RADIO_Handler+0x97e>
   1a568:	f1b8 0f00 	cmp.w	r8, #0
   1a56c:	bf1c      	itt	ne
   1a56e:	eba5 0108 	subne.w	r1, r5, r8
   1a572:	2001      	movne	r0, #1
   1a574:	d044      	beq.n	1a600 <MPSL_IRQ_RADIO_Handler+0x9b0>
   1a576:	bf00      	nop
   1a578:	f002 f93a 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1a57c:	b338      	cbz	r0, 1a5ce <MPSL_IRQ_RADIO_Handler+0x97e>
   1a57e:	e03f      	b.n	1a600 <MPSL_IRQ_RADIO_Handler+0x9b0>
   1a580:	f640 2131 	movw	r1, #2609	; 0xa31
   1a584:	2070      	movs	r0, #112	; 0x70
   1a586:	f002 fedd 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a58a:	b01b      	add	sp, #108	; 0x6c
   1a58c:	2000      	movs	r0, #0
   1a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a592:	f640 3105 	movw	r1, #2821	; 0xb05
   1a596:	2070      	movs	r0, #112	; 0x70
   1a598:	f002 fed4 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a59c:	45b0      	cmp	r8, r6
   1a59e:	bf34      	ite	cc
   1a5a0:	4630      	movcc	r0, r6
   1a5a2:	4640      	movcs	r0, r8
   1a5a4:	301e      	adds	r0, #30
   1a5a6:	42a8      	cmp	r0, r5
   1a5a8:	dbcc      	blt.n	1a544 <MPSL_IRQ_RADIO_Handler+0x8f4>
   1a5aa:	f640 2145 	movw	r1, #2629	; 0xa45
   1a5ae:	2070      	movs	r0, #112	; 0x70
   1a5b0:	f002 fec8 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a5b4:	d91c      	bls.n	1a5f0 <MPSL_IRQ_RADIO_Handler+0x9a0>
   1a5b6:	eba5 0108 	sub.w	r1, r5, r8
   1a5ba:	2001      	movs	r0, #1
   1a5bc:	f002 f918 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1a5c0:	b128      	cbz	r0, 1a5ce <MPSL_IRQ_RADIO_Handler+0x97e>
   1a5c2:	2e00      	cmp	r6, #0
   1a5c4:	bf1c      	itt	ne
   1a5c6:	1ba9      	subne	r1, r5, r6
   1a5c8:	2002      	movne	r0, #2
   1a5ca:	d019      	beq.n	1a600 <MPSL_IRQ_RADIO_Handler+0x9b0>
   1a5cc:	e7d4      	b.n	1a578 <MPSL_IRQ_RADIO_Handler+0x928>
   1a5ce:	e042      	b.n	1a656 <MPSL_IRQ_RADIO_Handler+0xa06>
   1a5d0:	40000508 	.word	0x40000508
   1a5d4:	20000378 	.word	0x20000378
   1a5d8:	2000121c 	.word	0x2000121c
   1a5dc:	1e847fff 	.word	0x1e847fff
   1a5e0:	0f424000 	.word	0x0f424000
   1a5e4:	2000161c 	.word	0x2000161c
   1a5e8:	f0bdc000 	.word	0xf0bdc000
   1a5ec:	1e848000 	.word	0x1e848000
   1a5f0:	ea56 0008 	orrs.w	r0, r6, r8
   1a5f4:	d004      	beq.n	1a600 <MPSL_IRQ_RADIO_Handler+0x9b0>
   1a5f6:	f640 1176 	movw	r1, #2422	; 0x976
   1a5fa:	2070      	movs	r0, #112	; 0x70
   1a5fc:	f002 fea2 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a600:	4629      	mov	r1, r5
   1a602:	2000      	movs	r0, #0
   1a604:	f002 f8f4 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1a608:	b328      	cbz	r0, 1a656 <MPSL_IRQ_RADIO_Handler+0xa06>
   1a60a:	2601      	movs	r6, #1
   1a60c:	f1ba 0f00 	cmp.w	sl, #0
   1a610:	bf04      	itt	eq
   1a612:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
   1a616:	2800      	cmpeq	r0, #0
   1a618:	d002      	beq.n	1a620 <MPSL_IRQ_RADIO_Handler+0x9d0>
   1a61a:	f1b9 0f00 	cmp.w	r9, #0
   1a61e:	d024      	beq.n	1a66a <MPSL_IRQ_RADIO_Handler+0xa1a>
   1a620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a622:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a626:	d004      	beq.n	1a632 <MPSL_IRQ_RADIO_Handler+0x9e2>
   1a628:	f002 fcd4 	bl	1cfd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   1a62c:	f04f 30ff 	mov.w	r0, #4294967295
   1a630:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a632:	f1b9 0f00 	cmp.w	r9, #0
   1a636:	d01c      	beq.n	1a672 <MPSL_IRQ_RADIO_Handler+0xa22>
   1a638:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1a63a:	1a20      	subs	r0, r4, r0
   1a63c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   1a640:	2005      	movs	r0, #5
   1a642:	f002 f8d5 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1a646:	b360      	cbz	r0, 1a6a2 <MPSL_IRQ_RADIO_Handler+0xa52>
   1a648:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
   1a64c:	2800      	cmp	r0, #0
   1a64e:	bf08      	it	eq
   1a650:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
   1a654:	e015      	b.n	1a682 <MPSL_IRQ_RADIO_Handler+0xa32>
   1a656:	2002      	movs	r0, #2
   1a658:	f002 f980 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1a65c:	2001      	movs	r0, #1
   1a65e:	f002 f97d 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1a662:	b01b      	add	sp, #108	; 0x6c
   1a664:	2000      	movs	r0, #0
   1a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a66a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a66c:	f1b0 3fff 	cmp.w	r0, #4294967295
   1a670:	d012      	beq.n	1a698 <MPSL_IRQ_RADIO_Handler+0xa48>
   1a672:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
   1a676:	b120      	cbz	r0, 1a682 <MPSL_IRQ_RADIO_Handler+0xa32>
   1a678:	2005      	movs	r0, #5
   1a67a:	f002 f96f 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1a67e:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
   1a682:	eba5 0008 	sub.w	r0, r5, r8
   1a686:	f1a0 0119 	sub.w	r1, r0, #25
   1a68a:	2900      	cmp	r1, #0
   1a68c:	dc0e      	bgt.n	1a6ac <MPSL_IRQ_RADIO_Handler+0xa5c>
   1a68e:	f640 216e 	movw	r1, #2670	; 0xa6e
   1a692:	2070      	movs	r0, #112	; 0x70
   1a694:	f002 fe56 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a698:	f002 fcb8 	bl	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1a69c:	f001 fee8 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1a6a0:	e7c6      	b.n	1a630 <MPSL_IRQ_RADIO_Handler+0x9e0>
   1a6a2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
   1a6a6:	2070      	movs	r0, #112	; 0x70
   1a6a8:	f002 fe4c 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a6ac:	2003      	movs	r0, #3
   1a6ae:	f002 f89f 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1a6b2:	b1c0      	cbz	r0, 1a6e6 <MPSL_IRQ_RADIO_Handler+0xa96>
   1a6b4:	480e      	ldr	r0, [pc, #56]	; (1a6f0 <MPSL_IRQ_RADIO_Handler+0xaa0>)
   1a6b6:	6880      	ldr	r0, [r0, #8]
   1a6b8:	f8c0 b000 	str.w	fp, [r0]
   1a6bc:	480d      	ldr	r0, [pc, #52]	; (1a6f4 <MPSL_IRQ_RADIO_Handler+0xaa4>)
   1a6be:	f8c0 b000 	str.w	fp, [r0]
   1a6c2:	ac0a      	add	r4, sp, #40	; 0x28
   1a6c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1a6c8:	6038      	str	r0, [r7, #0]
   1a6ca:	6079      	str	r1, [r7, #4]
   1a6cc:	60ba      	str	r2, [r7, #8]
   1a6ce:	60fb      	str	r3, [r7, #12]
   1a6d0:	ac0e      	add	r4, sp, #56	; 0x38
   1a6d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1a6d6:	6138      	str	r0, [r7, #16]
   1a6d8:	6179      	str	r1, [r7, #20]
   1a6da:	61ba      	str	r2, [r7, #24]
   1a6dc:	61fb      	str	r3, [r7, #28]
   1a6de:	b01b      	add	sp, #108	; 0x6c
   1a6e0:	2001      	movs	r0, #1
   1a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6e6:	f640 2176 	movw	r1, #2678	; 0xa76
   1a6ea:	2070      	movs	r0, #112	; 0x70
   1a6ec:	f002 fe2a 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a6f0:	20000378 	.word	0x20000378
   1a6f4:	40000508 	.word	0x40000508
   1a6f8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6fc:	4614      	mov	r4, r2
   1a6fe:	460d      	mov	r5, r1
   1a700:	f04f 0a00 	mov.w	sl, #0
   1a704:	890a      	ldrh	r2, [r1, #8]
   1a706:	4651      	mov	r1, sl
   1a708:	f362 411f 	bfi	r1, r2, #16, #16
   1a70c:	7aaa      	ldrb	r2, [r5, #10]
   1a70e:	46d1      	mov	r9, sl
   1a710:	f362 0907 	bfi	r9, r2, #0, #8
   1a714:	7aea      	ldrb	r2, [r5, #11]
   1a716:	4606      	mov	r6, r0
   1a718:	f362 290f 	bfi	r9, r2, #8, #8
   1a71c:	782a      	ldrb	r2, [r5, #0]
   1a71e:	b083      	sub	sp, #12
   1a720:	6840      	ldr	r0, [r0, #4]
   1a722:	f8c4 a000 	str.w	sl, [r4]
   1a726:	f362 4917 	bfi	r9, r2, #16, #8
   1a72a:	f8c4 a004 	str.w	sl, [r4, #4]
   1a72e:	f8c4 9010 	str.w	r9, [r4, #16]
   1a732:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1a736:	4f9d      	ldr	r7, [pc, #628]	; (1a9ac <MPSL_IRQ_RADIO_Handler+0xd5c>)
   1a738:	6870      	ldr	r0, [r6, #4]
   1a73a:	fba0 8907 	umull	r8, r9, r0, r7
   1a73e:	6830      	ldr	r0, [r6, #0]
   1a740:	f008 fb50 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1a744:	eb10 0108 	adds.w	r1, r0, r8
   1a748:	eb4a 0209 	adc.w	r2, sl, r9
   1a74c:	7828      	ldrb	r0, [r5, #0]
   1a74e:	ea4f 0967 	mov.w	r9, r7, asr #1
   1a752:	f1c9 0b00 	rsb	fp, r9, #0
   1a756:	b170      	cbz	r0, 1a776 <MPSL_IRQ_RADIO_Handler+0xb26>
   1a758:	89e0      	ldrh	r0, [r4, #14]
   1a75a:	f894 8011 	ldrb.w	r8, [r4, #17]
   1a75e:	43c0      	mvns	r0, r0
   1a760:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1a764:	f104 020c 	add.w	r2, r4, #12
   1a768:	4548      	cmp	r0, r9
   1a76a:	dd7c      	ble.n	1a866 <MPSL_IRQ_RADIO_Handler+0xc16>
   1a76c:	f240 519f 	movw	r1, #1439	; 0x59f
   1a770:	2070      	movs	r0, #112	; 0x70
   1a772:	f002 fde7 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a776:	f8df c238 	ldr.w	ip, [pc, #568]	; 1a9b0 <MPSL_IRQ_RADIO_Handler+0xd60>
   1a77a:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
   1a77e:	eb11 0a0c 	adds.w	sl, r1, ip
   1a782:	f142 0c00 	adc.w	ip, r2, #0
   1a786:	ebb0 0a0a 	subs.w	sl, r0, sl
   1a78a:	eb73 0c0c 	sbcs.w	ip, r3, ip
   1a78e:	d272      	bcs.n	1a876 <MPSL_IRQ_RADIO_Handler+0xc26>
   1a790:	1a41      	subs	r1, r0, r1
   1a792:	eb73 0102 	sbcs.w	r1, r3, r2
   1a796:	d36e      	bcc.n	1a876 <MPSL_IRQ_RADIO_Handler+0xc26>
   1a798:	ebb0 0608 	subs.w	r6, r0, r8
   1a79c:	42b7      	cmp	r7, r6
   1a79e:	d82b      	bhi.n	1a7f8 <MPSL_IRQ_RADIO_Handler+0xba8>
   1a7a0:	89e0      	ldrh	r0, [r4, #14]
   1a7a2:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
   1a7a6:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
   1a7aa:	43c1      	mvns	r1, r0
   1a7ac:	4a81      	ldr	r2, [pc, #516]	; (1a9b4 <MPSL_IRQ_RADIO_Handler+0xd64>)
   1a7ae:	eb08 0001 	add.w	r0, r8, r1
   1a7b2:	4542      	cmp	r2, r8
   1a7b4:	d32b      	bcc.n	1a80e <MPSL_IRQ_RADIO_Handler+0xbbe>
   1a7b6:	4549      	cmp	r1, r9
   1a7b8:	dcd8      	bgt.n	1a76c <MPSL_IRQ_RADIO_Handler+0xb1c>
   1a7ba:	4559      	cmp	r1, fp
   1a7bc:	db66      	blt.n	1a88c <MPSL_IRQ_RADIO_Handler+0xc3c>
   1a7be:	4287      	cmp	r7, r0
   1a7c0:	bfdc      	itt	le
   1a7c2:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   1a7c6:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   1a7ca:	dd05      	ble.n	1a7d8 <MPSL_IRQ_RADIO_Handler+0xb88>
   1a7cc:	2800      	cmp	r0, #0
   1a7ce:	bfbc      	itt	lt
   1a7d0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   1a7d4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   1a7d8:	466a      	mov	r2, sp
   1a7da:	a901      	add	r1, sp, #4
   1a7dc:	f001 fcde 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1a7e0:	89e0      	ldrh	r0, [r4, #14]
   1a7e2:	f89d 1000 	ldrb.w	r1, [sp]
   1a7e6:	1a30      	subs	r0, r6, r0
   1a7e8:	1a40      	subs	r0, r0, r1
   1a7ea:	1e40      	subs	r0, r0, #1
   1a7ec:	42b8      	cmp	r0, r7
   1a7ee:	d302      	bcc.n	1a7f6 <MPSL_IRQ_RADIO_Handler+0xba6>
   1a7f0:	68a0      	ldr	r0, [r4, #8]
   1a7f2:	1c40      	adds	r0, r0, #1
   1a7f4:	60a0      	str	r0, [r4, #8]
   1a7f6:	4646      	mov	r6, r8
   1a7f8:	89e0      	ldrh	r0, [r4, #14]
   1a7fa:	4b6e      	ldr	r3, [pc, #440]	; (1a9b4 <MPSL_IRQ_RADIO_Handler+0xd64>)
   1a7fc:	43c1      	mvns	r1, r0
   1a7fe:	686d      	ldr	r5, [r5, #4]
   1a800:	f894 8011 	ldrb.w	r8, [r4, #17]
   1a804:	1870      	adds	r0, r6, r1
   1a806:	f104 020c 	add.w	r2, r4, #12
   1a80a:	429e      	cmp	r6, r3
   1a80c:	d904      	bls.n	1a818 <MPSL_IRQ_RADIO_Handler+0xbc8>
   1a80e:	f240 519e 	movw	r1, #1438	; 0x59e
   1a812:	2070      	movs	r0, #112	; 0x70
   1a814:	f002 fd96 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a818:	4549      	cmp	r1, r9
   1a81a:	dca7      	bgt.n	1a76c <MPSL_IRQ_RADIO_Handler+0xb1c>
   1a81c:	4559      	cmp	r1, fp
   1a81e:	db35      	blt.n	1a88c <MPSL_IRQ_RADIO_Handler+0xc3c>
   1a820:	4287      	cmp	r7, r0
   1a822:	bfdc      	itt	le
   1a824:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   1a828:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   1a82c:	dd05      	ble.n	1a83a <MPSL_IRQ_RADIO_Handler+0xbea>
   1a82e:	2800      	cmp	r0, #0
   1a830:	bfbc      	itt	lt
   1a832:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   1a836:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   1a83a:	4621      	mov	r1, r4
   1a83c:	f001 fcae 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1a840:	6820      	ldr	r0, [r4, #0]
   1a842:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   1a846:	1970      	adds	r0, r6, r5
   1a848:	1c40      	adds	r0, r0, #1
   1a84a:	6021      	str	r1, [r4, #0]
   1a84c:	f1b8 0f00 	cmp.w	r8, #0
   1a850:	bf08      	it	eq
   1a852:	307a      	addeq	r0, #122	; 0x7a
   1a854:	d004      	beq.n	1a860 <MPSL_IRQ_RADIO_Handler+0xc10>
   1a856:	f1b8 0f01 	cmp.w	r8, #1
   1a85a:	bf08      	it	eq
   1a85c:	3048      	addeq	r0, #72	; 0x48
   1a85e:	d13a      	bne.n	1a8d6 <MPSL_IRQ_RADIO_Handler+0xc86>
   1a860:	f001 fc80 	bl	1c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   1a864:	e001      	b.n	1a86a <MPSL_IRQ_RADIO_Handler+0xc1a>
   1a866:	e00e      	b.n	1a886 <MPSL_IRQ_RADIO_Handler+0xc36>
   1a868:	e005      	b.n	1a876 <MPSL_IRQ_RADIO_Handler+0xc26>
   1a86a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a86e:	6060      	str	r0, [r4, #4]
   1a870:	b007      	add	sp, #28
   1a872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a876:	6830      	ldr	r0, [r6, #0]
   1a878:	1e40      	subs	r0, r0, #1
   1a87a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a87e:	6020      	str	r0, [r4, #0]
   1a880:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
   1a884:	e7f3      	b.n	1a86e <MPSL_IRQ_RADIO_Handler+0xc1e>
   1a886:	4601      	mov	r1, r0
   1a888:	4558      	cmp	r0, fp
   1a88a:	da04      	bge.n	1a896 <MPSL_IRQ_RADIO_Handler+0xc46>
   1a88c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
   1a890:	2070      	movs	r0, #112	; 0x70
   1a892:	f002 fd57 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a896:	4287      	cmp	r7, r0
   1a898:	bfdc      	itt	le
   1a89a:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
   1a89e:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
   1a8a2:	dd05      	ble.n	1a8b0 <MPSL_IRQ_RADIO_Handler+0xc60>
   1a8a4:	2800      	cmp	r0, #0
   1a8a6:	bfbc      	itt	lt
   1a8a8:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
   1a8ac:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
   1a8b0:	4621      	mov	r1, r4
   1a8b2:	f001 fc73 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1a8b6:	6820      	ldr	r0, [r4, #0]
   1a8b8:	f1b8 0f00 	cmp.w	r8, #0
   1a8bc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   1a8c0:	f10a 0001 	add.w	r0, sl, #1
   1a8c4:	6021      	str	r1, [r4, #0]
   1a8c6:	bf08      	it	eq
   1a8c8:	307a      	addeq	r0, #122	; 0x7a
   1a8ca:	d009      	beq.n	1a8e0 <MPSL_IRQ_RADIO_Handler+0xc90>
   1a8cc:	f1b8 0f01 	cmp.w	r8, #1
   1a8d0:	bf08      	it	eq
   1a8d2:	3048      	addeq	r0, #72	; 0x48
   1a8d4:	d004      	beq.n	1a8e0 <MPSL_IRQ_RADIO_Handler+0xc90>
   1a8d6:	f240 6139 	movw	r1, #1593	; 0x639
   1a8da:	2070      	movs	r0, #112	; 0x70
   1a8dc:	f002 fd32 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1a8e0:	f001 fc40 	bl	1c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   1a8e4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   1a8e8:	6061      	str	r1, [r4, #4]
   1a8ea:	f8b4 900e 	ldrh.w	r9, [r4, #14]
   1a8ee:	aa01      	add	r2, sp, #4
   1a8f0:	4669      	mov	r1, sp
   1a8f2:	4648      	mov	r0, r9
   1a8f4:	6837      	ldr	r7, [r6, #0]
   1a8f6:	f001 fc51 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1a8fa:	f002 f98d 	bl	1cc18 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1a8fe:	f001 fc31 	bl	1c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   1a902:	4680      	mov	r8, r0
   1a904:	482c      	ldr	r0, [pc, #176]	; (1a9b8 <MPSL_IRQ_RADIO_Handler+0xd68>)
   1a906:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
   1a90a:	2920      	cmp	r1, #32
   1a90c:	d02a      	beq.n	1a964 <MPSL_IRQ_RADIO_Handler+0xd14>
   1a90e:	68c0      	ldr	r0, [r0, #12]
   1a910:	1d40      	adds	r0, r0, #5
   1a912:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a916:	bf00      	nop
   1a918:	e9d4 2100 	ldrd	r2, r1, [r4]
   1a91c:	1a89      	subs	r1, r1, r2
   1a91e:	4401      	add	r1, r0
   1a920:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a924:	e9c4 0100 	strd	r0, r1, [r4]
   1a928:	6831      	ldr	r1, [r6, #0]
   1a92a:	4281      	cmp	r1, r0
   1a92c:	d902      	bls.n	1a934 <MPSL_IRQ_RADIO_Handler+0xce4>
   1a92e:	68a0      	ldr	r0, [r4, #8]
   1a930:	1c40      	adds	r0, r0, #1
   1a932:	60a0      	str	r0, [r4, #8]
   1a934:	6832      	ldr	r2, [r6, #0]
   1a936:	6928      	ldr	r0, [r5, #16]
   1a938:	4621      	mov	r1, r4
   1a93a:	9b06      	ldr	r3, [sp, #24]
   1a93c:	f7ff f9e4 	bl	19d08 <MPSL_IRQ_RADIO_Handler+0xb8>
   1a940:	2800      	cmp	r0, #0
   1a942:	bf1c      	itt	ne
   1a944:	b007      	addne	sp, #28
   1a946:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a94a:	e9d4 1000 	ldrd	r1, r0, [r4]
   1a94e:	1a40      	subs	r0, r0, r1
   1a950:	6831      	ldr	r1, [r6, #0]
   1a952:	6021      	str	r1, [r4, #0]
   1a954:	6831      	ldr	r1, [r6, #0]
   1a956:	4408      	add	r0, r1
   1a958:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a95c:	6060      	str	r0, [r4, #4]
   1a95e:	b007      	add	sp, #28
   1a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a964:	3709      	adds	r7, #9
   1a966:	f1b9 0f00 	cmp.w	r9, #0
   1a96a:	d016      	beq.n	1a99a <MPSL_IRQ_RADIO_Handler+0xd4a>
   1a96c:	f002 fc72 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1a970:	b998      	cbnz	r0, 1a99a <MPSL_IRQ_RADIO_Handler+0xd4a>
   1a972:	f002 fb29 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1a976:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1a97a:	bf08      	it	eq
   1a97c:	200d      	moveq	r0, #13
   1a97e:	d00b      	beq.n	1a998 <MPSL_IRQ_RADIO_Handler+0xd48>
   1a980:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1a984:	3856      	subs	r0, #86	; 0x56
   1a986:	bf08      	it	eq
   1a988:	201c      	moveq	r0, #28
   1a98a:	d005      	beq.n	1a998 <MPSL_IRQ_RADIO_Handler+0xd48>
   1a98c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1a990:	389f      	subs	r0, #159	; 0x9f
   1a992:	bf14      	ite	ne
   1a994:	2000      	movne	r0, #0
   1a996:	2032      	moveq	r0, #50	; 0x32
   1a998:	4407      	add	r7, r0
   1a99a:	9800      	ldr	r0, [sp, #0]
   1a99c:	4580      	cmp	r8, r0
   1a99e:	bf84      	itt	hi
   1a9a0:	eba8 0000 	subhi.w	r0, r8, r0
   1a9a4:	4407      	addhi	r7, r0
   1a9a6:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
   1a9aa:	e7b5      	b.n	1a918 <MPSL_IRQ_RADIO_Handler+0xcc8>
   1a9ac:	1e848000 	.word	0x1e848000
   1a9b0:	0f424000 	.word	0x0f424000
   1a9b4:	1e847fff 	.word	0x1e847fff
   1a9b8:	2000161c 	.word	0x2000161c
   1a9bc:	b570      	push	{r4, r5, r6, lr}
   1a9be:	4d1e      	ldr	r5, [pc, #120]	; (1aa38 <MPSL_IRQ_RADIO_Handler+0xde8>)
   1a9c0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
   1a9c4:	2820      	cmp	r0, #32
   1a9c6:	bf18      	it	ne
   1a9c8:	bd70      	popne	{r4, r5, r6, pc}
   1a9ca:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   1a9ce:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   1a9d2:	4428      	add	r0, r5
   1a9d4:	f890 4020 	ldrb.w	r4, [r0, #32]
   1a9d8:	2c20      	cmp	r4, #32
   1a9da:	d027      	beq.n	1aa2c <MPSL_IRQ_RADIO_Handler+0xddc>
   1a9dc:	4b17      	ldr	r3, [pc, #92]	; (1aa3c <MPSL_IRQ_RADIO_Handler+0xdec>)
   1a9de:	eb03 1182 	add.w	r1, r3, r2, lsl #6
   1a9e2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
   1a9e6:	7849      	ldrb	r1, [r1, #1]
   1a9e8:	f880 1020 	strb.w	r1, [r0, #32]
   1a9ec:	20ff      	movs	r0, #255	; 0xff
   1a9ee:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
   1a9f2:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
   1a9f6:	4621      	mov	r1, r4
   1a9f8:	2002      	movs	r0, #2
   1a9fa:	f000 f891 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1a9fe:	2000      	movs	r0, #0
   1aa00:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
   1aa04:	77a8      	strb	r0, [r5, #30]
   1aa06:	490e      	ldr	r1, [pc, #56]	; (1aa40 <MPSL_IRQ_RADIO_Handler+0xdf0>)
   1aa08:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1aa0c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1aa10:	7e00      	ldrb	r0, [r0, #24]
   1aa12:	2800      	cmp	r0, #0
   1aa14:	bf08      	it	eq
   1aa16:	f002 feb1 	bleq	1d77c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
   1aa1a:	2000      	movs	r0, #0
   1aa1c:	4909      	ldr	r1, [pc, #36]	; (1aa44 <MPSL_IRQ_RADIO_Handler+0xdf4>)
   1aa1e:	6849      	ldr	r1, [r1, #4]
   1aa20:	2900      	cmp	r1, #0
   1aa22:	bf08      	it	eq
   1aa24:	bd70      	popeq	{r4, r5, r6, pc}
   1aa26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1aa2a:	4708      	bx	r1
   1aa2c:	f240 3132 	movw	r1, #818	; 0x332
   1aa30:	2070      	movs	r0, #112	; 0x70
   1aa32:	f002 fc87 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1aa36:	0000      	.short	0x0000
   1aa38:	2000161c 	.word	0x2000161c
   1aa3c:	2000159c 	.word	0x2000159c
   1aa40:	2000121c 	.word	0x2000121c
   1aa44:	20000378 	.word	0x20000378
   1aa48:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   1aa4c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1ab10 <MPSL_IRQ_RADIO_Handler+0xec0>
   1aa50:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
   1aa54:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   1aa58:	4440      	add	r0, r8
   1aa5a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   1aa5e:	2c20      	cmp	r4, #32
   1aa60:	bf08      	it	eq
   1aa62:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   1aa66:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1ab14 <MPSL_IRQ_RADIO_Handler+0xec4>
   1aa6a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1ab18 <MPSL_IRQ_RADIO_Handler+0xec8>
   1aa6e:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
   1aa72:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
   1aa76:	2607      	movs	r6, #7
   1aa78:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   1aa7c:	2801      	cmp	r0, #1
   1aa7e:	d00e      	beq.n	1aa9e <MPSL_IRQ_RADIO_Handler+0xe4e>
   1aa80:	2804      	cmp	r0, #4
   1aa82:	bf08      	it	eq
   1aa84:	2602      	moveq	r6, #2
   1aa86:	d00a      	beq.n	1aa9e <MPSL_IRQ_RADIO_Handler+0xe4e>
   1aa88:	2805      	cmp	r0, #5
   1aa8a:	bf0c      	ite	eq
   1aa8c:	2603      	moveq	r6, #3
   1aa8e:	2806      	cmpne	r0, #6
   1aa90:	d005      	beq.n	1aa9e <MPSL_IRQ_RADIO_Handler+0xe4e>
   1aa92:	f640 01dd 	movw	r1, #2269	; 0x8dd
   1aa96:	f04f 0070 	mov.w	r0, #112	; 0x70
   1aa9a:	f002 fc53 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1aa9e:	f1bb 0f00 	cmp.w	fp, #0
   1aaa2:	bf18      	it	ne
   1aaa4:	f3af 8000 	nopne.w
   1aaa8:	f3ef 8010 	mrs	r0, PRIMASK
   1aaac:	b672      	cpsid	i
   1aaae:	eb07 0144 	add.w	r1, r7, r4, lsl #1
   1aab2:	784a      	ldrb	r2, [r1, #1]
   1aab4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1aab8:	4441      	add	r1, r8
   1aaba:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
   1aabe:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   1aac2:	42a2      	cmp	r2, r4
   1aac4:	bf04      	itt	eq
   1aac6:	2220      	moveq	r2, #32
   1aac8:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
   1aacc:	b1c0      	cbz	r0, 1ab00 <MPSL_IRQ_RADIO_Handler+0xeb0>
   1aace:	462a      	mov	r2, r5
   1aad0:	4621      	mov	r1, r4
   1aad2:	2001      	movs	r0, #1
   1aad4:	f000 f824 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1aad8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1aadc:	eb09 0081 	add.w	r0, r9, r1, lsl #2
   1aae0:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
   1aae4:	6840      	ldr	r0, [r0, #4]
   1aae6:	4631      	mov	r1, r6
   1aae8:	4790      	blx	r2
   1aaea:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
   1aaee:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   1aaf2:	4440      	add	r0, r8
   1aaf4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
   1aaf8:	2c20      	cmp	r4, #32
   1aafa:	d1ba      	bne.n	1aa72 <MPSL_IRQ_RADIO_Handler+0xe22>
   1aafc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   1ab00:	4806      	ldr	r0, [pc, #24]	; (1ab1c <MPSL_IRQ_RADIO_Handler+0xecc>)
   1ab02:	2800      	cmp	r0, #0
   1ab04:	bf18      	it	ne
   1ab06:	f3af 8000 	nopne.w
   1ab0a:	b662      	cpsie	i
   1ab0c:	e7df      	b.n	1aace <MPSL_IRQ_RADIO_Handler+0xe7e>
   1ab0e:	0000      	.short	0x0000
   1ab10:	2000161c 	.word	0x2000161c
   1ab14:	00000000 	.word	0x00000000
   1ab18:	2000159c 	.word	0x2000159c
   1ab1c:	00000000 	.word	0x00000000
   1ab20:	f8df c058 	ldr.w	ip, [pc, #88]	; 1ab7c <MPSL_IRQ_RADIO_Handler+0xf2c>
   1ab24:	b510      	push	{r4, lr}
   1ab26:	2300      	movs	r3, #0
   1ab28:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
   1ab2c:	2807      	cmp	r0, #7
   1ab2e:	d21f      	bcs.n	1ab70 <MPSL_IRQ_RADIO_Handler+0xf20>
   1ab30:	e8df f000 	tbb	[pc, r0]
   1ab34:	05050505 	.word	0x05050505
   1ab38:	00040404 	.word	0x00040404
   1ab3c:	2301      	movs	r3, #1
   1ab3e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
   1ab42:	2b00      	cmp	r3, #0
   1ab44:	bf08      	it	eq
   1ab46:	bd10      	popeq	{r4, pc}
   1ab48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1ab4c:	480c      	ldr	r0, [pc, #48]	; (1ab80 <MPSL_IRQ_RADIO_Handler+0xf30>)
   1ab4e:	4402      	add	r2, r0
   1ab50:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
   1ab54:	2820      	cmp	r0, #32
   1ab56:	bf0e      	itee	eq
   1ab58:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
   1ab5c:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
   1ab60:	7041      	strbne	r1, [r0, #1]
   1ab62:	2020      	movs	r0, #32
   1ab64:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
   1ab68:	7058      	strb	r0, [r3, #1]
   1ab6a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
   1ab6e:	bd10      	pop	{r4, pc}
   1ab70:	f240 216e 	movw	r1, #622	; 0x26e
   1ab74:	2070      	movs	r0, #112	; 0x70
   1ab76:	f002 fbe5 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1ab7a:	0000      	.short	0x0000
   1ab7c:	2000159c 	.word	0x2000159c
   1ab80:	2000161c 	.word	0x2000161c
   1ab84:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   1ab88:	460f      	mov	r7, r1
   1ab8a:	4680      	mov	r8, r0
   1ab8c:	f8df a160 	ldr.w	sl, [pc, #352]	; 1acf0 <MPSL_IRQ_RADIO_Handler+0x10a0>
   1ab90:	eb01 0047 	add.w	r0, r1, r7, lsl #1
   1ab94:	4450      	add	r0, sl
   1ab96:	f1b8 0f01 	cmp.w	r8, #1
   1ab9a:	f890 4020 	ldrb.w	r4, [r0, #32]
   1ab9e:	4625      	mov	r5, r4
   1aba0:	bf18      	it	ne
   1aba2:	f1b8 0f02 	cmpne.w	r8, #2
   1aba6:	d005      	beq.n	1abb4 <MPSL_IRQ_RADIO_Handler+0xf64>
   1aba8:	f640 21ac 	movw	r1, #2732	; 0xaac
   1abac:	f04f 0070 	mov.w	r0, #112	; 0x70
   1abb0:	f002 fbc8 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1abb4:	f04f 0b00 	mov.w	fp, #0
   1abb8:	2d20      	cmp	r5, #32
   1abba:	d042      	beq.n	1ac42 <MPSL_IRQ_RADIO_Handler+0xff2>
   1abbc:	f89a 001e 	ldrb.w	r0, [sl, #30]
   1abc0:	2600      	movs	r6, #0
   1abc2:	2800      	cmp	r0, #0
   1abc4:	bf08      	it	eq
   1abc6:	2602      	moveq	r6, #2
   1abc8:	f001 fc52 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1abcc:	f8df c124 	ldr.w	ip, [pc, #292]	; 1acf4 <MPSL_IRQ_RADIO_Handler+0x10a4>
   1abd0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1abd4:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   1abd8:	688a      	ldr	r2, [r1, #8]
   1abda:	68c9      	ldr	r1, [r1, #12]
   1abdc:	1a12      	subs	r2, r2, r0
   1abde:	1a09      	subs	r1, r1, r0
   1abe0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1abe4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1abe8:	4296      	cmp	r6, r2
   1abea:	bf99      	ittee	ls
   1abec:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
   1abf0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
   1abf4:	4a40      	ldrhi	r2, [pc, #256]	; (1acf8 <MPSL_IRQ_RADIO_Handler+0x10a8>)
   1abf6:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
   1abfa:	d920      	bls.n	1ac3e <MPSL_IRQ_RADIO_Handler+0xfee>
   1abfc:	4622      	mov	r2, r4
   1abfe:	eb09 0142 	add.w	r1, r9, r2, lsl #1
   1ac02:	784c      	ldrb	r4, [r1, #1]
   1ac04:	2c20      	cmp	r4, #32
   1ac06:	d012      	beq.n	1ac2e <MPSL_IRQ_RADIO_Handler+0xfde>
   1ac08:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1ac0c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   1ac10:	688b      	ldr	r3, [r1, #8]
   1ac12:	68c9      	ldr	r1, [r1, #12]
   1ac14:	1a1b      	subs	r3, r3, r0
   1ac16:	1a09      	subs	r1, r1, r0
   1ac18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ac1c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1ac20:	429e      	cmp	r6, r3
   1ac22:	bf9c      	itt	ls
   1ac24:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
   1ac28:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
   1ac2c:	d8e6      	bhi.n	1abfc <MPSL_IRQ_RADIO_Handler+0xfac>
   1ac2e:	2a20      	cmp	r2, #32
   1ac30:	d005      	beq.n	1ac3e <MPSL_IRQ_RADIO_Handler+0xfee>
   1ac32:	463b      	mov	r3, r7
   1ac34:	2120      	movs	r1, #32
   1ac36:	2004      	movs	r0, #4
   1ac38:	f7ff f82a 	bl	19c90 <MPSL_IRQ_RADIO_Handler+0x40>
   1ac3c:	4604      	mov	r4, r0
   1ac3e:	42ac      	cmp	r4, r5
   1ac40:	d116      	bne.n	1ac70 <MPSL_IRQ_RADIO_Handler+0x1020>
   1ac42:	482e      	ldr	r0, [pc, #184]	; (1acfc <MPSL_IRQ_RADIO_Handler+0x10ac>)
   1ac44:	2800      	cmp	r0, #0
   1ac46:	bf18      	it	ne
   1ac48:	f3af 8000 	nopne.w
   1ac4c:	f001 fc10 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1ac50:	4603      	mov	r3, r0
   1ac52:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
   1ac56:	2820      	cmp	r0, #32
   1ac58:	d00d      	beq.n	1ac76 <MPSL_IRQ_RADIO_Handler+0x1026>
   1ac5a:	f8da 0008 	ldr.w	r0, [sl, #8]
   1ac5e:	1c99      	adds	r1, r3, #2
   1ac60:	1a08      	subs	r0, r1, r0
   1ac62:	0200      	lsls	r0, r0, #8
   1ac64:	17c1      	asrs	r1, r0, #31
   1ac66:	eb00 6011 	add.w	r0, r0, r1, lsr #24
   1ac6a:	1200      	asrs	r0, r0, #8
   1ac6c:	2800      	cmp	r0, #0
   1ac6e:	dd02      	ble.n	1ac76 <MPSL_IRQ_RADIO_Handler+0x1026>
   1ac70:	2000      	movs	r0, #0
   1ac72:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   1ac76:	2d20      	cmp	r5, #32
   1ac78:	d014      	beq.n	1aca4 <MPSL_IRQ_RADIO_Handler+0x1054>
   1ac7a:	462a      	mov	r2, r5
   1ac7c:	4641      	mov	r1, r8
   1ac7e:	4618      	mov	r0, r3
   1ac80:	f7ff fa9c 	bl	1a1bc <MPSL_IRQ_RADIO_Handler+0x56c>
   1ac84:	2800      	cmp	r0, #0
   1ac86:	bf1e      	ittt	ne
   1ac88:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
   1ac8c:	2002      	movne	r0, #2
   1ac8e:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   1ac92:	463b      	mov	r3, r7
   1ac94:	462a      	mov	r2, r5
   1ac96:	2120      	movs	r1, #32
   1ac98:	2004      	movs	r0, #4
   1ac9a:	f7fe fff9 	bl	19c90 <MPSL_IRQ_RADIO_Handler+0x40>
   1ac9e:	2000      	movs	r0, #0
   1aca0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   1aca4:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
   1aca8:	f1b0 3fff 	cmp.w	r0, #4294967295
   1acac:	d005      	beq.n	1acba <MPSL_IRQ_RADIO_Handler+0x106a>
   1acae:	f002 f991 	bl	1cfd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   1acb2:	f04f 30ff 	mov.w	r0, #4294967295
   1acb6:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
   1acba:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
   1acbe:	b120      	cbz	r0, 1acca <MPSL_IRQ_RADIO_Handler+0x107a>
   1acc0:	2005      	movs	r0, #5
   1acc2:	f001 fe4b 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1acc6:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
   1acca:	2004      	movs	r0, #4
   1accc:	f001 fe46 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1acd0:	f001 feb4 	bl	1ca3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
   1acd4:	2020      	movs	r0, #32
   1acd6:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
   1acda:	4809      	ldr	r0, [pc, #36]	; (1ad00 <MPSL_IRQ_RADIO_Handler+0x10b0>)
   1acdc:	6880      	ldr	r0, [r0, #8]
   1acde:	f8c0 b000 	str.w	fp, [r0]
   1ace2:	4808      	ldr	r0, [pc, #32]	; (1ad04 <MPSL_IRQ_RADIO_Handler+0x10b4>)
   1ace4:	f8c0 b000 	str.w	fp, [r0]
   1ace8:	2001      	movs	r0, #1
   1acea:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   1acee:	0000      	.short	0x0000
   1acf0:	2000161c 	.word	0x2000161c
   1acf4:	2000121c 	.word	0x2000121c
   1acf8:	2000159c 	.word	0x2000159c
   1acfc:	00000000 	.word	0x00000000
   1ad00:	20000378 	.word	0x20000378
   1ad04:	40000508 	.word	0x40000508

0001ad08 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
   1ad08:	4906      	ldr	r1, [pc, #24]	; (1ad24 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
   1ad0a:	b510      	push	{r4, lr}
   1ad0c:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
   1ad10:	2a20      	cmp	r2, #32
   1ad12:	bf1c      	itt	ne
   1ad14:	7788      	strbne	r0, [r1, #30]
   1ad16:	bd10      	popne	{r4, pc}
   1ad18:	f240 319a 	movw	r1, #922	; 0x39a
   1ad1c:	2070      	movs	r0, #112	; 0x70
   1ad1e:	f002 fb11 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1ad22:	0000      	.short	0x0000
   1ad24:	2000161c 	.word	0x2000161c

0001ad28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
   1ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad2c:	4e69      	ldr	r6, [pc, #420]	; (1aed4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
   1ad2e:	4607      	mov	r7, r0
   1ad30:	b08d      	sub	sp, #52	; 0x34
   1ad32:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
   1ad36:	4688      	mov	r8, r1
   1ad38:	2820      	cmp	r0, #32
   1ad3a:	d055      	beq.n	1ade8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
   1ad3c:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
   1ad40:	f106 0408 	add.w	r4, r6, #8
   1ad44:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1ad48:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
   1ad4c:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
   1ad50:	2020      	movs	r0, #32
   1ad52:	f88d 0020 	strb.w	r0, [sp, #32]
   1ad56:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   1ad5a:	aa0a      	add	r2, sp, #40	; 0x28
   1ad5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1ad60:	4430      	add	r0, r6
   1ad62:	a909      	add	r1, sp, #36	; 0x24
   1ad64:	f890 5020 	ldrb.w	r5, [r0, #32]
   1ad68:	68f0      	ldr	r0, [r6, #12]
   1ad6a:	9002      	str	r0, [sp, #8]
   1ad6c:	6830      	ldr	r0, [r6, #0]
   1ad6e:	4438      	add	r0, r7
   1ad70:	f001 fa14 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1ad74:	f8da 000c 	ldr.w	r0, [sl, #12]
   1ad78:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ad7a:	2f65      	cmp	r7, #101	; 0x65
   1ad7c:	4408      	add	r0, r1
   1ad7e:	d338      	bcc.n	1adf2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
   1ad80:	4a55      	ldr	r2, [pc, #340]	; (1aed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
   1ad82:	2100      	movs	r1, #0
   1ad84:	1bd2      	subs	r2, r2, r7
   1ad86:	eb71 0201 	sbcs.w	r2, r1, r1
   1ad8a:	d332      	bcc.n	1adf2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
   1ad8c:	6822      	ldr	r2, [r4, #0]
   1ad8e:	1a82      	subs	r2, r0, r2
   1ad90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1ad94:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1ad98:	d82b      	bhi.n	1adf2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
   1ad9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1ad9e:	6060      	str	r0, [r4, #4]
   1ada0:	4630      	mov	r0, r6
   1ada2:	f884 8010 	strb.w	r8, [r4, #16]
   1ada6:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
   1adaa:	f10d 0a20 	add.w	sl, sp, #32
   1adae:	2d20      	cmp	r5, #32
   1adb0:	bf1c      	itt	ne
   1adb2:	494a      	ldrne	r1, [pc, #296]	; (1aedc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
   1adb4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
   1adb8:	d050      	beq.n	1ae5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
   1adba:	bf00      	nop
   1adbc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
   1adc0:	eb09 0880 	add.w	r8, r9, r0, lsl #2
   1adc4:	6861      	ldr	r1, [r4, #4]
   1adc6:	f8d8 6008 	ldr.w	r6, [r8, #8]
   1adca:	f108 0008 	add.w	r0, r8, #8
   1adce:	1a71      	subs	r1, r6, r1
   1add0:	0209      	lsls	r1, r1, #8
   1add2:	17ca      	asrs	r2, r1, #31
   1add4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
   1add8:	1209      	asrs	r1, r1, #8
   1adda:	d42d      	bmi.n	1ae38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
   1addc:	89c0      	ldrh	r0, [r0, #14]
   1adde:	2800      	cmp	r0, #0
   1ade0:	d03c      	beq.n	1ae5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
   1ade2:	89e0      	ldrh	r0, [r4, #14]
   1ade4:	b148      	cbz	r0, 1adfa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
   1ade6:	e039      	b.n	1ae5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
   1ade8:	f640 3173 	movw	r1, #2931	; 0xb73
   1adec:	2070      	movs	r0, #112	; 0x70
   1adee:	f002 faa9 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1adf2:	b00d      	add	sp, #52	; 0x34
   1adf4:	2001      	movs	r0, #1
   1adf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adfa:	6820      	ldr	r0, [r4, #0]
   1adfc:	900c      	str	r0, [sp, #48]	; 0x30
   1adfe:	f002 f8e3 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1ae02:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1ae06:	bf08      	it	eq
   1ae08:	200d      	moveq	r0, #13
   1ae0a:	d00b      	beq.n	1ae24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
   1ae0c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1ae10:	3856      	subs	r0, #86	; 0x56
   1ae12:	bf08      	it	eq
   1ae14:	201c      	moveq	r0, #28
   1ae16:	d005      	beq.n	1ae24 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
   1ae18:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1ae1c:	389f      	subs	r0, #159	; 0x9f
   1ae1e:	bf14      	ite	ne
   1ae20:	2000      	movne	r0, #0
   1ae22:	2032      	moveq	r0, #50	; 0x32
   1ae24:	1c41      	adds	r1, r0, #1
   1ae26:	980c      	ldr	r0, [sp, #48]	; 0x30
   1ae28:	1a30      	subs	r0, r6, r0
   1ae2a:	0200      	lsls	r0, r0, #8
   1ae2c:	17c2      	asrs	r2, r0, #31
   1ae2e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
   1ae32:	1200      	asrs	r0, r0, #8
   1ae34:	4288      	cmp	r0, r1
   1ae36:	da11      	bge.n	1ae5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
   1ae38:	f88a 5000 	strb.w	r5, [sl]
   1ae3c:	f898 1018 	ldrb.w	r1, [r8, #24]
   1ae40:	7c20      	ldrb	r0, [r4, #16]
   1ae42:	4281      	cmp	r1, r0
   1ae44:	d805      	bhi.n	1ae52 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
   1ae46:	9802      	ldr	r0, [sp, #8]
   1ae48:	6060      	str	r0, [r4, #4]
   1ae4a:	b00d      	add	sp, #52	; 0x34
   1ae4c:	2002      	movs	r0, #2
   1ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae52:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
   1ae56:	7845      	ldrb	r5, [r0, #1]
   1ae58:	2d20      	cmp	r5, #32
   1ae5a:	d1af      	bne.n	1adbc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
   1ae5c:	2005      	movs	r0, #5
   1ae5e:	f001 fd7d 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1ae62:	4c1c      	ldr	r4, [pc, #112]	; (1aed4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
   1ae64:	f04f 30ff 	mov.w	r0, #4294967295
   1ae68:	6060      	str	r0, [r4, #4]
   1ae6a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   1ae6e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1ae72:	2120      	movs	r1, #32
   1ae74:	2a20      	cmp	r2, #32
   1ae76:	d003      	beq.n	1ae80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
   1ae78:	2005      	movs	r0, #5
   1ae7a:	f7fe ff09 	bl	19c90 <MPSL_IRQ_RADIO_Handler+0x40>
   1ae7e:	e004      	b.n	1ae8a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
   1ae80:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1ae84:	4420      	add	r0, r4
   1ae86:	f890 0020 	ldrb.w	r0, [r0, #32]
   1ae8a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   1ae8e:	4913      	ldr	r1, [pc, #76]	; (1aedc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
   1ae90:	eb01 1182 	add.w	r1, r1, r2, lsl #6
   1ae94:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1ae98:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   1ae9c:	7048      	strb	r0, [r1, #1]
   1ae9e:	6820      	ldr	r0, [r4, #0]
   1aea0:	4438      	add	r0, r7
   1aea2:	6020      	str	r0, [r4, #0]
   1aea4:	20ff      	movs	r0, #255	; 0xff
   1aea6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   1aeaa:	7e60      	ldrb	r0, [r4, #25]
   1aeac:	2801      	cmp	r0, #1
   1aeae:	d105      	bne.n	1aebc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
   1aeb0:	68e0      	ldr	r0, [r4, #12]
   1aeb2:	1e40      	subs	r0, r0, #1
   1aeb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1aeb8:	f001 fbb4 	bl	1c624 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
   1aebc:	f89d 0020 	ldrb.w	r0, [sp, #32]
   1aec0:	2820      	cmp	r0, #32
   1aec2:	d003      	beq.n	1aecc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
   1aec4:	4806      	ldr	r0, [pc, #24]	; (1aee0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
   1aec6:	7840      	ldrb	r0, [r0, #1]
   1aec8:	f002 fb10 	bl	1d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   1aecc:	b00d      	add	sp, #52	; 0x34
   1aece:	2000      	movs	r0, #0
   1aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aed4:	2000161c 	.word	0x2000161c
   1aed8:	0f424000 	.word	0x0f424000
   1aedc:	2000159c 	.word	0x2000159c
   1aee0:	20000378 	.word	0x20000378

0001aee4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
   1aee4:	4806      	ldr	r0, [pc, #24]	; (1af00 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
   1aee6:	b510      	push	{r4, lr}
   1aee8:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
   1aeec:	2920      	cmp	r1, #32
   1aeee:	bf1c      	itt	ne
   1aef0:	7e00      	ldrbne	r0, [r0, #24]
   1aef2:	bd10      	popne	{r4, pc}
   1aef4:	f640 316d 	movw	r1, #2925	; 0xb6d
   1aef8:	2070      	movs	r0, #112	; 0x70
   1aefa:	f002 fa23 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1aefe:	0000      	.short	0x0000
   1af00:	2000161c 	.word	0x2000161c

0001af04 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
   1af04:	b570      	push	{r4, r5, r6, lr}
   1af06:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
   1af0a:	4809      	ldr	r0, [pc, #36]	; (1af30 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
   1af0c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
   1af10:	4908      	ldr	r1, [pc, #32]	; (1af34 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
   1af12:	6920      	ldr	r0, [r4, #16]
   1af14:	fba0 5601 	umull	r5, r6, r0, r1
   1af18:	68a0      	ldr	r0, [r4, #8]
   1af1a:	f007 ff63 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1af1e:	8ae1      	ldrh	r1, [r4, #22]
   1af20:	7d22      	ldrb	r2, [r4, #20]
   1af22:	1c40      	adds	r0, r0, #1
   1af24:	4411      	add	r1, r2
   1af26:	4408      	add	r0, r1
   1af28:	1940      	adds	r0, r0, r5
   1af2a:	f146 0100 	adc.w	r1, r6, #0
   1af2e:	bd70      	pop	{r4, r5, r6, pc}
   1af30:	2000121c 	.word	0x2000121c
   1af34:	1e848000 	.word	0x1e848000

0001af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
   1af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af3a:	4d6f      	ldr	r5, [pc, #444]	; (1b0f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
   1af3c:	2601      	movs	r6, #1
   1af3e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
   1af42:	4a6e      	ldr	r2, [pc, #440]	; (1b0fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
   1af44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1af46:	2808      	cmp	r0, #8
   1af48:	d272      	bcs.n	1b030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
   1af4a:	e8df f000 	tbb	[pc, r0]
   1af4e:	7704      	.short	0x7704
   1af50:	44cfb19f 	.word	0x44cfb19f
   1af54:	bbb6      	.short	0xbbb6
   1af56:	f1b1 3fff 	cmp.w	r1, #4294967295
   1af5a:	d104      	bne.n	1af66 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
   1af5c:	f002 f856 	bl	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1af60:	f001 fa86 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1af64:	62e0      	str	r0, [r4, #44]	; 0x2c
   1af66:	8ae0      	ldrh	r0, [r4, #22]
   1af68:	b110      	cbz	r0, 1af70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
   1af6a:	f002 f973 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1af6e:	b180      	cbz	r0, 1af92 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
   1af70:	f7ff fd24 	bl	1a9bc <MPSL_IRQ_RADIO_Handler+0xd6c>
   1af74:	20ff      	movs	r0, #255	; 0xff
   1af76:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
   1af7a:	6861      	ldr	r1, [r4, #4]
   1af7c:	f1b1 3fff 	cmp.w	r1, #4294967295
   1af80:	d003      	beq.n	1af8a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
   1af82:	2005      	movs	r0, #5
   1af84:	f001 fc34 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1af88:	b140      	cbz	r0, 1af9c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
   1af8a:	7e60      	ldrb	r0, [r4, #25]
   1af8c:	2801      	cmp	r0, #1
   1af8e:	d110      	bne.n	1afb2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
   1af90:	e009      	b.n	1afa6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
   1af92:	f640 0169 	movw	r1, #2153	; 0x869
   1af96:	2070      	movs	r0, #112	; 0x70
   1af98:	f002 f9d4 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1af9c:	f640 016e 	movw	r1, #2158	; 0x86e
   1afa0:	2070      	movs	r0, #112	; 0x70
   1afa2:	f002 f9cf 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1afa6:	68e0      	ldr	r0, [r4, #12]
   1afa8:	1e40      	subs	r0, r0, #1
   1afaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1afae:	f001 fb39 	bl	1c624 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
   1afb2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1afb6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1afba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1afbe:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1afc2:	6840      	ldr	r0, [r0, #4]
   1afc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1afc8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1afcc:	b001      	add	sp, #4
   1afce:	2101      	movs	r1, #1
   1afd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1afd4:	4710      	bx	r2
   1afd6:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
   1afda:	b158      	cbz	r0, 1aff4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
   1afdc:	f1b1 3fff 	cmp.w	r1, #4294967295
   1afe0:	d104      	bne.n	1afec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
   1afe2:	f002 f813 	bl	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1afe6:	f001 fa43 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1afea:	62e0      	str	r0, [r4, #44]	; 0x2c
   1afec:	2000      	movs	r0, #0
   1afee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
   1aff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aff4:	f7ff fce2 	bl	1a9bc <MPSL_IRQ_RADIO_Handler+0xd6c>
   1aff8:	f04f 30ff 	mov.w	r0, #4294967295
   1affc:	6060      	str	r0, [r4, #4]
   1affe:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   1b002:	f88d 0000 	strb.w	r0, [sp]
   1b006:	f89d 0000 	ldrb.w	r0, [sp]
   1b00a:	b190      	cbz	r0, 1b032 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
   1b00c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1b010:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1b014:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1b018:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1b01c:	6840      	ldr	r0, [r0, #4]
   1b01e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1b022:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1b026:	b001      	add	sp, #4
   1b028:	2106      	movs	r1, #6
   1b02a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b02e:	4710      	bx	r2
   1b030:	e05c      	b.n	1b0ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
   1b032:	f640 0185 	movw	r1, #2181	; 0x885
   1b036:	2070      	movs	r0, #112	; 0x70
   1b038:	f002 f984 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1b03c:	f7ff fcbe 	bl	1a9bc <MPSL_IRQ_RADIO_Handler+0xd6c>
   1b040:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
   1b044:	f002 f906 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1b048:	b120      	cbz	r0, 1b054 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
   1b04a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1b04c:	f1b0 3fff 	cmp.w	r0, #4294967295
   1b050:	d005      	beq.n	1b05e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
   1b052:	e009      	b.n	1b068 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
   1b054:	f640 0193 	movw	r1, #2195	; 0x893
   1b058:	2070      	movs	r0, #112	; 0x70
   1b05a:	f002 f973 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1b05e:	f001 ffd5 	bl	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1b062:	f001 fa05 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1b066:	62e0      	str	r0, [r4, #44]	; 0x2c
   1b068:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1b06c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1b070:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1b074:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1b078:	6840      	ldr	r0, [r0, #4]
   1b07a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1b07e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1b082:	b001      	add	sp, #4
   1b084:	2100      	movs	r1, #0
   1b086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b08a:	4710      	bx	r2
   1b08c:	f001 fda6 	bl	1cbdc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
   1b090:	8ae0      	ldrh	r0, [r4, #22]
   1b092:	b110      	cbz	r0, 1b09a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
   1b094:	f002 f8de 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1b098:	b128      	cbz	r0, 1b0a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
   1b09a:	f001 fdb3 	bl	1cc04 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
   1b09e:	2800      	cmp	r0, #0
   1b0a0:	bf18      	it	ne
   1b0a2:	7766      	strbne	r6, [r4, #29]
   1b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b0a6:	f640 019d 	movw	r1, #2205	; 0x89d
   1b0aa:	2070      	movs	r0, #112	; 0x70
   1b0ac:	f002 f94a 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1b0b0:	4813      	ldr	r0, [pc, #76]	; (1b100 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
   1b0b2:	6006      	str	r6, [r0, #0]
   1b0b4:	6890      	ldr	r0, [r2, #8]
   1b0b6:	6006      	str	r6, [r0, #0]
   1b0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b0ba:	7810      	ldrb	r0, [r2, #0]
   1b0bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b0c0:	f002 ba14 	b.w	1d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   1b0c4:	f7ff fc7a 	bl	1a9bc <MPSL_IRQ_RADIO_Handler+0xd6c>
   1b0c8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1b0cc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1b0d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1b0d4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1b0d8:	6840      	ldr	r0, [r0, #4]
   1b0da:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1b0de:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1b0e2:	b001      	add	sp, #4
   1b0e4:	2105      	movs	r1, #5
   1b0e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b0ea:	4710      	bx	r2
   1b0ec:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
   1b0f0:	2070      	movs	r0, #112	; 0x70
   1b0f2:	f002 f927 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1b0f6:	0000      	.short	0x0000
   1b0f8:	2000121c 	.word	0x2000121c
   1b0fc:	20000378 	.word	0x20000378
   1b100:	40000508 	.word	0x40000508

0001b104 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
   1b104:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b108:	4682      	mov	sl, r0
   1b10a:	48ef      	ldr	r0, [pc, #956]	; (1b4c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
   1b10c:	b095      	sub	sp, #84	; 0x54
   1b10e:	6800      	ldr	r0, [r0, #0]
   1b110:	4dee      	ldr	r5, [pc, #952]	; (1b4cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
   1b112:	05c0      	lsls	r0, r0, #23
   1b114:	0dc0      	lsrs	r0, r0, #23
   1b116:	d00e      	beq.n	1b136 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
   1b118:	3810      	subs	r0, #16
   1b11a:	b240      	sxtb	r0, r0
   1b11c:	2800      	cmp	r0, #0
   1b11e:	bfb8      	it	lt
   1b120:	f000 000f 	andlt.w	r0, r0, #15
   1b124:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1b128:	bfac      	ite	ge
   1b12a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
   1b12e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
   1b132:	0940      	lsrs	r0, r0, #5
   1b134:	d00d      	beq.n	1b152 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
   1b136:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b138:	f04f 0b00 	mov.w	fp, #0
   1b13c:	7800      	ldrb	r0, [r0, #0]
   1b13e:	2800      	cmp	r0, #0
   1b140:	bf18      	it	ne
   1b142:	2801      	cmpne	r0, #1
   1b144:	d018      	beq.n	1b178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
   1b146:	f240 713b 	movw	r1, #1851	; 0x73b
   1b14a:	f04f 0070 	mov.w	r0, #112	; 0x70
   1b14e:	f002 f8f9 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1b152:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
   1b156:	f04f 0b01 	mov.w	fp, #1
   1b15a:	2820      	cmp	r0, #32
   1b15c:	d007      	beq.n	1b16e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
   1b15e:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b160:	7800      	ldrb	r0, [r0, #0]
   1b162:	b148      	cbz	r0, 1b178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
   1b164:	f240 7137 	movw	r1, #1847	; 0x737
   1b168:	2070      	movs	r0, #112	; 0x70
   1b16a:	f002 f8eb 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1b16e:	f240 7134 	movw	r1, #1844	; 0x734
   1b172:	2070      	movs	r0, #112	; 0x70
   1b174:	f002 f8e6 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1b178:	4cd5      	ldr	r4, [pc, #852]	; (1b4d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
   1b17a:	b124      	cbz	r4, 1b186 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
   1b17c:	2100      	movs	r1, #0
   1b17e:	f240 703e 	movw	r0, #1854	; 0x73e
   1b182:	f3af 8000 	nop.w
   1b186:	2000      	movs	r0, #0
   1b188:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   1b18c:	49d1      	ldr	r1, [pc, #836]	; (1b4d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
   1b18e:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
   1b192:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1b196:	f04f 0901 	mov.w	r9, #1
   1b19a:	9000      	str	r0, [sp, #0]
   1b19c:	b124      	cbz	r4, 1b1a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
   1b19e:	2100      	movs	r1, #0
   1b1a0:	f240 7049 	movw	r0, #1865	; 0x749
   1b1a4:	f3af 8000 	nop.w
   1b1a8:	f1b9 0f00 	cmp.w	r9, #0
   1b1ac:	d00a      	beq.n	1b1c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
   1b1ae:	bf00      	nop
   1b1b0:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
   1b1b4:	f04f 0800 	mov.w	r8, #0
   1b1b8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
   1b1bc:	f1bb 0f00 	cmp.w	fp, #0
   1b1c0:	d007      	beq.n	1b1d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
   1b1c2:	e038      	b.n	1b236 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
   1b1c4:	48c4      	ldr	r0, [pc, #784]	; (1b4d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
   1b1c6:	2800      	cmp	r0, #0
   1b1c8:	bf18      	it	ne
   1b1ca:	f3af 8000 	nopne.w
   1b1ce:	b662      	cpsie	i
   1b1d0:	e7ee      	b.n	1b1b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
   1b1d2:	4637      	mov	r7, r6
   1b1d4:	2001      	movs	r0, #1
   1b1d6:	ea20 0607 	bic.w	r6, r0, r7
   1b1da:	48c0      	ldr	r0, [pc, #768]	; (1b4dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
   1b1dc:	2240      	movs	r2, #64	; 0x40
   1b1de:	eb00 1187 	add.w	r1, r0, r7, lsl #6
   1b1e2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
   1b1e6:	f007 ff80 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1b1ea:	b124      	cbz	r4, 1b1f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
   1b1ec:	2100      	movs	r1, #0
   1b1ee:	f240 505e 	movw	r0, #1374	; 0x55e
   1b1f2:	f3af 8000 	nop.w
   1b1f6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   1b1fa:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   1b1fe:	4429      	add	r1, r5
   1b200:	4428      	add	r0, r5
   1b202:	8c0a      	ldrh	r2, [r1, #32]
   1b204:	8402      	strh	r2, [r0, #32]
   1b206:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
   1b20a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
   1b20e:	b124      	cbz	r4, 1b21a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
   1b210:	2100      	movs	r1, #0
   1b212:	f240 5062 	movw	r0, #1378	; 0x562
   1b216:	f3af 8000 	nop.w
   1b21a:	b124      	cbz	r4, 1b226 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
   1b21c:	2100      	movs	r1, #0
   1b21e:	f240 7053 	movw	r0, #1875	; 0x753
   1b222:	f3af 8000 	nop.w
   1b226:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
   1b22a:	f88d 0008 	strb.w	r0, [sp, #8]
   1b22e:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b232:	2800      	cmp	r0, #0
   1b234:	d1b2      	bne.n	1b19c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
   1b236:	b124      	cbz	r4, 1b242 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
   1b238:	2100      	movs	r1, #0
   1b23a:	f240 705d 	movw	r0, #1885	; 0x75d
   1b23e:	f3af 8000 	nop.w
   1b242:	a802      	add	r0, sp, #8
   1b244:	f001 f91a 	bl	1c47c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
   1b248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1b24c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1b250:	4633      	mov	r3, r6
   1b252:	aa09      	add	r2, sp, #36	; 0x24
   1b254:	a80e      	add	r0, sp, #56	; 0x38
   1b256:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b258:	f7ff fa4e 	bl	1a6f8 <MPSL_IRQ_RADIO_Handler+0xaa8>
   1b25c:	b124      	cbz	r4, 1b268 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
   1b25e:	2100      	movs	r1, #0
   1b260:	f240 7064 	movw	r0, #1892	; 0x764
   1b264:	f3af 8000 	nop.w
   1b268:	4a9c      	ldr	r2, [pc, #624]	; (1b4dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
   1b26a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1b26c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
   1b270:	a809      	add	r0, sp, #36	; 0x24
   1b272:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
   1b276:	2a01      	cmp	r2, #1
   1b278:	bf18      	it	ne
   1b27a:	2a02      	cmpne	r2, #2
   1b27c:	d138      	bne.n	1b2f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
   1b27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b282:	eba2 0201 	sub.w	r2, r2, r1
   1b286:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1b28a:	eba3 0101 	sub.w	r1, r3, r1
   1b28e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   1b292:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b296:	2a02      	cmp	r2, #2
   1b298:	d364      	bcc.n	1b364 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
   1b29a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1b29e:	bf98      	it	ls
   1b2a0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
   1b2a4:	d85e      	bhi.n	1b364 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
   1b2a6:	f04f 0801 	mov.w	r8, #1
   1b2aa:	ab14      	add	r3, sp, #80	; 0x50
   1b2ac:	aa13      	add	r2, sp, #76	; 0x4c
   1b2ae:	4631      	mov	r1, r6
   1b2b0:	f7fe fee2 	bl	1a078 <MPSL_IRQ_RADIO_Handler+0x428>
   1b2b4:	2800      	cmp	r0, #0
   1b2b6:	d05d      	beq.n	1b374 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
   1b2b8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1b2bc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   1b2c0:	4633      	mov	r3, r6
   1b2c2:	428a      	cmp	r2, r1
   1b2c4:	d05a      	beq.n	1b37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
   1b2c6:	2005      	movs	r0, #5
   1b2c8:	f7fe fce2 	bl	19c90 <MPSL_IRQ_RADIO_Handler+0x40>
   1b2cc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
   1b2d0:	7048      	strb	r0, [r1, #1]
   1b2d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
   1b2d6:	2820      	cmp	r0, #32
   1b2d8:	bf1c      	itt	ne
   1b2da:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
   1b2de:	f880 a001 	strbne.w	sl, [r0, #1]
   1b2e2:	d057      	beq.n	1b394 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
   1b2e4:	4632      	mov	r2, r6
   1b2e6:	4651      	mov	r1, sl
   1b2e8:	f05f 0003 	movs.w	r0, #3
   1b2ec:	f7ff fc18 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1b2f0:	b124      	cbz	r4, 1b2fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
   1b2f2:	2100      	movs	r1, #0
   1b2f4:	f240 7069 	movw	r0, #1897	; 0x769
   1b2f8:	f3af 8000 	nop.w
   1b2fc:	4878      	ldr	r0, [pc, #480]	; (1b4e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
   1b2fe:	2800      	cmp	r0, #0
   1b300:	bf18      	it	ne
   1b302:	f3af 8000 	nopne.w
   1b306:	f3ef 8910 	mrs	r9, PRIMASK
   1b30a:	b672      	cpsid	i
   1b30c:	b124      	cbz	r4, 1b318 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
   1b30e:	2100      	movs	r1, #0
   1b310:	f240 706f 	movw	r0, #1903	; 0x76f
   1b314:	f3af 8000 	nop.w
   1b318:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
   1b31c:	f88d 0008 	strb.w	r0, [sp, #8]
   1b320:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b324:	2800      	cmp	r0, #0
   1b326:	f47f af39 	bne.w	1b19c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
   1b32a:	b124      	cbz	r4, 1b336 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
   1b32c:	2100      	movs	r1, #0
   1b32e:	f240 7077 	movw	r0, #1911	; 0x777
   1b332:	f3af 8000 	nop.w
   1b336:	af09      	add	r7, sp, #36	; 0x24
   1b338:	9800      	ldr	r0, [sp, #0]
   1b33a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
   1b33e:	f100 0708 	add.w	r7, r0, #8
   1b342:	f1b8 0f00 	cmp.w	r8, #0
   1b346:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
   1b34a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b34c:	6181      	str	r1, [r0, #24]
   1b34e:	d051      	beq.n	1b3f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
   1b350:	b124      	cbz	r4, 1b35c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
   1b352:	2100      	movs	r1, #0
   1b354:	f240 7084 	movw	r0, #1924	; 0x784
   1b358:	f3af 8000 	nop.w
   1b35c:	f1bb 0f00 	cmp.w	fp, #0
   1b360:	d139      	bne.n	1b3d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
   1b362:	e01f      	b.n	1b3a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
   1b364:	4632      	mov	r2, r6
   1b366:	4651      	mov	r1, sl
   1b368:	2004      	movs	r0, #4
   1b36a:	f7ff fbd9 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1b36e:	f04f 0801 	mov.w	r8, #1
   1b372:	e7bd      	b.n	1b2f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
   1b374:	4632      	mov	r2, r6
   1b376:	4651      	mov	r1, sl
   1b378:	2004      	movs	r0, #4
   1b37a:	e7b7      	b.n	1b2ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
   1b37c:	2920      	cmp	r1, #32
   1b37e:	bf19      	ittee	ne
   1b380:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
   1b384:	7840      	ldrbne	r0, [r0, #1]
   1b386:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
   1b38a:	4428      	addeq	r0, r5
   1b38c:	bf08      	it	eq
   1b38e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
   1b392:	e79b      	b.n	1b2cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
   1b394:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   1b398:	4429      	add	r1, r5
   1b39a:	f881 a020 	strb.w	sl, [r1, #32]
   1b39e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   1b3a2:	e79f      	b.n	1b2e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
   1b3a4:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b3a6:	f010 0fff 	tst.w	r0, #255	; 0xff
   1b3aa:	d014      	beq.n	1b3d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
   1b3ac:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
   1b3b0:	2820      	cmp	r0, #32
   1b3b2:	d110      	bne.n	1b3d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
   1b3b4:	b124      	cbz	r4, 1b3c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
   1b3b6:	2100      	movs	r1, #0
   1b3b8:	f240 7089 	movw	r0, #1929	; 0x789
   1b3bc:	f3af 8000 	nop.w
   1b3c0:	4631      	mov	r1, r6
   1b3c2:	2002      	movs	r0, #2
   1b3c4:	f7ff fbde 	bl	1ab84 <MPSL_IRQ_RADIO_Handler+0xf34>
   1b3c8:	9010      	str	r0, [sp, #64]	; 0x40
   1b3ca:	b920      	cbnz	r0, 1b3d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
   1b3cc:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b3ce:	7800      	ldrb	r0, [r0, #0]
   1b3d0:	b1e8      	cbz	r0, 1b40e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
   1b3d2:	2801      	cmp	r0, #1
   1b3d4:	d02a      	beq.n	1b42c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
   1b3d6:	b124      	cbz	r4, 1b3e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
   1b3d8:	2100      	movs	r1, #0
   1b3da:	f240 70a6 	movw	r0, #1958	; 0x7a6
   1b3de:	f3af 8000 	nop.w
   1b3e2:	20ff      	movs	r0, #255	; 0xff
   1b3e4:	f1bb 0f00 	cmp.w	fp, #0
   1b3e8:	bf18      	it	ne
   1b3ea:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
   1b3ee:	d026      	beq.n	1b43e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
   1b3f0:	f04f 0801 	mov.w	r8, #1
   1b3f4:	b124      	cbz	r4, 1b400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
   1b3f6:	2100      	movs	r1, #0
   1b3f8:	f240 70b7 	movw	r0, #1975	; 0x7b7
   1b3fc:	f3af 8000 	nop.w
   1b400:	9810      	ldr	r0, [sp, #64]	; 0x40
   1b402:	4e38      	ldr	r6, [pc, #224]	; (1b4e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
   1b404:	2802      	cmp	r0, #2
   1b406:	d023      	beq.n	1b450 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
   1b408:	2801      	cmp	r0, #1
   1b40a:	d029      	beq.n	1b460 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
   1b40c:	e02d      	b.n	1b46a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
   1b40e:	b124      	cbz	r4, 1b41a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
   1b410:	2100      	movs	r1, #0
   1b412:	f240 7091 	movw	r0, #1937	; 0x791
   1b416:	f3af 8000 	nop.w
   1b41a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   1b41e:	4651      	mov	r1, sl
   1b420:	2004      	movs	r0, #4
   1b422:	f7ff fb7d 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1b426:	f04f 0801 	mov.w	r8, #1
   1b42a:	e7e3      	b.n	1b3f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
   1b42c:	2c00      	cmp	r4, #0
   1b42e:	f43f aeb5 	beq.w	1b19c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
   1b432:	2100      	movs	r1, #0
   1b434:	f240 709c 	movw	r0, #1948	; 0x79c
   1b438:	f3af 8000 	nop.w
   1b43c:	e6ae      	b.n	1b19c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
   1b43e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   1b442:	2101      	movs	r1, #1
   1b444:	4391      	bics	r1, r2
   1b446:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
   1b44a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
   1b44e:	e7cf      	b.n	1b3f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
   1b450:	68a8      	ldr	r0, [r5, #8]
   1b452:	990e      	ldr	r1, [sp, #56]	; 0x38
   1b454:	1a40      	subs	r0, r0, r1
   1b456:	f007 fcc5 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1b45a:	6871      	ldr	r1, [r6, #4]
   1b45c:	b921      	cbnz	r1, 1b468 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
   1b45e:	e004      	b.n	1b46a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
   1b460:	6871      	ldr	r1, [r6, #4]
   1b462:	f04f 30ff 	mov.w	r0, #4294967295
   1b466:	b101      	cbz	r1, 1b46a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
   1b468:	4788      	blx	r1
   1b46a:	f1b9 0f00 	cmp.w	r9, #0
   1b46e:	d024      	beq.n	1b4ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
   1b470:	b124      	cbz	r4, 1b47c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
   1b472:	2100      	movs	r1, #0
   1b474:	f240 70c7 	movw	r0, #1991	; 0x7c7
   1b478:	f3af 8000 	nop.w
   1b47c:	f1b8 0f00 	cmp.w	r8, #0
   1b480:	d011      	beq.n	1b4a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
   1b482:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   1b486:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1b48a:	4428      	add	r0, r5
   1b48c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
   1b490:	2820      	cmp	r0, #32
   1b492:	d008      	beq.n	1b4a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
   1b494:	b124      	cbz	r4, 1b4a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
   1b496:	2100      	movs	r1, #0
   1b498:	f240 70ce 	movw	r0, #1998	; 0x7ce
   1b49c:	f3af 8000 	nop.w
   1b4a0:	7870      	ldrb	r0, [r6, #1]
   1b4a2:	f002 f823 	bl	1d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   1b4a6:	b124      	cbz	r4, 1b4b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
   1b4a8:	2100      	movs	r1, #0
   1b4aa:	f240 70d3 	movw	r0, #2003	; 0x7d3
   1b4ae:	f3af 8000 	nop.w
   1b4b2:	b017      	add	sp, #92	; 0x5c
   1b4b4:	4640      	mov	r0, r8
   1b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4ba:	4807      	ldr	r0, [pc, #28]	; (1b4d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
   1b4bc:	2800      	cmp	r0, #0
   1b4be:	bf18      	it	ne
   1b4c0:	f3af 8000 	nopne.w
   1b4c4:	b662      	cpsie	i
   1b4c6:	e7d3      	b.n	1b470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
   1b4c8:	e000ed04 	.word	0xe000ed04
   1b4cc:	2000161c 	.word	0x2000161c
   1b4d0:	00000000 	.word	0x00000000
   1b4d4:	2000121c 	.word	0x2000121c
   1b4d8:	00000000 	.word	0x00000000
   1b4dc:	2000159c 	.word	0x2000159c
   1b4e0:	00000000 	.word	0x00000000
   1b4e4:	20000378 	.word	0x20000378

0001b4e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
   1b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4ec:	4606      	mov	r6, r0
   1b4ee:	7800      	ldrb	r0, [r0, #0]
   1b4f0:	b08d      	sub	sp, #52	; 0x34
   1b4f2:	b118      	cbz	r0, 1b4fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
   1b4f4:	b00d      	add	sp, #52	; 0x34
   1b4f6:	2000      	movs	r0, #0
   1b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4fc:	488c      	ldr	r0, [pc, #560]	; (1b730 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
   1b4fe:	6800      	ldr	r0, [r0, #0]
   1b500:	05c0      	lsls	r0, r0, #23
   1b502:	0dc0      	lsrs	r0, r0, #23
   1b504:	d00e      	beq.n	1b524 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
   1b506:	3810      	subs	r0, #16
   1b508:	b240      	sxtb	r0, r0
   1b50a:	2800      	cmp	r0, #0
   1b50c:	bfb8      	it	lt
   1b50e:	f000 000f 	andlt.w	r0, r0, #15
   1b512:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1b516:	bfac      	ite	ge
   1b518:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
   1b51c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
   1b520:	0940      	lsrs	r0, r0, #5
   1b522:	d0e7      	beq.n	1b4f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
   1b524:	4d83      	ldr	r5, [pc, #524]	; (1b734 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
   1b526:	4c84      	ldr	r4, [pc, #528]	; (1b738 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
   1b528:	f04f 0b01 	mov.w	fp, #1
   1b52c:	2700      	movs	r7, #0
   1b52e:	b125      	cbz	r5, 1b53a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
   1b530:	2100      	movs	r1, #0
   1b532:	f240 50e5 	movw	r0, #1509	; 0x5e5
   1b536:	f3af 8000 	nop.w
   1b53a:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
   1b53e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   1b542:	f04f 0900 	mov.w	r9, #0
   1b546:	b125      	cbz	r5, 1b552 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
   1b548:	2100      	movs	r1, #0
   1b54a:	f240 50ea 	movw	r0, #1514	; 0x5ea
   1b54e:	f3af 8000 	nop.w
   1b552:	487a      	ldr	r0, [pc, #488]	; (1b73c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
   1b554:	ea2b 080a 	bic.w	r8, fp, sl
   1b558:	eb00 118a 	add.w	r1, r0, sl, lsl #6
   1b55c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
   1b560:	2240      	movs	r2, #64	; 0x40
   1b562:	f007 fdc2 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1b566:	b125      	cbz	r5, 1b572 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
   1b568:	2100      	movs	r1, #0
   1b56a:	f240 505e 	movw	r0, #1374	; 0x55e
   1b56e:	f3af 8000 	nop.w
   1b572:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   1b576:	eb08 0048 	add.w	r0, r8, r8, lsl #1
   1b57a:	4421      	add	r1, r4
   1b57c:	4420      	add	r0, r4
   1b57e:	8c0a      	ldrh	r2, [r1, #32]
   1b580:	8402      	strh	r2, [r0, #32]
   1b582:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
   1b586:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
   1b58a:	b125      	cbz	r5, 1b596 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
   1b58c:	2100      	movs	r1, #0
   1b58e:	f240 5062 	movw	r0, #1378	; 0x562
   1b592:	f3af 8000 	nop.w
   1b596:	b125      	cbz	r5, 1b5a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
   1b598:	2100      	movs	r1, #0
   1b59a:	f240 50ef 	movw	r0, #1519	; 0x5ef
   1b59e:	f3af 8000 	nop.w
   1b5a2:	a808      	add	r0, sp, #32
   1b5a4:	f000 ff6a 	bl	1c47c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
   1b5a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1b5ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1b5b0:	4643      	mov	r3, r8
   1b5b2:	466a      	mov	r2, sp
   1b5b4:	4631      	mov	r1, r6
   1b5b6:	a80a      	add	r0, sp, #40	; 0x28
   1b5b8:	f7ff f89e 	bl	1a6f8 <MPSL_IRQ_RADIO_Handler+0xaa8>
   1b5bc:	b125      	cbz	r5, 1b5c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
   1b5be:	2100      	movs	r1, #0
   1b5c0:	f240 50f5 	movw	r0, #1525	; 0x5f5
   1b5c4:	f3af 8000 	nop.w
   1b5c8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1b5cc:	2820      	cmp	r0, #32
   1b5ce:	d01a      	beq.n	1b606 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
   1b5d0:	68e0      	ldr	r0, [r4, #12]
   1b5d2:	9900      	ldr	r1, [sp, #0]
   1b5d4:	1a09      	subs	r1, r1, r0
   1b5d6:	0209      	lsls	r1, r1, #8
   1b5d8:	17ca      	asrs	r2, r1, #31
   1b5da:	eb01 6112 	add.w	r1, r1, r2, lsr #24
   1b5de:	1209      	asrs	r1, r1, #8
   1b5e0:	d511      	bpl.n	1b606 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
   1b5e2:	9900      	ldr	r1, [sp, #0]
   1b5e4:	4281      	cmp	r1, r0
   1b5e6:	d902      	bls.n	1b5ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
   1b5e8:	9902      	ldr	r1, [sp, #8]
   1b5ea:	1c49      	adds	r1, r1, #1
   1b5ec:	9102      	str	r1, [sp, #8]
   1b5ee:	e9dd 2100 	ldrd	r2, r1, [sp]
   1b5f2:	1a89      	subs	r1, r1, r2
   1b5f4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
   1b5f8:	4408      	add	r0, r1
   1b5fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b5fe:	e9cd 2000 	strd	r2, r0, [sp]
   1b602:	f04f 0901 	mov.w	r9, #1
   1b606:	b125      	cbz	r5, 1b612 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
   1b608:	2100      	movs	r1, #0
   1b60a:	f240 50ff 	movw	r0, #1535	; 0x5ff
   1b60e:	f3af 8000 	nop.w
   1b612:	9900      	ldr	r1, [sp, #0]
   1b614:	980a      	ldr	r0, [sp, #40]	; 0x28
   1b616:	9a01      	ldr	r2, [sp, #4]
   1b618:	1a09      	subs	r1, r1, r0
   1b61a:	1a10      	subs	r0, r2, r0
   1b61c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b620:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b624:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1b628:	bf98      	it	ls
   1b62a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
   1b62e:	d809      	bhi.n	1b644 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
   1b630:	4643      	mov	r3, r8
   1b632:	4669      	mov	r1, sp
   1b634:	4842      	ldr	r0, [pc, #264]	; (1b740 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
   1b636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b638:	f7fe fb66 	bl	19d08 <MPSL_IRQ_RADIO_Handler+0xb8>
   1b63c:	ea59 0000 	orrs.w	r0, r9, r0
   1b640:	d129      	bne.n	1b696 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
   1b642:	e042      	b.n	1b6ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
   1b644:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1b646:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   1b64a:	9002      	str	r0, [sp, #8]
   1b64c:	aa09      	add	r2, sp, #36	; 0x24
   1b64e:	a907      	add	r1, sp, #28
   1b650:	4650      	mov	r0, sl
   1b652:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1b656:	f000 fda1 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1b65a:	f001 fadd 	bl	1cc18 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1b65e:	f000 fd81 	bl	1c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   1b662:	4681      	mov	r9, r0
   1b664:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1b668:	2820      	cmp	r0, #32
   1b66a:	d03b      	beq.n	1b6e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
   1b66c:	68e0      	ldr	r0, [r4, #12]
   1b66e:	1d40      	adds	r0, r0, #5
   1b670:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b674:	9900      	ldr	r1, [sp, #0]
   1b676:	4281      	cmp	r1, r0
   1b678:	d902      	bls.n	1b680 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
   1b67a:	9902      	ldr	r1, [sp, #8]
   1b67c:	1c49      	adds	r1, r1, #1
   1b67e:	9102      	str	r1, [sp, #8]
   1b680:	e9dd 2100 	ldrd	r2, r1, [sp]
   1b684:	1a89      	subs	r1, r1, r2
   1b686:	9000      	str	r0, [sp, #0]
   1b688:	4408      	add	r0, r1
   1b68a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b68e:	9001      	str	r0, [sp, #4]
   1b690:	201f      	movs	r0, #31
   1b692:	f88d 000c 	strb.w	r0, [sp, #12]
   1b696:	9800      	ldr	r0, [sp, #0]
   1b698:	f007 fba4 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1b69c:	1c41      	adds	r1, r0, #1
   1b69e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1b6a2:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1b6a6:	4410      	add	r0, r2
   1b6a8:	4408      	add	r0, r1
   1b6aa:	e9c6 0704 	strd	r0, r7, [r6, #16]
   1b6ae:	b125      	cbz	r5, 1b6ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
   1b6b0:	2100      	movs	r1, #0
   1b6b2:	f240 601a 	movw	r0, #1562	; 0x61a
   1b6b6:	f3af 8000 	nop.w
   1b6ba:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
   1b6be:	4a21      	ldr	r2, [pc, #132]	; (1b744 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
   1b6c0:	9b02      	ldr	r3, [sp, #8]
   1b6c2:	fbe3 1002 	umlal	r1, r0, r3, r2
   1b6c6:	e9c6 1004 	strd	r1, r0, [r6, #16]
   1b6ca:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   1b6ce:	f88d 0014 	strb.w	r0, [sp, #20]
   1b6d2:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1b6d6:	2800      	cmp	r0, #0
   1b6d8:	f47f af29 	bne.w	1b52e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
   1b6dc:	b00d      	add	sp, #52	; 0x34
   1b6de:	2001      	movs	r0, #1
   1b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6e4:	f108 0809 	add.w	r8, r8, #9
   1b6e8:	f1ba 0f00 	cmp.w	sl, #0
   1b6ec:	d016      	beq.n	1b71c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
   1b6ee:	f001 fdb1 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1b6f2:	b998      	cbnz	r0, 1b71c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
   1b6f4:	f001 fc68 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1b6f8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1b6fc:	bf08      	it	eq
   1b6fe:	200d      	moveq	r0, #13
   1b700:	d00b      	beq.n	1b71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
   1b702:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1b706:	3856      	subs	r0, #86	; 0x56
   1b708:	bf08      	it	eq
   1b70a:	201c      	moveq	r0, #28
   1b70c:	d005      	beq.n	1b71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
   1b70e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1b712:	389f      	subs	r0, #159	; 0x9f
   1b714:	bf14      	ite	ne
   1b716:	4638      	movne	r0, r7
   1b718:	2032      	moveq	r0, #50	; 0x32
   1b71a:	4480      	add	r8, r0
   1b71c:	9807      	ldr	r0, [sp, #28]
   1b71e:	4581      	cmp	r9, r0
   1b720:	bf84      	itt	hi
   1b722:	eba9 0000 	subhi.w	r0, r9, r0
   1b726:	4480      	addhi	r8, r0
   1b728:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
   1b72c:	e7a2      	b.n	1b674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
   1b72e:	0000      	.short	0x0000
   1b730:	e000ed04 	.word	0xe000ed04
   1b734:	00000000 	.word	0x00000000
   1b738:	2000161c 	.word	0x2000161c
   1b73c:	2000159c 	.word	0x2000159c
   1b740:	0f424000 	.word	0x0f424000
   1b744:	1e848000 	.word	0x1e848000

0001b748 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
   1b748:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b74c:	4d92      	ldr	r5, [pc, #584]	; (1b998 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
   1b74e:	b08c      	sub	sp, #48	; 0x30
   1b750:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   1b754:	2000      	movs	r0, #0
   1b756:	9008      	str	r0, [sp, #32]
   1b758:	9006      	str	r0, [sp, #24]
   1b75a:	2001      	movs	r0, #1
   1b75c:	4c8f      	ldr	r4, [pc, #572]	; (1b99c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
   1b75e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
   1b762:	f04f 0800 	mov.w	r8, #0
   1b766:	4607      	mov	r7, r0
   1b768:	9007      	str	r0, [sp, #28]
   1b76a:	b124      	cbz	r4, 1b776 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
   1b76c:	2100      	movs	r1, #0
   1b76e:	f240 70e4 	movw	r0, #2020	; 0x7e4
   1b772:	f3af 8000 	nop.w
   1b776:	9807      	ldr	r0, [sp, #28]
   1b778:	2800      	cmp	r0, #0
   1b77a:	d03c      	beq.n	1b7f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
   1b77c:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
   1b780:	b124      	cbz	r4, 1b78c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
   1b782:	2100      	movs	r1, #0
   1b784:	f240 70e9 	movw	r0, #2025	; 0x7e9
   1b788:	f3af 8000 	nop.w
   1b78c:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
   1b790:	2240      	movs	r2, #64	; 0x40
   1b792:	ea27 060a 	bic.w	r6, r7, sl
   1b796:	eb09 1086 	add.w	r0, r9, r6, lsl #6
   1b79a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
   1b79e:	4683      	mov	fp, r0
   1b7a0:	f007 fca3 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1b7a4:	b124      	cbz	r4, 1b7b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
   1b7a6:	2100      	movs	r1, #0
   1b7a8:	f240 505e 	movw	r0, #1374	; 0x55e
   1b7ac:	f3af 8000 	nop.w
   1b7b0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   1b7b4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   1b7b8:	4428      	add	r0, r5
   1b7ba:	4429      	add	r1, r5
   1b7bc:	9000      	str	r0, [sp, #0]
   1b7be:	8c0a      	ldrh	r2, [r1, #32]
   1b7c0:	8402      	strh	r2, [r0, #32]
   1b7c2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
   1b7c6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
   1b7ca:	b124      	cbz	r4, 1b7d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
   1b7cc:	2100      	movs	r1, #0
   1b7ce:	f240 5062 	movw	r0, #1378	; 0x562
   1b7d2:	f3af 8000 	nop.w
   1b7d6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
   1b7da:	f88d 0008 	strb.w	r0, [sp, #8]
   1b7de:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b7e2:	b178      	cbz	r0, 1b804 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
   1b7e4:	2c00      	cmp	r4, #0
   1b7e6:	bf1c      	itt	ne
   1b7e8:	2100      	movne	r1, #0
   1b7ea:	f240 70ef 	movwne	r0, #2031	; 0x7ef
   1b7ee:	d0bc      	beq.n	1b76a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
   1b7f0:	f3af 8000 	nop.w
   1b7f4:	e7b9      	b.n	1b76a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
   1b7f6:	486a      	ldr	r0, [pc, #424]	; (1b9a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
   1b7f8:	2800      	cmp	r0, #0
   1b7fa:	bf18      	it	ne
   1b7fc:	f3af 8000 	nopne.w
   1b800:	b662      	cpsie	i
   1b802:	e7bb      	b.n	1b77c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
   1b804:	b124      	cbz	r4, 1b810 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
   1b806:	2100      	movs	r1, #0
   1b808:	f240 70f3 	movw	r0, #2035	; 0x7f3
   1b80c:	f3af 8000 	nop.w
   1b810:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b812:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
   1b816:	2803      	cmp	r0, #3
   1b818:	d17e      	bne.n	1b918 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
   1b81a:	9a00      	ldr	r2, [sp, #0]
   1b81c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b81e:	f892 0020 	ldrb.w	r0, [r2, #32]
   1b822:	4288      	cmp	r0, r1
   1b824:	bf14      	ite	ne
   1b826:	f04f 0a00 	movne.w	sl, #0
   1b82a:	f04f 0a01 	moveq.w	sl, #1
   1b82e:	f102 0c20 	add.w	ip, r2, #32
   1b832:	4683      	mov	fp, r0
   1b834:	2220      	movs	r2, #32
   1b836:	eb09 1386 	add.w	r3, r9, r6, lsl #6
   1b83a:	e003      	b.n	1b844 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
   1b83c:	4602      	mov	r2, r0
   1b83e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
   1b842:	7840      	ldrb	r0, [r0, #1]
   1b844:	4288      	cmp	r0, r1
   1b846:	d002      	beq.n	1b84e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
   1b848:	2820      	cmp	r0, #32
   1b84a:	d00a      	beq.n	1b862 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
   1b84c:	e7f6      	b.n	1b83c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
   1b84e:	2820      	cmp	r0, #32
   1b850:	d007      	beq.n	1b862 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
   1b852:	4583      	cmp	fp, r0
   1b854:	d107      	bne.n	1b866 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
   1b856:	eb03 004b 	add.w	r0, r3, fp, lsl #1
   1b85a:	7840      	ldrb	r0, [r0, #1]
   1b85c:	f88c 0000 	strb.w	r0, [ip]
   1b860:	e007      	b.n	1b872 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
   1b862:	4640      	mov	r0, r8
   1b864:	e00c      	b.n	1b880 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
   1b866:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1b86a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
   1b86e:	7840      	ldrb	r0, [r0, #1]
   1b870:	7048      	strb	r0, [r1, #1]
   1b872:	b124      	cbz	r4, 1b87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
   1b874:	2100      	movs	r1, #0
   1b876:	f240 40c9 	movw	r0, #1225	; 0x4c9
   1b87a:	f3af 8000 	nop.w
   1b87e:	4638      	mov	r0, r7
   1b880:	46c3      	mov	fp, r8
   1b882:	ea10 0f0a 	tst.w	r0, sl
   1b886:	bf18      	it	ne
   1b888:	46bb      	movne	fp, r7
   1b88a:	2800      	cmp	r0, #0
   1b88c:	d04e      	beq.n	1b92c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
   1b88e:	b124      	cbz	r4, 1b89a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
   1b890:	2100      	movs	r1, #0
   1b892:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
   1b896:	f3af 8000 	nop.w
   1b89a:	4632      	mov	r2, r6
   1b89c:	2001      	movs	r0, #1
   1b89e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b8a0:	f7ff f93e 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1b8a4:	b124      	cbz	r4, 1b8b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
   1b8a6:	2100      	movs	r1, #0
   1b8a8:	f640 0001 	movw	r0, #2049	; 0x801
   1b8ac:	f3af 8000 	nop.w
   1b8b0:	483c      	ldr	r0, [pc, #240]	; (1b9a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
   1b8b2:	2800      	cmp	r0, #0
   1b8b4:	bf18      	it	ne
   1b8b6:	f3af 8000 	nopne.w
   1b8ba:	f3ef 8010 	mrs	r0, PRIMASK
   1b8be:	b672      	cpsid	i
   1b8c0:	9007      	str	r0, [sp, #28]
   1b8c2:	b124      	cbz	r4, 1b8ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
   1b8c4:	2100      	movs	r1, #0
   1b8c6:	f640 0006 	movw	r0, #2054	; 0x806
   1b8ca:	f3af 8000 	nop.w
   1b8ce:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
   1b8d2:	f88d 0008 	strb.w	r0, [sp, #8]
   1b8d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1b8da:	b138      	cbz	r0, 1b8ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
   1b8dc:	2c00      	cmp	r4, #0
   1b8de:	bf1c      	itt	ne
   1b8e0:	2100      	movne	r1, #0
   1b8e2:	f640 000a 	movwne	r0, #2058	; 0x80a
   1b8e6:	f43f af40 	beq.w	1b76a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
   1b8ea:	e781      	b.n	1b7f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
   1b8ec:	f1bb 0f00 	cmp.w	fp, #0
   1b8f0:	d009      	beq.n	1b906 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
   1b8f2:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
   1b8f6:	2820      	cmp	r0, #32
   1b8f8:	d105      	bne.n	1b906 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
   1b8fa:	4631      	mov	r1, r6
   1b8fc:	2002      	movs	r0, #2
   1b8fe:	f7ff f941 	bl	1ab84 <MPSL_IRQ_RADIO_Handler+0xf34>
   1b902:	9006      	str	r0, [sp, #24]
   1b904:	b1f8      	cbz	r0, 1b946 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
   1b906:	b124      	cbz	r4, 1b912 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
   1b908:	2100      	movs	r1, #0
   1b90a:	f640 001e 	movw	r0, #2078	; 0x81e
   1b90e:	f3af 8000 	nop.w
   1b912:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   1b916:	e000      	b.n	1b91a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
   1b918:	e008      	b.n	1b92c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
   1b91a:	ea27 0000 	bic.w	r0, r7, r0
   1b91e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
   1b922:	20ff      	movs	r0, #255	; 0xff
   1b924:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
   1b928:	2001      	movs	r0, #1
   1b92a:	9008      	str	r0, [sp, #32]
   1b92c:	b124      	cbz	r4, 1b938 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
   1b92e:	2100      	movs	r1, #0
   1b930:	f640 0027 	movw	r0, #2087	; 0x827
   1b934:	f3af 8000 	nop.w
   1b938:	9806      	ldr	r0, [sp, #24]
   1b93a:	4e1b      	ldr	r6, [pc, #108]	; (1b9a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
   1b93c:	2802      	cmp	r0, #2
   1b93e:	d009      	beq.n	1b954 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
   1b940:	2801      	cmp	r0, #1
   1b942:	d010      	beq.n	1b966 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
   1b944:	e014      	b.n	1b970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
   1b946:	b19c      	cbz	r4, 1b970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
   1b948:	2100      	movs	r1, #0
   1b94a:	f640 0019 	movw	r0, #2073	; 0x819
   1b94e:	f3af 8000 	nop.w
   1b952:	e7ec      	b.n	1b92e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
   1b954:	f000 fd8c 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1b958:	68a9      	ldr	r1, [r5, #8]
   1b95a:	1a08      	subs	r0, r1, r0
   1b95c:	f007 fa42 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1b960:	6871      	ldr	r1, [r6, #4]
   1b962:	b921      	cbnz	r1, 1b96e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
   1b964:	e004      	b.n	1b970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
   1b966:	6871      	ldr	r1, [r6, #4]
   1b968:	f04f 30ff 	mov.w	r0, #4294967295
   1b96c:	b101      	cbz	r1, 1b970 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
   1b96e:	4788      	blx	r1
   1b970:	9807      	ldr	r0, [sp, #28]
   1b972:	b148      	cbz	r0, 1b988 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
   1b974:	b124      	cbz	r4, 1b980 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
   1b976:	2100      	movs	r1, #0
   1b978:	f640 003c 	movw	r0, #2108	; 0x83c
   1b97c:	f3af 8000 	nop.w
   1b980:	9808      	ldr	r0, [sp, #32]
   1b982:	b00d      	add	sp, #52	; 0x34
   1b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b988:	4805      	ldr	r0, [pc, #20]	; (1b9a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
   1b98a:	2800      	cmp	r0, #0
   1b98c:	bf18      	it	ne
   1b98e:	f3af 8000 	nopne.w
   1b992:	b662      	cpsie	i
   1b994:	e7ee      	b.n	1b974 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
   1b996:	0000      	.short	0x0000
   1b998:	2000161c 	.word	0x2000161c
	...
   1b9a8:	20000378 	.word	0x20000378

0001b9ac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
   1b9ac:	2820      	cmp	r0, #32
   1b9ae:	bf24      	itt	cs
   1b9b0:	2000      	movcs	r0, #0
   1b9b2:	4770      	bxcs	lr
   1b9b4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1b9b8:	4b03      	ldr	r3, [pc, #12]	; (1b9c8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
   1b9ba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   1b9be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1b9c2:	6042      	str	r2, [r0, #4]
   1b9c4:	2001      	movs	r0, #1
   1b9c6:	4770      	bx	lr
   1b9c8:	2000121c 	.word	0x2000121c

0001b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
   1b9cc:	b510      	push	{r4, lr}
   1b9ce:	2820      	cmp	r0, #32
   1b9d0:	d211      	bcs.n	1b9f6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
   1b9d2:	490e      	ldr	r1, [pc, #56]	; (1ba0c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
   1b9d4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
   1b9d8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
   1b9dc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
   1b9e0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
   1b9e4:	b13b      	cbz	r3, 1b9f6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
   1b9e6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
   1b9ea:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   1b9ee:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
   1b9f2:	2a01      	cmp	r2, #1
   1b9f4:	d001      	beq.n	1b9fa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
   1b9f6:	2000      	movs	r0, #0
   1b9f8:	bd10      	pop	{r4, pc}
   1b9fa:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
   1b9fe:	4601      	mov	r1, r0
   1ba00:	2000      	movs	r0, #0
   1ba02:	f7ff f88d 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1ba06:	2001      	movs	r0, #1
   1ba08:	bd10      	pop	{r4, pc}
   1ba0a:	0000      	.short	0x0000
   1ba0c:	2000161c 	.word	0x2000161c

0001ba10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
   1ba10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba14:	4e86      	ldr	r6, [pc, #536]	; (1bc30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
   1ba16:	4680      	mov	r8, r0
   1ba18:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   1ba1c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
   1ba20:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   1ba24:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
   1ba28:	2800      	cmp	r0, #0
   1ba2a:	d071      	beq.n	1bb10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
   1ba2c:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
   1ba30:	4d80      	ldr	r5, [pc, #512]	; (1bc34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
   1ba32:	b125      	cbz	r5, 1ba3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
   1ba34:	2100      	movs	r1, #0
   1ba36:	f640 30b9 	movw	r0, #3001	; 0xbb9
   1ba3a:	f3af 8000 	nop.w
   1ba3e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
   1ba42:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
   1ba46:	2801      	cmp	r0, #1
   1ba48:	d018      	beq.n	1ba7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
   1ba4a:	b2c0      	uxtb	r0, r0
   1ba4c:	2804      	cmp	r0, #4
   1ba4e:	bf1c      	itt	ne
   1ba50:	2805      	cmpne	r0, #5
   1ba52:	2806      	cmpne	r0, #6
   1ba54:	d061      	beq.n	1bb1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
   1ba56:	b12d      	cbz	r5, 1ba64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
   1ba58:	f04f 0100 	mov.w	r1, #0
   1ba5c:	f640 30c5 	movw	r0, #3013	; 0xbc5
   1ba60:	f3af 8000 	nop.w
   1ba64:	f007 faf6 	bl	23054 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   1ba68:	b125      	cbz	r5, 1ba74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
   1ba6a:	2100      	movs	r1, #0
   1ba6c:	f640 30c9 	movw	r0, #3017	; 0xbc9
   1ba70:	f3af 8000 	nop.w
   1ba74:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
   1ba78:	2801      	cmp	r0, #1
   1ba7a:	d1e6      	bne.n	1ba4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
   1ba7c:	2401      	movs	r4, #1
   1ba7e:	b125      	cbz	r5, 1ba8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
   1ba80:	2100      	movs	r1, #0
   1ba82:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
   1ba86:	f3af 8000 	nop.w
   1ba8a:	2c00      	cmp	r4, #0
   1ba8c:	d04b      	beq.n	1bb26 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
   1ba8e:	2000      	movs	r0, #0
   1ba90:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
   1ba94:	b125      	cbz	r5, 1baa0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
   1ba96:	2100      	movs	r1, #0
   1ba98:	f640 30d5 	movw	r0, #3029	; 0xbd5
   1ba9c:	f3af 8000 	nop.w
   1baa0:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
   1baa4:	2001      	movs	r0, #1
   1baa6:	ea20 090b 	bic.w	r9, r0, fp
   1baaa:	eb07 118b 	add.w	r1, r7, fp, lsl #6
   1baae:	eb07 1089 	add.w	r0, r7, r9, lsl #6
   1bab2:	2240      	movs	r2, #64	; 0x40
   1bab4:	f007 fb19 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1bab8:	b125      	cbz	r5, 1bac4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
   1baba:	2100      	movs	r1, #0
   1babc:	f240 505e 	movw	r0, #1374	; 0x55e
   1bac0:	f3af 8000 	nop.w
   1bac4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
   1bac8:	eb00 0a06 	add.w	sl, r0, r6
   1bacc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
   1bad0:	4430      	add	r0, r6
   1bad2:	8c01      	ldrh	r1, [r0, #32]
   1bad4:	f8aa 1020 	strh.w	r1, [sl, #32]
   1bad8:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   1badc:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
   1bae0:	b125      	cbz	r5, 1baec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
   1bae2:	2100      	movs	r1, #0
   1bae4:	f240 5062 	movw	r0, #1378	; 0x562
   1bae8:	f3af 8000 	nop.w
   1baec:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
   1baf0:	f88d 0000 	strb.w	r0, [sp]
   1baf4:	f89d 0000 	ldrb.w	r0, [sp]
   1baf8:	b1e0      	cbz	r0, 1bb34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
   1bafa:	2d00      	cmp	r5, #0
   1bafc:	bf1c      	itt	ne
   1bafe:	2100      	movne	r1, #0
   1bb00:	f640 30db 	movwne	r0, #3035	; 0xbdb
   1bb04:	d0bb      	beq.n	1ba7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
   1bb06:	bf00      	nop
   1bb08:	f3af 8000 	nop.w
   1bb0c:	e7b7      	b.n	1ba7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
   1bb0e:	e7ff      	b.n	1bb10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
   1bb10:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
   1bb14:	2070      	movs	r0, #112	; 0x70
   1bb16:	f001 fc15 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bb1a:	464a      	mov	r2, r9
   1bb1c:	4641      	mov	r1, r8
   1bb1e:	2001      	movs	r0, #1
   1bb20:	f7fe fffe 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1bb24:	e7a0      	b.n	1ba68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
   1bb26:	4844      	ldr	r0, [pc, #272]	; (1bc38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
   1bb28:	2800      	cmp	r0, #0
   1bb2a:	bf18      	it	ne
   1bb2c:	f3af 8000 	nopne.w
   1bb30:	b662      	cpsie	i
   1bb32:	e7ac      	b.n	1ba8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
   1bb34:	b125      	cbz	r5, 1bb40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
   1bb36:	2100      	movs	r1, #0
   1bb38:	f640 30df 	movw	r0, #3039	; 0xbdf
   1bb3c:	f3af 8000 	nop.w
   1bb40:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
   1bb44:	f10a 0121 	add.w	r1, sl, #33	; 0x21
   1bb48:	4640      	mov	r0, r8
   1bb4a:	461c      	mov	r4, r3
   1bb4c:	f04f 0b20 	mov.w	fp, #32
   1bb50:	eb07 1289 	add.w	r2, r7, r9, lsl #6
   1bb54:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
   1bb58:	e004      	b.n	1bb64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
   1bb5a:	46a3      	mov	fp, r4
   1bb5c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
   1bb60:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1bb64:	4284      	cmp	r4, r0
   1bb66:	d002      	beq.n	1bb6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
   1bb68:	2c20      	cmp	r4, #32
   1bb6a:	d02b      	beq.n	1bbc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
   1bb6c:	e7f5      	b.n	1bb5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
   1bb6e:	2c20      	cmp	r4, #32
   1bb70:	d028      	beq.n	1bbc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
   1bb72:	42a3      	cmp	r3, r4
   1bb74:	d104      	bne.n	1bb80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
   1bb76:	eb02 0043 	add.w	r0, r2, r3, lsl #1
   1bb7a:	7840      	ldrb	r0, [r0, #1]
   1bb7c:	7008      	strb	r0, [r1, #0]
   1bb7e:	e005      	b.n	1bb8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
   1bb80:	eb02 0044 	add.w	r0, r2, r4, lsl #1
   1bb84:	eb02 014b 	add.w	r1, r2, fp, lsl #1
   1bb88:	7840      	ldrb	r0, [r0, #1]
   1bb8a:	7048      	strb	r0, [r1, #1]
   1bb8c:	f1ba 0f00 	cmp.w	sl, #0
   1bb90:	d011      	beq.n	1bbb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
   1bb92:	b125      	cbz	r5, 1bb9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
   1bb94:	2100      	movs	r1, #0
   1bb96:	f240 40c1 	movw	r0, #1217	; 0x4c1
   1bb9a:	f3af 8000 	nop.w
   1bb9e:	f89a 0000 	ldrb.w	r0, [sl]
   1bba2:	42a0      	cmp	r0, r4
   1bba4:	d107      	bne.n	1bbb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
   1bba6:	b125      	cbz	r5, 1bbb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
   1bba8:	2100      	movs	r1, #0
   1bbaa:	f240 40c4 	movw	r0, #1220	; 0x4c4
   1bbae:	f3af 8000 	nop.w
   1bbb2:	f88a b000 	strb.w	fp, [sl]
   1bbb6:	b15d      	cbz	r5, 1bbd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
   1bbb8:	2100      	movs	r1, #0
   1bbba:	f240 40c9 	movw	r0, #1225	; 0x4c9
   1bbbe:	f3af 8000 	nop.w
   1bbc2:	e000      	b.n	1bbc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
   1bbc4:	b125      	cbz	r5, 1bbd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
   1bbc6:	2100      	movs	r1, #0
   1bbc8:	f640 30e3 	movw	r0, #3043	; 0xbe3
   1bbcc:	f3af 8000 	nop.w
   1bbd0:	481a      	ldr	r0, [pc, #104]	; (1bc3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
   1bbd2:	2800      	cmp	r0, #0
   1bbd4:	bf18      	it	ne
   1bbd6:	f3af 8000 	nopne.w
   1bbda:	f3ef 8410 	mrs	r4, PRIMASK
   1bbde:	b672      	cpsid	i
   1bbe0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
   1bbe4:	f88d 0000 	strb.w	r0, [sp]
   1bbe8:	f89d 0000 	ldrb.w	r0, [sp]
   1bbec:	b138      	cbz	r0, 1bbfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
   1bbee:	2d00      	cmp	r5, #0
   1bbf0:	bf1c      	itt	ne
   1bbf2:	2100      	movne	r1, #0
   1bbf4:	f640 30e9 	movwne	r0, #3049	; 0xbe9
   1bbf8:	f43f af41 	beq.w	1ba7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
   1bbfc:	e784      	b.n	1bb08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
   1bbfe:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
   1bc02:	20ff      	movs	r0, #255	; 0xff
   1bc04:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
   1bc08:	b154      	cbz	r4, 1bc20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
   1bc0a:	2d00      	cmp	r5, #0
   1bc0c:	bf08      	it	eq
   1bc0e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc12:	2100      	movs	r1, #0
   1bc14:	f640 30f6 	movw	r0, #3062	; 0xbf6
   1bc18:	f3af 8000 	nop.w
   1bc1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc20:	4805      	ldr	r0, [pc, #20]	; (1bc38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
   1bc22:	2800      	cmp	r0, #0
   1bc24:	bf18      	it	ne
   1bc26:	f3af 8000 	nopne.w
   1bc2a:	b662      	cpsie	i
   1bc2c:	e7ed      	b.n	1bc0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
   1bc2e:	0000      	.short	0x0000
   1bc30:	2000161c 	.word	0x2000161c
	...

0001bc40 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
   1bc40:	b570      	push	{r4, r5, r6, lr}
   1bc42:	460d      	mov	r5, r1
   1bc44:	4606      	mov	r6, r0
   1bc46:	f001 faf3 	bl	1d230 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   1bc4a:	480f      	ldr	r0, [pc, #60]	; (1bc88 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
   1bc4c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
   1bc50:	2400      	movs	r4, #0
   1bc52:	3880      	subs	r0, #128	; 0x80
   1bc54:	eb00 1082 	add.w	r0, r0, r2, lsl #6
   1bc58:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
   1bc5c:	b129      	cbz	r1, 1bc6a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
   1bc5e:	1c61      	adds	r1, r4, #1
   1bc60:	b2cc      	uxtb	r4, r1
   1bc62:	2c20      	cmp	r4, #32
   1bc64:	d3f8      	bcc.n	1bc58 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
   1bc66:	2020      	movs	r0, #32
   1bc68:	bd70      	pop	{r4, r5, r6, pc}
   1bc6a:	4808      	ldr	r0, [pc, #32]	; (1bc8c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
   1bc6c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1bc70:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
   1bc74:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1bc78:	4621      	mov	r1, r4
   1bc7a:	6045      	str	r5, [r0, #4]
   1bc7c:	2001      	movs	r0, #1
   1bc7e:	f7fe ff4f 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1bc82:	4620      	mov	r0, r4
   1bc84:	bd70      	pop	{r4, r5, r6, pc}
   1bc86:	0000      	.short	0x0000
   1bc88:	2000161c 	.word	0x2000161c
   1bc8c:	2000121c 	.word	0x2000121c

0001bc90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
   1bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc94:	b083      	sub	sp, #12
   1bc96:	f000 fbeb 	bl	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   1bc9a:	4605      	mov	r5, r0
   1bc9c:	f000 fece 	bl	1ca3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
   1bca0:	4c84      	ldr	r4, [pc, #528]	; (1beb4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
   1bca2:	6860      	ldr	r0, [r4, #4]
   1bca4:	f1b0 3fff 	cmp.w	r0, #4294967295
   1bca8:	bf1c      	itt	ne
   1bcaa:	f04f 30ff 	movne.w	r0, #4294967295
   1bcae:	6060      	strne	r0, [r4, #4]
   1bcb0:	7fa0      	ldrb	r0, [r4, #30]
   1bcb2:	f8df 9204 	ldr.w	r9, [pc, #516]	; 1beb8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
   1bcb6:	b990      	cbnz	r0, 1bcde <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
   1bcb8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   1bcbc:	1a40      	subs	r0, r0, r1
   1bcbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1bcc2:	f44f 710c 	mov.w	r1, #560	; 0x230
   1bcc6:	f001 fa9f 	bl	1d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   1bcca:	68e1      	ldr	r1, [r4, #12]
   1bccc:	4408      	add	r0, r1
   1bcce:	1a28      	subs	r0, r5, r0
   1bcd0:	0200      	lsls	r0, r0, #8
   1bcd2:	17c1      	asrs	r1, r0, #31
   1bcd4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
   1bcd8:	1200      	asrs	r0, r0, #8
   1bcda:	0fc0      	lsrs	r0, r0, #31
   1bcdc:	d012      	beq.n	1bd04 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
   1bcde:	7e60      	ldrb	r0, [r4, #25]
   1bce0:	b320      	cbz	r0, 1bd2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
   1bce2:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   1bce6:	f88d 0000 	strb.w	r0, [sp]
   1bcea:	f89d 0000 	ldrb.w	r0, [sp]
   1bcee:	b1e8      	cbz	r0, 1bd2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
   1bcf0:	f000 fd00 	bl	1c6f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
   1bcf4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   1bcf8:	b1f0      	cbz	r0, 1bd38 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
   1bcfa:	f240 31f5 	movw	r1, #1013	; 0x3f5
   1bcfe:	2070      	movs	r0, #112	; 0x70
   1bd00:	f001 fb20 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bd04:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1bd08:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1bd0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1bd10:	eb09 0080 	add.w	r0, r9, r0, lsl #2
   1bd14:	6840      	ldr	r0, [r0, #4]
   1bd16:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1bd1a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
   1bd1e:	2108      	movs	r1, #8
   1bd20:	4790      	blx	r2
   1bd22:	f240 31dd 	movw	r1, #989	; 0x3dd
   1bd26:	2070      	movs	r0, #112	; 0x70
   1bd28:	f001 fb0c 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bd2c:	1ce8      	adds	r0, r5, #3
   1bd2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1bd32:	f000 fbc3 	bl	1c4bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   1bd36:	e7dd      	b.n	1bcf4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
   1bd38:	2001      	movs	r0, #1
   1bd3a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   1bd3e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1bd42:	2820      	cmp	r0, #32
   1bd44:	d021      	beq.n	1bd8a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
   1bd46:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
   1bd4a:	2020      	movs	r0, #32
   1bd4c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
   1bd50:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
   1bd54:	2000      	movs	r0, #0
   1bd56:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1bd5a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
   1bd5e:	6020      	str	r0, [r4, #0]
   1bd60:	f000 ff60 	bl	1cc24 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
   1bd64:	7720      	strb	r0, [r4, #28]
   1bd66:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
   1bd6a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   1bd6e:	1907      	adds	r7, r0, r4
   1bd70:	f897 0020 	ldrb.w	r0, [r7, #32]
   1bd74:	2820      	cmp	r0, #32
   1bd76:	d058      	beq.n	1be2a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
   1bd78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1bd7c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
   1bd80:	f899 001a 	ldrb.w	r0, [r9, #26]
   1bd84:	2801      	cmp	r0, #1
   1bd86:	d005      	beq.n	1bd94 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
   1bd88:	e04f      	b.n	1be2a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
   1bd8a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1bd8e:	2070      	movs	r0, #112	; 0x70
   1bd90:	f001 fad8 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bd94:	f8b9 b016 	ldrh.w	fp, [r9, #22]
   1bd98:	aa01      	add	r2, sp, #4
   1bd9a:	4669      	mov	r1, sp
   1bd9c:	4658      	mov	r0, fp
   1bd9e:	f000 f9fd 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1bda2:	f000 ff39 	bl	1cc18 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1bda6:	f000 f9dd 	bl	1c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   1bdaa:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1bdae:	2820      	cmp	r0, #32
   1bdb0:	d004      	beq.n	1bdbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
   1bdb2:	68e0      	ldr	r0, [r4, #12]
   1bdb4:	1d40      	adds	r0, r0, #5
   1bdb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1bdba:	e01d      	b.n	1bdf8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
   1bdbc:	f105 0a09 	add.w	sl, r5, #9
   1bdc0:	f1bb 0f00 	cmp.w	fp, #0
   1bdc4:	d016      	beq.n	1bdf4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
   1bdc6:	f001 fa45 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1bdca:	b998      	cbnz	r0, 1bdf4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
   1bdcc:	f001 f8fc 	bl	1cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   1bdd0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   1bdd4:	bf08      	it	eq
   1bdd6:	200d      	moveq	r0, #13
   1bdd8:	d00b      	beq.n	1bdf2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
   1bdda:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   1bdde:	3856      	subs	r0, #86	; 0x56
   1bde0:	bf08      	it	eq
   1bde2:	201c      	moveq	r0, #28
   1bde4:	d005      	beq.n	1bdf2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
   1bde6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   1bdea:	389f      	subs	r0, #159	; 0x9f
   1bdec:	bf14      	ite	ne
   1bdee:	2000      	movne	r0, #0
   1bdf0:	2032      	moveq	r0, #50	; 0x32
   1bdf2:	4482      	add	sl, r0
   1bdf4:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
   1bdf8:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1bdfc:	1a81      	subs	r1, r0, r2
   1bdfe:	0209      	lsls	r1, r1, #8
   1be00:	17cb      	asrs	r3, r1, #31
   1be02:	eb01 6113 	add.w	r1, r1, r3, lsr #24
   1be06:	1209      	asrs	r1, r1, #8
   1be08:	2900      	cmp	r1, #0
   1be0a:	dc0e      	bgt.n	1be2a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
   1be0c:	f109 0308 	add.w	r3, r9, #8
   1be10:	4282      	cmp	r2, r0
   1be12:	d202      	bcs.n	1be1a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
   1be14:	6899      	ldr	r1, [r3, #8]
   1be16:	1e49      	subs	r1, r1, #1
   1be18:	6099      	str	r1, [r3, #8]
   1be1a:	e9d3 2100 	ldrd	r2, r1, [r3]
   1be1e:	1a89      	subs	r1, r1, r2
   1be20:	6018      	str	r0, [r3, #0]
   1be22:	4408      	add	r0, r1
   1be24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1be28:	6058      	str	r0, [r3, #4]
   1be2a:	4631      	mov	r1, r6
   1be2c:	2001      	movs	r0, #1
   1be2e:	f7fe fea9 	bl	1ab84 <MPSL_IRQ_RADIO_Handler+0xf34>
   1be32:	ea5f 0900 	movs.w	r9, r0
   1be36:	d0f8      	beq.n	1be2a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
   1be38:	4820      	ldr	r0, [pc, #128]	; (1bebc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
   1be3a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
   1be3e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
   1be42:	2802      	cmp	r0, #2
   1be44:	d104      	bne.n	1be50 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
   1be46:	4632      	mov	r2, r6
   1be48:	4641      	mov	r1, r8
   1be4a:	2006      	movs	r0, #6
   1be4c:	f7fe fe68 	bl	1ab20 <MPSL_IRQ_RADIO_Handler+0xed0>
   1be50:	20ff      	movs	r0, #255	; 0xff
   1be52:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   1be56:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
   1be5a:	4e19      	ldr	r6, [pc, #100]	; (1bec0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
   1be5c:	2820      	cmp	r0, #32
   1be5e:	bf1c      	itt	ne
   1be60:	7870      	ldrbne	r0, [r6, #1]
   1be62:	f001 fb43 	blne	1d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   1be66:	7f20      	ldrb	r0, [r4, #28]
   1be68:	b120      	cbz	r0, 1be74 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
   1be6a:	f000 feb7 	bl	1cbdc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
   1be6e:	2000      	movs	r0, #0
   1be70:	7720      	strb	r0, [r4, #28]
   1be72:	7760      	strb	r0, [r4, #29]
   1be74:	f1b9 0f02 	cmp.w	r9, #2
   1be78:	d011      	beq.n	1be9e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
   1be7a:	f1b9 0f01 	cmp.w	r9, #1
   1be7e:	bf1c      	itt	ne
   1be80:	b003      	addne	sp, #12
   1be82:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be86:	f04f 30ff 	mov.w	r0, #4294967295
   1be8a:	6871      	ldr	r1, [r6, #4]
   1be8c:	2900      	cmp	r1, #0
   1be8e:	bf04      	itt	eq
   1be90:	b003      	addeq	sp, #12
   1be92:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be96:	b003      	add	sp, #12
   1be98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be9c:	4708      	bx	r1
   1be9e:	68a0      	ldr	r0, [r4, #8]
   1bea0:	1b40      	subs	r0, r0, r5
   1bea2:	f006 ff9f 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1bea6:	6871      	ldr	r1, [r6, #4]
   1bea8:	2900      	cmp	r1, #0
   1beaa:	d1f4      	bne.n	1be96 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
   1beac:	b003      	add	sp, #12
   1beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1beb2:	0000      	.short	0x0000
   1beb4:	2000161c 	.word	0x2000161c
   1beb8:	2000121c 	.word	0x2000121c
   1bebc:	2000159c 	.word	0x2000159c
   1bec0:	20000378 	.word	0x20000378

0001bec4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
   1bec4:	b570      	push	{r4, r5, r6, lr}
   1bec6:	4c42      	ldr	r4, [pc, #264]	; (1bfd0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
   1bec8:	4605      	mov	r5, r0
   1beca:	b082      	sub	sp, #8
   1becc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1bed0:	2820      	cmp	r0, #32
   1bed2:	d008      	beq.n	1bee6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
   1bed4:	6860      	ldr	r0, [r4, #4]
   1bed6:	f1b0 3fff 	cmp.w	r0, #4294967295
   1beda:	d009      	beq.n	1bef0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
   1bedc:	f640 21e4 	movw	r1, #2788	; 0xae4
   1bee0:	2070      	movs	r0, #112	; 0x70
   1bee2:	f001 fa2f 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bee6:	f640 21e3 	movw	r1, #2787	; 0xae3
   1beea:	2070      	movs	r0, #112	; 0x70
   1beec:	f001 fa2a 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bef0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1bef4:	4937      	ldr	r1, [pc, #220]	; (1bfd4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
   1bef6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1befa:	eb01 0680 	add.w	r6, r1, r0, lsl #2
   1befe:	68b0      	ldr	r0, [r6, #8]
   1bf00:	f006 ff70 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1bf04:	4602      	mov	r2, r0
   1bf06:	8af0      	ldrh	r0, [r6, #22]
   1bf08:	7d31      	ldrb	r1, [r6, #20]
   1bf0a:	4b33      	ldr	r3, [pc, #204]	; (1bfd8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
   1bf0c:	4408      	add	r0, r1
   1bf0e:	1c40      	adds	r0, r0, #1
   1bf10:	1811      	adds	r1, r2, r0
   1bf12:	429a      	cmp	r2, r3
   1bf14:	d817      	bhi.n	1bf46 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
   1bf16:	4a31      	ldr	r2, [pc, #196]	; (1bfdc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
   1bf18:	4290      	cmp	r0, r2
   1bf1a:	dc1b      	bgt.n	1bf54 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
   1bf1c:	f1c2 0c00 	rsb	ip, r2, #0
   1bf20:	4560      	cmp	r0, ip
   1bf22:	db1e      	blt.n	1bf62 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
   1bf24:	0056      	lsls	r6, r2, #1
   1bf26:	428e      	cmp	r6, r1
   1bf28:	bfdc      	itt	le
   1bf2a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
   1bf2e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
   1bf32:	dd05      	ble.n	1bf40 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
   1bf34:	2900      	cmp	r1, #0
   1bf36:	bfbc      	itt	lt
   1bf38:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
   1bf3c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
   1bf40:	1948      	adds	r0, r1, r5
   1bf42:	4299      	cmp	r1, r3
   1bf44:	d904      	bls.n	1bf50 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
   1bf46:	f240 519e 	movw	r1, #1438	; 0x59e
   1bf4a:	2070      	movs	r0, #112	; 0x70
   1bf4c:	f001 f9fa 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bf50:	4295      	cmp	r5, r2
   1bf52:	dd04      	ble.n	1bf5e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
   1bf54:	f240 519f 	movw	r1, #1439	; 0x59f
   1bf58:	2070      	movs	r0, #112	; 0x70
   1bf5a:	f001 f9f3 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bf5e:	4565      	cmp	r5, ip
   1bf60:	da04      	bge.n	1bf6c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
   1bf62:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
   1bf66:	2070      	movs	r0, #112	; 0x70
   1bf68:	f001 f9ec 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bf6c:	4286      	cmp	r6, r0
   1bf6e:	bfdc      	itt	le
   1bf70:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   1bf74:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   1bf78:	dd05      	ble.n	1bf86 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
   1bf7a:	2800      	cmp	r0, #0
   1bf7c:	bfbc      	itt	lt
   1bf7e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   1bf82:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   1bf86:	aa01      	add	r2, sp, #4
   1bf88:	4669      	mov	r1, sp
   1bf8a:	f000 f907 	bl	1c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   1bf8e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1bf92:	280f      	cmp	r0, #15
   1bf94:	bf8c      	ite	hi
   1bf96:	2001      	movhi	r0, #1
   1bf98:	2000      	movls	r0, #0
   1bf9a:	9900      	ldr	r1, [sp, #0]
   1bf9c:	4408      	add	r0, r1
   1bf9e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   1bfa2:	6061      	str	r1, [r4, #4]
   1bfa4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   1bfa8:	f88d 0000 	strb.w	r0, [sp]
   1bfac:	f89d 0000 	ldrb.w	r0, [sp]
   1bfb0:	2800      	cmp	r0, #0
   1bfb2:	bf04      	itt	eq
   1bfb4:	b002      	addeq	sp, #8
   1bfb6:	bd70      	popeq	{r4, r5, r6, pc}
   1bfb8:	2005      	movs	r0, #5
   1bfba:	f000 fc19 	bl	1c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   1bfbe:	2800      	cmp	r0, #0
   1bfc0:	bf1c      	itt	ne
   1bfc2:	b002      	addne	sp, #8
   1bfc4:	bd70      	popne	{r4, r5, r6, pc}
   1bfc6:	f640 21eb 	movw	r1, #2795	; 0xaeb
   1bfca:	2070      	movs	r0, #112	; 0x70
   1bfcc:	f001 f9ba 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1bfd0:	2000161c 	.word	0x2000161c
   1bfd4:	2000121c 	.word	0x2000121c
   1bfd8:	1e847fff 	.word	0x1e847fff
   1bfdc:	0f424000 	.word	0x0f424000

0001bfe0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
   1bfe0:	b570      	push	{r4, r5, r6, lr}
   1bfe2:	4c1c      	ldr	r4, [pc, #112]	; (1c054 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
   1bfe4:	2120      	movs	r1, #32
   1bfe6:	f884 1020 	strb.w	r1, [r4, #32]
   1bfea:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
   1bfee:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
   1bff2:	2000      	movs	r0, #0
   1bff4:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   1bff8:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
   1bffc:	1e42      	subs	r2, r0, #1
   1bffe:	e9c4 0200 	strd	r0, r2, [r4]
   1c002:	77a0      	strb	r0, [r4, #30]
   1c004:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1c008:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
   1c00c:	7720      	strb	r0, [r4, #28]
   1c00e:	7760      	strb	r0, [r4, #29]
   1c010:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
   1c014:	62e2      	str	r2, [r4, #44]	; 0x2c
   1c016:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
   1c01a:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
   1c01e:	2210      	movs	r2, #16
   1c020:	7088      	strb	r0, [r1, #2]
   1c022:	f801 0f04 	strb.w	r0, [r1, #4]!
   1c026:	1e52      	subs	r2, r2, #1
   1c028:	d1fa      	bne.n	1c020 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
   1c02a:	f000 fe05 	bl	1cc38 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
   1c02e:	4d0a      	ldr	r5, [pc, #40]	; (1c058 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
   1c030:	2601      	movs	r6, #1
   1c032:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
   1c036:	20ff      	movs	r0, #255	; 0xff
   1c038:	7028      	strb	r0, [r5, #0]
   1c03a:	4808      	ldr	r0, [pc, #32]	; (1c05c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
   1c03c:	f001 fa38 	bl	1d4b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   1c040:	7068      	strb	r0, [r5, #1]
   1c042:	f001 faa3 	bl	1d58c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
   1c046:	60a8      	str	r0, [r5, #8]
   1c048:	f000 fd80 	bl	1cb4c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
   1c04c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
   1c050:	bd70      	pop	{r4, r5, r6, pc}
   1c052:	0000      	.short	0x0000
   1c054:	2000161c 	.word	0x2000161c
   1c058:	20000378 	.word	0x20000378
   1c05c:	0001aa49 	.word	0x0001aa49

0001c060 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
   1c060:	b570      	push	{r4, r5, r6, lr}
   1c062:	4605      	mov	r5, r0
   1c064:	2001      	movs	r0, #1
   1c066:	fa00 f405 	lsl.w	r4, r0, r5
   1c06a:	460e      	mov	r6, r1
   1c06c:	2a00      	cmp	r2, #0
   1c06e:	bf08      	it	eq
   1c070:	4808      	ldreq	r0, [pc, #32]	; (1c094 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
   1c072:	d00c      	beq.n	1c08e <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
   1c074:	2000      	movs	r0, #0
   1c076:	f000 fd4f 	bl	1cb18 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
   1c07a:	00e9      	lsls	r1, r5, #3
   1c07c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c080:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
   1c084:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
   1c088:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
   1c08c:	4802      	ldr	r0, [pc, #8]	; (1c098 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
   1c08e:	6004      	str	r4, [r0, #0]
   1c090:	bd70      	pop	{r4, r5, r6, pc}
   1c092:	0000      	.short	0x0000
   1c094:	4001f508 	.word	0x4001f508
   1c098:	4001f504 	.word	0x4001f504

0001c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   1c09c:	b500      	push	{lr}
   1c09e:	b083      	sub	sp, #12
   1c0a0:	4668      	mov	r0, sp
   1c0a2:	f000 f9eb 	bl	1c47c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
   1c0a6:	9800      	ldr	r0, [sp, #0]
   1c0a8:	f006 fe9c 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1c0ac:	9a01      	ldr	r2, [sp, #4]
   1c0ae:	4b03      	ldr	r3, [pc, #12]	; (1c0bc <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
   1c0b0:	2100      	movs	r1, #0
   1c0b2:	fbe2 0103 	umlal	r0, r1, r2, r3
   1c0b6:	b003      	add	sp, #12
   1c0b8:	bd00      	pop	{pc}
   1c0ba:	0000      	.short	0x0000
   1c0bc:	1e848000 	.word	0x1e848000

0001c0c0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
   1c0c0:	b570      	push	{r4, r5, r6, lr}
   1c0c2:	4606      	mov	r6, r0
   1c0c4:	b082      	sub	sp, #8
   1c0c6:	461d      	mov	r5, r3
   1c0c8:	4610      	mov	r0, r2
   1c0ca:	f006 fe8b 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   1c0ce:	4604      	mov	r4, r0
   1c0d0:	4668      	mov	r0, sp
   1c0d2:	f000 f9d3 	bl	1c47c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
   1c0d6:	4920      	ldr	r1, [pc, #128]	; (1c158 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
   1c0d8:	9801      	ldr	r0, [sp, #4]
   1c0da:	fba0 0201 	umull	r0, r2, r0, r1
   1c0de:	1a30      	subs	r0, r6, r0
   1c0e0:	bf44      	itt	mi
   1c0e2:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
   1c0e6:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
   1c0ea:	d504      	bpl.n	1c0f6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
   1c0ec:	f640 410b 	movw	r1, #3083	; 0xc0b
   1c0f0:	2070      	movs	r0, #112	; 0x70
   1c0f2:	f001 f927 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c0f6:	4288      	cmp	r0, r1
   1c0f8:	db04      	blt.n	1c104 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
   1c0fa:	f640 410c 	movw	r1, #3084	; 0xc0c
   1c0fe:	2070      	movs	r0, #112	; 0x70
   1c100:	f001 f920 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c104:	4a15      	ldr	r2, [pc, #84]	; (1c15c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
   1c106:	1a21      	subs	r1, r4, r0
   1c108:	2300      	movs	r3, #0
   1c10a:	1a8a      	subs	r2, r1, r2
   1c10c:	f173 0200 	sbcs.w	r2, r3, #0
   1c110:	d318      	bcc.n	1c144 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
   1c112:	f8df c048 	ldr.w	ip, [pc, #72]	; 1c15c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
   1c116:	1b02      	subs	r2, r0, r4
   1c118:	ebb2 0c0c 	subs.w	ip, r2, ip
   1c11c:	f173 0300 	sbcs.w	r3, r3, #0
   1c120:	d310      	bcc.n	1c144 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
   1c122:	4b0f      	ldr	r3, [pc, #60]	; (1c160 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
   1c124:	428b      	cmp	r3, r1
   1c126:	bf3e      	ittt	cc
   1c128:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
   1c12c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
   1c130:	1901      	addcc	r1, r0, r4
   1c132:	d307      	bcc.n	1c144 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
   1c134:	4293      	cmp	r3, r2
   1c136:	d20a      	bcs.n	1c14e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
   1c138:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
   1c13c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
   1c140:	4408      	add	r0, r1
   1c142:	4241      	negs	r1, r0
   1c144:	f101 000f 	add.w	r0, r1, #15
   1c148:	b002      	add	sp, #8
   1c14a:	1a28      	subs	r0, r5, r0
   1c14c:	bd70      	pop	{r4, r5, r6, pc}
   1c14e:	f640 3105 	movw	r1, #2821	; 0xb05
   1c152:	2070      	movs	r0, #112	; 0x70
   1c154:	f001 f8f6 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c158:	1e848000 	.word	0x1e848000
   1c15c:	0f424000 	.word	0x0f424000
   1c160:	1e847fff 	.word	0x1e847fff

0001c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
   1c164:	0b41      	lsrs	r1, r0, #13
   1c166:	f248 6237 	movw	r2, #34359	; 0x8637
   1c16a:	4351      	muls	r1, r2
   1c16c:	0c0a      	lsrs	r2, r1, #16
   1c16e:	4b09      	ldr	r3, [pc, #36]	; (1c194 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
   1c170:	0251      	lsls	r1, r2, #9
   1c172:	fb02 0203 	mla	r2, r2, r3, r0
   1c176:	4808      	ldr	r0, [pc, #32]	; (1c198 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
   1c178:	4350      	muls	r0, r2
   1c17a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
   1c17e:	306e      	adds	r0, #110	; 0x6e
   1c180:	0d40      	lsrs	r0, r0, #21
   1c182:	425b      	negs	r3, r3
   1c184:	fb10 f303 	smulbb	r3, r0, r3
   1c188:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
   1c18c:	bf88      	it	hi
   1c18e:	1c49      	addhi	r1, r1, #1
   1c190:	4408      	add	r0, r1
   1c192:	4770      	bx	lr
   1c194:	ffffc2f7 	.word	0xffffc2f7
   1c198:	00010c6f 	.word	0x00010c6f

0001c19c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
   1c19c:	0b43      	lsrs	r3, r0, #13
   1c19e:	f248 6c37 	movw	ip, #34359	; 0x8637
   1c1a2:	fb03 f30c 	mul.w	r3, r3, ip
   1c1a6:	b430      	push	{r4, r5}
   1c1a8:	0c1b      	lsrs	r3, r3, #16
   1c1aa:	f8df c044 	ldr.w	ip, [pc, #68]	; 1c1f0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
   1c1ae:	025c      	lsls	r4, r3, #9
   1c1b0:	fb03 030c 	mla	r3, r3, ip, r0
   1c1b4:	480f      	ldr	r0, [pc, #60]	; (1c1f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
   1c1b6:	4358      	muls	r0, r3
   1c1b8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
   1c1bc:	eb04 000c 	add.w	r0, r4, ip
   1c1c0:	f643 5409 	movw	r4, #15625	; 0x3d09
   1c1c4:	fb1c f404 	smulbb	r4, ip, r4
   1c1c8:	f504 7c80 	add.w	ip, r4, #256	; 0x100
   1c1cc:	f643 5508 	movw	r5, #15624	; 0x3d08
   1c1d0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
   1c1d4:	442c      	add	r4, r5
   1c1d6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
   1c1da:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
   1c1de:	bf84      	itt	hi
   1c1e0:	f04f 0c00 	movhi.w	ip, #0
   1c1e4:	1c40      	addhi	r0, r0, #1
   1c1e6:	6008      	str	r0, [r1, #0]
   1c1e8:	f882 c000 	strb.w	ip, [r2]
   1c1ec:	bc30      	pop	{r4, r5}
   1c1ee:	4770      	bx	lr
   1c1f0:	ffffc2f7 	.word	0xffffc2f7
   1c1f4:	00010c6f 	.word	0x00010c6f

0001c1f8 <MPSL_IRQ_RTC0_Handler>:
   1c1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1fc:	4d3b      	ldr	r5, [pc, #236]	; (1c2ec <MPSL_IRQ_RTC0_Handler+0xf4>)
   1c1fe:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1c202:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1c2f0 <MPSL_IRQ_RTC0_Handler+0xf8>
   1c206:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1c20a:	f44f 6600 	mov.w	r6, #2048	; 0x800
   1c20e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
   1c212:	f04f 0400 	mov.w	r4, #0
   1c216:	d019      	beq.n	1c24c <MPSL_IRQ_RTC0_Handler+0x54>
   1c218:	4836      	ldr	r0, [pc, #216]	; (1c2f4 <MPSL_IRQ_RTC0_Handler+0xfc>)
   1c21a:	6800      	ldr	r0, [r0, #0]
   1c21c:	b1b0      	cbz	r0, 1c24c <MPSL_IRQ_RTC0_Handler+0x54>
   1c21e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
   1c222:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   1c226:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
   1c22a:	f8d8 1000 	ldr.w	r1, [r8]
   1c22e:	1a40      	subs	r0, r0, r1
   1c230:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c234:	2802      	cmp	r0, #2
   1c236:	d302      	bcc.n	1c23e <MPSL_IRQ_RTC0_Handler+0x46>
   1c238:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c23c:	d906      	bls.n	1c24c <MPSL_IRQ_RTC0_Handler+0x54>
   1c23e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1c242:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1c246:	2004      	movs	r0, #4
   1c248:	f7fe fe76 	bl	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c24c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1c250:	f410 3f00 	tst.w	r0, #131072	; 0x20000
   1c254:	d01a      	beq.n	1c28c <MPSL_IRQ_RTC0_Handler+0x94>
   1c256:	4828      	ldr	r0, [pc, #160]	; (1c2f8 <MPSL_IRQ_RTC0_Handler+0x100>)
   1c258:	6800      	ldr	r0, [r0, #0]
   1c25a:	b1b8      	cbz	r0, 1c28c <MPSL_IRQ_RTC0_Handler+0x94>
   1c25c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
   1c260:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   1c264:	4825      	ldr	r0, [pc, #148]	; (1c2fc <MPSL_IRQ_RTC0_Handler+0x104>)
   1c266:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1c26a:	f8d8 1000 	ldr.w	r1, [r8]
   1c26e:	1a40      	subs	r0, r0, r1
   1c270:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c274:	2802      	cmp	r0, #2
   1c276:	d302      	bcc.n	1c27e <MPSL_IRQ_RTC0_Handler+0x86>
   1c278:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c27c:	d906      	bls.n	1c28c <MPSL_IRQ_RTC0_Handler+0x94>
   1c27e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1c282:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1c286:	2005      	movs	r0, #5
   1c288:	f7fe fe56 	bl	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c28c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1c290:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   1c294:	d01a      	beq.n	1c2cc <MPSL_IRQ_RTC0_Handler+0xd4>
   1c296:	481a      	ldr	r0, [pc, #104]	; (1c300 <MPSL_IRQ_RTC0_Handler+0x108>)
   1c298:	6800      	ldr	r0, [r0, #0]
   1c29a:	b1b8      	cbz	r0, 1c2cc <MPSL_IRQ_RTC0_Handler+0xd4>
   1c29c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   1c2a0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   1c2a4:	4817      	ldr	r0, [pc, #92]	; (1c304 <MPSL_IRQ_RTC0_Handler+0x10c>)
   1c2a6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1c2aa:	f8d8 1000 	ldr.w	r1, [r8]
   1c2ae:	1a40      	subs	r0, r0, r1
   1c2b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c2b4:	2802      	cmp	r0, #2
   1c2b6:	d302      	bcc.n	1c2be <MPSL_IRQ_RTC0_Handler+0xc6>
   1c2b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c2bc:	d906      	bls.n	1c2cc <MPSL_IRQ_RTC0_Handler+0xd4>
   1c2be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1c2c2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1c2c6:	2006      	movs	r0, #6
   1c2c8:	f7fe fe36 	bl	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c2cc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   1c2d0:	2800      	cmp	r0, #0
   1c2d2:	bf08      	it	eq
   1c2d4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2d8:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
   1c2dc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
   1c2e0:	4809      	ldr	r0, [pc, #36]	; (1c308 <MPSL_IRQ_RTC0_Handler+0x110>)
   1c2e2:	68c1      	ldr	r1, [r0, #12]
   1c2e4:	1c49      	adds	r1, r1, #1
   1c2e6:	60c1      	str	r1, [r0, #12]
   1c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ec:	4000b000 	.word	0x4000b000
   1c2f0:	4000b504 	.word	0x4000b504
   1c2f4:	4000b140 	.word	0x4000b140
   1c2f8:	4000b144 	.word	0x4000b144
   1c2fc:	4000b004 	.word	0x4000b004
   1c300:	4000b148 	.word	0x4000b148
   1c304:	4000b008 	.word	0x4000b008
   1c308:	20000384 	.word	0x20000384

0001c30c <MPSL_IRQ_TIMER0_Handler>:
   1c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c310:	4d38      	ldr	r5, [pc, #224]	; (1c3f4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
   1c312:	7828      	ldrb	r0, [r5, #0]
   1c314:	2804      	cmp	r0, #4
   1c316:	d068      	beq.n	1c3ea <MPSL_IRQ_TIMER0_Handler+0xde>
   1c318:	1ca8      	adds	r0, r5, #2
   1c31a:	2201      	movs	r2, #1
   1c31c:	7801      	ldrb	r1, [r0, #0]
   1c31e:	b159      	cbz	r1, 1c338 <MPSL_IRQ_TIMER0_Handler+0x2c>
   1c320:	2901      	cmp	r1, #1
   1c322:	bf08      	it	eq
   1c324:	706a      	strbeq	r2, [r5, #1]
   1c326:	d002      	beq.n	1c32e <MPSL_IRQ_TIMER0_Handler+0x22>
   1c328:	7869      	ldrb	r1, [r5, #1]
   1c32a:	2900      	cmp	r1, #0
   1c32c:	d058      	beq.n	1c3e0 <MPSL_IRQ_TIMER0_Handler+0xd4>
   1c32e:	2102      	movs	r1, #2
   1c330:	7001      	strb	r1, [r0, #0]
   1c332:	7840      	ldrb	r0, [r0, #1]
   1c334:	f000 fb12 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1c338:	4c2f      	ldr	r4, [pc, #188]	; (1c3f8 <MPSL_IRQ_TIMER0_Handler+0xec>)
   1c33a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1c33e:	f04f 0800 	mov.w	r8, #0
   1c342:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   1c346:	f44f 7780 	mov.w	r7, #256	; 0x100
   1c34a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
   1c34e:	d00a      	beq.n	1c366 <MPSL_IRQ_TIMER0_Handler+0x5a>
   1c350:	482a      	ldr	r0, [pc, #168]	; (1c3fc <MPSL_IRQ_TIMER0_Handler+0xf0>)
   1c352:	6800      	ldr	r0, [r0, #0]
   1c354:	b138      	cbz	r0, 1c366 <MPSL_IRQ_TIMER0_Handler+0x5a>
   1c356:	2003      	movs	r0, #3
   1c358:	f000 fb00 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1c35c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   1c360:	2003      	movs	r0, #3
   1c362:	f7fe fde9 	bl	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c366:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1c36a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   1c36e:	d00a      	beq.n	1c386 <MPSL_IRQ_TIMER0_Handler+0x7a>
   1c370:	4823      	ldr	r0, [pc, #140]	; (1c400 <MPSL_IRQ_TIMER0_Handler+0xf4>)
   1c372:	6800      	ldr	r0, [r0, #0]
   1c374:	b138      	cbz	r0, 1c386 <MPSL_IRQ_TIMER0_Handler+0x7a>
   1c376:	2002      	movs	r0, #2
   1c378:	f000 faf0 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1c37c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   1c380:	2002      	movs	r0, #2
   1c382:	f7fe fdd9 	bl	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c386:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1c38a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
   1c38e:	d00a      	beq.n	1c3a6 <MPSL_IRQ_TIMER0_Handler+0x9a>
   1c390:	481c      	ldr	r0, [pc, #112]	; (1c404 <MPSL_IRQ_TIMER0_Handler+0xf8>)
   1c392:	6800      	ldr	r0, [r0, #0]
   1c394:	b138      	cbz	r0, 1c3a6 <MPSL_IRQ_TIMER0_Handler+0x9a>
   1c396:	2001      	movs	r0, #1
   1c398:	f000 fae0 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1c39c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   1c3a0:	2001      	movs	r0, #1
   1c3a2:	f7fe fdc9 	bl	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c3a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   1c3aa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1c3ae:	bf08      	it	eq
   1c3b0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3b4:	4814      	ldr	r0, [pc, #80]	; (1c408 <MPSL_IRQ_TIMER0_Handler+0xfc>)
   1c3b6:	6800      	ldr	r0, [r0, #0]
   1c3b8:	2800      	cmp	r0, #0
   1c3ba:	bf08      	it	eq
   1c3bc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3c0:	2000      	movs	r0, #0
   1c3c2:	f000 facb 	bl	1c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   1c3c6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   1c3ca:	2004      	movs	r0, #4
   1c3cc:	7028      	strb	r0, [r5, #0]
   1c3ce:	f8c5 8004 	str.w	r8, [r5, #4]
   1c3d2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
   1c3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c3da:	2000      	movs	r0, #0
   1c3dc:	f7fe bdac 	b.w	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c3e0:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
   1c3e4:	206c      	movs	r0, #108	; 0x6c
   1c3e6:	f000 ffad 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c3ee:	2007      	movs	r0, #7
   1c3f0:	f7fe bda2 	b.w	1af38 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   1c3f4:	20000384 	.word	0x20000384
   1c3f8:	40008000 	.word	0x40008000
   1c3fc:	4000814c 	.word	0x4000814c
   1c400:	40008148 	.word	0x40008148
   1c404:	40008144 	.word	0x40008144
   1c408:	40008140 	.word	0x40008140
   1c40c:	2201      	movs	r2, #1
   1c40e:	0211      	lsls	r1, r2, #8
   1c410:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1c414:	2000      	movs	r0, #0
   1c416:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
   1c41a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1c41e:	f3bf 8f4f 	dsb	sy
   1c422:	f3bf 8f6f 	isb	sy
   1c426:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1c42a:	490e      	ldr	r1, [pc, #56]	; (1c464 <MPSL_IRQ_TIMER0_Handler+0x158>)
   1c42c:	f841 2f04 	str.w	r2, [r1, #4]!
   1c430:	1e43      	subs	r3, r0, #1
   1c432:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
   1c436:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   1c43a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
   1c43e:	4b0a      	ldr	r3, [pc, #40]	; (1c468 <MPSL_IRQ_TIMER0_Handler+0x15c>)
   1c440:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c444:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
   1c448:	1d1b      	adds	r3, r3, #4
   1c44a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c44e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
   1c452:	1d1b      	adds	r3, r3, #4
   1c454:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c458:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
   1c45c:	60ca      	str	r2, [r1, #12]
   1c45e:	4903      	ldr	r1, [pc, #12]	; (1c46c <MPSL_IRQ_TIMER0_Handler+0x160>)
   1c460:	7048      	strb	r0, [r1, #1]
   1c462:	4770      	bx	lr
   1c464:	40008000 	.word	0x40008000
   1c468:	40008004 	.word	0x40008004
   1c46c:	20000384 	.word	0x20000384

0001c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
   1c470:	4801      	ldr	r0, [pc, #4]	; (1c478 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
   1c472:	6800      	ldr	r0, [r0, #0]
   1c474:	4770      	bx	lr
   1c476:	0000      	.short	0x0000
   1c478:	4000b504 	.word	0x4000b504

0001c47c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
   1c47c:	b430      	push	{r4, r5}
   1c47e:	f3ef 8c10 	mrs	ip, PRIMASK
   1c482:	b672      	cpsid	i
   1c484:	2500      	movs	r5, #0
   1c486:	4b0b      	ldr	r3, [pc, #44]	; (1c4b4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
   1c488:	4a0b      	ldr	r2, [pc, #44]	; (1c4b8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
   1c48a:	bf00      	nop
   1c48c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
   1c490:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
   1c494:	b12c      	cbz	r4, 1c4a2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
   1c496:	68d1      	ldr	r1, [r2, #12]
   1c498:	1c49      	adds	r1, r1, #1
   1c49a:	60d1      	str	r1, [r2, #12]
   1c49c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
   1c4a0:	e7f4      	b.n	1c48c <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
   1c4a2:	68d2      	ldr	r2, [r2, #12]
   1c4a4:	f1bc 0f00 	cmp.w	ip, #0
   1c4a8:	d100      	bne.n	1c4ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
   1c4aa:	b662      	cpsie	i
   1c4ac:	e9c0 1200 	strd	r1, r2, [r0]
   1c4b0:	bc30      	pop	{r4, r5}
   1c4b2:	4770      	bx	lr
   1c4b4:	4000b000 	.word	0x4000b000
   1c4b8:	20000384 	.word	0x20000384

0001c4bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
   1c4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c4c0:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1c5f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
   1c4c4:	4605      	mov	r5, r0
   1c4c6:	f1a8 0602 	sub.w	r6, r8, #2
   1c4ca:	f898 3000 	ldrb.w	r3, [r8]
   1c4ce:	68b0      	ldr	r0, [r6, #8]
   1c4d0:	2b01      	cmp	r3, #1
   1c4d2:	bf04      	itt	eq
   1c4d4:	42a8      	cmpeq	r0, r5
   1c4d6:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c4da:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
   1c4de:	4a47      	ldr	r2, [pc, #284]	; (1c5fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
   1c4e0:	6011      	str	r1, [r2, #0]
   1c4e2:	4948      	ldr	r1, [pc, #288]	; (1c604 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
   1c4e4:	4a46      	ldr	r2, [pc, #280]	; (1c600 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
   1c4e6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   1c4ea:	f101 0c04 	add.w	ip, r1, #4
   1c4ee:	f04f 0400 	mov.w	r4, #0
   1c4f2:	2b00      	cmp	r3, #0
   1c4f4:	d055      	beq.n	1c5a2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
   1c4f6:	4a44      	ldr	r2, [pc, #272]	; (1c608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
   1c4f8:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
   1c4fc:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
   1c500:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
   1c504:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
   1c508:	2701      	movs	r7, #1
   1c50a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
   1c50e:	2a00      	cmp	r2, #0
   1c510:	bf01      	itttt	eq
   1c512:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
   1c516:	2a00      	cmpeq	r2, #0
   1c518:	f44f 6200 	moveq.w	r2, #2048	; 0x800
   1c51c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
   1c520:	f04f 0a10 	mov.w	sl, #16
   1c524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c528:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   1c52c:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
   1c530:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
   1c534:	4a35      	ldr	r2, [pc, #212]	; (1c60c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
   1c536:	f8d2 c000 	ldr.w	ip, [r2]
   1c53a:	eba5 0c0c 	sub.w	ip, r5, ip
   1c53e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
   1c542:	f1bc 0f02 	cmp.w	ip, #2
   1c546:	d337      	bcc.n	1c5b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
   1c548:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
   1c54c:	d834      	bhi.n	1c5b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
   1c54e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
   1c552:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
   1c556:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
   1c55a:	b12b      	cbz	r3, 1c568 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
   1c55c:	6811      	ldr	r1, [r2, #0]
   1c55e:	1a41      	subs	r1, r0, r1
   1c560:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c564:	2902      	cmp	r1, #2
   1c566:	d3f9      	bcc.n	1c55c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
   1c568:	6077      	str	r7, [r6, #4]
   1c56a:	7034      	strb	r4, [r6, #0]
   1c56c:	f7ff ff4e 	bl	1c40c <MPSL_IRQ_TIMER0_Handler+0x100>
   1c570:	4827      	ldr	r0, [pc, #156]	; (1c610 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
   1c572:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
   1c576:	f364 0101 	bfi	r1, r4, #0, #2
   1c57a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
   1c57e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
   1c582:	2102      	movs	r1, #2
   1c584:	f361 0201 	bfi	r2, r1, #0, #2
   1c588:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
   1c58c:	fa9a f1aa 	rbit	r1, sl
   1c590:	fab1 f181 	clz	r1, r1
   1c594:	2909      	cmp	r1, #9
   1c596:	d917      	bls.n	1c5c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
   1c598:	f240 3155 	movw	r1, #853	; 0x355
   1c59c:	a01d      	add	r0, pc, #116	; (adr r0, 1c614 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
   1c59e:	f000 fea5 	bl	1d2ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   1c5a2:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
   1c5a6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
   1c5aa:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
   1c5ae:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
   1c5b2:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
   1c5b6:	e7a5      	b.n	1c504 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
   1c5b8:	2000      	movs	r0, #0
   1c5ba:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   1c5be:	f44f 7127 	mov.w	r1, #668	; 0x29c
   1c5c2:	206c      	movs	r0, #108	; 0x6c
   1c5c4:	f000 febe 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c5c8:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   1c5cc:	60c7      	str	r7, [r0, #12]
   1c5ce:	6871      	ldr	r1, [r6, #4]
   1c5d0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1c5d4:	f44f 7080 	mov.w	r0, #256	; 0x100
   1c5d8:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
   1c5dc:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
   1c5e0:	490f      	ldr	r1, [pc, #60]	; (1c620 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
   1c5e2:	05c0      	lsls	r0, r0, #23
   1c5e4:	6008      	str	r0, [r1, #0]
   1c5e6:	2004      	movs	r0, #4
   1c5e8:	60b5      	str	r5, [r6, #8]
   1c5ea:	f888 0001 	strb.w	r0, [r8, #1]
   1c5ee:	f888 7000 	strb.w	r7, [r8]
   1c5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c5f6:	0000      	.short	0x0000
   1c5f8:	20000386 	.word	0x20000386
   1c5fc:	4001f508 	.word	0x4001f508
   1c600:	fffbfffd 	.word	0xfffbfffd
   1c604:	4000b000 	.word	0x4000b000
   1c608:	fffafffd 	.word	0xfffafffd
   1c60c:	4000b504 	.word	0x4000b504
   1c610:	40008000 	.word	0x40008000
   1c614:	5f66726e 	.word	0x5f66726e
   1c618:	656d6974 	.word	0x656d6974
   1c61c:	00682e72 	.word	0x00682e72
   1c620:	4001f504 	.word	0x4001f504

0001c624 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
   1c624:	b570      	push	{r4, r5, r6, lr}
   1c626:	4c2a      	ldr	r4, [pc, #168]	; (1c6d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
   1c628:	68a1      	ldr	r1, [r4, #8]
   1c62a:	4281      	cmp	r1, r0
   1c62c:	bf14      	ite	ne
   1c62e:	2201      	movne	r2, #1
   1c630:	2200      	moveq	r2, #0
   1c632:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 1c6d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
   1c636:	f89c 5000 	ldrb.w	r5, [ip]
   1c63a:	2d02      	cmp	r5, #2
   1c63c:	d002      	beq.n	1c644 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
   1c63e:	2a00      	cmp	r2, #0
   1c640:	d034      	beq.n	1c6ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
   1c642:	e002      	b.n	1c64a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
   1c644:	2a00      	cmp	r2, #0
   1c646:	bf08      	it	eq
   1c648:	bd70      	popeq	{r4, r5, r6, pc}
   1c64a:	7862      	ldrb	r2, [r4, #1]
   1c64c:	b39a      	cbz	r2, 1c6b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
   1c64e:	4b22      	ldr	r3, [pc, #136]	; (1c6d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
   1c650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c654:	601a      	str	r2, [r3, #0]
   1c656:	4b21      	ldr	r3, [pc, #132]	; (1c6dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
   1c658:	1392      	asrs	r2, r2, #14
   1c65a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1c65e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1c662:	2200      	movs	r2, #0
   1c664:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   1c668:	4a1d      	ldr	r2, [pc, #116]	; (1c6e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
   1c66a:	6816      	ldr	r6, [r2, #0]
   1c66c:	1b86      	subs	r6, r0, r6
   1c66e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   1c672:	2e02      	cmp	r6, #2
   1c674:	d324      	bcc.n	1c6c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
   1c676:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
   1c67a:	d821      	bhi.n	1c6c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
   1c67c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c680:	f44f 3680 	mov.w	r6, #65536	; 0x10000
   1c684:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
   1c688:	b12d      	cbz	r5, 1c696 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
   1c68a:	6813      	ldr	r3, [r2, #0]
   1c68c:	1acb      	subs	r3, r1, r3
   1c68e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1c692:	2b02      	cmp	r3, #2
   1c694:	d3f9      	bcc.n	1c68a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
   1c696:	4b13      	ldr	r3, [pc, #76]	; (1c6e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
   1c698:	2102      	movs	r1, #2
   1c69a:	074a      	lsls	r2, r1, #29
   1c69c:	601a      	str	r2, [r3, #0]
   1c69e:	60a0      	str	r0, [r4, #8]
   1c6a0:	2004      	movs	r0, #4
   1c6a2:	f88c 0001 	strb.w	r0, [ip, #1]
   1c6a6:	f88c 1000 	strb.w	r1, [ip]
   1c6aa:	bd70      	pop	{r4, r5, r6, pc}
   1c6ac:	f240 21aa 	movw	r1, #682	; 0x2aa
   1c6b0:	206c      	movs	r0, #108	; 0x6c
   1c6b2:	f000 fe47 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c6b6:	f240 21ae 	movw	r1, #686	; 0x2ae
   1c6ba:	206c      	movs	r0, #108	; 0x6c
   1c6bc:	f000 fe42 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c6c0:	2000      	movs	r0, #0
   1c6c2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c6c6:	f240 21ba 	movw	r1, #698	; 0x2ba
   1c6ca:	206c      	movs	r0, #108	; 0x6c
   1c6cc:	f000 fe3a 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c6d0:	20000384 	.word	0x20000384
   1c6d4:	20000386 	.word	0x20000386
   1c6d8:	4001f508 	.word	0x4001f508
   1c6dc:	4000b000 	.word	0x4000b000
   1c6e0:	4000b504 	.word	0x4000b504
   1c6e4:	4001f504 	.word	0x4001f504

0001c6e8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
   1c6e8:	4801      	ldr	r0, [pc, #4]	; (1c6f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
   1c6ea:	6880      	ldr	r0, [r0, #8]
   1c6ec:	4770      	bx	lr
   1c6ee:	0000      	.short	0x0000
   1c6f0:	20000384 	.word	0x20000384

0001c6f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
   1c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c6f8:	4836      	ldr	r0, [pc, #216]	; (1c7d4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
   1c6fa:	4a35      	ldr	r2, [pc, #212]	; (1c7d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
   1c6fc:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1c700:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 1c7d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
   1c704:	1d03      	adds	r3, r0, #4
   1c706:	2100      	movs	r1, #0
   1c708:	f89c 4000 	ldrb.w	r4, [ip]
   1c70c:	b184      	cbz	r4, 1c730 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
   1c70e:	4a33      	ldr	r2, [pc, #204]	; (1c7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
   1c710:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   1c714:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   1c718:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1c71c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   1c720:	2301      	movs	r3, #1
   1c722:	2a00      	cmp	r2, #0
   1c724:	bf04      	itt	eq
   1c726:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
   1c72a:	2800      	cmpeq	r0, #0
   1c72c:	d111      	bne.n	1c752 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
   1c72e:	e00a      	b.n	1c746 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
   1c730:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   1c734:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1c738:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
   1c73c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   1c740:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1c744:	e7ea      	b.n	1c71c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
   1c746:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1c74a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1c74e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
   1c752:	2c02      	cmp	r4, #2
   1c754:	d004      	beq.n	1c760 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
   1c756:	f240 21c6 	movw	r1, #710	; 0x2c6
   1c75a:	206c      	movs	r0, #108	; 0x6c
   1c75c:	f000 fdf2 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c760:	4e1f      	ldr	r6, [pc, #124]	; (1c7e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
   1c762:	6830      	ldr	r0, [r6, #0]
   1c764:	4c1f      	ldr	r4, [pc, #124]	; (1c7e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
   1c766:	1cc0      	adds	r0, r0, #3
   1c768:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c76c:	68a2      	ldr	r2, [r4, #8]
   1c76e:	4d1e      	ldr	r5, [pc, #120]	; (1c7e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
   1c770:	4290      	cmp	r0, r2
   1c772:	d00b      	beq.n	1c78c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
   1c774:	6837      	ldr	r7, [r6, #0]
   1c776:	1bd7      	subs	r7, r2, r7
   1c778:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
   1c77c:	2f04      	cmp	r7, #4
   1c77e:	d305      	bcc.n	1c78c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
   1c780:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
   1c784:	d802      	bhi.n	1c78c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
   1c786:	f7ff fe99 	bl	1c4bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   1c78a:	e01b      	b.n	1c7c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
   1c78c:	6830      	ldr	r0, [r6, #0]
   1c78e:	1a10      	subs	r0, r2, r0
   1c790:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c794:	2802      	cmp	r0, #2
   1c796:	d313      	bcc.n	1c7c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
   1c798:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1c79c:	d810      	bhi.n	1c7c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
   1c79e:	4a13      	ldr	r2, [pc, #76]	; (1c7ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
   1c7a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1c7a4:	6010      	str	r0, [r2, #0]
   1c7a6:	6063      	str	r3, [r4, #4]
   1c7a8:	7021      	strb	r1, [r4, #0]
   1c7aa:	606b      	str	r3, [r5, #4]
   1c7ac:	60eb      	str	r3, [r5, #12]
   1c7ae:	0040      	lsls	r0, r0, #1
   1c7b0:	1f11      	subs	r1, r2, #4
   1c7b2:	6008      	str	r0, [r1, #0]
   1c7b4:	2004      	movs	r0, #4
   1c7b6:	f88c 0001 	strb.w	r0, [ip, #1]
   1c7ba:	f88c 3000 	strb.w	r3, [ip]
   1c7be:	e001      	b.n	1c7c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
   1c7c0:	6063      	str	r3, [r4, #4]
   1c7c2:	7021      	strb	r1, [r4, #0]
   1c7c4:	6860      	ldr	r0, [r4, #4]
   1c7c6:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   1c7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c7ce:	0000      	.short	0x0000
   1c7d0:	fffbfffd 	.word	0xfffbfffd
   1c7d4:	4000b000 	.word	0x4000b000
   1c7d8:	20000386 	.word	0x20000386
   1c7dc:	fffafffd 	.word	0xfffafffd
   1c7e0:	4000b504 	.word	0x4000b504
   1c7e4:	20000384 	.word	0x20000384
   1c7e8:	40008000 	.word	0x40008000
   1c7ec:	4001f508 	.word	0x4001f508

0001c7f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
   1c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7f4:	4a54      	ldr	r2, [pc, #336]	; (1c948 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
   1c7f6:	2500      	movs	r5, #0
   1c7f8:	2401      	movs	r4, #1
   1c7fa:	f892 c000 	ldrb.w	ip, [r2]
   1c7fe:	7853      	ldrb	r3, [r2, #1]
   1c800:	f44f 76a0 	mov.w	r6, #320	; 0x140
   1c804:	2807      	cmp	r0, #7
   1c806:	d27d      	bcs.n	1c904 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
   1c808:	e8df f000 	tbb	[pc, r0]
   1c80c:	04040404 	.word	0x04040404
   1c810:	00585858 	.word	0x00585858
   1c814:	4a4d      	ldr	r2, [pc, #308]	; (1c94c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
   1c816:	6897      	ldr	r7, [r2, #8]
   1c818:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
   1c81c:	bf04      	itt	eq
   1c81e:	7852      	ldrbeq	r2, [r2, #1]
   1c820:	2a00      	cmpeq	r2, #0
   1c822:	d003      	beq.n	1c82c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
   1c824:	f1bc 0f02 	cmp.w	ip, #2
   1c828:	d005      	beq.n	1c836 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
   1c82a:	e026      	b.n	1c87a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
   1c82c:	f240 3156 	movw	r1, #854	; 0x356
   1c830:	206c      	movs	r0, #108	; 0x6c
   1c832:	f000 fd87 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c836:	1f1a      	subs	r2, r3, #4
   1c838:	b2d2      	uxtb	r2, r2
   1c83a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   1c83e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
   1c842:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
   1c846:	2200      	movs	r2, #0
   1c848:	f1bc 0f01 	cmp.w	ip, #1
   1c84c:	d003      	beq.n	1c856 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
   1c84e:	f1bc 0f02 	cmp.w	ip, #2
   1c852:	d008      	beq.n	1c866 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
   1c854:	e00e      	b.n	1c874 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
   1c856:	2b04      	cmp	r3, #4
   1c858:	bf24      	itt	cs
   1c85a:	6837      	ldrcs	r7, [r6, #0]
   1c85c:	2f00      	cmpcs	r7, #0
   1c85e:	bf08      	it	eq
   1c860:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
   1c864:	e006      	b.n	1c874 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
   1c866:	2b04      	cmp	r3, #4
   1c868:	bf24      	itt	cs
   1c86a:	6837      	ldrcs	r7, [r6, #0]
   1c86c:	2f00      	cmpcs	r7, #0
   1c86e:	bf08      	it	eq
   1c870:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
   1c874:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
   1c878:	d1e5      	bne.n	1c846 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
   1c87a:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 1c950 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
   1c87e:	f100 0210 	add.w	r2, r0, #16
   1c882:	fa04 f202 	lsl.w	r2, r4, r2
   1c886:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
   1c88a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c88e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1c892:	b2db      	uxtb	r3, r3
   1c894:	4463      	add	r3, ip
   1c896:	601c      	str	r4, [r3, #0]
   1c898:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1c89c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
   1c8a0:	eba1 0303 	sub.w	r3, r1, r3
   1c8a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1c8a8:	2b03      	cmp	r3, #3
   1c8aa:	bf26      	itte	cs
   1c8ac:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
   1c8b0:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
   1c8b4:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
   1c8b8:	d237      	bcs.n	1c92a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
   1c8ba:	e03c      	b.n	1c936 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
   1c8bc:	f1bc 0f00 	cmp.w	ip, #0
   1c8c0:	d006      	beq.n	1c8d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
   1c8c2:	4283      	cmp	r3, r0
   1c8c4:	d104      	bne.n	1c8d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
   1c8c6:	f240 3176 	movw	r1, #886	; 0x376
   1c8ca:	206c      	movs	r0, #108	; 0x6c
   1c8cc:	f000 fd3a 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c8d0:	1f02      	subs	r2, r0, #4
   1c8d2:	b2d3      	uxtb	r3, r2
   1c8d4:	2b03      	cmp	r3, #3
   1c8d6:	d304      	bcc.n	1c8e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
   1c8d8:	f240 11d1 	movw	r1, #465	; 0x1d1
   1c8dc:	206c      	movs	r0, #108	; 0x6c
   1c8de:	f000 fd31 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c8e2:	f8df c070 	ldr.w	ip, [pc, #112]	; 1c954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
   1c8e6:	f103 0210 	add.w	r2, r3, #16
   1c8ea:	fa04 f202 	lsl.w	r2, r4, r2
   1c8ee:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
   1c8f2:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
   1c8f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1c8fa:	f84c 5003 	str.w	r5, [ip, r3]
   1c8fe:	4b16      	ldr	r3, [pc, #88]	; (1c958 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
   1c900:	681b      	ldr	r3, [r3, #0]
   1c902:	e000      	b.n	1c906 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
   1c904:	e01a      	b.n	1c93c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
   1c906:	1f00      	subs	r0, r0, #4
   1c908:	1acb      	subs	r3, r1, r3
   1c90a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1c90e:	b2c0      	uxtb	r0, r0
   1c910:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   1c914:	2b02      	cmp	r3, #2
   1c916:	d30b      	bcc.n	1c930 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
   1c918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1c91c:	d808      	bhi.n	1c930 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
   1c91e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1c922:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
   1c926:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
   1c92a:	2001      	movs	r0, #1
   1c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c930:	2100      	movs	r1, #0
   1c932:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1c936:	2000      	movs	r0, #0
   1c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c93c:	f240 317a 	movw	r1, #890	; 0x37a
   1c940:	206c      	movs	r0, #108	; 0x6c
   1c942:	f000 fcff 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1c946:	0000      	.short	0x0000
   1c948:	20000386 	.word	0x20000386
   1c94c:	20000384 	.word	0x20000384
   1c950:	40008000 	.word	0x40008000
   1c954:	4000b000 	.word	0x4000b000
   1c958:	4000b504 	.word	0x4000b504

0001c95c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
   1c95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c960:	2601      	movs	r6, #1
   1c962:	2700      	movs	r7, #0
   1c964:	f44f 78a0 	mov.w	r8, #320	; 0x140
   1c968:	2807      	cmp	r0, #7
   1c96a:	d251      	bcs.n	1ca10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
   1c96c:	e8df f000 	tbb	[pc, r0]
   1c970:	04040404 	.word	0x04040404
   1c974:	00191919 	.word	0x00191919
   1c978:	f100 0110 	add.w	r1, r0, #16
   1c97c:	fa06 f201 	lsl.w	r2, r6, r1
   1c980:	4926      	ldr	r1, [pc, #152]	; (1ca1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
   1c982:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   1c986:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   1c98a:	2200      	movs	r2, #0
   1c98c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
   1c990:	eb08 0280 	add.w	r2, r8, r0, lsl #2
   1c994:	508f      	str	r7, [r1, r2]
   1c996:	4922      	ldr	r1, [pc, #136]	; (1ca20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
   1c998:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1c99c:	9000      	str	r0, [sp, #0]
   1c99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c9a2:	4d20      	ldr	r5, [pc, #128]	; (1ca24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
   1c9a4:	1f01      	subs	r1, r0, #4
   1c9a6:	b2cc      	uxtb	r4, r1
   1c9a8:	7829      	ldrb	r1, [r5, #0]
   1c9aa:	b179      	cbz	r1, 1c9cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
   1c9ac:	786a      	ldrb	r2, [r5, #1]
   1c9ae:	4282      	cmp	r2, r0
   1c9b0:	d10c      	bne.n	1c9cc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
   1c9b2:	4a1d      	ldr	r2, [pc, #116]	; (1ca28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
   1c9b4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
   1c9b8:	6010      	str	r0, [r2, #0]
   1c9ba:	2901      	cmp	r1, #1
   1c9bc:	bf08      	it	eq
   1c9be:	f7ff fd25 	bleq	1c40c <MPSL_IRQ_TIMER0_Handler+0x100>
   1c9c2:	702f      	strb	r7, [r5, #0]
   1c9c4:	4919      	ldr	r1, [pc, #100]	; (1ca2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
   1c9c6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   1c9ca:	6088      	str	r0, [r1, #8]
   1c9cc:	4918      	ldr	r1, [pc, #96]	; (1ca30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
   1c9ce:	f104 0010 	add.w	r0, r4, #16
   1c9d2:	fa06 f000 	lsl.w	r0, r6, r0
   1c9d6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
   1c9da:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1c9de:	00a0      	lsls	r0, r4, #2
   1c9e0:	4408      	add	r0, r1
   1c9e2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   1c9e6:	4a13      	ldr	r2, [pc, #76]	; (1ca34 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
   1c9e8:	6812      	ldr	r2, [r2, #0]
   1c9ea:	1a80      	subs	r0, r0, r2
   1c9ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1c9f0:	2802      	cmp	r0, #2
   1c9f2:	d307      	bcc.n	1ca04 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
   1c9f4:	eb01 0284 	add.w	r2, r1, r4, lsl #2
   1c9f8:	2000      	movs	r0, #0
   1c9fa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   1c9fe:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   1ca02:	500f      	str	r7, [r1, r0]
   1ca04:	480c      	ldr	r0, [pc, #48]	; (1ca38 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
   1ca06:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1ca0a:	9000      	str	r0, [sp, #0]
   1ca0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ca10:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1ca14:	206c      	movs	r0, #108	; 0x6c
   1ca16:	f000 fc95 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1ca1a:	0000      	.short	0x0000
   1ca1c:	40008000 	.word	0x40008000
   1ca20:	40008140 	.word	0x40008140
   1ca24:	20000386 	.word	0x20000386
   1ca28:	4001f508 	.word	0x4001f508
   1ca2c:	20000384 	.word	0x20000384
   1ca30:	4000b000 	.word	0x4000b000
   1ca34:	4000b504 	.word	0x4000b504
   1ca38:	4000b140 	.word	0x4000b140

0001ca3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
   1ca3c:	4825      	ldr	r0, [pc, #148]	; (1cad4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
   1ca3e:	4a24      	ldr	r2, [pc, #144]	; (1cad0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
   1ca40:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1ca44:	4924      	ldr	r1, [pc, #144]	; (1cad8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
   1ca46:	1d03      	adds	r3, r0, #4
   1ca48:	f891 c000 	ldrb.w	ip, [r1]
   1ca4c:	2100      	movs	r1, #0
   1ca4e:	f1bc 0f00 	cmp.w	ip, #0
   1ca52:	d010      	beq.n	1ca76 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
   1ca54:	4a21      	ldr	r2, [pc, #132]	; (1cadc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
   1ca56:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   1ca5a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   1ca5e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1ca62:	bf00      	nop
   1ca64:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   1ca68:	2a00      	cmp	r2, #0
   1ca6a:	bf04      	itt	eq
   1ca6c:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
   1ca70:	2800      	cmpeq	r0, #0
   1ca72:	d111      	bne.n	1ca98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
   1ca74:	e00a      	b.n	1ca8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
   1ca76:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   1ca7a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1ca7e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
   1ca82:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
   1ca86:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1ca8a:	e7eb      	b.n	1ca64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
   1ca8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1ca90:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1ca94:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
   1ca98:	4811      	ldr	r0, [pc, #68]	; (1cae0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
   1ca9a:	f04f 32ff 	mov.w	r2, #4294967295
   1ca9e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1caa2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1caa6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
   1caaa:	f100 0204 	add.w	r2, r0, #4
   1caae:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   1cab2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   1cab6:	f102 0204 	add.w	r2, r2, #4
   1caba:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   1cabe:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
   1cac2:	f102 0204 	add.w	r2, r2, #4
   1cac6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   1caca:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   1cace:	4770      	bx	lr
   1cad0:	fffbfffd 	.word	0xfffbfffd
   1cad4:	4000b000 	.word	0x4000b000
   1cad8:	20000386 	.word	0x20000386
   1cadc:	fffafffd 	.word	0xfffafffd
   1cae0:	40008000 	.word	0x40008000

0001cae4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
   1cae4:	b510      	push	{r4, lr}
   1cae6:	2807      	cmp	r0, #7
   1cae8:	d20d      	bcs.n	1cb06 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
   1caea:	e8df f000 	tbb	[pc, r0]
   1caee:	0404      	.short	0x0404
   1caf0:	06060404 	.word	0x06060404
   1caf4:	0006      	.short	0x0006
   1caf6:	4906      	ldr	r1, [pc, #24]	; (1cb10 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
   1caf8:	e002      	b.n	1cb00 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
   1cafa:	1f00      	subs	r0, r0, #4
   1cafc:	4905      	ldr	r1, [pc, #20]	; (1cb14 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
   1cafe:	b2c0      	uxtb	r0, r0
   1cb00:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1cb04:	bd10      	pop	{r4, pc}
   1cb06:	f240 319e 	movw	r1, #926	; 0x39e
   1cb0a:	206c      	movs	r0, #108	; 0x6c
   1cb0c:	f000 fc1a 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1cb10:	40008140 	.word	0x40008140
   1cb14:	4000b140 	.word	0x4000b140

0001cb18 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
   1cb18:	b510      	push	{r4, lr}
   1cb1a:	2807      	cmp	r0, #7
   1cb1c:	d20d      	bcs.n	1cb3a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
   1cb1e:	e8df f000 	tbb	[pc, r0]
   1cb22:	0404      	.short	0x0404
   1cb24:	06060404 	.word	0x06060404
   1cb28:	0006      	.short	0x0006
   1cb2a:	4906      	ldr	r1, [pc, #24]	; (1cb44 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
   1cb2c:	e002      	b.n	1cb34 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
   1cb2e:	1f00      	subs	r0, r0, #4
   1cb30:	4905      	ldr	r1, [pc, #20]	; (1cb48 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
   1cb32:	b2c0      	uxtb	r0, r0
   1cb34:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1cb38:	bd10      	pop	{r4, pc}
   1cb3a:	f240 319e 	movw	r1, #926	; 0x39e
   1cb3e:	206c      	movs	r0, #108	; 0x6c
   1cb40:	f000 fc00 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1cb44:	40008140 	.word	0x40008140
   1cb48:	4000b140 	.word	0x4000b140

0001cb4c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
   1cb4c:	b570      	push	{r4, r5, r6, lr}
   1cb4e:	481f      	ldr	r0, [pc, #124]	; (1cbcc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
   1cb50:	2400      	movs	r4, #0
   1cb52:	2104      	movs	r1, #4
   1cb54:	7004      	strb	r4, [r0, #0]
   1cb56:	1e80      	subs	r0, r0, #2
   1cb58:	7001      	strb	r1, [r0, #0]
   1cb5a:	0589      	lsls	r1, r1, #22
   1cb5c:	60c4      	str	r4, [r0, #12]
   1cb5e:	6081      	str	r1, [r0, #8]
   1cb60:	f7ff fc54 	bl	1c40c <MPSL_IRQ_TIMER0_Handler+0x100>
   1cb64:	2501      	movs	r5, #1
   1cb66:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
   1cb6a:	02eb      	lsls	r3, r5, #11
   1cb6c:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
   1cb70:	f3bf 8f4f 	dsb	sy
   1cb74:	f3bf 8f6f 	isb	sy
   1cb78:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
   1cb7c:	4814      	ldr	r0, [pc, #80]	; (1cbd0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
   1cb7e:	6045      	str	r5, [r0, #4]
   1cb80:	6085      	str	r5, [r0, #8]
   1cb82:	4914      	ldr	r1, [pc, #80]	; (1cbd4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
   1cb84:	680a      	ldr	r2, [r1, #0]
   1cb86:	2a00      	cmp	r2, #0
   1cb88:	d1fc      	bne.n	1cb84 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
   1cb8a:	1e51      	subs	r1, r2, #1
   1cb8c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   1cb90:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
   1cb94:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
   1cb98:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
   1cb9c:	490e      	ldr	r1, [pc, #56]	; (1cbd8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
   1cb9e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
   1cba2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
   1cba6:	1d09      	adds	r1, r1, #4
   1cba8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
   1cbac:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
   1cbb0:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
   1cbb4:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
   1cbb8:	6005      	str	r5, [r0, #0]
   1cbba:	f44f 7182 	mov.w	r1, #260	; 0x104
   1cbbe:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
   1cbc2:	2102      	movs	r1, #2
   1cbc4:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
   1cbc8:	bd70      	pop	{r4, r5, r6, pc}
   1cbca:	0000      	.short	0x0000
   1cbcc:	20000386 	.word	0x20000386
   1cbd0:	4000b000 	.word	0x4000b000
   1cbd4:	4000b504 	.word	0x4000b504
   1cbd8:	4000b004 	.word	0x4000b004

0001cbdc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
   1cbdc:	4808      	ldr	r0, [pc, #32]	; (1cc00 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
   1cbde:	f990 0000 	ldrsb.w	r0, [r0]
   1cbe2:	2800      	cmp	r0, #0
   1cbe4:	bfb8      	it	lt
   1cbe6:	4770      	bxlt	lr
   1cbe8:	f000 011f 	and.w	r1, r0, #31
   1cbec:	2201      	movs	r2, #1
   1cbee:	fa02 f101 	lsl.w	r1, r2, r1
   1cbf2:	0940      	lsrs	r0, r0, #5
   1cbf4:	0080      	lsls	r0, r0, #2
   1cbf6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1cbfa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1cbfe:	4770      	bx	lr
   1cc00:	20000435 	.word	0x20000435

0001cc04 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
   1cc04:	4803      	ldr	r0, [pc, #12]	; (1cc14 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
   1cc06:	7800      	ldrb	r0, [r0, #0]
   1cc08:	2803      	cmp	r0, #3
   1cc0a:	bf0c      	ite	eq
   1cc0c:	2001      	moveq	r0, #1
   1cc0e:	2000      	movne	r0, #0
   1cc10:	4770      	bx	lr
   1cc12:	0000      	.short	0x0000
   1cc14:	20000404 	.word	0x20000404

0001cc18 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
   1cc18:	4801      	ldr	r0, [pc, #4]	; (1cc20 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
   1cc1a:	8840      	ldrh	r0, [r0, #2]
   1cc1c:	4770      	bx	lr
   1cc1e:	0000      	.short	0x0000
   1cc20:	20000404 	.word	0x20000404

0001cc24 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
   1cc24:	4803      	ldr	r0, [pc, #12]	; (1cc34 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
   1cc26:	7800      	ldrb	r0, [r0, #0]
   1cc28:	2802      	cmp	r0, #2
   1cc2a:	bf16      	itet	ne
   1cc2c:	2803      	cmpne	r0, #3
   1cc2e:	2001      	moveq	r0, #1
   1cc30:	2000      	movne	r0, #0
   1cc32:	4770      	bx	lr
   1cc34:	20000404 	.word	0x20000404

0001cc38 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
   1cc38:	4802      	ldr	r0, [pc, #8]	; (1cc44 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
   1cc3a:	2100      	movs	r1, #0
   1cc3c:	7001      	strb	r1, [r0, #0]
   1cc3e:	8041      	strh	r1, [r0, #2]
   1cc40:	4770      	bx	lr
   1cc42:	0000      	.short	0x0000
   1cc44:	20000404 	.word	0x20000404

0001cc48 <MPSL_IRQ_CLOCK_Handler>:
   1cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc4c:	4c16      	ldr	r4, [pc, #88]	; (1cca8 <MPSL_IRQ_CLOCK_Handler+0x60>)
   1cc4e:	7a60      	ldrb	r0, [r4, #9]
   1cc50:	2800      	cmp	r0, #0
   1cc52:	d027      	beq.n	1cca4 <MPSL_IRQ_CLOCK_Handler+0x5c>
   1cc54:	f44f 7180 	mov.w	r1, #256	; 0x100
   1cc58:	058d      	lsls	r5, r1, #22
   1cc5a:	4628      	mov	r0, r5
   1cc5c:	f006 f8ef 	bl	22e3e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
   1cc60:	4680      	mov	r8, r0
   1cc62:	f44f 7182 	mov.w	r1, #260	; 0x104
   1cc66:	4628      	mov	r0, r5
   1cc68:	f006 f8e9 	bl	22e3e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
   1cc6c:	2600      	movs	r6, #0
   1cc6e:	4607      	mov	r7, r0
   1cc70:	f1b8 0f00 	cmp.w	r8, #0
   1cc74:	d009      	beq.n	1cc8a <MPSL_IRQ_CLOCK_Handler+0x42>
   1cc76:	2001      	movs	r0, #1
   1cc78:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1cc7c:	7920      	ldrb	r0, [r4, #4]
   1cc7e:	b120      	cbz	r0, 1cc8a <MPSL_IRQ_CLOCK_Handler+0x42>
   1cc80:	7126      	strb	r6, [r4, #4]
   1cc82:	69e0      	ldr	r0, [r4, #28]
   1cc84:	b108      	cbz	r0, 1cc8a <MPSL_IRQ_CLOCK_Handler+0x42>
   1cc86:	4780      	blx	r0
   1cc88:	61e6      	str	r6, [r4, #28]
   1cc8a:	b137      	cbz	r7, 1cc9a <MPSL_IRQ_CLOCK_Handler+0x52>
   1cc8c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
   1cc90:	2002      	movs	r0, #2
   1cc92:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1cc96:	f000 fa75 	bl	1d184 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   1cc9a:	4640      	mov	r0, r8
   1cc9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cca0:	f000 b858 	b.w	1cd54 <MPSL_IRQ_CLOCK_Handler+0x10c>
   1cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cca8:	20000394 	.word	0x20000394
   1ccac:	b510      	push	{r4, lr}
   1ccae:	f006 f970 	bl	22f92 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
   1ccb2:	b930      	cbnz	r0, 1ccc2 <MPSL_IRQ_CLOCK_Handler+0x7a>
   1ccb4:	f006 f98e 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1ccb8:	b918      	cbnz	r0, 1ccc2 <MPSL_IRQ_CLOCK_Handler+0x7a>
   1ccba:	f006 f9c1 	bl	23040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1ccbe:	2800      	cmp	r0, #0
   1ccc0:	d002      	beq.n	1ccc8 <MPSL_IRQ_CLOCK_Handler+0x80>
   1ccc2:	4902      	ldr	r1, [pc, #8]	; (1cccc <MPSL_IRQ_CLOCK_Handler+0x84>)
   1ccc4:	2002      	movs	r0, #2
   1ccc6:	6008      	str	r0, [r1, #0]
   1ccc8:	bd10      	pop	{r4, pc}
   1ccca:	0000      	.short	0x0000
   1cccc:	40000c34 	.word	0x40000c34
   1ccd0:	b570      	push	{r4, r5, r6, lr}
   1ccd2:	f000 f99b 	bl	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1ccd6:	f000 fabd 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1ccda:	4c09      	ldr	r4, [pc, #36]	; (1cd00 <MPSL_IRQ_CLOCK_Handler+0xb8>)
   1ccdc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1cce0:	b130      	cbz	r0, 1ccf0 <MPSL_IRQ_CLOCK_Handler+0xa8>
   1cce2:	f7ff ffe3 	bl	1ccac <MPSL_IRQ_CLOCK_Handler+0x64>
   1cce6:	2001      	movs	r0, #1
   1cce8:	6128      	str	r0, [r5, #16]
   1ccea:	2004      	movs	r0, #4
   1ccec:	72a0      	strb	r0, [r4, #10]
   1ccee:	e004      	b.n	1ccfa <MPSL_IRQ_CLOCK_Handler+0xb2>
   1ccf0:	2003      	movs	r0, #3
   1ccf2:	72a0      	strb	r0, [r4, #10]
   1ccf4:	2001      	movs	r0, #1
   1ccf6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   1ccfa:	2000      	movs	r0, #0
   1ccfc:	71e0      	strb	r0, [r4, #7]
   1ccfe:	bd70      	pop	{r4, r5, r6, pc}
   1cd00:	20000394 	.word	0x20000394
   1cd04:	b570      	push	{r4, r5, r6, lr}
   1cd06:	4c12      	ldr	r4, [pc, #72]	; (1cd50 <MPSL_IRQ_CLOCK_Handler+0x108>)
   1cd08:	79a0      	ldrb	r0, [r4, #6]
   1cd0a:	b1e0      	cbz	r0, 1cd46 <MPSL_IRQ_CLOCK_Handler+0xfe>
   1cd0c:	79e1      	ldrb	r1, [r4, #7]
   1cd0e:	1e40      	subs	r0, r0, #1
   1cd10:	4281      	cmp	r1, r0
   1cd12:	da18      	bge.n	1cd46 <MPSL_IRQ_CLOCK_Handler+0xfe>
   1cd14:	f000 fa9e 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1cd18:	4605      	mov	r5, r0
   1cd1a:	f000 fb87 	bl	1d42c <mpsl_temperature_get>
   1cd1e:	79a1      	ldrb	r1, [r4, #6]
   1cd20:	2901      	cmp	r1, #1
   1cd22:	d902      	bls.n	1cd2a <MPSL_IRQ_CLOCK_Handler+0xe2>
   1cd24:	79e1      	ldrb	r1, [r4, #7]
   1cd26:	1c49      	adds	r1, r1, #1
   1cd28:	71e1      	strb	r1, [r4, #7]
   1cd2a:	b10d      	cbz	r5, 1cd30 <MPSL_IRQ_CLOCK_Handler+0xe8>
   1cd2c:	6961      	ldr	r1, [r4, #20]
   1cd2e:	e000      	b.n	1cd32 <MPSL_IRQ_CLOCK_Handler+0xea>
   1cd30:	6921      	ldr	r1, [r4, #16]
   1cd32:	1a41      	subs	r1, r0, r1
   1cd34:	2902      	cmp	r1, #2
   1cd36:	da02      	bge.n	1cd3e <MPSL_IRQ_CLOCK_Handler+0xf6>
   1cd38:	f111 0f02 	cmn.w	r1, #2
   1cd3c:	dc07      	bgt.n	1cd4e <MPSL_IRQ_CLOCK_Handler+0x106>
   1cd3e:	b10d      	cbz	r5, 1cd44 <MPSL_IRQ_CLOCK_Handler+0xfc>
   1cd40:	6160      	str	r0, [r4, #20]
   1cd42:	e000      	b.n	1cd46 <MPSL_IRQ_CLOCK_Handler+0xfe>
   1cd44:	6120      	str	r0, [r4, #16]
   1cd46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cd4a:	f7ff bfc1 	b.w	1ccd0 <MPSL_IRQ_CLOCK_Handler+0x88>
   1cd4e:	bd70      	pop	{r4, r5, r6, pc}
   1cd50:	20000394 	.word	0x20000394
   1cd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd58:	4606      	mov	r6, r0
   1cd5a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1cd5e:	f44f 7186 	mov.w	r1, #268	; 0x10c
   1cd62:	4628      	mov	r0, r5
   1cd64:	f006 f86b 	bl	22e3e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
   1cd68:	4680      	mov	r8, r0
   1cd6a:	f44f 7188 	mov.w	r1, #272	; 0x110
   1cd6e:	4628      	mov	r0, r5
   1cd70:	f006 f865 	bl	22e3e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
   1cd74:	4c27      	ldr	r4, [pc, #156]	; (1ce14 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
   1cd76:	4682      	mov	sl, r0
   1cd78:	7827      	ldrb	r7, [r4, #0]
   1cd7a:	f104 0008 	add.w	r0, r4, #8
   1cd7e:	f006 f8d2 	bl	22f26 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   1cd82:	b110      	cbz	r0, 1cd8a <MPSL_IRQ_CLOCK_Handler+0x142>
   1cd84:	f44f 71db 	mov.w	r1, #438	; 0x1b6
   1cd88:	e016      	b.n	1cdb8 <MPSL_IRQ_CLOCK_Handler+0x170>
   1cd8a:	f04f 0901 	mov.w	r9, #1
   1cd8e:	b146      	cbz	r6, 1cda2 <MPSL_IRQ_CLOCK_Handler+0x15a>
   1cd90:	7aa0      	ldrb	r0, [r4, #10]
   1cd92:	2803      	cmp	r0, #3
   1cd94:	d105      	bne.n	1cda2 <MPSL_IRQ_CLOCK_Handler+0x15a>
   1cd96:	2004      	movs	r0, #4
   1cd98:	72a0      	strb	r0, [r4, #10]
   1cd9a:	f7ff ff87 	bl	1ccac <MPSL_IRQ_CLOCK_Handler+0x64>
   1cd9e:	f8c5 9010 	str.w	r9, [r5, #16]
   1cda2:	2600      	movs	r6, #0
   1cda4:	f1b8 0f00 	cmp.w	r8, #0
   1cda8:	d018      	beq.n	1cddc <MPSL_IRQ_CLOCK_Handler+0x194>
   1cdaa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
   1cdae:	7aa0      	ldrb	r0, [r4, #10]
   1cdb0:	2804      	cmp	r0, #4
   1cdb2:	d004      	beq.n	1cdbe <MPSL_IRQ_CLOCK_Handler+0x176>
   1cdb4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1cdb8:	206d      	movs	r0, #109	; 0x6d
   1cdba:	f000 fac3 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1cdbe:	f006 f8e8 	bl	22f92 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
   1cdc2:	b928      	cbnz	r0, 1cdd0 <MPSL_IRQ_CLOCK_Handler+0x188>
   1cdc4:	f006 f906 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1cdc8:	b910      	cbnz	r0, 1cdd0 <MPSL_IRQ_CLOCK_Handler+0x188>
   1cdca:	f006 f939 	bl	23040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1cdce:	b108      	cbz	r0, 1cdd4 <MPSL_IRQ_CLOCK_Handler+0x18c>
   1cdd0:	4811      	ldr	r0, [pc, #68]	; (1ce18 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
   1cdd2:	6006      	str	r6, [r0, #0]
   1cdd4:	2002      	movs	r0, #2
   1cdd6:	72a0      	strb	r0, [r4, #10]
   1cdd8:	f000 f8fc 	bl	1cfd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   1cddc:	f1ba 0f00 	cmp.w	sl, #0
   1cde0:	d008      	beq.n	1cdf4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
   1cde2:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   1cde6:	7aa0      	ldrb	r0, [r4, #10]
   1cde8:	2802      	cmp	r0, #2
   1cdea:	d101      	bne.n	1cdf0 <MPSL_IRQ_CLOCK_Handler+0x1a8>
   1cdec:	f7ff ff8a 	bl	1cd04 <MPSL_IRQ_CLOCK_Handler+0xbc>
   1cdf0:	f8c5 9014 	str.w	r9, [r5, #20]
   1cdf4:	b13f      	cbz	r7, 1ce06 <MPSL_IRQ_CLOCK_Handler+0x1be>
   1cdf6:	7026      	strb	r6, [r4, #0]
   1cdf8:	7aa0      	ldrb	r0, [r4, #10]
   1cdfa:	2802      	cmp	r0, #2
   1cdfc:	d101      	bne.n	1ce02 <MPSL_IRQ_CLOCK_Handler+0x1ba>
   1cdfe:	f7ff ff67 	bl	1ccd0 <MPSL_IRQ_CLOCK_Handler+0x88>
   1ce02:	f000 f8e7 	bl	1cfd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   1ce06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce0a:	4802      	ldr	r0, [pc, #8]	; (1ce14 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
   1ce0c:	3008      	adds	r0, #8
   1ce0e:	f006 b8a1 	b.w	22f54 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   1ce12:	0000      	.short	0x0000
   1ce14:	20000394 	.word	0x20000394
   1ce18:	40000c34 	.word	0x40000c34
   1ce1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce20:	4c49      	ldr	r4, [pc, #292]	; (1cf48 <MPSL_IRQ_CLOCK_Handler+0x300>)
   1ce22:	2700      	movs	r7, #0
   1ce24:	4606      	mov	r6, r0
   1ce26:	61a7      	str	r7, [r4, #24]
   1ce28:	7842      	ldrb	r2, [r0, #1]
   1ce2a:	7881      	ldrb	r1, [r0, #2]
   1ce2c:	7800      	ldrb	r0, [r0, #0]
   1ce2e:	72e0      	strb	r0, [r4, #11]
   1ce30:	7162      	strb	r2, [r4, #5]
   1ce32:	71a1      	strb	r1, [r4, #6]
   1ce34:	71e7      	strb	r7, [r4, #7]
   1ce36:	f04f 0801 	mov.w	r8, #1
   1ce3a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1ce3e:	2805      	cmp	r0, #5
   1ce40:	d225      	bcs.n	1ce8e <MPSL_IRQ_CLOCK_Handler+0x246>
   1ce42:	e8df f000 	tbb	[pc, r0]
   1ce46:	0310      	.short	0x0310
   1ce48:	00222006 	.word	0x00222006
   1ce4c:	f8c4 8018 	str.w	r8, [r4, #24]
   1ce50:	e009      	b.n	1ce66 <MPSL_IRQ_CLOCK_Handler+0x21e>
   1ce52:	f000 f8db 	bl	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1ce56:	2101      	movs	r1, #1
   1ce58:	4628      	mov	r0, r5
   1ce5a:	f005 fff5 	bl	22e48 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4a>
   1ce5e:	2800      	cmp	r0, #0
   1ce60:	d0f9      	beq.n	1ce56 <MPSL_IRQ_CLOCK_Handler+0x20e>
   1ce62:	2002      	movs	r0, #2
   1ce64:	61a0      	str	r0, [r4, #24]
   1ce66:	f006 f81b 	bl	22ea0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
   1ce6a:	b1c0      	cbz	r0, 1ce9e <MPSL_IRQ_CLOCK_Handler+0x256>
   1ce6c:	f000 fa0c 	bl	1d288 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
   1ce70:	7e21      	ldrb	r1, [r4, #24]
   1ce72:	f001 0103 	and.w	r1, r1, #3
   1ce76:	4288      	cmp	r0, r1
   1ce78:	d111      	bne.n	1ce9e <MPSL_IRQ_CLOCK_Handler+0x256>
   1ce7a:	79b0      	ldrb	r0, [r6, #6]
   1ce7c:	b160      	cbz	r0, 1ce98 <MPSL_IRQ_CLOCK_Handler+0x250>
   1ce7e:	2002      	movs	r0, #2
   1ce80:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   1ce84:	e044      	b.n	1cf10 <MPSL_IRQ_CLOCK_Handler+0x2c8>
   1ce86:	4831      	ldr	r0, [pc, #196]	; (1cf4c <MPSL_IRQ_CLOCK_Handler+0x304>)
   1ce88:	e7ec      	b.n	1ce64 <MPSL_IRQ_CLOCK_Handler+0x21c>
   1ce8a:	4831      	ldr	r0, [pc, #196]	; (1cf50 <MPSL_IRQ_CLOCK_Handler+0x308>)
   1ce8c:	e7ea      	b.n	1ce64 <MPSL_IRQ_CLOCK_Handler+0x21c>
   1ce8e:	f240 313d 	movw	r1, #829	; 0x33d
   1ce92:	206d      	movs	r0, #109	; 0x6d
   1ce94:	f000 fa56 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1ce98:	f000 f9ca 	bl	1d230 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   1ce9c:	e038      	b.n	1cf10 <MPSL_IRQ_CLOCK_Handler+0x2c8>
   1ce9e:	f8c5 800c 	str.w	r8, [r5, #12]
   1cea2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
   1cea6:	69a0      	ldr	r0, [r4, #24]
   1cea8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
   1ceac:	f006 f85d 	bl	22f6a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1ceb0:	b940      	cbnz	r0, 1cec4 <MPSL_IRQ_CLOCK_Handler+0x27c>
   1ceb2:	f006 f864 	bl	22f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1ceb6:	b928      	cbnz	r0, 1cec4 <MPSL_IRQ_CLOCK_Handler+0x27c>
   1ceb8:	f006 f878 	bl	22fac <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1cebc:	b910      	cbnz	r0, 1cec4 <MPSL_IRQ_CLOCK_Handler+0x27c>
   1cebe:	f006 f889 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1cec2:	b138      	cbz	r0, 1ced4 <MPSL_IRQ_CLOCK_Handler+0x28c>
   1cec4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1cec8:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
   1cecc:	4921      	ldr	r1, [pc, #132]	; (1cf54 <MPSL_IRQ_CLOCK_Handler+0x30c>)
   1cece:	f3c0 3042 	ubfx	r0, r0, #13, #3
   1ced2:	6008      	str	r0, [r1, #0]
   1ced4:	f006 f849 	bl	22f6a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1ced8:	b940      	cbnz	r0, 1ceec <MPSL_IRQ_CLOCK_Handler+0x2a4>
   1ceda:	f006 f850 	bl	22f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1cede:	b928      	cbnz	r0, 1ceec <MPSL_IRQ_CLOCK_Handler+0x2a4>
   1cee0:	f006 f864 	bl	22fac <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1cee4:	b910      	cbnz	r0, 1ceec <MPSL_IRQ_CLOCK_Handler+0x2a4>
   1cee6:	f006 f875 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1ceea:	b118      	cbz	r0, 1cef4 <MPSL_IRQ_CLOCK_Handler+0x2ac>
   1ceec:	4919      	ldr	r1, [pc, #100]	; (1cf54 <MPSL_IRQ_CLOCK_Handler+0x30c>)
   1ceee:	3110      	adds	r1, #16
   1cef0:	f8c1 8000 	str.w	r8, [r1]
   1cef4:	f8c5 8008 	str.w	r8, [r5, #8]
   1cef8:	2002      	movs	r0, #2
   1cefa:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   1cefe:	79b0      	ldrb	r0, [r6, #6]
   1cf00:	b930      	cbnz	r0, 1cf10 <MPSL_IRQ_CLOCK_Handler+0x2c8>
   1cf02:	f000 f829 	bl	1cf58 <MPSL_IRQ_CLOCK_Handler+0x310>
   1cf06:	2002      	movs	r0, #2
   1cf08:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   1cf0c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
   1cf10:	79a0      	ldrb	r0, [r4, #6]
   1cf12:	b170      	cbz	r0, 1cf32 <MPSL_IRQ_CLOCK_Handler+0x2ea>
   1cf14:	7830      	ldrb	r0, [r6, #0]
   1cf16:	b960      	cbnz	r0, 1cf32 <MPSL_IRQ_CLOCK_Handler+0x2ea>
   1cf18:	f000 f99c 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1cf1c:	4606      	mov	r6, r0
   1cf1e:	f000 fa85 	bl	1d42c <mpsl_temperature_get>
   1cf22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cf26:	b116      	cbz	r6, 1cf2e <MPSL_IRQ_CLOCK_Handler+0x2e6>
   1cf28:	e9c4 1004 	strd	r1, r0, [r4, #16]
   1cf2c:	e001      	b.n	1cf32 <MPSL_IRQ_CLOCK_Handler+0x2ea>
   1cf2e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1cf32:	2101      	movs	r1, #1
   1cf34:	4628      	mov	r0, r5
   1cf36:	f005 ff87 	bl	22e48 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4a>
   1cf3a:	b108      	cbz	r0, 1cf40 <MPSL_IRQ_CLOCK_Handler+0x2f8>
   1cf3c:	f000 f984 	bl	1d248 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   1cf40:	72a7      	strb	r7, [r4, #10]
   1cf42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cf46:	0000      	.short	0x0000
   1cf48:	20000394 	.word	0x20000394
   1cf4c:	00020001 	.word	0x00020001
   1cf50:	00030001 	.word	0x00030001
   1cf54:	4000053c 	.word	0x4000053c
   1cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf5c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1cf60:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1cf64:	f010 0f02 	tst.w	r0, #2
   1cf68:	d011      	beq.n	1cf8e <MPSL_IRQ_CLOCK_Handler+0x346>
   1cf6a:	4c16      	ldr	r4, [pc, #88]	; (1cfc4 <MPSL_IRQ_CLOCK_Handler+0x37c>)
   1cf6c:	6820      	ldr	r0, [r4, #0]
   1cf6e:	43c0      	mvns	r0, r0
   1cf70:	f340 1600 	sbfx	r6, r0, #4, #1
   1cf74:	6820      	ldr	r0, [r4, #0]
   1cf76:	f040 0010 	orr.w	r0, r0, #16
   1cf7a:	6020      	str	r0, [r4, #0]
   1cf7c:	f44f 7782 	mov.w	r7, #260	; 0x104
   1cf80:	4639      	mov	r1, r7
   1cf82:	4628      	mov	r0, r5
   1cf84:	1c76      	adds	r6, r6, #1
   1cf86:	f005 ff5a 	bl	22e3e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
   1cf8a:	b128      	cbz	r0, 1cf98 <MPSL_IRQ_CLOCK_Handler+0x350>
   1cf8c:	e00a      	b.n	1cfa4 <MPSL_IRQ_CLOCK_Handler+0x35c>
   1cf8e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
   1cf92:	206d      	movs	r0, #109	; 0x6d
   1cf94:	f000 f9d6 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1cf98:	f006 f85e 	bl	23058 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
   1cf9c:	e002      	b.n	1cfa4 <MPSL_IRQ_CLOCK_Handler+0x35c>
   1cf9e:	bf00      	nop
   1cfa0:	f006 f858 	bl	23054 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   1cfa4:	4639      	mov	r1, r7
   1cfa6:	4628      	mov	r0, r5
   1cfa8:	f005 ff49 	bl	22e3e <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x40>
   1cfac:	2800      	cmp	r0, #0
   1cfae:	d0f7      	beq.n	1cfa0 <MPSL_IRQ_CLOCK_Handler+0x358>
   1cfb0:	f000 f93e 	bl	1d230 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   1cfb4:	2e00      	cmp	r6, #0
   1cfb6:	d103      	bne.n	1cfc0 <MPSL_IRQ_CLOCK_Handler+0x378>
   1cfb8:	6820      	ldr	r0, [r4, #0]
   1cfba:	f020 0010 	bic.w	r0, r0, #16
   1cfbe:	6020      	str	r0, [r4, #0]
   1cfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cfc4:	e000ed10 	.word	0xe000ed10

0001cfc8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
   1cfc8:	4801      	ldr	r0, [pc, #4]	; (1cfd0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
   1cfca:	89c0      	ldrh	r0, [r0, #14]
   1cfcc:	4770      	bx	lr
   1cfce:	0000      	.short	0x0000
   1cfd0:	20000394 	.word	0x20000394

0001cfd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
   1cfd4:	b510      	push	{r4, lr}
   1cfd6:	f3ef 8410 	mrs	r4, PRIMASK
   1cfda:	b672      	cpsid	i
   1cfdc:	480a      	ldr	r0, [pc, #40]	; (1d008 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
   1cfde:	7841      	ldrb	r1, [r0, #1]
   1cfe0:	b129      	cbz	r1, 1cfee <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
   1cfe2:	7841      	ldrb	r1, [r0, #1]
   1cfe4:	1e49      	subs	r1, r1, #1
   1cfe6:	7041      	strb	r1, [r0, #1]
   1cfe8:	7841      	ldrb	r1, [r0, #1]
   1cfea:	b129      	cbz	r1, 1cff8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
   1cfec:	e008      	b.n	1d000 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   1cfee:	f240 1119 	movw	r1, #281	; 0x119
   1cff2:	206d      	movs	r0, #109	; 0x6d
   1cff4:	f000 f9a6 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1cff8:	7880      	ldrb	r0, [r0, #2]
   1cffa:	b908      	cbnz	r0, 1d000 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   1cffc:	f000 f938 	bl	1d270 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   1d000:	2c00      	cmp	r4, #0
   1d002:	d100      	bne.n	1d006 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
   1d004:	b662      	cpsie	i
   1d006:	bd10      	pop	{r4, pc}
   1d008:	20000394 	.word	0x20000394

0001d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
   1d00c:	b510      	push	{r4, lr}
   1d00e:	f3ef 8410 	mrs	r4, PRIMASK
   1d012:	b672      	cpsid	i
   1d014:	4806      	ldr	r0, [pc, #24]	; (1d030 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
   1d016:	7841      	ldrb	r1, [r0, #1]
   1d018:	1c49      	adds	r1, r1, #1
   1d01a:	7041      	strb	r1, [r0, #1]
   1d01c:	7840      	ldrb	r0, [r0, #1]
   1d01e:	2801      	cmp	r0, #1
   1d020:	d101      	bne.n	1d026 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
   1d022:	f005 ff28 	bl	22e76 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
   1d026:	2c00      	cmp	r4, #0
   1d028:	d100      	bne.n	1d02c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
   1d02a:	b662      	cpsie	i
   1d02c:	bd10      	pop	{r4, pc}
   1d02e:	0000      	.short	0x0000
   1d030:	20000394 	.word	0x20000394

0001d034 <mpsl_clock_hfclk_release>:
   1d034:	4805      	ldr	r0, [pc, #20]	; (1d04c <mpsl_clock_hfclk_release+0x18>)
   1d036:	b510      	push	{r4, lr}
   1d038:	78c1      	ldrb	r1, [r0, #3]
   1d03a:	b121      	cbz	r1, 1d046 <mpsl_clock_hfclk_release+0x12>
   1d03c:	2100      	movs	r1, #0
   1d03e:	7101      	strb	r1, [r0, #4]
   1d040:	70c1      	strb	r1, [r0, #3]
   1d042:	f7ff ffc7 	bl	1cfd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   1d046:	2000      	movs	r0, #0
   1d048:	bd10      	pop	{r4, pc}
   1d04a:	0000      	.short	0x0000
   1d04c:	20000394 	.word	0x20000394

0001d050 <mpsl_clock_hfclk_request>:
   1d050:	b570      	push	{r4, r5, r6, lr}
   1d052:	4c0c      	ldr	r4, [pc, #48]	; (1d084 <mpsl_clock_hfclk_request+0x34>)
   1d054:	78e1      	ldrb	r1, [r4, #3]
   1d056:	b961      	cbnz	r1, 1d072 <mpsl_clock_hfclk_request+0x22>
   1d058:	2501      	movs	r5, #1
   1d05a:	70e5      	strb	r5, [r4, #3]
   1d05c:	61e0      	str	r0, [r4, #28]
   1d05e:	f7ff ffd5 	bl	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1d062:	f000 f8f7 	bl	1d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   1d066:	b130      	cbz	r0, 1d076 <mpsl_clock_hfclk_request+0x26>
   1d068:	69e0      	ldr	r0, [r4, #28]
   1d06a:	b110      	cbz	r0, 1d072 <mpsl_clock_hfclk_request+0x22>
   1d06c:	4780      	blx	r0
   1d06e:	2000      	movs	r0, #0
   1d070:	61e0      	str	r0, [r4, #28]
   1d072:	2000      	movs	r0, #0
   1d074:	bd70      	pop	{r4, r5, r6, pc}
   1d076:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1d07a:	7125      	strb	r5, [r4, #4]
   1d07c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
   1d080:	e7f7      	b.n	1d072 <mpsl_clock_hfclk_request+0x22>
   1d082:	0000      	.short	0x0000
   1d084:	20000394 	.word	0x20000394

0001d088 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
   1d088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d08c:	0005      	movs	r5, r0
   1d08e:	f06f 0015 	mvn.w	r0, #21
   1d092:	d03f      	beq.n	1d114 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   1d094:	7829      	ldrb	r1, [r5, #0]
   1d096:	2904      	cmp	r1, #4
   1d098:	d83c      	bhi.n	1d114 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   1d09a:	2900      	cmp	r1, #0
   1d09c:	7869      	ldrb	r1, [r5, #1]
   1d09e:	d03b      	beq.n	1d118 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
   1d0a0:	2900      	cmp	r1, #0
   1d0a2:	d137      	bne.n	1d114 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   1d0a4:	78a9      	ldrb	r1, [r5, #2]
   1d0a6:	2900      	cmp	r1, #0
   1d0a8:	d134      	bne.n	1d114 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   1d0aa:	2000      	movs	r0, #0
   1d0ac:	f005 feb6 	bl	22e1c <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1e>
   1d0b0:	2000      	movs	r0, #0
   1d0b2:	f005 fea6 	bl	22e02 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
   1d0b6:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   1d0ba:	f04f 31ff 	mov.w	r1, #4294967295
   1d0be:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
   1d0c2:	2600      	movs	r6, #0
   1d0c4:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
   1d0c8:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
   1d0cc:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
   1d0d0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
   1d0d4:	4c14      	ldr	r4, [pc, #80]	; (1d128 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
   1d0d6:	7066      	strb	r6, [r4, #1]
   1d0d8:	88a8      	ldrh	r0, [r5, #4]
   1d0da:	81a0      	strh	r0, [r4, #12]
   1d0dc:	f005 fec2 	bl	22e64 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
   1d0e0:	2701      	movs	r7, #1
   1d0e2:	b108      	cbz	r0, 1d0e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
   1d0e4:	70e7      	strb	r7, [r4, #3]
   1d0e6:	7067      	strb	r7, [r4, #1]
   1d0e8:	2101      	movs	r1, #1
   1d0ea:	4640      	mov	r0, r8
   1d0ec:	f005 feac 	bl	22e48 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4a>
   1d0f0:	b108      	cbz	r0, 1d0f6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
   1d0f2:	f000 f8a9 	bl	1d248 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   1d0f6:	f240 50f5 	movw	r0, #1525	; 0x5f5
   1d0fa:	81e0      	strh	r0, [r4, #14]
   1d0fc:	4628      	mov	r0, r5
   1d0fe:	f7ff fe8d 	bl	1ce1c <MPSL_IRQ_CLOCK_Handler+0x1d4>
   1d102:	7267      	strb	r7, [r4, #9]
   1d104:	2000      	movs	r0, #0
   1d106:	f005 fe7c 	bl	22e02 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x4>
   1d10a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1d10e:	4630      	mov	r0, r6
   1d110:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
   1d114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d118:	2900      	cmp	r1, #0
   1d11a:	d0fb      	beq.n	1d114 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   1d11c:	2920      	cmp	r1, #32
   1d11e:	d8f9      	bhi.n	1d114 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   1d120:	78a9      	ldrb	r1, [r5, #2]
   1d122:	2921      	cmp	r1, #33	; 0x21
   1d124:	d9c1      	bls.n	1d0aa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
   1d126:	e7f5      	b.n	1d114 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   1d128:	20000394 	.word	0x20000394

0001d12c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
   1d12c:	4801      	ldr	r0, [pc, #4]	; (1d134 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
   1d12e:	8980      	ldrh	r0, [r0, #12]
   1d130:	4770      	bx	lr
   1d132:	0000      	.short	0x0000
   1d134:	20000394 	.word	0x20000394

0001d138 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
   1d138:	b510      	push	{r4, lr}
   1d13a:	480d      	ldr	r0, [pc, #52]	; (1d170 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   1d13c:	f005 fef3 	bl	22f26 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   1d140:	490b      	ldr	r1, [pc, #44]	; (1d170 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   1d142:	3908      	subs	r1, #8
   1d144:	b148      	cbz	r0, 1d15a <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
   1d146:	2001      	movs	r0, #1
   1d148:	7008      	strb	r0, [r1, #0]
   1d14a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1d14e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1d152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d156:	f7ff bf59 	b.w	1d00c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   1d15a:	7a88      	ldrb	r0, [r1, #10]
   1d15c:	2802      	cmp	r0, #2
   1d15e:	d101      	bne.n	1d164 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
   1d160:	f7ff fdb6 	bl	1ccd0 <MPSL_IRQ_CLOCK_Handler+0x88>
   1d164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d168:	4801      	ldr	r0, [pc, #4]	; (1d170 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   1d16a:	f005 bef3 	b.w	22f54 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   1d16e:	0000      	.short	0x0000
   1d170:	2000039c 	.word	0x2000039c

0001d174 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
   1d174:	4802      	ldr	r0, [pc, #8]	; (1d180 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
   1d176:	7a80      	ldrb	r0, [r0, #10]
   1d178:	2800      	cmp	r0, #0
   1d17a:	d000      	beq.n	1d17e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
   1d17c:	2001      	movs	r0, #1
   1d17e:	4770      	bx	lr
   1d180:	20000394 	.word	0x20000394

0001d184 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
   1d184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d186:	4d1f      	ldr	r5, [pc, #124]	; (1d204 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   1d188:	7ae8      	ldrb	r0, [r5, #11]
   1d18a:	2800      	cmp	r0, #0
   1d18c:	d10f      	bne.n	1d1ae <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   1d18e:	7e28      	ldrb	r0, [r5, #24]
   1d190:	f000 0003 	and.w	r0, r0, #3
   1d194:	f005 fe74 	bl	22e80 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   1d198:	2800      	cmp	r0, #0
   1d19a:	d008      	beq.n	1d1ae <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   1d19c:	f3ef 8110 	mrs	r1, PRIMASK
   1d1a0:	b672      	cpsid	i
   1d1a2:	f7ff ffe7 	bl	1d174 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   1d1a6:	b118      	cbz	r0, 1d1b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
   1d1a8:	2900      	cmp	r1, #0
   1d1aa:	d100      	bne.n	1d1ae <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   1d1ac:	b662      	cpsie	i
   1d1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d1b0:	2601      	movs	r6, #1
   1d1b2:	72ae      	strb	r6, [r5, #10]
   1d1b4:	b901      	cbnz	r1, 1d1b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
   1d1b6:	b662      	cpsie	i
   1d1b8:	2018      	movs	r0, #24
   1d1ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1d1be:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   1d1c2:	61a6      	str	r6, [r4, #24]
   1d1c4:	f44f 7020 	mov.w	r0, #640	; 0x280
   1d1c8:	f8ad 0000 	strh.w	r0, [sp]
   1d1cc:	f8bd 0000 	ldrh.w	r0, [sp]
   1d1d0:	1e41      	subs	r1, r0, #1
   1d1d2:	f8ad 1000 	strh.w	r1, [sp]
   1d1d6:	d2f9      	bcs.n	1d1cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
   1d1d8:	2700      	movs	r7, #0
   1d1da:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
   1d1de:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   1d1e2:	4808      	ldr	r0, [pc, #32]	; (1d204 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   1d1e4:	3008      	adds	r0, #8
   1d1e6:	f005 feb1 	bl	22f4c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   1d1ea:	702f      	strb	r7, [r5, #0]
   1d1ec:	f7ff fd70 	bl	1ccd0 <MPSL_IRQ_CLOCK_Handler+0x88>
   1d1f0:	6166      	str	r6, [r4, #20]
   1d1f2:	7968      	ldrb	r0, [r5, #5]
   1d1f4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1d1f8:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   1d1fc:	2018      	movs	r0, #24
   1d1fe:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   1d202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d204:	20000394 	.word	0x20000394

0001d208 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
   1d208:	4602      	mov	r2, r0
   1d20a:	b510      	push	{r4, lr}
   1d20c:	2000      	movs	r0, #0
   1d20e:	2900      	cmp	r1, #0
   1d210:	d00a      	beq.n	1d228 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
   1d212:	2a00      	cmp	r2, #0
   1d214:	d008      	beq.n	1d228 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
   1d216:	fba2 0101 	umull	r0, r1, r2, r1
   1d21a:	1e40      	subs	r0, r0, #1
   1d21c:	4a03      	ldr	r2, [pc, #12]	; (1d22c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
   1d21e:	f141 31ff 	adc.w	r1, r1, #4294967295
   1d222:	f005 ff1b 	bl	2305c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   1d226:	1c40      	adds	r0, r0, #1
   1d228:	bd10      	pop	{r4, pc}
   1d22a:	0000      	.short	0x0000
   1d22c:	000f4240 	.word	0x000f4240

0001d230 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
   1d230:	b510      	push	{r4, lr}
   1d232:	4c04      	ldr	r4, [pc, #16]	; (1d244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
   1d234:	7e20      	ldrb	r0, [r4, #24]
   1d236:	f000 0003 	and.w	r0, r0, #3
   1d23a:	f005 fe21 	bl	22e80 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   1d23e:	2800      	cmp	r0, #0
   1d240:	d0f8      	beq.n	1d234 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
   1d242:	bd10      	pop	{r4, pc}
   1d244:	20000394 	.word	0x20000394

0001d248 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
   1d248:	4901      	ldr	r1, [pc, #4]	; (1d250 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
   1d24a:	2001      	movs	r0, #1
   1d24c:	7008      	strb	r0, [r1, #0]
   1d24e:	4770      	bx	lr
   1d250:	20000436 	.word	0x20000436

0001d254 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
   1d254:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1d258:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1d25c:	b918      	cbnz	r0, 1d266 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
   1d25e:	4803      	ldr	r0, [pc, #12]	; (1d26c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
   1d260:	7800      	ldrb	r0, [r0, #0]
   1d262:	2800      	cmp	r0, #0
   1d264:	d000      	beq.n	1d268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
   1d266:	2001      	movs	r0, #1
   1d268:	4770      	bx	lr
   1d26a:	0000      	.short	0x0000
   1d26c:	20000436 	.word	0x20000436

0001d270 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
   1d270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1d274:	2101      	movs	r1, #1
   1d276:	6041      	str	r1, [r0, #4]
   1d278:	2100      	movs	r1, #0
   1d27a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   1d27e:	4801      	ldr	r0, [pc, #4]	; (1d284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
   1d280:	7001      	strb	r1, [r0, #0]
   1d282:	4770      	bx	lr
   1d284:	20000436 	.word	0x20000436

0001d288 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
   1d288:	4802      	ldr	r0, [pc, #8]	; (1d294 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
   1d28a:	6800      	ldr	r0, [r0, #0]
   1d28c:	f000 0003 	and.w	r0, r0, #3
   1d290:	4770      	bx	lr
   1d292:	0000      	.short	0x0000
   1d294:	4000041c 	.word	0x4000041c
   1d298:	b510      	push	{r4, lr}
   1d29a:	b131      	cbz	r1, 1d2aa <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
   1d29c:	2901      	cmp	r1, #1
   1d29e:	d007      	beq.n	1d2b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
   1d2a0:	f240 3102 	movw	r1, #770	; 0x302
   1d2a4:	a005      	add	r0, pc, #20	; (adr r0, 1d2bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
   1d2a6:	f000 f821 	bl	1d2ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   1d2aa:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
   1d2ae:	e001      	b.n	1d2b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
   1d2b0:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
   1d2b4:	f000 0001 	and.w	r0, r0, #1
   1d2b8:	bd10      	pop	{r4, pc}
   1d2ba:	0000      	.short	0x0000
   1d2bc:	5f66726e 	.word	0x5f66726e
   1d2c0:	636f6c63 	.word	0x636f6c63
   1d2c4:	00682e6b 	.word	0x00682e6b
   1d2c8:	f3bf 8f4f 	dsb	sy
   1d2cc:	4805      	ldr	r0, [pc, #20]	; (1d2e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
   1d2ce:	6801      	ldr	r1, [r0, #0]
   1d2d0:	4a05      	ldr	r2, [pc, #20]	; (1d2e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
   1d2d2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   1d2d6:	4311      	orrs	r1, r2
   1d2d8:	6001      	str	r1, [r0, #0]
   1d2da:	f3bf 8f4f 	dsb	sy
   1d2de:	bf00      	nop
   1d2e0:	e7fd      	b.n	1d2de <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
   1d2e2:	0000      	.short	0x0000
   1d2e4:	e000ed0c 	.word	0xe000ed0c
   1d2e8:	05fa0004 	.word	0x05fa0004

0001d2ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
   1d2ec:	b672      	cpsid	i
   1d2ee:	4a03      	ldr	r2, [pc, #12]	; (1d2fc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
   1d2f0:	6852      	ldr	r2, [r2, #4]
   1d2f2:	b102      	cbz	r2, 1d2f6 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
   1d2f4:	4790      	blx	r2
   1d2f6:	f7ff ffe7 	bl	1d2c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   1d2fa:	0000      	.short	0x0000
   1d2fc:	200003b4 	.word	0x200003b4
   1d300:	4806      	ldr	r0, [pc, #24]	; (1d31c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
   1d302:	b510      	push	{r4, lr}
   1d304:	2100      	movs	r1, #0
   1d306:	6001      	str	r1, [r0, #0]
   1d308:	2101      	movs	r1, #1
   1d30a:	6001      	str	r1, [r0, #0]
   1d30c:	4608      	mov	r0, r1
   1d30e:	f005 fdde 	bl	22ece <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   1d312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d316:	2001      	movs	r0, #1
   1d318:	f005 bdcc 	b.w	22eb4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   1d31c:	40001ffc 	.word	0x40001ffc
   1d320:	4807      	ldr	r0, [pc, #28]	; (1d340 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
   1d322:	b510      	push	{r4, lr}
   1d324:	2101      	movs	r1, #1
   1d326:	6041      	str	r1, [r0, #4]
   1d328:	1e89      	subs	r1, r1, #2
   1d32a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   1d32e:	200c      	movs	r0, #12
   1d330:	f005 fdcd 	bl	22ece <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   1d334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d338:	200c      	movs	r0, #12
   1d33a:	f005 bdbb 	b.w	22eb4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   1d33e:	0000      	.short	0x0000
   1d340:	4000c000 	.word	0x4000c000

0001d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
   1d344:	b50e      	push	{r1, r2, r3, lr}
   1d346:	b672      	cpsid	i
   1d348:	4a0f      	ldr	r2, [pc, #60]	; (1d388 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
   1d34a:	6855      	ldr	r5, [r2, #4]
   1d34c:	b1d5      	cbz	r5, 1d384 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
   1d34e:	2200      	movs	r2, #0
   1d350:	4603      	mov	r3, r0
   1d352:	466e      	mov	r6, sp
   1d354:	240a      	movs	r4, #10
   1d356:	e003      	b.n	1d360 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
   1d358:	fbb0 f0f4 	udiv	r0, r0, r4
   1d35c:	1c52      	adds	r2, r2, #1
   1d35e:	b2d2      	uxtb	r2, r2
   1d360:	2800      	cmp	r0, #0
   1d362:	d1f9      	bne.n	1d358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
   1d364:	54b0      	strb	r0, [r6, r2]
   1d366:	e009      	b.n	1d37c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
   1d368:	fbb3 f0f4 	udiv	r0, r3, r4
   1d36c:	fb04 3010 	mls	r0, r4, r0, r3
   1d370:	fbb3 f3f4 	udiv	r3, r3, r4
   1d374:	1e52      	subs	r2, r2, #1
   1d376:	b2d2      	uxtb	r2, r2
   1d378:	3030      	adds	r0, #48	; 0x30
   1d37a:	54b0      	strb	r0, [r6, r2]
   1d37c:	2a00      	cmp	r2, #0
   1d37e:	d1f3      	bne.n	1d368 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
   1d380:	4630      	mov	r0, r6
   1d382:	47a8      	blx	r5
   1d384:	f7ff ffa0 	bl	1d2c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   1d388:	200003b4 	.word	0x200003b4

0001d38c <mpsl_init>:
   1d38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d390:	4c18      	ldr	r4, [pc, #96]	; (1d3f4 <mpsl_init+0x68>)
   1d392:	4606      	mov	r6, r0
   1d394:	4617      	mov	r7, r2
   1d396:	7860      	ldrb	r0, [r4, #1]
   1d398:	460d      	mov	r5, r1
   1d39a:	b118      	cbz	r0, 1d3a4 <mpsl_init+0x18>
   1d39c:	f04f 30ff 	mov.w	r0, #4294967295
   1d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d3a4:	f7fc fa14 	bl	197d0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
   1d3a8:	b906      	cbnz	r6, 1d3ac <mpsl_init+0x20>
   1d3aa:	4e13      	ldr	r6, [pc, #76]	; (1d3f8 <mpsl_init+0x6c>)
   1d3ac:	6067      	str	r7, [r4, #4]
   1d3ae:	7025      	strb	r5, [r4, #0]
   1d3b0:	f7ff ffa6 	bl	1d300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
   1d3b4:	f7ff ffb4 	bl	1d320 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
   1d3b8:	4630      	mov	r0, r6
   1d3ba:	f7ff fe65 	bl	1d088 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
   1d3be:	0006      	movs	r6, r0
   1d3c0:	d1ee      	bne.n	1d3a0 <mpsl_init+0x14>
   1d3c2:	f7fe fe0d 	bl	1bfe0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
   1d3c6:	f7ff fedd 	bl	1d184 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   1d3ca:	f005 fc63 	bl	22c94 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
   1d3ce:	4628      	mov	r0, r5
   1d3d0:	f005 fd70 	bl	22eb4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   1d3d4:	2001      	movs	r0, #1
   1d3d6:	2d00      	cmp	r5, #0
   1d3d8:	db09      	blt.n	1d3ee <mpsl_init+0x62>
   1d3da:	f005 011f 	and.w	r1, r5, #31
   1d3de:	fa00 f101 	lsl.w	r1, r0, r1
   1d3e2:	096a      	lsrs	r2, r5, #5
   1d3e4:	0092      	lsls	r2, r2, #2
   1d3e6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   1d3ea:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   1d3ee:	7060      	strb	r0, [r4, #1]
   1d3f0:	4630      	mov	r0, r6
   1d3f2:	e7d5      	b.n	1d3a0 <mpsl_init+0x14>
   1d3f4:	200003b4 	.word	0x200003b4
   1d3f8:	00022ef0 	.word	0x00022ef0

0001d3fc <mpsl_is_initialized>:
   1d3fc:	4801      	ldr	r0, [pc, #4]	; (1d404 <mpsl_is_initialized+0x8>)
   1d3fe:	7840      	ldrb	r0, [r0, #1]
   1d400:	4770      	bx	lr
   1d402:	0000      	.short	0x0000
   1d404:	200003b4 	.word	0x200003b4

0001d408 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
   1d408:	4807      	ldr	r0, [pc, #28]	; (1d428 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
   1d40a:	f990 0000 	ldrsb.w	r0, [r0]
   1d40e:	2800      	cmp	r0, #0
   1d410:	db09      	blt.n	1d426 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
   1d412:	f000 021f 	and.w	r2, r0, #31
   1d416:	2101      	movs	r1, #1
   1d418:	4091      	lsls	r1, r2
   1d41a:	0940      	lsrs	r0, r0, #5
   1d41c:	0080      	lsls	r0, r0, #2
   1d41e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1d422:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   1d426:	4770      	bx	lr
   1d428:	200003b4 	.word	0x200003b4

0001d42c <mpsl_temperature_get>:
   1d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d430:	2601      	movs	r6, #1
   1d432:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1d436:	0331      	lsls	r1, r6, #12
   1d438:	f04f 0800 	mov.w	r8, #0
   1d43c:	4640      	mov	r0, r8
   1d43e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   1d442:	f3bf 8f4f 	dsb	sy
   1d446:	f3bf 8f6f 	isb	sy
   1d44a:	4c16      	ldr	r4, [pc, #88]	; (1d4a4 <mpsl_temperature_get+0x78>)
   1d44c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1d450:	200c      	movs	r0, #12
   1d452:	f005 fd5b 	bl	22f0c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   1d456:	4d14      	ldr	r5, [pc, #80]	; (1d4a8 <mpsl_temperature_get+0x7c>)
   1d458:	6828      	ldr	r0, [r5, #0]
   1d45a:	43c0      	mvns	r0, r0
   1d45c:	f340 1700 	sbfx	r7, r0, #4, #1
   1d460:	6828      	ldr	r0, [r5, #0]
   1d462:	f040 0010 	orr.w	r0, r0, #16
   1d466:	6028      	str	r0, [r5, #0]
   1d468:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1d46c:	6026      	str	r6, [r4, #0]
   1d46e:	1c7f      	adds	r7, r7, #1
   1d470:	e002      	b.n	1d478 <mpsl_temperature_get+0x4c>
   1d472:	bf00      	nop
   1d474:	f005 fdee 	bl	23054 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   1d478:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   1d47c:	2800      	cmp	r0, #0
   1d47e:	d0f9      	beq.n	1d474 <mpsl_temperature_get+0x48>
   1d480:	b91f      	cbnz	r7, 1d48a <mpsl_temperature_get+0x5e>
   1d482:	6828      	ldr	r0, [r5, #0]
   1d484:	f020 0010 	bic.w	r0, r0, #16
   1d488:	6028      	str	r0, [r5, #0]
   1d48a:	4808      	ldr	r0, [pc, #32]	; (1d4ac <mpsl_temperature_get+0x80>)
   1d48c:	6805      	ldr	r5, [r0, #0]
   1d48e:	6066      	str	r6, [r4, #4]
   1d490:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   1d494:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   1d498:	200c      	movs	r0, #12
   1d49a:	f005 fd37 	bl	22f0c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   1d49e:	4628      	mov	r0, r5
   1d4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d4a4:	4000c000 	.word	0x4000c000
   1d4a8:	e000ed10 	.word	0xe000ed10
   1d4ac:	4000c508 	.word	0x4000c508

0001d4b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
   1d4b0:	b510      	push	{r4, lr}
   1d4b2:	4602      	mov	r2, r0
   1d4b4:	2005      	movs	r0, #5
   1d4b6:	490c      	ldr	r1, [pc, #48]	; (1d4e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
   1d4b8:	e004      	b.n	1d4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
   1d4ba:	bf00      	nop
   1d4bc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   1d4c0:	791b      	ldrb	r3, [r3, #4]
   1d4c2:	b133      	cbz	r3, 1d4d2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
   1d4c4:	1e40      	subs	r0, r0, #1
   1d4c6:	b2c0      	uxtb	r0, r0
   1d4c8:	d2f8      	bcs.n	1d4bc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
   1d4ca:	2148      	movs	r1, #72	; 0x48
   1d4cc:	2069      	movs	r0, #105	; 0x69
   1d4ce:	f7ff ff39 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1d4d2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
   1d4d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1d4da:	2200      	movs	r2, #0
   1d4dc:	714a      	strb	r2, [r1, #5]
   1d4de:	718a      	strb	r2, [r1, #6]
   1d4e0:	2201      	movs	r2, #1
   1d4e2:	710a      	strb	r2, [r1, #4]
   1d4e4:	bd10      	pop	{r4, pc}
   1d4e6:	0000      	.short	0x0000
   1d4e8:	20001654 	.word	0x20001654

0001d4ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
   1d4ec:	b510      	push	{r4, lr}
   1d4ee:	2805      	cmp	r0, #5
   1d4f0:	d301      	bcc.n	1d4f6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
   1d4f2:	2158      	movs	r1, #88	; 0x58
   1d4f4:	e006      	b.n	1d504 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
   1d4f6:	490a      	ldr	r1, [pc, #40]	; (1d520 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
   1d4f8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   1d4fc:	7901      	ldrb	r1, [r0, #4]
   1d4fe:	2901      	cmp	r1, #1
   1d500:	d003      	beq.n	1d50a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
   1d502:	2159      	movs	r1, #89	; 0x59
   1d504:	2069      	movs	r0, #105	; 0x69
   1d506:	f7ff ff1d 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1d50a:	7941      	ldrb	r1, [r0, #5]
   1d50c:	7982      	ldrb	r2, [r0, #6]
   1d50e:	1c49      	adds	r1, r1, #1
   1d510:	b2c9      	uxtb	r1, r1
   1d512:	428a      	cmp	r2, r1
   1d514:	d000      	beq.n	1d518 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
   1d516:	7141      	strb	r1, [r0, #5]
   1d518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d51c:	f7ff bf74 	b.w	1d408 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
   1d520:	20001654 	.word	0x20001654

0001d524 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
   1d524:	b510      	push	{r4, lr}
   1d526:	2805      	cmp	r0, #5
   1d528:	d303      	bcc.n	1d532 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
   1d52a:	214f      	movs	r1, #79	; 0x4f
   1d52c:	2069      	movs	r0, #105	; 0x69
   1d52e:	f7ff ff09 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1d532:	4a03      	ldr	r2, [pc, #12]	; (1d540 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
   1d534:	2100      	movs	r1, #0
   1d536:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   1d53a:	7101      	strb	r1, [r0, #4]
   1d53c:	bd10      	pop	{r4, pc}
   1d53e:	0000      	.short	0x0000
   1d540:	20001654 	.word	0x20001654

0001d544 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
   1d544:	b570      	push	{r4, r5, r6, lr}
   1d546:	2505      	movs	r5, #5
   1d548:	4e0e      	ldr	r6, [pc, #56]	; (1d584 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
   1d54a:	4c0f      	ldr	r4, [pc, #60]	; (1d588 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
   1d54c:	e016      	b.n	1d57c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   1d54e:	7821      	ldrb	r1, [r4, #0]
   1d550:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   1d554:	7902      	ldrb	r2, [r0, #4]
   1d556:	2a01      	cmp	r2, #1
   1d558:	d108      	bne.n	1d56c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   1d55a:	7942      	ldrb	r2, [r0, #5]
   1d55c:	7983      	ldrb	r3, [r0, #6]
   1d55e:	429a      	cmp	r2, r3
   1d560:	d004      	beq.n	1d56c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   1d562:	7942      	ldrb	r2, [r0, #5]
   1d564:	7182      	strb	r2, [r0, #6]
   1d566:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1d56a:	4780      	blx	r0
   1d56c:	7820      	ldrb	r0, [r4, #0]
   1d56e:	1c40      	adds	r0, r0, #1
   1d570:	b2c0      	uxtb	r0, r0
   1d572:	7020      	strb	r0, [r4, #0]
   1d574:	2805      	cmp	r0, #5
   1d576:	d301      	bcc.n	1d57c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   1d578:	2000      	movs	r0, #0
   1d57a:	7020      	strb	r0, [r4, #0]
   1d57c:	1e6d      	subs	r5, r5, #1
   1d57e:	b2ed      	uxtb	r5, r5
   1d580:	d2e5      	bcs.n	1d54e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
   1d582:	bd70      	pop	{r4, r5, r6, pc}
   1d584:	20001654 	.word	0x20001654
   1d588:	20000437 	.word	0x20000437

0001d58c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
   1d58c:	b500      	push	{lr}
   1d58e:	f005 fcec 	bl	22f6a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   1d592:	b940      	cbnz	r0, 1d5a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   1d594:	f005 fcf3 	bl	22f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1d598:	b928      	cbnz	r0, 1d5a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   1d59a:	f005 fd07 	bl	22fac <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1d59e:	b910      	cbnz	r0, 1d5a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   1d5a0:	f005 fd18 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1d5a4:	b108      	cbz	r0, 1d5aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
   1d5a6:	4802      	ldr	r0, [pc, #8]	; (1d5b0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
   1d5a8:	bd00      	pop	{pc}
   1d5aa:	4802      	ldr	r0, [pc, #8]	; (1d5b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
   1d5ac:	bd00      	pop	{pc}
   1d5ae:	0000      	.short	0x0000
   1d5b0:	4000050c 	.word	0x4000050c
   1d5b4:	4001e700 	.word	0x4001e700
   1d5b8:	b510      	push	{r4, lr}
   1d5ba:	f005 fd0b 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   1d5be:	b330      	cbz	r0, 1d60e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
   1d5c0:	f3ef 8010 	mrs	r0, PRIMASK
   1d5c4:	b1c8      	cbz	r0, 1d5fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
   1d5c6:	2100      	movs	r1, #0
   1d5c8:	b672      	cpsid	i
   1d5ca:	4812      	ldr	r0, [pc, #72]	; (1d614 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
   1d5cc:	6802      	ldr	r2, [r0, #0]
   1d5ce:	6803      	ldr	r3, [r0, #0]
   1d5d0:	f3c2 1200 	ubfx	r2, r2, #4, #1
   1d5d4:	f043 0310 	orr.w	r3, r3, #16
   1d5d8:	6003      	str	r3, [r0, #0]
   1d5da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1d5de:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   1d5e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1d5e6:	431c      	orrs	r4, r3
   1d5e8:	d000      	beq.n	1d5ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
   1d5ea:	bf40      	sev
   1d5ec:	bf20      	wfe
   1d5ee:	bf00      	nop
   1d5f0:	bf00      	nop
   1d5f2:	bf00      	nop
   1d5f4:	bf00      	nop
   1d5f6:	b112      	cbz	r2, 1d5fe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
   1d5f8:	e005      	b.n	1d606 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
   1d5fa:	2101      	movs	r1, #1
   1d5fc:	e7e4      	b.n	1d5c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
   1d5fe:	6802      	ldr	r2, [r0, #0]
   1d600:	f022 0210 	bic.w	r2, r2, #16
   1d604:	6002      	str	r2, [r0, #0]
   1d606:	2900      	cmp	r1, #0
   1d608:	d000      	beq.n	1d60c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
   1d60a:	b662      	cpsie	i
   1d60c:	bd10      	pop	{r4, pc}
   1d60e:	bf20      	wfe
   1d610:	bd10      	pop	{r4, pc}
   1d612:	0000      	.short	0x0000
   1d614:	e000ed10 	.word	0xe000ed10

0001d618 <mpsl_cx_granted_ops_get>:
   1d618:	4901      	ldr	r1, [pc, #4]	; (1d620 <mpsl_cx_granted_ops_get+0x8>)
   1d61a:	6809      	ldr	r1, [r1, #0]
   1d61c:	6889      	ldr	r1, [r1, #8]
   1d61e:	4708      	bx	r1
   1d620:	200003bc 	.word	0x200003bc

0001d624 <mpsl_cx_register_callback>:
   1d624:	4901      	ldr	r1, [pc, #4]	; (1d62c <mpsl_cx_register_callback+0x8>)
   1d626:	6809      	ldr	r1, [r1, #0]
   1d628:	6909      	ldr	r1, [r1, #16]
   1d62a:	4708      	bx	r1
   1d62c:	200003bc 	.word	0x200003bc

0001d630 <mpsl_cx_release>:
   1d630:	4801      	ldr	r0, [pc, #4]	; (1d638 <mpsl_cx_release+0x8>)
   1d632:	6800      	ldr	r0, [r0, #0]
   1d634:	6840      	ldr	r0, [r0, #4]
   1d636:	4700      	bx	r0
   1d638:	200003bc 	.word	0x200003bc

0001d63c <mpsl_cx_request>:
   1d63c:	4901      	ldr	r1, [pc, #4]	; (1d644 <mpsl_cx_request+0x8>)
   1d63e:	6809      	ldr	r1, [r1, #0]
   1d640:	6809      	ldr	r1, [r1, #0]
   1d642:	4708      	bx	r1
   1d644:	200003bc 	.word	0x200003bc

0001d648 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI>:
   1d648:	000232b3 000232ab 0002329f 000232af     .2...2...2...2..
   1d658:	000232a7 4c0eb570 28007860 7820d117     .2..p..L`x.(.. x
   1d668:	28012500 2002d106 69207020 6920b110     .%.(...  p i.. i
   1d678:	61254780 28037820 7025d109 28006920     .G%a x.(..%p i.(
   1d688:	6860d005 47806940 47806920 bd706125     ..`h@i.G i.G%ap.
   1d698:	200003c0                                ... 

0001d69c <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA>:
   1d69c:	b510      	push	{r4, lr}
   1d69e:	4c08      	ldr	r4, [pc, #32]	; (1d6c0 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x24>)
   1d6a0:	7820      	ldrb	r0, [r4, #0]
   1d6a2:	2802      	cmp	r0, #2
   1d6a4:	d002      	beq.n	1d6ac <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x10>
   1d6a6:	7820      	ldrb	r0, [r4, #0]
   1d6a8:	2803      	cmp	r0, #3
   1d6aa:	d102      	bne.n	1d6b2 <sym_24DWUIEE2POS3GYSEVA4IAL4G7TGCCCJXT6D5AA+0x16>
   1d6ac:	6860      	ldr	r0, [r4, #4]
   1d6ae:	6880      	ldr	r0, [r0, #8]
   1d6b0:	4780      	blx	r0
   1d6b2:	2000      	movs	r0, #0
   1d6b4:	70a0      	strb	r0, [r4, #2]
   1d6b6:	7060      	strb	r0, [r4, #1]
   1d6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d6bc:	f7ff bfce 	b.w	1d65c <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
   1d6c0:	200003c0 	.word	0x200003c0

0001d6c4 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>:
   1d6c4:	4802      	ldr	r0, [pc, #8]	; (1d6d0 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xc>)
   1d6c6:	7800      	ldrb	r0, [r0, #0]
   1d6c8:	2800      	cmp	r0, #0
   1d6ca:	d000      	beq.n	1d6ce <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI+0xa>
   1d6cc:	2001      	movs	r0, #1
   1d6ce:	4770      	bx	lr
   1d6d0:	200003c0 	.word	0x200003c0

0001d6d4 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ>:
   1d6d4:	b538      	push	{r3, r4, r5, lr}
   1d6d6:	4604      	mov	r4, r0
   1d6d8:	2805      	cmp	r0, #5
   1d6da:	d304      	bcc.n	1d6e6 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x12>
   1d6dc:	f240 113d 	movw	r1, #317	; 0x13d
   1d6e0:	2068      	movs	r0, #104	; 0x68
   1d6e2:	f7ff fe2f 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1d6e6:	f7ff ffb9 	bl	1d65c <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
   1d6ea:	4d10      	ldr	r5, [pc, #64]	; (1d72c <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x58>)
   1d6ec:	2001      	movs	r0, #1
   1d6ee:	7068      	strb	r0, [r5, #1]
   1d6f0:	7828      	ldrb	r0, [r5, #0]
   1d6f2:	2802      	cmp	r0, #2
   1d6f4:	d116      	bne.n	1d724 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x50>
   1d6f6:	6868      	ldr	r0, [r5, #4]
   1d6f8:	68c1      	ldr	r1, [r0, #12]
   1d6fa:	4620      	mov	r0, r4
   1d6fc:	4788      	blx	r1
   1d6fe:	490c      	ldr	r1, [pc, #48]	; (1d730 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x5c>)
   1d700:	eb01 0244 	add.w	r2, r1, r4, lsl #1
   1d704:	7852      	ldrb	r2, [r2, #1]
   1d706:	4282      	cmp	r2, r0
   1d708:	d30d      	bcc.n	1d726 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
   1d70a:	78a8      	ldrb	r0, [r5, #2]
   1d70c:	2801      	cmp	r0, #1
   1d70e:	d00a      	beq.n	1d726 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x52>
   1d710:	f811 0014 	ldrb.w	r0, [r1, r4, lsl #1]
   1d714:	f88d 0000 	strb.w	r0, [sp]
   1d718:	f88d 4001 	strb.w	r4, [sp, #1]
   1d71c:	6868      	ldr	r0, [r5, #4]
   1d71e:	6801      	ldr	r1, [r0, #0]
   1d720:	4668      	mov	r0, sp
   1d722:	4788      	blx	r1
   1d724:	bd38      	pop	{r3, r4, r5, pc}
   1d726:	2001      	movs	r0, #1
   1d728:	e7f4      	b.n	1d714 <sym_GNQQQFEWM5SWEGVB5JHP7HYAZGI4CDQXSGHR4SQ+0x40>
   1d72a:	0000      	.short	0x0000
   1d72c:	200003c0 	.word	0x200003c0
   1d730:	20001bd4 	.word	0x20001bd4

0001d734 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII>:
   1d734:	4905      	ldr	r1, [pc, #20]	; (1d74c <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x18>)
   1d736:	780a      	ldrb	r2, [r1, #0]
   1d738:	2a02      	cmp	r2, #2
   1d73a:	d004      	beq.n	1d746 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
   1d73c:	780a      	ldrb	r2, [r1, #0]
   1d73e:	2a03      	cmp	r2, #3
   1d740:	d001      	beq.n	1d746 <sym_65YCAVBDKPZHZGRZXNQZCLS62UDJXZDBEFWVSII+0x12>
   1d742:	2000      	movs	r0, #0
   1d744:	4770      	bx	lr
   1d746:	6849      	ldr	r1, [r1, #4]
   1d748:	6909      	ldr	r1, [r1, #16]
   1d74a:	4708      	bx	r1
   1d74c:	200003c0 	.word	0x200003c0

0001d750 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ>:
   1d750:	b510      	push	{r4, lr}
   1d752:	b158      	cbz	r0, 1d76c <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x1c>
   1d754:	4908      	ldr	r1, [pc, #32]	; (1d778 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x28>)
   1d756:	780a      	ldrb	r2, [r1, #0]
   1d758:	2a02      	cmp	r2, #2
   1d75a:	d002      	beq.n	1d762 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x12>
   1d75c:	780a      	ldrb	r2, [r1, #0]
   1d75e:	2a03      	cmp	r2, #3
   1d760:	d109      	bne.n	1d776 <sym_H2AKPOL4Q6GKGQJVBUBWLPO3RBNKXXQE2HSOELQ+0x26>
   1d762:	6849      	ldr	r1, [r1, #4]
   1d764:	6849      	ldr	r1, [r1, #4]
   1d766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d76a:	4708      	bx	r1
   1d76c:	f240 1153 	movw	r1, #339	; 0x153
   1d770:	2068      	movs	r0, #104	; 0x68
   1d772:	f7ff fde7 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1d776:	bd10      	pop	{r4, pc}
   1d778:	200003c0 	.word	0x200003c0

0001d77c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
   1d77c:	4901      	ldr	r1, [pc, #4]	; (1d784 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
   1d77e:	2001      	movs	r0, #1
   1d780:	7088      	strb	r0, [r1, #2]
   1d782:	4770      	bx	lr
   1d784:	200003c0 	.word	0x200003c0

0001d788 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ>:
   1d788:	4805      	ldr	r0, [pc, #20]	; (1d7a0 <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x18>)
   1d78a:	7801      	ldrb	r1, [r0, #0]
   1d78c:	2902      	cmp	r1, #2
   1d78e:	d004      	beq.n	1d79a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
   1d790:	7801      	ldrb	r1, [r0, #0]
   1d792:	2903      	cmp	r1, #3
   1d794:	d001      	beq.n	1d79a <sym_UCUZCD3IIQBIFBTQEAMBH3ROVF42G3OC6HCQXWQ+0x12>
   1d796:	2000      	movs	r0, #0
   1d798:	4770      	bx	lr
   1d79a:	6840      	ldr	r0, [r0, #4]
   1d79c:	6980      	ldr	r0, [r0, #24]
   1d79e:	4700      	bx	r0
   1d7a0:	200003c0 	.word	0x200003c0

0001d7a4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
   1d7a4:	000232d7 0002330f 000232f9 000232e7     .2...3...2...2..
   1d7b4:	000232f3 000232e1 000232d5 000232d3     .2...2...2...2..
   1d7c4:	0002330b 000232ff 000232ed 000232db     .3...2...2...2..
   1d7d4:	000232cd 000232c5 000232c9 000232bf     .2...2...2...2..

0001d7e4 <mpsl_fem_disable>:
   1d7e4:	4801      	ldr	r0, [pc, #4]	; (1d7ec <mpsl_fem_disable+0x8>)
   1d7e6:	6800      	ldr	r0, [r0, #0]
   1d7e8:	6800      	ldr	r0, [r0, #0]
   1d7ea:	4700      	bx	r0
   1d7ec:	200003d4 	.word	0x200003d4

0001d7f0 <sym_LKZ3ZNP3R7LS45BGGBRO6PNYTTOZOJGPU7W5PCA>:
   1d7f0:	b118      	cbz	r0, 1d7fa <sym_LKZ3ZNP3R7LS45BGGBRO6PNYTTOZOJGPU7W5PCA+0xa>
   1d7f2:	4903      	ldr	r1, [pc, #12]	; (1d800 <sym_LKZ3ZNP3R7LS45BGGBRO6PNYTTOZOJGPU7W5PCA+0x10>)
   1d7f4:	6008      	str	r0, [r1, #0]
   1d7f6:	2000      	movs	r0, #0
   1d7f8:	4770      	bx	lr
   1d7fa:	f04f 30ff 	mov.w	r0, #4294967295
   1d7fe:	4770      	bx	lr
   1d800:	200003d4 	.word	0x200003d4

0001d804 <mpsl_fem_lna_configuration_clear>:
   1d804:	4801      	ldr	r0, [pc, #4]	; (1d80c <mpsl_fem_lna_configuration_clear+0x8>)
   1d806:	6800      	ldr	r0, [r0, #0]
   1d808:	6940      	ldr	r0, [r0, #20]
   1d80a:	4700      	bx	r0
   1d80c:	200003d4 	.word	0x200003d4

0001d810 <mpsl_fem_lna_configuration_set>:
   1d810:	4a01      	ldr	r2, [pc, #4]	; (1d818 <mpsl_fem_lna_configuration_set+0x8>)
   1d812:	6812      	ldr	r2, [r2, #0]
   1d814:	68d2      	ldr	r2, [r2, #12]
   1d816:	4710      	bx	r2
   1d818:	200003d4 	.word	0x200003d4

0001d81c <mpsl_fem_lna_is_configured>:
   1d81c:	4901      	ldr	r1, [pc, #4]	; (1d824 <mpsl_fem_lna_is_configured+0x8>)
   1d81e:	6809      	ldr	r1, [r1, #0]
   1d820:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   1d822:	4708      	bx	r1
   1d824:	200003d4 	.word	0x200003d4

0001d828 <mpsl_fem_pa_configuration_clear>:
   1d828:	4801      	ldr	r0, [pc, #4]	; (1d830 <mpsl_fem_pa_configuration_clear+0x8>)
   1d82a:	6800      	ldr	r0, [r0, #0]
   1d82c:	6900      	ldr	r0, [r0, #16]
   1d82e:	4700      	bx	r0
   1d830:	200003d4 	.word	0x200003d4

0001d834 <mpsl_fem_pa_configuration_set>:
   1d834:	4a01      	ldr	r2, [pc, #4]	; (1d83c <mpsl_fem_pa_configuration_set+0x8>)
   1d836:	6812      	ldr	r2, [r2, #0]
   1d838:	6892      	ldr	r2, [r2, #8]
   1d83a:	4710      	bx	r2
   1d83c:	200003d4 	.word	0x200003d4

0001d840 <mpsl_fem_pa_gain_set>:
   1d840:	4901      	ldr	r1, [pc, #4]	; (1d848 <mpsl_fem_pa_gain_set+0x8>)
   1d842:	6809      	ldr	r1, [r1, #0]
   1d844:	6a49      	ldr	r1, [r1, #36]	; 0x24
   1d846:	4708      	bx	r1
   1d848:	200003d4 	.word	0x200003d4

0001d84c <mpsl_fem_pa_is_configured>:
   1d84c:	4901      	ldr	r1, [pc, #4]	; (1d854 <mpsl_fem_pa_is_configured+0x8>)
   1d84e:	6809      	ldr	r1, [r1, #0]
   1d850:	6a89      	ldr	r1, [r1, #40]	; 0x28
   1d852:	4708      	bx	r1
   1d854:	200003d4 	.word	0x200003d4

0001d858 <mpsl_fem_tx_power_split>:
   1d858:	b430      	push	{r4, r5}
   1d85a:	4c03      	ldr	r4, [pc, #12]	; (1d868 <mpsl_fem_tx_power_split+0x10>)
   1d85c:	6824      	ldr	r4, [r4, #0]
   1d85e:	6864      	ldr	r4, [r4, #4]
   1d860:	46a4      	mov	ip, r4
   1d862:	bc30      	pop	{r4, r5}
   1d864:	4760      	bx	ip
   1d866:	0000      	.short	0x0000
   1d868:	200003d4 	.word	0x200003d4

0001d86c <mpsl_fem_device_config_254_apply_get>:
   1d86c:	4801      	ldr	r0, [pc, #4]	; (1d874 <mpsl_fem_device_config_254_apply_get+0x8>)
   1d86e:	7800      	ldrb	r0, [r0, #0]
   1d870:	4770      	bx	lr
   1d872:	0000      	.short	0x0000
   1d874:	20000438 	.word	0x20000438

0001d878 <mpsl_fem_device_config_254_apply_set>:
   1d878:	4901      	ldr	r1, [pc, #4]	; (1d880 <mpsl_fem_device_config_254_apply_set+0x8>)
   1d87a:	7008      	strb	r0, [r1, #0]
   1d87c:	4770      	bx	lr
   1d87e:	0000      	.short	0x0000
   1d880:	20000438 	.word	0x20000438

0001d884 <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY>:
   1d884:	b570      	push	{r4, r5, r6, lr}
   1d886:	7b01      	ldrb	r1, [r0, #12]
   1d888:	2900      	cmp	r1, #0
   1d88a:	d028      	beq.n	1d8de <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY+0x5a>
   1d88c:	7801      	ldrb	r1, [r0, #0]
   1d88e:	7a02      	ldrb	r2, [r0, #8]
   1d890:	7a41      	ldrb	r1, [r0, #9]
   1d892:	7b83      	ldrb	r3, [r0, #14]
   1d894:	f362 115f 	bfi	r1, r2, #5, #27
   1d898:	4a12      	ldr	r2, [pc, #72]	; (1d8e4 <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY+0x60>)
   1d89a:	7b44      	ldrb	r4, [r0, #13]
   1d89c:	b304      	cbz	r4, 1d8e0 <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY+0x5c>
   1d89e:	2400      	movs	r4, #0
   1d8a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1d8a4:	f8d3 5510 	ldr.w	r5, [r3, #1296]	; 0x510
   1d8a8:	4e0f      	ldr	r6, [pc, #60]	; (1d8e8 <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY+0x64>)
   1d8aa:	4035      	ands	r5, r6
   1d8ac:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
   1d8b0:	f8d3 5510 	ldr.w	r5, [r3, #1296]	; 0x510
   1d8b4:	f44f 567c 	mov.w	r6, #16128	; 0x3f00
   1d8b8:	ea06 2101 	and.w	r1, r6, r1, lsl #8
   1d8bc:	430d      	orrs	r5, r1
   1d8be:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1d8c2:	ea01 5104 	and.w	r1, r1, r4, lsl #20
   1d8c6:	430d      	orrs	r5, r1
   1d8c8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
   1d8cc:	7b80      	ldrb	r0, [r0, #14]
   1d8ce:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1d8d2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   1d8d6:	f041 0103 	orr.w	r1, r1, #3
   1d8da:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   1d8de:	bd70      	pop	{r4, r5, r6, pc}
   1d8e0:	2401      	movs	r4, #1
   1d8e2:	e7dd      	b.n	1d8a0 <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY+0x1c>
   1d8e4:	40006000 	.word	0x40006000
   1d8e8:	ffecc0ff 	.word	0xffecc0ff

0001d8ec <sym_XCJWKZY7PLHQ3WYDBXY2N635EFQYR732K4ZIXUI>:
   1d8ec:	4902      	ldr	r1, [pc, #8]	; (1d8f8 <sym_XCJWKZY7PLHQ3WYDBXY2N635EFQYR732K4ZIXUI+0xc>)
   1d8ee:	6849      	ldr	r1, [r1, #4]
   1d8f0:	2900      	cmp	r1, #0
   1d8f2:	d000      	beq.n	1d8f6 <sym_XCJWKZY7PLHQ3WYDBXY2N635EFQYR732K4ZIXUI+0xa>
   1d8f4:	4708      	bx	r1
   1d8f6:	4770      	bx	lr
   1d8f8:	200003d8 	.word	0x200003d8

0001d8fc <sym_UZUI4YQAV7IWWBS4QSQS6JUSLV3JFA6COL6SGJQ>:
   1d8fc:	b430      	push	{r4, r5}
   1d8fe:	4c02      	ldr	r4, [pc, #8]	; (1d908 <sym_UZUI4YQAV7IWWBS4QSQS6JUSLV3JFA6COL6SGJQ+0xc>)
   1d900:	6824      	ldr	r4, [r4, #0]
   1d902:	46a4      	mov	ip, r4
   1d904:	bc30      	pop	{r4, r5}
   1d906:	4760      	bx	ip
   1d908:	200003d8 	.word	0x200003d8

0001d90c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY>:
   1d90c:	4802      	ldr	r0, [pc, #8]	; (1d918 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xc>)
   1d90e:	6800      	ldr	r0, [r0, #0]
   1d910:	2800      	cmp	r0, #0
   1d912:	d000      	beq.n	1d916 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xa>
   1d914:	2001      	movs	r0, #1
   1d916:	4770      	bx	lr
   1d918:	200003d8 	.word	0x200003d8
   1d91c:	b570      	push	{r4, r5, r6, lr}
   1d91e:	0005      	movs	r5, r0
   1d920:	d003      	beq.n	1d92a <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x1e>
   1d922:	7d28      	ldrb	r0, [r5, #20]
   1d924:	b118      	cbz	r0, 1d92e <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x22>
   1d926:	7d6c      	ldrb	r4, [r5, #21]
   1d928:	e008      	b.n	1d93c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x30>
   1d92a:	21dd      	movs	r1, #221	; 0xdd
   1d92c:	e01b      	b.n	1d966 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x5a>
   1d92e:	4810      	ldr	r0, [pc, #64]	; (1d970 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x64>)
   1d930:	b111      	cbz	r1, 1d938 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2c>
   1d932:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   1d936:	e001      	b.n	1d93c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x30>
   1d938:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   1d93c:	4e0d      	ldr	r6, [pc, #52]	; (1d974 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x68>)
   1d93e:	2001      	movs	r0, #1
   1d940:	40a0      	lsls	r0, r4
   1d942:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
   1d946:	2300      	movs	r3, #0
   1d948:	461a      	mov	r2, r3
   1d94a:	4621      	mov	r1, r4
   1d94c:	4630      	mov	r0, r6
   1d94e:	f005 fd1b 	bl	23388 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY+0x40>
   1d952:	eb06 0184 	add.w	r1, r6, r4, lsl #2
   1d956:	2000      	movs	r0, #0
   1d958:	f8c1 0910 	str.w	r0, [r1, #2320]	; 0x910
   1d95c:	7828      	ldrb	r0, [r5, #0]
   1d95e:	b128      	cbz	r0, 1d96c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x60>
   1d960:	2801      	cmp	r0, #1
   1d962:	d003      	beq.n	1d96c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x60>
   1d964:	21f6      	movs	r1, #246	; 0xf6
   1d966:	2067      	movs	r0, #103	; 0x67
   1d968:	f7ff fcec 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1d96c:	2000      	movs	r0, #0
   1d96e:	bd70      	pop	{r4, r5, r6, pc}
   1d970:	2000167c 	.word	0x2000167c
   1d974:	4001f000 	.word	0x4001f000
   1d978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d97c:	4699      	mov	r9, r3
   1d97e:	0005      	movs	r5, r0
   1d980:	d015      	beq.n	1d9ae <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xa2>
   1d982:	b1b1      	cbz	r1, 1d9b2 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xa6>
   1d984:	7d28      	ldrb	r0, [r5, #20]
   1d986:	4e3e      	ldr	r6, [pc, #248]	; (1da80 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x174>)
   1d988:	b1c8      	cbz	r0, 1d9be <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xb2>
   1d98a:	7d6c      	ldrb	r4, [r5, #21]
   1d98c:	2cff      	cmp	r4, #255	; 0xff
   1d98e:	d012      	beq.n	1d9b6 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xaa>
   1d990:	4b3c      	ldr	r3, [pc, #240]	; (1da84 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x178>)
   1d992:	7818      	ldrb	r0, [r3, #0]
   1d994:	28ff      	cmp	r0, #255	; 0xff
   1d996:	d010      	beq.n	1d9ba <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xae>
   1d998:	4284      	cmp	r4, r0
   1d99a:	d104      	bne.n	1d9a6 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x9a>
   1d99c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   1d9a0:	f8d0 0910 	ldr.w	r0, [r0, #2320]	; 0x910
   1d9a4:	b190      	cbz	r0, 1d9cc <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xc0>
   1d9a6:	f06f 0015 	mvn.w	r0, #21
   1d9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d9ae:	218a      	movs	r1, #138	; 0x8a
   1d9b0:	e062      	b.n	1da78 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x16c>
   1d9b2:	218b      	movs	r1, #139	; 0x8b
   1d9b4:	e060      	b.n	1da78 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x16c>
   1d9b6:	218f      	movs	r1, #143	; 0x8f
   1d9b8:	e05e      	b.n	1da78 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x16c>
   1d9ba:	701c      	strb	r4, [r3, #0]
   1d9bc:	e006      	b.n	1d9cc <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xc0>
   1d9be:	4832      	ldr	r0, [pc, #200]	; (1da88 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x17c>)
   1d9c0:	b112      	cbz	r2, 1d9c8 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xbc>
   1d9c2:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   1d9c6:	e001      	b.n	1d9cc <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xc0>
   1d9c8:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   1d9cc:	7b48      	ldrb	r0, [r1, #13]
   1d9ce:	4290      	cmp	r0, r2
   1d9d0:	d004      	beq.n	1d9dc <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xd0>
   1d9d2:	7b89      	ldrb	r1, [r1, #14]
   1d9d4:	482d      	ldr	r0, [pc, #180]	; (1da8c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x180>)
   1d9d6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   1d9da:	e004      	b.n	1d9e6 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xda>
   1d9dc:	7b88      	ldrb	r0, [r1, #14]
   1d9de:	492b      	ldr	r1, [pc, #172]	; (1da8c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x180>)
   1d9e0:	3930      	subs	r1, #48	; 0x30
   1d9e2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   1d9e6:	7828      	ldrb	r0, [r5, #0]
   1d9e8:	2701      	movs	r7, #1
   1d9ea:	b1b0      	cbz	r0, 1da1a <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x10e>
   1d9ec:	2801      	cmp	r0, #1
   1d9ee:	d001      	beq.n	1d9f4 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xe8>
   1d9f0:	21d1      	movs	r1, #209	; 0xd1
   1d9f2:	e041      	b.n	1da78 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x16c>
   1d9f4:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   1d9f8:	f8d0 0514 	ldr.w	r0, [r0, #1300]	; 0x514
   1d9fc:	b120      	cbz	r0, 1da08 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0xfc>
   1d9fe:	eb06 0084 	add.w	r0, r6, r4, lsl #2
   1da02:	f8c0 3910 	str.w	r3, [r0, #2320]	; 0x910
   1da06:	e004      	b.n	1da12 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x106>
   1da08:	4621      	mov	r1, r4
   1da0a:	4630      	mov	r0, r6
   1da0c:	686a      	ldr	r2, [r5, #4]
   1da0e:	f005 fcbb 	bl	23388 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY+0x40>
   1da12:	40a7      	lsls	r7, r4
   1da14:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504
   1da18:	e02b      	b.n	1da72 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x166>
   1da1a:	7c28      	ldrb	r0, [r5, #16]
   1da1c:	b120      	cbz	r0, 1da28 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x11c>
   1da1e:	07c1      	lsls	r1, r0, #31
   1da20:	d004      	beq.n	1da2c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x120>
   1da22:	f04f 0800 	mov.w	r8, #0
   1da26:	e00f      	b.n	1da48 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x13c>
   1da28:	21be      	movs	r1, #190	; 0xbe
   1da2a:	e025      	b.n	1da78 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x16c>
   1da2c:	0781      	lsls	r1, r0, #30
   1da2e:	d502      	bpl.n	1da36 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x12a>
   1da30:	f04f 0801 	mov.w	r8, #1
   1da34:	e008      	b.n	1da48 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x13c>
   1da36:	0741      	lsls	r1, r0, #29
   1da38:	d502      	bpl.n	1da40 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x134>
   1da3a:	f04f 0802 	mov.w	r8, #2
   1da3e:	e003      	b.n	1da48 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x13c>
   1da40:	0700      	lsls	r0, r0, #28
   1da42:	d518      	bpl.n	1da76 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x16a>
   1da44:	f04f 0803 	mov.w	r8, #3
   1da48:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1da4c:	6868      	ldr	r0, [r5, #4]
   1da4e:	eb01 0188 	add.w	r1, r1, r8, lsl #2
   1da52:	1842      	adds	r2, r0, r1
   1da54:	4621      	mov	r1, r4
   1da56:	4630      	mov	r0, r6
   1da58:	f005 fc96 	bl	23388 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY+0x40>
   1da5c:	40a7      	lsls	r7, r4
   1da5e:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504
   1da62:	6868      	ldr	r0, [r5, #4]
   1da64:	68ea      	ldr	r2, [r5, #12]
   1da66:	eb00 0088 	add.w	r0, r0, r8, lsl #2
   1da6a:	eba2 0109 	sub.w	r1, r2, r9
   1da6e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   1da72:	2000      	movs	r0, #0
   1da74:	e799      	b.n	1d9aa <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x9e>
   1da76:	217e      	movs	r1, #126	; 0x7e
   1da78:	2067      	movs	r0, #103	; 0x67
   1da7a:	f7ff fc63 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1da7e:	0000      	.short	0x0000
   1da80:	4001f000 	.word	0x4001f000
   1da84:	200003e0 	.word	0x200003e0
   1da88:	2000167c 	.word	0x2000167c
   1da8c:	40006060 	.word	0x40006060
   1da90:	480d      	ldr	r0, [pc, #52]	; (1dac8 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x1bc>)
   1da92:	b510      	push	{r4, lr}
   1da94:	490b      	ldr	r1, [pc, #44]	; (1dac4 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x1b8>)
   1da96:	7840      	ldrb	r0, [r0, #1]
   1da98:	2201      	movs	r2, #1
   1da9a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   1da9e:	605a      	str	r2, [r3, #4]
   1daa0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   1daa4:	2200      	movs	r2, #0
   1daa6:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   1daaa:	4611      	mov	r1, r2
   1daac:	4807      	ldr	r0, [pc, #28]	; (1dacc <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x1c0>)
   1daae:	f7ff ff35 	bl	1d91c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x10>
   1dab2:	2800      	cmp	r0, #0
   1dab4:	d004      	beq.n	1dac0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x1b4>
   1dab6:	f240 212e 	movw	r1, #558	; 0x22e
   1daba:	2067      	movs	r0, #103	; 0x67
   1dabc:	f7ff fc42 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1dac0:	bd10      	pop	{r4, pc}
   1dac2:	0000      	.short	0x0000
   1dac4:	4001f000 	.word	0x4001f000
   1dac8:	200003e0 	.word	0x200003e0
   1dacc:	0001dde8 	.word	0x0001dde8
   1dad0:	b530      	push	{r4, r5, lr}
   1dad2:	b087      	sub	sp, #28
   1dad4:	460c      	mov	r4, r1
   1dad6:	2101      	movs	r1, #1
   1dad8:	f88d 1000 	strb.w	r1, [sp]
   1dadc:	2100      	movs	r1, #0
   1dade:	4d0d      	ldr	r5, [pc, #52]	; (1db14 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x208>)
   1dae0:	f88d 1014 	strb.w	r1, [sp, #20]
   1dae4:	9001      	str	r0, [sp, #4]
   1dae6:	460a      	mov	r2, r1
   1dae8:	f105 010c 	add.w	r1, r5, #12
   1daec:	4668      	mov	r0, sp
   1daee:	682b      	ldr	r3, [r5, #0]
   1daf0:	f7ff ff42 	bl	1d978 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x6c>
   1daf4:	2800      	cmp	r0, #0
   1daf6:	d10b      	bne.n	1db10 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x204>
   1daf8:	2200      	movs	r2, #0
   1dafa:	f105 011c 	add.w	r1, r5, #28
   1dafe:	4668      	mov	r0, sp
   1db00:	686b      	ldr	r3, [r5, #4]
   1db02:	f7ff ff39 	bl	1d978 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x6c>
   1db06:	2800      	cmp	r0, #0
   1db08:	d102      	bne.n	1db10 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x204>
   1db0a:	4803      	ldr	r0, [pc, #12]	; (1db18 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x20c>)
   1db0c:	7044      	strb	r4, [r0, #1]
   1db0e:	2000      	movs	r0, #0
   1db10:	b007      	add	sp, #28
   1db12:	bd30      	pop	{r4, r5, pc}
   1db14:	2000167c 	.word	0x2000167c
   1db18:	200003e0 	.word	0x200003e0
   1db1c:	b570      	push	{r4, r5, r6, lr}
   1db1e:	4e1c      	ldr	r6, [pc, #112]	; (1db90 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x284>)
   1db20:	4d1c      	ldr	r5, [pc, #112]	; (1db94 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x288>)
   1db22:	2401      	movs	r4, #1
   1db24:	f816 1f2c 	ldrb.w	r1, [r6, #44]!
   1db28:	fa04 f001 	lsl.w	r0, r4, r1
   1db2c:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
   1db30:	2300      	movs	r3, #0
   1db32:	461a      	mov	r2, r3
   1db34:	4628      	mov	r0, r5
   1db36:	f005 fc27 	bl	23388 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY+0x40>
   1db3a:	7830      	ldrb	r0, [r6, #0]
   1db3c:	2100      	movs	r1, #0
   1db3e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1db42:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
   1db46:	7871      	ldrb	r1, [r6, #1]
   1db48:	fa04 f001 	lsl.w	r0, r4, r1
   1db4c:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
   1db50:	2300      	movs	r3, #0
   1db52:	461a      	mov	r2, r3
   1db54:	4628      	mov	r0, r5
   1db56:	f005 fc17 	bl	23388 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY+0x40>
   1db5a:	7870      	ldrb	r0, [r6, #1]
   1db5c:	2100      	movs	r1, #0
   1db5e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1db62:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
   1db66:	4e0c      	ldr	r6, [pc, #48]	; (1db98 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x28c>)
   1db68:	7831      	ldrb	r1, [r6, #0]
   1db6a:	29ff      	cmp	r1, #255	; 0xff
   1db6c:	d00f      	beq.n	1db8e <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x282>
   1db6e:	408c      	lsls	r4, r1
   1db70:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1db74:	2300      	movs	r3, #0
   1db76:	461a      	mov	r2, r3
   1db78:	4628      	mov	r0, r5
   1db7a:	f005 fc05 	bl	23388 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY+0x40>
   1db7e:	7830      	ldrb	r0, [r6, #0]
   1db80:	2100      	movs	r1, #0
   1db82:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1db86:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
   1db8a:	20ff      	movs	r0, #255	; 0xff
   1db8c:	7030      	strb	r0, [r6, #0]
   1db8e:	bd70      	pop	{r4, r5, r6, pc}
   1db90:	2000167c 	.word	0x2000167c
   1db94:	4001f000 	.word	0x4001f000
   1db98:	200003e0 	.word	0x200003e0
   1db9c:	b570      	push	{r4, r5, r6, lr}
   1db9e:	4d0c      	ldr	r5, [pc, #48]	; (1dbd0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2c4>)
   1dba0:	4604      	mov	r4, r0
   1dba2:	7e28      	ldrb	r0, [r5, #24]
   1dba4:	b130      	cbz	r0, 1dbb4 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2a8>
   1dba6:	07e0      	lsls	r0, r4, #31
   1dba8:	d004      	beq.n	1dbb4 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2a8>
   1dbaa:	2100      	movs	r1, #0
   1dbac:	f105 000c 	add.w	r0, r5, #12
   1dbb0:	f000 f8d6 	bl	1dd60 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x454>
   1dbb4:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
   1dbb8:	2800      	cmp	r0, #0
   1dbba:	d008      	beq.n	1dbce <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2c2>
   1dbbc:	07a0      	lsls	r0, r4, #30
   1dbbe:	d506      	bpl.n	1dbce <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2c2>
   1dbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dbc4:	4802      	ldr	r0, [pc, #8]	; (1dbd0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2c4>)
   1dbc6:	2100      	movs	r1, #0
   1dbc8:	301c      	adds	r0, #28
   1dbca:	f000 b8c9 	b.w	1dd60 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x454>
   1dbce:	bd70      	pop	{r4, r5, r6, pc}
   1dbd0:	2000167c 	.word	0x2000167c
   1dbd4:	4806      	ldr	r0, [pc, #24]	; (1dbf0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2e4>)
   1dbd6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   1dbda:	4311      	orrs	r1, r2
   1dbdc:	68c2      	ldr	r2, [r0, #12]
   1dbde:	6900      	ldr	r0, [r0, #16]
   1dbe0:	4311      	orrs	r1, r2
   1dbe2:	4301      	orrs	r1, r0
   1dbe4:	d002      	beq.n	1dbec <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2e0>
   1dbe6:	f04f 30ff 	mov.w	r0, #4294967295
   1dbea:	4770      	bx	lr
   1dbec:	2000      	movs	r0, #0
   1dbee:	4770      	bx	lr
   1dbf0:	200003e0 	.word	0x200003e0
   1dbf4:	4601      	mov	r1, r0
   1dbf6:	4801      	ldr	r0, [pc, #4]	; (1dbfc <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x2f0>)
   1dbf8:	f005 bbde 	b.w	233b8 <sym_K27LNRXEE7HXLOB6ANRAZAL5UKZYP4WXS7EA7XI>
   1dbfc:	2000167c 	.word	0x2000167c
   1dc00:	b570      	push	{r4, r5, r6, lr}
   1dc02:	480e      	ldr	r0, [pc, #56]	; (1dc3c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x330>)
   1dc04:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   1dc08:	b1a8      	cbz	r0, 1dc36 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x32a>
   1dc0a:	4c0d      	ldr	r4, [pc, #52]	; (1dc40 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x334>)
   1dc0c:	2500      	movs	r5, #0
   1dc0e:	68e0      	ldr	r0, [r4, #12]
   1dc10:	b128      	cbz	r0, 1dc1e <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x312>
   1dc12:	2101      	movs	r1, #1
   1dc14:	f7ff fe82 	bl	1d91c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x10>
   1dc18:	2800      	cmp	r0, #0
   1dc1a:	d10b      	bne.n	1dc34 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x328>
   1dc1c:	60e5      	str	r5, [r4, #12]
   1dc1e:	6920      	ldr	r0, [r4, #16]
   1dc20:	b128      	cbz	r0, 1dc2e <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x322>
   1dc22:	2100      	movs	r1, #0
   1dc24:	f7ff fe7a 	bl	1d91c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x10>
   1dc28:	2800      	cmp	r0, #0
   1dc2a:	d103      	bne.n	1dc34 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x328>
   1dc2c:	6125      	str	r5, [r4, #16]
   1dc2e:	20ff      	movs	r0, #255	; 0xff
   1dc30:	7020      	strb	r0, [r4, #0]
   1dc32:	2000      	movs	r0, #0
   1dc34:	bd70      	pop	{r4, r5, r6, pc}
   1dc36:	f04f 30ff 	mov.w	r0, #4294967295
   1dc3a:	bd70      	pop	{r4, r5, r6, pc}
   1dc3c:	2000167c 	.word	0x2000167c
   1dc40:	200003e0 	.word	0x200003e0
   1dc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc48:	4d11      	ldr	r5, [pc, #68]	; (1dc90 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x384>)
   1dc4a:	4606      	mov	r6, r0
   1dc4c:	460c      	mov	r4, r1
   1dc4e:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
   1dc52:	b1d0      	cbz	r0, 1dc8a <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x37e>
   1dc54:	f105 001c 	add.w	r0, r5, #28
   1dc58:	4f0e      	ldr	r7, [pc, #56]	; (1dc94 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x388>)
   1dc5a:	4680      	mov	r8, r0
   1dc5c:	b146      	cbz	r6, 1dc70 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x364>
   1dc5e:	4601      	mov	r1, r0
   1dc60:	2201      	movs	r2, #1
   1dc62:	4630      	mov	r0, r6
   1dc64:	686b      	ldr	r3, [r5, #4]
   1dc66:	f7ff fe87 	bl	1d978 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x6c>
   1dc6a:	2800      	cmp	r0, #0
   1dc6c:	d10b      	bne.n	1dc86 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x37a>
   1dc6e:	60fe      	str	r6, [r7, #12]
   1dc70:	b144      	cbz	r4, 1dc84 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x378>
   1dc72:	2200      	movs	r2, #0
   1dc74:	4641      	mov	r1, r8
   1dc76:	4620      	mov	r0, r4
   1dc78:	686b      	ldr	r3, [r5, #4]
   1dc7a:	f7ff fe7d 	bl	1d978 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x6c>
   1dc7e:	2800      	cmp	r0, #0
   1dc80:	d101      	bne.n	1dc86 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x37a>
   1dc82:	613c      	str	r4, [r7, #16]
   1dc84:	2000      	movs	r0, #0
   1dc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc8a:	f04f 30ff 	mov.w	r0, #4294967295
   1dc8e:	e7fa      	b.n	1dc86 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x37a>
   1dc90:	2000167c 	.word	0x2000167c
   1dc94:	200003e0 	.word	0x200003e0
   1dc98:	4601      	mov	r1, r0
   1dc9a:	4801      	ldr	r0, [pc, #4]	; (1dca0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x394>)
   1dc9c:	f005 bb94 	b.w	233c8 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>
   1dca0:	2000167c 	.word	0x2000167c
   1dca4:	b570      	push	{r4, r5, r6, lr}
   1dca6:	480e      	ldr	r0, [pc, #56]	; (1dce0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x3d4>)
   1dca8:	7e00      	ldrb	r0, [r0, #24]
   1dcaa:	b1a8      	cbz	r0, 1dcd8 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x3cc>
   1dcac:	4c0d      	ldr	r4, [pc, #52]	; (1dce4 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x3d8>)
   1dcae:	2500      	movs	r5, #0
   1dcb0:	6860      	ldr	r0, [r4, #4]
   1dcb2:	b128      	cbz	r0, 1dcc0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x3b4>
   1dcb4:	2101      	movs	r1, #1
   1dcb6:	f7ff fe31 	bl	1d91c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x10>
   1dcba:	2800      	cmp	r0, #0
   1dcbc:	d10b      	bne.n	1dcd6 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x3ca>
   1dcbe:	6065      	str	r5, [r4, #4]
   1dcc0:	68a0      	ldr	r0, [r4, #8]
   1dcc2:	b128      	cbz	r0, 1dcd0 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x3c4>
   1dcc4:	2100      	movs	r1, #0
   1dcc6:	f7ff fe29 	bl	1d91c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x10>
   1dcca:	2800      	cmp	r0, #0
   1dccc:	d103      	bne.n	1dcd6 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x3ca>
   1dcce:	60a5      	str	r5, [r4, #8]
   1dcd0:	20ff      	movs	r0, #255	; 0xff
   1dcd2:	7020      	strb	r0, [r4, #0]
   1dcd4:	2000      	movs	r0, #0
   1dcd6:	bd70      	pop	{r4, r5, r6, pc}
   1dcd8:	f04f 30ff 	mov.w	r0, #4294967295
   1dcdc:	bd70      	pop	{r4, r5, r6, pc}
   1dcde:	0000      	.short	0x0000
   1dce0:	2000167c 	.word	0x2000167c
   1dce4:	200003e0 	.word	0x200003e0
   1dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcec:	4d11      	ldr	r5, [pc, #68]	; (1dd34 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x428>)
   1dcee:	4606      	mov	r6, r0
   1dcf0:	460c      	mov	r4, r1
   1dcf2:	7e28      	ldrb	r0, [r5, #24]
   1dcf4:	b1d0      	cbz	r0, 1dd2c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x420>
   1dcf6:	f105 000c 	add.w	r0, r5, #12
   1dcfa:	4f0f      	ldr	r7, [pc, #60]	; (1dd38 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x42c>)
   1dcfc:	4680      	mov	r8, r0
   1dcfe:	b146      	cbz	r6, 1dd12 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x406>
   1dd00:	4601      	mov	r1, r0
   1dd02:	2201      	movs	r2, #1
   1dd04:	4630      	mov	r0, r6
   1dd06:	682b      	ldr	r3, [r5, #0]
   1dd08:	f7ff fe36 	bl	1d978 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x6c>
   1dd0c:	2800      	cmp	r0, #0
   1dd0e:	d10b      	bne.n	1dd28 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x41c>
   1dd10:	607e      	str	r6, [r7, #4]
   1dd12:	b144      	cbz	r4, 1dd26 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x41a>
   1dd14:	2200      	movs	r2, #0
   1dd16:	4641      	mov	r1, r8
   1dd18:	4620      	mov	r0, r4
   1dd1a:	682b      	ldr	r3, [r5, #0]
   1dd1c:	f7ff fe2c 	bl	1d978 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x6c>
   1dd20:	2800      	cmp	r0, #0
   1dd22:	d101      	bne.n	1dd28 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x41c>
   1dd24:	60bc      	str	r4, [r7, #8]
   1dd26:	2000      	movs	r0, #0
   1dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd2c:	f04f 30ff 	mov.w	r0, #4294967295
   1dd30:	e7fa      	b.n	1dd28 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x41c>
   1dd32:	0000      	.short	0x0000
   1dd34:	2000167c 	.word	0x2000167c
   1dd38:	200003e0 	.word	0x200003e0
   1dd3c:	4601      	mov	r1, r0
   1dd3e:	4801      	ldr	r0, [pc, #4]	; (1dd44 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x438>)
   1dd40:	f005 bb49 	b.w	233d6 <sym_R3CY5O5PWFOP6PPHA2W2A2Q2GG2C3KWHG5ABJVI>
   1dd44:	2000167c 	.word	0x2000167c
   1dd48:	b508      	push	{r3, lr}
   1dd4a:	9300      	str	r3, [sp, #0]
   1dd4c:	4613      	mov	r3, r2
   1dd4e:	460a      	mov	r2, r1
   1dd50:	4601      	mov	r1, r0
   1dd52:	4802      	ldr	r0, [pc, #8]	; (1dd5c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x450>)
   1dd54:	f005 fb4f 	bl	233f6 <sym_NSB5Z4D72O5VWEUXZVDQIBPNQ5UV64KEO7NVTOQ>
   1dd58:	bd08      	pop	{r3, pc}
   1dd5a:	0000      	.short	0x0000
   1dd5c:	2000167c 	.word	0x2000167c
   1dd60:	7b42      	ldrb	r2, [r0, #13]
   1dd62:	4b05      	ldr	r3, [pc, #20]	; (1dd78 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x46c>)
   1dd64:	7b80      	ldrb	r0, [r0, #14]
   1dd66:	428a      	cmp	r2, r1
   1dd68:	d001      	beq.n	1dd6e <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x462>
   1dd6a:	2200      	movs	r2, #0
   1dd6c:	e000      	b.n	1dd70 <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY+0x464>
   1dd6e:	2201      	movs	r2, #1
   1dd70:	4601      	mov	r1, r0
   1dd72:	4618      	mov	r0, r3
   1dd74:	f005 baff 	b.w	23376 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY+0x2e>
   1dd78:	40006000 	.word	0x40006000

0001dd7c <mpsl_fem_simple_gpio_interface_config_set>:
   1dd7c:	b510      	push	{r4, lr}
   1dd7e:	4601      	mov	r1, r0
   1dd80:	2230      	movs	r2, #48	; 0x30
   1dd82:	4807      	ldr	r0, [pc, #28]	; (1dda0 <mpsl_fem_simple_gpio_interface_config_set+0x24>)
   1dd84:	f005 f9b1 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1dd88:	4805      	ldr	r0, [pc, #20]	; (1dda0 <mpsl_fem_simple_gpio_interface_config_set+0x24>)
   1dd8a:	f005 fb04 	bl	23396 <sym_3BRTDPN7XWPAND7Z2VPL7ANWY4DHJFOP4VM7OOQ>
   1dd8e:	2800      	cmp	r0, #0
   1dd90:	d104      	bne.n	1dd9c <mpsl_fem_simple_gpio_interface_config_set+0x20>
   1dd92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dd96:	4803      	ldr	r0, [pc, #12]	; (1dda4 <mpsl_fem_simple_gpio_interface_config_set+0x28>)
   1dd98:	f7ff bd2a 	b.w	1d7f0 <sym_LKZ3ZNP3R7LS45BGGBRO6PNYTTOZOJGPU7W5PCA>
   1dd9c:	bd10      	pop	{r4, pc}
   1dd9e:	0000      	.short	0x0000
   1dda0:	2000167c 	.word	0x2000167c
   1dda4:	0001dda8 	.word	0x0001dda8
   1dda8:	0001dbd5 	.word	0x0001dbd5
   1ddac:	0001dd49 	.word	0x0001dd49
   1ddb0:	0001dce9 	.word	0x0001dce9
   1ddb4:	0001dc45 	.word	0x0001dc45
   1ddb8:	0001dca5 	.word	0x0001dca5
   1ddbc:	0001dc01 	.word	0x0001dc01
   1ddc0:	0001db9d 	.word	0x0001db9d
   1ddc4:	0001db1d 	.word	0x0001db1d
   1ddc8:	00023373 	.word	0x00023373
   1ddcc:	0001dd3d 	.word	0x0001dd3d
   1ddd0:	0001dc99 	.word	0x0001dc99
   1ddd4:	0001dbf5 	.word	0x0001dbf5
   1ddd8:	0001dad1 	.word	0x0001dad1
   1dddc:	0002336b 	.word	0x0002336b
   1dde0:	0002336f 	.word	0x0002336f
   1dde4:	0001da91 	.word	0x0001da91
   1dde8:	00000001 	.word	0x00000001
	...

0001de00 <__udivmoddi4>:
   1de00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de04:	4686      	mov	lr, r0
   1de06:	468c      	mov	ip, r1
   1de08:	4608      	mov	r0, r1
   1de0a:	9e08      	ldr	r6, [sp, #32]
   1de0c:	4615      	mov	r5, r2
   1de0e:	4674      	mov	r4, lr
   1de10:	4619      	mov	r1, r3
   1de12:	2b00      	cmp	r3, #0
   1de14:	f040 80c2 	bne.w	1df9c <__udivmoddi4+0x19c>
   1de18:	4285      	cmp	r5, r0
   1de1a:	fab2 f282 	clz	r2, r2
   1de1e:	d945      	bls.n	1deac <__udivmoddi4+0xac>
   1de20:	b14a      	cbz	r2, 1de36 <__udivmoddi4+0x36>
   1de22:	f1c2 0320 	rsb	r3, r2, #32
   1de26:	fa00 fc02 	lsl.w	ip, r0, r2
   1de2a:	fa2e f303 	lsr.w	r3, lr, r3
   1de2e:	4095      	lsls	r5, r2
   1de30:	ea43 0c0c 	orr.w	ip, r3, ip
   1de34:	4094      	lsls	r4, r2
   1de36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1de3a:	b2a8      	uxth	r0, r5
   1de3c:	fbbc f8fe 	udiv	r8, ip, lr
   1de40:	0c23      	lsrs	r3, r4, #16
   1de42:	fb0e cc18 	mls	ip, lr, r8, ip
   1de46:	fb08 f900 	mul.w	r9, r8, r0
   1de4a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1de4e:	4599      	cmp	r9, r3
   1de50:	d928      	bls.n	1dea4 <__udivmoddi4+0xa4>
   1de52:	18eb      	adds	r3, r5, r3
   1de54:	f108 37ff 	add.w	r7, r8, #4294967295
   1de58:	d204      	bcs.n	1de64 <__udivmoddi4+0x64>
   1de5a:	4599      	cmp	r9, r3
   1de5c:	d902      	bls.n	1de64 <__udivmoddi4+0x64>
   1de5e:	f1a8 0702 	sub.w	r7, r8, #2
   1de62:	442b      	add	r3, r5
   1de64:	eba3 0309 	sub.w	r3, r3, r9
   1de68:	b2a4      	uxth	r4, r4
   1de6a:	fbb3 fcfe 	udiv	ip, r3, lr
   1de6e:	fb0e 331c 	mls	r3, lr, ip, r3
   1de72:	fb0c f000 	mul.w	r0, ip, r0
   1de76:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1de7a:	42a0      	cmp	r0, r4
   1de7c:	d914      	bls.n	1dea8 <__udivmoddi4+0xa8>
   1de7e:	192c      	adds	r4, r5, r4
   1de80:	f10c 33ff 	add.w	r3, ip, #4294967295
   1de84:	d204      	bcs.n	1de90 <__udivmoddi4+0x90>
   1de86:	42a0      	cmp	r0, r4
   1de88:	d902      	bls.n	1de90 <__udivmoddi4+0x90>
   1de8a:	f1ac 0302 	sub.w	r3, ip, #2
   1de8e:	442c      	add	r4, r5
   1de90:	1a24      	subs	r4, r4, r0
   1de92:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   1de96:	b11e      	cbz	r6, 1dea0 <__udivmoddi4+0xa0>
   1de98:	40d4      	lsrs	r4, r2
   1de9a:	2300      	movs	r3, #0
   1de9c:	6034      	str	r4, [r6, #0]
   1de9e:	6073      	str	r3, [r6, #4]
   1dea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dea4:	4647      	mov	r7, r8
   1dea6:	e7dd      	b.n	1de64 <__udivmoddi4+0x64>
   1dea8:	4663      	mov	r3, ip
   1deaa:	e7f1      	b.n	1de90 <__udivmoddi4+0x90>
   1deac:	bb92      	cbnz	r2, 1df14 <__udivmoddi4+0x114>
   1deae:	1b43      	subs	r3, r0, r5
   1deb0:	2101      	movs	r1, #1
   1deb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1deb6:	b2af      	uxth	r7, r5
   1deb8:	fbb3 fcfe 	udiv	ip, r3, lr
   1debc:	0c20      	lsrs	r0, r4, #16
   1debe:	fb0e 331c 	mls	r3, lr, ip, r3
   1dec2:	fb0c f807 	mul.w	r8, ip, r7
   1dec6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1deca:	4598      	cmp	r8, r3
   1decc:	d962      	bls.n	1df94 <__udivmoddi4+0x194>
   1dece:	18eb      	adds	r3, r5, r3
   1ded0:	f10c 30ff 	add.w	r0, ip, #4294967295
   1ded4:	d204      	bcs.n	1dee0 <__udivmoddi4+0xe0>
   1ded6:	4598      	cmp	r8, r3
   1ded8:	d902      	bls.n	1dee0 <__udivmoddi4+0xe0>
   1deda:	f1ac 0002 	sub.w	r0, ip, #2
   1dede:	442b      	add	r3, r5
   1dee0:	eba3 0308 	sub.w	r3, r3, r8
   1dee4:	b2a4      	uxth	r4, r4
   1dee6:	fbb3 fcfe 	udiv	ip, r3, lr
   1deea:	fb0e 331c 	mls	r3, lr, ip, r3
   1deee:	fb0c f707 	mul.w	r7, ip, r7
   1def2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1def6:	42a7      	cmp	r7, r4
   1def8:	d94e      	bls.n	1df98 <__udivmoddi4+0x198>
   1defa:	192c      	adds	r4, r5, r4
   1defc:	f10c 33ff 	add.w	r3, ip, #4294967295
   1df00:	d204      	bcs.n	1df0c <__udivmoddi4+0x10c>
   1df02:	42a7      	cmp	r7, r4
   1df04:	d902      	bls.n	1df0c <__udivmoddi4+0x10c>
   1df06:	f1ac 0302 	sub.w	r3, ip, #2
   1df0a:	442c      	add	r4, r5
   1df0c:	1be4      	subs	r4, r4, r7
   1df0e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1df12:	e7c0      	b.n	1de96 <__udivmoddi4+0x96>
   1df14:	f1c2 0320 	rsb	r3, r2, #32
   1df18:	fa20 f103 	lsr.w	r1, r0, r3
   1df1c:	4095      	lsls	r5, r2
   1df1e:	4090      	lsls	r0, r2
   1df20:	fa2e f303 	lsr.w	r3, lr, r3
   1df24:	4303      	orrs	r3, r0
   1df26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1df2a:	b2af      	uxth	r7, r5
   1df2c:	fbb1 fcfe 	udiv	ip, r1, lr
   1df30:	fb0e 101c 	mls	r0, lr, ip, r1
   1df34:	0c19      	lsrs	r1, r3, #16
   1df36:	fb0c f807 	mul.w	r8, ip, r7
   1df3a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1df3e:	4588      	cmp	r8, r1
   1df40:	fa04 f402 	lsl.w	r4, r4, r2
   1df44:	d922      	bls.n	1df8c <__udivmoddi4+0x18c>
   1df46:	1869      	adds	r1, r5, r1
   1df48:	f10c 30ff 	add.w	r0, ip, #4294967295
   1df4c:	d204      	bcs.n	1df58 <__udivmoddi4+0x158>
   1df4e:	4588      	cmp	r8, r1
   1df50:	d902      	bls.n	1df58 <__udivmoddi4+0x158>
   1df52:	f1ac 0002 	sub.w	r0, ip, #2
   1df56:	4429      	add	r1, r5
   1df58:	eba1 0108 	sub.w	r1, r1, r8
   1df5c:	b29b      	uxth	r3, r3
   1df5e:	fbb1 fcfe 	udiv	ip, r1, lr
   1df62:	fb0e 111c 	mls	r1, lr, ip, r1
   1df66:	fb0c f707 	mul.w	r7, ip, r7
   1df6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1df6e:	429f      	cmp	r7, r3
   1df70:	d90e      	bls.n	1df90 <__udivmoddi4+0x190>
   1df72:	18eb      	adds	r3, r5, r3
   1df74:	f10c 31ff 	add.w	r1, ip, #4294967295
   1df78:	d204      	bcs.n	1df84 <__udivmoddi4+0x184>
   1df7a:	429f      	cmp	r7, r3
   1df7c:	d902      	bls.n	1df84 <__udivmoddi4+0x184>
   1df7e:	f1ac 0102 	sub.w	r1, ip, #2
   1df82:	442b      	add	r3, r5
   1df84:	1bdb      	subs	r3, r3, r7
   1df86:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1df8a:	e792      	b.n	1deb2 <__udivmoddi4+0xb2>
   1df8c:	4660      	mov	r0, ip
   1df8e:	e7e3      	b.n	1df58 <__udivmoddi4+0x158>
   1df90:	4661      	mov	r1, ip
   1df92:	e7f7      	b.n	1df84 <__udivmoddi4+0x184>
   1df94:	4660      	mov	r0, ip
   1df96:	e7a3      	b.n	1dee0 <__udivmoddi4+0xe0>
   1df98:	4663      	mov	r3, ip
   1df9a:	e7b7      	b.n	1df0c <__udivmoddi4+0x10c>
   1df9c:	4283      	cmp	r3, r0
   1df9e:	d906      	bls.n	1dfae <__udivmoddi4+0x1ae>
   1dfa0:	b916      	cbnz	r6, 1dfa8 <__udivmoddi4+0x1a8>
   1dfa2:	2100      	movs	r1, #0
   1dfa4:	4608      	mov	r0, r1
   1dfa6:	e77b      	b.n	1dea0 <__udivmoddi4+0xa0>
   1dfa8:	e9c6 e000 	strd	lr, r0, [r6]
   1dfac:	e7f9      	b.n	1dfa2 <__udivmoddi4+0x1a2>
   1dfae:	fab3 f783 	clz	r7, r3
   1dfb2:	b98f      	cbnz	r7, 1dfd8 <__udivmoddi4+0x1d8>
   1dfb4:	4283      	cmp	r3, r0
   1dfb6:	d301      	bcc.n	1dfbc <__udivmoddi4+0x1bc>
   1dfb8:	4572      	cmp	r2, lr
   1dfba:	d808      	bhi.n	1dfce <__udivmoddi4+0x1ce>
   1dfbc:	ebbe 0402 	subs.w	r4, lr, r2
   1dfc0:	eb60 0303 	sbc.w	r3, r0, r3
   1dfc4:	2001      	movs	r0, #1
   1dfc6:	469c      	mov	ip, r3
   1dfc8:	b91e      	cbnz	r6, 1dfd2 <__udivmoddi4+0x1d2>
   1dfca:	2100      	movs	r1, #0
   1dfcc:	e768      	b.n	1dea0 <__udivmoddi4+0xa0>
   1dfce:	4638      	mov	r0, r7
   1dfd0:	e7fa      	b.n	1dfc8 <__udivmoddi4+0x1c8>
   1dfd2:	e9c6 4c00 	strd	r4, ip, [r6]
   1dfd6:	e7f8      	b.n	1dfca <__udivmoddi4+0x1ca>
   1dfd8:	f1c7 0c20 	rsb	ip, r7, #32
   1dfdc:	40bb      	lsls	r3, r7
   1dfde:	fa22 f40c 	lsr.w	r4, r2, ip
   1dfe2:	431c      	orrs	r4, r3
   1dfe4:	fa2e f10c 	lsr.w	r1, lr, ip
   1dfe8:	fa20 f30c 	lsr.w	r3, r0, ip
   1dfec:	40b8      	lsls	r0, r7
   1dfee:	4301      	orrs	r1, r0
   1dff0:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1dff4:	fa0e f507 	lsl.w	r5, lr, r7
   1dff8:	fbb3 f8f9 	udiv	r8, r3, r9
   1dffc:	fa1f fe84 	uxth.w	lr, r4
   1e000:	fb09 3018 	mls	r0, r9, r8, r3
   1e004:	0c0b      	lsrs	r3, r1, #16
   1e006:	fb08 fa0e 	mul.w	sl, r8, lr
   1e00a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1e00e:	459a      	cmp	sl, r3
   1e010:	fa02 f207 	lsl.w	r2, r2, r7
   1e014:	d940      	bls.n	1e098 <__udivmoddi4+0x298>
   1e016:	18e3      	adds	r3, r4, r3
   1e018:	f108 30ff 	add.w	r0, r8, #4294967295
   1e01c:	d204      	bcs.n	1e028 <__udivmoddi4+0x228>
   1e01e:	459a      	cmp	sl, r3
   1e020:	d902      	bls.n	1e028 <__udivmoddi4+0x228>
   1e022:	f1a8 0002 	sub.w	r0, r8, #2
   1e026:	4423      	add	r3, r4
   1e028:	eba3 030a 	sub.w	r3, r3, sl
   1e02c:	b289      	uxth	r1, r1
   1e02e:	fbb3 f8f9 	udiv	r8, r3, r9
   1e032:	fb09 3318 	mls	r3, r9, r8, r3
   1e036:	fb08 fe0e 	mul.w	lr, r8, lr
   1e03a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e03e:	458e      	cmp	lr, r1
   1e040:	d92c      	bls.n	1e09c <__udivmoddi4+0x29c>
   1e042:	1861      	adds	r1, r4, r1
   1e044:	f108 33ff 	add.w	r3, r8, #4294967295
   1e048:	d204      	bcs.n	1e054 <__udivmoddi4+0x254>
   1e04a:	458e      	cmp	lr, r1
   1e04c:	d902      	bls.n	1e054 <__udivmoddi4+0x254>
   1e04e:	f1a8 0302 	sub.w	r3, r8, #2
   1e052:	4421      	add	r1, r4
   1e054:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1e058:	fba0 9802 	umull	r9, r8, r0, r2
   1e05c:	eba1 010e 	sub.w	r1, r1, lr
   1e060:	4541      	cmp	r1, r8
   1e062:	46ce      	mov	lr, r9
   1e064:	4643      	mov	r3, r8
   1e066:	d302      	bcc.n	1e06e <__udivmoddi4+0x26e>
   1e068:	d106      	bne.n	1e078 <__udivmoddi4+0x278>
   1e06a:	454d      	cmp	r5, r9
   1e06c:	d204      	bcs.n	1e078 <__udivmoddi4+0x278>
   1e06e:	ebb9 0e02 	subs.w	lr, r9, r2
   1e072:	eb68 0304 	sbc.w	r3, r8, r4
   1e076:	3801      	subs	r0, #1
   1e078:	2e00      	cmp	r6, #0
   1e07a:	d0a6      	beq.n	1dfca <__udivmoddi4+0x1ca>
   1e07c:	ebb5 020e 	subs.w	r2, r5, lr
   1e080:	eb61 0103 	sbc.w	r1, r1, r3
   1e084:	fa01 fc0c 	lsl.w	ip, r1, ip
   1e088:	fa22 f307 	lsr.w	r3, r2, r7
   1e08c:	ea4c 0303 	orr.w	r3, ip, r3
   1e090:	40f9      	lsrs	r1, r7
   1e092:	e9c6 3100 	strd	r3, r1, [r6]
   1e096:	e798      	b.n	1dfca <__udivmoddi4+0x1ca>
   1e098:	4640      	mov	r0, r8
   1e09a:	e7c5      	b.n	1e028 <__udivmoddi4+0x228>
   1e09c:	4643      	mov	r3, r8
   1e09e:	e7d9      	b.n	1e054 <__udivmoddi4+0x254>

0001e0a0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   1e0a0:	b50e      	push	{r1, r2, r3, lr}
   1e0a2:	4601      	mov	r1, r0
   1e0a4:	4668      	mov	r0, sp
   1e0a6:	f000 f804 	bl	1e0b2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   1e0aa:	4668      	mov	r0, sp
   1e0ac:	f7f1 fc00 	bl	f8b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   1e0b0:	bd0e      	pop	{r1, r2, r3, pc}

0001e0b2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   1e0b2:	880a      	ldrh	r2, [r1, #0]
   1e0b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
   1e0b8:	8082      	strh	r2, [r0, #4]
   1e0ba:	884a      	ldrh	r2, [r1, #2]
   1e0bc:	80c2      	strh	r2, [r0, #6]
   1e0be:	784a      	ldrb	r2, [r1, #1]
   1e0c0:	0993      	lsrs	r3, r2, #6
   1e0c2:	2200      	movs	r2, #0
   1e0c4:	7242      	strb	r2, [r0, #9]
   1e0c6:	784b      	ldrb	r3, [r1, #1]
   1e0c8:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1e0cc:	b11b      	cbz	r3, 1e0d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   1e0ce:	2b01      	cmp	r3, #1
   1e0d0:	d005      	beq.n	1e0de <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   1e0d2:	2b02      	cmp	r3, #2
   1e0d4:	d005      	beq.n	1e0e2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   1e0d6:	7202      	strb	r2, [r0, #8]
   1e0d8:	1d09      	adds	r1, r1, #4
   1e0da:	6001      	str	r1, [r0, #0]
   1e0dc:	4770      	bx	lr
   1e0de:	2201      	movs	r2, #1
   1e0e0:	e7f9      	b.n	1e0d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   1e0e2:	2202      	movs	r2, #2
   1e0e4:	e7f7      	b.n	1e0d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0001e0e6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   1e0e6:	b510      	push	{r4, lr}
   1e0e8:	460c      	mov	r4, r1
   1e0ea:	7909      	ldrb	r1, [r1, #4]
   1e0ec:	7001      	strb	r1, [r0, #0]
   1e0ee:	7841      	ldrb	r1, [r0, #1]
   1e0f0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   1e0f4:	7041      	strb	r1, [r0, #1]
   1e0f6:	88a2      	ldrh	r2, [r4, #4]
   1e0f8:	f3c2 2203 	ubfx	r2, r2, #8, #4
   1e0fc:	4311      	orrs	r1, r2
   1e0fe:	7041      	strb	r1, [r0, #1]
   1e100:	79a2      	ldrb	r2, [r4, #6]
   1e102:	7082      	strb	r2, [r0, #2]
   1e104:	88e2      	ldrh	r2, [r4, #6]
   1e106:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
   1e10a:	0a12      	lsrs	r2, r2, #8
   1e10c:	70c2      	strb	r2, [r0, #3]
   1e10e:	7041      	strb	r1, [r0, #1]
   1e110:	7a22      	ldrb	r2, [r4, #8]
   1e112:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   1e116:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1e11a:	7041      	strb	r1, [r0, #1]
   1e11c:	7a62      	ldrb	r2, [r4, #9]
   1e11e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   1e122:	7041      	strb	r1, [r0, #1]
   1e124:	6821      	ldr	r1, [r4, #0]
   1e126:	1d02      	adds	r2, r0, #4
   1e128:	4291      	cmp	r1, r2
   1e12a:	d006      	beq.n	1e13a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
   1e12c:	88e2      	ldrh	r2, [r4, #6]
   1e12e:	2afb      	cmp	r2, #251	; 0xfb
   1e130:	d300      	bcc.n	1e134 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
   1e132:	22fb      	movs	r2, #251	; 0xfb
   1e134:	1d00      	adds	r0, r0, #4
   1e136:	f004 ffd8 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e13a:	79a0      	ldrb	r0, [r4, #6]
   1e13c:	1d00      	adds	r0, r0, #4
   1e13e:	b2c0      	uxtb	r0, r0
   1e140:	bd10      	pop	{r4, pc}

0001e142 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
   1e142:	b430      	push	{r4, r5}
   1e144:	790a      	ldrb	r2, [r1, #4]
   1e146:	7002      	strb	r2, [r0, #0]
   1e148:	7842      	ldrb	r2, [r0, #1]
   1e14a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1e14e:	7042      	strb	r2, [r0, #1]
   1e150:	888b      	ldrh	r3, [r1, #4]
   1e152:	f3c3 2303 	ubfx	r3, r3, #8, #4
   1e156:	431a      	orrs	r2, r3
   1e158:	7042      	strb	r2, [r0, #1]
   1e15a:	798b      	ldrb	r3, [r1, #6]
   1e15c:	7083      	strb	r3, [r0, #2]
   1e15e:	78c3      	ldrb	r3, [r0, #3]
   1e160:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
   1e164:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e168:	70c3      	strb	r3, [r0, #3]
   1e16a:	88cc      	ldrh	r4, [r1, #6]
   1e16c:	f3c4 2405 	ubfx	r4, r4, #8, #6
   1e170:	4323      	orrs	r3, r4
   1e172:	70c3      	strb	r3, [r0, #3]
   1e174:	7042      	strb	r2, [r0, #1]
   1e176:	7a0c      	ldrb	r4, [r1, #8]
   1e178:	f004 0403 	and.w	r4, r4, #3
   1e17c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
   1e180:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1e184:	7042      	strb	r2, [r0, #1]
   1e186:	7a4c      	ldrb	r4, [r1, #9]
   1e188:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
   1e18c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1e190:	7042      	strb	r2, [r0, #1]
   1e192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
   1e196:	70c2      	strb	r2, [r0, #3]
   1e198:	680b      	ldr	r3, [r1, #0]
   1e19a:	1d02      	adds	r2, r0, #4
   1e19c:	4293      	cmp	r3, r2
   1e19e:	d005      	beq.n	1e1ac <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
   1e1a0:	88ca      	ldrh	r2, [r1, #6]
   1e1a2:	bc30      	pop	{r4, r5}
   1e1a4:	4619      	mov	r1, r3
   1e1a6:	1d00      	adds	r0, r0, #4
   1e1a8:	f004 bf9f 	b.w	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e1ac:	bc30      	pop	{r4, r5}
   1e1ae:	4770      	bx	lr

0001e1b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   1e1b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1b4:	4604      	mov	r4, r0
   1e1b6:	460d      	mov	r5, r1
   1e1b8:	f891 c000 	ldrb.w	ip, [r1]
   1e1bc:	2000      	movs	r0, #0
   1e1be:	263e      	movs	r6, #62	; 0x3e
   1e1c0:	1ca2      	adds	r2, r4, #2
   1e1c2:	1ce1      	adds	r1, r4, #3
   1e1c4:	27ff      	movs	r7, #255	; 0xff
   1e1c6:	f04f 0b10 	mov.w	fp, #16
   1e1ca:	f04f 0e0c 	mov.w	lr, #12
   1e1ce:	f104 030d 	add.w	r3, r4, #13
   1e1d2:	f04f 0912 	mov.w	r9, #18
   1e1d6:	f04f 0a11 	mov.w	sl, #17
   1e1da:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
   1e1de:	d278      	bcs.n	1e2d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x122>
   1e1e0:	e8df f00c 	tbb	[pc, ip]
   1e1e4:	33301877 	.word	0x33301877
   1e1e8:	9377f338 	.word	0x9377f338
   1e1ec:	f4c4aa9c 	.word	0xf4c4aa9c
   1e1f0:	eeeff0f7 	.word	0xeeeff0f7
   1e1f4:	5a7777ed 	.word	0x5a7777ed
   1e1f8:	ebec7877 	.word	0xebec7877
   1e1fc:	e877e9ea 	.word	0xe877e9ea
   1e200:	e5e6e777 	.word	0xe5e6e777
   1e204:	e2e377e4 	.word	0xe2e377e4
   1e208:	dedfe0e1 	.word	0xdedfe0e1
   1e20c:	dadbdcdd 	.word	0xdadbdcdd
   1e210:	00d877d9 	.word	0x00d877d9
   1e214:	f884 e000 	strb.w	lr, [r4]
   1e218:	7928      	ldrb	r0, [r5, #4]
   1e21a:	70a0      	strb	r0, [r4, #2]
   1e21c:	7968      	ldrb	r0, [r5, #5]
   1e21e:	70e0      	strb	r0, [r4, #3]
   1e220:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1e224:	0a00      	lsrs	r0, r0, #8
   1e226:	7120      	strb	r0, [r4, #4]
   1e228:	79e8      	ldrb	r0, [r5, #7]
   1e22a:	7160      	strb	r0, [r4, #5]
   1e22c:	7a28      	ldrb	r0, [r5, #8]
   1e22e:	71a0      	strb	r0, [r4, #6]
   1e230:	8928      	ldrh	r0, [r5, #8]
   1e232:	0a00      	lsrs	r0, r0, #8
   1e234:	71e0      	strb	r0, [r4, #7]
   1e236:	7aa8      	ldrb	r0, [r5, #10]
   1e238:	7220      	strb	r0, [r4, #8]
   1e23a:	8968      	ldrh	r0, [r5, #10]
   1e23c:	0a00      	lsrs	r0, r0, #8
   1e23e:	7260      	strb	r0, [r4, #9]
   1e240:	2008      	movs	r0, #8
   1e242:	e1eb      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e244:	f884 b000 	strb.w	fp, [r4]
   1e248:	e001      	b.n	1e24e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x9e>
   1e24a:	201a      	movs	r0, #26
   1e24c:	7020      	strb	r0, [r4, #0]
   1e24e:	7928      	ldrb	r0, [r5, #4]
   1e250:	70a0      	strb	r0, [r4, #2]
   1e252:	e138      	b.n	1e4c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
   1e254:	7026      	strb	r6, [r4, #0]
   1e256:	2002      	movs	r0, #2
   1e258:	70a0      	strb	r0, [r4, #2]
   1e25a:	f815 0f04 	ldrb.w	r0, [r5, #4]!
   1e25e:	70e0      	strb	r0, [r4, #3]
   1e260:	7aa8      	ldrb	r0, [r5, #10]
   1e262:	7120      	strb	r0, [r4, #4]
   1e264:	7868      	ldrb	r0, [r5, #1]
   1e266:	7160      	strb	r0, [r4, #5]
   1e268:	f8d5 0002 	ldr.w	r0, [r5, #2]
   1e26c:	f8c4 0006 	str.w	r0, [r4, #6]
   1e270:	88e8      	ldrh	r0, [r5, #6]
   1e272:	8160      	strh	r0, [r4, #10]
   1e274:	7a28      	ldrb	r0, [r5, #8]
   1e276:	7320      	strb	r0, [r4, #12]
   1e278:	7a2e      	ldrb	r6, [r5, #8]
   1e27a:	2e1f      	cmp	r6, #31
   1e27c:	d300      	bcc.n	1e280 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xd0>
   1e27e:	261f      	movs	r6, #31
   1e280:	4618      	mov	r0, r3
   1e282:	4632      	mov	r2, r6
   1e284:	f105 010b 	add.w	r1, r5, #11
   1e288:	f004 ff2f 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e28c:	360d      	adds	r6, #13
   1e28e:	7a69      	ldrb	r1, [r5, #9]
   1e290:	55a1      	strb	r1, [r4, r6]
   1e292:	1e76      	subs	r6, r6, #1
   1e294:	b2f0      	uxtb	r0, r6
   1e296:	e1bf      	b.n	1e618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
   1e298:	7026      	strb	r6, [r4, #0]
   1e29a:	200b      	movs	r0, #11
   1e29c:	70a0      	strb	r0, [r4, #2]
   1e29e:	7928      	ldrb	r0, [r5, #4]
   1e2a0:	70e0      	strb	r0, [r4, #3]
   1e2a2:	7968      	ldrb	r0, [r5, #5]
   1e2a4:	7120      	strb	r0, [r4, #4]
   1e2a6:	79a8      	ldrb	r0, [r5, #6]
   1e2a8:	7160      	strb	r0, [r4, #5]
   1e2aa:	f8d5 0007 	ldr.w	r0, [r5, #7]
   1e2ae:	f8c4 0006 	str.w	r0, [r4, #6]
   1e2b2:	f8b5 000b 	ldrh.w	r0, [r5, #11]
   1e2b6:	8160      	strh	r0, [r4, #10]
   1e2b8:	7b68      	ldrb	r0, [r5, #13]
   1e2ba:	7320      	strb	r0, [r4, #12]
   1e2bc:	f8d5 000e 	ldr.w	r0, [r5, #14]
   1e2c0:	f8c4 000d 	str.w	r0, [r4, #13]
   1e2c4:	8a68      	ldrh	r0, [r5, #18]
   1e2c6:	f8a4 0011 	strh.w	r0, [r4, #17]
   1e2ca:	7d28      	ldrb	r0, [r5, #20]
   1e2cc:	74e0      	strb	r0, [r4, #19]
   1e2ce:	4648      	mov	r0, r9
   1e2d0:	e1a4      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e2d2:	e1a6      	b.n	1e622 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x472>
   1e2d4:	2029      	movs	r0, #41	; 0x29
   1e2d6:	f7ee ff93 	bl	d200 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   1e2da:	b148      	cbz	r0, 1e2f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x140>
   1e2dc:	7026      	strb	r6, [r4, #0]
   1e2de:	2029      	movs	r0, #41	; 0x29
   1e2e0:	70a0      	strb	r0, [r4, #2]
   1e2e2:	2221      	movs	r2, #33	; 0x21
   1e2e4:	1d29      	adds	r1, r5, #4
   1e2e6:	1ce0      	adds	r0, r4, #3
   1e2e8:	f004 feff 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e2ec:	2022      	movs	r0, #34	; 0x22
   1e2ee:	e195      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e2f0:	200a      	movs	r0, #10
   1e2f2:	f7ee ff85 	bl	d200 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   1e2f6:	2800      	cmp	r0, #0
   1e2f8:	4629      	mov	r1, r5
   1e2fa:	4620      	mov	r0, r4
   1e2fc:	d002      	beq.n	1e304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x154>
   1e2fe:	f000 fa96 	bl	1e82e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
   1e302:	e189      	b.n	1e618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
   1e304:	f000 fa6a 	bl	1e7dc <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
   1e308:	e186      	b.n	1e618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
   1e30a:	7026      	strb	r6, [r4, #0]
   1e30c:	2014      	movs	r0, #20
   1e30e:	70a0      	strb	r0, [r4, #2]
   1e310:	7928      	ldrb	r0, [r5, #4]
   1e312:	70e0      	strb	r0, [r4, #3]
   1e314:	88a8      	ldrh	r0, [r5, #4]
   1e316:	0a00      	lsrs	r0, r0, #8
   1e318:	7120      	strb	r0, [r4, #4]
   1e31a:	e155      	b.n	1e5c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x418>
   1e31c:	203e      	movs	r0, #62	; 0x3e
   1e31e:	7020      	strb	r0, [r4, #0]
   1e320:	2004      	movs	r0, #4
   1e322:	7010      	strb	r0, [r2, #0]
   1e324:	6868      	ldr	r0, [r5, #4]
   1e326:	6008      	str	r0, [r1, #0]
   1e328:	68a8      	ldr	r0, [r5, #8]
   1e32a:	6048      	str	r0, [r1, #4]
   1e32c:	89a8      	ldrh	r0, [r5, #12]
   1e32e:	8108      	strh	r0, [r1, #8]
   1e330:	7ba8      	ldrb	r0, [r5, #14]
   1e332:	7288      	strb	r0, [r1, #10]
   1e334:	200c      	movs	r0, #12
   1e336:	e171      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e338:	7026      	strb	r6, [r4, #0]
   1e33a:	2003      	movs	r0, #3
   1e33c:	70a0      	strb	r0, [r4, #2]
   1e33e:	7928      	ldrb	r0, [r5, #4]
   1e340:	70e0      	strb	r0, [r4, #3]
   1e342:	79a8      	ldrb	r0, [r5, #6]
   1e344:	7120      	strb	r0, [r4, #4]
   1e346:	88e8      	ldrh	r0, [r5, #6]
   1e348:	0a00      	lsrs	r0, r0, #8
   1e34a:	7160      	strb	r0, [r4, #5]
   1e34c:	7a28      	ldrb	r0, [r5, #8]
   1e34e:	71a0      	strb	r0, [r4, #6]
   1e350:	8928      	ldrh	r0, [r5, #8]
   1e352:	0a00      	lsrs	r0, r0, #8
   1e354:	71e0      	strb	r0, [r4, #7]
   1e356:	7aa8      	ldrb	r0, [r5, #10]
   1e358:	7220      	strb	r0, [r4, #8]
   1e35a:	8968      	ldrh	r0, [r5, #10]
   1e35c:	0a00      	lsrs	r0, r0, #8
   1e35e:	7260      	strb	r0, [r4, #9]
   1e360:	7b28      	ldrb	r0, [r5, #12]
   1e362:	72a0      	strb	r0, [r4, #10]
   1e364:	89a8      	ldrh	r0, [r5, #12]
   1e366:	0a00      	lsrs	r0, r0, #8
   1e368:	72e0      	strb	r0, [r4, #11]
   1e36a:	e210      	b.n	1e78e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5de>
   1e36c:	7026      	strb	r6, [r4, #0]
   1e36e:	2005      	movs	r0, #5
   1e370:	70a0      	strb	r0, [r4, #2]
   1e372:	7928      	ldrb	r0, [r5, #4]
   1e374:	70e0      	strb	r0, [r4, #3]
   1e376:	88a8      	ldrh	r0, [r5, #4]
   1e378:	0a00      	lsrs	r0, r0, #8
   1e37a:	7120      	strb	r0, [r4, #4]
   1e37c:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1e380:	f8c4 0005 	str.w	r0, [r4, #5]
   1e384:	f8d5 000a 	ldr.w	r0, [r5, #10]
   1e388:	f8c4 0009 	str.w	r0, [r4, #9]
   1e38c:	89e8      	ldrh	r0, [r5, #14]
   1e38e:	f8a4 000d 	strh.w	r0, [r4, #13]
   1e392:	e221      	b.n	1e7d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x628>
   1e394:	e20b      	b.n	1e7ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5fe>
   1e396:	e1de      	b.n	1e756 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5a6>
   1e398:	e1bf      	b.n	1e71a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x56a>
   1e39a:	e1ea      	b.n	1e772 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5c2>
   1e39c:	e1f9      	b.n	1e792 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5e2>
   1e39e:	e1b1      	b.n	1e704 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x554>
   1e3a0:	e1a9      	b.n	1e6f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x546>
   1e3a2:	e196      	b.n	1e6d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x522>
   1e3a4:	e13f      	b.n	1e626 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x476>
   1e3a6:	e111      	b.n	1e5cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41c>
   1e3a8:	e108      	b.n	1e5bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x40c>
   1e3aa:	e0fa      	b.n	1e5a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f2>
   1e3ac:	e0e2      	b.n	1e574 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c4>
   1e3ae:	e0de      	b.n	1e56e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3be>
   1e3b0:	e0d5      	b.n	1e55e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
   1e3b2:	e0ab      	b.n	1e50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35c>
   1e3b4:	e099      	b.n	1e4ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
   1e3b6:	e083      	b.n	1e4c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
   1e3b8:	e087      	b.n	1e4ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x31a>
   1e3ba:	e02e      	b.n	1e41a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
   1e3bc:	e02a      	b.n	1e414 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
   1e3be:	e03f      	b.n	1e440 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x290>
   1e3c0:	e039      	b.n	1e436 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
   1e3c2:	e01d      	b.n	1e400 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
   1e3c4:	e011      	b.n	1e3ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
   1e3c6:	e004      	b.n	1e3d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x222>
   1e3c8:	e000      	b.n	1e3cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21c>
   1e3ca:	e042      	b.n	1e452 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
   1e3cc:	f884 a000 	strb.w	sl, [r4]
   1e3d0:	e038      	b.n	1e444 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x294>
   1e3d2:	2005      	movs	r0, #5
   1e3d4:	7020      	strb	r0, [r4, #0]
   1e3d6:	7928      	ldrb	r0, [r5, #4]
   1e3d8:	70a0      	strb	r0, [r4, #2]
   1e3da:	7968      	ldrb	r0, [r5, #5]
   1e3dc:	70e0      	strb	r0, [r4, #3]
   1e3de:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1e3e2:	0a00      	lsrs	r0, r0, #8
   1e3e4:	7120      	strb	r0, [r4, #4]
   1e3e6:	79e8      	ldrb	r0, [r5, #7]
   1e3e8:	e194      	b.n	1e714 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x564>
   1e3ea:	2008      	movs	r0, #8
   1e3ec:	7020      	strb	r0, [r4, #0]
   1e3ee:	7928      	ldrb	r0, [r5, #4]
   1e3f0:	70a0      	strb	r0, [r4, #2]
   1e3f2:	79a8      	ldrb	r0, [r5, #6]
   1e3f4:	70e0      	strb	r0, [r4, #3]
   1e3f6:	88e8      	ldrh	r0, [r5, #6]
   1e3f8:	0a00      	lsrs	r0, r0, #8
   1e3fa:	7120      	strb	r0, [r4, #4]
   1e3fc:	7a28      	ldrb	r0, [r5, #8]
   1e3fe:	e189      	b.n	1e714 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x564>
   1e400:	2030      	movs	r0, #48	; 0x30
   1e402:	7020      	strb	r0, [r4, #0]
   1e404:	7928      	ldrb	r0, [r5, #4]
   1e406:	70a0      	strb	r0, [r4, #2]
   1e408:	79a8      	ldrb	r0, [r5, #6]
   1e40a:	70e0      	strb	r0, [r4, #3]
   1e40c:	88e8      	ldrh	r0, [r5, #6]
   1e40e:	0a00      	lsrs	r0, r0, #8
   1e410:	7120      	strb	r0, [r4, #4]
   1e412:	e0aa      	b.n	1e56a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ba>
   1e414:	7026      	strb	r6, [r4, #0]
   1e416:	2007      	movs	r0, #7
   1e418:	e181      	b.n	1e71e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x56e>
   1e41a:	7026      	strb	r6, [r4, #0]
   1e41c:	f884 e002 	strb.w	lr, [r4, #2]
   1e420:	7928      	ldrb	r0, [r5, #4]
   1e422:	70e0      	strb	r0, [r4, #3]
   1e424:	79a8      	ldrb	r0, [r5, #6]
   1e426:	7120      	strb	r0, [r4, #4]
   1e428:	88e8      	ldrh	r0, [r5, #6]
   1e42a:	0a00      	lsrs	r0, r0, #8
   1e42c:	7160      	strb	r0, [r4, #5]
   1e42e:	7a28      	ldrb	r0, [r5, #8]
   1e430:	71a0      	strb	r0, [r4, #6]
   1e432:	7a68      	ldrb	r0, [r5, #9]
   1e434:	e056      	b.n	1e4e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x334>
   1e436:	1d29      	adds	r1, r5, #4
   1e438:	4620      	mov	r0, r4
   1e43a:	f7ee fea1 	bl	d180 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY+0xc>
   1e43e:	e0eb      	b.n	1e618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
   1e440:	2057      	movs	r0, #87	; 0x57
   1e442:	7020      	strb	r0, [r4, #0]
   1e444:	7928      	ldrb	r0, [r5, #4]
   1e446:	70a0      	strb	r0, [r4, #2]
   1e448:	88a8      	ldrh	r0, [r5, #4]
   1e44a:	0a00      	lsrs	r0, r0, #8
   1e44c:	70e0      	strb	r0, [r4, #3]
   1e44e:	2002      	movs	r0, #2
   1e450:	e0e4      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e452:	7026      	strb	r6, [r4, #0]
   1e454:	220d      	movs	r2, #13
   1e456:	70a2      	strb	r2, [r4, #2]
   1e458:	792a      	ldrb	r2, [r5, #4]
   1e45a:	70e2      	strb	r2, [r4, #3]
   1e45c:	89ea      	ldrh	r2, [r5, #14]
   1e45e:	80a2      	strh	r2, [r4, #4]
   1e460:	796a      	ldrb	r2, [r5, #5]
   1e462:	71a2      	strb	r2, [r4, #6]
   1e464:	f8d5 2006 	ldr.w	r2, [r5, #6]
   1e468:	f8c4 2007 	str.w	r2, [r4, #7]
   1e46c:	896a      	ldrh	r2, [r5, #10]
   1e46e:	f8a4 200b 	strh.w	r2, [r4, #11]
   1e472:	7c2a      	ldrb	r2, [r5, #16]
   1e474:	4620      	mov	r0, r4
   1e476:	7362      	strb	r2, [r4, #13]
   1e478:	1d29      	adds	r1, r5, #4
   1e47a:	7c6a      	ldrb	r2, [r5, #17]
   1e47c:	7382      	strb	r2, [r0, #14]
   1e47e:	7b8a      	ldrb	r2, [r1, #14]
   1e480:	73c2      	strb	r2, [r0, #15]
   1e482:	7e8a      	ldrb	r2, [r1, #26]
   1e484:	7402      	strb	r2, [r0, #16]
   1e486:	7a4a      	ldrb	r2, [r1, #9]
   1e488:	7442      	strb	r2, [r0, #17]
   1e48a:	f8b1 2011 	ldrh.w	r2, [r1, #17]
   1e48e:	f8ad 2000 	strh.w	r2, [sp]
   1e492:	8242      	strh	r2, [r0, #18]
   1e494:	7cca      	ldrb	r2, [r1, #19]
   1e496:	7502      	strb	r2, [r0, #20]
   1e498:	694a      	ldr	r2, [r1, #20]
   1e49a:	f8c0 2015 	str.w	r2, [r0, #21]
   1e49e:	8b0a      	ldrh	r2, [r1, #24]
   1e4a0:	f8a0 2019 	strh.w	r2, [r0, #25]
   1e4a4:	7a0a      	ldrb	r2, [r1, #8]
   1e4a6:	76c2      	strb	r2, [r0, #27]
   1e4a8:	7a0d      	ldrb	r5, [r1, #8]
   1e4aa:	2de5      	cmp	r5, #229	; 0xe5
   1e4ac:	d300      	bcc.n	1e4b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x300>
   1e4ae:	25e5      	movs	r5, #229	; 0xe5
   1e4b0:	462a      	mov	r2, r5
   1e4b2:	301c      	adds	r0, #28
   1e4b4:	311c      	adds	r1, #28
   1e4b6:	f004 fe18 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e4ba:	351a      	adds	r5, #26
   1e4bc:	b2e8      	uxtb	r0, r5
   1e4be:	e0ab      	b.n	1e618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
   1e4c0:	7026      	strb	r6, [r4, #0]
   1e4c2:	f884 a002 	strb.w	sl, [r4, #2]
   1e4c6:	2001      	movs	r0, #1
   1e4c8:	e0a8      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e4ca:	7026      	strb	r6, [r4, #0]
   1e4cc:	f884 9002 	strb.w	r9, [r4, #2]
   1e4d0:	7928      	ldrb	r0, [r5, #4]
   1e4d2:	70e0      	strb	r0, [r4, #3]
   1e4d4:	7968      	ldrb	r0, [r5, #5]
   1e4d6:	7120      	strb	r0, [r4, #4]
   1e4d8:	79a8      	ldrb	r0, [r5, #6]
   1e4da:	7160      	strb	r0, [r4, #5]
   1e4dc:	88e8      	ldrh	r0, [r5, #6]
   1e4de:	0a00      	lsrs	r0, r0, #8
   1e4e0:	71a0      	strb	r0, [r4, #6]
   1e4e2:	7a28      	ldrb	r0, [r5, #8]
   1e4e4:	71e0      	strb	r0, [r4, #7]
   1e4e6:	2006      	movs	r0, #6
   1e4e8:	e098      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e4ea:	7026      	strb	r6, [r4, #0]
   1e4ec:	2024      	movs	r0, #36	; 0x24
   1e4ee:	f7ee fe87 	bl	d200 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   1e4f2:	b108      	cbz	r0, 1e4f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x348>
   1e4f4:	2024      	movs	r0, #36	; 0x24
   1e4f6:	e05e      	b.n	1e5b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x406>
   1e4f8:	200e      	movs	r0, #14
   1e4fa:	70a0      	strb	r0, [r4, #2]
   1e4fc:	260f      	movs	r6, #15
   1e4fe:	4632      	mov	r2, r6
   1e500:	1d29      	adds	r1, r5, #4
   1e502:	1ce0      	adds	r0, r4, #3
   1e504:	f004 fdf1 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e508:	1c70      	adds	r0, r6, #1
   1e50a:	e085      	b.n	1e618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
   1e50c:	7026      	strb	r6, [r4, #0]
   1e50e:	2025      	movs	r0, #37	; 0x25
   1e510:	f7ee fe76 	bl	d200 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   1e514:	b140      	cbz	r0, 1e528 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x378>
   1e516:	2025      	movs	r0, #37	; 0x25
   1e518:	70a0      	strb	r0, [r4, #2]
   1e51a:	260a      	movs	r6, #10
   1e51c:	4632      	mov	r2, r6
   1e51e:	1d29      	adds	r1, r5, #4
   1e520:	1ce0      	adds	r0, r4, #3
   1e522:	f004 fde2 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e526:	e00f      	b.n	1e548 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x398>
   1e528:	200f      	movs	r0, #15
   1e52a:	70a0      	strb	r0, [r4, #2]
   1e52c:	88a9      	ldrh	r1, [r5, #4]
   1e52e:	f8a4 1003 	strh.w	r1, [r4, #3]
   1e532:	79a9      	ldrb	r1, [r5, #6]
   1e534:	7161      	strb	r1, [r4, #5]
   1e536:	79e9      	ldrb	r1, [r5, #7]
   1e538:	71a1      	strb	r1, [r4, #6]
   1e53a:	7a29      	ldrb	r1, [r5, #8]
   1e53c:	71e1      	strb	r1, [r4, #7]
   1e53e:	7b29      	ldrb	r1, [r5, #12]
   1e540:	7221      	strb	r1, [r4, #8]
   1e542:	7b69      	ldrb	r1, [r5, #13]
   1e544:	7261      	strb	r1, [r4, #9]
   1e546:	2607      	movs	r6, #7
   1e548:	19a0      	adds	r0, r4, r6
   1e54a:	7b6a      	ldrb	r2, [r5, #13]
   1e54c:	f105 010e 	add.w	r1, r5, #14
   1e550:	1cc0      	adds	r0, r0, #3
   1e552:	f004 fdca 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e556:	7b68      	ldrb	r0, [r5, #13]
   1e558:	1c76      	adds	r6, r6, #1
   1e55a:	4430      	add	r0, r6
   1e55c:	e05c      	b.n	1e618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x468>
   1e55e:	7026      	strb	r6, [r4, #0]
   1e560:	f884 b002 	strb.w	fp, [r4, #2]
   1e564:	88a8      	ldrh	r0, [r5, #4]
   1e566:	f8a4 0003 	strh.w	r0, [r4, #3]
   1e56a:	2003      	movs	r0, #3
   1e56c:	e056      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e56e:	7026      	strb	r6, [r4, #0]
   1e570:	2020      	movs	r0, #32
   1e572:	e0f2      	b.n	1e75a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5aa>
   1e574:	7026      	strb	r6, [r4, #0]
   1e576:	2021      	movs	r0, #33	; 0x21
   1e578:	70a0      	strb	r0, [r4, #2]
   1e57a:	7928      	ldrb	r0, [r5, #4]
   1e57c:	70e0      	strb	r0, [r4, #3]
   1e57e:	7968      	ldrb	r0, [r5, #5]
   1e580:	7120      	strb	r0, [r4, #4]
   1e582:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1e586:	0a00      	lsrs	r0, r0, #8
   1e588:	7160      	strb	r0, [r4, #5]
   1e58a:	79e8      	ldrb	r0, [r5, #7]
   1e58c:	71a0      	strb	r0, [r4, #6]
   1e58e:	7a28      	ldrb	r0, [r5, #8]
   1e590:	71e0      	strb	r0, [r4, #7]
   1e592:	7a68      	ldrb	r0, [r5, #9]
   1e594:	7220      	strb	r0, [r4, #8]
   1e596:	7aa8      	ldrb	r0, [r5, #10]
   1e598:	7260      	strb	r0, [r4, #9]
   1e59a:	7ae8      	ldrb	r0, [r5, #11]
   1e59c:	72a0      	strb	r0, [r4, #10]
   1e59e:	2009      	movs	r0, #9
   1e5a0:	e03c      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e5a2:	7026      	strb	r6, [r4, #0]
   1e5a4:	2026      	movs	r0, #38	; 0x26
   1e5a6:	f7ee fe2b 	bl	d200 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   1e5aa:	b118      	cbz	r0, 1e5b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
   1e5ac:	2026      	movs	r0, #38	; 0x26
   1e5ae:	70a0      	strb	r0, [r4, #2]
   1e5b0:	2617      	movs	r6, #23
   1e5b2:	e7a4      	b.n	1e4fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x34e>
   1e5b4:	2018      	movs	r0, #24
   1e5b6:	70a0      	strb	r0, [r4, #2]
   1e5b8:	2613      	movs	r6, #19
   1e5ba:	e7a0      	b.n	1e4fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x34e>
   1e5bc:	7026      	strb	r6, [r4, #0]
   1e5be:	2027      	movs	r0, #39	; 0x27
   1e5c0:	70a0      	strb	r0, [r4, #2]
   1e5c2:	88a8      	ldrh	r0, [r5, #4]
   1e5c4:	f8a4 0003 	strh.w	r0, [r4, #3]
   1e5c8:	79a8      	ldrb	r0, [r5, #6]
   1e5ca:	e0a3      	b.n	1e714 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x564>
   1e5cc:	7026      	strb	r6, [r4, #0]
   1e5ce:	2028      	movs	r0, #40	; 0x28
   1e5d0:	70a0      	strb	r0, [r4, #2]
   1e5d2:	1ce7      	adds	r7, r4, #3
   1e5d4:	6868      	ldr	r0, [r5, #4]
   1e5d6:	2600      	movs	r6, #0
   1e5d8:	f8c4 0003 	str.w	r0, [r4, #3]
   1e5dc:	46b0      	mov	r8, r6
   1e5de:	f105 0908 	add.w	r9, r5, #8
   1e5e2:	e014      	b.n	1e60e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x45e>
   1e5e4:	19b8      	adds	r0, r7, r6
   1e5e6:	4649      	mov	r1, r9
   1e5e8:	1d05      	adds	r5, r0, #4
   1e5ea:	f851 0b04 	ldr.w	r0, [r1], #4
   1e5ee:	6028      	str	r0, [r5, #0]
   1e5f0:	f831 0b02 	ldrh.w	r0, [r1], #2
   1e5f4:	80a8      	strh	r0, [r5, #4]
   1e5f6:	796a      	ldrb	r2, [r5, #5]
   1e5f8:	1da8      	adds	r0, r5, #6
   1e5fa:	f004 fd76 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1e5fe:	7968      	ldrb	r0, [r5, #5]
   1e600:	1db6      	adds	r6, r6, #6
   1e602:	4430      	add	r0, r6
   1e604:	b286      	uxth	r6, r0
   1e606:	f108 0001 	add.w	r0, r8, #1
   1e60a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   1e60e:	78f9      	ldrb	r1, [r7, #3]
   1e610:	4541      	cmp	r1, r8
   1e612:	d8e7      	bhi.n	1e5e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x434>
   1e614:	1d76      	adds	r6, r6, #5
   1e616:	b2b0      	uxth	r0, r6
   1e618:	2800      	cmp	r0, #0
   1e61a:	d002      	beq.n	1e622 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x472>
   1e61c:	7060      	strb	r0, [r4, #1]
   1e61e:	1c80      	adds	r0, r0, #2
   1e620:	b280      	uxth	r0, r0
   1e622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e626:	7026      	strb	r6, [r4, #0]
   1e628:	2019      	movs	r0, #25
   1e62a:	70a0      	strb	r0, [r4, #2]
   1e62c:	7928      	ldrb	r0, [r5, #4]
   1e62e:	70e0      	strb	r0, [r4, #3]
   1e630:	7968      	ldrb	r0, [r5, #5]
   1e632:	7120      	strb	r0, [r4, #4]
   1e634:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   1e638:	0a00      	lsrs	r0, r0, #8
   1e63a:	7160      	strb	r0, [r4, #5]
   1e63c:	88e8      	ldrh	r0, [r5, #6]
   1e63e:	0a00      	lsrs	r0, r0, #8
   1e640:	71a0      	strb	r0, [r4, #6]
   1e642:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1e646:	0c00      	lsrs	r0, r0, #16
   1e648:	71e0      	strb	r0, [r4, #7]
   1e64a:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1e64e:	0e00      	lsrs	r0, r0, #24
   1e650:	7220      	strb	r0, [r4, #8]
   1e652:	f8b5 0009 	ldrh.w	r0, [r5, #9]
   1e656:	0a00      	lsrs	r0, r0, #8
   1e658:	7260      	strb	r0, [r4, #9]
   1e65a:	f8d5 0009 	ldr.w	r0, [r5, #9]
   1e65e:	0c00      	lsrs	r0, r0, #16
   1e660:	72a0      	strb	r0, [r4, #10]
   1e662:	f8d5 0009 	ldr.w	r0, [r5, #9]
   1e666:	0e00      	lsrs	r0, r0, #24
   1e668:	72e0      	strb	r0, [r4, #11]
   1e66a:	89a8      	ldrh	r0, [r5, #12]
   1e66c:	0a00      	lsrs	r0, r0, #8
   1e66e:	7320      	strb	r0, [r4, #12]
   1e670:	68e8      	ldr	r0, [r5, #12]
   1e672:	0c00      	lsrs	r0, r0, #16
   1e674:	7360      	strb	r0, [r4, #13]
   1e676:	68e8      	ldr	r0, [r5, #12]
   1e678:	0e00      	lsrs	r0, r0, #24
   1e67a:	73a0      	strb	r0, [r4, #14]
   1e67c:	f8b5 000f 	ldrh.w	r0, [r5, #15]
   1e680:	0a00      	lsrs	r0, r0, #8
   1e682:	73e0      	strb	r0, [r4, #15]
   1e684:	f8d5 000f 	ldr.w	r0, [r5, #15]
   1e688:	0c00      	lsrs	r0, r0, #16
   1e68a:	7420      	strb	r0, [r4, #16]
   1e68c:	f8d5 000f 	ldr.w	r0, [r5, #15]
   1e690:	0e00      	lsrs	r0, r0, #24
   1e692:	7460      	strb	r0, [r4, #17]
   1e694:	7ce8      	ldrb	r0, [r5, #19]
   1e696:	74a0      	strb	r0, [r4, #18]
   1e698:	7d28      	ldrb	r0, [r5, #20]
   1e69a:	74e0      	strb	r0, [r4, #19]
   1e69c:	7d68      	ldrb	r0, [r5, #21]
   1e69e:	7520      	strb	r0, [r4, #20]
   1e6a0:	7da8      	ldrb	r0, [r5, #22]
   1e6a2:	7560      	strb	r0, [r4, #21]
   1e6a4:	7de8      	ldrb	r0, [r5, #23]
   1e6a6:	75a0      	strb	r0, [r4, #22]
   1e6a8:	7e28      	ldrb	r0, [r5, #24]
   1e6aa:	75e0      	strb	r0, [r4, #23]
   1e6ac:	7e68      	ldrb	r0, [r5, #25]
   1e6ae:	7620      	strb	r0, [r4, #24]
   1e6b0:	7ea8      	ldrb	r0, [r5, #26]
   1e6b2:	7660      	strb	r0, [r4, #25]
   1e6b4:	8b68      	ldrh	r0, [r5, #26]
   1e6b6:	0a00      	lsrs	r0, r0, #8
   1e6b8:	76a0      	strb	r0, [r4, #26]
   1e6ba:	7f28      	ldrb	r0, [r5, #28]
   1e6bc:	76e0      	strb	r0, [r4, #27]
   1e6be:	8ba8      	ldrh	r0, [r5, #28]
   1e6c0:	0a00      	lsrs	r0, r0, #8
   1e6c2:	7720      	strb	r0, [r4, #28]
   1e6c4:	7fa8      	ldrb	r0, [r5, #30]
   1e6c6:	7760      	strb	r0, [r4, #29]
   1e6c8:	8be8      	ldrh	r0, [r5, #30]
   1e6ca:	0a00      	lsrs	r0, r0, #8
   1e6cc:	77a0      	strb	r0, [r4, #30]
   1e6ce:	201d      	movs	r0, #29
   1e6d0:	e7a4      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e6d2:	7026      	strb	r6, [r4, #0]
   1e6d4:	201a      	movs	r0, #26
   1e6d6:	70a0      	strb	r0, [r4, #2]
   1e6d8:	7928      	ldrb	r0, [r5, #4]
   1e6da:	70e0      	strb	r0, [r4, #3]
   1e6dc:	88a8      	ldrh	r0, [r5, #4]
   1e6de:	0a00      	lsrs	r0, r0, #8
   1e6e0:	7120      	strb	r0, [r4, #4]
   1e6e2:	79a8      	ldrb	r0, [r5, #6]
   1e6e4:	7160      	strb	r0, [r4, #5]
   1e6e6:	88e8      	ldrh	r0, [r5, #6]
   1e6e8:	0a00      	lsrs	r0, r0, #8
   1e6ea:	71a0      	strb	r0, [r4, #6]
   1e6ec:	7a28      	ldrb	r0, [r5, #8]
   1e6ee:	71e0      	strb	r0, [r4, #7]
   1e6f0:	7a68      	ldrb	r0, [r5, #9]
   1e6f2:	7220      	strb	r0, [r4, #8]
   1e6f4:	e059      	b.n	1e7aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5fa>
   1e6f6:	203e      	movs	r0, #62	; 0x3e
   1e6f8:	7020      	strb	r0, [r4, #0]
   1e6fa:	201f      	movs	r0, #31
   1e6fc:	7010      	strb	r0, [r2, #0]
   1e6fe:	6868      	ldr	r0, [r5, #4]
   1e700:	6008      	str	r0, [r1, #0]
   1e702:	e034      	b.n	1e76e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x5be>
   1e704:	7027      	strb	r7, [r4, #0]
   1e706:	20a1      	movs	r0, #161	; 0xa1
   1e708:	70a0      	strb	r0, [r4, #2]
   1e70a:	7928      	ldrb	r0, [r5, #4]
   1e70c:	70e0      	strb	r0, [r4, #3]
   1e70e:	7968      	ldrb	r0, [r5, #5]
   1e710:	7120      	strb	r0, [r4, #4]
   1e712:	2000      	movs	r0, #0
   1e714:	7160      	strb	r0, [r4, #5]
   1e716:	2004      	movs	r0, #4
   1e718:	e780      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e71a:	7027      	strb	r7, [r4, #0]
   1e71c:	20a2      	movs	r0, #162	; 0xa2
   1e71e:	70a0      	strb	r0, [r4, #2]
   1e720:	7928      	ldrb	r0, [r5, #4]
   1e722:	70e0      	strb	r0, [r4, #3]
   1e724:	88a8      	ldrh	r0, [r5, #4]
   1e726:	0a00      	lsrs	r0, r0, #8
   1e728:	7120      	strb	r0, [r4, #4]
   1e72a:	79a8      	ldrb	r0, [r5, #6]
   1e72c:	7160      	strb	r0, [r4, #5]
   1e72e:	88e8      	ldrh	r0, [r5, #6]
   1e730:	0a00      	lsrs	r0, r0, #8
   1e732:	71a0      	strb	r0, [r4, #6]
   1e734:	7a28      	ldrb	r0, [r5, #8]
   1e736:	71e0      	strb	r0, [r4, #7]
   1e738:	8928      	ldrh	r0, [r5, #8]
   1e73a:	0a00      	lsrs	r0, r0, #8
   1e73c:	7220      	strb	r0, [r4, #8]
   1e73e:	7aa8      	ldrb	r0, [r5, #10]
   1e740:	7260      	strb	r0, [r4, #9]
   1e742:	8968      	ldrh	r0, [r5, #10]
   1e744:	0a00      	lsrs	r0, r0, #8
   1e746:	72a0      	strb	r0, [r4, #10]
   1e748:	7b28      	ldrb	r0, [r5, #12]
   1e74a:	72e0      	strb	r0, [r4, #11]
   1e74c:	89a8      	ldrh	r0, [r5, #12]
   1e74e:	0a00      	lsrs	r0, r0, #8
   1e750:	7320      	strb	r0, [r4, #12]
   1e752:	200b      	movs	r0, #11
   1e754:	e762      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e756:	7027      	strb	r7, [r4, #0]
   1e758:	20a3      	movs	r0, #163	; 0xa3
   1e75a:	70a0      	strb	r0, [r4, #2]
   1e75c:	7928      	ldrb	r0, [r5, #4]
   1e75e:	70e0      	strb	r0, [r4, #3]
   1e760:	88a8      	ldrh	r0, [r5, #4]
   1e762:	0a00      	lsrs	r0, r0, #8
   1e764:	7120      	strb	r0, [r4, #4]
   1e766:	79a8      	ldrb	r0, [r5, #6]
   1e768:	7160      	strb	r0, [r4, #5]
   1e76a:	79e8      	ldrb	r0, [r5, #7]
   1e76c:	71a0      	strb	r0, [r4, #6]
   1e76e:	2005      	movs	r0, #5
   1e770:	e754      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e772:	7026      	strb	r6, [r4, #0]
   1e774:	2013      	movs	r0, #19
   1e776:	70a0      	strb	r0, [r4, #2]
   1e778:	7928      	ldrb	r0, [r5, #4]
   1e77a:	70e0      	strb	r0, [r4, #3]
   1e77c:	7968      	ldrb	r0, [r5, #5]
   1e77e:	7120      	strb	r0, [r4, #4]
   1e780:	f8d5 0006 	ldr.w	r0, [r5, #6]
   1e784:	f8c4 0005 	str.w	r0, [r4, #5]
   1e788:	8968      	ldrh	r0, [r5, #10]
   1e78a:	f8a4 0009 	strh.w	r0, [r4, #9]
   1e78e:	200a      	movs	r0, #10
   1e790:	e744      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e792:	7027      	strb	r7, [r4, #0]
   1e794:	20a4      	movs	r0, #164	; 0xa4
   1e796:	70a0      	strb	r0, [r4, #2]
   1e798:	7928      	ldrb	r0, [r5, #4]
   1e79a:	70e0      	strb	r0, [r4, #3]
   1e79c:	88a8      	ldrh	r0, [r5, #4]
   1e79e:	0a00      	lsrs	r0, r0, #8
   1e7a0:	7120      	strb	r0, [r4, #4]
   1e7a2:	79a8      	ldrb	r0, [r5, #6]
   1e7a4:	7160      	strb	r0, [r4, #5]
   1e7a6:	79e8      	ldrb	r0, [r5, #7]
   1e7a8:	71a0      	strb	r0, [r4, #6]
   1e7aa:	2007      	movs	r0, #7
   1e7ac:	e736      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>
   1e7ae:	7027      	strb	r7, [r4, #0]
   1e7b0:	2080      	movs	r0, #128	; 0x80
   1e7b2:	70a0      	strb	r0, [r4, #2]
   1e7b4:	88a9      	ldrh	r1, [r5, #4]
   1e7b6:	f8a4 1003 	strh.w	r1, [r4, #3]
   1e7ba:	88e9      	ldrh	r1, [r5, #6]
   1e7bc:	f8a4 1005 	strh.w	r1, [r4, #5]
   1e7c0:	7a29      	ldrb	r1, [r5, #8]
   1e7c2:	71e1      	strb	r1, [r4, #7]
   1e7c4:	8969      	ldrh	r1, [r5, #10]
   1e7c6:	8121      	strh	r1, [r4, #8]
   1e7c8:	89a9      	ldrh	r1, [r5, #12]
   1e7ca:	8161      	strh	r1, [r4, #10]
   1e7cc:	89e9      	ldrh	r1, [r5, #14]
   1e7ce:	81a1      	strh	r1, [r4, #12]
   1e7d0:	7c29      	ldrb	r1, [r5, #16]
   1e7d2:	f001 0101 	and.w	r1, r1, #1
   1e7d6:	73a1      	strb	r1, [r4, #14]
   1e7d8:	200d      	movs	r0, #13
   1e7da:	e71f      	b.n	1e61c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x46c>

0001e7dc <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
   1e7dc:	223e      	movs	r2, #62	; 0x3e
   1e7de:	7002      	strb	r2, [r0, #0]
   1e7e0:	2201      	movs	r2, #1
   1e7e2:	7082      	strb	r2, [r0, #2]
   1e7e4:	790a      	ldrb	r2, [r1, #4]
   1e7e6:	70c2      	strb	r2, [r0, #3]
   1e7e8:	f811 2f05 	ldrb.w	r2, [r1, #5]!
   1e7ec:	7102      	strb	r2, [r0, #4]
   1e7ee:	880a      	ldrh	r2, [r1, #0]
   1e7f0:	0a12      	lsrs	r2, r2, #8
   1e7f2:	7142      	strb	r2, [r0, #5]
   1e7f4:	788a      	ldrb	r2, [r1, #2]
   1e7f6:	7182      	strb	r2, [r0, #6]
   1e7f8:	78ca      	ldrb	r2, [r1, #3]
   1e7fa:	71c2      	strb	r2, [r0, #7]
   1e7fc:	684a      	ldr	r2, [r1, #4]
   1e7fe:	6082      	str	r2, [r0, #8]
   1e800:	890a      	ldrh	r2, [r1, #8]
   1e802:	8182      	strh	r2, [r0, #12]
   1e804:	7d8a      	ldrb	r2, [r1, #22]
   1e806:	7382      	strb	r2, [r0, #14]
   1e808:	8aca      	ldrh	r2, [r1, #22]
   1e80a:	0a12      	lsrs	r2, r2, #8
   1e80c:	73c2      	strb	r2, [r0, #15]
   1e80e:	7e0a      	ldrb	r2, [r1, #24]
   1e810:	7402      	strb	r2, [r0, #16]
   1e812:	8b0a      	ldrh	r2, [r1, #24]
   1e814:	0a12      	lsrs	r2, r2, #8
   1e816:	7442      	strb	r2, [r0, #17]
   1e818:	7e8a      	ldrb	r2, [r1, #26]
   1e81a:	7482      	strb	r2, [r0, #18]
   1e81c:	8b4a      	ldrh	r2, [r1, #26]
   1e81e:	0a12      	lsrs	r2, r2, #8
   1e820:	74c2      	strb	r2, [r0, #19]
   1e822:	7f09      	ldrb	r1, [r1, #28]
   1e824:	7501      	strb	r1, [r0, #20]
   1e826:	2113      	movs	r1, #19
   1e828:	7041      	strb	r1, [r0, #1]
   1e82a:	4608      	mov	r0, r1
   1e82c:	4770      	bx	lr
   1e82e:	223e      	movs	r2, #62	; 0x3e
   1e830:	7002      	strb	r2, [r0, #0]
   1e832:	220a      	movs	r2, #10
   1e834:	7082      	strb	r2, [r0, #2]
   1e836:	790a      	ldrb	r2, [r1, #4]
   1e838:	70c2      	strb	r2, [r0, #3]
   1e83a:	f811 2f05 	ldrb.w	r2, [r1, #5]!
   1e83e:	7102      	strb	r2, [r0, #4]
   1e840:	880a      	ldrh	r2, [r1, #0]
   1e842:	0a12      	lsrs	r2, r2, #8
   1e844:	7142      	strb	r2, [r0, #5]
   1e846:	788a      	ldrb	r2, [r1, #2]
   1e848:	7182      	strb	r2, [r0, #6]
   1e84a:	78ca      	ldrb	r2, [r1, #3]
   1e84c:	71c2      	strb	r2, [r0, #7]
   1e84e:	684a      	ldr	r2, [r1, #4]
   1e850:	6082      	str	r2, [r0, #8]
   1e852:	890a      	ldrh	r2, [r1, #8]
   1e854:	8182      	strh	r2, [r0, #12]
   1e856:	f8d1 200a 	ldr.w	r2, [r1, #10]
   1e85a:	f8c0 200e 	str.w	r2, [r0, #14]
   1e85e:	89ca      	ldrh	r2, [r1, #14]
   1e860:	8242      	strh	r2, [r0, #18]
   1e862:	690a      	ldr	r2, [r1, #16]
   1e864:	6142      	str	r2, [r0, #20]
   1e866:	8a8a      	ldrh	r2, [r1, #20]
   1e868:	8302      	strh	r2, [r0, #24]
   1e86a:	7d8a      	ldrb	r2, [r1, #22]
   1e86c:	7682      	strb	r2, [r0, #26]
   1e86e:	8aca      	ldrh	r2, [r1, #22]
   1e870:	0a12      	lsrs	r2, r2, #8
   1e872:	76c2      	strb	r2, [r0, #27]
   1e874:	7e0a      	ldrb	r2, [r1, #24]
   1e876:	7702      	strb	r2, [r0, #28]
   1e878:	8b0a      	ldrh	r2, [r1, #24]
   1e87a:	0a12      	lsrs	r2, r2, #8
   1e87c:	7742      	strb	r2, [r0, #29]
   1e87e:	7e8a      	ldrb	r2, [r1, #26]
   1e880:	7782      	strb	r2, [r0, #30]
   1e882:	8b4a      	ldrh	r2, [r1, #26]
   1e884:	0a12      	lsrs	r2, r2, #8
   1e886:	77c2      	strb	r2, [r0, #31]
   1e888:	7f09      	ldrb	r1, [r1, #28]
   1e88a:	f880 1020 	strb.w	r1, [r0, #32]
   1e88e:	211f      	movs	r1, #31
   1e890:	7041      	strb	r1, [r0, #1]
   1e892:	4608      	mov	r0, r1
   1e894:	4770      	bx	lr
   1e896:	094a      	lsrs	r2, r1, #5
   1e898:	f001 011f 	and.w	r1, r1, #31
   1e89c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   1e8a0:	40c8      	lsrs	r0, r1
   1e8a2:	f000 0001 	and.w	r0, r0, #1
   1e8a6:	4770      	bx	lr

0001e8a8 <sdc_hci_data_put>:
   1e8a8:	b510      	push	{r4, lr}
   1e8aa:	f06f 0415 	mvn.w	r4, #21
   1e8ae:	b120      	cbz	r0, 1e8ba <sdc_hci_data_put+0x12>
   1e8b0:	f7ff fbf6 	bl	1e0a0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   1e8b4:	b108      	cbz	r0, 1e8ba <sdc_hci_data_put+0x12>
   1e8b6:	2000      	movs	r0, #0
   1e8b8:	bd10      	pop	{r4, pc}
   1e8ba:	4620      	mov	r0, r4
   1e8bc:	bd10      	pop	{r4, pc}

0001e8be <sdc_hci_get>:
   1e8be:	b510      	push	{r4, lr}
   1e8c0:	460c      	mov	r4, r1
   1e8c2:	b130      	cbz	r0, 1e8d2 <sdc_hci_get+0x14>
   1e8c4:	b12c      	cbz	r4, 1e8d2 <sdc_hci_get+0x14>
   1e8c6:	f7ee fbe9 	bl	d09c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
   1e8ca:	b128      	cbz	r0, 1e8d8 <sdc_hci_get+0x1a>
   1e8cc:	7020      	strb	r0, [r4, #0]
   1e8ce:	2000      	movs	r0, #0
   1e8d0:	bd10      	pop	{r4, pc}
   1e8d2:	f06f 0015 	mvn.w	r0, #21
   1e8d6:	bd10      	pop	{r4, pc}
   1e8d8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e8dc:	bd10      	pop	{r4, pc}

0001e8de <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   1e8de:	f003 bb0f 	b.w	21f00 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0001e8e2 <sdc_hci_cmd_cb_read_transmit_power_level>:
   1e8e2:	f003 bb2a 	b.w	21f3a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0001e8e6 <sdc_hci_cmd_cb_set_event_mask>:
   1e8e6:	b510      	push	{r4, lr}
   1e8e8:	f7ee fca4 	bl	d234 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   1e8ec:	2000      	movs	r0, #0
   1e8ee:	bd10      	pop	{r4, pc}

0001e8f0 <sdc_hci_cmd_cb_set_event_mask_page_2>:
   1e8f0:	b510      	push	{r4, lr}
   1e8f2:	f7ee fcb1 	bl	d258 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   1e8f6:	2000      	movs	r0, #0
   1e8f8:	bd10      	pop	{r4, pc}

0001e8fa <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   1e8fa:	f003 bb3f 	b.w	21f7c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0001e8fe <sdc_hci_cmd_vs_conn_event_extend>:
   1e8fe:	b508      	push	{r3, lr}
   1e900:	7800      	ldrb	r0, [r0, #0]
   1e902:	f88d 0000 	strb.w	r0, [sp]
   1e906:	4668      	mov	r0, sp
   1e908:	f003 f9e0 	bl	21ccc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   1e90c:	bd08      	pop	{r3, pc}

0001e90e <sdc_hci_cmd_vs_conn_update>:
   1e90e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e910:	2100      	movs	r1, #0
   1e912:	9100      	str	r1, [sp, #0]
   1e914:	9101      	str	r1, [sp, #4]
   1e916:	9102      	str	r1, [sp, #8]
   1e918:	9103      	str	r1, [sp, #12]
   1e91a:	f8d0 1002 	ldr.w	r1, [r0, #2]
   1e91e:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1e922:	4291      	cmp	r1, r2
   1e924:	d304      	bcc.n	1e930 <sdc_hci_cmd_vs_conn_update+0x22>
   1e926:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1e92a:	fbb1 f1f2 	udiv	r1, r1, r2
   1e92e:	e005      	b.n	1e93c <sdc_hci_cmd_vs_conn_update+0x2e>
   1e930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e934:	fbb1 f1f2 	udiv	r1, r1, r2
   1e938:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
   1e93c:	8802      	ldrh	r2, [r0, #0]
   1e93e:	b289      	uxth	r1, r1
   1e940:	f8ad 2000 	strh.w	r2, [sp]
   1e944:	f8ad 1002 	strh.w	r1, [sp, #2]
   1e948:	f8ad 1004 	strh.w	r1, [sp, #4]
   1e94c:	88c1      	ldrh	r1, [r0, #6]
   1e94e:	f8ad 1006 	strh.w	r1, [sp, #6]
   1e952:	8900      	ldrh	r0, [r0, #8]
   1e954:	f8ad 0008 	strh.w	r0, [sp, #8]
   1e958:	4668      	mov	r0, sp
   1e95a:	f002 fe7d 	bl	21658 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
   1e95e:	b004      	add	sp, #16
   1e960:	bd10      	pop	{r4, pc}

0001e962 <sdc_hci_cmd_vs_event_length_set>:
   1e962:	f7f8 bb07 	b.w	16f74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0001e966 <sdc_hci_cmd_vs_llpm_mode_set>:
   1e966:	b508      	push	{r3, lr}
   1e968:	7800      	ldrb	r0, [r0, #0]
   1e96a:	f88d 0000 	strb.w	r0, [sp]
   1e96e:	4668      	mov	r0, sp
   1e970:	f7f8 fb0c 	bl	16f8c <sym_RWX3ARC7RXCSYIP35ROTG7DUC5BPFDQF4B6XSYQ>
   1e974:	bd08      	pop	{r3, pc}

0001e976 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
   1e976:	7881      	ldrb	r1, [r0, #2]
   1e978:	8800      	ldrh	r0, [r0, #0]
   1e97a:	f003 b952 	b.w	21c22 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0001e97e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   1e97e:	7800      	ldrb	r0, [r0, #0]
   1e980:	b100      	cbz	r0, 1e984 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   1e982:	2001      	movs	r0, #1
   1e984:	f003 b948 	b.w	21c18 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0001e988 <sdc_hci_cmd_vs_set_adv_randomness>:
   1e988:	f003 b97a 	b.w	21c80 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0001e98c <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
   1e98c:	b510      	push	{r4, lr}
   1e98e:	4604      	mov	r4, r0
   1e990:	f7fe fd4c 	bl	1d42c <mpsl_temperature_get>
   1e994:	17c1      	asrs	r1, r0, #31
   1e996:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   1e99a:	1080      	asrs	r0, r0, #2
   1e99c:	287f      	cmp	r0, #127	; 0x7f
   1e99e:	dd01      	ble.n	1e9a4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
   1e9a0:	207f      	movs	r0, #127	; 0x7f
   1e9a2:	e004      	b.n	1e9ae <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
   1e9a4:	f06f 017e 	mvn.w	r1, #126	; 0x7e
   1e9a8:	4288      	cmp	r0, r1
   1e9aa:	da00      	bge.n	1e9ae <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
   1e9ac:	4608      	mov	r0, r1
   1e9ae:	7020      	strb	r0, [r4, #0]
   1e9b0:	2000      	movs	r0, #0
   1e9b2:	bd10      	pop	{r4, pc}

0001e9b4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   1e9b4:	b570      	push	{r4, r5, r6, lr}
   1e9b6:	4605      	mov	r5, r0
   1e9b8:	2210      	movs	r2, #16
   1e9ba:	2100      	movs	r1, #0
   1e9bc:	f004 fc0f 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1e9c0:	2210      	movs	r2, #16
   1e9c2:	2100      	movs	r1, #0
   1e9c4:	f105 0010 	add.w	r0, r5, #16
   1e9c8:	f004 fc09 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1e9cc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   1e9d0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1e9d4:	1c40      	adds	r0, r0, #1
   1e9d6:	d10b      	bne.n	1e9f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   1e9d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1e9dc:	1c40      	adds	r0, r0, #1
   1e9de:	d107      	bne.n	1e9f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   1e9e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   1e9e4:	1c40      	adds	r0, r0, #1
   1e9e6:	d103      	bne.n	1e9f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
   1e9e8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   1e9ec:	1c40      	adds	r0, r0, #1
   1e9ee:	d00b      	beq.n	1ea08 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
   1e9f0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1e9f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1e9f8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   1e9fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   1ea00:	612a      	str	r2, [r5, #16]
   1ea02:	6168      	str	r0, [r5, #20]
   1ea04:	61a9      	str	r1, [r5, #24]
   1ea06:	61eb      	str	r3, [r5, #28]
   1ea08:	2000      	movs	r0, #0
   1ea0a:	f7ef fa63 	bl	ded4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   1ea0e:	b918      	cbnz	r0, 1ea18 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
   1ea10:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1ea14:	07c0      	lsls	r0, r0, #31
   1ea16:	d118      	bne.n	1ea4a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   1ea18:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   1ea1c:	1c40      	adds	r0, r0, #1
   1ea1e:	d10b      	bne.n	1ea38 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   1ea20:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1ea24:	1c40      	adds	r0, r0, #1
   1ea26:	d107      	bne.n	1ea38 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   1ea28:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ea2c:	1c40      	adds	r0, r0, #1
   1ea2e:	d103      	bne.n	1ea38 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
   1ea30:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1ea34:	1c40      	adds	r0, r0, #1
   1ea36:	d008      	beq.n	1ea4a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
   1ea38:	f854 0f90 	ldr.w	r0, [r4, #144]!
   1ea3c:	6861      	ldr	r1, [r4, #4]
   1ea3e:	68a2      	ldr	r2, [r4, #8]
   1ea40:	68e3      	ldr	r3, [r4, #12]
   1ea42:	6028      	str	r0, [r5, #0]
   1ea44:	6069      	str	r1, [r5, #4]
   1ea46:	60aa      	str	r2, [r5, #8]
   1ea48:	60eb      	str	r3, [r5, #12]
   1ea4a:	2000      	movs	r0, #0
   1ea4c:	bd70      	pop	{r4, r5, r6, pc}

0001ea4e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   1ea4e:	b538      	push	{r3, r4, r5, lr}
   1ea50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ea54:	4604      	mov	r4, r0
   1ea56:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1ea5a:	1c40      	adds	r0, r0, #1
   1ea5c:	d105      	bne.n	1ea6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
   1ea5e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1ea62:	43c0      	mvns	r0, r0
   1ea64:	0400      	lsls	r0, r0, #16
   1ea66:	0c00      	lsrs	r0, r0, #16
   1ea68:	d03e      	beq.n	1eae8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   1ea6a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   1ea6e:	07c0      	lsls	r0, r0, #31
   1ea70:	d03a      	beq.n	1eae8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
   1ea72:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1ea76:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
   1ea7a:	f8ad 1000 	strh.w	r1, [sp]
   1ea7e:	f8c4 0001 	str.w	r0, [r4, #1]
   1ea82:	f8bd 0000 	ldrh.w	r0, [sp]
   1ea86:	f8a4 0005 	strh.w	r0, [r4, #5]
   1ea8a:	79a0      	ldrb	r0, [r4, #6]
   1ea8c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   1ea90:	71a0      	strb	r0, [r4, #6]
   1ea92:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   1ea96:	1c40      	adds	r0, r0, #1
   1ea98:	d00f      	beq.n	1eaba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1ea9a:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   1ea9e:	1c40      	adds	r0, r0, #1
   1eaa0:	d00b      	beq.n	1eaba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1eaa2:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   1eaa6:	1c40      	adds	r0, r0, #1
   1eaa8:	d007      	beq.n	1eaba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1eaaa:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1eaae:	1c40      	adds	r0, r0, #1
   1eab0:	d003      	beq.n	1eaba <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   1eab2:	2000      	movs	r0, #0
   1eab4:	f7ef fa0e 	bl	ded4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   1eab8:	b140      	cbz	r0, 1eacc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
   1eaba:	2210      	movs	r2, #16
   1eabc:	2100      	movs	r1, #0
   1eabe:	1de0      	adds	r0, r4, #7
   1eac0:	f004 fb8d 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1eac4:	2001      	movs	r0, #1
   1eac6:	7020      	strb	r0, [r4, #0]
   1eac8:	2000      	movs	r0, #0
   1eaca:	bd38      	pop	{r3, r4, r5, pc}
   1eacc:	f855 2f90 	ldr.w	r2, [r5, #144]!
   1ead0:	6869      	ldr	r1, [r5, #4]
   1ead2:	68a8      	ldr	r0, [r5, #8]
   1ead4:	68eb      	ldr	r3, [r5, #12]
   1ead6:	f8c4 2007 	str.w	r2, [r4, #7]
   1eada:	f8c4 100b 	str.w	r1, [r4, #11]
   1eade:	f8c4 000f 	str.w	r0, [r4, #15]
   1eae2:	f8c4 3013 	str.w	r3, [r4, #19]
   1eae6:	e7ed      	b.n	1eac4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
   1eae8:	2000      	movs	r0, #0
   1eaea:	e7ec      	b.n	1eac6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0001eaec <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   1eaec:	f003 b8dd 	b.w	21caa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0001eaf0 <sdc_hci_cmd_ip_read_bd_addr>:
   1eaf0:	f003 ba17 	b.w	21f22 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0001eaf4 <sdc_hci_cmd_ip_read_local_version_information>:
   1eaf4:	f7f8 ba76 	b.w	16fe4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0001eaf8 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
   1eaf8:	f002 bd87 	b.w	2160a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0001eafc <sdc_hci_cmd_le_clear_adv_sets>:
   1eafc:	f7f8 b884 	b.w	16c08 <sym_I732BH4NXXB6CLIZXDAFDSMHDSVEYZLNAFI3W2Q>

0001eb00 <sdc_hci_cmd_le_clear_filter_accept_list>:
   1eb00:	f002 bda0 	b.w	21644 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0001eb04 <sdc_hci_cmd_le_encrypt>:
   1eb04:	f002 bdf9 	b.w	216fa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0001eb08 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   1eb08:	8802      	ldrh	r2, [r0, #0]
   1eb0a:	800a      	strh	r2, [r1, #0]
   1eb0c:	f002 bdfe 	b.w	2170c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0001eb10 <sdc_hci_cmd_le_long_term_key_request_reply>:
   1eb10:	8802      	ldrh	r2, [r0, #0]
   1eb12:	800a      	strh	r2, [r1, #0]
   1eb14:	f002 be13 	b.w	2173e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0001eb18 <sdc_hci_cmd_le_rand>:
   1eb18:	f002 be3b 	b.w	21792 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0001eb1c <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   1eb1c:	f002 be3f 	b.w	2179e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0001eb20 <sdc_hci_cmd_le_read_buffer_size>:
   1eb20:	f7f8 b88e 	b.w	16c40 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0001eb24 <sdc_hci_cmd_le_read_channel_map>:
   1eb24:	f7f8 b896 	b.w	16c54 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0001eb28 <sdc_hci_cmd_le_read_filter_accept_list_size>:
   1eb28:	f002 be95 	b.w	21856 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0001eb2c <sdc_hci_cmd_le_read_max_adv_data_length>:
   1eb2c:	f002 be42 	b.w	217b4 <sym_HN6JPFYV5RALEY5SK42AILWQ3BESLOSWO6JLUAY>

0001eb30 <sdc_hci_cmd_le_read_max_data_length>:
   1eb30:	f002 be4a 	b.w	217c8 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0001eb34 <sdc_hci_cmd_le_read_number_of_supported_adv_sets>:
   1eb34:	f002 be51 	b.w	217da <sym_B56D6C76IM4AAFDQEOHND3OAZFOQIH7L5TPFHMY>

0001eb38 <sdc_hci_cmd_le_read_phy>:
   1eb38:	f7f8 b8b4 	b.w	16ca4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0001eb3c <sdc_hci_cmd_le_read_remote_features>:
   1eb3c:	f002 be58 	b.w	217f0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0001eb40 <sdc_hci_cmd_le_read_suggested_default_data_length>:
   1eb40:	f7f8 b8d6 	b.w	16cf0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0001eb44 <sdc_hci_cmd_le_read_transmit_power>:
   1eb44:	f002 be77 	b.w	21836 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0001eb48 <sdc_hci_cmd_le_remove_adv_set>:
   1eb48:	f003 bad6 	b.w	220f8 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA>

0001eb4c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
   1eb4c:	f002 be87 	b.w	2185e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0001eb50 <sdc_hci_cmd_le_set_adv_data>:
   1eb50:	f002 bea1 	b.w	21896 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0001eb54 <sdc_hci_cmd_le_set_adv_enable>:
   1eb54:	f002 beb4 	b.w	218c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0001eb58 <sdc_hci_cmd_le_set_adv_params>:
   1eb58:	f002 bee5 	b.w	21926 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0001eb5c <sdc_hci_cmd_le_set_adv_set_random_address>:
   1eb5c:	f002 bf5a 	b.w	21a14 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>

0001eb60 <sdc_hci_cmd_le_set_data_length>:
   1eb60:	f002 bf76 	b.w	21a50 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0001eb64 <sdc_hci_cmd_le_set_data_related_address_changes>:
   1eb64:	f002 bf94 	b.w	21a90 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0001eb68 <sdc_hci_cmd_le_set_default_phy>:
   1eb68:	f7f8 b8cc 	b.w	16d04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0001eb6c <sdc_hci_cmd_le_set_event_mask>:
   1eb6c:	b510      	push	{r4, lr}
   1eb6e:	f7ee fb4f 	bl	d210 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   1eb72:	2000      	movs	r0, #0
   1eb74:	bd10      	pop	{r4, pc}

0001eb76 <sdc_hci_cmd_le_set_ext_adv_data>:
   1eb76:	f002 bfa3 	b.w	21ac0 <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A>

0001eb7a <sdc_hci_cmd_le_set_ext_adv_enable>:
   1eb7a:	b510      	push	{r4, lr}
   1eb7c:	4604      	mov	r4, r0
   1eb7e:	2001      	movs	r0, #1
   1eb80:	f7ee faf8 	bl	d174 <sym_Q4MVB6BAYYKAN3YZ2SZEJW6V5OITCIHY2IOHXKY>
   1eb84:	4620      	mov	r0, r4
   1eb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eb8a:	f7f8 b8e3 	b.w	16d54 <sym_D6MVGRLHYJG252OE4SOFHNIQS6JTUDSSXUELC5I>

0001eb8e <sdc_hci_cmd_le_set_ext_adv_params>:
   1eb8e:	f002 bfb6 	b.w	21afe <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY>

0001eb92 <sdc_hci_cmd_le_set_ext_scan_response_data>:
   1eb92:	f002 bfd5 	b.w	21b40 <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q>

0001eb96 <sdc_hci_cmd_le_set_host_channel_classification>:
   1eb96:	f7f8 b91d 	b.w	16dd4 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0001eb9a <sdc_hci_cmd_le_set_phy>:
   1eb9a:	f002 bff0 	b.w	21b7e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0001eb9e <sdc_hci_cmd_le_set_random_address>:
   1eb9e:	f003 b807 	b.w	21bb0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0001eba2 <sdc_hci_cmd_le_set_scan_response_data>:
   1eba2:	f003 b813 	b.w	21bcc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0001eba6 <sdc_hci_cmd_le_write_suggested_default_data_length>:
   1eba6:	f003 b826 	b.w	21bf6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0001ebaa <sdc_hci_cmd_lc_disconnect>:
   1ebaa:	f002 bcd6 	b.w	2155a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0001ebae <sdc_hci_cmd_lc_read_remote_version_information>:
   1ebae:	f7f8 ba23 	b.w	16ff8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   1ebb2:	1d49      	adds	r1, r1, #5
   1ebb4:	4408      	add	r0, r1
   1ebb6:	4350      	muls	r0, r2
   1ebb8:	b280      	uxth	r0, r0
   1ebba:	4770      	bx	lr
   1ebbc:	b570      	push	{r4, r5, r6, lr}
   1ebbe:	880b      	ldrh	r3, [r1, #0]
   1ebc0:	7cc4      	ldrb	r4, [r0, #19]
   1ebc2:	f100 0618 	add.w	r6, r0, #24
   1ebc6:	f3c3 050e 	ubfx	r5, r3, #0, #15
   1ebca:	8802      	ldrh	r2, [r0, #0]
   1ebcc:	442e      	add	r6, r5
   1ebce:	1d64      	adds	r4, r4, #5
   1ebd0:	8836      	ldrh	r6, [r6, #0]
   1ebd2:	4422      	add	r2, r4
   1ebd4:	b292      	uxth	r2, r2
   1ebd6:	4426      	add	r6, r4
   1ebd8:	1e54      	subs	r4, r2, #1
   1ebda:	4434      	add	r4, r6
   1ebdc:	fb94 f4f2 	sdiv	r4, r4, r2
   1ebe0:	fb02 5204 	mla	r2, r2, r4, r5
   1ebe4:	8840      	ldrh	r0, [r0, #2]
   1ebe6:	b292      	uxth	r2, r2
   1ebe8:	4290      	cmp	r0, r2
   1ebea:	d903      	bls.n	1ebf4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   1ebec:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   1ebf0:	4310      	orrs	r0, r2
   1ebf2:	e002      	b.n	1ebfa <sdc_hci_cmd_lc_read_remote_version_information+0x4c>
   1ebf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1ebf8:	4398      	bics	r0, r3
   1ebfa:	8008      	strh	r0, [r1, #0]
   1ebfc:	bd70      	pop	{r4, r5, r6, pc}
   1ebfe:	4288      	cmp	r0, r1
   1ec00:	d101      	bne.n	1ec06 <sdc_hci_cmd_lc_read_remote_version_information+0x58>
   1ec02:	2001      	movs	r0, #1
   1ec04:	4770      	bx	lr
   1ec06:	2000      	movs	r0, #0
   1ec08:	4770      	bx	lr
   1ec0a:	0442      	lsls	r2, r0, #17
   1ec0c:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
   1ec10:	d107      	bne.n	1ec22 <sdc_hci_cmd_lc_read_remote_version_information+0x74>
   1ec12:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   1ec16:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   1ec1a:	4288      	cmp	r0, r1
   1ec1c:	d001      	beq.n	1ec22 <sdc_hci_cmd_lc_read_remote_version_information+0x74>
   1ec1e:	2001      	movs	r0, #1
   1ec20:	4770      	bx	lr
   1ec22:	2000      	movs	r0, #0
   1ec24:	4770      	bx	lr

0001ec26 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   1ec26:	88c1      	ldrh	r1, [r0, #6]
   1ec28:	8880      	ldrh	r0, [r0, #4]
   1ec2a:	f7ff bfe8 	b.w	1ebfe <sdc_hci_cmd_lc_read_remote_version_information+0x50>

0001ec2e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   1ec2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec32:	460f      	mov	r7, r1
   1ec34:	4604      	mov	r4, r0
   1ec36:	f100 0118 	add.w	r1, r0, #24
   1ec3a:	8880      	ldrh	r0, [r0, #4]
   1ec3c:	2600      	movs	r6, #0
   1ec3e:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1ec42:	1845      	adds	r5, r0, r1
   1ec44:	603e      	str	r6, [r7, #0]
   1ec46:	89e0      	ldrh	r0, [r4, #14]
   1ec48:	2800      	cmp	r0, #0
   1ec4a:	d016      	beq.n	1ec7a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
   1ec4c:	8961      	ldrh	r1, [r4, #10]
   1ec4e:	4408      	add	r0, r1
   1ec50:	b280      	uxth	r0, r0
   1ec52:	8160      	strh	r0, [r4, #10]
   1ec54:	8829      	ldrh	r1, [r5, #0]
   1ec56:	4288      	cmp	r0, r1
   1ec58:	d905      	bls.n	1ec66 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
   1ec5a:	f240 1151 	movw	r1, #337	; 0x151
   1ec5e:	f04f 0014 	mov.w	r0, #20
   1ec62:	f7ee f911 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ec66:	d106      	bne.n	1ec76 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
   1ec68:	f104 0104 	add.w	r1, r4, #4
   1ec6c:	4620      	mov	r0, r4
   1ec6e:	f7ff ffa5 	bl	1ebbc <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1ec72:	8166      	strh	r6, [r4, #10]
   1ec74:	603d      	str	r5, [r7, #0]
   1ec76:	81e6      	strh	r6, [r4, #14]
   1ec78:	2001      	movs	r0, #1
   1ec7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ec7e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   1ec7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec82:	4604      	mov	r4, r0
   1ec84:	f100 0318 	add.w	r3, r0, #24
   1ec88:	88c0      	ldrh	r0, [r0, #6]
   1ec8a:	460f      	mov	r7, r1
   1ec8c:	f3c0 060e 	ubfx	r6, r0, #0, #15
   1ec90:	8a20      	ldrh	r0, [r4, #16]
   1ec92:	1999      	adds	r1, r3, r6
   1ec94:	b108      	cbz	r0, 1ec9a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
   1ec96:	42b8      	cmp	r0, r7
   1ec98:	d202      	bcs.n	1eca0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
   1ec9a:	2000      	movs	r0, #0
   1ec9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eca0:	89a0      	ldrh	r0, [r4, #12]
   1eca2:	2500      	movs	r5, #0
   1eca4:	b140      	cbz	r0, 1ecb8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
   1eca6:	f8b1 c000 	ldrh.w	ip, [r1]
   1ecaa:	4560      	cmp	r0, ip
   1ecac:	d006      	beq.n	1ecbc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   1ecae:	f44f 7101 	mov.w	r1, #516	; 0x204
   1ecb2:	2014      	movs	r0, #20
   1ecb4:	f7ee f8e8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ecb8:	800d      	strh	r5, [r1, #0]
   1ecba:	e00e      	b.n	1ecda <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   1ecbc:	f894 c013 	ldrb.w	ip, [r4, #19]
   1ecc0:	4418      	add	r0, r3
   1ecc2:	f10c 0c05 	add.w	ip, ip, #5
   1ecc6:	44b4      	add	ip, r6
   1ecc8:	4460      	add	r0, ip
   1ecca:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   1ecce:	f820 cc03 	strh.w	ip, [r0, #-3]
   1ecd2:	f894 c016 	ldrb.w	ip, [r4, #22]
   1ecd6:	f800 cc01 	strb.w	ip, [r0, #-1]
   1ecda:	89a0      	ldrh	r0, [r4, #12]
   1ecdc:	4438      	add	r0, r7
   1ecde:	81a0      	strh	r0, [r4, #12]
   1ece0:	8808      	ldrh	r0, [r1, #0]
   1ece2:	4438      	add	r0, r7
   1ece4:	8008      	strh	r0, [r1, #0]
   1ece6:	b12a      	cbz	r2, 1ecf4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
   1ece8:	1da1      	adds	r1, r4, #6
   1ecea:	4620      	mov	r0, r4
   1ecec:	f7ff ff66 	bl	1ebbc <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1ecf0:	81a5      	strh	r5, [r4, #12]
   1ecf2:	e00a      	b.n	1ed0a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
   1ecf4:	7ce0      	ldrb	r0, [r4, #19]
   1ecf6:	89a1      	ldrh	r1, [r4, #12]
   1ecf8:	1d40      	adds	r0, r0, #5
   1ecfa:	4430      	add	r0, r6
   1ecfc:	4419      	add	r1, r3
   1ecfe:	4408      	add	r0, r1
   1ed00:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   1ed04:	82a1      	strh	r1, [r4, #20]
   1ed06:	7880      	ldrb	r0, [r0, #2]
   1ed08:	75a0      	strb	r0, [r4, #22]
   1ed0a:	8225      	strh	r5, [r4, #16]
   1ed0c:	2001      	movs	r0, #1
   1ed0e:	e7c5      	b.n	1ec9c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0001ed10 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
   1ed10:	1c80      	adds	r0, r0, #2
   1ed12:	4770      	bx	lr

0001ed14 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   1ed14:	b510      	push	{r4, lr}
   1ed16:	4604      	mov	r4, r0
   1ed18:	88c1      	ldrh	r1, [r0, #6]
   1ed1a:	8880      	ldrh	r0, [r0, #4]
   1ed1c:	f7ff ff6f 	bl	1ebfe <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1ed20:	b918      	cbnz	r0, 1ed2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x16>
   1ed22:	8960      	ldrh	r0, [r4, #10]
   1ed24:	b908      	cbnz	r0, 1ed2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x16>
   1ed26:	89e0      	ldrh	r0, [r4, #14]
   1ed28:	b108      	cbz	r0, 1ed2e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1a>
   1ed2a:	2000      	movs	r0, #0
   1ed2c:	bd10      	pop	{r4, pc}
   1ed2e:	1d21      	adds	r1, r4, #4
   1ed30:	4620      	mov	r0, r4
   1ed32:	f7ff ff43 	bl	1ebbc <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1ed36:	2000      	movs	r0, #0
   1ed38:	81e0      	strh	r0, [r4, #14]
   1ed3a:	2001      	movs	r0, #1
   1ed3c:	bd10      	pop	{r4, pc}

0001ed3e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   1ed3e:	b510      	push	{r4, lr}
   1ed40:	4604      	mov	r4, r0
   1ed42:	f100 0318 	add.w	r3, r0, #24
   1ed46:	88c0      	ldrh	r0, [r0, #6]
   1ed48:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1ed4c:	181a      	adds	r2, r3, r0
   1ed4e:	8820      	ldrh	r0, [r4, #0]
   1ed50:	2845      	cmp	r0, #69	; 0x45
   1ed52:	d200      	bcs.n	1ed56 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
   1ed54:	2045      	movs	r0, #69	; 0x45
   1ed56:	4288      	cmp	r0, r1
   1ed58:	d204      	bcs.n	1ed64 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
   1ed5a:	f44f 7182 	mov.w	r1, #260	; 0x104
   1ed5e:	2014      	movs	r0, #20
   1ed60:	f7ee f892 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ed64:	7ca0      	ldrb	r0, [r4, #18]
   1ed66:	2800      	cmp	r0, #0
   1ed68:	d003      	beq.n	1ed72 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
   1ed6a:	8810      	ldrh	r0, [r2, #0]
   1ed6c:	4288      	cmp	r0, r1
   1ed6e:	d201      	bcs.n	1ed74 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
   1ed70:	2000      	movs	r0, #0
   1ed72:	bd10      	pop	{r4, pc}
   1ed74:	8011      	strh	r1, [r2, #0]
   1ed76:	1da1      	adds	r1, r4, #6
   1ed78:	4620      	mov	r0, r4
   1ed7a:	f7ff ff1f 	bl	1ebbc <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1ed7e:	2000      	movs	r0, #0
   1ed80:	74a0      	strb	r0, [r4, #18]
   1ed82:	2001      	movs	r0, #1
   1ed84:	bd10      	pop	{r4, pc}

0001ed86 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   1ed86:	b570      	push	{r4, r5, r6, lr}
   1ed88:	4604      	mov	r4, r0
   1ed8a:	f100 0218 	add.w	r2, r0, #24
   1ed8e:	88c1      	ldrh	r1, [r0, #6]
   1ed90:	8880      	ldrh	r0, [r0, #4]
   1ed92:	f3c0 030e 	ubfx	r3, r0, #0, #15
   1ed96:	18d5      	adds	r5, r2, r3
   1ed98:	f7ff ff31 	bl	1ebfe <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1ed9c:	b908      	cbnz	r0, 1eda2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
   1ed9e:	8960      	ldrh	r0, [r4, #10]
   1eda0:	b108      	cbz	r0, 1eda6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x20>
   1eda2:	2000      	movs	r0, #0
   1eda4:	bd70      	pop	{r4, r5, r6, pc}
   1eda6:	4628      	mov	r0, r5
   1eda8:	bd70      	pop	{r4, r5, r6, pc}

0001edaa <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
   1edaa:	8803      	ldrh	r3, [r0, #0]
   1edac:	2b45      	cmp	r3, #69	; 0x45
   1edae:	d200      	bcs.n	1edb2 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
   1edb0:	2345      	movs	r3, #69	; 0x45
   1edb2:	8013      	strh	r3, [r2, #0]
   1edb4:	88c2      	ldrh	r2, [r0, #6]
   1edb6:	f3c2 030e 	ubfx	r3, r2, #0, #15
   1edba:	f100 0218 	add.w	r2, r0, #24
   1edbe:	441a      	add	r2, r3
   1edc0:	600a      	str	r2, [r1, #0]
   1edc2:	8980      	ldrh	r0, [r0, #12]
   1edc4:	4770      	bx	lr

0001edc6 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   1edc6:	7cc0      	ldrb	r0, [r0, #19]
   1edc8:	1d40      	adds	r0, r0, #5
   1edca:	4408      	add	r0, r1
   1edcc:	1ec0      	subs	r0, r0, #3
   1edce:	6010      	str	r0, [r2, #0]
   1edd0:	8808      	ldrh	r0, [r1, #0]
   1edd2:	4770      	bx	lr

0001edd4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   1edd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edd8:	460e      	mov	r6, r1
   1edda:	4604      	mov	r4, r0
   1eddc:	88c1      	ldrh	r1, [r0, #6]
   1edde:	f100 0818 	add.w	r8, r0, #24
   1ede2:	8900      	ldrh	r0, [r0, #8]
   1ede4:	8822      	ldrh	r2, [r4, #0]
   1ede6:	f3c1 050e 	ubfx	r5, r1, #0, #15
   1edea:	f3c0 070e 	ubfx	r7, r0, #0, #15
   1edee:	2a45      	cmp	r2, #69	; 0x45
   1edf0:	d200      	bcs.n	1edf4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   1edf2:	2245      	movs	r2, #69	; 0x45
   1edf4:	42b2      	cmp	r2, r6
   1edf6:	d203      	bcs.n	1ee00 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
   1edf8:	21c6      	movs	r1, #198	; 0xc6
   1edfa:	2014      	movs	r0, #20
   1edfc:	f7ee f844 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ee00:	f7ff ff03 	bl	1ec0a <sdc_hci_cmd_lc_read_remote_version_information+0x5c>
   1ee04:	b110      	cbz	r0, 1ee0c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x38>
   1ee06:	2000      	movs	r0, #0
   1ee08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee0c:	42af      	cmp	r7, r5
   1ee0e:	d908      	bls.n	1ee22 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x4e>
   1ee10:	7ce0      	ldrb	r0, [r4, #19]
   1ee12:	1b79      	subs	r1, r7, r5
   1ee14:	1d40      	adds	r0, r0, #5
   1ee16:	1a08      	subs	r0, r1, r0
   1ee18:	4286      	cmp	r6, r0
   1ee1a:	dd02      	ble.n	1ee22 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x4e>
   1ee1c:	2000      	movs	r0, #0
   1ee1e:	74a0      	strb	r0, [r4, #18]
   1ee20:	e7f1      	b.n	1ee06 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x32>
   1ee22:	eb08 0005 	add.w	r0, r8, r5
   1ee26:	2101      	movs	r1, #1
   1ee28:	8006      	strh	r6, [r0, #0]
   1ee2a:	74a1      	strb	r1, [r4, #18]
   1ee2c:	e7ec      	b.n	1ee08 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>

0001ee2e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   1ee2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee30:	88c6      	ldrh	r6, [r0, #6]
   1ee32:	8885      	ldrh	r5, [r0, #4]
   1ee34:	4604      	mov	r4, r0
   1ee36:	f100 0218 	add.w	r2, r0, #24
   1ee3a:	f3c5 000e 	ubfx	r0, r5, #0, #15
   1ee3e:	1817      	adds	r7, r2, r0
   1ee40:	4631      	mov	r1, r6
   1ee42:	4628      	mov	r0, r5
   1ee44:	f7ff fedb 	bl	1ebfe <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1ee48:	b108      	cbz	r0, 1ee4e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x20>
   1ee4a:	2000      	movs	r0, #0
   1ee4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ee4e:	8960      	ldrh	r0, [r4, #10]
   1ee50:	89e1      	ldrh	r1, [r4, #14]
   1ee52:	4408      	add	r0, r1
   1ee54:	8839      	ldrh	r1, [r7, #0]
   1ee56:	4288      	cmp	r0, r1
   1ee58:	d201      	bcs.n	1ee5e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x30>
   1ee5a:	2001      	movs	r0, #1
   1ee5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ee5e:	f8ad 5000 	strh.w	r5, [sp]
   1ee62:	4669      	mov	r1, sp
   1ee64:	4620      	mov	r0, r4
   1ee66:	f7ff fea9 	bl	1ebbc <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1ee6a:	4631      	mov	r1, r6
   1ee6c:	f8bd 0000 	ldrh.w	r0, [sp]
   1ee70:	f7ff fec5 	bl	1ebfe <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1ee74:	f080 0001 	eor.w	r0, r0, #1
   1ee78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ee7a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   1ee7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee7e:	4617      	mov	r7, r2
   1ee80:	460d      	mov	r5, r1
   1ee82:	4604      	mov	r4, r0
   1ee84:	f100 0118 	add.w	r1, r0, #24
   1ee88:	88c2      	ldrh	r2, [r0, #6]
   1ee8a:	8880      	ldrh	r0, [r0, #4]
   1ee8c:	f3c0 030e 	ubfx	r3, r0, #0, #15
   1ee90:	18ce      	adds	r6, r1, r3
   1ee92:	4611      	mov	r1, r2
   1ee94:	f7ff feb3 	bl	1ebfe <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1ee98:	b118      	cbz	r0, 1eea2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x28>
   1ee9a:	2000      	movs	r0, #0
   1ee9c:	81e0      	strh	r0, [r4, #14]
   1ee9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eea2:	8830      	ldrh	r0, [r6, #0]
   1eea4:	8961      	ldrh	r1, [r4, #10]
   1eea6:	7ce2      	ldrb	r2, [r4, #19]
   1eea8:	1a40      	subs	r0, r0, r1
   1eeaa:	4411      	add	r1, r2
   1eeac:	4431      	add	r1, r6
   1eeae:	882a      	ldrh	r2, [r5, #0]
   1eeb0:	b280      	uxth	r0, r0
   1eeb2:	1c89      	adds	r1, r1, #2
   1eeb4:	4282      	cmp	r2, r0
   1eeb6:	d900      	bls.n	1eeba <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x40>
   1eeb8:	8028      	strh	r0, [r5, #0]
   1eeba:	8960      	ldrh	r0, [r4, #10]
   1eebc:	b128      	cbz	r0, 1eeca <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x50>
   1eebe:	2000      	movs	r0, #0
   1eec0:	7038      	strb	r0, [r7, #0]
   1eec2:	8828      	ldrh	r0, [r5, #0]
   1eec4:	81e0      	strh	r0, [r4, #14]
   1eec6:	4608      	mov	r0, r1
   1eec8:	e7e9      	b.n	1ee9e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x24>
   1eeca:	2001      	movs	r0, #1
   1eecc:	e7f8      	b.n	1eec0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x46>

0001eece <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   1eece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eed2:	4615      	mov	r5, r2
   1eed4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1eed8:	460f      	mov	r7, r1
   1eeda:	4604      	mov	r4, r0
   1eedc:	461e      	mov	r6, r3
   1eede:	4642      	mov	r2, r8
   1eee0:	4619      	mov	r1, r3
   1eee2:	4628      	mov	r0, r5
   1eee4:	f000 f83c 	bl	1ef60 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1eee8:	4287      	cmp	r7, r0
   1eeea:	d201      	bcs.n	1eef0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x22>
   1eeec:	219e      	movs	r1, #158	; 0x9e
   1eeee:	e013      	b.n	1ef18 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4a>
   1eef0:	07a0      	lsls	r0, r4, #30
   1eef2:	d001      	beq.n	1eef8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x2a>
   1eef4:	219f      	movs	r1, #159	; 0x9f
   1eef6:	e00f      	b.n	1ef18 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4a>
   1eef8:	2218      	movs	r2, #24
   1eefa:	2100      	movs	r1, #0
   1eefc:	4620      	mov	r0, r4
   1eefe:	f004 f96e 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1ef02:	74e6      	strb	r6, [r4, #19]
   1ef04:	4642      	mov	r2, r8
   1ef06:	4631      	mov	r1, r6
   1ef08:	4628      	mov	r0, r5
   1ef0a:	f7ff fe52 	bl	1ebb2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1ef0e:	8060      	strh	r0, [r4, #2]
   1ef10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1ef14:	d903      	bls.n	1ef1e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x50>
   1ef16:	21a4      	movs	r1, #164	; 0xa4
   1ef18:	2014      	movs	r0, #20
   1ef1a:	f7ed ffb5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1ef1e:	8025      	strh	r5, [r4, #0]
   1ef20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ef24 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   1ef24:	b570      	push	{r4, r5, r6, lr}
   1ef26:	460e      	mov	r6, r1
   1ef28:	4604      	mov	r4, r0
   1ef2a:	f100 0118 	add.w	r1, r0, #24
   1ef2e:	8900      	ldrh	r0, [r0, #8]
   1ef30:	88a2      	ldrh	r2, [r4, #4]
   1ef32:	f3c0 030e 	ubfx	r3, r0, #0, #15
   1ef36:	18cd      	adds	r5, r1, r3
   1ef38:	4611      	mov	r1, r2
   1ef3a:	f7ff fe60 	bl	1ebfe <sdc_hci_cmd_lc_read_remote_version_information+0x50>
   1ef3e:	b108      	cbz	r0, 1ef44 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>
   1ef40:	2000      	movs	r0, #0
   1ef42:	bd70      	pop	{r4, r5, r6, pc}
   1ef44:	b126      	cbz	r6, 1ef50 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2c>
   1ef46:	7ce2      	ldrb	r2, [r4, #19]
   1ef48:	1ca9      	adds	r1, r5, #2
   1ef4a:	4630      	mov	r0, r6
   1ef4c:	f004 f8cd 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1ef50:	882d      	ldrh	r5, [r5, #0]
   1ef52:	f104 0108 	add.w	r1, r4, #8
   1ef56:	4620      	mov	r0, r4
   1ef58:	f7ff fe30 	bl	1ebbc <sdc_hci_cmd_lc_read_remote_version_information+0xe>
   1ef5c:	4628      	mov	r0, r5
   1ef5e:	bd70      	pop	{r4, r5, r6, pc}

0001ef60 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   1ef60:	b510      	push	{r4, lr}
   1ef62:	4604      	mov	r4, r0
   1ef64:	f7ff fe25 	bl	1ebb2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   1ef68:	2100      	movs	r1, #0
   1ef6a:	2c45      	cmp	r4, #69	; 0x45
   1ef6c:	d202      	bcs.n	1ef74 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
   1ef6e:	f1c4 0145 	rsb	r1, r4, #69	; 0x45
   1ef72:	b289      	uxth	r1, r1
   1ef74:	3018      	adds	r0, #24
   1ef76:	4408      	add	r0, r1
   1ef78:	b280      	uxth	r0, r0
   1ef7a:	bd10      	pop	{r4, pc}

0001ef7c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   1ef7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ef80:	4688      	mov	r8, r1
   1ef82:	88c1      	ldrh	r1, [r0, #6]
   1ef84:	4604      	mov	r4, r0
   1ef86:	8900      	ldrh	r0, [r0, #8]
   1ef88:	f3c1 050e 	ubfx	r5, r1, #0, #15
   1ef8c:	f104 0618 	add.w	r6, r4, #24
   1ef90:	f3c0 070e 	ubfx	r7, r0, #0, #15
   1ef94:	eb06 0905 	add.w	r9, r6, r5
   1ef98:	f7ff fe37 	bl	1ec0a <sdc_hci_cmd_lc_read_remote_version_information+0x5c>
   1ef9c:	2200      	movs	r2, #0
   1ef9e:	b998      	cbnz	r0, 1efc8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   1efa0:	8820      	ldrh	r0, [r4, #0]
   1efa2:	2845      	cmp	r0, #69	; 0x45
   1efa4:	d200      	bcs.n	1efa8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   1efa6:	2045      	movs	r0, #69	; 0x45
   1efa8:	42af      	cmp	r7, r5
   1efaa:	d906      	bls.n	1efba <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1efac:	7ce1      	ldrb	r1, [r4, #19]
   1efae:	1b7b      	subs	r3, r7, r5
   1efb0:	1d49      	adds	r1, r1, #5
   1efb2:	1a59      	subs	r1, r3, r1
   1efb4:	4281      	cmp	r1, r0
   1efb6:	da00      	bge.n	1efba <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   1efb8:	4608      	mov	r0, r1
   1efba:	89a1      	ldrh	r1, [r4, #12]
   1efbc:	b111      	cbz	r1, 1efc4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   1efbe:	f8b9 3000 	ldrh.w	r3, [r9]
   1efc2:	1ac0      	subs	r0, r0, r3
   1efc4:	4540      	cmp	r0, r8
   1efc6:	da03      	bge.n	1efd0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   1efc8:	8222      	strh	r2, [r4, #16]
   1efca:	2000      	movs	r0, #0
   1efcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1efd0:	7ce0      	ldrb	r0, [r4, #19]
   1efd2:	4431      	add	r1, r6
   1efd4:	1d40      	adds	r0, r0, #5
   1efd6:	4428      	add	r0, r5
   1efd8:	4408      	add	r0, r1
   1efda:	f8a4 8010 	strh.w	r8, [r4, #16]
   1efde:	1ec0      	subs	r0, r0, #3
   1efe0:	e7f4      	b.n	1efcc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0001efe2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   1efe2:	b570      	push	{r4, r5, r6, lr}
   1efe4:	2300      	movs	r3, #0
   1efe6:	f1a1 0208 	sub.w	r2, r1, #8
   1efea:	f64f 74f7 	movw	r4, #65527	; 0xfff7
   1efee:	42a2      	cmp	r2, r4
   1eff0:	d304      	bcc.n	1effc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   1eff2:	f240 11cd 	movw	r1, #461	; 0x1cd
   1eff6:	2015      	movs	r0, #21
   1eff8:	f7ed ff46 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1effc:	6802      	ldr	r2, [r0, #0]
   1effe:	b90a      	cbnz	r2, 1f004 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
   1f000:	e01e      	b.n	1f040 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   1f002:	4610      	mov	r0, r2
   1f004:	6802      	ldr	r2, [r0, #0]
   1f006:	8893      	ldrh	r3, [r2, #4]
   1f008:	428b      	cmp	r3, r1
   1f00a:	d002      	beq.n	1f012 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
   1f00c:	6813      	ldr	r3, [r2, #0]
   1f00e:	2b00      	cmp	r3, #0
   1f010:	d1f7      	bne.n	1f002 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
   1f012:	8894      	ldrh	r4, [r2, #4]
   1f014:	4613      	mov	r3, r2
   1f016:	428c      	cmp	r4, r1
   1f018:	d101      	bne.n	1f01e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
   1f01a:	6811      	ldr	r1, [r2, #0]
   1f01c:	e00d      	b.n	1f03a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
   1f01e:	f101 0508 	add.w	r5, r1, #8
   1f022:	b2ad      	uxth	r5, r5
   1f024:	42ac      	cmp	r4, r5
   1f026:	d30a      	bcc.n	1f03e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
   1f028:	1a64      	subs	r4, r4, r1
   1f02a:	4411      	add	r1, r2
   1f02c:	2200      	movs	r2, #0
   1f02e:	600a      	str	r2, [r1, #0]
   1f030:	808c      	strh	r4, [r1, #4]
   1f032:	6802      	ldr	r2, [r0, #0]
   1f034:	6812      	ldr	r2, [r2, #0]
   1f036:	6002      	str	r2, [r0, #0]
   1f038:	600a      	str	r2, [r1, #0]
   1f03a:	6001      	str	r1, [r0, #0]
   1f03c:	e000      	b.n	1f040 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   1f03e:	2300      	movs	r3, #0
   1f040:	4618      	mov	r0, r3
   1f042:	bd70      	pop	{r4, r5, r6, pc}

0001f044 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   1f044:	b510      	push	{r4, lr}
   1f046:	000c      	movs	r4, r1
   1f048:	d004      	beq.n	1f054 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
   1f04a:	2c08      	cmp	r4, #8
   1f04c:	d207      	bcs.n	1f05e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   1f04e:	f240 1195 	movw	r1, #405	; 0x195
   1f052:	e00a      	b.n	1f06a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
   1f054:	b108      	cbz	r0, 1f05a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
   1f056:	2100      	movs	r1, #0
   1f058:	6001      	str	r1, [r0, #0]
   1f05a:	2000      	movs	r0, #0
   1f05c:	bd10      	pop	{r4, pc}
   1f05e:	b158      	cbz	r0, 1f078 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
   1f060:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1f064:	d304      	bcc.n	1f070 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
   1f066:	f240 11a7 	movw	r1, #423	; 0x1a7
   1f06a:	2015      	movs	r0, #21
   1f06c:	f7ed ff0c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f070:	b2a1      	uxth	r1, r4
   1f072:	6800      	ldr	r0, [r0, #0]
   1f074:	f000 f814 	bl	1f0a0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   1f078:	1d20      	adds	r0, r4, #4
   1f07a:	bd10      	pop	{r4, pc}

0001f07c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   1f07c:	2100      	movs	r1, #0
   1f07e:	6802      	ldr	r2, [r0, #0]
   1f080:	e003      	b.n	1f08a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   1f082:	8893      	ldrh	r3, [r2, #4]
   1f084:	6812      	ldr	r2, [r2, #0]
   1f086:	4419      	add	r1, r3
   1f088:	b289      	uxth	r1, r1
   1f08a:	2a00      	cmp	r2, #0
   1f08c:	d1f9      	bne.n	1f082 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   1f08e:	f000 b807 	b.w	1f0a0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0001f092 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   1f092:	2300      	movs	r3, #0
   1f094:	600b      	str	r3, [r1, #0]
   1f096:	808a      	strh	r2, [r1, #4]
   1f098:	6802      	ldr	r2, [r0, #0]
   1f09a:	600a      	str	r2, [r1, #0]
   1f09c:	6001      	str	r1, [r0, #0]
   1f09e:	4770      	bx	lr
   1f0a0:	2300      	movs	r3, #0
   1f0a2:	6043      	str	r3, [r0, #4]
   1f0a4:	1d02      	adds	r2, r0, #4
   1f0a6:	8101      	strh	r1, [r0, #8]
   1f0a8:	6002      	str	r2, [r0, #0]
   1f0aa:	4770      	bx	lr

0001f0ac <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   1f0ac:	b51c      	push	{r2, r3, r4, lr}
   1f0ae:	4604      	mov	r4, r0
   1f0b0:	2000      	movs	r0, #0
   1f0b2:	9001      	str	r0, [sp, #4]
   1f0b4:	9000      	str	r0, [sp, #0]
   1f0b6:	f88d 4006 	strb.w	r4, [sp, #6]
   1f0ba:	e00a      	b.n	1f0d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
   1f0bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1f0c0:	4621      	mov	r1, r4
   1f0c2:	f7ee fa1d 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1f0c6:	b120      	cbz	r0, 1f0d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
   1f0c8:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   1f0cc:	2017      	movs	r0, #23
   1f0ce:	f7ed fedb 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f0d2:	4668      	mov	r0, sp
   1f0d4:	f7ee f986 	bl	d3e4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1f0d8:	2800      	cmp	r0, #0
   1f0da:	d0ef      	beq.n	1f0bc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
   1f0dc:	bd1c      	pop	{r2, r3, r4, pc}

0001f0de <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
   1f0de:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   1f0e2:	3aff      	subs	r2, #255	; 0xff
   1f0e4:	d001      	beq.n	1f0ea <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
   1f0e6:	2909      	cmp	r1, #9
   1f0e8:	d301      	bcc.n	1f0ee <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
   1f0ea:	2000      	movs	r0, #0
   1f0ec:	4770      	bx	lr
   1f0ee:	f7ee ba39 	b.w	d564 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0001f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   1f0f2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
   1f0f6:	3aff      	subs	r2, #255	; 0xff
   1f0f8:	d001      	beq.n	1f0fe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
   1f0fa:	2909      	cmp	r1, #9
   1f0fc:	d301      	bcc.n	1f102 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
   1f0fe:	2000      	movs	r0, #0
   1f100:	4770      	bx	lr
   1f102:	f7ee ba57 	b.w	d5b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
   1f106:	b510      	push	{r4, lr}
   1f108:	4604      	mov	r4, r0
   1f10a:	f7ee fa9f 	bl	d64c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
   1f10e:	42a0      	cmp	r0, r4
   1f110:	d901      	bls.n	1f116 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
   1f112:	2001      	movs	r0, #1
   1f114:	bd10      	pop	{r4, pc}
   1f116:	2000      	movs	r0, #0
   1f118:	bd10      	pop	{r4, pc}

0001f11a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   1f11a:	b570      	push	{r4, r5, r6, lr}
   1f11c:	460e      	mov	r6, r1
   1f11e:	461d      	mov	r5, r3
   1f120:	4611      	mov	r1, r2
   1f122:	f000 f813 	bl	1f14c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
   1f126:	4604      	mov	r4, r0
   1f128:	4629      	mov	r1, r5
   1f12a:	4630      	mov	r0, r6
   1f12c:	f000 f804 	bl	1f138 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
   1f130:	4420      	add	r0, r4
   1f132:	1d00      	adds	r0, r0, #4
   1f134:	b280      	uxth	r0, r0
   1f136:	bd70      	pop	{r4, r5, r6, pc}
   1f138:	b510      	push	{r4, lr}
   1f13a:	460a      	mov	r2, r1
   1f13c:	2109      	movs	r1, #9
   1f13e:	f7ff ff0f 	bl	1ef60 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1f142:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   1f146:	1cc0      	adds	r0, r0, #3
   1f148:	4008      	ands	r0, r1
   1f14a:	bd10      	pop	{r4, pc}
   1f14c:	b510      	push	{r4, lr}
   1f14e:	460a      	mov	r2, r1
   1f150:	210a      	movs	r1, #10
   1f152:	f7ff ff05 	bl	1ef60 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1f156:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   1f15a:	1cc0      	adds	r0, r0, #3
   1f15c:	4008      	ands	r0, r1
   1f15e:	bd10      	pop	{r4, pc}

0001f160 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ>:
   1f160:	b570      	push	{r4, r5, r6, lr}
   1f162:	1cd2      	adds	r2, r2, #3
   1f164:	f022 0203 	bic.w	r2, r2, #3
   1f168:	320c      	adds	r2, #12
   1f16a:	0783      	lsls	r3, r0, #30
   1f16c:	d003      	beq.n	1f176 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x16>
   1f16e:	215c      	movs	r1, #92	; 0x5c
   1f170:	2022      	movs	r0, #34	; 0x22
   1f172:	f7ed fe89 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f176:	b108      	cbz	r0, 1f17c <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x1c>
   1f178:	1d03      	adds	r3, r0, #4
   1f17a:	6003      	str	r3, [r0, #0]
   1f17c:	4605      	mov	r5, r0
   1f17e:	4613      	mov	r3, r2
   1f180:	1d00      	adds	r0, r0, #4
   1f182:	1d12      	adds	r2, r2, #4
   1f184:	e004      	b.n	1f190 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x30>
   1f186:	b115      	cbz	r5, 1f18e <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x2e>
   1f188:	18c4      	adds	r4, r0, r3
   1f18a:	6004      	str	r4, [r0, #0]
   1f18c:	4620      	mov	r0, r4
   1f18e:	441a      	add	r2, r3
   1f190:	1e49      	subs	r1, r1, #1
   1f192:	0409      	lsls	r1, r1, #16
   1f194:	0c09      	lsrs	r1, r1, #16
   1f196:	d1f6      	bne.n	1f186 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x26>
   1f198:	b105      	cbz	r5, 1f19c <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x3c>
   1f19a:	6001      	str	r1, [r0, #0]
   1f19c:	4610      	mov	r0, r2
   1f19e:	bd70      	pop	{r4, r5, r6, pc}
   1f1a0:	b510      	push	{r4, lr}
   1f1a2:	4604      	mov	r4, r0
   1f1a4:	4608      	mov	r0, r1
   1f1a6:	f000 f815 	bl	1f1d4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
   1f1aa:	1821      	adds	r1, r4, r0
   1f1ac:	7d0a      	ldrb	r2, [r1, #20]
   1f1ae:	2a02      	cmp	r2, #2
   1f1b0:	d008      	beq.n	1f1c4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x64>
   1f1b2:	7d49      	ldrb	r1, [r1, #21]
   1f1b4:	2902      	cmp	r1, #2
   1f1b6:	d009      	beq.n	1f1cc <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x6c>
   1f1b8:	2a03      	cmp	r2, #3
   1f1ba:	d003      	beq.n	1f1c4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x64>
   1f1bc:	2903      	cmp	r1, #3
   1f1be:	d005      	beq.n	1f1cc <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x6c>
   1f1c0:	2000      	movs	r0, #0
   1f1c2:	bd10      	pop	{r4, pc}
   1f1c4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f1c8:	8b00      	ldrh	r0, [r0, #24]
   1f1ca:	bd10      	pop	{r4, pc}
   1f1cc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f1d0:	8b40      	ldrh	r0, [r0, #26]
   1f1d2:	bd10      	pop	{r4, pc}
   1f1d4:	b108      	cbz	r0, 1f1da <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x7a>
   1f1d6:	2000      	movs	r0, #0
   1f1d8:	4770      	bx	lr
   1f1da:	2002      	movs	r0, #2
   1f1dc:	4770      	bx	lr
   1f1de:	b510      	push	{r4, lr}
   1f1e0:	4604      	mov	r4, r0
   1f1e2:	4608      	mov	r0, r1
   1f1e4:	f7ff fff6 	bl	1f1d4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
   1f1e8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f1ec:	8b01      	ldrh	r1, [r0, #24]
   1f1ee:	b911      	cbnz	r1, 1f1f6 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x96>
   1f1f0:	8b40      	ldrh	r0, [r0, #26]
   1f1f2:	2800      	cmp	r0, #0
   1f1f4:	d000      	beq.n	1f1f8 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x98>
   1f1f6:	2001      	movs	r0, #1
   1f1f8:	bd10      	pop	{r4, pc}
   1f1fa:	b538      	push	{r3, r4, r5, lr}
   1f1fc:	4604      	mov	r4, r0
   1f1fe:	7880      	ldrb	r0, [r0, #2]
   1f200:	460d      	mov	r5, r1
   1f202:	f88d 0000 	strb.w	r0, [sp]
   1f206:	9800      	ldr	r0, [sp, #0]
   1f208:	9000      	str	r0, [sp, #0]
   1f20a:	f89d 0000 	ldrb.w	r0, [sp]
   1f20e:	b948      	cbnz	r0, 1f224 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xc4>
   1f210:	4610      	mov	r0, r2
   1f212:	f7ff ffdf 	bl	1f1d4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
   1f216:	1821      	adds	r1, r4, r0
   1f218:	7d0a      	ldrb	r2, [r1, #20]
   1f21a:	2a02      	cmp	r2, #2
   1f21c:	d004      	beq.n	1f228 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xc8>
   1f21e:	7d49      	ldrb	r1, [r1, #21]
   1f220:	2902      	cmp	r1, #2
   1f222:	d005      	beq.n	1f230 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xd0>
   1f224:	2000      	movs	r0, #0
   1f226:	bd38      	pop	{r3, r4, r5, pc}
   1f228:	4602      	mov	r2, r0
   1f22a:	1c40      	adds	r0, r0, #1
   1f22c:	b2c0      	uxtb	r0, r0
   1f22e:	e001      	b.n	1f234 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xd4>
   1f230:	1c41      	adds	r1, r0, #1
   1f232:	b2ca      	uxtb	r2, r1
   1f234:	b185      	cbz	r5, 1f258 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xf8>
   1f236:	1823      	adds	r3, r4, r0
   1f238:	2100      	movs	r1, #0
   1f23a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f23e:	7519      	strb	r1, [r3, #20]
   1f240:	8301      	strh	r1, [r0, #24]
   1f242:	2003      	movs	r0, #3
   1f244:	18a1      	adds	r1, r4, r2
   1f246:	7508      	strb	r0, [r1, #20]
   1f248:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   1f24c:	6840      	ldr	r0, [r0, #4]
   1f24e:	6028      	str	r0, [r5, #0]
   1f250:	eb04 0042 	add.w	r0, r4, r2, lsl #1
   1f254:	8b00      	ldrh	r0, [r0, #24]
   1f256:	80a8      	strh	r0, [r5, #4]
   1f258:	2001      	movs	r0, #1
   1f25a:	bd38      	pop	{r3, r4, r5, pc}
   1f25c:	b570      	push	{r4, r5, r6, lr}
   1f25e:	4604      	mov	r4, r0
   1f260:	4615      	mov	r5, r2
   1f262:	4608      	mov	r0, r1
   1f264:	f7ff ffb6 	bl	1f1d4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
   1f268:	1821      	adds	r1, r4, r0
   1f26a:	7d0a      	ldrb	r2, [r1, #20]
   1f26c:	42aa      	cmp	r2, r5
   1f26e:	d103      	bne.n	1f278 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x118>
   1f270:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f274:	8b00      	ldrh	r0, [r0, #24]
   1f276:	bd70      	pop	{r4, r5, r6, pc}
   1f278:	7d49      	ldrb	r1, [r1, #21]
   1f27a:	42a9      	cmp	r1, r5
   1f27c:	d103      	bne.n	1f286 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x126>
   1f27e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f282:	8b40      	ldrh	r0, [r0, #26]
   1f284:	bd70      	pop	{r4, r5, r6, pc}
   1f286:	2000      	movs	r0, #0
   1f288:	bd70      	pop	{r4, r5, r6, pc}
   1f28a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   1f28e:	d201      	bcs.n	1f294 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x134>
   1f290:	0840      	lsrs	r0, r0, #1
   1f292:	4770      	bx	lr
   1f294:	20ff      	movs	r0, #255	; 0xff
   1f296:	4770      	bx	lr
   1f298:	b510      	push	{r4, lr}
   1f29a:	4604      	mov	r4, r0
   1f29c:	f7ff fff5 	bl	1f28a <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x12a>
   1f2a0:	1a20      	subs	r0, r4, r0
   1f2a2:	f240 6172 	movw	r1, #1650	; 0x672
   1f2a6:	4288      	cmp	r0, r1
   1f2a8:	db00      	blt.n	1f2ac <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x14c>
   1f2aa:	4608      	mov	r0, r1
   1f2ac:	b280      	uxth	r0, r0
   1f2ae:	bd10      	pop	{r4, pc}

0001f2b0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
   1f2b0:	2101      	movs	r1, #1
   1f2b2:	f7ff bf75 	b.w	1f1a0 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x40>

0001f2b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
   1f2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2ba:	4606      	mov	r6, r0
   1f2bc:	f342 0780 	sbfx	r7, r2, #2, #1
   1f2c0:	7848      	ldrb	r0, [r1, #1]
   1f2c2:	460c      	mov	r4, r1
   1f2c4:	f022 0504 	bic.w	r5, r2, #4
   1f2c8:	1c7f      	adds	r7, r7, #1
   1f2ca:	b100      	cbz	r0, 1f2ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
   1f2cc:	b995      	cbnz	r5, 1f2f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   1f2ce:	4328      	orrs	r0, r5
   1f2d0:	d010      	beq.n	1f2f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x3e>
   1f2d2:	2000      	movs	r0, #0
   1f2d4:	b120      	cbz	r0, 1f2e0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2a>
   1f2d6:	b17d      	cbz	r5, 1f2f8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x42>
   1f2d8:	2100      	movs	r1, #0
   1f2da:	4620      	mov	r0, r4
   1f2dc:	f7ee fae2 	bl	d8a4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   1f2e0:	20ff      	movs	r0, #255	; 0xff
   1f2e2:	70a0      	strb	r0, [r4, #2]
   1f2e4:	4638      	mov	r0, r7
   1f2e6:	f7ff ff75 	bl	1f1d4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
   1f2ea:	1821      	adds	r1, r4, r0
   1f2ec:	7d09      	ldrb	r1, [r1, #20]
   1f2ee:	2903      	cmp	r1, #3
   1f2f0:	d004      	beq.n	1f2fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x46>
   1f2f2:	e007      	b.n	1f304 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   1f2f4:	2001      	movs	r0, #1
   1f2f6:	e7ed      	b.n	1f2d4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1e>
   1f2f8:	2101      	movs	r1, #1
   1f2fa:	e7ee      	b.n	1f2da <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x24>
   1f2fc:	2d02      	cmp	r5, #2
   1f2fe:	d001      	beq.n	1f304 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x4e>
   1f300:	1c40      	adds	r0, r0, #1
   1f302:	b2c0      	uxtb	r0, r0
   1f304:	1822      	adds	r2, r4, r0
   1f306:	2101      	movs	r1, #1
   1f308:	7511      	strb	r1, [r2, #20]
   1f30a:	eb04 0240 	add.w	r2, r4, r0, lsl #1
   1f30e:	2100      	movs	r1, #0
   1f310:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1f314:	8311      	strh	r1, [r2, #24]
   1f316:	6842      	ldr	r2, [r0, #4]
   1f318:	70a1      	strb	r1, [r4, #2]
   1f31a:	4633      	mov	r3, r6
   1f31c:	f361 030f 	bfi	r3, r1, #0, #16
   1f320:	c60c      	stmia	r6!, {r2, r3}
   1f322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f326 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
   1f326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f32a:	4604      	mov	r4, r0
   1f32c:	461e      	mov	r6, r3
   1f32e:	4690      	mov	r8, r2
   1f330:	4608      	mov	r0, r1
   1f332:	f7ff ff4f 	bl	1f1d4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
   1f336:	21ff      	movs	r1, #255	; 0xff
   1f338:	70a1      	strb	r1, [r4, #2]
   1f33a:	1821      	adds	r1, r4, r0
   1f33c:	7d0a      	ldrb	r2, [r1, #20]
   1f33e:	2a01      	cmp	r2, #1
   1f340:	d004      	beq.n	1f34c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
   1f342:	7d49      	ldrb	r1, [r1, #21]
   1f344:	2901      	cmp	r1, #1
   1f346:	d10c      	bne.n	1f362 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3c>
   1f348:	1c40      	adds	r0, r0, #1
   1f34a:	b2c0      	uxtb	r0, r0
   1f34c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
   1f350:	2700      	movs	r7, #0
   1f352:	8b29      	ldrh	r1, [r5, #24]
   1f354:	8c2b      	ldrh	r3, [r5, #32]
   1f356:	198a      	adds	r2, r1, r6
   1f358:	429a      	cmp	r2, r3
   1f35a:	d905      	bls.n	1f368 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x42>
   1f35c:	4420      	add	r0, r4
   1f35e:	832f      	strh	r7, [r5, #24]
   1f360:	7507      	strb	r7, [r0, #20]
   1f362:	2000      	movs	r0, #0
   1f364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f368:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1f36c:	4632      	mov	r2, r6
   1f36e:	6840      	ldr	r0, [r0, #4]
   1f370:	4408      	add	r0, r1
   1f372:	4641      	mov	r1, r8
   1f374:	f003 feb9 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f378:	8b28      	ldrh	r0, [r5, #24]
   1f37a:	4430      	add	r0, r6
   1f37c:	8328      	strh	r0, [r5, #24]
   1f37e:	70a7      	strb	r7, [r4, #2]
   1f380:	2001      	movs	r0, #1
   1f382:	e7ef      	b.n	1f364 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>

0001f384 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
   1f384:	b510      	push	{r4, lr}
   1f386:	2101      	movs	r1, #1
   1f388:	f7ff ff29 	bl	1f1de <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x7e>
   1f38c:	2800      	cmp	r0, #0
   1f38e:	d000      	beq.n	1f392 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
   1f390:	2001      	movs	r0, #1
   1f392:	bd10      	pop	{r4, pc}

0001f394 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
   1f394:	2201      	movs	r2, #1
   1f396:	f7ff bf30 	b.w	1f1fa <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x9a>

0001f39a <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
   1f39a:	2200      	movs	r2, #0
   1f39c:	f7ff bf2d 	b.w	1f1fa <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x9a>

0001f3a0 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
   1f3a0:	b510      	push	{r4, lr}
   1f3a2:	2100      	movs	r1, #0
   1f3a4:	f7ff ff1b 	bl	1f1de <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x7e>
   1f3a8:	2800      	cmp	r0, #0
   1f3aa:	d000      	beq.n	1f3ae <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
   1f3ac:	2001      	movs	r0, #1
   1f3ae:	bd10      	pop	{r4, pc}

0001f3b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
   1f3b0:	b570      	push	{r4, r5, r6, lr}
   1f3b2:	4604      	mov	r4, r0
   1f3b4:	4615      	mov	r5, r2
   1f3b6:	4608      	mov	r0, r1
   1f3b8:	f7ff ff0c 	bl	1f1d4 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x74>
   1f3bc:	21ff      	movs	r1, #255	; 0xff
   1f3be:	70a1      	strb	r1, [r4, #2]
   1f3c0:	1821      	adds	r1, r4, r0
   1f3c2:	2202      	movs	r2, #2
   1f3c4:	7d0b      	ldrb	r3, [r1, #20]
   1f3c6:	2b01      	cmp	r3, #1
   1f3c8:	d007      	beq.n	1f3da <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x2a>
   1f3ca:	7d4b      	ldrb	r3, [r1, #21]
   1f3cc:	2b01      	cmp	r3, #1
   1f3ce:	d009      	beq.n	1f3e4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x34>
   1f3d0:	f44f 718b 	mov.w	r1, #278	; 0x116
   1f3d4:	2009      	movs	r0, #9
   1f3d6:	f7ed fd57 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f3da:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f3de:	8305      	strh	r5, [r0, #24]
   1f3e0:	750a      	strb	r2, [r1, #20]
   1f3e2:	e003      	b.n	1f3ec <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3c>
   1f3e4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   1f3e8:	8345      	strh	r5, [r0, #26]
   1f3ea:	754a      	strb	r2, [r1, #21]
   1f3ec:	2000      	movs	r0, #0
   1f3ee:	70a0      	strb	r0, [r4, #2]
   1f3f0:	bd70      	pop	{r4, r5, r6, pc}

0001f3f2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
   1f3f2:	2101      	movs	r1, #1
   1f3f4:	7001      	strb	r1, [r0, #0]
   1f3f6:	4770      	bx	lr

0001f3f8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
   1f3f8:	2201      	movs	r2, #1
   1f3fa:	4611      	mov	r1, r2
   1f3fc:	f7ff bf2e 	b.w	1f25c <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xfc>

0001f400 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
   1f400:	2201      	movs	r2, #1
   1f402:	2100      	movs	r1, #0
   1f404:	f7ff bf2a 	b.w	1f25c <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0xfc>

0001f408 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
   1f408:	2100      	movs	r1, #0
   1f40a:	f7ff bec9 	b.w	1f1a0 <sym_XSEZXMQQS2VJJZHPRHPSZNIZGQFJE2LG6GV7GQQ+0x40>
   1f40e:	b538      	push	{r3, r4, r5, lr}
   1f410:	9c04      	ldr	r4, [sp, #16]
   1f412:	9400      	str	r4, [sp, #0]
   1f414:	f7ff fd5b 	bl	1eece <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   1f418:	bd38      	pop	{r3, r4, r5, pc}
   1f41a:	f7ff bda1 	b.w	1ef60 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   1f41e:	2800      	cmp	r0, #0
   1f420:	db09      	blt.n	1f436 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x2e>
   1f422:	f000 021f 	and.w	r2, r0, #31
   1f426:	2101      	movs	r1, #1
   1f428:	4091      	lsls	r1, r2
   1f42a:	0940      	lsrs	r0, r0, #5
   1f42c:	0080      	lsls	r0, r0, #2
   1f42e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1f432:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1f436:	4770      	bx	lr
   1f438:	2800      	cmp	r0, #0
   1f43a:	db0d      	blt.n	1f458 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x50>
   1f43c:	f000 021f 	and.w	r2, r0, #31
   1f440:	2101      	movs	r1, #1
   1f442:	4091      	lsls	r1, r2
   1f444:	0940      	lsrs	r0, r0, #5
   1f446:	0080      	lsls	r0, r0, #2
   1f448:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1f44c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1f450:	f3bf 8f4f 	dsb	sy
   1f454:	f3bf 8f6f 	isb	sy
   1f458:	4770      	bx	lr
   1f45a:	b510      	push	{r4, lr}
   1f45c:	200e      	movs	r0, #14
   1f45e:	f7ff ffeb 	bl	1f438 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x30>
   1f462:	200e      	movs	r0, #14
   1f464:	f7ff ffdb 	bl	1f41e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x16>
   1f468:	200f      	movs	r0, #15
   1f46a:	f7ff ffe5 	bl	1f438 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x30>
   1f46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f472:	200f      	movs	r0, #15
   1f474:	f7ff bfd3 	b.w	1f41e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x16>
   1f478:	2800      	cmp	r0, #0
   1f47a:	db09      	blt.n	1f490 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x88>
   1f47c:	f000 021f 	and.w	r2, r0, #31
   1f480:	2101      	movs	r1, #1
   1f482:	4091      	lsls	r1, r2
   1f484:	0940      	lsrs	r0, r0, #5
   1f486:	0080      	lsls	r0, r0, #2
   1f488:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1f48c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1f490:	4770      	bx	lr
   1f492:	5840      	ldr	r0, [r0, r1]
   1f494:	2800      	cmp	r0, #0
   1f496:	d000      	beq.n	1f49a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x92>
   1f498:	2001      	movs	r0, #1
   1f49a:	4770      	bx	lr

0001f49c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
   1f49c:	b510      	push	{r4, lr}
   1f49e:	4604      	mov	r4, r0
   1f4a0:	4620      	mov	r0, r4
   1f4a2:	f7ee fb6b 	bl	db7c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
   1f4a6:	2811      	cmp	r0, #17
   1f4a8:	d0fa      	beq.n	1f4a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
   1f4aa:	bd10      	pop	{r4, pc}

0001f4ac <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   1f4ac:	b510      	push	{r4, lr}
   1f4ae:	f7ff fff5 	bl	1f49c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   1f4b2:	2800      	cmp	r0, #0
   1f4b4:	d003      	beq.n	1f4be <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
   1f4b6:	21a0      	movs	r1, #160	; 0xa0
   1f4b8:	201d      	movs	r0, #29
   1f4ba:	f7ed fce5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f4be:	bd10      	pop	{r4, pc}

0001f4c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
   1f4c0:	4050      	eors	r0, r2
   1f4c2:	780a      	ldrb	r2, [r1, #0]
   1f4c4:	f893 c000 	ldrb.w	ip, [r3]
   1f4c8:	ea82 020c 	eor.w	r2, r2, ip
   1f4cc:	4410      	add	r0, r2
   1f4ce:	784a      	ldrb	r2, [r1, #1]
   1f4d0:	f893 c001 	ldrb.w	ip, [r3, #1]
   1f4d4:	ea82 020c 	eor.w	r2, r2, ip
   1f4d8:	4410      	add	r0, r2
   1f4da:	788a      	ldrb	r2, [r1, #2]
   1f4dc:	f893 c002 	ldrb.w	ip, [r3, #2]
   1f4e0:	ea82 020c 	eor.w	r2, r2, ip
   1f4e4:	4410      	add	r0, r2
   1f4e6:	78ca      	ldrb	r2, [r1, #3]
   1f4e8:	f893 c003 	ldrb.w	ip, [r3, #3]
   1f4ec:	ea82 020c 	eor.w	r2, r2, ip
   1f4f0:	4410      	add	r0, r2
   1f4f2:	790a      	ldrb	r2, [r1, #4]
   1f4f4:	f893 c004 	ldrb.w	ip, [r3, #4]
   1f4f8:	7949      	ldrb	r1, [r1, #5]
   1f4fa:	ea82 020c 	eor.w	r2, r2, ip
   1f4fe:	4410      	add	r0, r2
   1f500:	795a      	ldrb	r2, [r3, #5]
   1f502:	4051      	eors	r1, r2
   1f504:	42c1      	cmn	r1, r0
   1f506:	bf0c      	ite	eq
   1f508:	2001      	moveq	r0, #1
   1f50a:	2000      	movne	r0, #0
   1f50c:	4770      	bx	lr

0001f50e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   1f50e:	b510      	push	{r4, lr}
   1f510:	2900      	cmp	r1, #0
   1f512:	4604      	mov	r4, r0
   1f514:	f04f 0106 	mov.w	r1, #6
   1f518:	d002      	beq.n	1f520 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   1f51a:	f7ed fd65 	bl	cfe8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1f51e:	e001      	b.n	1f524 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   1f520:	f7ed fd70 	bl	d004 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1f524:	7960      	ldrb	r0, [r4, #5]
   1f526:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1f52a:	7160      	strb	r0, [r4, #5]
   1f52c:	bd10      	pop	{r4, pc}

0001f52e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   1f52e:	4770      	bx	lr

0001f530 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   1f530:	b530      	push	{r4, r5, lr}
   1f532:	460c      	mov	r4, r1
   1f534:	4605      	mov	r5, r0
   1f536:	b08d      	sub	sp, #52	; 0x34
   1f538:	f04f 0103 	mov.w	r1, #3
   1f53c:	f104 0003 	add.w	r0, r4, #3
   1f540:	b112      	cbz	r2, 1f548 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   1f542:	f7ed fd51 	bl	cfe8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   1f546:	e001      	b.n	1f54c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   1f548:	f7ed fd5c 	bl	d004 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   1f54c:	7960      	ldrb	r0, [r4, #5]
   1f54e:	220d      	movs	r2, #13
   1f550:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1f554:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1f558:	7160      	strb	r0, [r4, #5]
   1f55a:	2100      	movs	r1, #0
   1f55c:	a804      	add	r0, sp, #16
   1f55e:	f003 fe3e 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   1f562:	78e0      	ldrb	r0, [r4, #3]
   1f564:	f88d 001f 	strb.w	r0, [sp, #31]
   1f568:	7920      	ldrb	r0, [r4, #4]
   1f56a:	f88d 001e 	strb.w	r0, [sp, #30]
   1f56e:	7960      	ldrb	r0, [r4, #5]
   1f570:	f88d 001d 	strb.w	r0, [sp, #29]
   1f574:	6828      	ldr	r0, [r5, #0]
   1f576:	9000      	str	r0, [sp, #0]
   1f578:	6868      	ldr	r0, [r5, #4]
   1f57a:	9001      	str	r0, [sp, #4]
   1f57c:	68a8      	ldr	r0, [r5, #8]
   1f57e:	9002      	str	r0, [sp, #8]
   1f580:	68e8      	ldr	r0, [r5, #12]
   1f582:	9003      	str	r0, [sp, #12]
   1f584:	4668      	mov	r0, sp
   1f586:	f7ff ff91 	bl	1f4ac <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   1f58a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1f58e:	7020      	strb	r0, [r4, #0]
   1f590:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1f594:	7060      	strb	r0, [r4, #1]
   1f596:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   1f59a:	70a0      	strb	r0, [r4, #2]
   1f59c:	b00d      	add	sp, #52	; 0x34
   1f59e:	bd30      	pop	{r4, r5, pc}

0001f5a0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
   1f5a0:	f7ef b9f8 	b.w	e994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>

0001f5a4 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   1f5a4:	b510      	push	{r4, lr}
   1f5a6:	f7f8 f99b 	bl	178e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   1f5aa:	2800      	cmp	r0, #0
   1f5ac:	bf04      	itt	eq
   1f5ae:	20ff      	moveq	r0, #255	; 0xff
   1f5b0:	bd10      	popeq	{r4, pc}
   1f5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f5b6:	f7f8 b973 	b.w	178a0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>

0001f5ba <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
   1f5ba:	b510      	push	{r4, lr}
   1f5bc:	f7ef fda8 	bl	f110 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
   1f5c0:	2810      	cmp	r0, #16
   1f5c2:	bf04      	itt	eq
   1f5c4:	2000      	moveq	r0, #0
   1f5c6:	bd10      	popeq	{r4, pc}
   1f5c8:	f7ef fde8 	bl	f19c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
   1f5cc:	2001      	movs	r0, #1
   1f5ce:	bd10      	pop	{r4, pc}

0001f5d0 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
   1f5d0:	b570      	push	{r4, r5, r6, lr}
   1f5d2:	4606      	mov	r6, r0
   1f5d4:	7900      	ldrb	r0, [r0, #4]
   1f5d6:	f030 001f 	bics.w	r0, r0, #31
   1f5da:	bf04      	itt	eq
   1f5dc:	2500      	moveq	r5, #0
   1f5de:	462c      	moveq	r4, r5
   1f5e0:	d10c      	bne.n	1f5fc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x2c>
   1f5e2:	5d30      	ldrb	r0, [r6, r4]
   1f5e4:	f000 fe49 	bl	2027a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
   1f5e8:	4428      	add	r0, r5
   1f5ea:	b2c5      	uxtb	r5, r0
   1f5ec:	1c60      	adds	r0, r4, #1
   1f5ee:	b2c4      	uxtb	r4, r0
   1f5f0:	2c05      	cmp	r4, #5
   1f5f2:	d3f6      	bcc.n	1f5e2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x12>
   1f5f4:	2d01      	cmp	r5, #1
   1f5f6:	bf84      	itt	hi
   1f5f8:	2001      	movhi	r0, #1
   1f5fa:	bd70      	pophi	{r4, r5, r6, pc}
   1f5fc:	2000      	movs	r0, #0
   1f5fe:	bd70      	pop	{r4, r5, r6, pc}

0001f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   1f600:	b570      	push	{r4, r5, r6, lr}
   1f602:	460c      	mov	r4, r1
   1f604:	4605      	mov	r5, r0
   1f606:	2100      	movs	r1, #0
   1f608:	f7ff fd73 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1f60c:	6060      	str	r0, [r4, #4]
   1f60e:	b110      	cbz	r0, 1f616 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   1f610:	2000      	movs	r0, #0
   1f612:	7020      	strb	r0, [r4, #0]
   1f614:	bd70      	pop	{r4, r5, r6, pc}
   1f616:	2101      	movs	r1, #1
   1f618:	4628      	mov	r0, r5
   1f61a:	f7ff fd6a 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1f61e:	6060      	str	r0, [r4, #4]
   1f620:	2800      	cmp	r0, #0
   1f622:	bf04      	itt	eq
   1f624:	2002      	moveq	r0, #2
   1f626:	bd70      	popeq	{r4, r5, r6, pc}
   1f628:	2001      	movs	r0, #1
   1f62a:	7020      	strb	r0, [r4, #0]
   1f62c:	2000      	movs	r0, #0
   1f62e:	bd70      	pop	{r4, r5, r6, pc}

0001f630 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   1f630:	f6a0 5101 	subw	r1, r0, #3329	; 0xd01
   1f634:	2906      	cmp	r1, #6
   1f636:	bf9a      	itte	ls
   1f638:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   1f63c:	f5a0 6050 	subls.w	r0, r0, #3328	; 0xd00
   1f640:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   1f644:	4348      	muls	r0, r1
   1f646:	4770      	bx	lr

0001f648 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   1f648:	f5a0 717a 	sub.w	r1, r0, #1000	; 0x3e8
   1f64c:	f241 7270 	movw	r2, #6000	; 0x1770
   1f650:	4291      	cmp	r1, r2
   1f652:	bf94      	ite	ls
   1f654:	f44f 717a 	movls.w	r1, #1000	; 0x3e8
   1f658:	f240 41e2 	movwhi	r1, #1250	; 0x4e2
   1f65c:	fbb0 f0f1 	udiv	r0, r0, r1
   1f660:	bf98      	it	ls
   1f662:	f500 6050 	addls.w	r0, r0, #3328	; 0xd00
   1f666:	b280      	uxth	r0, r0
   1f668:	4770      	bx	lr

0001f66a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
   1f66a:	b570      	push	{r4, r5, r6, lr}
   1f66c:	4604      	mov	r4, r0
   1f66e:	4290      	cmp	r0, r2
   1f670:	bf28      	it	cs
   1f672:	bd70      	popcs	{r4, r5, r6, pc}
   1f674:	1b10      	subs	r0, r2, r4
   1f676:	2865      	cmp	r0, #101	; 0x65
   1f678:	d30b      	bcc.n	1f692 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x28>
   1f67a:	1825      	adds	r5, r4, r0
   1f67c:	428d      	cmp	r5, r1
   1f67e:	d806      	bhi.n	1f68e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x24>
   1f680:	2103      	movs	r1, #3
   1f682:	f7fb fb51 	bl	1ad28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   1f686:	2800      	cmp	r0, #0
   1f688:	bf04      	itt	eq
   1f68a:	4628      	moveq	r0, r5
   1f68c:	bd70      	popeq	{r4, r5, r6, pc}
   1f68e:	4620      	mov	r0, r4
   1f690:	bd70      	pop	{r4, r5, r6, pc}
   1f692:	2065      	movs	r0, #101	; 0x65
   1f694:	e7f1      	b.n	1f67a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>

0001f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   1f696:	290e      	cmp	r1, #14
   1f698:	d26d      	bcs.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f69a:	e8df f001 	tbb	[pc, r1]
   1f69e:	0a07      	.short	0x0a07
   1f6a0:	1f1a150f 	.word	0x1f1a150f
   1f6a4:	6f434036 	.word	0x6f434036
   1f6a8:	605d4c46 	.word	0x605d4c46
   1f6ac:	2a00      	cmp	r2, #0
   1f6ae:	d05f      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6b0:	e061      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f6b2:	2a07      	cmp	r2, #7
   1f6b4:	bf18      	it	ne
   1f6b6:	2a08      	cmpne	r2, #8
   1f6b8:	d05a      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6ba:	e05c      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f6bc:	2a0c      	cmp	r2, #12
   1f6be:	bf1c      	itt	ne
   1f6c0:	2a0d      	cmpne	r2, #13
   1f6c2:	2a0b      	cmpne	r2, #11
   1f6c4:	d054      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6c6:	e056      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f6c8:	2a0e      	cmp	r2, #14
   1f6ca:	bf18      	it	ne
   1f6cc:	2a0f      	cmpne	r2, #15
   1f6ce:	d04f      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6d0:	e051      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f6d2:	f1a2 0011 	sub.w	r0, r2, #17
   1f6d6:	280c      	cmp	r0, #12
   1f6d8:	d94a      	bls.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6da:	e04c      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f6dc:	b123      	cbz	r3, 1f6e8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x52>
   1f6de:	f1a2 0012 	sub.w	r0, r2, #18
   1f6e2:	280b      	cmp	r0, #11
   1f6e4:	d944      	bls.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6e6:	e046      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f6e8:	2a14      	cmp	r2, #20
   1f6ea:	bf18      	it	ne
   1f6ec:	2a13      	cmpne	r2, #19
   1f6ee:	d03f      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6f0:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
   1f6f4:	b120      	cbz	r0, 1f700 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x6a>
   1f6f6:	2a14      	cmp	r2, #20
   1f6f8:	d33d      	bcc.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f6fa:	2a1c      	cmp	r2, #28
   1f6fc:	d938      	bls.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f6fe:	e03a      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f700:	2a18      	cmp	r2, #24
   1f702:	d338      	bcc.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f704:	2a1c      	cmp	r2, #28
   1f706:	d933      	bls.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f708:	e035      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f70a:	f1a2 0111 	sub.w	r1, r2, #17
   1f70e:	2903      	cmp	r1, #3
   1f710:	d92e      	bls.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f712:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
   1f716:	b308      	cbz	r0, 1f75c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xc6>
   1f718:	2a1d      	cmp	r2, #29
   1f71a:	d929      	bls.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f71c:	e02b      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f71e:	2a04      	cmp	r2, #4
   1f720:	d026      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f722:	e028      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f724:	2a01      	cmp	r2, #1
   1f726:	d023      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f728:	e025      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f72a:	2a1e      	cmp	r2, #30
   1f72c:	bf1c      	itt	ne
   1f72e:	2a1f      	cmpne	r2, #31
   1f730:	2a20      	cmpne	r2, #32
   1f732:	d01d      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f734:	e01f      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f736:	2a21      	cmp	r2, #33	; 0x21
   1f738:	bf18      	it	ne
   1f73a:	2a22      	cmpne	r2, #34	; 0x22
   1f73c:	d018      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f73e:	2a23      	cmp	r2, #35	; 0x23
   1f740:	bf18      	it	ne
   1f742:	2a24      	cmpne	r2, #36	; 0x24
   1f744:	d014      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f746:	2a25      	cmp	r2, #37	; 0x25
   1f748:	bf18      	it	ne
   1f74a:	2a26      	cmpne	r2, #38	; 0x26
   1f74c:	d010      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f74e:	2a27      	cmp	r2, #39	; 0x27
   1f750:	bf18      	it	ne
   1f752:	2a2f      	cmpne	r2, #47	; 0x2f
   1f754:	d00c      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f756:	e00e      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f758:	2a29      	cmp	r2, #41	; 0x29
   1f75a:	d009      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f75c:	e00b      	b.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f75e:	2a2a      	cmp	r2, #42	; 0x2a
   1f760:	bf18      	it	ne
   1f762:	2a2b      	cmpne	r2, #43	; 0x2b
   1f764:	d004      	beq.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f766:	2a2c      	cmp	r2, #44	; 0x2c
   1f768:	bf1c      	itt	ne
   1f76a:	2a2d      	cmpne	r2, #45	; 0x2d
   1f76c:	2a2e      	cmpne	r2, #46	; 0x2e
   1f76e:	d102      	bne.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f770:	f04f 0001 	mov.w	r0, #1
   1f774:	4770      	bx	lr
   1f776:	f04f 0000 	mov.w	r0, #0
   1f77a:	4770      	bx	lr
   1f77c:	b113      	cbz	r3, 1f784 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xee>
   1f77e:	2a10      	cmp	r2, #16
   1f780:	d1f9      	bne.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f782:	e7f5      	b.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>
   1f784:	2a05      	cmp	r2, #5
   1f786:	d1f6      	bne.n	1f776 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xe0>
   1f788:	e7f2      	b.n	1f770 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xda>

0001f78a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   1f78a:	280c      	cmp	r0, #12
   1f78c:	bf18      	it	ne
   1f78e:	280d      	cmpne	r0, #13
   1f790:	d017      	beq.n	1f7c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   1f792:	280b      	cmp	r0, #11
   1f794:	bf18      	it	ne
   1f796:	280e      	cmpne	r0, #14
   1f798:	d013      	beq.n	1f7c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   1f79a:	280f      	cmp	r0, #15
   1f79c:	bf18      	it	ne
   1f79e:	2821      	cmpne	r0, #33	; 0x21
   1f7a0:	d00f      	beq.n	1f7c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   1f7a2:	2822      	cmp	r0, #34	; 0x22
   1f7a4:	bf18      	it	ne
   1f7a6:	2823      	cmpne	r0, #35	; 0x23
   1f7a8:	d00b      	beq.n	1f7c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   1f7aa:	2824      	cmp	r0, #36	; 0x24
   1f7ac:	bf18      	it	ne
   1f7ae:	2825      	cmpne	r0, #37	; 0x25
   1f7b0:	d007      	beq.n	1f7c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   1f7b2:	2826      	cmp	r0, #38	; 0x26
   1f7b4:	bf18      	it	ne
   1f7b6:	2827      	cmpne	r0, #39	; 0x27
   1f7b8:	d003      	beq.n	1f7c2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   1f7ba:	282f      	cmp	r0, #47	; 0x2f
   1f7bc:	bf1c      	itt	ne
   1f7be:	2000      	movne	r0, #0
   1f7c0:	4770      	bxne	lr
   1f7c2:	2001      	movs	r0, #1
   1f7c4:	4770      	bx	lr

0001f7c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   1f7c6:	f011 0f0c 	tst.w	r1, #12
   1f7ca:	d014      	beq.n	1f7f6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
   1f7cc:	f001 0104 	and.w	r1, r1, #4
   1f7d0:	2900      	cmp	r1, #0
   1f7d2:	bf0d      	iteet	eq
   1f7d4:	2240      	moveq	r2, #64	; 0x40
   1f7d6:	2210      	movne	r2, #16
   1f7d8:	2196      	movne	r1, #150	; 0x96
   1f7da:	f44f 7116 	moveq.w	r1, #600	; 0x258
   1f7de:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   1f7e2:	eba0 0301 	sub.w	r3, r0, r1
   1f7e6:	4288      	cmp	r0, r1
   1f7e8:	bf82      	ittt	hi
   1f7ea:	fb93 f0f2 	sdivhi	r0, r3, r2
   1f7ee:	b280      	uxthhi	r0, r0
   1f7f0:	4770      	bxhi	lr
   1f7f2:	2000      	movs	r0, #0
   1f7f4:	4770      	bx	lr
   1f7f6:	2902      	cmp	r1, #2
   1f7f8:	d008      	beq.n	1f80c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x46>
   1f7fa:	2870      	cmp	r0, #112	; 0x70
   1f7fc:	d9f9      	bls.n	1f7f2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
   1f7fe:	3870      	subs	r0, #112	; 0x70
   1f800:	17c1      	asrs	r1, r0, #31
   1f802:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   1f806:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   1f80a:	4770      	bx	lr
   1f80c:	283c      	cmp	r0, #60	; 0x3c
   1f80e:	d9f0      	bls.n	1f7f2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x2c>
   1f810:	383c      	subs	r0, #60	; 0x3c
   1f812:	17c1      	asrs	r1, r0, #31
   1f814:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   1f818:	f3c0 008f 	ubfx	r0, r0, #2, #16
   1f81c:	4770      	bx	lr

0001f81e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   1f81e:	6809      	ldr	r1, [r1, #0]
   1f820:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
   1f824:	4770      	bx	lr

0001f826 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   1f826:	f010 0f01 	tst.w	r0, #1
   1f82a:	bf1c      	itt	ne
   1f82c:	2001      	movne	r0, #1
   1f82e:	4770      	bxne	lr
   1f830:	f010 0f02 	tst.w	r0, #2
   1f834:	bf1c      	itt	ne
   1f836:	2002      	movne	r0, #2
   1f838:	4770      	bxne	lr
   1f83a:	f010 0004 	ands.w	r0, r0, #4
   1f83e:	bf18      	it	ne
   1f840:	2008      	movne	r0, #8
   1f842:	4770      	bx	lr

0001f844 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   1f844:	2901      	cmp	r1, #1
   1f846:	d008      	beq.n	1f85a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x16>
   1f848:	2902      	cmp	r1, #2
   1f84a:	d00b      	beq.n	1f864 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x20>
   1f84c:	2904      	cmp	r1, #4
   1f84e:	bf12      	itee	ne
   1f850:	2908      	cmpne	r1, #8
   1f852:	f640 60a6 	movweq	r0, #3750	; 0xea6
   1f856:	4770      	bxeq	lr
   1f858:	e007      	b.n	1f86a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x26>
   1f85a:	2800      	cmp	r0, #0
   1f85c:	bf04      	itt	eq
   1f85e:	f240 40e2 	movweq	r0, #1250	; 0x4e2
   1f862:	4770      	bxeq	lr
   1f864:	f640 10c4 	movw	r0, #2500	; 0x9c4
   1f868:	4770      	bx	lr
   1f86a:	b510      	push	{r4, lr}
   1f86c:	f240 31a1 	movw	r1, #929	; 0x3a1
   1f870:	2029      	movs	r0, #41	; 0x29
   1f872:	f7ed fb09 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001f876 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA>:
   1f876:	f04f 0c00 	mov.w	ip, #0
   1f87a:	2908      	cmp	r1, #8
   1f87c:	d002      	beq.n	1f884 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0xe>
   1f87e:	2904      	cmp	r1, #4
   1f880:	d009      	beq.n	1f896 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x20>
   1f882:	e011      	b.n	1f8a8 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1f884:	2801      	cmp	r0, #1
   1f886:	d10f      	bne.n	1f8a8 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1f888:	2004      	movs	r0, #4
   1f88a:	7090      	strb	r0, [r2, #2]
   1f88c:	f882 c003 	strb.w	ip, [r2, #3]
   1f890:	8013      	strh	r3, [r2, #0]
   1f892:	2001      	movs	r0, #1
   1f894:	4770      	bx	lr
   1f896:	2801      	cmp	r0, #1
   1f898:	d006      	beq.n	1f8a8 <sym_CB3FDFEUY3F2NWFVYZOUMB3I5QKHLDIUWWP26EA+0x32>
   1f89a:	2008      	movs	r0, #8
   1f89c:	7090      	strb	r0, [r2, #2]
   1f89e:	f882 c003 	strb.w	ip, [r2, #3]
   1f8a2:	8013      	strh	r3, [r2, #0]
   1f8a4:	2001      	movs	r0, #1
   1f8a6:	4770      	bx	lr
   1f8a8:	2000      	movs	r0, #0
   1f8aa:	4770      	bx	lr

0001f8ac <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   1f8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8b0:	4607      	mov	r7, r0
   1f8b2:	460e      	mov	r6, r1
   1f8b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
   1f8b8:	f7fb fe16 	bl	1b4e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   1f8bc:	b1a0      	cbz	r0, 1f8e8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3c>
   1f8be:	b336      	cbz	r6, 1f90e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
   1f8c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1f8c4:	1b02      	subs	r2, r0, r4
   1f8c6:	eb61 0305 	sbc.w	r3, r1, r5
   1f8ca:	2000      	movs	r0, #0
   1f8cc:	4601      	mov	r1, r0
   1f8ce:	1a80      	subs	r0, r0, r2
   1f8d0:	eb71 0003 	sbcs.w	r0, r1, r3
   1f8d4:	da1b      	bge.n	1f90e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x62>
   1f8d6:	1c50      	adds	r0, r2, #1
   1f8d8:	f173 0000 	sbcs.w	r0, r3, #0
   1f8dc:	db09      	blt.n	1f8f2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x46>
   1f8de:	f240 211b 	movw	r1, #539	; 0x21b
   1f8e2:	2029      	movs	r0, #41	; 0x29
   1f8e4:	f7ed fad0 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f8e8:	f240 2111 	movw	r1, #529	; 0x211
   1f8ec:	2029      	movs	r0, #41	; 0x29
   1f8ee:	f7ed facb 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f8f2:	1990      	adds	r0, r2, r6
   1f8f4:	1e40      	subs	r0, r0, #1
   1f8f6:	fbb0 f1f6 	udiv	r1, r0, r6
   1f8fa:	fb01 f006 	mul.w	r0, r1, r6
   1f8fe:	1820      	adds	r0, r4, r0
   1f900:	f145 0200 	adc.w	r2, r5, #0
   1f904:	e9c7 0204 	strd	r0, r2, [r7, #16]
   1f908:	4608      	mov	r0, r1
   1f90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f90e:	2000      	movs	r0, #0
   1f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f914 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   1f914:	2300      	movs	r3, #0
   1f916:	6403      	str	r3, [r0, #64]	; 0x40
   1f918:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   1f91c:	f240 2371 	movw	r3, #625	; 0x271
   1f920:	435a      	muls	r2, r3
   1f922:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1f926:	1e52      	subs	r2, r2, #1
   1f928:	fbb2 f1f1 	udiv	r1, r2, r1
   1f92c:	6441      	str	r1, [r0, #68]	; 0x44
   1f92e:	4770      	bx	lr

0001f930 <sym_OTIPANP3Q7VLW2BQGLZZUUDNR5HBSAYXJSFAKKA>:
   1f930:	f2a0 1089 	subw	r0, r0, #393	; 0x189
   1f934:	4281      	cmp	r1, r0
   1f936:	bf38      	it	cc
   1f938:	4608      	movcc	r0, r1
   1f93a:	1a08      	subs	r0, r1, r0
   1f93c:	6819      	ldr	r1, [r3, #0]
   1f93e:	0840      	lsrs	r0, r0, #1
   1f940:	4401      	add	r1, r0
   1f942:	6019      	str	r1, [r3, #0]
   1f944:	6811      	ldr	r1, [r2, #0]
   1f946:	eba1 0100 	sub.w	r1, r1, r0
   1f94a:	6011      	str	r1, [r2, #0]
   1f94c:	bf18      	it	ne
   1f94e:	2001      	movne	r0, #1
   1f950:	4770      	bx	lr

0001f952 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   1f952:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1f956:	4291      	cmp	r1, r2
   1f958:	bf34      	ite	cc
   1f95a:	2164      	movcc	r1, #100	; 0x64
   1f95c:	f240 41e2 	movwcs	r1, #1250	; 0x4e2
   1f960:	4348      	muls	r0, r1
   1f962:	4770      	bx	lr

0001f964 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   1f964:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1f968:	4291      	cmp	r1, r2
   1f96a:	bf3e      	ittt	cc
   1f96c:	2164      	movcc	r1, #100	; 0x64
   1f96e:	fb10 f001 	smulbbcc	r0, r0, r1
   1f972:	4770      	bxcc	lr
   1f974:	f240 2171 	movw	r1, #625	; 0x271
   1f978:	fb10 f001 	smulbb	r0, r0, r1
   1f97c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f980:	ea01 0040 	and.w	r0, r1, r0, lsl #1
   1f984:	4770      	bx	lr

0001f986 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
   1f986:	b570      	push	{r4, r5, r6, lr}
   1f988:	4604      	mov	r4, r0
   1f98a:	1c40      	adds	r0, r0, #1
   1f98c:	4288      	cmp	r0, r1
   1f98e:	bf18      	it	ne
   1f990:	f003 f8b4 	blne	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   1f994:	7960      	ldrb	r0, [r4, #5]
   1f996:	f000 001f 	and.w	r0, r0, #31
   1f99a:	7160      	strb	r0, [r4, #5]
   1f99c:	2000      	movs	r0, #0
   1f99e:	72e0      	strb	r0, [r4, #11]
   1f9a0:	4605      	mov	r5, r0
   1f9a2:	1966      	adds	r6, r4, r5
   1f9a4:	7870      	ldrb	r0, [r6, #1]
   1f9a6:	f000 fc68 	bl	2027a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
   1f9aa:	71b0      	strb	r0, [r6, #6]
   1f9ac:	7ae1      	ldrb	r1, [r4, #11]
   1f9ae:	4408      	add	r0, r1
   1f9b0:	72e0      	strb	r0, [r4, #11]
   1f9b2:	1c68      	adds	r0, r5, #1
   1f9b4:	b2c5      	uxtb	r5, r0
   1f9b6:	2d05      	cmp	r5, #5
   1f9b8:	d3f3      	bcc.n	1f9a2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1c>
   1f9ba:	bd70      	pop	{r4, r5, r6, pc}

0001f9bc <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA>:
   1f9bc:	b570      	push	{r4, r5, r6, lr}
   1f9be:	4605      	mov	r5, r0
   1f9c0:	78c0      	ldrb	r0, [r0, #3]
   1f9c2:	4616      	mov	r6, r2
   1f9c4:	f000 043f 	and.w	r4, r0, #63	; 0x3f
   1f9c8:	1910      	adds	r0, r2, r4
   1f9ca:	1c40      	adds	r0, r0, #1
   1f9cc:	28ff      	cmp	r0, #255	; 0xff
   1f9ce:	d904      	bls.n	1f9da <sym_CFSAKL745S6L7NUIQWHEM5VF373WPPG5ELNMOCA+0x1e>
   1f9d0:	f240 3183 	movw	r1, #899	; 0x383
   1f9d4:	202a      	movs	r0, #42	; 0x2a
   1f9d6:	f7ed fa57 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1f9da:	1928      	adds	r0, r5, r4
   1f9dc:	1d00      	adds	r0, r0, #4
   1f9de:	f003 fb84 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1f9e2:	19a0      	adds	r0, r4, r6
   1f9e4:	1c40      	adds	r0, r0, #1
   1f9e6:	7068      	strb	r0, [r5, #1]
   1f9e8:	bd70      	pop	{r4, r5, r6, pc}

0001f9ea <sym_IUN5SW63ODKDFPSGCV4FO7HO5IPKZTFTURF2JKI>:
   1f9ea:	22c0      	movs	r2, #192	; 0xc0
   1f9ec:	ea02 1181 	and.w	r1, r2, r1, lsl #6
   1f9f0:	78c2      	ldrb	r2, [r0, #3]
   1f9f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1f9f6:	4311      	orrs	r1, r2
   1f9f8:	70c1      	strb	r1, [r0, #3]
   1f9fa:	4770      	bx	lr

0001f9fc <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY>:
   1f9fc:	b2cb      	uxtb	r3, r1
   1f9fe:	f003 0101 	and.w	r1, r3, #1
   1fa02:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   1fa06:	4461      	add	r1, ip
   1fa08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1fa0c:	f3c3 0c80 	ubfx	ip, r3, #2, #1
   1fa10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
   1fa14:	f3c3 0cc0 	ubfx	ip, r3, #3, #1
   1fa18:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   1fa1c:	f3c3 1c00 	ubfx	ip, r3, #4, #1
   1fa20:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1fa24:	4461      	add	r1, ip
   1fa26:	f3c3 1c40 	ubfx	ip, r3, #5, #1
   1fa2a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
   1fa2e:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   1fa32:	f3c3 1c80 	ubfx	ip, r3, #6, #1
   1fa36:	4461      	add	r1, ip
   1fa38:	4411      	add	r1, r2
   1fa3a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1fa3e:	d002      	beq.n	1fa46 <sym_WLQ6YP4CLBLEMT6X4SKN2P2RM7K53RQFGIL5RPY+0x4a>
   1fa40:	1c49      	adds	r1, r1, #1
   1fa42:	b2c9      	uxtb	r1, r1
   1fa44:	7103      	strb	r3, [r0, #4]
   1fa46:	f890 c003 	ldrb.w	ip, [r0, #3]
   1fa4a:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   1fa4e:	f00c 0cc0 	and.w	ip, ip, #192	; 0xc0
   1fa52:	ea43 030c 	orr.w	r3, r3, ip
   1fa56:	70c3      	strb	r3, [r0, #3]
   1fa58:	1c4b      	adds	r3, r1, #1
   1fa5a:	7043      	strb	r3, [r0, #1]
   1fa5c:	2a00      	cmp	r2, #0
   1fa5e:	bf08      	it	eq
   1fa60:	4770      	bxeq	lr
   1fa62:	1e53      	subs	r3, r2, #1
   1fa64:	1a89      	subs	r1, r1, r2
   1fa66:	4408      	add	r0, r1
   1fa68:	7103      	strb	r3, [r0, #4]
   1fa6a:	4770      	bx	lr

0001fa6c <sym_H3NF7V2EYDGPUFAQEJQIA2BFAJPUZD343N5IYHY>:
   1fa6c:	b510      	push	{r4, lr}
   1fa6e:	4604      	mov	r4, r0
   1fa70:	f000 fa5b 	bl	1ff2a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
   1fa74:	2800      	cmp	r0, #0
   1fa76:	bf18      	it	ne
   1fa78:	4420      	addne	r0, r4
   1fa7a:	bd10      	pop	{r4, pc}

0001fa7c <sym_PBUYHYNPX6UVR3SOSML43PVJV4TB32DZKPBWZSI>:
   1fa7c:	78c1      	ldrb	r1, [r0, #3]
   1fa7e:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   1fa82:	bf18      	it	ne
   1fa84:	2201      	movne	r2, #1
   1fa86:	7900      	ldrb	r0, [r0, #4]
   1fa88:	f010 0301 	ands.w	r3, r0, #1
   1fa8c:	bf18      	it	ne
   1fa8e:	2301      	movne	r3, #1
   1fa90:	ea03 0c02 	and.w	ip, r3, r2
   1fa94:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   1fa98:	bf14      	ite	ne
   1fa9a:	2301      	movne	r3, #1
   1fa9c:	2300      	moveq	r3, #0
   1fa9e:	f010 0202 	ands.w	r2, r0, #2
   1faa2:	bf18      	it	ne
   1faa4:	2201      	movne	r2, #1
   1faa6:	401a      	ands	r2, r3
   1faa8:	4462      	add	r2, ip
   1faaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1faae:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   1fab2:	f011 0f3f 	tst.w	r1, #63	; 0x3f
   1fab6:	bf14      	ite	ne
   1fab8:	2301      	movne	r3, #1
   1faba:	2300      	moveq	r3, #0
   1fabc:	f010 0208 	ands.w	r2, r0, #8
   1fac0:	bf18      	it	ne
   1fac2:	2201      	movne	r2, #1
   1fac4:	401a      	ands	r2, r3
   1fac6:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
   1faca:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   1face:	bf18      	it	ne
   1fad0:	2201      	movne	r2, #1
   1fad2:	f010 0304 	ands.w	r3, r0, #4
   1fad6:	bf18      	it	ne
   1fad8:	2301      	movne	r3, #1
   1fada:	401a      	ands	r2, r3
   1fadc:	4494      	add	ip, r2
   1fade:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   1fae2:	bf18      	it	ne
   1fae4:	2201      	movne	r2, #1
   1fae6:	f010 0320 	ands.w	r3, r0, #32
   1faea:	bf18      	it	ne
   1faec:	2301      	movne	r3, #1
   1faee:	401a      	ands	r2, r3
   1faf0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
   1faf4:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
   1faf8:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
   1fafc:	bf18      	it	ne
   1fafe:	2201      	movne	r2, #1
   1fb00:	f010 0310 	ands.w	r3, r0, #16
   1fb04:	bf18      	it	ne
   1fb06:	2301      	movne	r3, #1
   1fb08:	401a      	ands	r2, r3
   1fb0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1fb0e:	4462      	add	r2, ip
   1fb10:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
   1fb14:	bf18      	it	ne
   1fb16:	2101      	movne	r1, #1
   1fb18:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1fb1c:	bf18      	it	ne
   1fb1e:	2001      	movne	r0, #1
   1fb20:	4008      	ands	r0, r1
   1fb22:	4410      	add	r0, r2
   1fb24:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1fb28:	bf1c      	itt	ne
   1fb2a:	1c40      	addne	r0, r0, #1
   1fb2c:	b2c0      	uxtbne	r0, r0
   1fb2e:	4770      	bx	lr

0001fb30 <sym_APJRNOYIPVVMXANZL7N72BAJ3R7XI267X7HUSZY>:
   1fb30:	78c0      	ldrb	r0, [r0, #3]
   1fb32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1fb36:	4770      	bx	lr

0001fb38 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI>:
   1fb38:	b570      	push	{r4, r5, r6, lr}
   1fb3a:	461c      	mov	r4, r3
   1fb3c:	000d      	movs	r5, r1
   1fb3e:	4606      	mov	r6, r0
   1fb40:	d00c      	beq.n	1fb5c <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI+0x24>
   1fb42:	4611      	mov	r1, r2
   1fb44:	f000 f9f1 	bl	1ff2a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
   1fb48:	b168      	cbz	r0, 1fb66 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI+0x2e>
   1fb4a:	1901      	adds	r1, r0, r4
   1fb4c:	1f09      	subs	r1, r1, #4
   1fb4e:	293f      	cmp	r1, #63	; 0x3f
   1fb50:	dd0e      	ble.n	1fb70 <sym_DEQ52UXGGOG3CBHCSM5ZCBFPFTNN2OZ3BBWERRI+0x38>
   1fb52:	f240 3127 	movw	r1, #807	; 0x327
   1fb56:	202a      	movs	r0, #42	; 0x2a
   1fb58:	f7ed f996 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fb5c:	f240 3125 	movw	r1, #805	; 0x325
   1fb60:	202a      	movs	r0, #42	; 0x2a
   1fb62:	f7ed f991 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fb66:	f240 3126 	movw	r1, #806	; 0x326
   1fb6a:	202a      	movs	r0, #42	; 0x2a
   1fb6c:	f7ed f98c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fb70:	4430      	add	r0, r6
   1fb72:	4622      	mov	r2, r4
   1fb74:	4629      	mov	r1, r5
   1fb76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fb7a:	f003 bab6 	b.w	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001fb7e <sym_275CZPEXZ5GILHAL7XLHAN4U4MKDK6NWLUA2SLI>:
   1fb7e:	7840      	ldrb	r0, [r0, #1]
   1fb80:	4770      	bx	lr

0001fb82 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
   1fb82:	b530      	push	{r4, r5, lr}
   1fb84:	7802      	ldrb	r2, [r0, #0]
   1fb86:	b083      	sub	sp, #12
   1fb88:	f002 020f 	and.w	r2, r2, #15
   1fb8c:	2a03      	cmp	r2, #3
   1fb8e:	d054      	beq.n	1fc3a <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb8>
   1fb90:	2a05      	cmp	r2, #5
   1fb92:	d14f      	bne.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fb94:	460d      	mov	r5, r1
   1fb96:	4604      	mov	r4, r0
   1fb98:	f100 011f 	add.w	r1, r0, #31
   1fb9c:	4668      	mov	r0, sp
   1fb9e:	f002 ffad 	bl	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>
   1fba2:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1fba6:	f89d 2000 	ldrb.w	r2, [sp]
   1fbaa:	f000 01e0 	and.w	r1, r0, #224	; 0xe0
   1fbae:	2000      	movs	r0, #0
   1fbb0:	f88d 1004 	strb.w	r1, [sp, #4]
   1fbb4:	2a00      	cmp	r2, #0
   1fbb6:	bf04      	itt	eq
   1fbb8:	f89d 2001 	ldrbeq.w	r2, [sp, #1]
   1fbbc:	2a00      	cmpeq	r2, #0
   1fbbe:	d10a      	bne.n	1fbd6 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x54>
   1fbc0:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1fbc4:	2a00      	cmp	r2, #0
   1fbc6:	bf01      	itttt	eq
   1fbc8:	f89d 2003 	ldrbeq.w	r2, [sp, #3]
   1fbcc:	2a00      	cmpeq	r2, #0
   1fbce:	2900      	cmpeq	r1, #0
   1fbd0:	b003      	addeq	sp, #12
   1fbd2:	bf08      	it	eq
   1fbd4:	bd30      	popeq	{r4, r5, pc}
   1fbd6:	f8b4 0019 	ldrh.w	r0, [r4, #25]
   1fbda:	f894 c001 	ldrb.w	ip, [r4, #1]
   1fbde:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   1fbe2:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   1fbe6:	7da1      	ldrb	r1, [r4, #22]
   1fbe8:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
   1fbec:	d122      	bne.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fbee:	2d00      	cmp	r5, #0
   1fbf0:	bf18      	it	ne
   1fbf2:	f5b0 6f50 	cmpne.w	r0, #3328	; 0xd00
   1fbf6:	d903      	bls.n	1fc00 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x7e>
   1fbf8:	f640 5c07 	movw	ip, #3335	; 0xd07
   1fbfc:	4560      	cmp	r0, ip
   1fbfe:	d90c      	bls.n	1fc1a <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x98>
   1fc00:	f1a0 0c06 	sub.w	ip, r0, #6
   1fc04:	f640 457a 	movw	r5, #3194	; 0xc7a
   1fc08:	45ac      	cmp	ip, r5
   1fc0a:	d813      	bhi.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fc0c:	b191      	cbz	r1, 1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fc0e:	2908      	cmp	r1, #8
   1fc10:	bf98      	it	ls
   1fc12:	4281      	cmpls	r1, r0
   1fc14:	d20e      	bcs.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fc16:	4298      	cmp	r0, r3
   1fc18:	d30c      	bcc.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fc1a:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1fc1e:	d209      	bcs.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fc20:	f8b4 001d 	ldrh.w	r0, [r4, #29]
   1fc24:	f640 4176 	movw	r1, #3190	; 0xc76
   1fc28:	380a      	subs	r0, #10
   1fc2a:	4281      	cmp	r1, r0
   1fc2c:	d302      	bcc.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fc2e:	b003      	add	sp, #12
   1fc30:	2001      	movs	r0, #1
   1fc32:	bd30      	pop	{r4, r5, pc}
   1fc34:	b003      	add	sp, #12
   1fc36:	2000      	movs	r0, #0
   1fc38:	bd30      	pop	{r4, r5, pc}
   1fc3a:	7840      	ldrb	r0, [r0, #1]
   1fc3c:	280c      	cmp	r0, #12
   1fc3e:	d1f9      	bne.n	1fc34 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xb2>
   1fc40:	e7f5      	b.n	1fc2e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0xac>

0001fc42 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
   1fc42:	b570      	push	{r4, r5, r6, lr}
   1fc44:	4614      	mov	r4, r2
   1fc46:	4605      	mov	r5, r0
   1fc48:	2a1f      	cmp	r2, #31
   1fc4a:	d903      	bls.n	1fc54 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
   1fc4c:	21ee      	movs	r1, #238	; 0xee
   1fc4e:	202a      	movs	r0, #42	; 0x2a
   1fc50:	f7ed f91a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fc54:	f105 0009 	add.w	r0, r5, #9
   1fc58:	f003 fa47 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1fc5c:	1da0      	adds	r0, r4, #6
   1fc5e:	7068      	strb	r0, [r5, #1]
   1fc60:	bd70      	pop	{r4, r5, r6, pc}

0001fc62 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
   1fc62:	b510      	push	{r4, lr}
   1fc64:	7802      	ldrb	r2, [r0, #0]
   1fc66:	f001 030f 	and.w	r3, r1, #15
   1fc6a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1fc6e:	431a      	orrs	r2, r3
   1fc70:	7002      	strb	r2, [r0, #0]
   1fc72:	2909      	cmp	r1, #9
   1fc74:	d213      	bcs.n	1fc9e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x3c>
   1fc76:	e8df f001 	tbb	[pc, r1]
   1fc7a:	0705      	.short	0x0705
   1fc7c:	09050705 	.word	0x09050705
   1fc80:	000f0b05 	.word	0x000f0b05
   1fc84:	2106      	movs	r1, #6
   1fc86:	e008      	b.n	1fc9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   1fc88:	210c      	movs	r1, #12
   1fc8a:	e006      	b.n	1fc9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   1fc8c:	2122      	movs	r1, #34	; 0x22
   1fc8e:	e004      	b.n	1fc9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   1fc90:	2101      	movs	r1, #1
   1fc92:	2200      	movs	r2, #0
   1fc94:	70c2      	strb	r2, [r0, #3]
   1fc96:	e000      	b.n	1fc9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x38>
   1fc98:	210e      	movs	r1, #14
   1fc9a:	7041      	strb	r1, [r0, #1]
   1fc9c:	bd10      	pop	{r4, pc}
   1fc9e:	21a8      	movs	r1, #168	; 0xa8
   1fca0:	202a      	movs	r0, #42	; 0x2a
   1fca2:	f7ed f8f1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001fca6 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
   1fca6:	680a      	ldr	r2, [r1, #0]
   1fca8:	f8c0 2009 	str.w	r2, [r0, #9]
   1fcac:	8889      	ldrh	r1, [r1, #4]
   1fcae:	f8a0 100d 	strh.w	r1, [r0, #13]
   1fcb2:	4770      	bx	lr

0001fcb4 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
   1fcb4:	7802      	ldrb	r2, [r0, #0]
   1fcb6:	2380      	movs	r3, #128	; 0x80
   1fcb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1fcbc:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
   1fcc0:	4311      	orrs	r1, r2
   1fcc2:	7001      	strb	r1, [r0, #0]
   1fcc4:	4770      	bx	lr

0001fcc6 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
   1fcc6:	680a      	ldr	r2, [r1, #0]
   1fcc8:	f8c0 2003 	str.w	r2, [r0, #3]
   1fccc:	8889      	ldrh	r1, [r1, #4]
   1fcce:	f8a0 1007 	strh.w	r1, [r0, #7]
   1fcd2:	4770      	bx	lr

0001fcd4 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
   1fcd4:	7802      	ldrb	r2, [r0, #0]
   1fcd6:	2340      	movs	r3, #64	; 0x40
   1fcd8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1fcdc:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   1fce0:	4311      	orrs	r1, r2
   1fce2:	7001      	strb	r1, [r0, #0]
   1fce4:	4770      	bx	lr

0001fce6 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
   1fce6:	b570      	push	{r4, r5, r6, lr}
   1fce8:	4614      	mov	r4, r2
   1fcea:	4605      	mov	r5, r0
   1fcec:	2a1f      	cmp	r2, #31
   1fcee:	d904      	bls.n	1fcfa <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
   1fcf0:	f44f 7188 	mov.w	r1, #272	; 0x110
   1fcf4:	202a      	movs	r0, #42	; 0x2a
   1fcf6:	f7ed f8c7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fcfa:	f105 0009 	add.w	r0, r5, #9
   1fcfe:	f003 f9f4 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1fd02:	1da0      	adds	r0, r4, #6
   1fd04:	7068      	strb	r0, [r5, #1]
   1fd06:	bd70      	pop	{r4, r5, r6, pc}

0001fd08 <sym_HNZ6YNBDEHFBFGO4FGYZWJ2ZIELRZCSFTGHBNAA>:
   1fd08:	780a      	ldrb	r2, [r1, #0]
   1fd0a:	7102      	strb	r2, [r0, #4]
   1fd0c:	880a      	ldrh	r2, [r1, #0]
   1fd0e:	0a12      	lsrs	r2, r2, #8
   1fd10:	7142      	strb	r2, [r0, #5]
   1fd12:	680a      	ldr	r2, [r1, #0]
   1fd14:	0c12      	lsrs	r2, r2, #16
   1fd16:	7182      	strb	r2, [r0, #6]
   1fd18:	884a      	ldrh	r2, [r1, #2]
   1fd1a:	0a12      	lsrs	r2, r2, #8
   1fd1c:	71c2      	strb	r2, [r0, #7]
   1fd1e:	f8d1 2002 	ldr.w	r2, [r1, #2]
   1fd22:	0c12      	lsrs	r2, r2, #16
   1fd24:	7202      	strb	r2, [r0, #8]
   1fd26:	f8d1 2002 	ldr.w	r2, [r1, #2]
   1fd2a:	0e12      	lsrs	r2, r2, #24
   1fd2c:	7242      	strb	r2, [r0, #9]
   1fd2e:	798a      	ldrb	r2, [r1, #6]
   1fd30:	7282      	strb	r2, [r0, #10]
   1fd32:	88c9      	ldrh	r1, [r1, #6]
   1fd34:	0a09      	lsrs	r1, r1, #8
   1fd36:	72c1      	strb	r1, [r0, #11]
   1fd38:	4770      	bx	lr

0001fd3a <sym_KNRZBIFY2P43T7N5353YRUKMVJ4HQK3VLP7QLXI>:
   1fd3a:	780a      	ldrb	r2, [r1, #0]
   1fd3c:	7102      	strb	r2, [r0, #4]
   1fd3e:	784a      	ldrb	r2, [r1, #1]
   1fd40:	7142      	strb	r2, [r0, #5]
   1fd42:	7889      	ldrb	r1, [r1, #2]
   1fd44:	7181      	strb	r1, [r0, #6]
   1fd46:	4770      	bx	lr

0001fd48 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
   1fd48:	1d02      	adds	r2, r0, #4
   1fd4a:	4608      	mov	r0, r1
   1fd4c:	4611      	mov	r1, r2
   1fd4e:	f002 bed5 	b.w	22afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>

0001fd52 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
   1fd52:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1fd56:	4770      	bx	lr

0001fd58 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
   1fd58:	b430      	push	{r4, r5}
   1fd5a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   1fd5e:	f8b0 c009 	ldrh.w	ip, [r0, #9]
   1fd62:	f8b0 4005 	ldrh.w	r4, [r0, #5]
   1fd66:	7903      	ldrb	r3, [r0, #4]
   1fd68:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   1fd6c:	2900      	cmp	r1, #0
   1fd6e:	bf18      	it	ne
   1fd70:	f5b2 6f50 	cmpne.w	r2, #3328	; 0xd00
   1fd74:	d903      	bls.n	1fd7e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x26>
   1fd76:	f640 5107 	movw	r1, #3335	; 0xd07
   1fd7a:	428a      	cmp	r2, r1
   1fd7c:	d90b      	bls.n	1fd96 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3e>
   1fd7e:	1f91      	subs	r1, r2, #6
   1fd80:	f640 457a 	movw	r5, #3194	; 0xc7a
   1fd84:	42a9      	cmp	r1, r5
   1fd86:	d811      	bhi.n	1fdac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   1fd88:	b183      	cbz	r3, 1fdac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   1fd8a:	2b08      	cmp	r3, #8
   1fd8c:	bf98      	it	ls
   1fd8e:	4293      	cmpls	r3, r2
   1fd90:	d20c      	bcs.n	1fdac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   1fd92:	42a2      	cmp	r2, r4
   1fd94:	d30a      	bcc.n	1fdac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   1fd96:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1fd9a:	d207      	bcs.n	1fdac <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x54>
   1fd9c:	f640 4176 	movw	r1, #3190	; 0xc76
   1fda0:	380a      	subs	r0, #10
   1fda2:	4281      	cmp	r1, r0
   1fda4:	bf22      	ittt	cs
   1fda6:	2001      	movcs	r0, #1
   1fda8:	bc30      	popcs	{r4, r5}
   1fdaa:	4770      	bxcs	lr
   1fdac:	2000      	movs	r0, #0
   1fdae:	bc30      	pop	{r4, r5}
   1fdb0:	4770      	bx	lr

0001fdb2 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
   1fdb2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   1fdb6:	4770      	bx	lr

0001fdb8 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
   1fdb8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   1fdbc:	4770      	bx	lr

0001fdbe <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
   1fdbe:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   1fdc2:	4770      	bx	lr

0001fdc4 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
   1fdc4:	b510      	push	{r4, lr}
   1fdc6:	29fb      	cmp	r1, #251	; 0xfb
   1fdc8:	bf9c      	itt	ls
   1fdca:	7041      	strbls	r1, [r0, #1]
   1fdcc:	bd10      	popls	{r4, pc}
   1fdce:	f240 61a9 	movw	r1, #1705	; 0x6a9
   1fdd2:	202a      	movs	r0, #42	; 0x2a
   1fdd4:	f7ed f858 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0001fdd8 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
   1fdd8:	8980      	ldrh	r0, [r0, #12]
   1fdda:	8008      	strh	r0, [r1, #0]
   1fddc:	4770      	bx	lr

0001fdde <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
   1fdde:	f8d0 0016 	ldr.w	r0, [r0, #22]
   1fde2:	6008      	str	r0, [r1, #0]
   1fde4:	4770      	bx	lr

0001fde6 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
   1fde6:	6842      	ldr	r2, [r0, #4]
   1fde8:	600a      	str	r2, [r1, #0]
   1fdea:	6880      	ldr	r0, [r0, #8]
   1fdec:	6048      	str	r0, [r1, #4]
   1fdee:	4770      	bx	lr

0001fdf0 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
   1fdf0:	f8d0 200e 	ldr.w	r2, [r0, #14]
   1fdf4:	600a      	str	r2, [r1, #0]
   1fdf6:	f8d0 0012 	ldr.w	r0, [r0, #18]
   1fdfa:	6048      	str	r0, [r1, #4]
   1fdfc:	4770      	bx	lr

0001fdfe <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
   1fdfe:	6809      	ldr	r1, [r1, #0]
   1fe00:	60c1      	str	r1, [r0, #12]
   1fe02:	4770      	bx	lr

0001fe04 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
   1fe04:	680a      	ldr	r2, [r1, #0]
   1fe06:	6042      	str	r2, [r0, #4]
   1fe08:	6849      	ldr	r1, [r1, #4]
   1fe0a:	6081      	str	r1, [r0, #8]
   1fe0c:	4770      	bx	lr

0001fe0e <sym_SNSRF2OD5RKCBMNHGEBC4PQLTEZDLFXABEHWJNQ>:
   1fe0e:	7840      	ldrb	r0, [r0, #1]
   1fe10:	4770      	bx	lr

0001fe12 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
   1fe12:	7800      	ldrb	r0, [r0, #0]
   1fe14:	f000 0003 	and.w	r0, r0, #3
   1fe18:	4770      	bx	lr

0001fe1a <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
   1fe1a:	8880      	ldrh	r0, [r0, #4]
   1fe1c:	4770      	bx	lr

0001fe1e <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
   1fe1e:	88c0      	ldrh	r0, [r0, #6]
   1fe20:	4770      	bx	lr

0001fe22 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
   1fe22:	8900      	ldrh	r0, [r0, #8]
   1fe24:	4770      	bx	lr

0001fe26 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
   1fe26:	8940      	ldrh	r0, [r0, #10]
   1fe28:	4770      	bx	lr

0001fe2a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
   1fe2a:	8901      	ldrh	r1, [r0, #8]
   1fe2c:	291b      	cmp	r1, #27
   1fe2e:	bf24      	itt	cs
   1fe30:	8941      	ldrhcs	r1, [r0, #10]
   1fe32:	f5b1 7fa4 	cmpcs.w	r1, #328	; 0x148
   1fe36:	d307      	bcc.n	1fe48 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x1e>
   1fe38:	8881      	ldrh	r1, [r0, #4]
   1fe3a:	291b      	cmp	r1, #27
   1fe3c:	bf21      	itttt	cs
   1fe3e:	88c0      	ldrhcs	r0, [r0, #6]
   1fe40:	f5b0 7fa4 	cmpcs.w	r0, #328	; 0x148
   1fe44:	2001      	movcs	r0, #1
   1fe46:	4770      	bxcs	lr
   1fe48:	2000      	movs	r0, #0
   1fe4a:	4770      	bx	lr

0001fe4c <sym_LDFW4OY5TOKCR2MMH4J6WIDM27FFMWUGGCVUBSQ>:
   1fe4c:	2222      	movs	r2, #34	; 0x22
   1fe4e:	1d00      	adds	r0, r0, #4
   1fe50:	f003 b94b 	b.w	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001fe54 <sym_NORIA4HWCV5CFHFK4OOXISIP5EQ5LDTDZB2MMQA>:
   1fe54:	b570      	push	{r4, r5, r6, lr}
   1fe56:	4615      	mov	r5, r2
   1fe58:	4604      	mov	r4, r0
   1fe5a:	2222      	movs	r2, #34	; 0x22
   1fe5c:	1d00      	adds	r0, r0, #4
   1fe5e:	f003 f944 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   1fe62:	6828      	ldr	r0, [r5, #0]
   1fe64:	f8c4 0026 	str.w	r0, [r4, #38]	; 0x26
   1fe68:	6868      	ldr	r0, [r5, #4]
   1fe6a:	f8c4 002a 	str.w	r0, [r4, #42]	; 0x2a
   1fe6e:	bd70      	pop	{r4, r5, r6, pc}

0001fe70 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
   1fe70:	7901      	ldrb	r1, [r0, #4]
   1fe72:	f011 0f07 	tst.w	r1, #7
   1fe76:	bf1b      	ittet	ne
   1fe78:	7940      	ldrbne	r0, [r0, #5]
   1fe7a:	f010 0f07 	tstne.w	r0, #7
   1fe7e:	2000      	moveq	r0, #0
   1fe80:	2001      	movne	r0, #1
   1fe82:	4770      	bx	lr

0001fe84 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
   1fe84:	88c0      	ldrh	r0, [r0, #6]
   1fe86:	4770      	bx	lr

0001fe88 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
   1fe88:	7901      	ldrb	r1, [r0, #4]
   1fe8a:	7940      	ldrb	r0, [r0, #5]
   1fe8c:	f001 0107 	and.w	r1, r1, #7
   1fe90:	1e4a      	subs	r2, r1, #1
   1fe92:	f000 0007 	and.w	r0, r0, #7
   1fe96:	4011      	ands	r1, r2
   1fe98:	1e42      	subs	r2, r0, #1
   1fe9a:	4010      	ands	r0, r2
   1fe9c:	4308      	orrs	r0, r1
   1fe9e:	bf0c      	ite	eq
   1fea0:	2001      	moveq	r0, #1
   1fea2:	2000      	movne	r0, #0
   1fea4:	4770      	bx	lr

0001fea6 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
   1fea6:	7900      	ldrb	r0, [r0, #4]
   1fea8:	4770      	bx	lr

0001feaa <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
   1feaa:	7940      	ldrb	r0, [r0, #5]
   1feac:	4770      	bx	lr

0001feae <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
   1feae:	7900      	ldrb	r0, [r0, #4]
   1feb0:	4770      	bx	lr

0001feb2 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
   1feb2:	7101      	strb	r1, [r0, #4]
   1feb4:	4770      	bx	lr

0001feb6 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
   1feb6:	7940      	ldrb	r0, [r0, #5]
   1feb8:	4770      	bx	lr

0001feba <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
   1feba:	7141      	strb	r1, [r0, #5]
   1febc:	4770      	bx	lr

0001febe <sym_ML7UWXB7GWXTGW6UFCU3UDXHGUNWX35NXVW5QIA>:
   1febe:	7802      	ldrb	r2, [r0, #0]
   1fec0:	2320      	movs	r3, #32
   1fec2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1fec6:	ea03 1141 	and.w	r1, r3, r1, lsl #5
   1feca:	4311      	orrs	r1, r2
   1fecc:	7001      	strb	r1, [r0, #0]
   1fece:	4770      	bx	lr

0001fed0 <sym_2FLKUHSSL5LZIVHHB4YVAFHCUF4O55YZBH5NHWQ>:
   1fed0:	7809      	ldrb	r1, [r1, #0]
   1fed2:	7081      	strb	r1, [r0, #2]
   1fed4:	4770      	bx	lr

0001fed6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
   1fed6:	b510      	push	{r4, lr}
   1fed8:	2a1b      	cmp	r2, #27
   1feda:	d904      	bls.n	1fee6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
   1fedc:	f240 417f 	movw	r1, #1151	; 0x47f
   1fee0:	202a      	movs	r0, #42	; 0x2a
   1fee2:	f7ec ffd1 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1fee6:	7042      	strb	r2, [r0, #1]
   1fee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1feec:	1cc0      	adds	r0, r0, #3
   1feee:	f003 b8fc 	b.w	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0001fef2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
   1fef2:	7802      	ldrb	r2, [r0, #0]
   1fef4:	f001 0103 	and.w	r1, r1, #3
   1fef8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   1fefc:	4311      	orrs	r1, r2
   1fefe:	7001      	strb	r1, [r0, #0]
   1ff00:	4770      	bx	lr

0001ff02 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
   1ff02:	7101      	strb	r1, [r0, #4]
   1ff04:	0a09      	lsrs	r1, r1, #8
   1ff06:	7141      	strb	r1, [r0, #5]
   1ff08:	4770      	bx	lr

0001ff0a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
   1ff0a:	7181      	strb	r1, [r0, #6]
   1ff0c:	0a09      	lsrs	r1, r1, #8
   1ff0e:	71c1      	strb	r1, [r0, #7]
   1ff10:	4770      	bx	lr

0001ff12 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
   1ff12:	7201      	strb	r1, [r0, #8]
   1ff14:	0a09      	lsrs	r1, r1, #8
   1ff16:	7241      	strb	r1, [r0, #9]
   1ff18:	4770      	bx	lr

0001ff1a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
   1ff1a:	7281      	strb	r1, [r0, #10]
   1ff1c:	0a09      	lsrs	r1, r1, #8
   1ff1e:	72c1      	strb	r1, [r0, #11]
   1ff20:	4770      	bx	lr

0001ff22 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
   1ff22:	7900      	ldrb	r0, [r0, #4]
   1ff24:	4770      	bx	lr

0001ff26 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
   1ff26:	7900      	ldrb	r0, [r0, #4]
   1ff28:	4770      	bx	lr
   1ff2a:	78c3      	ldrb	r3, [r0, #3]
   1ff2c:	4602      	mov	r2, r0
   1ff2e:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
   1ff32:	bf08      	it	eq
   1ff34:	4770      	bxeq	lr
   1ff36:	2005      	movs	r0, #5
   1ff38:	7912      	ldrb	r2, [r2, #4]
   1ff3a:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   1ff3e:	f012 0301 	ands.w	r3, r2, #1
   1ff42:	bf18      	it	ne
   1ff44:	2301      	movne	r3, #1
   1ff46:	b123      	cbz	r3, 1ff52 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2c>
   1ff48:	2900      	cmp	r1, #0
   1ff4a:	bf14      	ite	ne
   1ff4c:	200b      	movne	r0, #11
   1ff4e:	4770      	bxeq	lr
   1ff50:	e001      	b.n	1ff56 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x30>
   1ff52:	2900      	cmp	r1, #0
   1ff54:	d04f      	beq.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ff56:	f012 0302 	ands.w	r3, r2, #2
   1ff5a:	bf18      	it	ne
   1ff5c:	2301      	movne	r3, #1
   1ff5e:	b123      	cbz	r3, 1ff6a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x44>
   1ff60:	2901      	cmp	r1, #1
   1ff62:	bf14      	ite	ne
   1ff64:	1d80      	addne	r0, r0, #6
   1ff66:	4770      	bxeq	lr
   1ff68:	e001      	b.n	1ff6e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x48>
   1ff6a:	2901      	cmp	r1, #1
   1ff6c:	d043      	beq.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ff6e:	f012 0304 	ands.w	r3, r2, #4
   1ff72:	bf18      	it	ne
   1ff74:	2301      	movne	r3, #1
   1ff76:	b123      	cbz	r3, 1ff82 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x5c>
   1ff78:	2902      	cmp	r1, #2
   1ff7a:	bf14      	ite	ne
   1ff7c:	1c40      	addne	r0, r0, #1
   1ff7e:	4770      	bxeq	lr
   1ff80:	e001      	b.n	1ff86 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x60>
   1ff82:	2902      	cmp	r1, #2
   1ff84:	d037      	beq.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ff86:	f012 0308 	ands.w	r3, r2, #8
   1ff8a:	bf18      	it	ne
   1ff8c:	2301      	movne	r3, #1
   1ff8e:	b123      	cbz	r3, 1ff9a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x74>
   1ff90:	2903      	cmp	r1, #3
   1ff92:	bf14      	ite	ne
   1ff94:	1c80      	addne	r0, r0, #2
   1ff96:	4770      	bxeq	lr
   1ff98:	e001      	b.n	1ff9e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x78>
   1ff9a:	2903      	cmp	r1, #3
   1ff9c:	d02b      	beq.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ff9e:	f012 0310 	ands.w	r3, r2, #16
   1ffa2:	bf18      	it	ne
   1ffa4:	2301      	movne	r3, #1
   1ffa6:	b123      	cbz	r3, 1ffb2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x8c>
   1ffa8:	2904      	cmp	r1, #4
   1ffaa:	bf14      	ite	ne
   1ffac:	1cc0      	addne	r0, r0, #3
   1ffae:	4770      	bxeq	lr
   1ffb0:	e001      	b.n	1ffb6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x90>
   1ffb2:	2904      	cmp	r1, #4
   1ffb4:	d01f      	beq.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ffb6:	f012 0320 	ands.w	r3, r2, #32
   1ffba:	bf18      	it	ne
   1ffbc:	2301      	movne	r3, #1
   1ffbe:	b12b      	cbz	r3, 1ffcc <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xa6>
   1ffc0:	2905      	cmp	r1, #5
   1ffc2:	bf1a      	itte	ne
   1ffc4:	3012      	addne	r0, #18
   1ffc6:	b2c0      	uxtbne	r0, r0
   1ffc8:	4770      	bxeq	lr
   1ffca:	e001      	b.n	1ffd0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xaa>
   1ffcc:	2905      	cmp	r1, #5
   1ffce:	d012      	beq.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ffd0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   1ffd4:	bf18      	it	ne
   1ffd6:	2201      	movne	r2, #1
   1ffd8:	b12a      	cbz	r2, 1ffe6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xc0>
   1ffda:	2906      	cmp	r1, #6
   1ffdc:	bf1a      	itte	ne
   1ffde:	1c40      	addne	r0, r0, #1
   1ffe0:	b2c0      	uxtbne	r0, r0
   1ffe2:	4770      	bxeq	lr
   1ffe4:	e001      	b.n	1ffea <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xc4>
   1ffe6:	2906      	cmp	r1, #6
   1ffe8:	d005      	beq.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ffea:	2907      	cmp	r1, #7
   1ffec:	d103      	bne.n	1fff6 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0xd0>
   1ffee:	1f41      	subs	r1, r0, #5
   1fff0:	458c      	cmp	ip, r1
   1fff2:	bfc8      	it	gt
   1fff4:	4770      	bxgt	lr
   1fff6:	2000      	movs	r0, #0
   1fff8:	4770      	bx	lr

0001fffa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   1fffa:	7801      	ldrb	r1, [r0, #0]
   1fffc:	2900      	cmp	r1, #0
   1fffe:	bf08      	it	eq
   20000:	4770      	bxeq	lr
   20002:	6841      	ldr	r1, [r0, #4]
   20004:	f891 230a 	ldrb.w	r2, [r1, #778]	; 0x30a
   20008:	2a00      	cmp	r2, #0
   2000a:	bf08      	it	eq
   2000c:	4770      	bxeq	lr
   2000e:	2200      	movs	r2, #0
   20010:	f881 230a 	strb.w	r2, [r1, #778]	; 0x30a
   20014:	6840      	ldr	r0, [r0, #4]
   20016:	f000 bdf2 	b.w	20bfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   2001a:	2000      	movs	r0, #0
   2001c:	7048      	strb	r0, [r1, #1]
   2001e:	2003      	movs	r0, #3
   20020:	7008      	strb	r0, [r1, #0]
   20022:	2001      	movs	r0, #1
   20024:	7108      	strb	r0, [r1, #4]
   20026:	4770      	bx	lr

00020028 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   20028:	b570      	push	{r4, r5, r6, lr}
   2002a:	4616      	mov	r6, r2
   2002c:	460c      	mov	r4, r1
   2002e:	6942      	ldr	r2, [r0, #20]
   20030:	2596      	movs	r5, #150	; 0x96
   20032:	f641 514c 	movw	r1, #7500	; 0x1d4c
   20036:	428a      	cmp	r2, r1
   20038:	bf3a      	itte	cc
   2003a:	254d      	movcc	r5, #77	; 0x4d
   2003c:	4629      	movcc	r1, r5
   2003e:	2196      	movcs	r1, #150	; 0x96
   20040:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   20044:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
   20048:	f7f0 f82c 	bl	100a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
   2004c:	4428      	add	r0, r5
   2004e:	4430      	add	r0, r6
   20050:	42a0      	cmp	r0, r4
   20052:	bf94      	ite	ls
   20054:	1a20      	subls	r0, r4, r0
   20056:	2000      	movhi	r0, #0
   20058:	bd70      	pop	{r4, r5, r6, pc}

0002005a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   2005a:	b4f0      	push	{r4, r5, r6, r7}
   2005c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
   20060:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
   20064:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
   20066:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
   20068:	428a      	cmp	r2, r1
   2006a:	bf28      	it	cs
   2006c:	460a      	movcs	r2, r1
   2006e:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
   20072:	f04f 0400 	mov.w	r4, #0
   20076:	f011 0f0c 	tst.w	r1, #12
   2007a:	bf18      	it	ne
   2007c:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   20080:	d106      	bne.n	20090 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
   20082:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   20086:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
   2008a:	428b      	cmp	r3, r1
   2008c:	bf38      	it	cc
   2008e:	4619      	movcc	r1, r3
   20090:	8742      	strh	r2, [r0, #58]	; 0x3a
   20092:	87c1      	strh	r1, [r0, #62]	; 0x3e
   20094:	f8b0 c040 	ldrh.w	ip, [r0, #64]	; 0x40
   20098:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   2009c:	4594      	cmp	ip, r2
   2009e:	bf38      	it	cc
   200a0:	4694      	movcc	ip, r2
   200a2:	428b      	cmp	r3, r1
   200a4:	bf38      	it	cc
   200a6:	460b      	movcc	r3, r1
   200a8:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
   200ac:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
   200b0:	42b2      	cmp	r2, r6
   200b2:	bf0a      	itet	eq
   200b4:	42a9      	cmpeq	r1, r5
   200b6:	2301      	movne	r3, #1
   200b8:	2300      	moveq	r3, #0
   200ba:	8f05      	ldrh	r5, [r0, #56]	; 0x38
   200bc:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
   200c0:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
   200c4:	f8b0 c03c 	ldrh.w	ip, [r0, #60]	; 0x3c
   200c8:	428a      	cmp	r2, r1
   200ca:	bf28      	it	cs
   200cc:	460a      	movcs	r2, r1
   200ce:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
   200d2:	f011 0f0c 	tst.w	r1, #12
   200d6:	bf18      	it	ne
   200d8:	f44f 6129 	movne.w	r1, #2704	; 0xa90
   200dc:	d106      	bne.n	200ec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x92>
   200de:	f8b0 604e 	ldrh.w	r6, [r0, #78]	; 0x4e
   200e2:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   200e6:	428e      	cmp	r6, r1
   200e8:	bf38      	it	cc
   200ea:	4631      	movcc	r1, r6
   200ec:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
   200f0:	2e02      	cmp	r6, #2
   200f2:	d00a      	beq.n	2010a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xb0>
   200f4:	8702      	strh	r2, [r0, #56]	; 0x38
   200f6:	8781      	strh	r1, [r0, #60]	; 0x3c
   200f8:	42aa      	cmp	r2, r5
   200fa:	bf0a      	itet	eq
   200fc:	4561      	cmpeq	r1, ip
   200fe:	2001      	movne	r0, #1
   20100:	2000      	moveq	r0, #0
   20102:	ea40 0003 	orr.w	r0, r0, r3
   20106:	bcf0      	pop	{r4, r5, r6, r7}
   20108:	4770      	bx	lr
   2010a:	4295      	cmp	r5, r2
   2010c:	bf38      	it	cc
   2010e:	462a      	movcc	r2, r5
   20110:	458c      	cmp	ip, r1
   20112:	bf38      	it	cc
   20114:	4661      	movcc	r1, ip
   20116:	f880 4064 	strb.w	r4, [r0, #100]	; 0x64
   2011a:	e7eb      	b.n	200f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>

0002011c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
   2011c:	6840      	ldr	r0, [r0, #4]
   2011e:	4770      	bx	lr

00020120 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
   20120:	b570      	push	{r4, r5, r6, lr}
   20122:	460d      	mov	r5, r1
   20124:	4616      	mov	r6, r2
   20126:	6941      	ldr	r1, [r0, #20]
   20128:	f641 524c 	movw	r2, #7500	; 0x1d4c
   2012c:	4604      	mov	r4, r0
   2012e:	4291      	cmp	r1, r2
   20130:	bf34      	ite	cc
   20132:	214d      	movcc	r1, #77	; 0x4d
   20134:	2196      	movcs	r1, #150	; 0x96
   20136:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
   2013a:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
   2013e:	f7ef ffb1 	bl	100a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
   20142:	6963      	ldr	r3, [r4, #20]
   20144:	6b21      	ldr	r1, [r4, #48]	; 0x30
   20146:	4299      	cmp	r1, r3
   20148:	bf38      	it	cc
   2014a:	460b      	movcc	r3, r1
   2014c:	1b59      	subs	r1, r3, r5
   2014e:	4430      	add	r0, r6
   20150:	4288      	cmp	r0, r1
   20152:	bf38      	it	cc
   20154:	4608      	movcc	r0, r1
   20156:	6360      	str	r0, [r4, #52]	; 0x34
   20158:	bd70      	pop	{r4, r5, r6, pc}

0002015a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   2015a:	221b      	movs	r2, #27
   2015c:	8402      	strh	r2, [r0, #32]
   2015e:	8382      	strh	r2, [r0, #28]
   20160:	82c2      	strh	r2, [r0, #22]
   20162:	8282      	strh	r2, [r0, #20]
   20164:	8142      	strh	r2, [r0, #10]
   20166:	8202      	strh	r2, [r0, #16]
   20168:	8102      	strh	r2, [r0, #8]
   2016a:	8542      	strh	r2, [r0, #42]	; 0x2a
   2016c:	8582      	strh	r2, [r0, #44]	; 0x2c
   2016e:	8482      	strh	r2, [r0, #36]	; 0x24
   20170:	b159      	cbz	r1, 2018a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   20172:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   20176:	8441      	strh	r1, [r0, #34]	; 0x22
   20178:	83c1      	strh	r1, [r0, #30]
   2017a:	8341      	strh	r1, [r0, #26]
   2017c:	8301      	strh	r1, [r0, #24]
   2017e:	81c1      	strh	r1, [r0, #14]
   20180:	8241      	strh	r1, [r0, #18]
   20182:	8181      	strh	r1, [r0, #12]
   20184:	85c1      	strh	r1, [r0, #46]	; 0x2e
   20186:	8601      	strh	r1, [r0, #48]	; 0x30
   20188:	4770      	bx	lr
   2018a:	f44f 71a4 	mov.w	r1, #328	; 0x148
   2018e:	8441      	strh	r1, [r0, #34]	; 0x22
   20190:	83c1      	strh	r1, [r0, #30]
   20192:	8341      	strh	r1, [r0, #26]
   20194:	8301      	strh	r1, [r0, #24]
   20196:	81c1      	strh	r1, [r0, #14]
   20198:	8241      	strh	r1, [r0, #18]
   2019a:	8181      	strh	r1, [r0, #12]
   2019c:	85c1      	strh	r1, [r0, #46]	; 0x2e
   2019e:	8601      	strh	r1, [r0, #48]	; 0x30
   201a0:	4770      	bx	lr

000201a2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   201a2:	6800      	ldr	r0, [r0, #0]
   201a4:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   201a8:	4290      	cmp	r0, r2
   201aa:	bf9c      	itt	ls
   201ac:	2000      	movls	r0, #0
   201ae:	4770      	bxls	lr
   201b0:	1a40      	subs	r0, r0, r1
   201b2:	389c      	subs	r0, #156	; 0x9c
   201b4:	0840      	lsrs	r0, r0, #1
   201b6:	4770      	bx	lr

000201b8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   201b8:	f8dd c000 	ldr.w	ip, [sp]
   201bc:	8281      	strh	r1, [r0, #20]
   201be:	82c2      	strh	r2, [r0, #22]
   201c0:	8303      	strh	r3, [r0, #24]
   201c2:	f8a0 c01a 	strh.w	ip, [r0, #26]
   201c6:	4770      	bx	lr
   201c8:	b478      	push	{r3, r4, r5, r6}
   201ca:	f1a0 0218 	sub.w	r2, r0, #24
   201ce:	2300      	movs	r3, #0
   201d0:	f04f 0c16 	mov.w	ip, #22
   201d4:	7203      	strb	r3, [r0, #8]
   201d6:	704b      	strb	r3, [r1, #1]
   201d8:	f881 c000 	strb.w	ip, [r1]
   201dc:	f8d2 4022 	ldr.w	r4, [r2, #34]	; 0x22
   201e0:	f8d2 5026 	ldr.w	r5, [r2, #38]	; 0x26
   201e4:	f8d2 602a 	ldr.w	r6, [r2, #42]	; 0x2a
   201e8:	604c      	str	r4, [r1, #4]
   201ea:	608d      	str	r5, [r1, #8]
   201ec:	60ce      	str	r6, [r1, #12]
   201ee:	7a04      	ldrb	r4, [r0, #8]
   201f0:	f88d 4000 	strb.w	r4, [sp]
   201f4:	f89d 4000 	ldrb.w	r4, [sp]
   201f8:	2c00      	cmp	r4, #0
   201fa:	d1eb      	bne.n	201d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x1c>
   201fc:	bc78      	pop	{r3, r4, r5, r6}
   201fe:	4770      	bx	lr
   20200:	b5f0      	push	{r4, r5, r6, r7, lr}
   20202:	b087      	sub	sp, #28
   20204:	460d      	mov	r5, r1
   20206:	4604      	mov	r4, r0
   20208:	f7ef fb3e 	bl	f888 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
   2020c:	2700      	movs	r7, #0
   2020e:	b338      	cbz	r0, 20260 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
   20210:	f5a4 70eb 	sub.w	r0, r4, #470	; 0x1d6
   20214:	7227      	strb	r7, [r4, #8]
   20216:	8806      	ldrh	r6, [r0, #0]
   20218:	a903      	add	r1, sp, #12
   2021a:	4630      	mov	r0, r6
   2021c:	f001 fd1d 	bl	21c5a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
   20220:	b118      	cbz	r0, 2022a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x72>
   20222:	21fd      	movs	r1, #253	; 0xfd
   20224:	202c      	movs	r0, #44	; 0x2c
   20226:	f7ec fe2f 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2022a:	f8ad 6000 	strh.w	r6, [sp]
   2022e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   20232:	f8ad 0002 	strh.w	r0, [sp, #2]
   20236:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   2023a:	f8ad 0004 	strh.w	r0, [sp, #4]
   2023e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   20242:	f8ad 0006 	strh.w	r0, [sp, #6]
   20246:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   2024a:	f8ad 0008 	strh.w	r0, [sp, #8]
   2024e:	4668      	mov	r0, sp
   20250:	f001 fd4a 	bl	21ce8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
   20254:	b120      	cbz	r0, 20260 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
   20256:	f44f 7183 	mov.w	r1, #262	; 0x106
   2025a:	202c      	movs	r0, #44	; 0x2c
   2025c:	f7ec fe14 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20260:	202b      	movs	r0, #43	; 0x2b
   20262:	7028      	strb	r0, [r5, #0]
   20264:	706f      	strb	r7, [r5, #1]
   20266:	f8d4 000a 	ldr.w	r0, [r4, #10]
   2026a:	6068      	str	r0, [r5, #4]
   2026c:	f8d4 000e 	ldr.w	r0, [r4, #14]
   20270:	60a8      	str	r0, [r5, #8]
   20272:	8a60      	ldrh	r0, [r4, #18]
   20274:	81a8      	strh	r0, [r5, #12]
   20276:	b007      	add	sp, #28
   20278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002027a <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
   2027a:	f000 0155 	and.w	r1, r0, #85	; 0x55
   2027e:	2255      	movs	r2, #85	; 0x55
   20280:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   20284:	4408      	add	r0, r1
   20286:	f000 0133 	and.w	r1, r0, #51	; 0x33
   2028a:	2233      	movs	r2, #51	; 0x33
   2028c:	ea02 0090 	and.w	r0, r2, r0, lsr #2
   20290:	4408      	add	r0, r1
   20292:	f000 010f 	and.w	r1, r0, #15
   20296:	eb01 1010 	add.w	r0, r1, r0, lsr #4
   2029a:	4770      	bx	lr

0002029c <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
   2029c:	b418      	push	{r3, r4}
   2029e:	2200      	movs	r2, #0
   202a0:	704a      	strb	r2, [r1, #1]
   202a2:	2309      	movs	r3, #9
   202a4:	700b      	strb	r3, [r1, #0]
   202a6:	f1a0 0c74 	sub.w	ip, r0, #116	; 0x74
   202aa:	f5a0 7307 	sub.w	r3, r0, #540	; 0x21c
   202ae:	7202      	strb	r2, [r0, #8]
   202b0:	855a      	strh	r2, [r3, #42]	; 0x2a
   202b2:	f8dc 407e 	ldr.w	r4, [ip, #126]	; 0x7e
   202b6:	604c      	str	r4, [r1, #4]
   202b8:	f8dc 4082 	ldr.w	r4, [ip, #130]	; 0x82
   202bc:	608c      	str	r4, [r1, #8]
   202be:	f8bc 4086 	ldrh.w	r4, [ip, #134]	; 0x86
   202c2:	818c      	strh	r4, [r1, #12]
   202c4:	710a      	strb	r2, [r1, #4]
   202c6:	7a04      	ldrb	r4, [r0, #8]
   202c8:	f88d 4000 	strb.w	r4, [sp]
   202cc:	f89d 4000 	ldrb.w	r4, [sp]
   202d0:	2c00      	cmp	r4, #0
   202d2:	d1ec      	bne.n	202ae <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
   202d4:	bc18      	pop	{r3, r4}
   202d6:	4770      	bx	lr

000202d8 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
   202d8:	2200      	movs	r2, #0
   202da:	704a      	strb	r2, [r1, #1]
   202dc:	220d      	movs	r2, #13
   202de:	700a      	strb	r2, [r1, #0]
   202e0:	f5a0 7298 	sub.w	r2, r0, #304	; 0x130
   202e4:	7a83      	ldrb	r3, [r0, #10]
   202e6:	f5a0 7036 	sub.w	r0, r0, #728	; 0x2d8
   202ea:	710b      	strb	r3, [r1, #4]
   202ec:	8800      	ldrh	r0, [r0, #0]
   202ee:	80c8      	strh	r0, [r1, #6]
   202f0:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
   202f4:	7208      	strb	r0, [r1, #8]
   202f6:	4770      	bx	lr

000202f8 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
   202f8:	2200      	movs	r2, #0
   202fa:	704a      	strb	r2, [r1, #1]
   202fc:	220e      	movs	r2, #14
   202fe:	700a      	strb	r2, [r1, #0]
   20300:	7a82      	ldrb	r2, [r0, #10]
   20302:	f5a0 7036 	sub.w	r0, r0, #728	; 0x2d8
   20306:	710a      	strb	r2, [r1, #4]
   20308:	8800      	ldrh	r0, [r0, #0]
   2030a:	80c8      	strh	r0, [r1, #6]
   2030c:	4770      	bx	lr

0002030e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
   2030e:	2200      	movs	r2, #0
   20310:	704a      	strb	r2, [r1, #1]
   20312:	220a      	movs	r2, #10
   20314:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
   20318:	700a      	strb	r2, [r1, #0]
   2031a:	8802      	ldrh	r2, [r0, #0]
   2031c:	808a      	strh	r2, [r1, #4]
   2031e:	f8d0 23f0 	ldr.w	r2, [r0, #1008]	; 0x3f0
   20322:	f8d0 33f4 	ldr.w	r3, [r0, #1012]	; 0x3f4
   20326:	f8c1 2006 	str.w	r2, [r1, #6]
   2032a:	f8c1 300a 	str.w	r3, [r1, #10]
   2032e:	f8b0 03f8 	ldrh.w	r0, [r0, #1016]	; 0x3f8
   20332:	81c8      	strh	r0, [r1, #14]
   20334:	4770      	bx	lr

00020336 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
   20336:	b510      	push	{r4, lr}
   20338:	6841      	ldr	r1, [r0, #4]
   2033a:	7803      	ldrb	r3, [r0, #0]
   2033c:	f101 04a8 	add.w	r4, r1, #168	; 0xa8
   20340:	f891 20c5 	ldrb.w	r2, [r1, #197]	; 0xc5
   20344:	2100      	movs	r1, #0
   20346:	4620      	mov	r0, r4
   20348:	f7ff f9a5 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2034c:	2800      	cmp	r0, #0
   2034e:	bf1e      	ittt	ne
   20350:	2004      	movne	r0, #4
   20352:	7760      	strbne	r0, [r4, #29]
   20354:	bd10      	popne	{r4, pc}
   20356:	21aa      	movs	r1, #170	; 0xaa
   20358:	201c      	movs	r0, #28
   2035a:	f7ec fd95 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0002035e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
   2035e:	b510      	push	{r4, lr}
   20360:	4604      	mov	r4, r0
   20362:	7800      	ldrb	r0, [r0, #0]
   20364:	6861      	ldr	r1, [r4, #4]
   20366:	b188      	cbz	r0, 2038c <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x2e>
   20368:	f891 00b4 	ldrb.w	r0, [r1, #180]	; 0xb4
   2036c:	f010 0f01 	tst.w	r0, #1
   20370:	d01e      	beq.n	203b0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x52>
   20372:	f891 0104 	ldrb.w	r0, [r1, #260]	; 0x104
   20376:	1e40      	subs	r0, r0, #1
   20378:	b242      	sxtb	r2, r0
   2037a:	f881 2104 	strb.w	r2, [r1, #260]	; 0x104
   2037e:	6860      	ldr	r0, [r4, #4]
   20380:	2a00      	cmp	r2, #0
   20382:	da19      	bge.n	203b8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x5a>
   20384:	21b9      	movs	r1, #185	; 0xb9
   20386:	201c      	movs	r0, #28
   20388:	f7ec fd7e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2038c:	f891 20c6 	ldrb.w	r2, [r1, #198]	; 0xc6
   20390:	f101 00a8 	add.w	r0, r1, #168	; 0xa8
   20394:	2300      	movs	r3, #0
   20396:	4619      	mov	r1, r3
   20398:	f7ff f97d 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2039c:	b120      	cbz	r0, 203a8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x4a>
   2039e:	6861      	ldr	r1, [r4, #4]
   203a0:	2000      	movs	r0, #0
   203a2:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
   203a6:	bd10      	pop	{r4, pc}
   203a8:	21b2      	movs	r1, #178	; 0xb2
   203aa:	201c      	movs	r0, #28
   203ac:	f7ec fd6c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   203b0:	21b7      	movs	r1, #183	; 0xb7
   203b2:	201c      	movs	r0, #28
   203b4:	f7ec fd68 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   203b8:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
   203bc:	f021 0101 	bic.w	r1, r1, #1
   203c0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   203c4:	bd10      	pop	{r4, pc}
   203c6:	2200      	movs	r2, #0
   203c8:	704a      	strb	r2, [r1, #1]
   203ca:	2208      	movs	r2, #8
   203cc:	700a      	strb	r2, [r1, #0]
   203ce:	f8d0 2009 	ldr.w	r2, [r0, #9]
   203d2:	604a      	str	r2, [r1, #4]
   203d4:	f8d0 200d 	ldr.w	r2, [r0, #13]
   203d8:	608a      	str	r2, [r1, #8]
   203da:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   203de:	818a      	strh	r2, [r1, #12]
   203e0:	7cc0      	ldrb	r0, [r0, #19]
   203e2:	7388      	strb	r0, [r1, #14]
   203e4:	4770      	bx	lr

000203e6 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
   203e6:	2200      	movs	r2, #0
   203e8:	704a      	strb	r2, [r1, #1]
   203ea:	2210      	movs	r2, #16
   203ec:	f5a0 70db 	sub.w	r0, r0, #438	; 0x1b6
   203f0:	700a      	strb	r2, [r1, #0]
   203f2:	8800      	ldrh	r0, [r0, #0]
   203f4:	8088      	strh	r0, [r1, #4]
   203f6:	4770      	bx	lr

000203f8 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
   203f8:	b418      	push	{r3, r4}
   203fa:	2200      	movs	r2, #0
   203fc:	704a      	strb	r2, [r1, #1]
   203fe:	2401      	movs	r4, #1
   20400:	700c      	strb	r4, [r1, #0]
   20402:	f1a0 0360 	sub.w	r3, r0, #96	; 0x60
   20406:	f5a0 7c84 	sub.w	ip, r0, #264	; 0x108
   2040a:	710a      	strb	r2, [r1, #4]
   2040c:	7202      	strb	r2, [r0, #8]
   2040e:	f8bc 4000 	ldrh.w	r4, [ip]
   20412:	f8a1 4005 	strh.w	r4, [r1, #5]
   20416:	f893 4069 	ldrb.w	r4, [r3, #105]	; 0x69
   2041a:	71cc      	strb	r4, [r1, #7]
   2041c:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
   20420:	810c      	strh	r4, [r1, #8]
   20422:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   20426:	814c      	strh	r4, [r1, #10]
   20428:	7a04      	ldrb	r4, [r0, #8]
   2042a:	f88d 4000 	strb.w	r4, [sp]
   2042e:	f89d 4000 	ldrb.w	r4, [sp]
   20432:	2c00      	cmp	r4, #0
   20434:	d1ea      	bne.n	2040c <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
   20436:	bc18      	pop	{r3, r4}
   20438:	4770      	bx	lr

0002043a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
   2043a:	b570      	push	{r4, r5, r6, lr}
   2043c:	7803      	ldrb	r3, [r0, #0]
   2043e:	2b00      	cmp	r3, #0
   20440:	bf0c      	ite	eq
   20442:	2101      	moveq	r1, #1
   20444:	2100      	movne	r1, #0
   20446:	6840      	ldr	r0, [r0, #4]
   20448:	f04f 0500 	mov.w	r5, #0
   2044c:	f100 04a8 	add.w	r4, r0, #168	; 0xa8
   20450:	f500 76ac 	add.w	r6, r0, #344	; 0x158
   20454:	f890 0107 	ldrb.w	r0, [r0, #263]	; 0x107
   20458:	f010 0f02 	tst.w	r0, #2
   2045c:	d00b      	beq.n	20476 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x3c>
   2045e:	b1d9      	cbz	r1, 20498 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5e>
   20460:	2300      	movs	r3, #0
   20462:	7fa2      	ldrb	r2, [r4, #30]
   20464:	4619      	mov	r1, r3
   20466:	4620      	mov	r0, r4
   20468:	f7ff f915 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2046c:	2800      	cmp	r0, #0
   2046e:	bf18      	it	ne
   20470:	f884 505c 	strbne.w	r5, [r4, #92]	; 0x5c
   20474:	e024      	b.n	204c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x86>
   20476:	7f62      	ldrb	r2, [r4, #29]
   20478:	2100      	movs	r1, #0
   2047a:	4620      	mov	r0, r4
   2047c:	f7ff f90b 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   20480:	b130      	cbz	r0, 20490 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x56>
   20482:	2001      	movs	r0, #1
   20484:	7760      	strb	r0, [r4, #29]
   20486:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
   2048a:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
   2048e:	bd70      	pop	{r4, r5, r6, pc}
   20490:	216e      	movs	r1, #110	; 0x6e
   20492:	2040      	movs	r0, #64	; 0x40
   20494:	f7ec fcf8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20498:	7b20      	ldrb	r0, [r4, #12]
   2049a:	f010 0f02 	tst.w	r0, #2
   2049e:	d00f      	beq.n	204c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x86>
   204a0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   204a4:	1e40      	subs	r0, r0, #1
   204a6:	b240      	sxtb	r0, r0
   204a8:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
   204ac:	2800      	cmp	r0, #0
   204ae:	da03      	bge.n	204b8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x7e>
   204b0:	2180      	movs	r1, #128	; 0x80
   204b2:	2040      	movs	r0, #64	; 0x40
   204b4:	f7ec fce8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   204b8:	68e0      	ldr	r0, [r4, #12]
   204ba:	f020 0002 	bic.w	r0, r0, #2
   204be:	60e0      	str	r0, [r4, #12]
   204c0:	74b5      	strb	r5, [r6, #18]
   204c2:	bd70      	pop	{r4, r5, r6, pc}
   204c4:	2200      	movs	r2, #0
   204c6:	704a      	strb	r2, [r1, #1]
   204c8:	2229      	movs	r2, #41	; 0x29
   204ca:	700a      	strb	r2, [r1, #0]
   204cc:	f8d0 000a 	ldr.w	r0, [r0, #10]
   204d0:	6048      	str	r0, [r1, #4]
   204d2:	4770      	bx	lr

000204d4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
   204d4:	b510      	push	{r4, lr}
   204d6:	4604      	mov	r4, r0
   204d8:	7c80      	ldrb	r0, [r0, #18]
   204da:	2802      	cmp	r0, #2
   204dc:	bf18      	it	ne
   204de:	2803      	cmpne	r0, #3
   204e0:	d109      	bne.n	204f6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x22>
   204e2:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   204e6:	f104 0170 	add.w	r1, r4, #112	; 0x70
   204ea:	f7ee fced 	bl	eec8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   204ee:	2808      	cmp	r0, #8
   204f0:	bf1c      	itt	ne
   204f2:	2001      	movne	r0, #1
   204f4:	bd10      	popne	{r4, pc}
   204f6:	7ca0      	ldrb	r0, [r4, #18]
   204f8:	2800      	cmp	r0, #0
   204fa:	bf1e      	ittt	ne
   204fc:	2802      	cmpne	r0, #2
   204fe:	7e60      	ldrbne	r0, [r4, #25]
   20500:	bd10      	popne	{r4, pc}
   20502:	f04f 0000 	mov.w	r0, #0
   20506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2050a:	f7ed bce3 	b.w	ded4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0002050e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
   2050e:	b508      	push	{r3, lr}
   20510:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
   20514:	f88d 1000 	strb.w	r1, [sp]
   20518:	f89d 1000 	ldrb.w	r1, [sp]
   2051c:	b991      	cbnz	r1, 20544 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x36>
   2051e:	f890 10c8 	ldrb.w	r1, [r0, #200]	; 0xc8
   20522:	f88d 1000 	strb.w	r1, [sp]
   20526:	f89d 1000 	ldrb.w	r1, [sp]
   2052a:	b959      	cbnz	r1, 20544 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x36>
   2052c:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
   20530:	f88d 0000 	strb.w	r0, [sp]
   20534:	f89d 0000 	ldrb.w	r0, [sp]
   20538:	b110      	cbz	r0, 20540 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x32>
   2053a:	f7f7 f88b 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   2053e:	b108      	cbz	r0, 20544 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x36>
   20540:	2000      	movs	r0, #0
   20542:	bd08      	pop	{r3, pc}
   20544:	2001      	movs	r0, #1
   20546:	bd08      	pop	{r3, pc}

00020548 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
   20548:	20ff      	movs	r0, #255	; 0xff
   2054a:	7008      	strb	r0, [r1, #0]
   2054c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
   2054e:	f7fe bf50 	b.w	1f3f2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00020552 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
   20552:	b530      	push	{r4, r5, lr}
   20554:	460d      	mov	r5, r1
   20556:	b085      	sub	sp, #20
   20558:	4604      	mov	r4, r0
   2055a:	f44f 72b0 	mov.w	r2, #352	; 0x160
   2055e:	2100      	movs	r1, #0
   20560:	f002 fe3d 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   20564:	20ff      	movs	r0, #255	; 0xff
   20566:	7020      	strb	r0, [r4, #0]
   20568:	207f      	movs	r0, #127	; 0x7f
   2056a:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
   2056e:	2013      	movs	r0, #19
   20570:	8060      	strh	r0, [r4, #2]
   20572:	f242 7010 	movw	r0, #10000	; 0x2710
   20576:	84e0      	strh	r0, [r4, #38]	; 0x26
   20578:	f7ed fa28 	bl	d9cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
   2057c:	4601      	mov	r1, r0
   2057e:	64e0      	str	r0, [r4, #76]	; 0x4c
   20580:	2200      	movs	r2, #0
   20582:	a802      	add	r0, sp, #8
   20584:	f7fe fe97 	bl	1f2b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   20588:	2200      	movs	r2, #0
   2058a:	2101      	movs	r1, #1
   2058c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2058e:	f7fe ff0f 	bl	1f3b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   20592:	2204      	movs	r2, #4
   20594:	a802      	add	r0, sp, #8
   20596:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   20598:	f7fe fe8d 	bl	1f2b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   2059c:	2200      	movs	r2, #0
   2059e:	4611      	mov	r1, r2
   205a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   205a2:	f7fe ff05 	bl	1f3b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   205a6:	7425      	strb	r5, [r4, #16]
   205a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   205ac:	f000 fa0a 	bl	209c4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   205b0:	4668      	mov	r0, sp
   205b2:	f7ef f841 	bl	f638 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
   205b6:	b130      	cbz	r0, 205c6 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ+0x74>
   205b8:	4669      	mov	r1, sp
   205ba:	f104 0036 	add.w	r0, r4, #54	; 0x36
   205be:	f7ff f9e2 	bl	1f986 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   205c2:	b005      	add	sp, #20
   205c4:	bd30      	pop	{r4, r5, pc}
   205c6:	f240 314a 	movw	r1, #842	; 0x34a
   205ca:	202d      	movs	r0, #45	; 0x2d
   205cc:	f7ec fc5c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000205d0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
   205d0:	8840      	ldrh	r0, [r0, #2]
   205d2:	f3c0 1100 	ubfx	r1, r0, #4, #1
   205d6:	b131      	cbz	r1, 205e6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x16>
   205d8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   205dc:	2800      	cmp	r0, #0
   205de:	bf04      	itt	eq
   205e0:	201f      	moveq	r0, #31
   205e2:	4770      	bxeq	lr
   205e4:	e002      	b.n	205ec <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x1c>
   205e6:	f3c0 0140 	ubfx	r1, r0, #1, #1
   205ea:	b109      	cbz	r1, 205f0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0x20>
   205ec:	2000      	movs	r0, #0
   205ee:	4770      	bx	lr
   205f0:	f010 0f01 	tst.w	r0, #1
   205f4:	bf1c      	itt	ne
   205f6:	20ee      	movne	r0, #238	; 0xee
   205f8:	4770      	bxne	lr
   205fa:	f7ed ba0d 	b.w	da18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>

000205fe <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>:
   205fe:	21ff      	movs	r1, #255	; 0xff
   20600:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
   20604:	4770      	bx	lr

00020606 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
   20606:	f7f2 bb67 	b.w	12cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1178>

0002060a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
   2060a:	6880      	ldr	r0, [r0, #8]
   2060c:	4770      	bx	lr

0002060e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
   2060e:	b500      	push	{lr}
   20610:	8842      	ldrh	r2, [r0, #2]
   20612:	b085      	sub	sp, #20
   20614:	f3c2 1300 	ubfx	r3, r2, #4, #1
   20618:	468c      	mov	ip, r1
   2061a:	2b00      	cmp	r3, #0
   2061c:	bf07      	ittee	eq
   2061e:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   20622:	2a00      	cmpeq	r2, #0
   20624:	2001      	movne	r0, #1
   20626:	b005      	addne	sp, #20
   20628:	bf18      	it	ne
   2062a:	bd00      	popne	{pc}
   2062c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   20630:	9100      	str	r1, [sp, #0]
   20632:	8841      	ldrh	r1, [r0, #2]
   20634:	f8ad 1004 	strh.w	r1, [sp, #4]
   20638:	6881      	ldr	r1, [r0, #8]
   2063a:	9102      	str	r1, [sp, #8]
   2063c:	7901      	ldrb	r1, [r0, #4]
   2063e:	f88d 100c 	strb.w	r1, [sp, #12]
   20642:	7940      	ldrb	r0, [r0, #5]
   20644:	f88d 000d 	strb.w	r0, [sp, #13]
   20648:	4669      	mov	r1, sp
   2064a:	4660      	mov	r0, ip
   2064c:	f7f2 fbae 	bl	12dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x124c>
   20650:	b005      	add	sp, #20
   20652:	bd00      	pop	{pc}

00020654 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
   20654:	2200      	movs	r2, #0
   20656:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   2065a:	8843      	ldrh	r3, [r0, #2]
   2065c:	2b1d      	cmp	r3, #29
   2065e:	bf0c      	ite	eq
   20660:	7342      	strbeq	r2, [r0, #13]
   20662:	7341      	strbne	r1, [r0, #13]
   20664:	4770      	bx	lr

00020666 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
   20666:	b510      	push	{r4, lr}
   20668:	8841      	ldrh	r1, [r0, #2]
   2066a:	f3c1 1200 	ubfx	r2, r1, #4, #1
   2066e:	b92a      	cbnz	r2, 2067c <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y+0x16>
   20670:	f3c1 0140 	ubfx	r1, r1, #1, #1
   20674:	2900      	cmp	r1, #0
   20676:	bf18      	it	ne
   20678:	2401      	movne	r4, #1
   2067a:	d100      	bne.n	2067e <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y+0x18>
   2067c:	2400      	movs	r4, #0
   2067e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   20680:	f7fe fe8e 	bl	1f3a0 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
   20684:	ea24 0000 	bic.w	r0, r4, r0
   20688:	f080 0001 	eor.w	r0, r0, #1
   2068c:	bd10      	pop	{r4, pc}

0002068e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>:
   2068e:	b510      	push	{r4, lr}
   20690:	8840      	ldrh	r0, [r0, #2]
   20692:	f3c0 1100 	ubfx	r1, r0, #4, #1
   20696:	b119      	cbz	r1, 206a0 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x12>
   20698:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2069c:	b148      	cbz	r0, 206b2 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   2069e:	e00a      	b.n	206b6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   206a0:	f3c0 0140 	ubfx	r1, r0, #1, #1
   206a4:	b939      	cbnz	r1, 206b6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   206a6:	f010 0f01 	tst.w	r0, #1
   206aa:	d102      	bne.n	206b2 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x24>
   206ac:	f7ed f9b4 	bl	da18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   206b0:	b108      	cbz	r0, 206b6 <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA+0x28>
   206b2:	2001      	movs	r0, #1
   206b4:	bd10      	pop	{r4, pc}
   206b6:	2000      	movs	r0, #0
   206b8:	bd10      	pop	{r4, pc}

000206ba <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
   206ba:	7880      	ldrb	r0, [r0, #2]
   206bc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   206c0:	4770      	bx	lr

000206c2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
   206c2:	7880      	ldrb	r0, [r0, #2]
   206c4:	f000 0001 	and.w	r0, r0, #1
   206c8:	4770      	bx	lr

000206ca <sym_4BHBBQGG3Z4AATH4MTZL2WFYY6WPEFHF75U64WQ>:
   206ca:	8840      	ldrh	r0, [r0, #2]
   206cc:	2809      	cmp	r0, #9
   206ce:	bf0c      	ite	eq
   206d0:	2001      	moveq	r0, #1
   206d2:	2000      	movne	r0, #0
   206d4:	4770      	bx	lr

000206d6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
   206d6:	7880      	ldrb	r0, [r0, #2]
   206d8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   206dc:	4770      	bx	lr

000206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
   206de:	7880      	ldrb	r0, [r0, #2]
   206e0:	f3c0 1000 	ubfx	r0, r0, #4, #1
   206e4:	4770      	bx	lr

000206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
   206e6:	7880      	ldrb	r0, [r0, #2]
   206e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   206ec:	4770      	bx	lr

000206ee <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
   206ee:	f990 0010 	ldrsb.w	r0, [r0, #16]
   206f2:	4770      	bx	lr

000206f4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
   206f4:	7800      	ldrb	r0, [r0, #0]
   206f6:	28ff      	cmp	r0, #255	; 0xff
   206f8:	bf14      	ite	ne
   206fa:	2001      	movne	r0, #1
   206fc:	2000      	moveq	r0, #0
   206fe:	4770      	bx	lr

00020700 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
   20700:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   20704:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
   20708:	4770      	bx	lr

0002070a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
   2070a:	680a      	ldr	r2, [r1, #0]
   2070c:	f8c0 2013 	str.w	r2, [r0, #19]
   20710:	8889      	ldrh	r1, [r1, #4]
   20712:	f8a0 1017 	strh.w	r1, [r0, #23]
   20716:	2101      	movs	r1, #1
   20718:	7641      	strb	r1, [r0, #25]
   2071a:	4770      	bx	lr

0002071c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
   2071c:	7b00      	ldrb	r0, [r0, #12]
   2071e:	4770      	bx	lr

00020720 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
   20720:	7940      	ldrb	r0, [r0, #5]
   20722:	4770      	bx	lr

00020724 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
   20724:	6201      	str	r1, [r0, #32]
   20726:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
   2072a:	724a      	strb	r2, [r1, #9]
   2072c:	f8d0 2069 	ldr.w	r2, [r0, #105]	; 0x69
   20730:	f8c1 200a 	str.w	r2, [r1, #10]
   20734:	f8b0 006d 	ldrh.w	r0, [r0, #109]	; 0x6d
   20738:	81c8      	strh	r0, [r1, #14]
   2073a:	4770      	bx	lr

0002073c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
   2073c:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
   20740:	4770      	bx	lr

00020742 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
   20742:	7c40      	ldrb	r0, [r0, #17]
   20744:	2800      	cmp	r0, #0
   20746:	bf18      	it	ne
   20748:	2001      	movne	r0, #1
   2074a:	4770      	bx	lr
   2074c:	2101      	movs	r1, #1
   2074e:	f7f0 bc27 	b.w	10fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b4>
   20752:	2101      	movs	r1, #1
   20754:	f7f0 bc24 	b.w	10fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b4>
   20758:	b510      	push	{r4, lr}
   2075a:	2200      	movs	r2, #0
   2075c:	704a      	strb	r2, [r1, #1]
   2075e:	2218      	movs	r2, #24
   20760:	700a      	strb	r2, [r1, #0]
   20762:	f8d0 200a 	ldr.w	r2, [r0, #10]
   20766:	604a      	str	r2, [r1, #4]
   20768:	89c2      	ldrh	r2, [r0, #14]
   2076a:	810a      	strh	r2, [r1, #8]
   2076c:	790a      	ldrb	r2, [r1, #4]
   2076e:	38b0      	subs	r0, #176	; 0xb0
   20770:	2a00      	cmp	r2, #0
   20772:	bf08      	it	eq
   20774:	bd10      	popeq	{r4, pc}
   20776:	7880      	ldrb	r0, [r0, #2]
   20778:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2077c:	2800      	cmp	r0, #0
   2077e:	bf18      	it	ne
   20780:	bd10      	popne	{r4, pc}
   20782:	88cc      	ldrh	r4, [r1, #6]
   20784:	2101      	movs	r1, #1
   20786:	4620      	mov	r0, r4
   20788:	f7fe fcb3 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2078c:	2800      	cmp	r0, #0
   2078e:	bf08      	it	eq
   20790:	bd10      	popeq	{r4, pc}
   20792:	8800      	ldrh	r0, [r0, #0]
   20794:	f7ed fad0 	bl	dd38 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   20798:	2101      	movs	r1, #1
   2079a:	4620      	mov	r0, r4
   2079c:	f7ec feb0 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   207a0:	2800      	cmp	r0, #0
   207a2:	bf08      	it	eq
   207a4:	bd10      	popeq	{r4, pc}
   207a6:	f240 218f 	movw	r1, #655	; 0x28f
   207aa:	202d      	movs	r0, #45	; 0x2d
   207ac:	f7ec fb6c 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   207b0:	2200      	movs	r2, #0
   207b2:	704a      	strb	r2, [r1, #1]
   207b4:	2207      	movs	r2, #7
   207b6:	700a      	strb	r2, [r1, #0]
   207b8:	f8d0 000a 	ldr.w	r0, [r0, #10]
   207bc:	6048      	str	r0, [r1, #4]
   207be:	4770      	bx	lr
   207c0:	b510      	push	{r4, lr}
   207c2:	460c      	mov	r4, r1
   207c4:	2100      	movs	r1, #0
   207c6:	7061      	strb	r1, [r4, #1]
   207c8:	2115      	movs	r1, #21
   207ca:	7021      	strb	r1, [r4, #0]
   207cc:	f100 0109 	add.w	r1, r0, #9
   207d0:	2221      	movs	r2, #33	; 0x21
   207d2:	1d20      	adds	r0, r4, #4
   207d4:	f002 fc89 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   207d8:	2001      	movs	r0, #1
   207da:	71e0      	strb	r0, [r4, #7]
   207dc:	7920      	ldrb	r0, [r4, #4]
   207de:	2800      	cmp	r0, #0
   207e0:	bf08      	it	eq
   207e2:	bd10      	popeq	{r4, pc}
   207e4:	f8b4 4005 	ldrh.w	r4, [r4, #5]
   207e8:	2101      	movs	r1, #1
   207ea:	4620      	mov	r0, r4
   207ec:	f7fe fc81 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   207f0:	2800      	cmp	r0, #0
   207f2:	bf08      	it	eq
   207f4:	bd10      	popeq	{r4, pc}
   207f6:	8800      	ldrh	r0, [r0, #0]
   207f8:	f7ed fa9e 	bl	dd38 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   207fc:	2101      	movs	r1, #1
   207fe:	4620      	mov	r0, r4
   20800:	f7ec fe7e 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   20804:	2800      	cmp	r0, #0
   20806:	bf08      	it	eq
   20808:	bd10      	popeq	{r4, pc}
   2080a:	f44f 7114 	mov.w	r1, #592	; 0x250
   2080e:	202d      	movs	r0, #45	; 0x2d
   20810:	f7ec fb3a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20814:	460b      	mov	r3, r1
   20816:	2100      	movs	r1, #0
   20818:	7059      	strb	r1, [r3, #1]
   2081a:	212f      	movs	r1, #47	; 0x2f
   2081c:	7019      	strb	r1, [r3, #0]
   2081e:	2222      	movs	r2, #34	; 0x22
   20820:	f100 0109 	add.w	r1, r0, #9
   20824:	1d18      	adds	r0, r3, #4
   20826:	f002 bc60 	b.w	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   2082a:	2200      	movs	r2, #0
   2082c:	704a      	strb	r2, [r1, #1]
   2082e:	222a      	movs	r2, #42	; 0x2a
   20830:	700a      	strb	r2, [r1, #0]
   20832:	f8d0 2009 	ldr.w	r2, [r0, #9]
   20836:	604a      	str	r2, [r1, #4]
   20838:	f8d0 200d 	ldr.w	r2, [r0, #13]
   2083c:	608a      	str	r2, [r1, #8]
   2083e:	7c40      	ldrb	r0, [r0, #17]
   20840:	7308      	strb	r0, [r1, #12]
   20842:	4770      	bx	lr

00020844 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   20844:	b510      	push	{r4, lr}
   20846:	7001      	strb	r1, [r0, #0]
   20848:	7042      	strb	r2, [r0, #1]
   2084a:	7880      	ldrb	r0, [r0, #2]
   2084c:	f3c0 0380 	ubfx	r3, r0, #2, #1
   20850:	f3c0 0c40 	ubfx	ip, r0, #1, #1
   20854:	4463      	add	r3, ip
   20856:	f000 0001 	and.w	r0, r0, #1
   2085a:	4418      	add	r0, r3
   2085c:	fb10 f001 	smulbb	r0, r0, r1
   20860:	fb10 f002 	smulbb	r0, r0, r2
   20864:	28ff      	cmp	r0, #255	; 0xff
   20866:	bf38      	it	cc
   20868:	bd10      	popcc	{r4, pc}
   2086a:	215c      	movs	r1, #92	; 0x5c
   2086c:	202e      	movs	r0, #46	; 0x2e
   2086e:	f7ec fb0b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00020872 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   20872:	7881      	ldrb	r1, [r0, #2]
   20874:	f3c1 0280 	ubfx	r2, r1, #2, #1
   20878:	f3c1 0340 	ubfx	r3, r1, #1, #1
   2087c:	441a      	add	r2, r3
   2087e:	f001 0101 	and.w	r1, r1, #1
   20882:	4411      	add	r1, r2
   20884:	7842      	ldrb	r2, [r0, #1]
   20886:	7800      	ldrb	r0, [r0, #0]
   20888:	fb12 f000 	smulbb	r0, r2, r0
   2088c:	4348      	muls	r0, r1
   2088e:	b2c0      	uxtb	r0, r0
   20890:	4770      	bx	lr

00020892 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY>:
   20892:	b510      	push	{r4, lr}
   20894:	7941      	ldrb	r1, [r0, #5]
   20896:	b1c9      	cbz	r1, 208cc <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x3a>
   20898:	7881      	ldrb	r1, [r0, #2]
   2089a:	f011 0f01 	tst.w	r1, #1
   2089e:	d003      	beq.n	208a8 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x16>
   208a0:	78c2      	ldrb	r2, [r0, #3]
   208a2:	f012 0f01 	tst.w	r2, #1
   208a6:	d023      	beq.n	208f0 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   208a8:	f011 0f02 	tst.w	r1, #2
   208ac:	d003      	beq.n	208b6 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x24>
   208ae:	78c2      	ldrb	r2, [r0, #3]
   208b0:	f012 0f02 	tst.w	r2, #2
   208b4:	d01a      	beq.n	208ec <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5a>
   208b6:	f011 0f04 	tst.w	r1, #4
   208ba:	d003      	beq.n	208c4 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x32>
   208bc:	78c0      	ldrb	r0, [r0, #3]
   208be:	f010 0f04 	tst.w	r0, #4
   208c2:	d00e      	beq.n	208e2 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x50>
   208c4:	2139      	movs	r1, #57	; 0x39
   208c6:	202e      	movs	r0, #46	; 0x2e
   208c8:	f7ec fade 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   208cc:	78c1      	ldrb	r1, [r0, #3]
   208ce:	f011 0f02 	tst.w	r1, #2
   208d2:	d10b      	bne.n	208ec <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5a>
   208d4:	f011 0f01 	tst.w	r1, #1
   208d8:	d10a      	bne.n	208f0 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   208da:	7880      	ldrb	r0, [r0, #2]
   208dc:	f010 0f04 	tst.w	r0, #4
   208e0:	d001      	beq.n	208e6 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x54>
   208e2:	2027      	movs	r0, #39	; 0x27
   208e4:	bd10      	pop	{r4, pc}
   208e6:	f010 0f02 	tst.w	r0, #2
   208ea:	d001      	beq.n	208f0 <sym_PNT32LSDJE46MSUTWPAH2HUWQRO5OFWDB3SHPSY+0x5e>
   208ec:	2026      	movs	r0, #38	; 0x26
   208ee:	bd10      	pop	{r4, pc}
   208f0:	2025      	movs	r0, #37	; 0x25
   208f2:	bd10      	pop	{r4, pc}

000208f4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   208f4:	7882      	ldrb	r2, [r0, #2]
   208f6:	2100      	movs	r1, #0
   208f8:	f012 0f01 	tst.w	r2, #1
   208fc:	d005      	beq.n	2090a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x16>
   208fe:	78c3      	ldrb	r3, [r0, #3]
   20900:	f013 0f01 	tst.w	r3, #1
   20904:	bf08      	it	eq
   20906:	2101      	moveq	r1, #1
   20908:	d010      	beq.n	2092c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   2090a:	f012 0f02 	tst.w	r2, #2
   2090e:	d005      	beq.n	2091c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x28>
   20910:	78c3      	ldrb	r3, [r0, #3]
   20912:	f013 0f02 	tst.w	r3, #2
   20916:	bf08      	it	eq
   20918:	2102      	moveq	r1, #2
   2091a:	d007      	beq.n	2092c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   2091c:	f012 0f04 	tst.w	r2, #4
   20920:	d004      	beq.n	2092c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x38>
   20922:	78c3      	ldrb	r3, [r0, #3]
   20924:	f013 0f04 	tst.w	r3, #4
   20928:	bf08      	it	eq
   2092a:	2104      	moveq	r1, #4
   2092c:	7943      	ldrb	r3, [r0, #5]
   2092e:	1c5b      	adds	r3, r3, #1
   20930:	b2db      	uxtb	r3, r3
   20932:	7143      	strb	r3, [r0, #5]
   20934:	f890 c001 	ldrb.w	ip, [r0, #1]
   20938:	4563      	cmp	r3, ip
   2093a:	d10d      	bne.n	20958 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   2093c:	2300      	movs	r3, #0
   2093e:	7143      	strb	r3, [r0, #5]
   20940:	f890 c003 	ldrb.w	ip, [r0, #3]
   20944:	ea4c 0c01 	orr.w	ip, ip, r1
   20948:	f880 c003 	strb.w	ip, [r0, #3]
   2094c:	4594      	cmp	ip, r2
   2094e:	d103      	bne.n	20958 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x64>
   20950:	70c3      	strb	r3, [r0, #3]
   20952:	7902      	ldrb	r2, [r0, #4]
   20954:	1c52      	adds	r2, r2, #1
   20956:	7102      	strb	r2, [r0, #4]
   20958:	2901      	cmp	r1, #1
   2095a:	bf04      	itt	eq
   2095c:	2025      	moveq	r0, #37	; 0x25
   2095e:	4770      	bxeq	lr
   20960:	2902      	cmp	r1, #2
   20962:	bf04      	itt	eq
   20964:	2026      	moveq	r0, #38	; 0x26
   20966:	4770      	bxeq	lr
   20968:	2904      	cmp	r1, #4
   2096a:	bf04      	itt	eq
   2096c:	2027      	moveq	r0, #39	; 0x27
   2096e:	4770      	bxeq	lr
   20970:	b510      	push	{r4, lr}
   20972:	2139      	movs	r1, #57	; 0x39
   20974:	202e      	movs	r0, #46	; 0x2e
   20976:	f7ec fa87 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0002097a <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   2097a:	7081      	strb	r1, [r0, #2]
   2097c:	4770      	bx	lr

0002097e <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   2097e:	b410      	push	{r4}
   20980:	7881      	ldrb	r1, [r0, #2]
   20982:	f3c1 0280 	ubfx	r2, r1, #2, #1
   20986:	f3c1 0340 	ubfx	r3, r1, #1, #1
   2098a:	441a      	add	r2, r3
   2098c:	f001 0101 	and.w	r1, r1, #1
   20990:	7843      	ldrb	r3, [r0, #1]
   20992:	4411      	add	r1, r2
   20994:	fb13 f201 	smulbb	r2, r3, r1
   20998:	78c1      	ldrb	r1, [r0, #3]
   2099a:	f3c1 0c80 	ubfx	ip, r1, #2, #1
   2099e:	f3c1 0440 	ubfx	r4, r1, #1, #1
   209a2:	44a4      	add	ip, r4
   209a4:	f001 0101 	and.w	r1, r1, #1
   209a8:	4461      	add	r1, ip
   209aa:	f890 c005 	ldrb.w	ip, [r0, #5]
   209ae:	fb11 c103 	smlabb	r1, r1, r3, ip
   209b2:	7803      	ldrb	r3, [r0, #0]
   209b4:	7900      	ldrb	r0, [r0, #4]
   209b6:	1a18      	subs	r0, r3, r0
   209b8:	fb10 f002 	smulbb	r0, r0, r2
   209bc:	1a40      	subs	r0, r0, r1
   209be:	bc10      	pop	{r4}
   209c0:	b2c0      	uxtb	r0, r0
   209c2:	4770      	bx	lr

000209c4 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   209c4:	b510      	push	{r4, lr}
   209c6:	4604      	mov	r4, r0
   209c8:	f002 f89d 	bl	22b06 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>
   209cc:	2001      	movs	r0, #1
   209ce:	7060      	strb	r0, [r4, #1]
   209d0:	7020      	strb	r0, [r4, #0]
   209d2:	bd10      	pop	{r4, pc}

000209d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   209d4:	2100      	movs	r1, #0
   209d6:	70c1      	strb	r1, [r0, #3]
   209d8:	7141      	strb	r1, [r0, #5]
   209da:	7101      	strb	r1, [r0, #4]
   209dc:	4770      	bx	lr

000209de <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA>:
   209de:	2808      	cmp	r0, #8
   209e0:	bf04      	itt	eq
   209e2:	f44f 70c8 	moveq.w	r0, #400	; 0x190
   209e6:	2340      	moveq	r3, #64	; 0x40
   209e8:	d00e      	beq.n	20a08 <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA+0x2a>
   209ea:	2804      	cmp	r0, #4
   209ec:	bf04      	itt	eq
   209ee:	f44f 70bf 	moveq.w	r0, #382	; 0x17e
   209f2:	2310      	moveq	r3, #16
   209f4:	d008      	beq.n	20a08 <sym_CVNRAJRARP4LQF4UWJ6MJU4AFS4X36ZOCWFPBEA+0x2a>
   209f6:	2300      	movs	r3, #0
   209f8:	2802      	cmp	r0, #2
   209fa:	bf07      	ittee	eq
   209fc:	f103 0018 	addeq.w	r0, r3, #24
   20a00:	2304      	moveq	r3, #4
   20a02:	f103 0028 	addne.w	r0, r3, #40	; 0x28
   20a06:	2308      	movne	r3, #8
   20a08:	1d52      	adds	r2, r2, #5
   20a0a:	fb02 0003 	mla	r0, r2, r3, r0
   20a0e:	3080      	adds	r0, #128	; 0x80
   20a10:	4348      	muls	r0, r1
   20a12:	4770      	bx	lr

00020a14 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   20a14:	f240 315a 	movw	r1, #858	; 0x35a
   20a18:	4348      	muls	r0, r1
   20a1a:	4770      	bx	lr

00020a1c <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   20a1c:	f240 20ef 	movw	r0, #751	; 0x2ef
   20a20:	4770      	bx	lr
   20a22:	020e      	.short	0x020e
   20a24:	0630041c 	.word	0x0630041c
   20a28:	035a0c60 	.word	0x035a0c60
   20a2c:	05c506b4 	.word	0x05c506b4
   20a30:	12250bf5 	.word	0x12250bf5
   20a34:	03b101a3 	.word	0x03b101a3
   20a38:	02ef05bf 	.word	0x02ef05bf
   20a3c:	09a30649 	.word	0x09a30649

00020a40 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   20a40:	b510      	push	{r4, lr}
   20a42:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   20a46:	2900      	cmp	r1, #0
   20a48:	bf1c      	itt	ne
   20a4a:	2000      	movne	r0, #0
   20a4c:	bd10      	popne	{r4, pc}
   20a4e:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   20a52:	2900      	cmp	r1, #0
   20a54:	bf1c      	itt	ne
   20a56:	e9d0 1247 	ldrdne	r1, r2, [r0, #284]	; 0x11c
   20a5a:	428a      	cmpne	r2, r1
   20a5c:	bf9c      	itt	ls
   20a5e:	2001      	movls	r0, #1
   20a60:	bd10      	popls	{r4, pc}
   20a62:	f7f0 f9c3 	bl	10dec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   20a66:	2000      	movs	r0, #0
   20a68:	bd10      	pop	{r4, pc}

00020a6a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
   20a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a6c:	b083      	sub	sp, #12
   20a6e:	2500      	movs	r5, #0
   20a70:	b131      	cbz	r1, 20a80 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x16>
   20a72:	2901      	cmp	r1, #1
   20a74:	d074      	beq.n	20b60 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf6>
   20a76:	f240 717a 	movw	r1, #1914	; 0x77a
   20a7a:	2030      	movs	r0, #48	; 0x30
   20a7c:	f7ec fa04 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20a80:	4604      	mov	r4, r0
   20a82:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
   20a84:	2600      	movs	r6, #0
   20a86:	b130      	cbz	r0, 20a96 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x2c>
   20a88:	f7ef fbf4 	bl	10274 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   20a8c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   20a8e:	fbb0 f2f1 	udiv	r2, r0, r1
   20a92:	fb01 0612 	mls	r6, r1, r2, r0
   20a96:	4620      	mov	r0, r4
   20a98:	f7ff fdb7 	bl	2060a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   20a9c:	e9d4 2150 	ldrd	r2, r1, [r4, #320]	; 0x140
   20aa0:	4430      	add	r0, r6
   20aa2:	1880      	adds	r0, r0, r2
   20aa4:	4169      	adcs	r1, r5
   20aa6:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
   20aaa:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
   20aae:	2001      	movs	r0, #1
   20ab0:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
   20ab4:	2002      	movs	r0, #2
   20ab6:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
   20aba:	4620      	mov	r0, r4
   20abc:	f7ff fe0f 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   20ac0:	2800      	cmp	r0, #0
   20ac2:	bf08      	it	eq
   20ac4:	2661      	moveq	r6, #97	; 0x61
   20ac6:	d024      	beq.n	20b12 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xa8>
   20ac8:	4620      	mov	r0, r4
   20aca:	f7ff fdfa 	bl	206c2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   20ace:	b930      	cbnz	r0, 20ade <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x74>
   20ad0:	4620      	mov	r0, r4
   20ad2:	f7ff fe08 	bl	206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   20ad6:	2800      	cmp	r0, #0
   20ad8:	bf08      	it	eq
   20ada:	2650      	moveq	r6, #80	; 0x50
   20adc:	d000      	beq.n	20ae0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x76>
   20ade:	2655      	movs	r6, #85	; 0x55
   20ae0:	4668      	mov	r0, sp
   20ae2:	f7fc feb3 	bl	1d84c <mpsl_fem_pa_is_configured>
   20ae6:	f89d 0000 	ldrb.w	r0, [sp]
   20aea:	2800      	cmp	r0, #0
   20aec:	bf14      	ite	ne
   20aee:	2701      	movne	r7, #1
   20af0:	2700      	moveq	r7, #0
   20af2:	a801      	add	r0, sp, #4
   20af4:	f7fc fe92 	bl	1d81c <mpsl_fem_lna_is_configured>
   20af8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   20afc:	2800      	cmp	r0, #0
   20afe:	bf18      	it	ne
   20b00:	2001      	movne	r0, #1
   20b02:	4338      	orrs	r0, r7
   20b04:	bf18      	it	ne
   20b06:	360a      	addne	r6, #10
   20b08:	f7fc fddc 	bl	1d6c4 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   20b0c:	2800      	cmp	r0, #0
   20b0e:	bf18      	it	ne
   20b10:	3618      	addne	r6, #24
   20b12:	f8a4 6138 	strh.w	r6, [r4, #312]	; 0x138
   20b16:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
   20b1a:	bb00      	cbnz	r0, 20b5e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf4>
   20b1c:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
   20b20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   20b24:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   20b28:	4051      	eors	r1, r2
   20b2a:	ea71 0000 	orns	r0, r1, r0
   20b2e:	d018      	beq.n	20b62 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
   20b30:	4620      	mov	r0, r4
   20b32:	4629      	mov	r1, r5
   20b34:	f7ef ff3c 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   20b38:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   20b3c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   20b40:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
   20b44:	1880      	adds	r0, r0, r2
   20b46:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
   20b4a:	4169      	adcs	r1, r5
   20b4c:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
   20b50:	1a18      	subs	r0, r3, r0
   20b52:	eb72 0001 	sbcs.w	r0, r2, r1
   20b56:	d504      	bpl.n	20b62 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0xf8>
   20b58:	4620      	mov	r0, r4
   20b5a:	f7f0 f947 	bl	10dec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   20b5e:	e007      	b.n	20b70 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x106>
   20b60:	e014      	b.n	20b8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x122>
   20b62:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   20b66:	f504 7198 	add.w	r1, r4, #304	; 0x130
   20b6a:	f7fa facb 	bl	1b104 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   20b6e:	b140      	cbz	r0, 20b82 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x118>
   20b70:	f8a4 5148 	strh.w	r5, [r4, #328]	; 0x148
   20b74:	f7f7 fc64 	bl	18440 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   20b78:	b003      	add	sp, #12
   20b7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20b7e:	f7fb b887 	b.w	1bc90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   20b82:	f240 61d4 	movw	r1, #1748	; 0x6d4
   20b86:	2030      	movs	r0, #48	; 0x30
   20b88:	f7ec f97e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20b8c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   20b90:	f7f7 fc56 	bl	18440 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   20b94:	b003      	add	sp, #12
   20b96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20b9a:	f7fb b879 	b.w	1bc90 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>

00020b9e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   20b9e:	b510      	push	{r4, lr}
   20ba0:	4604      	mov	r4, r0
   20ba2:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
   20ba6:	2800      	cmp	r0, #0
   20ba8:	bf08      	it	eq
   20baa:	bd10      	popeq	{r4, pc}
   20bac:	2001      	movs	r0, #1
   20bae:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
   20bb2:	4601      	mov	r1, r0
   20bb4:	4620      	mov	r0, r4
   20bb6:	f7ff fdc1 	bl	2073c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   20bba:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   20bbe:	b188      	cbz	r0, 20be4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x46>
   20bc0:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   20bc4:	f7fa fdc0 	bl	1b748 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   20bc8:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   20bcc:	f7fa ff20 	bl	1ba10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   20bd0:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   20bd4:	f7fa fefa 	bl	1b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   20bd8:	2800      	cmp	r0, #0
   20bda:	bf1c      	itt	ne
   20bdc:	2000      	movne	r0, #0
   20bde:	f884 0128 	strbne.w	r0, [r4, #296]	; 0x128
   20be2:	d001      	beq.n	20be8 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x4a>
   20be4:	2000      	movs	r0, #0
   20be6:	bd10      	pop	{r4, pc}
   20be8:	f240 2105 	movw	r1, #517	; 0x205
   20bec:	2030      	movs	r0, #48	; 0x30
   20bee:	f7ec f94b 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00020bf2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   20bf2:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
   20bf6:	4770      	bx	lr

00020bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   20bf8:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
   20bfc:	4770      	bx	lr

00020bfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
   20bfe:	b570      	push	{r4, r5, r6, lr}
   20c00:	4604      	mov	r4, r0
   20c02:	f890 030b 	ldrb.w	r0, [r0, #779]	; 0x30b
   20c06:	b082      	sub	sp, #8
   20c08:	2800      	cmp	r0, #0
   20c0a:	bf07      	ittee	eq
   20c0c:	f894 033c 	ldrbeq.w	r0, [r4, #828]	; 0x33c
   20c10:	2803      	cmpeq	r0, #3
   20c12:	b002      	addne	sp, #8
   20c14:	bd70      	popne	{r4, r5, r6, pc}
   20c16:	f7fb fa41 	bl	1c09c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   20c1a:	f8d4 3370 	ldr.w	r3, [r4, #880]	; 0x370
   20c1e:	f8d4 2374 	ldr.w	r2, [r4, #884]	; 0x374
   20c22:	1ac0      	subs	r0, r0, r3
   20c24:	eb61 0302 	sbc.w	r3, r1, r2
   20c28:	2200      	movs	r2, #0
   20c2a:	4611      	mov	r1, r2
   20c2c:	1a12      	subs	r2, r2, r0
   20c2e:	4199      	sbcs	r1, r3
   20c30:	bfa4      	itt	ge
   20c32:	b002      	addge	sp, #8
   20c34:	bd70      	popge	{r4, r5, r6, pc}
   20c36:	1c41      	adds	r1, r0, #1
   20c38:	f173 0100 	sbcs.w	r1, r3, #0
   20c3c:	db04      	blt.n	20c48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
   20c3e:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
   20c42:	2030      	movs	r0, #48	; 0x30
   20c44:	f7ec f920 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20c48:	6961      	ldr	r1, [r4, #20]
   20c4a:	2900      	cmp	r1, #0
   20c4c:	bf14      	ite	ne
   20c4e:	fbb0 f0f1 	udivne	r0, r0, r1
   20c52:	2000      	moveq	r0, #0
   20c54:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	; 0xbc
   20c58:	1c40      	adds	r0, r0, #1
   20c5a:	4408      	add	r0, r1
   20c5c:	f8a4 034c 	strh.w	r0, [r4, #844]	; 0x34c
   20c60:	f8b4 0304 	ldrh.w	r0, [r4, #772]	; 0x304
   20c64:	f8b4 134c 	ldrh.w	r1, [r4, #844]	; 0x34c
   20c68:	1a40      	subs	r0, r0, r1
   20c6a:	b200      	sxth	r0, r0
   20c6c:	2800      	cmp	r0, #0
   20c6e:	bfdc      	itt	le
   20c70:	b002      	addle	sp, #8
   20c72:	bd70      	pople	{r4, r5, r6, pc}
   20c74:	f894 0384 	ldrb.w	r0, [r4, #900]	; 0x384
   20c78:	f7fa fd66 	bl	1b748 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   20c7c:	2800      	cmp	r0, #0
   20c7e:	bf04      	itt	eq
   20c80:	b002      	addeq	sp, #8
   20c82:	bd70      	popeq	{r4, r5, r6, pc}
   20c84:	20ff      	movs	r0, #255	; 0xff
   20c86:	f884 0351 	strb.w	r0, [r4, #849]	; 0x351
   20c8a:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
   20c8e:	f8b4 10f6 	ldrh.w	r1, [r4, #246]	; 0xf6
   20c92:	ae01      	add	r6, sp, #4
   20c94:	1a40      	subs	r0, r0, r1
   20c96:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	; 0xbc
   20c9a:	1e40      	subs	r0, r0, #1
   20c9c:	4408      	add	r0, r1
   20c9e:	b285      	uxth	r5, r0
   20ca0:	e019      	b.n	20cd6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd8>
   20ca2:	9600      	str	r6, [sp, #0]
   20ca4:	f8b4 134c 	ldrh.w	r1, [r4, #844]	; 0x34c
   20ca8:	2300      	movs	r3, #0
   20caa:	2201      	movs	r2, #1
   20cac:	4620      	mov	r0, r4
   20cae:	f7f2 ff39 	bl	13b24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ac>
   20cb2:	2800      	cmp	r0, #0
   20cb4:	bf04      	itt	eq
   20cb6:	b002      	addeq	sp, #8
   20cb8:	bd70      	popeq	{r4, r5, r6, pc}
   20cba:	2801      	cmp	r0, #1
   20cbc:	d004      	beq.n	20cc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xca>
   20cbe:	f240 51f9 	movw	r1, #1529	; 0x5f9
   20cc2:	2030      	movs	r0, #48	; 0x30
   20cc4:	f7ec f8e0 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20cc8:	f8b4 034c 	ldrh.w	r0, [r4, #844]	; 0x34c
   20ccc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   20cd0:	4408      	add	r0, r1
   20cd2:	f8a4 034c 	strh.w	r0, [r4, #844]	; 0x34c
   20cd6:	f8b4 034c 	ldrh.w	r0, [r4, #844]	; 0x34c
   20cda:	1a28      	subs	r0, r5, r0
   20cdc:	b200      	sxth	r0, r0
   20cde:	2800      	cmp	r0, #0
   20ce0:	dadf      	bge.n	20ca2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa4>
   20ce2:	b002      	add	sp, #8
   20ce4:	bd70      	pop	{r4, r5, r6, pc}
   20ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ce8:	b083      	sub	sp, #12
   20cea:	0004      	movs	r4, r0
   20cec:	d00a      	beq.n	20d04 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x106>
   20cee:	2500      	movs	r5, #0
   20cf0:	2909      	cmp	r1, #9
   20cf2:	f080 80de 	bcs.w	20eb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
   20cf6:	e8df f001 	tbb	[pc, r1]
   20cfa:	1b09      	.short	0x1b09
   20cfc:	dc444949 	.word	0xdc444949
   20d00:	00d8bbd2 	.word	0x00d8bbd2
   20d04:	21cb      	movs	r1, #203	; 0xcb
   20d06:	2030      	movs	r0, #48	; 0x30
   20d08:	f7ec f8be 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20d0c:	4620      	mov	r0, r4
   20d0e:	f7f0 f82d 	bl	10d6c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   20d12:	b120      	cbz	r0, 20d1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
   20d14:	f240 2175 	movw	r1, #629	; 0x275
   20d18:	2030      	movs	r0, #48	; 0x30
   20d1a:	f7ec f8b5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20d1e:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
   20d22:	b003      	add	sp, #12
   20d24:	f2a0 101b 	subw	r0, r0, #283	; 0x11b
   20d28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20d2c:	f7fb b8ca 	b.w	1bec4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   20d30:	4620      	mov	r0, r4
   20d32:	f7ff fcd0 	bl	206d6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   20d36:	b9c0      	cbnz	r0, 20d6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
   20d38:	4620      	mov	r0, r4
   20d3a:	2100      	movs	r1, #0
   20d3c:	f7ef fe38 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   20d40:	f500 7596 	add.w	r5, r0, #300	; 0x12c
   20d44:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
   20d48:	42a8      	cmp	r0, r5
   20d4a:	d20c      	bcs.n	20d66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x168>
   20d4c:	1a28      	subs	r0, r5, r0
   20d4e:	2103      	movs	r1, #3
   20d50:	f7f9 ffea 	bl	1ad28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   20d54:	b138      	cbz	r0, 20d66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x168>
   20d56:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   20d5a:	b003      	add	sp, #12
   20d5c:	4620      	mov	r0, r4
   20d5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20d62:	f7ff bc50 	b.w	20606 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   20d66:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   20d6a:	4620      	mov	r0, r4
   20d6c:	f7f0 f820 	bl	10db0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   20d70:	2800      	cmp	r0, #0
   20d72:	bf04      	itt	eq
   20d74:	b003      	addeq	sp, #12
   20d76:	bdf0      	popeq	{r4, r5, r6, r7, pc}
   20d78:	f240 21a9 	movw	r1, #681	; 0x2a9
   20d7c:	2030      	movs	r0, #48	; 0x30
   20d7e:	f7ec f883 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20d82:	b003      	add	sp, #12
   20d84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20d88:	f7f7 befc 	b.w	18b84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   20d8c:	4620      	mov	r0, r4
   20d8e:	f7ff fca6 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   20d92:	2800      	cmp	r0, #0
   20d94:	bf08      	it	eq
   20d96:	2661      	moveq	r6, #97	; 0x61
   20d98:	d024      	beq.n	20de4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1e6>
   20d9a:	4620      	mov	r0, r4
   20d9c:	f7ff fc91 	bl	206c2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   20da0:	b930      	cbnz	r0, 20db0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
   20da2:	4620      	mov	r0, r4
   20da4:	f7ff fc9f 	bl	206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   20da8:	2800      	cmp	r0, #0
   20daa:	bf08      	it	eq
   20dac:	2650      	moveq	r6, #80	; 0x50
   20dae:	d000      	beq.n	20db2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b4>
   20db0:	2655      	movs	r6, #85	; 0x55
   20db2:	4668      	mov	r0, sp
   20db4:	f7fc fd4a 	bl	1d84c <mpsl_fem_pa_is_configured>
   20db8:	f89d 0000 	ldrb.w	r0, [sp]
   20dbc:	2800      	cmp	r0, #0
   20dbe:	bf14      	ite	ne
   20dc0:	2701      	movne	r7, #1
   20dc2:	2700      	moveq	r7, #0
   20dc4:	a801      	add	r0, sp, #4
   20dc6:	f7fc fd29 	bl	1d81c <mpsl_fem_lna_is_configured>
   20dca:	f89d 0004 	ldrb.w	r0, [sp, #4]
   20dce:	2800      	cmp	r0, #0
   20dd0:	bf18      	it	ne
   20dd2:	2001      	movne	r0, #1
   20dd4:	4338      	orrs	r0, r7
   20dd6:	bf18      	it	ne
   20dd8:	360a      	addne	r6, #10
   20dda:	f7fc fc73 	bl	1d6c4 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   20dde:	2800      	cmp	r0, #0
   20de0:	bf18      	it	ne
   20de2:	3618      	addne	r6, #24
   20de4:	f8a4 6138 	strh.w	r6, [r4, #312]	; 0x138
   20de8:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
   20dec:	2601      	movs	r6, #1
   20dee:	f884 613b 	strb.w	r6, [r4, #315]	; 0x13b
   20df2:	2100      	movs	r1, #0
   20df4:	f504 7098 	add.w	r0, r4, #304	; 0x130
   20df8:	f7fe fd58 	bl	1f8ac <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   20dfc:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   20e00:	1c40      	adds	r0, r0, #1
   20e02:	280a      	cmp	r0, #10
   20e04:	bf38      	it	cc
   20e06:	f8a4 0148 	strhcc.w	r0, [r4, #328]	; 0x148
   20e0a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   20e0e:	b138      	cbz	r0, 20e20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x222>
   20e10:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
   20e14:	1c40      	adds	r0, r0, #1
   20e16:	280a      	cmp	r0, #10
   20e18:	bf28      	it	cs
   20e1a:	f884 613a 	strbcs.w	r6, [r4, #314]	; 0x13a
   20e1e:	d202      	bcs.n	20e26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x228>
   20e20:	2002      	movs	r0, #2
   20e22:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
   20e26:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
   20e2a:	bb08      	cbnz	r0, 20e70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x272>
   20e2c:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
   20e30:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   20e34:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   20e38:	4051      	eors	r1, r2
   20e3a:	ea71 0000 	orns	r0, r1, r0
   20e3e:	d01f      	beq.n	20e80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x282>
   20e40:	4620      	mov	r0, r4
   20e42:	4629      	mov	r1, r5
   20e44:	f7ef fdb4 	bl	109b0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   20e48:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   20e4c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   20e50:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   20e54:	1840      	adds	r0, r0, r1
   20e56:	eb45 0102 	adc.w	r1, r5, r2
   20e5a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
   20e5e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   20e62:	1a10      	subs	r0, r2, r0
   20e64:	eb73 0001 	sbcs.w	r0, r3, r1
   20e68:	d50a      	bpl.n	20e80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x282>
   20e6a:	4620      	mov	r0, r4
   20e6c:	f7ef ffbe 	bl	10dec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   20e70:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   20e74:	f7fa fdaa 	bl	1b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   20e78:	f884 5128 	strb.w	r5, [r4, #296]	; 0x128
   20e7c:	b003      	add	sp, #12
   20e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e80:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
   20e84:	f504 7198 	add.w	r1, r4, #304	; 0x130
   20e88:	f7fa f93c 	bl	1b104 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   20e8c:	2800      	cmp	r0, #0
   20e8e:	bf1c      	itt	ne
   20e90:	b003      	addne	sp, #12
   20e92:	bdf0      	popne	{r4, r5, r6, r7, pc}
   20e94:	f240 618e 	movw	r1, #1678	; 0x68e
   20e98:	2030      	movs	r0, #48	; 0x30
   20e9a:	f7eb fff5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20e9e:	b003      	add	sp, #12
   20ea0:	4620      	mov	r0, r4
   20ea2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20ea6:	f7ff bbae 	b.w	20606 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   20eaa:	21eb      	movs	r1, #235	; 0xeb
   20eac:	2030      	movs	r0, #48	; 0x30
   20eae:	f7eb ffeb 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20eb2:	21ef      	movs	r1, #239	; 0xef
   20eb4:	2030      	movs	r0, #48	; 0x30
   20eb6:	f7eb ffe7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00020eba <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   20eba:	f7ec bc53 	b.w	d764 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

00020ebe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   20ebe:	2100      	movs	r1, #0
   20ec0:	f880 10c5 	strb.w	r1, [r0, #197]	; 0xc5
   20ec4:	f880 10c6 	strb.w	r1, [r0, #198]	; 0xc6
   20ec8:	f880 10c9 	strb.w	r1, [r0, #201]	; 0xc9
   20ecc:	f890 130b 	ldrb.w	r1, [r0, #779]	; 0x30b
   20ed0:	b111      	cbz	r1, 20ed8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   20ed2:	2102      	movs	r1, #2
   20ed4:	f7f2 bc6e 	b.w	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   20ed8:	2103      	movs	r1, #3
   20eda:	f7f2 bc6b 	b.w	137b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   20ede:	b510      	push	{r4, lr}
   20ee0:	4604      	mov	r4, r0
   20ee2:	6840      	ldr	r0, [r0, #4]
   20ee4:	2301      	movs	r3, #1
   20ee6:	2109      	movs	r1, #9
   20ee8:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   20eec:	30a8      	adds	r0, #168	; 0xa8
   20eee:	f7fe fbd2 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   20ef2:	2800      	cmp	r0, #0
   20ef4:	bf08      	it	eq
   20ef6:	bd10      	popeq	{r4, pc}
   20ef8:	2000      	movs	r0, #0
   20efa:	6861      	ldr	r1, [r4, #4]
   20efc:	f881 00f4 	strb.w	r0, [r1, #244]	; 0xf4
   20f00:	6861      	ldr	r1, [r4, #4]
   20f02:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
   20f06:	6861      	ldr	r1, [r4, #4]
   20f08:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   20f0c:	bd10      	pop	{r4, pc}
   20f0e:	6840      	ldr	r0, [r0, #4]
   20f10:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   20f14:	2913      	cmp	r1, #19
   20f16:	bf1c      	itt	ne
   20f18:	2002      	movne	r0, #2
   20f1a:	4770      	bxne	lr
   20f1c:	2114      	movs	r1, #20
   20f1e:	f880 10c6 	strb.w	r1, [r0, #198]	; 0xc6
   20f22:	2000      	movs	r0, #0
   20f24:	4770      	bx	lr
   20f26:	b510      	push	{r4, lr}
   20f28:	6841      	ldr	r1, [r0, #4]
   20f2a:	f891 20c6 	ldrb.w	r2, [r1, #198]	; 0xc6
   20f2e:	2a16      	cmp	r2, #22
   20f30:	d004      	beq.n	20f3c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x7e>
   20f32:	f640 011b 	movw	r1, #2075	; 0x81b
   20f36:	2031      	movs	r0, #49	; 0x31
   20f38:	f7eb ffa6 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20f3c:	2201      	movs	r2, #1
   20f3e:	f881 2105 	strb.w	r2, [r1, #261]	; 0x105
   20f42:	6840      	ldr	r0, [r0, #4]
   20f44:	2117      	movs	r1, #23
   20f46:	f880 10c6 	strb.w	r1, [r0, #198]	; 0xc6
   20f4a:	bd10      	pop	{r4, pc}
   20f4c:	f7ff ba07 	b.w	2035e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
   20f50:	b510      	push	{r4, lr}
   20f52:	4604      	mov	r4, r0
   20f54:	6840      	ldr	r0, [r0, #4]
   20f56:	2301      	movs	r3, #1
   20f58:	2100      	movs	r1, #0
   20f5a:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   20f5e:	30a8      	adds	r0, #168	; 0xa8
   20f60:	f7fe fb99 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   20f64:	b120      	cbz	r0, 20f70 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xb2>
   20f66:	6861      	ldr	r1, [r4, #4]
   20f68:	201e      	movs	r0, #30
   20f6a:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   20f6e:	bd10      	pop	{r4, pc}
   20f70:	f640 017e 	movw	r1, #2174	; 0x87e
   20f74:	2031      	movs	r0, #49	; 0x31
   20f76:	f7eb ff87 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20f7a:	b510      	push	{r4, lr}
   20f7c:	4604      	mov	r4, r0
   20f7e:	6840      	ldr	r0, [r0, #4]
   20f80:	2301      	movs	r3, #1
   20f82:	2100      	movs	r1, #0
   20f84:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   20f88:	30a8      	adds	r0, #168	; 0xa8
   20f8a:	f7fe fb84 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   20f8e:	b120      	cbz	r0, 20f9a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xdc>
   20f90:	6861      	ldr	r1, [r4, #4]
   20f92:	2010      	movs	r0, #16
   20f94:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   20f98:	bd10      	pop	{r4, pc}
   20f9a:	f640 0171 	movw	r1, #2161	; 0x871
   20f9e:	2031      	movs	r0, #49	; 0x31
   20fa0:	f7eb ff72 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20fa4:	b510      	push	{r4, lr}
   20fa6:	6841      	ldr	r1, [r0, #4]
   20fa8:	f891 20c6 	ldrb.w	r2, [r1, #198]	; 0xc6
   20fac:	2a12      	cmp	r2, #18
   20fae:	d004      	beq.n	20fba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfc>
   20fb0:	f640 0113 	movw	r1, #2067	; 0x813
   20fb4:	2031      	movs	r0, #49	; 0x31
   20fb6:	f7eb ff67 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20fba:	2201      	movs	r2, #1
   20fbc:	f881 2105 	strb.w	r2, [r1, #261]	; 0x105
   20fc0:	6840      	ldr	r0, [r0, #4]
   20fc2:	2113      	movs	r1, #19
   20fc4:	f880 10c6 	strb.w	r1, [r0, #198]	; 0xc6
   20fc8:	bd10      	pop	{r4, pc}
   20fca:	b510      	push	{r4, lr}
   20fcc:	4604      	mov	r4, r0
   20fce:	6840      	ldr	r0, [r0, #4]
   20fd0:	2301      	movs	r3, #1
   20fd2:	2100      	movs	r1, #0
   20fd4:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
   20fd8:	30a8      	adds	r0, #168	; 0xa8
   20fda:	f7fe fb5c 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   20fde:	b120      	cbz	r0, 20fea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x12c>
   20fe0:	6861      	ldr	r1, [r4, #4]
   20fe2:	2021      	movs	r0, #33	; 0x21
   20fe4:	f881 00c5 	strb.w	r0, [r1, #197]	; 0xc5
   20fe8:	bd10      	pop	{r4, pc}
   20fea:	f44f 6109 	mov.w	r1, #2192	; 0x890
   20fee:	2031      	movs	r0, #49	; 0x31
   20ff0:	f7eb ff4a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   20ff4:	b510      	push	{r4, lr}
   20ff6:	6841      	ldr	r1, [r0, #4]
   20ff8:	f891 00c6 	ldrb.w	r0, [r1, #198]	; 0xc6
   20ffc:	2823      	cmp	r0, #35	; 0x23
   20ffe:	bf11      	iteee	ne
   21000:	2800      	cmpne	r0, #0
   21002:	2024      	moveq	r0, #36	; 0x24
   21004:	f881 00c6 	strbeq.w	r0, [r1, #198]	; 0xc6
   21008:	bd10      	popeq	{r4, pc}
   2100a:	f640 0197 	movw	r1, #2199	; 0x897
   2100e:	f04f 0031 	mov.w	r0, #49	; 0x31
   21012:	f7eb ff39 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21016:	b510      	push	{r4, lr}
   21018:	6840      	ldr	r0, [r0, #4]
   2101a:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   2101e:	2917      	cmp	r1, #23
   21020:	bf02      	ittt	eq
   21022:	211b      	moveq	r1, #27
   21024:	f880 10c6 	strbeq.w	r1, [r0, #198]	; 0xc6
   21028:	bd10      	popeq	{r4, pc}
   2102a:	f640 0128 	movw	r1, #2088	; 0x828
   2102e:	2031      	movs	r0, #49	; 0x31
   21030:	f7eb ff2a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21034:	f7ff b97f 	b.w	20336 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
   21038:	b510      	push	{r4, lr}
   2103a:	6840      	ldr	r0, [r0, #4]
   2103c:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   21040:	2917      	cmp	r1, #23
   21042:	bf02      	ittt	eq
   21044:	2119      	moveq	r1, #25
   21046:	f880 10c6 	strbeq.w	r1, [r0, #198]	; 0xc6
   2104a:	bd10      	popeq	{r4, pc}
   2104c:	f640 0122 	movw	r1, #2082	; 0x822
   21050:	2031      	movs	r0, #49	; 0x31
   21052:	f7eb ff19 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21056:	b510      	push	{r4, lr}
   21058:	4604      	mov	r4, r0
   2105a:	6840      	ldr	r0, [r0, #4]
   2105c:	2301      	movs	r3, #1
   2105e:	4619      	mov	r1, r3
   21060:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
   21064:	30a8      	adds	r0, #168	; 0xa8
   21066:	f7fe fb16 	bl	1f696 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2106a:	2800      	cmp	r0, #0
   2106c:	bf18      	it	ne
   2106e:	bd10      	popne	{r4, pc}
   21070:	2008      	movs	r0, #8
   21072:	6861      	ldr	r1, [r4, #4]
   21074:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
   21078:	bd10      	pop	{r4, pc}
   2107a:	f7ff b9de 	b.w	2043a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>

0002107e <sym_WJKL6PNKBRGLYWJPK5M56X5KMOFGBVLV6LZFL2I>:
   2107e:	b138      	cbz	r0, 21090 <sym_WJKL6PNKBRGLYWJPK5M56X5KMOFGBVLV6LZFL2I+0x12>
   21080:	2801      	cmp	r0, #1
   21082:	d003      	beq.n	2108c <sym_WJKL6PNKBRGLYWJPK5M56X5KMOFGBVLV6LZFL2I+0xe>
   21084:	2802      	cmp	r0, #2
   21086:	d003      	beq.n	21090 <sym_WJKL6PNKBRGLYWJPK5M56X5KMOFGBVLV6LZFL2I+0x12>
   21088:	2803      	cmp	r0, #3
   2108a:	d103      	bne.n	21094 <sym_WJKL6PNKBRGLYWJPK5M56X5KMOFGBVLV6LZFL2I+0x16>
   2108c:	2000      	movs	r0, #0
   2108e:	4770      	bx	lr
   21090:	2001      	movs	r0, #1
   21092:	4770      	bx	lr
   21094:	b510      	push	{r4, lr}
   21096:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   2109a:	2077      	movs	r0, #119	; 0x77
   2109c:	f7eb fef4 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000210a0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
   210a0:	b530      	push	{r4, r5, lr}
   210a2:	b083      	sub	sp, #12
   210a4:	245e      	movs	r4, #94	; 0x5e
   210a6:	f7fc fb0d 	bl	1d6c4 <sym_TSTNWLRH7RAXHHT2FC4R3RPI2WC3O7TXKBYGVCI>
   210aa:	2800      	cmp	r0, #0
   210ac:	bf18      	it	ne
   210ae:	2476      	movne	r4, #118	; 0x76
   210b0:	4668      	mov	r0, sp
   210b2:	f7fc fbcb 	bl	1d84c <mpsl_fem_pa_is_configured>
   210b6:	f89d 0000 	ldrb.w	r0, [sp]
   210ba:	2800      	cmp	r0, #0
   210bc:	bf14      	ite	ne
   210be:	2501      	movne	r5, #1
   210c0:	2500      	moveq	r5, #0
   210c2:	a801      	add	r0, sp, #4
   210c4:	f7fc fbaa 	bl	1d81c <mpsl_fem_lna_is_configured>
   210c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   210cc:	2800      	cmp	r0, #0
   210ce:	bf18      	it	ne
   210d0:	2001      	movne	r0, #1
   210d2:	4328      	orrs	r0, r5
   210d4:	bf18      	it	ne
   210d6:	340a      	addne	r4, #10
   210d8:	f104 006b 	add.w	r0, r4, #107	; 0x6b
   210dc:	b003      	add	sp, #12
   210de:	bd30      	pop	{r4, r5, pc}

000210e0 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
   210e0:	f7ec bb40 	b.w	d764 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000210e4 <sym_ML7KHO26ID5IAQG4EHQEFQ7YY4WWA5LXC5AE3GI>:
   210e4:	b570      	push	{r4, r5, r6, lr}
   210e6:	460c      	mov	r4, r1
   210e8:	8f08      	ldrh	r0, [r1, #56]	; 0x38
   210ea:	2101      	movs	r1, #1
   210ec:	f7fe f801 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   210f0:	f64f 75ff 	movw	r5, #65535	; 0xffff
   210f4:	b930      	cbnz	r0, 21104 <sym_ML7KHO26ID5IAQG4EHQEFQ7YY4WWA5LXC5AE3GI+0x20>
   210f6:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   210f8:	2100      	movs	r1, #0
   210fa:	f7fd fffa 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   210fe:	2800      	cmp	r0, #0
   21100:	bf08      	it	eq
   21102:	bd70      	popeq	{r4, r5, r6, pc}
   21104:	f8a0 5156 	strh.w	r5, [r0, #342]	; 0x156
   21108:	bd70      	pop	{r4, r5, r6, pc}

0002110a <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ>:
   2110a:	b510      	push	{r4, lr}
   2110c:	7808      	ldrb	r0, [r1, #0]
   2110e:	460c      	mov	r4, r1
   21110:	b128      	cbz	r0, 2111e <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x14>
   21112:	2801      	cmp	r0, #1
   21114:	d00c      	beq.n	21130 <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x26>
   21116:	2141      	movs	r1, #65	; 0x41
   21118:	2011      	movs	r0, #17
   2111a:	f7eb feb5 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2111e:	f104 0018 	add.w	r0, r4, #24
   21122:	f001 fc55 	bl	229d0 <sym_S65COPWIAFLT7QK4B3CGHSYTM4OO4NO3OW6UHHI>
   21126:	b160      	cbz	r0, 21142 <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x38>
   21128:	2139      	movs	r1, #57	; 0x39
   2112a:	2011      	movs	r0, #17
   2112c:	f7eb feac 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21130:	f104 0018 	add.w	r0, r4, #24
   21134:	f001 fc41 	bl	229ba <sym_LIFN2Y3GE7UOQ2L3AQIJRF3IQCD3MRRIZIOEAJY>
   21138:	b118      	cbz	r0, 21142 <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x38>
   2113a:	213d      	movs	r1, #61	; 0x3d
   2113c:	2011      	movs	r0, #17
   2113e:	f7eb fea3 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21142:	6e20      	ldr	r0, [r4, #96]	; 0x60
   21144:	2800      	cmp	r0, #0
   21146:	bf08      	it	eq
   21148:	bd10      	popeq	{r4, pc}
   2114a:	6801      	ldr	r1, [r0, #0]
   2114c:	6621      	str	r1, [r4, #96]	; 0x60
   2114e:	f830 0c83 	ldrh.w	r0, [r0, #-131]
   21152:	2108      	movs	r1, #8
   21154:	f7ec f9d4 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   21158:	b118      	cbz	r0, 21162 <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x58>
   2115a:	214b      	movs	r1, #75	; 0x4b
   2115c:	2011      	movs	r0, #17
   2115e:	f7eb fe93 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   21162:	6e20      	ldr	r0, [r4, #96]	; 0x60
   21164:	2800      	cmp	r0, #0
   21166:	d1f0      	bne.n	2114a <sym_DTWCF5KCRWOLS35FS4SDTLGYCHZTH2WSSG3HOYQ+0x40>
   21168:	bd10      	pop	{r4, pc}

0002116a <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y>:
   2116a:	b510      	push	{r4, lr}
   2116c:	4604      	mov	r4, r0
   2116e:	6848      	ldr	r0, [r1, #4]
   21170:	b082      	sub	sp, #8
   21172:	2107      	movs	r1, #7
   21174:	f8b0 0156 	ldrh.w	r0, [r0, #342]	; 0x156
   21178:	f7fd ffbb 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2117c:	b1d0      	cbz	r0, 211b4 <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y+0x4a>
   2117e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   21180:	2800      	cmp	r0, #0
   21182:	bf18      	it	ne
   21184:	f1b0 00bf 	subsne.w	r0, r0, #191	; 0xbf
   21188:	d019      	beq.n	211be <sym_YLWMRLNANVVW4ZQEHNNCF7HKVQD7RQVYQHK7H3Y+0x54>
   2118a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2118c:	9a00      	ldr	r2, [sp, #0]
   2118e:	f361 0217 	bfi	r2, r1, #0, #24
   21192:	9200      	str	r2, [sp, #0]
   21194:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   21196:	f8dd 2002 	ldr.w	r2, [sp, #2]
   2119a:	f361 221f 	bfi	r2, r1, #8, #24
   2119e:	f8cd 2002 	str.w	r2, [sp, #2]
   211a2:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
   211a4:	f8ad 0006 	strh.w	r0, [sp, #6]
   211a8:	4669      	mov	r1, sp
   211aa:	4620      	mov	r0, r4
   211ac:	f7fe fdac 	bl	1fd08 <sym_HNZ6YNBDEHFBFGO4FGYZWJ2ZIELRZCSFTGHBNAA>
   211b0:	b002      	add	sp, #8
   211b2:	bd10      	pop	{r4, pc}
   211b4:	f44f 71c2 	mov.w	r1, #388	; 0x184
   211b8:	2013      	movs	r0, #19
   211ba:	f7eb fe65 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   211be:	f44f 71c3 	mov.w	r1, #390	; 0x186
   211c2:	2013      	movs	r0, #19
   211c4:	f7eb fe60 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000211c8 <sym_UEPRO7A35Z75LB2PPJ4VSGI4I7C3AOKO4ZR5U5A>:
   211c8:	b508      	push	{r3, lr}
   211ca:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
   211ce:	f88d 2000 	strb.w	r2, [sp]
   211d2:	f891 204b 	ldrb.w	r2, [r1, #75]	; 0x4b
   211d6:	f88d 2001 	strb.w	r2, [sp, #1]
   211da:	f891 104d 	ldrb.w	r1, [r1, #77]	; 0x4d
   211de:	f88d 1002 	strb.w	r1, [sp, #2]
   211e2:	4669      	mov	r1, sp
   211e4:	f7fe fda9 	bl	1fd3a <sym_KNRZBIFY2P43T7N5353YRUKMVJ4HQK3VLP7QLXI>
   211e8:	bd08      	pop	{r3, pc}

000211ea <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
   211ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   211ee:	6852      	ldr	r2, [r2, #4]
   211f0:	460c      	mov	r4, r1
   211f2:	2101      	movs	r1, #1
   211f4:	2302      	movs	r3, #2
   211f6:	2600      	movs	r6, #0
   211f8:	f502 75ac 	add.w	r5, r2, #344	; 0x158
   211fc:	f102 08a8 	add.w	r8, r2, #168	; 0xa8
   21200:	f04f 0c03 	mov.w	ip, #3
   21204:	2823      	cmp	r0, #35	; 0x23
   21206:	d009      	beq.n	2121c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x32>
   21208:	2824      	cmp	r0, #36	; 0x24
   2120a:	d027      	beq.n	2125c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
   2120c:	2825      	cmp	r0, #37	; 0x25
   2120e:	d052      	beq.n	212b6 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xcc>
   21210:	f44f 718d 	mov.w	r1, #282	; 0x11a
   21214:	f04f 0078 	mov.w	r0, #120	; 0x78
   21218:	f7eb fe36 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2121c:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
   21220:	f010 0f01 	tst.w	r0, #1
   21224:	bf0a      	itet	eq
   21226:	4606      	moveq	r6, r0
   21228:	4631      	movne	r1, r6
   2122a:	f016 0f02 	tsteq.w	r6, #2
   2122e:	d00a      	beq.n	21246 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5c>
   21230:	7120      	strb	r0, [r4, #4]
   21232:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   21236:	7160      	strb	r0, [r4, #5]
   21238:	eb02 0041 	add.w	r0, r2, r1, lsl #1
   2123c:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
   21240:	71a0      	strb	r0, [r4, #6]
   21242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21246:	f010 0f04 	tst.w	r0, #4
   2124a:	bf18      	it	ne
   2124c:	4619      	movne	r1, r3
   2124e:	d1ef      	bne.n	21230 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x46>
   21250:	f010 0f08 	tst.w	r0, #8
   21254:	bf18      	it	ne
   21256:	4661      	movne	r1, ip
   21258:	d1ea      	bne.n	21230 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x46>
   2125a:	e04d      	b.n	212f8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x10e>
   2125c:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
   21260:	f010 0f01 	tst.w	r0, #1
   21264:	bf14      	ite	ne
   21266:	4631      	movne	r1, r6
   21268:	f010 0f02 	tsteq.w	r0, #2
   2126c:	d018      	beq.n	212a0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xb6>
   2126e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
   21272:	f100 078c 	add.w	r7, r0, #140	; 0x8c
   21276:	f898 001d 	ldrb.w	r0, [r8, #29]
   2127a:	2829      	cmp	r0, #41	; 0x29
   2127c:	bf16      	itet	ne
   2127e:	f8d8 0008 	ldrne.w	r0, [r8, #8]
   21282:	20ff      	moveq	r0, #255	; 0xff
   21284:	f7ef f9a4 	blne	105d0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
   21288:	7839      	ldrb	r1, [r7, #0]
   2128a:	7121      	strb	r1, [r4, #4]
   2128c:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
   21290:	7161      	strb	r1, [r4, #5]
   21292:	7879      	ldrb	r1, [r7, #1]
   21294:	71a1      	strb	r1, [r4, #6]
   21296:	71e0      	strb	r0, [r4, #7]
   21298:	f885 6046 	strb.w	r6, [r5, #70]	; 0x46
   2129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   212a0:	f010 0f04 	tst.w	r0, #4
   212a4:	bf18      	it	ne
   212a6:	4619      	movne	r1, r3
   212a8:	d1e1      	bne.n	2126e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x84>
   212aa:	f010 0f08 	tst.w	r0, #8
   212ae:	bf18      	it	ne
   212b0:	4661      	movne	r1, ip
   212b2:	d1dc      	bne.n	2126e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x84>
   212b4:	e020      	b.n	212f8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x10e>
   212b6:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
   212ba:	f010 0f01 	tst.w	r0, #1
   212be:	bf0a      	itet	eq
   212c0:	4606      	moveq	r6, r0
   212c2:	4631      	movne	r1, r6
   212c4:	f016 0f02 	tsteq.w	r6, #2
   212c8:	d00c      	beq.n	212e4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xfa>
   212ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   212ce:	7120      	strb	r0, [r4, #4]
   212d0:	f811 0f8c 	ldrb.w	r0, [r1, #140]!
   212d4:	7160      	strb	r0, [r4, #5]
   212d6:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
   212da:	71a0      	strb	r0, [r4, #6]
   212dc:	7848      	ldrb	r0, [r1, #1]
   212de:	71e0      	strb	r0, [r4, #7]
   212e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   212e4:	f010 0f04 	tst.w	r0, #4
   212e8:	bf18      	it	ne
   212ea:	4619      	movne	r1, r3
   212ec:	d1ed      	bne.n	212ca <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xe0>
   212ee:	f010 0f08 	tst.w	r0, #8
   212f2:	bf18      	it	ne
   212f4:	4661      	movne	r1, ip
   212f6:	d1e8      	bne.n	212ca <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0xe0>
   212f8:	213c      	movs	r1, #60	; 0x3c
   212fa:	2078      	movs	r0, #120	; 0x78
   212fc:	f7eb fdc4 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00021300 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
   21300:	2801      	cmp	r0, #1
   21302:	bf04      	itt	eq
   21304:	2000      	moveq	r0, #0
   21306:	4770      	bxeq	lr
   21308:	2802      	cmp	r0, #2
   2130a:	bf04      	itt	eq
   2130c:	2001      	moveq	r0, #1
   2130e:	4770      	bxeq	lr
   21310:	2804      	cmp	r0, #4
   21312:	bf04      	itt	eq
   21314:	2003      	moveq	r0, #3
   21316:	4770      	bxeq	lr
   21318:	2808      	cmp	r0, #8
   2131a:	bf04      	itt	eq
   2131c:	2002      	moveq	r0, #2
   2131e:	4770      	bxeq	lr
   21320:	b510      	push	{r4, lr}
   21322:	f240 2162 	movw	r1, #610	; 0x262
   21326:	2078      	movs	r0, #120	; 0x78
   21328:	f7eb fdae 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0002132c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
   2132c:	b570      	push	{r4, r5, r6, lr}
   2132e:	6844      	ldr	r4, [r0, #4]
   21330:	2217      	movs	r2, #23
   21332:	f504 75ac 	add.w	r5, r4, #344	; 0x158
   21336:	2100      	movs	r1, #0
   21338:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   2133c:	f001 ff4f 	bl	231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   21340:	2000      	movs	r0, #0
   21342:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   21346:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
   2134a:	f8a5 0047 	strh.w	r0, [r5, #71]	; 0x47
   2134e:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
   21352:	207f      	movs	r0, #127	; 0x7f
   21354:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   21358:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
   2135c:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
   21360:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
   21364:	f994 1072 	ldrsb.w	r1, [r4, #114]	; 0x72
   21368:	4620      	mov	r0, r4
   2136a:	f000 f87e 	bl	2146a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
   2136e:	20ff      	movs	r0, #255	; 0xff
   21370:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
   21374:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
   21378:	f884 009e 	strb.w	r0, [r4, #158]	; 0x9e
   2137c:	f884 009f 	strb.w	r0, [r4, #159]	; 0x9f
   21380:	bd70      	pop	{r4, r5, r6, pc}

00021382 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
   21382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21386:	461c      	mov	r4, r3
   21388:	4615      	mov	r5, r2
   2138a:	4606      	mov	r6, r0
   2138c:	460f      	mov	r7, r1
   2138e:	f7f6 f9e3 	bl	17758 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   21392:	1e7a      	subs	r2, r7, #1
   21394:	2301      	movs	r3, #1
   21396:	f002 09ff 	and.w	r9, r2, #255	; 0xff
   2139a:	f04f 0c00 	mov.w	ip, #0
   2139e:	fa03 f702 	lsl.w	r7, r3, r2
   213a2:	46e0      	mov	r8, ip
   213a4:	f1b9 0f04 	cmp.w	r9, #4
   213a8:	d213      	bcs.n	213d2 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
   213aa:	ea4f 2910 	mov.w	r9, r0, lsr #8
   213ae:	ea49 6801 	orr.w	r8, r9, r1, lsl #24
   213b2:	469c      	mov	ip, r3
   213b4:	f018 0f01 	tst.w	r8, #1
   213b8:	bf18      	it	ne
   213ba:	f04f 0c03 	movne.w	ip, #3
   213be:	0ac0      	lsrs	r0, r0, #11
   213c0:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   213c4:	f010 0f01 	tst.w	r0, #1
   213c8:	bf18      	it	ne
   213ca:	f04c 0c0c 	orrne.w	ip, ip, #12
   213ce:	f007 08ff 	and.w	r8, r7, #255	; 0xff
   213d2:	ea18 0f0c 	tst.w	r8, ip
   213d6:	bf04      	itt	eq
   213d8:	2011      	moveq	r0, #17
   213da:	e8bd 83f8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   213de:	6876      	ldr	r6, [r6, #4]
   213e0:	f106 00a8 	add.w	r0, r6, #168	; 0xa8
   213e4:	f896 111a 	ldrb.w	r1, [r6, #282]	; 0x11a
   213e8:	0849      	lsrs	r1, r1, #1
   213ea:	f011 0f01 	tst.w	r1, #1
   213ee:	d039      	beq.n	21464 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0xe2>
   213f0:	f8d0 1072 	ldr.w	r1, [r0, #114]	; 0x72
   213f4:	f8d0 006e 	ldr.w	r0, [r0, #110]	; 0x6e
   213f8:	f002 09ff 	and.w	r9, r2, #255	; 0xff
   213fc:	f04f 0c00 	mov.w	ip, #0
   21400:	46e0      	mov	r8, ip
   21402:	f1b9 0f04 	cmp.w	r9, #4
   21406:	d214      	bcs.n	21432 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0xb0>
   21408:	ea4f 2910 	mov.w	r9, r0, lsr #8
   2140c:	ea49 6801 	orr.w	r8, r9, r1, lsl #24
   21410:	f04f 0c01 	mov.w	ip, #1
   21414:	f018 0f01 	tst.w	r8, #1
   21418:	bf18      	it	ne
   2141a:	f04f 0c03 	movne.w	ip, #3
   2141e:	0ac0      	lsrs	r0, r0, #11
   21420:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   21424:	f010 0f01 	tst.w	r0, #1
   21428:	bf18      	it	ne
   2142a:	f04c 0c0c 	orrne.w	ip, ip, #12
   2142e:	f007 08ff 	and.w	r8, r7, #255	; 0xff
   21432:	ea18 0f0c 	tst.w	r8, ip
   21436:	d015      	beq.n	21464 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0xe2>
   21438:	f896 11a1 	ldrb.w	r1, [r6, #417]	; 0x1a1
   2143c:	f206 109f 	addw	r0, r6, #415	; 0x19f
   21440:	f88d 1000 	strb.w	r1, [sp]
   21444:	f89d 1000 	ldrb.w	r1, [sp]
   21448:	2900      	cmp	r1, #0
   2144a:	bf1c      	itt	ne
   2144c:	203a      	movne	r0, #58	; 0x3a
   2144e:	e8bd 83f8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21452:	1c81      	adds	r1, r0, #2
   21454:	700c      	strb	r4, [r1, #0]
   21456:	fa03 f102 	lsl.w	r1, r3, r2
   2145a:	7001      	strb	r1, [r0, #0]
   2145c:	7045      	strb	r5, [r0, #1]
   2145e:	2000      	movs	r0, #0
   21460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21464:	201a      	movs	r0, #26
   21466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002146a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
   2146a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2146c:	460e      	mov	r6, r1
   2146e:	4604      	mov	r4, r0
   21470:	207f      	movs	r0, #127	; 0x7f
   21472:	2301      	movs	r3, #1
   21474:	f640 1288 	movw	r2, #2440	; 0x988
   21478:	4669      	mov	r1, sp
   2147a:	f7fc f9ed 	bl	1d858 <mpsl_fem_tx_power_split>
   2147e:	4607      	mov	r7, r0
   21480:	2500      	movs	r5, #0
   21482:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21486:	2301      	movs	r3, #1
   21488:	f640 1288 	movw	r2, #2440	; 0x988
   2148c:	4669      	mov	r1, sp
   2148e:	f7fc f9e3 	bl	1d858 <mpsl_fem_tx_power_split>
   21492:	4286      	cmp	r6, r0
   21494:	bf08      	it	eq
   21496:	2501      	moveq	r5, #1
   21498:	42be      	cmp	r6, r7
   2149a:	bf08      	it	eq
   2149c:	f045 0502 	orreq.w	r5, r5, #2
   214a0:	f7f6 f95a 	bl	17758 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   214a4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   214a8:	2201      	movs	r2, #1
   214aa:	ea4c 6301 	orr.w	r3, ip, r1, lsl #24
   214ae:	f013 0f01 	tst.w	r3, #1
   214b2:	bf18      	it	ne
   214b4:	2203      	movne	r2, #3
   214b6:	0ac0      	lsrs	r0, r0, #11
   214b8:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
   214bc:	f010 0f01 	tst.w	r0, #1
   214c0:	bf18      	it	ne
   214c2:	f042 020c 	orrne.w	r2, r2, #12
   214c6:	f012 0f01 	tst.w	r2, #1
   214ca:	bf1c      	itt	ne
   214cc:	f884 608d 	strbne.w	r6, [r4, #141]	; 0x8d
   214d0:	f884 508c 	strbne.w	r5, [r4, #140]	; 0x8c
   214d4:	f012 0f02 	tst.w	r2, #2
   214d8:	bf1c      	itt	ne
   214da:	f884 608f 	strbne.w	r6, [r4, #143]	; 0x8f
   214de:	f884 508e 	strbne.w	r5, [r4, #142]	; 0x8e
   214e2:	f012 0f04 	tst.w	r2, #4
   214e6:	bf1c      	itt	ne
   214e8:	f884 6091 	strbne.w	r6, [r4, #145]	; 0x91
   214ec:	f884 5090 	strbne.w	r5, [r4, #144]	; 0x90
   214f0:	f012 0f08 	tst.w	r2, #8
   214f4:	bf1c      	itt	ne
   214f6:	f884 6093 	strbne.w	r6, [r4, #147]	; 0x93
   214fa:	f884 5092 	strbne.w	r5, [r4, #146]	; 0x92
   214fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021500 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
   21500:	b510      	push	{r4, lr}
   21502:	2901      	cmp	r1, #1
   21504:	bf08      	it	eq
   21506:	2100      	moveq	r1, #0
   21508:	d010      	beq.n	2152c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   2150a:	2902      	cmp	r1, #2
   2150c:	bf08      	it	eq
   2150e:	2101      	moveq	r1, #1
   21510:	d00c      	beq.n	2152c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   21512:	2904      	cmp	r1, #4
   21514:	bf08      	it	eq
   21516:	2103      	moveq	r1, #3
   21518:	d008      	beq.n	2152c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   2151a:	2908      	cmp	r1, #8
   2151c:	bf08      	it	eq
   2151e:	2102      	moveq	r1, #2
   21520:	d004      	beq.n	2152c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x2c>
   21522:	f240 2162 	movw	r1, #610	; 0x262
   21526:	2078      	movs	r0, #120	; 0x78
   21528:	f7eb fcae 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2152c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   21530:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
   21534:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
   21538:	bd10      	pop	{r4, pc}
   2153a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   2153e:	f001 0107 	and.w	r1, r1, #7
   21542:	7800      	ldrb	r0, [r0, #0]
   21544:	40c8      	lsrs	r0, r1
   21546:	f000 0001 	and.w	r0, r0, #1
   2154a:	4770      	bx	lr
   2154c:	b118      	cbz	r0, 21556 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x56>
   2154e:	2802      	cmp	r0, #2
   21550:	d001      	beq.n	21556 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x56>
   21552:	2001      	movs	r0, #1
   21554:	4770      	bx	lr
   21556:	2000      	movs	r0, #0
   21558:	4770      	bx	lr

0002155a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   2155a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   2155c:	4604      	mov	r4, r0
   2155e:	7880      	ldrb	r0, [r0, #2]
   21560:	2500      	movs	r5, #0
   21562:	281a      	cmp	r0, #26
   21564:	d024      	beq.n	215b0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   21566:	dc0e      	bgt.n	21586 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   21568:	2816      	cmp	r0, #22
   2156a:	d232      	bcs.n	215d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   2156c:	e8df f000 	tbb	[pc, r0]
   21570:	31313131 	.word	0x31313131
   21574:	31312031 	.word	0x31312031
   21578:	31313131 	.word	0x31313131
   2157c:	31313131 	.word	0x31313131
   21580:	20313131 	.word	0x20313131
   21584:	2020      	.short	0x2020
   21586:	282a      	cmp	r0, #42	; 0x2a
   21588:	d023      	beq.n	215d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   2158a:	dc0b      	bgt.n	215a4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   2158c:	f1a0 001e 	sub.w	r0, r0, #30
   21590:	280c      	cmp	r0, #12
   21592:	d21e      	bcs.n	215d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   21594:	e8df f000 	tbb	[pc, r0]
   21598:	1d1d1d1d 	.word	0x1d1d1d1d
   2159c:	1d1d1d1d 	.word	0x1d1d1d1d
   215a0:	0c1d1d1d 	.word	0x0c1d1d1d
   215a4:	383a      	subs	r0, #58	; 0x3a
   215a6:	2802      	cmp	r0, #2
   215a8:	d213      	bcs.n	215d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   215aa:	e8df f000 	tbb	[pc, r0]
   215ae:	0112      	.short	0x0112
   215b0:	8820      	ldrh	r0, [r4, #0]
   215b2:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   215b6:	d20c      	bcs.n	215d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x78>
   215b8:	4669      	mov	r1, sp
   215ba:	f7fe f821 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   215be:	b150      	cbz	r0, 215d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x7c>
   215c0:	8820      	ldrh	r0, [r4, #0]
   215c2:	2108      	movs	r1, #8
   215c4:	f7fd fd95 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   215c8:	b1e8      	cbz	r0, 21606 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0xac>
   215ca:	4621      	mov	r1, r4
   215cc:	f000 ff3f 	bl	2244e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x31a>
   215d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   215d2:	2012      	movs	r0, #18
   215d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   215d6:	9801      	ldr	r0, [sp, #4]
   215d8:	4669      	mov	r1, sp
   215da:	f890 2158 	ldrb.w	r2, [r0, #344]	; 0x158
   215de:	f88d 2008 	strb.w	r2, [sp, #8]
   215e2:	9a02      	ldr	r2, [sp, #8]
   215e4:	9202      	str	r2, [sp, #8]
   215e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   215ea:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   215ee:	b10a      	cbz	r2, 215f4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x9a>
   215f0:	200c      	movs	r0, #12
   215f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   215f4:	78a2      	ldrb	r2, [r4, #2]
   215f6:	7042      	strb	r2, [r0, #1]
   215f8:	22ff      	movs	r2, #255	; 0xff
   215fa:	7002      	strb	r2, [r0, #0]
   215fc:	4608      	mov	r0, r1
   215fe:	f7fe fcfc 	bl	1fffa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   21602:	4628      	mov	r0, r5
   21604:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   21606:	2002      	movs	r0, #2
   21608:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0002160a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   2160a:	b510      	push	{r4, lr}
   2160c:	4604      	mov	r4, r0
   2160e:	f7f5 ff97 	bl	17540 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>
   21612:	b108      	cbz	r0, 21618 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   21614:	200c      	movs	r0, #12
   21616:	bd10      	pop	{r4, pc}
   21618:	7820      	ldrb	r0, [r4, #0]
   2161a:	b128      	cbz	r0, 21628 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   2161c:	2801      	cmp	r0, #1
   2161e:	d003      	beq.n	21628 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1e>
   21620:	28ff      	cmp	r0, #255	; 0xff
   21622:	d00b      	beq.n	2163c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x32>
   21624:	2012      	movs	r0, #18
   21626:	bd10      	pop	{r4, pc}
   21628:	f7ff ff90 	bl	2154c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x4c>
   2162c:	1c61      	adds	r1, r4, #1
   2162e:	f7ed fc7f 	bl	ef30 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   21632:	b108      	cbz	r0, 21638 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2e>
   21634:	2000      	movs	r0, #0
   21636:	bd10      	pop	{r4, pc}
   21638:	2007      	movs	r0, #7
   2163a:	bd10      	pop	{r4, pc}
   2163c:	2001      	movs	r0, #1
   2163e:	f7ed fcb3 	bl	efa8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   21642:	e7f7      	b.n	21634 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>

00021644 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   21644:	b510      	push	{r4, lr}
   21646:	f7f5 ff7b 	bl	17540 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>
   2164a:	b108      	cbz	r0, 21650 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   2164c:	200c      	movs	r0, #12
   2164e:	bd10      	pop	{r4, pc}
   21650:	f7ed fcb0 	bl	efb4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   21654:	2000      	movs	r0, #0
   21656:	bd10      	pop	{r4, pc}

00021658 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
   21658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2165c:	4606      	mov	r6, r0
   2165e:	f000 fd2a 	bl	220b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
   21662:	2800      	cmp	r0, #0
   21664:	d112      	bne.n	2168c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   21666:	8830      	ldrh	r0, [r6, #0]
   21668:	2100      	movs	r1, #0
   2166a:	f7fd fd42 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2166e:	0004      	movs	r4, r0
   21670:	d00e      	beq.n	21690 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   21672:	f000 ff52 	bl	2251a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e6>
   21676:	b158      	cbz	r0, 21690 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
   21678:	f894 0334 	ldrb.w	r0, [r4, #820]	; 0x334
   2167c:	f88d 0000 	strb.w	r0, [sp]
   21680:	9800      	ldr	r0, [sp, #0]
   21682:	9000      	str	r0, [sp, #0]
   21684:	f89d 0000 	ldrb.w	r0, [sp]
   21688:	b120      	cbz	r0, 21694 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
   2168a:	203a      	movs	r0, #58	; 0x3a
   2168c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21690:	2002      	movs	r0, #2
   21692:	e7fb      	b.n	2168c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   21694:	f04f 0800 	mov.w	r8, #0
   21698:	88b0      	ldrh	r0, [r6, #4]
   2169a:	f7fd ffc9 	bl	1f630 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   2169e:	4605      	mov	r5, r0
   216a0:	4601      	mov	r1, r0
   216a2:	2005      	movs	r0, #5
   216a4:	f7fe f95e 	bl	1f964 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   216a8:	4607      	mov	r7, r0
   216aa:	4629      	mov	r1, r5
   216ac:	2008      	movs	r0, #8
   216ae:	f7fe f959 	bl	1f964 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   216b2:	42b8      	cmp	r0, r7
   216b4:	d301      	bcc.n	216ba <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
   216b6:	42af      	cmp	r7, r5
   216b8:	d301      	bcc.n	216be <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
   216ba:	2012      	movs	r0, #18
   216bc:	e7e6      	b.n	2168c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   216be:	f641 504c 	movw	r0, #7500	; 0x1d4c
   216c2:	4285      	cmp	r5, r0
   216c4:	d209      	bcs.n	216da <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
   216c6:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
   216ca:	2802      	cmp	r0, #2
   216cc:	d103      	bne.n	216d6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x7e>
   216ce:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   216d2:	2802      	cmp	r0, #2
   216d4:	d001      	beq.n	216da <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x82>
   216d6:	200c      	movs	r0, #12
   216d8:	e7d8      	b.n	2168c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
   216da:	f8a4 7338 	strh.w	r7, [r4, #824]	; 0x338
   216de:	e9c4 85cf 	strd	r8, r5, [r4, #828]	; 0x33c
   216e2:	88f0      	ldrh	r0, [r6, #6]
   216e4:	f8a4 0344 	strh.w	r0, [r4, #836]	; 0x344
   216e8:	8930      	ldrh	r0, [r6, #8]
   216ea:	f8a4 0346 	strh.w	r0, [r4, #838]	; 0x346
   216ee:	f504 744d 	add.w	r4, r4, #820	; 0x334
   216f2:	20ff      	movs	r0, #255	; 0xff
   216f4:	7020      	strb	r0, [r4, #0]
   216f6:	2000      	movs	r0, #0
   216f8:	e7c8      	b.n	2168c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

000216fa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   216fa:	b510      	push	{r4, lr}
   216fc:	460b      	mov	r3, r1
   216fe:	2201      	movs	r2, #1
   21700:	f100 0110 	add.w	r1, r0, #16
   21704:	f7ed fd98 	bl	f238 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   21708:	2000      	movs	r0, #0
   2170a:	bd10      	pop	{r4, pc}

0002170c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   2170c:	b510      	push	{r4, lr}
   2170e:	8800      	ldrh	r0, [r0, #0]
   21710:	2101      	movs	r1, #1
   21712:	f7fd fcee 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21716:	b118      	cbz	r0, 21720 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   21718:	f890 13b8 	ldrb.w	r1, [r0, #952]	; 0x3b8
   2171c:	b111      	cbz	r1, 21724 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   2171e:	e007      	b.n	21730 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   21720:	2002      	movs	r0, #2
   21722:	bd10      	pop	{r4, pc}
   21724:	f890 10c6 	ldrb.w	r1, [r0, #198]	; 0xc6
   21728:	2916      	cmp	r1, #22
   2172a:	d003      	beq.n	21734 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   2172c:	2917      	cmp	r1, #23
   2172e:	d001      	beq.n	21734 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   21730:	200c      	movs	r0, #12
   21732:	bd10      	pop	{r4, pc}
   21734:	2102      	movs	r1, #2
   21736:	f880 13b8 	strb.w	r1, [r0, #952]	; 0x3b8
   2173a:	2000      	movs	r0, #0
   2173c:	bd10      	pop	{r4, pc}

0002173e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   2173e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21740:	4605      	mov	r5, r0
   21742:	8800      	ldrh	r0, [r0, #0]
   21744:	2101      	movs	r1, #1
   21746:	f7fd fcd4 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2174a:	0004      	movs	r4, r0
   2174c:	d003      	beq.n	21756 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   2174e:	f894 03b8 	ldrb.w	r0, [r4, #952]	; 0x3b8
   21752:	b110      	cbz	r0, 2175a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   21754:	e011      	b.n	2177a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   21756:	2002      	movs	r0, #2
   21758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2175a:	f894 00c6 	ldrb.w	r0, [r4, #198]	; 0xc6
   2175e:	2816      	cmp	r0, #22
   21760:	d001      	beq.n	21766 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   21762:	2817      	cmp	r0, #23
   21764:	d109      	bne.n	2177a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   21766:	f894 03ec 	ldrb.w	r0, [r4, #1004]	; 0x3ec
   2176a:	f88d 0000 	strb.w	r0, [sp]
   2176e:	9800      	ldr	r0, [sp, #0]
   21770:	9000      	str	r0, [sp, #0]
   21772:	f89d 0000 	ldrb.w	r0, [sp]
   21776:	2601      	movs	r6, #1
   21778:	b108      	cbz	r0, 2177e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   2177a:	200c      	movs	r0, #12
   2177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2177e:	2210      	movs	r2, #16
   21780:	1ca9      	adds	r1, r5, #2
   21782:	f204 30b9 	addw	r0, r4, #953	; 0x3b9
   21786:	f001 fcb0 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   2178a:	f884 63b8 	strb.w	r6, [r4, #952]	; 0x3b8
   2178e:	2000      	movs	r0, #0
   21790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021792 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   21792:	b510      	push	{r4, lr}
   21794:	2108      	movs	r1, #8
   21796:	f7eb fc35 	bl	d004 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   2179a:	2000      	movs	r0, #0
   2179c:	bd10      	pop	{r4, pc}

0002179e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   2179e:	b510      	push	{r4, lr}
   217a0:	4604      	mov	r4, r0
   217a2:	f7f5 fd97 	bl	172d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
   217a6:	f7fe ffa2 	bl	206ee <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   217aa:	f7ed feff 	bl	f5ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   217ae:	7020      	strb	r0, [r4, #0]
   217b0:	2000      	movs	r0, #0
   217b2:	bd10      	pop	{r4, pc}

000217b4 <sym_HN6JPFYV5RALEY5SK42AILWQ3BESLOSWO6JLUAY>:
   217b4:	b510      	push	{r4, lr}
   217b6:	4604      	mov	r4, r0
   217b8:	2000      	movs	r0, #0
   217ba:	f7f5 ff51 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   217be:	f7ec f92b 	bl	da18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   217c2:	8020      	strh	r0, [r4, #0]
   217c4:	2000      	movs	r0, #0
   217c6:	bd10      	pop	{r4, pc}

000217c8 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   217c8:	21fb      	movs	r1, #251	; 0xfb
   217ca:	8001      	strh	r1, [r0, #0]
   217cc:	f44f 6229 	mov.w	r2, #2704	; 0xa90
   217d0:	8042      	strh	r2, [r0, #2]
   217d2:	8081      	strh	r1, [r0, #4]
   217d4:	80c2      	strh	r2, [r0, #6]
   217d6:	2000      	movs	r0, #0
   217d8:	4770      	bx	lr

000217da <sym_B56D6C76IM4AAFDQEOHND3OAZFOQIH7L5TPFHMY>:
   217da:	b510      	push	{r4, lr}
   217dc:	4604      	mov	r4, r0
   217de:	2000      	movs	r0, #0
   217e0:	f7f5 ff3e 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   217e4:	2002      	movs	r0, #2
   217e6:	f7eb fd79 	bl	d2dc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   217ea:	7020      	strb	r0, [r4, #0]
   217ec:	2000      	movs	r0, #0
   217ee:	bd10      	pop	{r4, pc}

000217f0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   217f0:	b51c      	push	{r2, r3, r4, lr}
   217f2:	8800      	ldrh	r0, [r0, #0]
   217f4:	4669      	mov	r1, sp
   217f6:	f7fd ff03 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   217fa:	2800      	cmp	r0, #0
   217fc:	d114      	bne.n	21828 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
   217fe:	9c01      	ldr	r4, [sp, #4]
   21800:	f89d 0000 	ldrb.w	r0, [sp]
   21804:	f504 74ac 	add.w	r4, r4, #344	; 0x158
   21808:	b918      	cbnz	r0, 21812 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
   2180a:	9801      	ldr	r0, [sp, #4]
   2180c:	f000 fe85 	bl	2251a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e6>
   21810:	b158      	cbz	r0, 2182a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3a>
   21812:	f89d 0000 	ldrb.w	r0, [sp]
   21816:	2801      	cmp	r0, #1
   21818:	d103      	bne.n	21822 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x32>
   2181a:	9801      	ldr	r0, [sp, #4]
   2181c:	f000 fe93 	bl	22546 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x412>
   21820:	b118      	cbz	r0, 2182a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3a>
   21822:	7ce0      	ldrb	r0, [r4, #19]
   21824:	b118      	cbz	r0, 2182e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3e>
   21826:	203a      	movs	r0, #58	; 0x3a
   21828:	bd1c      	pop	{r2, r3, r4, pc}
   2182a:	2002      	movs	r0, #2
   2182c:	bd1c      	pop	{r2, r3, r4, pc}
   2182e:	2001      	movs	r0, #1
   21830:	74e0      	strb	r0, [r4, #19]
   21832:	2000      	movs	r0, #0
   21834:	bd1c      	pop	{r2, r3, r4, pc}

00021836 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   21836:	b510      	push	{r4, lr}
   21838:	4604      	mov	r4, r0
   2183a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2183e:	f000 ffa6 	bl	2278e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x65a>
   21842:	f7ed feb3 	bl	f5ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   21846:	7020      	strb	r0, [r4, #0]
   21848:	f000 fdfe 	bl	22448 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   2184c:	f7ed feae 	bl	f5ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   21850:	7060      	strb	r0, [r4, #1]
   21852:	2000      	movs	r0, #0
   21854:	bd10      	pop	{r4, pc}

00021856 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   21856:	2108      	movs	r1, #8
   21858:	7001      	strb	r1, [r0, #0]
   2185a:	2000      	movs	r0, #0
   2185c:	4770      	bx	lr

0002185e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   2185e:	b510      	push	{r4, lr}
   21860:	4604      	mov	r4, r0
   21862:	f7f5 fe6d 	bl	17540 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x234>
   21866:	b108      	cbz	r0, 2186c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   21868:	200c      	movs	r0, #12
   2186a:	bd10      	pop	{r4, pc}
   2186c:	7820      	ldrb	r0, [r4, #0]
   2186e:	b120      	cbz	r0, 2187a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   21870:	2801      	cmp	r0, #1
   21872:	d002      	beq.n	2187a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x1c>
   21874:	28ff      	cmp	r0, #255	; 0xff
   21876:	d108      	bne.n	2188a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   21878:	e009      	b.n	2188e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x30>
   2187a:	f7ff fe67 	bl	2154c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x4c>
   2187e:	1c61      	adds	r1, r4, #1
   21880:	f7fd fe9b 	bl	1f5ba <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   21884:	b108      	cbz	r0, 2188a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x2c>
   21886:	2000      	movs	r0, #0
   21888:	bd10      	pop	{r4, pc}
   2188a:	2012      	movs	r0, #18
   2188c:	bd10      	pop	{r4, pc}
   2188e:	2000      	movs	r0, #0
   21890:	f7ed fb8a 	bl	efa8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   21894:	e7f7      	b.n	21886 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x28>

00021896 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   21896:	b51c      	push	{r2, r3, r4, lr}
   21898:	4604      	mov	r4, r0
   2189a:	f7f5 fd1b 	bl	172d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
   2189e:	2000      	movs	r0, #0
   218a0:	f88d 0002 	strb.w	r0, [sp, #2]
   218a4:	2103      	movs	r1, #3
   218a6:	f88d 1001 	strb.w	r1, [sp, #1]
   218aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   218ae:	f88d 1003 	strb.w	r1, [sp, #3]
   218b2:	f88d 0000 	strb.w	r0, [sp]
   218b6:	4668      	mov	r0, sp
   218b8:	9401      	str	r4, [sp, #4]
   218ba:	f000 fa17 	bl	21cec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   218be:	bd1c      	pop	{r2, r3, r4, pc}

000218c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   218c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   218c2:	4605      	mov	r5, r0
   218c4:	f7f5 fd06 	bl	172d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
   218c8:	4606      	mov	r6, r0
   218ca:	7828      	ldrb	r0, [r5, #0]
   218cc:	2400      	movs	r4, #0
   218ce:	b160      	cbz	r0, 218ea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   218d0:	f88d 4000 	strb.w	r4, [sp]
   218d4:	2001      	movs	r0, #1
   218d6:	f10d 0101 	add.w	r1, sp, #1
   218da:	f7ec facd 	bl	de78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   218de:	b120      	cbz	r0, 218ea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   218e0:	4668      	mov	r0, sp
   218e2:	f000 f897 	bl	21a14 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   218e6:	2800      	cmp	r0, #0
   218e8:	d112      	bne.n	21910 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   218ea:	f88d 400c 	strb.w	r4, [sp, #12]
   218ee:	4630      	mov	r0, r6
   218f0:	f7fe fef1 	bl	206d6 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   218f4:	b118      	cbz	r0, 218fe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   218f6:	2080      	movs	r0, #128	; 0x80
   218f8:	f8ad 000d 	strh.w	r0, [sp, #13]
   218fc:	e001      	b.n	21902 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   218fe:	f8ad 400d 	strh.w	r4, [sp, #13]
   21902:	f88d 400f 	strb.w	r4, [sp, #15]
   21906:	7828      	ldrb	r0, [r5, #0]
   21908:	2801      	cmp	r0, #1
   2190a:	d003      	beq.n	21914 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   2190c:	b138      	cbz	r0, 2191e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   2190e:	2012      	movs	r0, #18
   21910:	b004      	add	sp, #16
   21912:	bd70      	pop	{r4, r5, r6, pc}
   21914:	a903      	add	r1, sp, #12
   21916:	4630      	mov	r0, r6
   21918:	f7f5 fcf8 	bl	1730c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   2191c:	e7f8      	b.n	21910 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   2191e:	4630      	mov	r0, r6
   21920:	f000 fe81 	bl	22626 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4f2>
   21924:	e7f4      	b.n	21910 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00021926 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   21926:	b530      	push	{r4, r5, lr}
   21928:	b08b      	sub	sp, #44	; 0x2c
   2192a:	4604      	mov	r4, r0
   2192c:	f7f5 fcd2 	bl	172d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
   21930:	4602      	mov	r2, r0
   21932:	7920      	ldrb	r0, [r4, #4]
   21934:	2804      	cmp	r0, #4
   21936:	d803      	bhi.n	21940 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   21938:	8860      	ldrh	r0, [r4, #2]
   2193a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   2193e:	d902      	bls.n	21946 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   21940:	2012      	movs	r0, #18
   21942:	b00b      	add	sp, #44	; 0x2c
   21944:	bd30      	pop	{r4, r5, pc}
   21946:	2500      	movs	r5, #0
   21948:	f88d 5004 	strb.w	r5, [sp, #4]
   2194c:	7921      	ldrb	r1, [r4, #4]
   2194e:	9500      	str	r5, [sp, #0]
   21950:	f89d 0000 	ldrb.w	r0, [sp]
   21954:	2905      	cmp	r1, #5
   21956:	f040 0010 	orr.w	r0, r0, #16
   2195a:	f88d 0000 	strb.w	r0, [sp]
   2195e:	d254      	bcs.n	21a0a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   21960:	e8df f001 	tbb	[pc, r1]
   21964:	11050803 	.word	0x11050803
   21968:	000b      	.short	0x000b
   2196a:	f040 0001 	orr.w	r0, r0, #1
   2196e:	f040 0002 	orr.w	r0, r0, #2
   21972:	e006      	b.n	21982 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   21974:	f040 0009 	orr.w	r0, r0, #9
   21978:	e001      	b.n	2197e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   2197a:	f040 0001 	orr.w	r0, r0, #1
   2197e:	f040 0004 	orr.w	r0, r0, #4
   21982:	f88d 0000 	strb.w	r0, [sp]
   21986:	f8bd 0000 	ldrh.w	r0, [sp]
   2198a:	9000      	str	r0, [sp, #0]
   2198c:	f8bd 0000 	ldrh.w	r0, [sp]
   21990:	f8ad 0005 	strh.w	r0, [sp, #5]
   21994:	8821      	ldrh	r1, [r4, #0]
   21996:	f8dd 0006 	ldr.w	r0, [sp, #6]
   2199a:	f361 201f 	bfi	r0, r1, #8, #24
   2199e:	f8cd 0006 	str.w	r0, [sp, #6]
   219a2:	8861      	ldrh	r1, [r4, #2]
   219a4:	f8dd 0009 	ldr.w	r0, [sp, #9]
   219a8:	f361 201f 	bfi	r0, r1, #8, #24
   219ac:	f8cd 0009 	str.w	r0, [sp, #9]
   219b0:	7b60      	ldrb	r0, [r4, #13]
   219b2:	f88d 000d 	strb.w	r0, [sp, #13]
   219b6:	7960      	ldrb	r0, [r4, #5]
   219b8:	f88d 000e 	strb.w	r0, [sp, #14]
   219bc:	79a0      	ldrb	r0, [r4, #6]
   219be:	f88d 000f 	strb.w	r0, [sp, #15]
   219c2:	f8d4 0007 	ldr.w	r0, [r4, #7]
   219c6:	9004      	str	r0, [sp, #16]
   219c8:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   219cc:	f8ad 0014 	strh.w	r0, [sp, #20]
   219d0:	7ba0      	ldrb	r0, [r4, #14]
   219d2:	f88d 0016 	strb.w	r0, [sp, #22]
   219d6:	207f      	movs	r0, #127	; 0x7f
   219d8:	f88d 0017 	strb.w	r0, [sp, #23]
   219dc:	2001      	movs	r0, #1
   219de:	f88d 0018 	strb.w	r0, [sp, #24]
   219e2:	f88d 5019 	strb.w	r5, [sp, #25]
   219e6:	f88d 001a 	strb.w	r0, [sp, #26]
   219ea:	f88d 501b 	strb.w	r5, [sp, #27]
   219ee:	4610      	mov	r0, r2
   219f0:	f7fe fe94 	bl	2071c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   219f4:	f88d 001c 	strb.w	r0, [sp, #28]
   219f8:	f88d 501d 	strb.w	r5, [sp, #29]
   219fc:	f88d 501e 	strb.w	r5, [sp, #30]
   21a00:	a909      	add	r1, sp, #36	; 0x24
   21a02:	a801      	add	r0, sp, #4
   21a04:	f7f5 fa2c 	bl	16e60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   21a08:	e79b      	b.n	21942 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   21a0a:	f241 215b 	movw	r1, #4699	; 0x125b
   21a0e:	2039      	movs	r0, #57	; 0x39
   21a10:	f7eb fa3a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00021a14 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   21a14:	b570      	push	{r4, r5, r6, lr}
   21a16:	4604      	mov	r4, r0
   21a18:	7800      	ldrb	r0, [r0, #0]
   21a1a:	2102      	movs	r1, #2
   21a1c:	f7fd fb69 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21a20:	0005      	movs	r5, r0
   21a22:	d007      	beq.n	21a34 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   21a24:	f7ff f8e8 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   21a28:	b160      	cbz	r0, 21a44 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   21a2a:	4628      	mov	r0, r5
   21a2c:	f7fe fe5b 	bl	206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   21a30:	b110      	cbz	r0, 21a38 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   21a32:	e005      	b.n	21a40 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   21a34:	2042      	movs	r0, #66	; 0x42
   21a36:	bd70      	pop	{r4, r5, r6, pc}
   21a38:	4628      	mov	r0, r5
   21a3a:	f7fe fe42 	bl	206c2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   21a3e:	b108      	cbz	r0, 21a44 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   21a40:	200c      	movs	r0, #12
   21a42:	bd70      	pop	{r4, r5, r6, pc}
   21a44:	1c61      	adds	r1, r4, #1
   21a46:	4628      	mov	r0, r5
   21a48:	f7fe fe5f 	bl	2070a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   21a4c:	2000      	movs	r0, #0
   21a4e:	bd70      	pop	{r4, r5, r6, pc}

00021a50 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   21a50:	b50e      	push	{r1, r2, r3, lr}
   21a52:	8882      	ldrh	r2, [r0, #4]
   21a54:	f244 2390 	movw	r3, #17040	; 0x4290
   21a58:	429a      	cmp	r2, r3
   21a5a:	d901      	bls.n	21a60 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   21a5c:	2012      	movs	r0, #18
   21a5e:	bd0e      	pop	{r1, r2, r3, pc}
   21a60:	f44f 6329 	mov.w	r3, #2704	; 0xa90
   21a64:	429a      	cmp	r2, r3
   21a66:	d300      	bcc.n	21a6a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   21a68:	461a      	mov	r2, r3
   21a6a:	8803      	ldrh	r3, [r0, #0]
   21a6c:	f8ad 3000 	strh.w	r3, [sp]
   21a70:	8843      	ldrh	r3, [r0, #2]
   21a72:	f8ad 3002 	strh.w	r3, [sp, #2]
   21a76:	f8ad 2004 	strh.w	r2, [sp, #4]
   21a7a:	8843      	ldrh	r3, [r0, #2]
   21a7c:	f8ad 3006 	strh.w	r3, [sp, #6]
   21a80:	f8ad 2008 	strh.w	r2, [sp, #8]
   21a84:	8800      	ldrh	r0, [r0, #0]
   21a86:	8008      	strh	r0, [r1, #0]
   21a88:	4668      	mov	r0, sp
   21a8a:	f000 fdf2 	bl	22672 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x53e>
   21a8e:	bd0e      	pop	{r1, r2, r3, pc}

00021a90 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
   21a90:	b510      	push	{r4, lr}
   21a92:	4604      	mov	r4, r0
   21a94:	f7f5 fdde 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21a98:	b110      	cbz	r0, 21aa0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x10>
   21a9a:	f7f5 fc1b 	bl	172d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
   21a9e:	e004      	b.n	21aaa <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x1a>
   21aa0:	7820      	ldrb	r0, [r4, #0]
   21aa2:	2102      	movs	r1, #2
   21aa4:	f7fd fb25 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21aa8:	b140      	cbz	r0, 21abc <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY+0x2c>
   21aaa:	7861      	ldrb	r1, [r4, #1]
   21aac:	f3c1 0240 	ubfx	r2, r1, #1, #1
   21ab0:	f001 0101 	and.w	r1, r1, #1
   21ab4:	f7fe fe24 	bl	20700 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
   21ab8:	2000      	movs	r0, #0
   21aba:	bd10      	pop	{r4, pc}
   21abc:	2042      	movs	r0, #66	; 0x42
   21abe:	bd10      	pop	{r4, pc}

00021ac0 <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A>:
   21ac0:	b51c      	push	{r2, r3, r4, lr}
   21ac2:	4604      	mov	r4, r0
   21ac4:	2000      	movs	r0, #0
   21ac6:	f7f5 fdcb 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   21aca:	78e0      	ldrb	r0, [r4, #3]
   21acc:	28fb      	cmp	r0, #251	; 0xfb
   21ace:	d901      	bls.n	21ad4 <sym_2DM5GQNBROHI7PDNQDIVTLWENS2Q5ZHESY5XK3A+0x14>
   21ad0:	2012      	movs	r0, #18
   21ad2:	bd1c      	pop	{r2, r3, r4, pc}
   21ad4:	f814 0b02 	ldrb.w	r0, [r4], #2
   21ad8:	f88d 0000 	strb.w	r0, [sp]
   21adc:	f814 0b02 	ldrb.w	r0, [r4], #2
   21ae0:	f88d 0002 	strb.w	r0, [sp, #2]
   21ae4:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   21ae8:	f88d 0001 	strb.w	r0, [sp, #1]
   21aec:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   21af0:	f88d 0003 	strb.w	r0, [sp, #3]
   21af4:	4668      	mov	r0, sp
   21af6:	9401      	str	r4, [sp, #4]
   21af8:	f000 f8f8 	bl	21cec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   21afc:	bd1c      	pop	{r2, r3, r4, pc}

00021afe <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY>:
   21afe:	b530      	push	{r4, r5, lr}
   21b00:	4604      	mov	r4, r0
   21b02:	b087      	sub	sp, #28
   21b04:	460d      	mov	r5, r1
   21b06:	2000      	movs	r0, #0
   21b08:	f7f5 fdaa 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   21b0c:	2219      	movs	r2, #25
   21b0e:	4621      	mov	r1, r4
   21b10:	4668      	mov	r0, sp
   21b12:	f001 faea 	bl	230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   21b16:	2000      	movs	r0, #0
   21b18:	f88d 0019 	strb.w	r0, [sp, #25]
   21b1c:	f88d 001a 	strb.w	r0, [sp, #26]
   21b20:	7d20      	ldrb	r0, [r4, #20]
   21b22:	2802      	cmp	r0, #2
   21b24:	d004      	beq.n	21b30 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x32>
   21b26:	7860      	ldrb	r0, [r4, #1]
   21b28:	0701      	lsls	r1, r0, #28
   21b2a:	d504      	bpl.n	21b36 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x38>
   21b2c:	06c0      	lsls	r0, r0, #27
   21b2e:	d402      	bmi.n	21b36 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x38>
   21b30:	2012      	movs	r0, #18
   21b32:	b007      	add	sp, #28
   21b34:	bd30      	pop	{r4, r5, pc}
   21b36:	4629      	mov	r1, r5
   21b38:	4668      	mov	r0, sp
   21b3a:	f7f5 f991 	bl	16e60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   21b3e:	e7f8      	b.n	21b32 <sym_L45ZDH7ERT2JU2EYJULISF6MIOPRO4R2CFYVZAY+0x34>

00021b40 <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q>:
   21b40:	b51c      	push	{r2, r3, r4, lr}
   21b42:	4604      	mov	r4, r0
   21b44:	2000      	movs	r0, #0
   21b46:	f7f5 fd8b 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   21b4a:	78e0      	ldrb	r0, [r4, #3]
   21b4c:	28fb      	cmp	r0, #251	; 0xfb
   21b4e:	d901      	bls.n	21b54 <sym_D3BVO22ZDNB5P42SIYACSGDFHQS4QFSVERKUH4Q+0x14>
   21b50:	2012      	movs	r0, #18
   21b52:	bd1c      	pop	{r2, r3, r4, pc}
   21b54:	f814 0b02 	ldrb.w	r0, [r4], #2
   21b58:	f88d 0000 	strb.w	r0, [sp]
   21b5c:	f814 0b02 	ldrb.w	r0, [r4], #2
   21b60:	f88d 0002 	strb.w	r0, [sp, #2]
   21b64:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   21b68:	f88d 0001 	strb.w	r0, [sp, #1]
   21b6c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   21b70:	f88d 0003 	strb.w	r0, [sp, #3]
   21b74:	4668      	mov	r0, sp
   21b76:	9401      	str	r4, [sp, #4]
   21b78:	f000 f946 	bl	21e08 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   21b7c:	bd1c      	pop	{r2, r3, r4, pc}

00021b7e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   21b7e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   21b80:	4604      	mov	r4, r0
   21b82:	f10d 0007 	add.w	r0, sp, #7
   21b86:	9000      	str	r0, [sp, #0]
   21b88:	7922      	ldrb	r2, [r4, #4]
   21b8a:	78e1      	ldrb	r1, [r4, #3]
   21b8c:	78a0      	ldrb	r0, [r4, #2]
   21b8e:	f10d 0306 	add.w	r3, sp, #6
   21b92:	f000 fe04 	bl	2279e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x66a>
   21b96:	2800      	cmp	r0, #0
   21b98:	d109      	bne.n	21bae <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   21b9a:	8820      	ldrh	r0, [r4, #0]
   21b9c:	f8ad 0004 	strh.w	r0, [sp, #4]
   21ba0:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   21ba4:	f8ad 0008 	strh.w	r0, [sp, #8]
   21ba8:	a801      	add	r0, sp, #4
   21baa:	f000 f98f 	bl	21ecc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   21bae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00021bb0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   21bb0:	b510      	push	{r4, lr}
   21bb2:	4604      	mov	r4, r0
   21bb4:	2001      	movs	r0, #1
   21bb6:	f000 fae8 	bl	2218a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x56>
   21bba:	b128      	cbz	r0, 21bc8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   21bbc:	4621      	mov	r1, r4
   21bbe:	2001      	movs	r0, #1
   21bc0:	f7ec f972 	bl	dea8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   21bc4:	2000      	movs	r0, #0
   21bc6:	bd10      	pop	{r4, pc}
   21bc8:	200c      	movs	r0, #12
   21bca:	bd10      	pop	{r4, pc}

00021bcc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   21bcc:	b51c      	push	{r2, r3, r4, lr}
   21bce:	4604      	mov	r4, r0
   21bd0:	f7f5 fb80 	bl	172d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
   21bd4:	2000      	movs	r0, #0
   21bd6:	f88d 0000 	strb.w	r0, [sp]
   21bda:	f88d 0002 	strb.w	r0, [sp, #2]
   21bde:	2003      	movs	r0, #3
   21be0:	f88d 0001 	strb.w	r0, [sp, #1]
   21be4:	f814 0b01 	ldrb.w	r0, [r4], #1
   21be8:	f88d 0003 	strb.w	r0, [sp, #3]
   21bec:	4668      	mov	r0, sp
   21bee:	9401      	str	r4, [sp, #4]
   21bf0:	f000 f90a 	bl	21e08 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   21bf4:	bd1c      	pop	{r2, r3, r4, pc}

00021bf6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   21bf6:	b51c      	push	{r2, r3, r4, lr}
   21bf8:	8801      	ldrh	r1, [r0, #0]
   21bfa:	f8ad 1000 	strh.w	r1, [sp]
   21bfe:	8841      	ldrh	r1, [r0, #2]
   21c00:	f8ad 1002 	strh.w	r1, [sp, #2]
   21c04:	8801      	ldrh	r1, [r0, #0]
   21c06:	f8ad 1004 	strh.w	r1, [sp, #4]
   21c0a:	8840      	ldrh	r0, [r0, #2]
   21c0c:	f8ad 0006 	strh.w	r0, [sp, #6]
   21c10:	4668      	mov	r0, sp
   21c12:	f7f5 fcb7 	bl	17584 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>
   21c16:	bd1c      	pop	{r2, r3, r4, pc}

00021c18 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   21c18:	b510      	push	{r4, lr}
   21c1a:	f7ec f96b 	bl	def4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   21c1e:	2000      	movs	r0, #0
   21c20:	bd10      	pop	{r4, pc}

00021c22 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   21c22:	b510      	push	{r4, lr}
   21c24:	460c      	mov	r4, r1
   21c26:	2101      	movs	r1, #1
   21c28:	f7fd fa63 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21c2c:	b118      	cbz	r0, 21c36 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   21c2e:	2c02      	cmp	r4, #2
   21c30:	d903      	bls.n	21c3a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   21c32:	2012      	movs	r0, #18
   21c34:	bd10      	pop	{r4, pc}
   21c36:	2002      	movs	r0, #2
   21c38:	bd10      	pop	{r4, pc}
   21c3a:	f014 0101 	ands.w	r1, r4, #1
   21c3e:	f880 130d 	strb.w	r1, [r0, #781]	; 0x30d
   21c42:	f3c4 0240 	ubfx	r2, r4, #1, #1
   21c46:	f880 230c 	strb.w	r2, [r0, #780]	; 0x30c
   21c4a:	d004      	beq.n	21c56 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   21c4c:	f890 130a 	ldrb.w	r1, [r0, #778]	; 0x30a
   21c50:	b109      	cbz	r1, 21c56 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   21c52:	f7fe ffd4 	bl	20bfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   21c56:	2000      	movs	r0, #0
   21c58:	bd10      	pop	{r4, pc}

00021c5a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   21c5a:	b51c      	push	{r2, r3, r4, lr}
   21c5c:	460c      	mov	r4, r1
   21c5e:	4669      	mov	r1, sp
   21c60:	f7fd fcce 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   21c64:	2800      	cmp	r0, #0
   21c66:	d108      	bne.n	21c7a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x20>
   21c68:	f89d 0000 	ldrb.w	r0, [sp]
   21c6c:	b130      	cbz	r0, 21c7c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x22>
   21c6e:	2100      	movs	r1, #0
   21c70:	4622      	mov	r2, r4
   21c72:	9801      	ldr	r0, [sp, #4]
   21c74:	f000 fb8e 	bl	22394 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x260>
   21c78:	2000      	movs	r0, #0
   21c7a:	bd1c      	pop	{r2, r3, r4, pc}
   21c7c:	2101      	movs	r1, #1
   21c7e:	e7f7      	b.n	21c70 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x16>

00021c80 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
   21c80:	b510      	push	{r4, lr}
   21c82:	4604      	mov	r4, r0
   21c84:	7800      	ldrb	r0, [r0, #0]
   21c86:	28ff      	cmp	r0, #255	; 0xff
   21c88:	d009      	beq.n	21c9e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
   21c8a:	2102      	movs	r1, #2
   21c8c:	f7fd fa31 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21c90:	b118      	cbz	r0, 21c9a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   21c92:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   21c96:	84c1      	strh	r1, [r0, #38]	; 0x26
   21c98:	e005      	b.n	21ca6 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   21c9a:	2042      	movs	r0, #66	; 0x42
   21c9c:	bd10      	pop	{r4, pc}
   21c9e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   21ca2:	f7f1 fca3 	bl	135ec <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   21ca6:	2000      	movs	r0, #0
   21ca8:	bd10      	pop	{r4, pc}

00021caa <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   21caa:	b510      	push	{r4, lr}
   21cac:	4604      	mov	r4, r0
   21cae:	f7f5 fccb 	bl	17648 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   21cb2:	b118      	cbz	r0, 21cbc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   21cb4:	2000      	movs	r0, #0
   21cb6:	f000 fa68 	bl	2218a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x56>
   21cba:	b128      	cbz	r0, 21cc8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   21cbc:	4621      	mov	r1, r4
   21cbe:	2000      	movs	r0, #0
   21cc0:	f7ec f8f2 	bl	dea8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   21cc4:	2000      	movs	r0, #0
   21cc6:	bd10      	pop	{r4, pc}
   21cc8:	200c      	movs	r0, #12
   21cca:	bd10      	pop	{r4, pc}

00021ccc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   21ccc:	b510      	push	{r4, lr}
   21cce:	4604      	mov	r4, r0
   21cd0:	7800      	ldrb	r0, [r0, #0]
   21cd2:	b100      	cbz	r0, 21cd6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0xa>
   21cd4:	2001      	movs	r0, #1
   21cd6:	f7f4 fecd 	bl	16a74 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   21cda:	7820      	ldrb	r0, [r4, #0]
   21cdc:	b100      	cbz	r0, 21ce0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x14>
   21cde:	2001      	movs	r0, #1
   21ce0:	f7f1 fd22 	bl	13728 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   21ce4:	2000      	movs	r0, #0
   21ce6:	bd10      	pop	{r4, pc}

00021ce8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   21ce8:	f000 bcc3 	b.w	22672 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x53e>

00021cec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   21cec:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   21cf0:	4606      	mov	r6, r0
   21cf2:	7847      	ldrb	r7, [r0, #1]
   21cf4:	7800      	ldrb	r0, [r0, #0]
   21cf6:	2102      	movs	r1, #2
   21cf8:	f7fd f9fb 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21cfc:	0005      	movs	r5, r0
   21cfe:	d00b      	beq.n	21d18 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
   21d00:	f7f5 fca8 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21d04:	b158      	cbz	r0, 21d1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x32>
   21d06:	4628      	mov	r0, r5
   21d08:	f7fe fc62 	bl	205d0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   21d0c:	4604      	mov	r4, r0
   21d0e:	78f0      	ldrb	r0, [r6, #3]
   21d10:	42a0      	cmp	r0, r4
   21d12:	d805      	bhi.n	21d20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   21d14:	4604      	mov	r4, r0
   21d16:	e003      	b.n	21d20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x34>
   21d18:	2042      	movs	r0, #66	; 0x42
   21d1a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   21d1e:	78f4      	ldrb	r4, [r6, #3]
   21d20:	2f04      	cmp	r7, #4
   21d22:	d031      	beq.n	21d88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x9c>
   21d24:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   21d26:	f7fd fb67 	bl	1f3f8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   21d2a:	4420      	add	r0, r4
   21d2c:	fa1f f880 	uxth.w	r8, r0
   21d30:	f7f5 fc90 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21d34:	b9a0      	cbnz	r0, 21d60 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   21d36:	78f0      	ldrb	r0, [r6, #3]
   21d38:	f04f 0912 	mov.w	r9, #18
   21d3c:	b118      	cbz	r0, 21d46 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5a>
   21d3e:	4628      	mov	r0, r5
   21d40:	f7fe fca5 	bl	2068e <sym_M7OTIJAFMGS6XNOB3KIKP2PSIWVW5IRGENKBGTA>
   21d44:	b140      	cbz	r0, 21d58 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x6c>
   21d46:	4628      	mov	r0, r5
   21d48:	f7fe fc42 	bl	205d0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   21d4c:	4540      	cmp	r0, r8
   21d4e:	d207      	bcs.n	21d60 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x74>
   21d50:	4628      	mov	r0, r5
   21d52:	f7fe fcc4 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   21d56:	b108      	cbz	r0, 21d5c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   21d58:	4648      	mov	r0, r9
   21d5a:	e7de      	b.n	21d1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   21d5c:	2007      	movs	r0, #7
   21d5e:	e7dc      	b.n	21d1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   21d60:	f7f5 fc78 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21d64:	4602      	mov	r2, r0
   21d66:	4641      	mov	r1, r8
   21d68:	4628      	mov	r0, r5
   21d6a:	f000 fa2d 	bl	221c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   21d6e:	2800      	cmp	r0, #0
   21d70:	d1d3      	bne.n	21d1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   21d72:	2f03      	cmp	r7, #3
   21d74:	d000      	beq.n	21d78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   21d76:	b1c4      	cbz	r4, 21daa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   21d78:	4628      	mov	r0, r5
   21d7a:	f7fe fcb0 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   21d7e:	7871      	ldrb	r1, [r6, #1]
   21d80:	2903      	cmp	r1, #3
   21d82:	d00d      	beq.n	21da0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   21d84:	b988      	cbnz	r0, 21daa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   21d86:	e001      	b.n	21d8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xa0>
   21d88:	b97c      	cbnz	r4, 21daa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   21d8a:	e7f5      	b.n	21d78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8c>
   21d8c:	2904      	cmp	r1, #4
   21d8e:	d107      	bne.n	21da0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb4>
   21d90:	4628      	mov	r0, r5
   21d92:	f7fe ff31 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   21d96:	b140      	cbz	r0, 21daa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   21d98:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   21d9a:	f7fd faf3 	bl	1f384 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   21d9e:	b120      	cbz	r0, 21daa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   21da0:	2f01      	cmp	r7, #1
   21da2:	d004      	beq.n	21dae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   21da4:	2f03      	cmp	r7, #3
   21da6:	d002      	beq.n	21dae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xc2>
   21da8:	e00e      	b.n	21dc8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xdc>
   21daa:	2012      	movs	r0, #18
   21dac:	e7b5      	b.n	21d1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>
   21dae:	4628      	mov	r0, r5
   21db0:	f7fe fc95 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   21db4:	b108      	cbz	r0, 21dba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   21db6:	2200      	movs	r2, #0
   21db8:	e002      	b.n	21dc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   21dba:	2f01      	cmp	r7, #1
   21dbc:	d014      	beq.n	21de8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xfc>
   21dbe:	2201      	movs	r2, #1
   21dc0:	4668      	mov	r0, sp
   21dc2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   21dc4:	f7fd fa77 	bl	1f2b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   21dc8:	2f04      	cmp	r7, #4
   21dca:	d018      	beq.n	21dfe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x112>
   21dcc:	6872      	ldr	r2, [r6, #4]
   21dce:	4623      	mov	r3, r4
   21dd0:	2101      	movs	r1, #1
   21dd2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   21dd4:	f7fd faa7 	bl	1f326 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   21dd8:	2800      	cmp	r0, #0
   21dda:	d0bf      	beq.n	21d5c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   21ddc:	7870      	ldrb	r0, [r6, #1]
   21dde:	2802      	cmp	r0, #2
   21de0:	d004      	beq.n	21dec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   21de2:	2803      	cmp	r0, #3
   21de4:	d002      	beq.n	21dec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x100>
   21de6:	e00d      	b.n	21e04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   21de8:	2202      	movs	r2, #2
   21dea:	e7e9      	b.n	21dc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xd4>
   21dec:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   21dee:	f7fd fb03 	bl	1f3f8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   21df2:	4602      	mov	r2, r0
   21df4:	2101      	movs	r1, #1
   21df6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   21df8:	f7fd fada 	bl	1f3b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   21dfc:	e002      	b.n	21e04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x118>
   21dfe:	4628      	mov	r0, r5
   21e00:	f7fe fbfd 	bl	205fe <sym_UJWNE3E4RDATXEP7ML237UGTIH42KUYZYFD6XAQ>
   21e04:	2000      	movs	r0, #0
   21e06:	e788      	b.n	21d1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2e>

00021e08 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   21e08:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   21e0c:	4606      	mov	r6, r0
   21e0e:	7845      	ldrb	r5, [r0, #1]
   21e10:	78c7      	ldrb	r7, [r0, #3]
   21e12:	7800      	ldrb	r0, [r0, #0]
   21e14:	2102      	movs	r1, #2
   21e16:	f7fd f96c 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   21e1a:	0004      	movs	r4, r0
   21e1c:	d007      	beq.n	21e2e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   21e1e:	f7f5 fc19 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21e22:	b140      	cbz	r0, 21e36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   21e24:	4620      	mov	r0, r4
   21e26:	f7fe fc5e 	bl	206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   21e2a:	b118      	cbz	r0, 21e34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
   21e2c:	e003      	b.n	21e36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
   21e2e:	2042      	movs	r0, #66	; 0x42
   21e30:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   21e34:	2700      	movs	r7, #0
   21e36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   21e38:	f7fd fae2 	bl	1f400 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   21e3c:	4438      	add	r0, r7
   21e3e:	fa1f f880 	uxth.w	r8, r0
   21e42:	f7f5 fc07 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21e46:	b928      	cbnz	r0, 21e54 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   21e48:	78f0      	ldrb	r0, [r6, #3]
   21e4a:	b118      	cbz	r0, 21e54 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x4c>
   21e4c:	4620      	mov	r0, r4
   21e4e:	f7fe fc4a 	bl	206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   21e52:	b198      	cbz	r0, 21e7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   21e54:	f7f5 fbfe 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   21e58:	4602      	mov	r2, r0
   21e5a:	4641      	mov	r1, r8
   21e5c:	4620      	mov	r0, r4
   21e5e:	f000 f9b3 	bl	221c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x94>
   21e62:	2800      	cmp	r0, #0
   21e64:	d1e4      	bne.n	21e30 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   21e66:	2d04      	cmp	r5, #4
   21e68:	d008      	beq.n	21e7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   21e6a:	2d03      	cmp	r5, #3
   21e6c:	d00a      	beq.n	21e84 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x7c>
   21e6e:	b12f      	cbz	r7, 21e7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x74>
   21e70:	4620      	mov	r0, r4
   21e72:	f7fe fec1 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   21e76:	b118      	cbz	r0, 21e80 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x78>
   21e78:	200c      	movs	r0, #12
   21e7a:	e7d9      	b.n	21e30 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   21e7c:	2012      	movs	r0, #18
   21e7e:	e7d7      	b.n	21e30 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   21e80:	2d01      	cmp	r5, #1
   21e82:	d10c      	bne.n	21e9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   21e84:	4620      	mov	r0, r4
   21e86:	f7fe fc2a 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   21e8a:	b108      	cbz	r0, 21e90 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x88>
   21e8c:	2204      	movs	r2, #4
   21e8e:	e002      	b.n	21e96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   21e90:	2d01      	cmp	r5, #1
   21e92:	d010      	beq.n	21eb6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xae>
   21e94:	2205      	movs	r2, #5
   21e96:	4668      	mov	r0, sp
   21e98:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   21e9a:	f7fd fa0c 	bl	1f2b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   21e9e:	6872      	ldr	r2, [r6, #4]
   21ea0:	463b      	mov	r3, r7
   21ea2:	2100      	movs	r1, #0
   21ea4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   21ea6:	f7fd fa3e 	bl	1f326 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   21eaa:	b130      	cbz	r0, 21eba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb2>
   21eac:	2d02      	cmp	r5, #2
   21eae:	d006      	beq.n	21ebe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   21eb0:	2d03      	cmp	r5, #3
   21eb2:	d004      	beq.n	21ebe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xb6>
   21eb4:	e008      	b.n	21ec8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xc0>
   21eb6:	2206      	movs	r2, #6
   21eb8:	e7ed      	b.n	21e96 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   21eba:	2007      	movs	r0, #7
   21ebc:	e7b8      	b.n	21e30 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
   21ebe:	4642      	mov	r2, r8
   21ec0:	2100      	movs	r1, #0
   21ec2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   21ec4:	f7fd fa74 	bl	1f3b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   21ec8:	2000      	movs	r0, #0
   21eca:	e7b1      	b.n	21e30 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>

00021ecc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   21ecc:	b510      	push	{r4, lr}
   21ece:	4604      	mov	r4, r0
   21ed0:	8880      	ldrh	r0, [r0, #4]
   21ed2:	b128      	cbz	r0, 21ee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   21ed4:	2801      	cmp	r0, #1
   21ed6:	d003      	beq.n	21ee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   21ed8:	2802      	cmp	r0, #2
   21eda:	d001      	beq.n	21ee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   21edc:	2012      	movs	r0, #18
   21ede:	bd10      	pop	{r4, pc}
   21ee0:	78e0      	ldrb	r0, [r4, #3]
   21ee2:	f000 fa35 	bl	22350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   21ee6:	b148      	cbz	r0, 21efc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   21ee8:	78a0      	ldrb	r0, [r4, #2]
   21eea:	f000 fa31 	bl	22350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21c>
   21eee:	b128      	cbz	r0, 21efc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   21ef0:	4620      	mov	r0, r4
   21ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21ef6:	2101      	movs	r1, #1
   21ef8:	f000 b862 	b.w	21fc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   21efc:	2011      	movs	r0, #17
   21efe:	bd10      	pop	{r4, pc}

00021f00 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   21f00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   21f02:	460c      	mov	r4, r1
   21f04:	4605      	mov	r5, r0
   21f06:	8800      	ldrh	r0, [r0, #0]
   21f08:	4669      	mov	r1, sp
   21f0a:	f7fd fb79 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   21f0e:	2800      	cmp	r0, #0
   21f10:	d106      	bne.n	21f20 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   21f12:	9801      	ldr	r0, [sp, #4]
   21f14:	8829      	ldrh	r1, [r5, #0]
   21f16:	8021      	strh	r1, [r4, #0]
   21f18:	f8b0 00f0 	ldrh.w	r0, [r0, #240]	; 0xf0
   21f1c:	8060      	strh	r0, [r4, #2]
   21f1e:	2000      	movs	r0, #0
   21f20:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00021f22 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   21f22:	b510      	push	{r4, lr}
   21f24:	4604      	mov	r4, r0
   21f26:	4601      	mov	r1, r0
   21f28:	2000      	movs	r0, #0
   21f2a:	f7eb ffa5 	bl	de78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   21f2e:	b910      	cbnz	r0, 21f36 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   21f30:	2000      	movs	r0, #0
   21f32:	6020      	str	r0, [r4, #0]
   21f34:	80a0      	strh	r0, [r4, #4]
   21f36:	2000      	movs	r0, #0
   21f38:	bd10      	pop	{r4, pc}

00021f3a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   21f3a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   21f3c:	460c      	mov	r4, r1
   21f3e:	4605      	mov	r5, r0
   21f40:	8800      	ldrh	r0, [r0, #0]
   21f42:	4669      	mov	r1, sp
   21f44:	f7fd fb5c 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   21f48:	b108      	cbz	r0, 21f4e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   21f4a:	2002      	movs	r0, #2
   21f4c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   21f4e:	78a8      	ldrb	r0, [r5, #2]
   21f50:	b158      	cbz	r0, 21f6a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   21f52:	f000 fa79 	bl	22448 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   21f56:	70a0      	strb	r0, [r4, #2]
   21f58:	8828      	ldrh	r0, [r5, #0]
   21f5a:	8020      	strh	r0, [r4, #0]
   21f5c:	f994 0002 	ldrsb.w	r0, [r4, #2]
   21f60:	f7ed fb24 	bl	f5ac <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   21f64:	70a0      	strb	r0, [r4, #2]
   21f66:	2000      	movs	r0, #0
   21f68:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   21f6a:	9801      	ldr	r0, [sp, #4]
   21f6c:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   21f70:	e7f1      	b.n	21f56 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00021f72 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   21f72:	b510      	push	{r4, lr}
   21f74:	f7f5 fb7a 	bl	1766c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   21f78:	2000      	movs	r0, #0
   21f7a:	bd10      	pop	{r4, pc}

00021f7c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   21f7c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   21f80:	4604      	mov	r4, r0
   21f82:	8840      	ldrh	r0, [r0, #2]
   21f84:	460d      	mov	r5, r1
   21f86:	b1b8      	cbz	r0, 21fb8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   21f88:	8820      	ldrh	r0, [r4, #0]
   21f8a:	4669      	mov	r1, sp
   21f8c:	f7fd fb38 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   21f90:	2800      	cmp	r0, #0
   21f92:	d10f      	bne.n	21fb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   21f94:	8820      	ldrh	r0, [r4, #0]
   21f96:	8028      	strh	r0, [r5, #0]
   21f98:	9e01      	ldr	r6, [sp, #4]
   21f9a:	f106 0514 	add.w	r5, r6, #20
   21f9e:	36a8      	adds	r6, #168	; 0xa8
   21fa0:	682f      	ldr	r7, [r5, #0]
   21fa2:	8862      	ldrh	r2, [r4, #2]
   21fa4:	4639      	mov	r1, r7
   21fa6:	4630      	mov	r0, r6
   21fa8:	f7fd fcb4 	bl	1f914 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   21fac:	6828      	ldr	r0, [r5, #0]
   21fae:	42b8      	cmp	r0, r7
   21fb0:	d1f6      	bne.n	21fa0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   21fb2:	2000      	movs	r0, #0
   21fb4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   21fb8:	2012      	movs	r0, #18
   21fba:	e7fb      	b.n	21fb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00021fbc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   21fbc:	f000 b8aa 	b.w	22114 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00021fc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   21fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21fc4:	b08a      	sub	sp, #40	; 0x28
   21fc6:	4689      	mov	r9, r1
   21fc8:	4605      	mov	r5, r0
   21fca:	8800      	ldrh	r0, [r0, #0]
   21fcc:	a904      	add	r1, sp, #16
   21fce:	f7fd fb17 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   21fd2:	2800      	cmp	r0, #0
   21fd4:	d147      	bne.n	22066 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   21fd6:	9805      	ldr	r0, [sp, #20]
   21fd8:	4601      	mov	r1, r0
   21fda:	4688      	mov	r8, r1
   21fdc:	f890 11f2 	ldrb.w	r1, [r0, #498]	; 0x1f2
   21fe0:	f500 74ac 	add.w	r4, r0, #344	; 0x158
   21fe4:	f88d 1018 	strb.w	r1, [sp, #24]
   21fe8:	9906      	ldr	r1, [sp, #24]
   21fea:	9106      	str	r1, [sp, #24]
   21fec:	f89d 1018 	ldrb.w	r1, [sp, #24]
   21ff0:	30a8      	adds	r0, #168	; 0xa8
   21ff2:	b109      	cbz	r1, 21ff8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   21ff4:	2701      	movs	r7, #1
   21ff6:	e000      	b.n	21ffa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   21ff8:	2700      	movs	r7, #0
   21ffa:	7f81      	ldrb	r1, [r0, #30]
   21ffc:	2923      	cmp	r1, #35	; 0x23
   21ffe:	d100      	bne.n	22002 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   22000:	b13f      	cbz	r7, 22012 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   22002:	2600      	movs	r6, #0
   22004:	306e      	adds	r0, #110	; 0x6e
   22006:	2108      	movs	r1, #8
   22008:	4682      	mov	sl, r0
   2200a:	f7ff fa96 	bl	2153a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3a>
   2200e:	b110      	cbz	r0, 22016 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   22010:	e007      	b.n	22022 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   22012:	2601      	movs	r6, #1
   22014:	e7f6      	b.n	22004 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   22016:	210b      	movs	r1, #11
   22018:	4650      	mov	r0, sl
   2201a:	f7ff fa8e 	bl	2153a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3a>
   2201e:	b900      	cbnz	r0, 22022 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   22020:	b306      	cbz	r6, 22064 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa4>
   22022:	a802      	add	r0, sp, #8
   22024:	9000      	str	r0, [sp, #0]
   22026:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2202a:	ab01      	add	r3, sp, #4
   2202c:	462a      	mov	r2, r5
   2202e:	4641      	mov	r1, r8
   22030:	f000 f9ea 	bl	22408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d4>
   22034:	0006      	movs	r6, r0
   22036:	d116      	bne.n	22066 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   22038:	f898 0073 	ldrb.w	r0, [r8, #115]	; 0x73
   2203c:	340c      	adds	r4, #12
   2203e:	b168      	cbz	r0, 2205c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   22040:	f89d 0004 	ldrb.w	r0, [sp, #4]
   22044:	f010 0102 	ands.w	r1, r0, #2
   22048:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2204c:	f88d 1004 	strb.w	r1, [sp, #4]
   22050:	f000 0002 	and.w	r0, r0, #2
   22054:	f88d 0008 	strb.w	r0, [sp, #8]
   22058:	d008      	beq.n	2206c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   2205a:	b138      	cbz	r0, 2206c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xac>
   2205c:	20ff      	movs	r0, #255	; 0xff
   2205e:	7060      	strb	r0, [r4, #1]
   22060:	b947      	cbnz	r7, 22074 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb4>
   22062:	e005      	b.n	22070 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb0>
   22064:	201a      	movs	r0, #26
   22066:	b00a      	add	sp, #40	; 0x28
   22068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2206c:	2009      	movs	r0, #9
   2206e:	e7fa      	b.n	22066 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>
   22070:	7820      	ldrb	r0, [r4, #0]
   22072:	b108      	cbz	r0, 22078 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   22074:	263a      	movs	r6, #58	; 0x3a
   22076:	e014      	b.n	220a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xe2>
   22078:	f884 9000 	strb.w	r9, [r4]
   2207c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   22080:	70a1      	strb	r1, [r4, #2]
   22082:	f89d 0008 	ldrb.w	r0, [sp, #8]
   22086:	70e0      	strb	r0, [r4, #3]
   22088:	88aa      	ldrh	r2, [r5, #4]
   2208a:	80a2      	strh	r2, [r4, #4]
   2208c:	f88d 1018 	strb.w	r1, [sp, #24]
   22090:	f88d 0019 	strb.w	r0, [sp, #25]
   22094:	88a8      	ldrh	r0, [r5, #4]
   22096:	f8ad 001a 	strh.w	r0, [sp, #26]
   2209a:	a906      	add	r1, sp, #24
   2209c:	4640      	mov	r0, r8
   2209e:	f7fd fbbe 	bl	1f81e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   220a2:	2000      	movs	r0, #0
   220a4:	7060      	strb	r0, [r4, #1]
   220a6:	4630      	mov	r0, r6
   220a8:	e7dd      	b.n	22066 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa6>

000220aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   220aa:	2008      	movs	r0, #8
   220ac:	f7f5 bb48 	b.w	17740 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000220b0 <sym_RJCZ3TUNFFUZPTNFXG35SLVXYYJ7NVMTPNXKOXY>:
   220b0:	200b      	movs	r0, #11
   220b2:	f7f5 bb45 	b.w	17740 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000220b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   220b6:	b510      	push	{r4, lr}
   220b8:	4604      	mov	r4, r0
   220ba:	2000      	movs	r0, #0
   220bc:	8822      	ldrh	r2, [r4, #0]
   220be:	b086      	sub	sp, #24
   220c0:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   220c4:	39ff      	subs	r1, #255	; 0xff
   220c6:	d008      	beq.n	220da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   220c8:	a903      	add	r1, sp, #12
   220ca:	4610      	mov	r0, r2
   220cc:	f7fd fa98 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   220d0:	b110      	cbz	r0, 220d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   220d2:	2002      	movs	r0, #2
   220d4:	b006      	add	sp, #24
   220d6:	bd10      	pop	{r4, pc}
   220d8:	9804      	ldr	r0, [sp, #16]
   220da:	8921      	ldrh	r1, [r4, #8]
   220dc:	89a3      	ldrh	r3, [r4, #12]
   220de:	8962      	ldrh	r2, [r4, #10]
   220e0:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   220e4:	88e3      	ldrh	r3, [r4, #6]
   220e6:	88a2      	ldrh	r2, [r4, #4]
   220e8:	8861      	ldrh	r1, [r4, #2]
   220ea:	f7f5 f851 	bl	17190 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x124>
   220ee:	b108      	cbz	r0, 220f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   220f0:	2000      	movs	r0, #0
   220f2:	e7ef      	b.n	220d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   220f4:	2030      	movs	r0, #48	; 0x30
   220f6:	e7ed      	b.n	220d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

000220f8 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA>:
   220f8:	b510      	push	{r4, lr}
   220fa:	4604      	mov	r4, r0
   220fc:	7800      	ldrb	r0, [r0, #0]
   220fe:	2102      	movs	r1, #2
   22100:	f7fc fff7 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22104:	b120      	cbz	r0, 22110 <sym_CY26ZDKPCAPZODXUI4S7AB6G3B2EI2A66B45STA+0x18>
   22106:	7821      	ldrb	r1, [r4, #0]
   22108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2210c:	f000 ba40 	b.w	22590 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x45c>
   22110:	2042      	movs	r0, #66	; 0x42
   22112:	bd10      	pop	{r4, pc}

00022114 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   22114:	b510      	push	{r4, lr}
   22116:	f7fd fa0a 	bl	1f52e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   2211a:	f7ec fe8f 	bl	ee3c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   2211e:	f7f5 fb37 	bl	17790 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   22122:	f7ed fe8b 	bl	fe3c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   22126:	2001      	movs	r0, #1
   22128:	f7f5 fa9a 	bl	17660 <sym_4GYPMR5DNSPTTPCK56HLK457TQWWCRBKTZ6GK7Q>
   2212c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22130:	f7f5 b874 	b.w	1721c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1b0>

00022134 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   22134:	f7f2 baae 	b.w	14694 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   22138:	f44f 71a4 	mov.w	r1, #328	; 0x148
   2213c:	4288      	cmp	r0, r1
   2213e:	d303      	bcc.n	22148 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   22140:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   22144:	4288      	cmp	r0, r1
   22146:	d300      	bcc.n	2214a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   22148:	4608      	mov	r0, r1
   2214a:	b280      	uxth	r0, r0
   2214c:	4770      	bx	lr
   2214e:	0741      	lsls	r1, r0, #29
   22150:	d501      	bpl.n	22156 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   22152:	2008      	movs	r0, #8
   22154:	4770      	bx	lr
   22156:	07c1      	lsls	r1, r0, #31
   22158:	d001      	beq.n	2215e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   2215a:	2001      	movs	r0, #1
   2215c:	4770      	bx	lr
   2215e:	0780      	lsls	r0, r0, #30
   22160:	d501      	bpl.n	22166 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32>
   22162:	2002      	movs	r0, #2
   22164:	4770      	bx	lr
   22166:	2000      	movs	r0, #0
   22168:	4770      	bx	lr
   2216a:	b510      	push	{r4, lr}
   2216c:	2801      	cmp	r0, #1
   2216e:	d00b      	beq.n	22188 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54>
   22170:	2802      	cmp	r0, #2
   22172:	d009      	beq.n	22188 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x54>
   22174:	2804      	cmp	r0, #4
   22176:	d006      	beq.n	22186 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x52>
   22178:	2808      	cmp	r0, #8
   2217a:	d004      	beq.n	22186 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x52>
   2217c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   22180:	2006      	movs	r0, #6
   22182:	f7ea fe81 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   22186:	2003      	movs	r0, #3
   22188:	bd10      	pop	{r4, pc}
   2218a:	b510      	push	{r4, lr}
   2218c:	4604      	mov	r4, r0
   2218e:	f7f4 ff7b 	bl	17088 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   22192:	b170      	cbz	r0, 221b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x7e>
   22194:	f7f5 fa5e 	bl	17654 <sym_ZT5CPONXDAFRAB5RWMA6LXPAT5TEFYV2YKU6P6A>
   22198:	b150      	cbz	r0, 221b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x7c>
   2219a:	f7f5 f89b 	bl	172d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x268>
   2219e:	4604      	mov	r4, r0
   221a0:	f7fe faa1 	bl	206e6 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   221a4:	b960      	cbnz	r0, 221c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8c>
   221a6:	4620      	mov	r0, r4
   221a8:	f7fe fa8b 	bl	206c2 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   221ac:	b108      	cbz	r0, 221b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x7e>
   221ae:	e007      	b.n	221c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8c>
   221b0:	b134      	cbz	r4, 221c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8c>
   221b2:	f000 fa2d 	bl	22610 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4dc>
   221b6:	b128      	cbz	r0, 221c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   221b8:	f7f4 fc32 	bl	16a20 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   221bc:	2801      	cmp	r0, #1
   221be:	d001      	beq.n	221c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x90>
   221c0:	2000      	movs	r0, #0
   221c2:	bd10      	pop	{r4, pc}
   221c4:	2001      	movs	r0, #1
   221c6:	bd10      	pop	{r4, pc}
   221c8:	b570      	push	{r4, r5, r6, lr}
   221ca:	460c      	mov	r4, r1
   221cc:	4605      	mov	r5, r0
   221ce:	b112      	cbz	r2, 221d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa2>
   221d0:	291f      	cmp	r1, #31
   221d2:	d80c      	bhi.n	221ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xba>
   221d4:	e016      	b.n	22204 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd0>
   221d6:	f7eb fc1f 	bl	da18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   221da:	42a0      	cmp	r0, r4
   221dc:	d201      	bcs.n	221e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xae>
   221de:	2007      	movs	r0, #7
   221e0:	bd70      	pop	{r4, r5, r6, pc}
   221e2:	4628      	mov	r0, r5
   221e4:	f7fe fa7b 	bl	206de <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   221e8:	b118      	cbz	r0, 221f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   221ea:	2c1f      	cmp	r4, #31
   221ec:	d901      	bls.n	221f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xbe>
   221ee:	2012      	movs	r0, #18
   221f0:	bd70      	pop	{r4, r5, r6, pc}
   221f2:	4628      	mov	r0, r5
   221f4:	f7fe fa7e 	bl	206f4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   221f8:	b130      	cbz	r0, 22208 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd4>
   221fa:	4621      	mov	r1, r4
   221fc:	4628      	mov	r0, r5
   221fe:	f7fe fa06 	bl	2060e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   22202:	b118      	cbz	r0, 2220c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd8>
   22204:	2000      	movs	r0, #0
   22206:	bd70      	pop	{r4, r5, r6, pc}
   22208:	2042      	movs	r0, #66	; 0x42
   2220a:	bd70      	pop	{r4, r5, r6, pc}
   2220c:	2045      	movs	r0, #69	; 0x45
   2220e:	bd70      	pop	{r4, r5, r6, pc}
   22210:	b510      	push	{r4, lr}
   22212:	4604      	mov	r4, r0
   22214:	7840      	ldrb	r0, [r0, #1]
   22216:	06c0      	lsls	r0, r0, #27
   22218:	d413      	bmi.n	22242 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x10e>
   2221a:	f7f5 faa3 	bl	17764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   2221e:	0780      	lsls	r0, r0, #30
   22220:	d405      	bmi.n	2222e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfa>
   22222:	7d20      	ldrb	r0, [r4, #20]
   22224:	2802      	cmp	r0, #2
   22226:	d029      	beq.n	2227c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22228:	7da0      	ldrb	r0, [r4, #22]
   2222a:	2802      	cmp	r0, #2
   2222c:	d026      	beq.n	2227c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   2222e:	f7f5 fa99 	bl	17764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   22232:	0740      	lsls	r0, r0, #29
   22234:	d405      	bmi.n	22242 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x10e>
   22236:	7d20      	ldrb	r0, [r4, #20]
   22238:	2803      	cmp	r0, #3
   2223a:	d01f      	beq.n	2227c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   2223c:	7da0      	ldrb	r0, [r4, #22]
   2223e:	2803      	cmp	r0, #3
   22240:	d01c      	beq.n	2227c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   22242:	7860      	ldrb	r0, [r4, #1]
   22244:	07c0      	lsls	r0, r0, #31
   22246:	d002      	beq.n	2224e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x11a>
   22248:	f7f5 fa4c 	bl	176e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   2224c:	b1b0      	cbz	r0, 2227c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   2224e:	7860      	ldrb	r0, [r4, #1]
   22250:	06c1      	lsls	r1, r0, #27
   22252:	d405      	bmi.n	22260 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
   22254:	0701      	lsls	r1, r0, #28
   22256:	d503      	bpl.n	22260 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x12c>
   22258:	7d20      	ldrb	r0, [r4, #20]
   2225a:	2802      	cmp	r0, #2
   2225c:	d10e      	bne.n	2227c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   2225e:	e00f      	b.n	22280 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   22260:	7d21      	ldrb	r1, [r4, #20]
   22262:	2902      	cmp	r1, #2
   22264:	d001      	beq.n	2226a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x136>
   22266:	7ea1      	ldrb	r1, [r4, #26]
   22268:	b941      	cbnz	r1, 2227c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x148>
   2226a:	0700      	lsls	r0, r0, #28
   2226c:	d408      	bmi.n	22280 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   2226e:	f8d4 0005 	ldr.w	r0, [r4, #5]
   22272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   22276:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   2227a:	d201      	bcs.n	22280 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   2227c:	2011      	movs	r0, #17
   2227e:	bd10      	pop	{r4, pc}
   22280:	2000      	movs	r0, #0
   22282:	bd10      	pop	{r4, pc}
   22284:	b538      	push	{r3, r4, r5, lr}
   22286:	4604      	mov	r4, r0
   22288:	7800      	ldrb	r0, [r0, #0]
   2228a:	28ef      	cmp	r0, #239	; 0xef
   2228c:	d85c      	bhi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   2228e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   22292:	f8ad 0000 	strh.w	r0, [sp]
   22296:	9800      	ldr	r0, [sp, #0]
   22298:	f000 fa98 	bl	227cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x698>
   2229c:	b3a0      	cbz	r0, 22308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   2229e:	7860      	ldrb	r0, [r4, #1]
   222a0:	0701      	lsls	r1, r0, #28
   222a2:	d40b      	bmi.n	222bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x188>
   222a4:	f8d4 1002 	ldr.w	r1, [r4, #2]
   222a8:	f8d4 3005 	ldr.w	r3, [r4, #5]
   222ac:	0a0a      	lsrs	r2, r1, #8
   222ae:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   222b2:	d849      	bhi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   222b4:	2220      	movs	r2, #32
   222b6:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   222ba:	d845      	bhi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   222bc:	7a61      	ldrb	r1, [r4, #9]
   222be:	b319      	cbz	r1, 22308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   222c0:	2907      	cmp	r1, #7
   222c2:	d841      	bhi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   222c4:	7aa1      	ldrb	r1, [r4, #10]
   222c6:	b129      	cbz	r1, 222d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a0>
   222c8:	2901      	cmp	r1, #1
   222ca:	d003      	beq.n	222d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a0>
   222cc:	2902      	cmp	r1, #2
   222ce:	d001      	beq.n	222d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a0>
   222d0:	2903      	cmp	r1, #3
   222d2:	d139      	bne.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   222d4:	0742      	lsls	r2, r0, #29
   222d6:	d403      	bmi.n	222e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
   222d8:	2902      	cmp	r1, #2
   222da:	d001      	beq.n	222e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
   222dc:	2903      	cmp	r1, #3
   222de:	d105      	bne.n	222ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   222e0:	7ae1      	ldrb	r1, [r4, #11]
   222e2:	b109      	cbz	r1, 222e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b4>
   222e4:	2901      	cmp	r1, #1
   222e6:	d12f      	bne.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   222e8:	0741      	lsls	r1, r0, #29
   222ea:	d407      	bmi.n	222fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   222ec:	7ca1      	ldrb	r1, [r4, #18]
   222ee:	b129      	cbz	r1, 222fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   222f0:	2901      	cmp	r1, #1
   222f2:	d003      	beq.n	222fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   222f4:	2902      	cmp	r1, #2
   222f6:	d001      	beq.n	222fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c8>
   222f8:	2903      	cmp	r1, #3
   222fa:	d125      	bne.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   222fc:	06c1      	lsls	r1, r0, #27
   222fe:	d504      	bpl.n	2230a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d6>
   22300:	7d20      	ldrb	r0, [r4, #20]
   22302:	2801      	cmp	r0, #1
   22304:	d120      	bne.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22306:	e01b      	b.n	22340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   22308:	e01e      	b.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   2230a:	7d21      	ldrb	r1, [r4, #20]
   2230c:	2902      	cmp	r1, #2
   2230e:	d10b      	bne.n	22328 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1f4>
   22310:	07c1      	lsls	r1, r0, #31
   22312:	d019      	beq.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22314:	0741      	lsls	r1, r0, #29
   22316:	d417      	bmi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22318:	0701      	lsls	r1, r0, #28
   2231a:	d515      	bpl.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   2231c:	0641      	lsls	r1, r0, #25
   2231e:	d413      	bmi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22320:	0681      	lsls	r1, r0, #26
   22322:	d411      	bmi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22324:	0781      	lsls	r1, r0, #30
   22326:	d40f      	bmi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22328:	06c0      	lsls	r0, r0, #27
   2232a:	d409      	bmi.n	22340 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x20c>
   2232c:	7da0      	ldrb	r0, [r4, #22]
   2232e:	2801      	cmp	r0, #1
   22330:	d003      	beq.n	2233a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x206>
   22332:	2802      	cmp	r0, #2
   22334:	d001      	beq.n	2233a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x206>
   22336:	2803      	cmp	r0, #3
   22338:	d106      	bne.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   2233a:	7de0      	ldrb	r0, [r4, #23]
   2233c:	280f      	cmp	r0, #15
   2233e:	d803      	bhi.n	22348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x214>
   22340:	7e20      	ldrb	r0, [r4, #24]
   22342:	b118      	cbz	r0, 2234c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x218>
   22344:	2801      	cmp	r0, #1
   22346:	d001      	beq.n	2234c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x218>
   22348:	2012      	movs	r0, #18
   2234a:	bd38      	pop	{r3, r4, r5, pc}
   2234c:	2000      	movs	r0, #0
   2234e:	bd38      	pop	{r3, r4, r5, pc}
   22350:	b510      	push	{r4, lr}
   22352:	0004      	movs	r4, r0
   22354:	d005      	beq.n	22362 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22e>
   22356:	f7f5 fa05 	bl	17764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   2235a:	4384      	bics	r4, r0
   2235c:	d001      	beq.n	22362 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22e>
   2235e:	2000      	movs	r0, #0
   22360:	bd10      	pop	{r4, pc}
   22362:	2001      	movs	r0, #1
   22364:	bd10      	pop	{r4, pc}
   22366:	28fb      	cmp	r0, #251	; 0xfb
   22368:	d802      	bhi.n	22370 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x23c>
   2236a:	f5b1 6f29 	cmp.w	r1, #2704	; 0xa90
   2236e:	d901      	bls.n	22374 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   22370:	2011      	movs	r0, #17
   22372:	4770      	bx	lr
   22374:	2000      	movs	r0, #0
   22376:	4770      	bx	lr
   22378:	381b      	subs	r0, #27
   2237a:	28e1      	cmp	r0, #225	; 0xe1
   2237c:	d206      	bcs.n	2238c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x258>
   2237e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   22382:	d303      	bcc.n	2238c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x258>
   22384:	f244 2090 	movw	r0, #17040	; 0x4290
   22388:	4281      	cmp	r1, r0
   2238a:	d901      	bls.n	22390 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25c>
   2238c:	2012      	movs	r0, #18
   2238e:	4770      	bx	lr
   22390:	2000      	movs	r0, #0
   22392:	4770      	bx	lr
   22394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22398:	4605      	mov	r5, r0
   2239a:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   2239e:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   223a2:	4616      	mov	r6, r2
   223a4:	3030      	adds	r0, #48	; 0x30
   223a6:	b111      	cbz	r1, 223ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x27a>
   223a8:	f7f4 fb6a 	bl	16a80 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   223ac:	e001      	b.n	223b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x27e>
   223ae:	f7f1 f9c1 	bl	13734 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   223b2:	4680      	mov	r8, r0
   223b4:	2102      	movs	r1, #2
   223b6:	f7fd fa06 	bl	1f7c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   223ba:	4287      	cmp	r7, r0
   223bc:	d200      	bcs.n	223c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28c>
   223be:	4638      	mov	r0, r7
   223c0:	4607      	mov	r7, r0
   223c2:	2102      	movs	r1, #2
   223c4:	4640      	mov	r0, r8
   223c6:	f7fd f9fe 	bl	1f7c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   223ca:	4284      	cmp	r4, r0
   223cc:	d200      	bcs.n	223d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x29c>
   223ce:	4620      	mov	r0, r4
   223d0:	8829      	ldrh	r1, [r5, #0]
   223d2:	8031      	strh	r1, [r6, #0]
   223d4:	2f1b      	cmp	r7, #27
   223d6:	d913      	bls.n	22400 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2cc>
   223d8:	2ffb      	cmp	r7, #251	; 0xfb
   223da:	d300      	bcc.n	223de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2aa>
   223dc:	27fb      	movs	r7, #251	; 0xfb
   223de:	8077      	strh	r7, [r6, #2]
   223e0:	281b      	cmp	r0, #27
   223e2:	d90f      	bls.n	22404 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2d0>
   223e4:	28fb      	cmp	r0, #251	; 0xfb
   223e6:	d300      	bcc.n	223ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   223e8:	20fb      	movs	r0, #251	; 0xfb
   223ea:	80f0      	strh	r0, [r6, #6]
   223ec:	4640      	mov	r0, r8
   223ee:	f7ff fea3 	bl	22138 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   223f2:	80b0      	strh	r0, [r6, #4]
   223f4:	4640      	mov	r0, r8
   223f6:	f7ff fe9f 	bl	22138 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   223fa:	8130      	strh	r0, [r6, #8]
   223fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22400:	271b      	movs	r7, #27
   22402:	e7ec      	b.n	223de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2aa>
   22404:	201b      	movs	r0, #27
   22406:	e7f0      	b.n	223ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   22408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2240c:	7890      	ldrb	r0, [r2, #2]
   2240e:	9e06      	ldr	r6, [sp, #24]
   22410:	461d      	mov	r5, r3
   22412:	4614      	mov	r4, r2
   22414:	b908      	cbnz	r0, 2241a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   22416:	f7f5 f9a5 	bl	17764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   2241a:	78e4      	ldrb	r4, [r4, #3]
   2241c:	4607      	mov	r7, r0
   2241e:	b914      	cbnz	r4, 22426 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f2>
   22420:	f7f5 f9a0 	bl	17764 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   22424:	4604      	mov	r4, r0
   22426:	b16f      	cbz	r7, 22444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   22428:	b164      	cbz	r4, 22444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   2242a:	4638      	mov	r0, r7
   2242c:	f7ff fe8f 	bl	2214e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   22430:	4620      	mov	r0, r4
   22432:	f7ff fe8c 	bl	2214e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   22436:	b12f      	cbz	r7, 22444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   22438:	b124      	cbz	r4, 22444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   2243a:	702f      	strb	r7, [r5, #0]
   2243c:	7034      	strb	r4, [r6, #0]
   2243e:	2000      	movs	r0, #0
   22440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22444:	2009      	movs	r0, #9
   22446:	e7fb      	b.n	22440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x30c>
   22448:	207f      	movs	r0, #127	; 0x7f
   2244a:	f000 b9a0 	b.w	2278e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x65a>
   2244e:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   22452:	4688      	mov	r8, r1
   22454:	4604      	mov	r4, r0
   22456:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   22458:	4669      	mov	r1, sp
   2245a:	f7fd f8d1 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2245e:	b9e8      	cbnz	r0, 2249c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x368>
   22460:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
   22462:	2107      	movs	r1, #7
   22464:	f7fc fe45 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22468:	0005      	movs	r5, r0
   2246a:	d002      	beq.n	22472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   2246c:	7828      	ldrb	r0, [r5, #0]
   2246e:	b128      	cbz	r0, 2247c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x348>
   22470:	e008      	b.n	22484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x350>
   22472:	f240 71a1 	movw	r1, #1953	; 0x7a1
   22476:	2039      	movs	r0, #57	; 0x39
   22478:	f7ea fd06 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2247c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
   22480:	2803      	cmp	r0, #3
   22482:	d10b      	bne.n	2249c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x368>
   22484:	9e01      	ldr	r6, [sp, #4]
   22486:	f896 01a2 	ldrb.w	r0, [r6, #418]	; 0x1a2
   2248a:	f88d 0008 	strb.w	r0, [sp, #8]
   2248e:	9802      	ldr	r0, [sp, #8]
   22490:	9002      	str	r0, [sp, #8]
   22492:	f89d 0008 	ldrb.w	r0, [sp, #8]
   22496:	f506 76ac 	add.w	r6, r6, #344	; 0x158
   2249a:	b110      	cbz	r0, 224a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36e>
   2249c:	200c      	movs	r0, #12
   2249e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   224a2:	2700      	movs	r7, #0
   224a4:	2101      	movs	r1, #1
   224a6:	f105 0018 	add.w	r0, r5, #24
   224aa:	f000 fab5 	bl	22a18 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII>
   224ae:	7828      	ldrb	r0, [r5, #0]
   224b0:	21ff      	movs	r1, #255	; 0xff
   224b2:	2801      	cmp	r0, #1
   224b4:	d121      	bne.n	224fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   224b6:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
   224ba:	2803      	cmp	r0, #3
   224bc:	d01d      	beq.n	224fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   224be:	9a01      	ldr	r2, [sp, #4]
   224c0:	f892 2374 	ldrb.w	r2, [r2, #884]	; 0x374
   224c4:	f88d 2008 	strb.w	r2, [sp, #8]
   224c8:	9a02      	ldr	r2, [sp, #8]
   224ca:	9202      	str	r2, [sp, #8]
   224cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   224d0:	b14a      	cbz	r2, 224e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b2>
   224d2:	9a01      	ldr	r2, [sp, #4]
   224d4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   224d6:	f8b2 2376 	ldrh.w	r2, [r2, #886]	; 0x376
   224da:	429a      	cmp	r2, r3
   224dc:	d103      	bne.n	224e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b2>
   224de:	9801      	ldr	r0, [sp, #4]
   224e0:	f880 1375 	strb.w	r1, [r0, #885]	; 0x375
   224e4:	e005      	b.n	224f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   224e6:	2802      	cmp	r0, #2
   224e8:	d103      	bne.n	224f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   224ea:	2144      	movs	r1, #68	; 0x44
   224ec:	4620      	mov	r0, r4
   224ee:	f7f4 fb81 	bl	16bf4 <sym_K6D4ZGUN2C55UIS7AV5H24FZ7SST53KXVT53HQQ>
   224f2:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
   224f6:	2000      	movs	r0, #0
   224f8:	e7d1      	b.n	2249e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36a>
   224fa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
   224fe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
   22502:	f886 004b 	strb.w	r0, [r6, #75]	; 0x4b
   22506:	7d28      	ldrb	r0, [r5, #20]
   22508:	f886 004c 	strb.w	r0, [r6, #76]	; 0x4c
   2250c:	f898 0002 	ldrb.w	r0, [r8, #2]
   22510:	f886 004d 	strb.w	r0, [r6, #77]	; 0x4d
   22514:	364a      	adds	r6, #74	; 0x4a
   22516:	7031      	strb	r1, [r6, #0]
   22518:	e7ed      	b.n	224f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c2>
   2251a:	b508      	push	{r3, lr}
   2251c:	f890 1318 	ldrb.w	r1, [r0, #792]	; 0x318
   22520:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
   22524:	f88d 0000 	strb.w	r0, [sp]
   22528:	9800      	ldr	r0, [sp, #0]
   2252a:	9000      	str	r0, [sp, #0]
   2252c:	f89d 0000 	ldrb.w	r0, [sp]
   22530:	b100      	cbz	r0, 22534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   22532:	2001      	movs	r0, #1
   22534:	1e40      	subs	r0, r0, #1
   22536:	4208      	tst	r0, r1
   22538:	d003      	beq.n	22542 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x40e>
   2253a:	2904      	cmp	r1, #4
   2253c:	d001      	beq.n	22542 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x40e>
   2253e:	2001      	movs	r0, #1
   22540:	bd08      	pop	{r3, pc}
   22542:	2000      	movs	r0, #0
   22544:	bd08      	pop	{r3, pc}
   22546:	b508      	push	{r3, lr}
   22548:	f890 133c 	ldrb.w	r1, [r0, #828]	; 0x33c
   2254c:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
   22550:	f88d 0000 	strb.w	r0, [sp]
   22554:	9800      	ldr	r0, [sp, #0]
   22556:	9000      	str	r0, [sp, #0]
   22558:	f89d 0000 	ldrb.w	r0, [sp]
   2255c:	b100      	cbz	r0, 22560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42c>
   2255e:	2001      	movs	r0, #1
   22560:	1e40      	subs	r0, r0, #1
   22562:	4208      	tst	r0, r1
   22564:	d003      	beq.n	2256e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   22566:	2904      	cmp	r1, #4
   22568:	d001      	beq.n	2256e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x43a>
   2256a:	2001      	movs	r0, #1
   2256c:	bd08      	pop	{r3, pc}
   2256e:	2000      	movs	r0, #0
   22570:	bd08      	pop	{r3, pc}
   22572:	b570      	push	{r4, r5, r6, lr}
   22574:	4605      	mov	r5, r0
   22576:	2103      	movs	r1, #3
   22578:	f7fc fdbb 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2257c:	0004      	movs	r4, r0
   2257e:	d105      	bne.n	2258c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x458>
   22580:	2105      	movs	r1, #5
   22582:	4628      	mov	r0, r5
   22584:	f7fc fdb5 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   22588:	b100      	cbz	r0, 2258c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x458>
   2258a:	4604      	mov	r4, r0
   2258c:	4620      	mov	r0, r4
   2258e:	bd70      	pop	{r4, r5, r6, pc}
   22590:	b570      	push	{r4, r5, r6, lr}
   22592:	460e      	mov	r6, r1
   22594:	4604      	mov	r4, r0
   22596:	f7fe fb2f 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   2259a:	b9c8      	cbnz	r0, 225d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x49c>
   2259c:	4620      	mov	r0, r4
   2259e:	f7fd ffb6 	bl	2050e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   225a2:	b9a8      	cbnz	r0, 225d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x49c>
   225a4:	2103      	movs	r1, #3
   225a6:	4630      	mov	r0, r6
   225a8:	f7fc fda3 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   225ac:	0004      	movs	r4, r0
   225ae:	d004      	beq.n	225ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x486>
   225b0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   225b4:	f000 fa11 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   225b8:	b950      	cbnz	r0, 225d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x49c>
   225ba:	2105      	movs	r1, #5
   225bc:	4630      	mov	r0, r6
   225be:	f7fc fd98 	bl	1f0f2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   225c2:	0005      	movs	r5, r0
   225c4:	d006      	beq.n	225d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4a0>
   225c6:	f105 0040 	add.w	r0, r5, #64	; 0x40
   225ca:	f000 fa06 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   225ce:	b108      	cbz	r0, 225d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4a0>
   225d0:	200c      	movs	r0, #12
   225d2:	bd70      	pop	{r4, r5, r6, pc}
   225d4:	2102      	movs	r1, #2
   225d6:	4630      	mov	r0, r6
   225d8:	f7ea ff92 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   225dc:	b110      	cbz	r0, 225e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4b0>
   225de:	f241 4135 	movw	r1, #5173	; 0x1435
   225e2:	e010      	b.n	22606 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4d2>
   225e4:	b13c      	cbz	r4, 225f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4c2>
   225e6:	2103      	movs	r1, #3
   225e8:	4630      	mov	r0, r6
   225ea:	f7ea ff89 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   225ee:	b110      	cbz	r0, 225f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4c2>
   225f0:	f241 413c 	movw	r1, #5180	; 0x143c
   225f4:	e007      	b.n	22606 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4d2>
   225f6:	b14d      	cbz	r5, 2260c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4d8>
   225f8:	2105      	movs	r1, #5
   225fa:	4630      	mov	r0, r6
   225fc:	f7ea ff80 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   22600:	b120      	cbz	r0, 2260c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4d8>
   22602:	f241 4143 	movw	r1, #5187	; 0x1443
   22606:	2039      	movs	r0, #57	; 0x39
   22608:	f7ea fc3e 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2260c:	2000      	movs	r0, #0
   2260e:	bd70      	pop	{r4, r5, r6, pc}
   22610:	b510      	push	{r4, lr}
   22612:	f7f4 fa29 	bl	16a68 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   22616:	2804      	cmp	r0, #4
   22618:	d003      	beq.n	22622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4ee>
   2261a:	2805      	cmp	r0, #5
   2261c:	d001      	beq.n	22622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4ee>
   2261e:	2000      	movs	r0, #0
   22620:	bd10      	pop	{r4, pc}
   22622:	2001      	movs	r0, #1
   22624:	bd10      	pop	{r4, pc}
   22626:	b570      	push	{r4, r5, r6, lr}
   22628:	4605      	mov	r5, r0
   2262a:	f7fe f863 	bl	206f4 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   2262e:	b170      	cbz	r0, 2264e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x51a>
   22630:	4628      	mov	r0, r5
   22632:	f7fe fae1 	bl	20bf8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   22636:	2800      	cmp	r0, #0
   22638:	d008      	beq.n	2264c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x518>
   2263a:	4628      	mov	r0, r5
   2263c:	f7fe fad9 	bl	20bf2 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   22640:	4604      	mov	r4, r0
   22642:	4628      	mov	r0, r5
   22644:	f7fe faab 	bl	20b9e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   22648:	b118      	cbz	r0, 22652 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x51e>
   2264a:	200c      	movs	r0, #12
   2264c:	bd70      	pop	{r4, r5, r6, pc}
   2264e:	2042      	movs	r0, #66	; 0x42
   22650:	bd70      	pop	{r4, r5, r6, pc}
   22652:	b164      	cbz	r4, 2266e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x53a>
   22654:	8820      	ldrh	r0, [r4, #0]
   22656:	f7eb fb6f 	bl	dd38 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   2265a:	8820      	ldrh	r0, [r4, #0]
   2265c:	2101      	movs	r1, #1
   2265e:	f7ea ff4f 	bl	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   22662:	b120      	cbz	r0, 2266e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x53a>
   22664:	f241 61ac 	movw	r1, #5804	; 0x16ac
   22668:	2039      	movs	r0, #57	; 0x39
   2266a:	f7ea fc0d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2266e:	2000      	movs	r0, #0
   22670:	bd70      	pop	{r4, r5, r6, pc}
   22672:	b5f0      	push	{r4, r5, r6, r7, lr}
   22674:	b085      	sub	sp, #20
   22676:	4604      	mov	r4, r0
   22678:	8800      	ldrh	r0, [r0, #0]
   2267a:	4669      	mov	r1, sp
   2267c:	f7fc ffc0 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22680:	2800      	cmp	r0, #0
   22682:	d14e      	bne.n	22722 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ee>
   22684:	9801      	ldr	r0, [sp, #4]
   22686:	f890 11de 	ldrb.w	r1, [r0, #478]	; 0x1de
   2268a:	f88d 1010 	strb.w	r1, [sp, #16]
   2268e:	9904      	ldr	r1, [sp, #16]
   22690:	9104      	str	r1, [sp, #16]
   22692:	f89d 1010 	ldrb.w	r1, [sp, #16]
   22696:	30a8      	adds	r0, #168	; 0xa8
   22698:	b101      	cbz	r1, 2269c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x568>
   2269a:	2101      	movs	r1, #1
   2269c:	f88d 1008 	strb.w	r1, [sp, #8]
   226a0:	f89d 1000 	ldrb.w	r1, [sp]
   226a4:	b119      	cbz	r1, 226ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x57a>
   226a6:	7b01      	ldrb	r1, [r0, #12]
   226a8:	0689      	lsls	r1, r1, #26
   226aa:	d40f      	bmi.n	226cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x598>
   226ac:	e005      	b.n	226ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x586>
   226ae:	7f81      	ldrb	r1, [r0, #30]
   226b0:	291f      	cmp	r1, #31
   226b2:	d00b      	beq.n	226cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x598>
   226b4:	e001      	b.n	226ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x586>
   226b6:	2101      	movs	r1, #1
   226b8:	e000      	b.n	226bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x588>
   226ba:	2100      	movs	r1, #0
   226bc:	f88d 100c 	strb.w	r1, [sp, #12]
   226c0:	2105      	movs	r1, #5
   226c2:	306e      	adds	r0, #110	; 0x6e
   226c4:	f7fe ff39 	bl	2153a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3a>
   226c8:	b128      	cbz	r0, 226d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a2>
   226ca:	e007      	b.n	226dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5a8>
   226cc:	f89d 1008 	ldrb.w	r1, [sp, #8]
   226d0:	2900      	cmp	r1, #0
   226d2:	d1f2      	bne.n	226ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x586>
   226d4:	e7ef      	b.n	226b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x582>
   226d6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   226da:	b308      	cbz	r0, 22720 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ec>
   226dc:	8921      	ldrh	r1, [r4, #8]
   226de:	88e0      	ldrh	r0, [r4, #6]
   226e0:	f7ff fe4a 	bl	22378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   226e4:	2800      	cmp	r0, #0
   226e6:	d11c      	bne.n	22722 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ee>
   226e8:	88a1      	ldrh	r1, [r4, #4]
   226ea:	8860      	ldrh	r0, [r4, #2]
   226ec:	f7ff fe44 	bl	22378 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   226f0:	2800      	cmp	r0, #0
   226f2:	d116      	bne.n	22722 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ee>
   226f4:	8921      	ldrh	r1, [r4, #8]
   226f6:	88e0      	ldrh	r0, [r4, #6]
   226f8:	f7ff fe35 	bl	22366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x232>
   226fc:	2800      	cmp	r0, #0
   226fe:	d110      	bne.n	22722 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ee>
   22700:	88a1      	ldrh	r1, [r4, #4]
   22702:	8860      	ldrh	r0, [r4, #2]
   22704:	f7ff fe2f 	bl	22366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x232>
   22708:	0006      	movs	r6, r0
   2270a:	d10a      	bne.n	22722 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ee>
   2270c:	9801      	ldr	r0, [sp, #4]
   2270e:	f500 75ad 	add.w	r5, r0, #346	; 0x15a
   22712:	27ff      	movs	r7, #255	; 0xff
   22714:	706f      	strb	r7, [r5, #1]
   22716:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2271a:	b121      	cbz	r1, 22726 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5f2>
   2271c:	263a      	movs	r6, #58	; 0x3a
   2271e:	e030      	b.n	22782 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64e>
   22720:	201a      	movs	r0, #26
   22722:	b005      	add	sp, #20
   22724:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22726:	f89d 1000 	ldrb.w	r1, [sp]
   2272a:	b371      	cbz	r1, 2278a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x656>
   2272c:	2100      	movs	r1, #0
   2272e:	aa02      	add	r2, sp, #8
   22730:	f7ff fe30 	bl	22394 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x260>
   22734:	8861      	ldrh	r1, [r4, #2]
   22736:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2273a:	4281      	cmp	r1, r0
   2273c:	d200      	bcs.n	22740 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60c>
   2273e:	4608      	mov	r0, r1
   22740:	80e8      	strh	r0, [r5, #6]
   22742:	88a1      	ldrh	r1, [r4, #4]
   22744:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   22748:	4281      	cmp	r1, r0
   2274a:	d200      	bcs.n	2274e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x61a>
   2274c:	4608      	mov	r0, r1
   2274e:	8128      	strh	r0, [r5, #8]
   22750:	88e2      	ldrh	r2, [r4, #6]
   22752:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   22756:	428a      	cmp	r2, r1
   22758:	d200      	bcs.n	2275c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x628>
   2275a:	4611      	mov	r1, r2
   2275c:	8069      	strh	r1, [r5, #2]
   2275e:	8922      	ldrh	r2, [r4, #8]
   22760:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   22764:	428a      	cmp	r2, r1
   22766:	d200      	bcs.n	2276a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x636>
   22768:	4611      	mov	r1, r2
   2276a:	f640 0248 	movw	r2, #2120	; 0x848
   2276e:	80a9      	strh	r1, [r5, #4]
   22770:	4291      	cmp	r1, r2
   22772:	d300      	bcc.n	22776 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x642>
   22774:	4611      	mov	r1, r2
   22776:	80a9      	strh	r1, [r5, #4]
   22778:	4290      	cmp	r0, r2
   2277a:	d200      	bcs.n	2277e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64a>
   2277c:	4602      	mov	r2, r0
   2277e:	812a      	strh	r2, [r5, #8]
   22780:	702f      	strb	r7, [r5, #0]
   22782:	2000      	movs	r0, #0
   22784:	7068      	strb	r0, [r5, #1]
   22786:	4630      	mov	r0, r6
   22788:	e7cb      	b.n	22722 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5ee>
   2278a:	2101      	movs	r1, #1
   2278c:	e7cf      	b.n	2272e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x5fa>
   2278e:	b508      	push	{r3, lr}
   22790:	f640 1288 	movw	r2, #2440	; 0x988
   22794:	2300      	movs	r3, #0
   22796:	4669      	mov	r1, sp
   22798:	f7fb f85e 	bl	1d858 <mpsl_fem_tx_power_split>
   2279c:	bd08      	pop	{r3, pc}
   2279e:	b530      	push	{r4, r5, lr}
   227a0:	f340 0400 	sbfx	r4, r0, #0, #1
   227a4:	f340 0040 	sbfx	r0, r0, #1, #1
   227a8:	1c40      	adds	r0, r0, #1
   227aa:	9d03      	ldr	r5, [sp, #12]
   227ac:	1c64      	adds	r4, r4, #1
   227ae:	d000      	beq.n	227b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x67e>
   227b0:	b119      	cbz	r1, 227ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x686>
   227b2:	b100      	cbz	r0, 227b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x682>
   227b4:	b10a      	cbz	r2, 227ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x686>
   227b6:	b91c      	cbnz	r4, 227c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68c>
   227b8:	e001      	b.n	227be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68a>
   227ba:	2011      	movs	r0, #17
   227bc:	bd30      	pop	{r4, r5, pc}
   227be:	2100      	movs	r1, #0
   227c0:	7019      	strb	r1, [r3, #0]
   227c2:	b900      	cbnz	r0, 227c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x692>
   227c4:	2200      	movs	r2, #0
   227c6:	702a      	strb	r2, [r5, #0]
   227c8:	2000      	movs	r0, #0
   227ca:	bd30      	pop	{r4, r5, pc}
   227cc:	b2c0      	uxtb	r0, r0
   227ce:	06c1      	lsls	r1, r0, #27
   227d0:	d415      	bmi.n	227fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6ca>
   227d2:	0681      	lsls	r1, r0, #26
   227d4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   227d8:	d503      	bpl.n	227e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6ae>
   227da:	bb21      	cbnz	r1, 22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   227dc:	0781      	lsls	r1, r0, #30
   227de:	d422      	bmi.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   227e0:	e001      	b.n	227e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6b2>
   227e2:	2900      	cmp	r1, #0
   227e4:	d1fa      	bne.n	227dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6a8>
   227e6:	0701      	lsls	r1, r0, #28
   227e8:	d51b      	bpl.n	22822 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6ee>
   227ea:	07c1      	lsls	r1, r0, #31
   227ec:	d01b      	beq.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   227ee:	0781      	lsls	r1, r0, #30
   227f0:	d419      	bmi.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   227f2:	0641      	lsls	r1, r0, #25
   227f4:	d417      	bmi.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   227f6:	0741      	lsls	r1, r0, #29
   227f8:	d415      	bmi.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   227fa:	0680      	lsls	r0, r0, #26
   227fc:	e00f      	b.n	2281e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6ea>
   227fe:	0641      	lsls	r1, r0, #25
   22800:	d411      	bmi.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   22802:	0681      	lsls	r1, r0, #26
   22804:	d40f      	bmi.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   22806:	07c1      	lsls	r1, r0, #31
   22808:	ea4f 7180 	mov.w	r1, r0, lsl #30
   2280c:	d004      	beq.n	22818 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6e4>
   2280e:	2900      	cmp	r1, #0
   22810:	db02      	blt.n	22818 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6e4>
   22812:	0740      	lsls	r0, r0, #29
   22814:	d405      	bmi.n	22822 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6ee>
   22816:	e006      	b.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   22818:	0701      	lsls	r1, r0, #28
   2281a:	d404      	bmi.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   2281c:	0740      	lsls	r0, r0, #29
   2281e:	2800      	cmp	r0, #0
   22820:	db01      	blt.n	22826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x6f2>
   22822:	2001      	movs	r0, #1
   22824:	4770      	bx	lr
   22826:	2000      	movs	r0, #0
   22828:	4770      	bx	lr
   2282a:	b510      	push	{r4, lr}
   2282c:	f7ee fa6e 	bl	10d0c <sym_FSDCMX3C6Q67T66V54TUJDLMC4XSLM7ZTOTYRDI>
   22830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22834:	f7f4 bf5c 	b.w	176f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0xc>
   22838:	b510      	push	{r4, lr}
   2283a:	f7f0 feeb 	bl	13614 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   2283e:	b108      	cbz	r0, 22844 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x710>
   22840:	21fd      	movs	r1, #253	; 0xfd
   22842:	e004      	b.n	2284e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x71a>
   22844:	f7ee fa9a 	bl	10d7c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   22848:	b120      	cbz	r0, 22854 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x720>
   2284a:	f44f 7181 	mov.w	r1, #258	; 0x102
   2284e:	2001      	movs	r0, #1
   22850:	f7ea fb1a 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   22854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22858:	2002      	movs	r0, #2
   2285a:	f7fc bc27 	b.w	1f0ac <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   2285e:	b510      	push	{r4, lr}
   22860:	2001      	movs	r0, #1
   22862:	f7fc fc23 	bl	1f0ac <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   22866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2286a:	2000      	movs	r0, #0
   2286c:	f7fc bc1e 	b.w	1f0ac <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   22870:	6802      	ldr	r2, [r0, #0]
   22872:	b912      	cbnz	r2, 2287a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x746>
   22874:	6001      	str	r1, [r0, #0]
   22876:	4770      	bx	lr
   22878:	4602      	mov	r2, r0
   2287a:	6850      	ldr	r0, [r2, #4]
   2287c:	b108      	cbz	r0, 22882 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x74e>
   2287e:	428a      	cmp	r2, r1
   22880:	d1fa      	bne.n	22878 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x744>
   22882:	428a      	cmp	r2, r1
   22884:	d0f7      	beq.n	22876 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x742>
   22886:	6051      	str	r1, [r2, #4]
   22888:	4770      	bx	lr
   2288a:	b510      	push	{r4, lr}
   2288c:	4604      	mov	r4, r0
   2288e:	e002      	b.n	22896 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x762>
   22890:	6820      	ldr	r0, [r4, #0]
   22892:	4780      	blx	r0
   22894:	6864      	ldr	r4, [r4, #4]
   22896:	2c00      	cmp	r4, #0
   22898:	d1fa      	bne.n	22890 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x75c>
   2289a:	bd10      	pop	{r4, pc}
   2289c:	b510      	push	{r4, lr}
   2289e:	f7ff ffde 	bl	2285e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x72a>
   228a2:	f7ea ffbd 	bl	d820 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   228a6:	f7eb fad7 	bl	de58 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   228aa:	f7eb fdb3 	bl	e414 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   228ae:	2800      	cmp	r0, #0
   228b0:	d003      	beq.n	228ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x786>
   228b2:	21df      	movs	r1, #223	; 0xdf
   228b4:	2001      	movs	r0, #1
   228b6:	f7ea fae7 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   228ba:	bd10      	pop	{r4, pc}
   228bc:	f7ff bfee 	b.w	2289c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x768>
   228c0:	b510      	push	{r4, lr}
   228c2:	f7ff ffb9 	bl	22838 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x704>
   228c6:	f7f2 f825 	bl	14914 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   228ca:	2800      	cmp	r0, #0
   228cc:	d004      	beq.n	228d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x7a4>
   228ce:	f240 1117 	movw	r1, #279	; 0x117
   228d2:	2001      	movs	r0, #1
   228d4:	f7ea fad8 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   228d8:	bd10      	pop	{r4, pc}

000228da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   228da:	f7fa bc27 	b.w	1d12c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   228de:	0001      	.short	0x0001
   228e0:	0002000b 	.word	0x0002000b
   228e4:	0005000a 	.word	0x0005000a
   228e8:	000a0009 	.word	0x000a0009
   228ec:	00140008 	.word	0x00140008
   228f0:	001e0007 	.word	0x001e0007
   228f4:	00320006 	.word	0x00320006
   228f8:	004b0005 	.word	0x004b0005
   228fc:	00640004 	.word	0x00640004
   22900:	00960003 	.word	0x00960003
   22904:	00fa0002 	.word	0x00fa0002
   22908:	01f40001 	.word	0x01f40001
	...

0002290e <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   2290e:	b518      	push	{r3, r4, lr}
   22910:	2200      	movs	r2, #0
   22912:	704a      	strb	r2, [r1, #1]
   22914:	2317      	movs	r3, #23
   22916:	700b      	strb	r3, [r1, #0]
   22918:	7202      	strb	r2, [r0, #8]
   2291a:	f8d0 400a 	ldr.w	r4, [r0, #10]
   2291e:	604c      	str	r4, [r1, #4]
   22920:	89c3      	ldrh	r3, [r0, #14]
   22922:	810b      	strh	r3, [r1, #8]
   22924:	7a03      	ldrb	r3, [r0, #8]
   22926:	f88d 3000 	strb.w	r3, [sp]
   2292a:	9b00      	ldr	r3, [sp, #0]
   2292c:	9300      	str	r3, [sp, #0]
   2292e:	f89d 3000 	ldrb.w	r3, [sp]
   22932:	2b00      	cmp	r3, #0
   22934:	d1f0      	bne.n	22918 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   22936:	bd18      	pop	{r3, r4, pc}

00022938 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   22938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2293a:	460d      	mov	r5, r1
   2293c:	4604      	mov	r4, r0
   2293e:	f7ec ffad 	bl	f89c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   22942:	2600      	movs	r6, #0
   22944:	b1f8      	cbz	r0, 22986 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   22946:	f5a4 70f5 	sub.w	r0, r4, #490	; 0x1ea
   2294a:	7226      	strb	r6, [r4, #8]
   2294c:	8800      	ldrh	r0, [r0, #0]
   2294e:	f8ad 0000 	strh.w	r0, [sp]
   22952:	a902      	add	r1, sp, #8
   22954:	f7fc fe54 	bl	1f600 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   22958:	b108      	cbz	r0, 2295e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   2295a:	2124      	movs	r1, #36	; 0x24
   2295c:	e010      	b.n	22980 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   2295e:	9803      	ldr	r0, [sp, #12]
   22960:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
   22964:	f88d 1002 	strb.w	r1, [sp, #2]
   22968:	7841      	ldrb	r1, [r0, #1]
   2296a:	f88d 1003 	strb.w	r1, [sp, #3]
   2296e:	8840      	ldrh	r0, [r0, #2]
   22970:	f8ad 0004 	strh.w	r0, [sp, #4]
   22974:	2102      	movs	r1, #2
   22976:	4668      	mov	r0, sp
   22978:	f7ff fb22 	bl	21fc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   2297c:	b118      	cbz	r0, 22986 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   2297e:	213a      	movs	r1, #58	; 0x3a
   22980:	207e      	movs	r0, #126	; 0x7e
   22982:	f7ea fa81 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   22986:	202c      	movs	r0, #44	; 0x2c
   22988:	7028      	strb	r0, [r5, #0]
   2298a:	706e      	strb	r6, [r5, #1]
   2298c:	f8d4 000a 	ldr.w	r0, [r4, #10]
   22990:	6068      	str	r0, [r5, #4]
   22992:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00022994 <sym_HDXV6XMLHCLB5RJEPHSKKLJJM3TFLHYSQSNRE7Y>:
   22994:	6888      	ldr	r0, [r1, #8]
   22996:	f7fc bd2c 	b.w	1f3f2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0002299a <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>:
   2299a:	b508      	push	{r3, lr}
   2299c:	7c01      	ldrb	r1, [r0, #16]
   2299e:	f88d 1000 	strb.w	r1, [sp]
   229a2:	9900      	ldr	r1, [sp, #0]
   229a4:	9100      	str	r1, [sp, #0]
   229a6:	f89d 2000 	ldrb.w	r2, [sp]
   229aa:	2a01      	cmp	r2, #1
   229ac:	d003      	beq.n	229b6 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ+0x1c>
   229ae:	f000 f814 	bl	229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>
   229b2:	2800      	cmp	r0, #0
   229b4:	d000      	beq.n	229b8 <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ+0x1e>
   229b6:	2001      	movs	r0, #1
   229b8:	bd08      	pop	{r3, pc}

000229ba <sym_LIFN2Y3GE7UOQ2L3AQIJRF3IQCD3MRRIZIOEAJY>:
   229ba:	b510      	push	{r4, lr}
   229bc:	4604      	mov	r4, r0
   229be:	f000 f841 	bl	22a44 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x2c>
   229c2:	b918      	cbnz	r0, 229cc <sym_LIFN2Y3GE7UOQ2L3AQIJRF3IQCD3MRRIZIOEAJY+0x12>
   229c4:	f104 0020 	add.w	r0, r4, #32
   229c8:	f7f4 f872 	bl	16ab0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
   229cc:	2000      	movs	r0, #0
   229ce:	bd10      	pop	{r4, pc}

000229d0 <sym_S65COPWIAFLT7QK4B3CGHSYTM4OO4NO3OW6UHHI>:
   229d0:	b510      	push	{r4, lr}
   229d2:	f000 f837 	bl	22a44 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x2c>
   229d6:	2000      	movs	r0, #0
   229d8:	bd10      	pop	{r4, pc}

000229da <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY>:
   229da:	b50e      	push	{r1, r2, r3, lr}
   229dc:	7c01      	ldrb	r1, [r0, #16]
   229de:	f88d 1000 	strb.w	r1, [sp]
   229e2:	9900      	ldr	r1, [sp, #0]
   229e4:	9100      	str	r1, [sp, #0]
   229e6:	f89d 2000 	ldrb.w	r2, [sp]
   229ea:	b19a      	cbz	r2, 22a14 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY+0x3a>
   229ec:	7c01      	ldrb	r1, [r0, #16]
   229ee:	f88d 1008 	strb.w	r1, [sp, #8]
   229f2:	9902      	ldr	r1, [sp, #8]
   229f4:	9100      	str	r1, [sp, #0]
   229f6:	f89d 2000 	ldrb.w	r2, [sp]
   229fa:	2a01      	cmp	r2, #1
   229fc:	d00a      	beq.n	22a14 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY+0x3a>
   229fe:	7c00      	ldrb	r0, [r0, #16]
   22a00:	f88d 0004 	strb.w	r0, [sp, #4]
   22a04:	9801      	ldr	r0, [sp, #4]
   22a06:	9000      	str	r0, [sp, #0]
   22a08:	f89d 1000 	ldrb.w	r1, [sp]
   22a0c:	2907      	cmp	r1, #7
   22a0e:	d001      	beq.n	22a14 <sym_HUV6MMPRL3KDMQFLXMNXTNDYSK5H7OKRHLVMQTY+0x3a>
   22a10:	2001      	movs	r0, #1
   22a12:	bd0e      	pop	{r1, r2, r3, pc}
   22a14:	2000      	movs	r0, #0
   22a16:	bd0e      	pop	{r1, r2, r3, pc}

00022a18 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII>:
   22a18:	b570      	push	{r4, r5, r6, lr}
   22a1a:	460e      	mov	r6, r1
   22a1c:	4605      	mov	r5, r0
   22a1e:	f7ff ffbc 	bl	2299a <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
   22a22:	2800      	cmp	r0, #0
   22a24:	d00d      	beq.n	22a42 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x2a>
   22a26:	f105 0410 	add.w	r4, r5, #16
   22a2a:	2e01      	cmp	r6, #1
   22a2c:	d107      	bne.n	22a3e <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x26>
   22a2e:	2007      	movs	r0, #7
   22a30:	7020      	strb	r0, [r4, #0]
   22a32:	7928      	ldrb	r0, [r5, #4]
   22a34:	f7f8 fe88 	bl	1b748 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   22a38:	7928      	ldrb	r0, [r5, #4]
   22a3a:	f7f8 ffe9 	bl	1ba10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   22a3e:	2001      	movs	r0, #1
   22a40:	7020      	strb	r0, [r4, #0]
   22a42:	bd70      	pop	{r4, r5, r6, pc}
   22a44:	b510      	push	{r4, lr}
   22a46:	4604      	mov	r4, r0
   22a48:	f7ff ffa7 	bl	2299a <sym_2RDISJXERNPMBLAROCL4JWHLKVABCMPSEI3SYLQ>
   22a4c:	b178      	cbz	r0, 22a6e <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x56>
   22a4e:	2101      	movs	r1, #1
   22a50:	4620      	mov	r0, r4
   22a52:	f7ff ffe1 	bl	22a18 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII>
   22a56:	7920      	ldrb	r0, [r4, #4]
   22a58:	f7f8 ffb8 	bl	1b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   22a5c:	b110      	cbz	r0, 22a64 <sym_T7A3EXF7COQYY26GAAJPICZ426P6RGZH73WYDII+0x4c>
   22a5e:	2000      	movs	r0, #0
   22a60:	7420      	strb	r0, [r4, #16]
   22a62:	bd10      	pop	{r4, pc}
   22a64:	f44f 7101 	mov.w	r1, #516	; 0x204
   22a68:	200b      	movs	r0, #11
   22a6a:	f7ea fa0d 	bl	ce88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   22a6e:	200c      	movs	r0, #12
   22a70:	bd10      	pop	{r4, pc}

00022a72 <sym_QT7CN5RSIHUVCYKTUKHJII2MTGNYH7F3ANVDDWQ>:
   22a72:	4770      	bx	lr

00022a74 <sym_A6N2BBHUJC7YLWYSZOSKWVPYJZL7XXMIBPN5XLA>:
   22a74:	7d00      	ldrb	r0, [r0, #20]
   22a76:	28ff      	cmp	r0, #255	; 0xff
   22a78:	d001      	beq.n	22a7e <sym_A6N2BBHUJC7YLWYSZOSKWVPYJZL7XXMIBPN5XLA+0xa>
   22a7a:	2000      	movs	r0, #0
   22a7c:	4770      	bx	lr
   22a7e:	2001      	movs	r0, #1
   22a80:	4770      	bx	lr

00022a82 <sym_W7HPZT4ZZWPRGP66GDZI4KM3L4VPFAYQTFZ7HRI>:
   22a82:	2106      	movs	r1, #6
   22a84:	f7ea bd3c 	b.w	d500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>

00022a88 <sym_CCCM5F3WBE5G2EGSSOBDEOIOAKSXNRWOXMM3JZA>:
   22a88:	4770      	bx	lr

00022a8a <sym_AGYGMJJLNZ3OUAGF7EU6BV4ZDBZCTDBRZLY27WA>:
   22a8a:	b510      	push	{r4, lr}
   22a8c:	211d      	movs	r1, #29
   22a8e:	1d04      	adds	r4, r0, #4
   22a90:	70c1      	strb	r1, [r0, #3]
   22a92:	f7f4 fe97 	bl	177c4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
   22a96:	7020      	strb	r0, [r4, #0]
   22a98:	bd10      	pop	{r4, pc}

00022a9a <sym_KEGGHGQL6JDMBU54KJKZYI4X76QJRM6TXCH5TWI>:
   22a9a:	b510      	push	{r4, lr}
   22a9c:	211e      	movs	r1, #30
   22a9e:	1d04      	adds	r4, r0, #4
   22aa0:	70c1      	strb	r1, [r0, #3]
   22aa2:	f7f4 fe8f 	bl	177c4 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
   22aa6:	7020      	strb	r0, [r4, #0]
   22aa8:	bd10      	pop	{r4, pc}

00022aaa <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   22aaa:	b510      	push	{r4, lr}
   22aac:	f7f5 fc74 	bl	18398 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   22ab0:	f7f5 f8ae 	bl	17c10 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   22ab4:	f7f4 feea 	bl	1788c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   22ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22abc:	f7f5 b83a 	b.w	17b34 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00022ac0 <sym_WCPWOVVEASSG4MEQ4OYZCASM4KFKZK6VT6CIMIA>:
   22ac0:	b508      	push	{r3, lr}
   22ac2:	466b      	mov	r3, sp
   22ac4:	f7f6 fe1c 	bl	19700 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   22ac8:	bd08      	pop	{r3, pc}

00022aca <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   22aca:	b510      	push	{r4, lr}
   22acc:	4604      	mov	r4, r0
   22ace:	4608      	mov	r0, r1
   22ad0:	f7f5 fe02 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   22ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   22ad8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   22adc:	fbb0 f0f1 	udiv	r0, r0, r1
   22ae0:	1a20      	subs	r0, r4, r0
   22ae2:	1e80      	subs	r0, r0, #2
   22ae4:	bd10      	pop	{r4, pc}

00022ae6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   22ae6:	b510      	push	{r4, lr}
   22ae8:	4604      	mov	r4, r0
   22aea:	4608      	mov	r0, r1
   22aec:	f7f5 fdf4 	bl	186d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   22af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   22af4:	fbb0 f0f1 	udiv	r0, r0, r1
   22af8:	1a20      	subs	r0, r4, r0
   22afa:	bd10      	pop	{r4, pc}

00022afc <sym_VCM3BICZ5QLCEBBK5263KDY2XJT4MJLUF43FCFA>:
   22afc:	680a      	ldr	r2, [r1, #0]
   22afe:	6002      	str	r2, [r0, #0]
   22b00:	790b      	ldrb	r3, [r1, #4]
   22b02:	7103      	strb	r3, [r0, #4]
   22b04:	4770      	bx	lr

00022b06 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY>:
   22b06:	2100      	movs	r1, #0
   22b08:	6001      	str	r1, [r0, #0]
   22b0a:	8081      	strh	r1, [r0, #4]
   22b0c:	4770      	bx	lr
   22b0e:	2804      	cmp	r0, #4
   22b10:	d202      	bcs.n	22b18 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x12>
   22b12:	f04f 0028 	mov.w	r0, #40	; 0x28
   22b16:	4770      	bx	lr
   22b18:	d102      	bne.n	22b20 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x1a>
   22b1a:	f04f 0010 	mov.w	r0, #16
   22b1e:	4770      	bx	lr
   22b20:	f04f 0000 	mov.w	r0, #0
   22b24:	4770      	bx	lr
   22b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b2a:	000d      	movs	r5, r1
   22b2c:	4604      	mov	r4, r0
   22b2e:	f04f 0602 	mov.w	r6, #2
   22b32:	f04f 0701 	mov.w	r7, #1
   22b36:	d008      	beq.n	22b4a <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x44>
   22b38:	7828      	ldrb	r0, [r5, #0]
   22b3a:	b1d0      	cbz	r0, 22b72 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x6c>
   22b3c:	2801      	cmp	r0, #1
   22b3e:	d007      	beq.n	22b50 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x4a>
   22b40:	2802      	cmp	r0, #2
   22b42:	d014      	beq.n	22b6e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x68>
   22b44:	2803      	cmp	r0, #3
   22b46:	d13e      	bne.n	22bc6 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xc0>
   22b48:	e016      	b.n	22b78 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x72>
   22b4a:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   22b4e:	e00e      	b.n	22b6e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x68>
   22b50:	6868      	ldr	r0, [r5, #4]
   22b52:	28c8      	cmp	r0, #200	; 0xc8
   22b54:	d303      	bcc.n	22b5e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x58>
   22b56:	2103      	movs	r1, #3
   22b58:	f7f8 f8e6 	bl	1ad28 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   22b5c:	b108      	cbz	r0, 22b62 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x5c>
   22b5e:	2600      	movs	r6, #0
   22b60:	e007      	b.n	22b72 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x6c>
   22b62:	4620      	mov	r0, r4
   22b64:	6869      	ldr	r1, [r5, #4]
   22b66:	f000 f833 	bl	22bd0 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xca>
   22b6a:	2601      	movs	r6, #1
   22b6c:	e001      	b.n	22b72 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x6c>
   22b6e:	f7f6 ffff 	bl	19b70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   22b72:	4630      	mov	r0, r6
   22b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b78:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   22b7c:	2800      	cmp	r0, #0
   22b7e:	d1f6      	bne.n	22b6e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x68>
   22b80:	6868      	ldr	r0, [r5, #4]
   22b82:	f7f6 ffc7 	bl	19b14 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   22b86:	b1f0      	cbz	r0, 22bc6 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xc0>
   22b88:	6869      	ldr	r1, [r5, #4]
   22b8a:	7808      	ldrb	r0, [r1, #0]
   22b8c:	b130      	cbz	r0, 22b9c <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x96>
   22b8e:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   22b92:	2805      	cmp	r0, #5
   22b94:	d008      	beq.n	22ba8 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xa2>
   22b96:	f44f 71be 	mov.w	r1, #380	; 0x17c
   22b9a:	e011      	b.n	22bc0 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xba>
   22b9c:	4620      	mov	r0, r4
   22b9e:	f000 f81f 	bl	22be0 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xda>
   22ba2:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   22ba6:	e7e2      	b.n	22b6e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x68>
   22ba8:	4620      	mov	r0, r4
   22baa:	f000 f832 	bl	22c12 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x10c>
   22bae:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   22bb2:	4621      	mov	r1, r4
   22bb4:	f000 f80a 	bl	22bcc <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xc6>
   22bb8:	2800      	cmp	r0, #0
   22bba:	d1d8      	bne.n	22b6e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x68>
   22bbc:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   22bc0:	206a      	movs	r0, #106	; 0x6a
   22bc2:	f7fa fbbf 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   22bc6:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   22bca:	e7d0      	b.n	22b6e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x68>
   22bcc:	f7f8 ba9a 	b.w	1b104 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   22bd0:	4602      	mov	r2, r0
   22bd2:	7803      	ldrb	r3, [r0, #0]
   22bd4:	6840      	ldr	r0, [r0, #4]
   22bd6:	4408      	add	r0, r1
   22bd8:	6050      	str	r0, [r2, #4]
   22bda:	3859      	subs	r0, #89	; 0x59
   22bdc:	f7f9 b972 	b.w	1bec4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   22be0:	2201      	movs	r2, #1
   22be2:	7002      	strb	r2, [r0, #0]
   22be4:	2200      	movs	r2, #0
   22be6:	72c2      	strb	r2, [r0, #11]
   22be8:	790a      	ldrb	r2, [r1, #4]
   22bea:	b172      	cbz	r2, 22c0a <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x104>
   22bec:	2200      	movs	r2, #0
   22bee:	8102      	strh	r2, [r0, #8]
   22bf0:	794a      	ldrb	r2, [r1, #5]
   22bf2:	b162      	cbz	r2, 22c0e <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x108>
   22bf4:	2203      	movs	r2, #3
   22bf6:	7282      	strb	r2, [r0, #10]
   22bf8:	688a      	ldr	r2, [r1, #8]
   22bfa:	326a      	adds	r2, #106	; 0x6a
   22bfc:	6042      	str	r2, [r0, #4]
   22bfe:	68c9      	ldr	r1, [r1, #12]
   22c00:	6101      	str	r1, [r0, #16]
   22c02:	2103      	movs	r1, #3
   22c04:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   22c08:	4770      	bx	lr
   22c0a:	222b      	movs	r2, #43	; 0x2b
   22c0c:	e7ef      	b.n	22bee <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xe8>
   22c0e:	2202      	movs	r2, #2
   22c10:	e7f1      	b.n	22bf6 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xf0>
   22c12:	b510      	push	{r4, lr}
   22c14:	2200      	movs	r2, #0
   22c16:	7002      	strb	r2, [r0, #0]
   22c18:	72c2      	strb	r2, [r0, #11]
   22c1a:	790a      	ldrb	r2, [r1, #4]
   22c1c:	b1a2      	cbz	r2, 22c48 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x142>
   22c1e:	2200      	movs	r2, #0
   22c20:	8102      	strh	r2, [r0, #8]
   22c22:	794a      	ldrb	r2, [r1, #5]
   22c24:	b192      	cbz	r2, 22c4c <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x146>
   22c26:	2203      	movs	r2, #3
   22c28:	7282      	strb	r2, [r0, #10]
   22c2a:	68ca      	ldr	r2, [r1, #12]
   22c2c:	326a      	adds	r2, #106	; 0x6a
   22c2e:	6042      	str	r2, [r0, #4]
   22c30:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   22c34:	6889      	ldr	r1, [r1, #8]
   22c36:	17cb      	asrs	r3, r1, #31
   22c38:	1861      	adds	r1, r4, r1
   22c3a:	415a      	adcs	r2, r3
   22c3c:	e9c0 1204 	strd	r1, r2, [r0, #16]
   22c40:	2104      	movs	r1, #4
   22c42:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   22c46:	bd10      	pop	{r4, pc}
   22c48:	222b      	movs	r2, #43	; 0x2b
   22c4a:	e7e9      	b.n	22c20 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x11a>
   22c4c:	2202      	movs	r2, #2
   22c4e:	e7eb      	b.n	22c28 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x122>
   22c50:	b570      	push	{r4, r5, r6, lr}
   22c52:	4605      	mov	r5, r0
   22c54:	460c      	mov	r4, r1
   22c56:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   22c5a:	f7f8 feb7 	bl	1b9cc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   22c5e:	b178      	cbz	r0, 22c80 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x17a>
   22c60:	4620      	mov	r0, r4
   22c62:	f000 f810 	bl	22c86 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x180>
   22c66:	6a22      	ldr	r2, [r4, #32]
   22c68:	2109      	movs	r1, #9
   22c6a:	4628      	mov	r0, r5
   22c6c:	4790      	blx	r2
   22c6e:	2800      	cmp	r0, #0
   22c70:	d008      	beq.n	22c84 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x17e>
   22c72:	7800      	ldrb	r0, [r0, #0]
   22c74:	2800      	cmp	r0, #0
   22c76:	d005      	beq.n	22c84 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x17e>
   22c78:	21dc      	movs	r1, #220	; 0xdc
   22c7a:	206a      	movs	r0, #106	; 0x6a
   22c7c:	f7fa fb62 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   22c80:	21d8      	movs	r1, #216	; 0xd8
   22c82:	e7fa      	b.n	22c7a <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x174>
   22c84:	bd70      	pop	{r4, r5, r6, pc}
   22c86:	2100      	movs	r1, #0
   22c88:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   22c8c:	f800 1f24 	strb.w	r1, [r0, #36]!
   22c90:	7041      	strb	r1, [r0, #1]
   22c92:	4770      	bx	lr

00022c94 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   22c94:	b570      	push	{r4, r5, r6, lr}
   22c96:	f7f6 ffc7 	bl	19c28 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   22c9a:	4605      	mov	r5, r0
   22c9c:	2400      	movs	r4, #0
   22c9e:	e006      	b.n	22cae <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   22ca0:	4620      	mov	r0, r4
   22ca2:	f7f6 ffc7 	bl	19c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   22ca6:	f7ff ffee 	bl	22c86 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x180>
   22caa:	1c64      	adds	r4, r4, #1
   22cac:	b2e4      	uxtb	r4, r4
   22cae:	42ac      	cmp	r4, r5
   22cb0:	d3f6      	bcc.n	22ca0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   22cb2:	bd70      	pop	{r4, r5, r6, pc}

00022cb4 <mpsl_timeslot_request>:
   22cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cb8:	460d      	mov	r5, r1
   22cba:	f7f6 ffbb 	bl	19c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   22cbe:	0004      	movs	r4, r0
   22cc0:	d008      	beq.n	22cd4 <mpsl_timeslot_request+0x20>
   22cc2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   22cc6:	f06f 0622 	mvn.w	r6, #34	; 0x22
   22cca:	2801      	cmp	r0, #1
   22ccc:	d006      	beq.n	22cdc <mpsl_timeslot_request+0x28>
   22cce:	2802      	cmp	r0, #2
   22cd0:	d111      	bne.n	22cf6 <mpsl_timeslot_request+0x42>
   22cd2:	e003      	b.n	22cdc <mpsl_timeslot_request+0x28>
   22cd4:	f06f 0001 	mvn.w	r0, #1
   22cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22cdc:	f06f 0715 	mvn.w	r7, #21
   22ce0:	b15d      	cbz	r5, 22cfa <mpsl_timeslot_request+0x46>
   22ce2:	4628      	mov	r0, r5
   22ce4:	f7f6 ff16 	bl	19b14 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   22ce8:	b138      	cbz	r0, 22cfa <mpsl_timeslot_request+0x46>
   22cea:	7828      	ldrb	r0, [r5, #0]
   22cec:	b138      	cbz	r0, 22cfe <mpsl_timeslot_request+0x4a>
   22cee:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   22cf2:	2802      	cmp	r0, #2
   22cf4:	d008      	beq.n	22d08 <mpsl_timeslot_request+0x54>
   22cf6:	4630      	mov	r0, r6
   22cf8:	e7ee      	b.n	22cd8 <mpsl_timeslot_request+0x24>
   22cfa:	4638      	mov	r0, r7
   22cfc:	e7ec      	b.n	22cd8 <mpsl_timeslot_request+0x24>
   22cfe:	4629      	mov	r1, r5
   22d00:	4620      	mov	r0, r4
   22d02:	f7ff ff6d 	bl	22be0 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xda>
   22d06:	e003      	b.n	22d10 <mpsl_timeslot_request+0x5c>
   22d08:	4629      	mov	r1, r5
   22d0a:	4620      	mov	r0, r4
   22d0c:	f7ff ff81 	bl	22c12 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x10c>
   22d10:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   22d14:	4621      	mov	r1, r4
   22d16:	f7ff ff59 	bl	22bcc <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0xc6>
   22d1a:	b108      	cbz	r0, 22d20 <mpsl_timeslot_request+0x6c>
   22d1c:	2000      	movs	r0, #0
   22d1e:	e7db      	b.n	22cd8 <mpsl_timeslot_request+0x24>
   22d20:	f240 21b1 	movw	r1, #689	; 0x2b1
   22d24:	206a      	movs	r0, #106	; 0x6a
   22d26:	f7fa fb0d 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00022d2a <mpsl_timeslot_session_close>:
   22d2a:	b510      	push	{r4, lr}
   22d2c:	4604      	mov	r4, r0
   22d2e:	f7f6 ff81 	bl	19c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   22d32:	0001      	movs	r1, r0
   22d34:	d005      	beq.n	22d42 <mpsl_timeslot_session_close+0x18>
   22d36:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   22d3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
   22d3e:	b978      	cbnz	r0, 22d60 <mpsl_timeslot_session_close+0x36>
   22d40:	e002      	b.n	22d48 <mpsl_timeslot_session_close+0x1e>
   22d42:	f06f 0001 	mvn.w	r0, #1
   22d46:	bd10      	pop	{r4, pc}
   22d48:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   22d4c:	b140      	cbz	r0, 22d60 <mpsl_timeslot_session_close+0x36>
   22d4e:	2802      	cmp	r0, #2
   22d50:	d008      	beq.n	22d64 <mpsl_timeslot_session_close+0x3a>
   22d52:	2801      	cmp	r0, #1
   22d54:	d006      	beq.n	22d64 <mpsl_timeslot_session_close+0x3a>
   22d56:	2001      	movs	r0, #1
   22d58:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   22d5c:	2000      	movs	r0, #0
   22d5e:	bd10      	pop	{r4, pc}
   22d60:	4610      	mov	r0, r2
   22d62:	bd10      	pop	{r4, pc}
   22d64:	4620      	mov	r0, r4
   22d66:	f7ff ff73 	bl	22c50 <sym_IBALR6WOCZYA342JRYG44MFHRUIKXGWY4MGXZLY+0x14a>
   22d6a:	e7f7      	b.n	22d5c <mpsl_timeslot_session_close+0x32>

00022d6c <mpsl_timeslot_session_count_set>:
   22d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d70:	460e      	mov	r6, r1
   22d72:	4607      	mov	r7, r0
   22d74:	f7f6 ff58 	bl	19c28 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   22d78:	4605      	mov	r5, r0
   22d7a:	2400      	movs	r4, #0
   22d7c:	e00b      	b.n	22d96 <mpsl_timeslot_session_count_set+0x2a>
   22d7e:	4620      	mov	r0, r4
   22d80:	f7f6 ff58 	bl	19c34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   22d84:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   22d88:	b118      	cbz	r0, 22d92 <mpsl_timeslot_session_count_set+0x26>
   22d8a:	f04f 30ff 	mov.w	r0, #4294967295
   22d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22d92:	1c64      	adds	r4, r4, #1
   22d94:	b2e4      	uxtb	r4, r4
   22d96:	42ac      	cmp	r4, r5
   22d98:	d3f1      	bcc.n	22d7e <mpsl_timeslot_session_count_set+0x12>
   22d9a:	2e08      	cmp	r6, #8
   22d9c:	d902      	bls.n	22da4 <mpsl_timeslot_session_count_set+0x38>
   22d9e:	f06f 0015 	mvn.w	r0, #21
   22da2:	e7f4      	b.n	22d8e <mpsl_timeslot_session_count_set+0x22>
   22da4:	b117      	cbz	r7, 22dac <mpsl_timeslot_session_count_set+0x40>
   22da6:	4631      	mov	r1, r6
   22da8:	4638      	mov	r0, r7
   22daa:	e001      	b.n	22db0 <mpsl_timeslot_session_count_set+0x44>
   22dac:	2100      	movs	r1, #0
   22dae:	4608      	mov	r0, r1
   22db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22db4:	f7f6 bf24 	b.w	19c00 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00022db8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   22db8:	f7f9 bb5a 	b.w	1c470 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00022dbc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   22dbc:	b510      	push	{r4, lr}
   22dbe:	2000      	movs	r0, #0
   22dc0:	f7f9 fe90 	bl	1cae4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   22dc4:	6800      	ldr	r0, [r0, #0]
   22dc6:	2800      	cmp	r0, #0
   22dc8:	bf18      	it	ne
   22dca:	2001      	movne	r0, #1
   22dcc:	bd10      	pop	{r4, pc}

00022dce <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   22dce:	b510      	push	{r4, lr}
   22dd0:	f7f9 ff22 	bl	1cc18 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   22dd4:	f7f9 f9c6 	bl	1c164 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   22dd8:	f000 f804 	bl	22de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   22ddc:	b280      	uxth	r0, r0
   22dde:	bd10      	pop	{r4, pc}

00022de0 <sym_5POQORD6JKUMWUFK7EQMHJRVL6FP7FFCXP7FODA>:
   22de0:	f000 b80d 	b.w	22dfe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>

00022de4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   22de4:	0a41      	lsrs	r1, r0, #9
   22de6:	f643 5209 	movw	r2, #15625	; 0x3d09
   22dea:	4351      	muls	r1, r2
   22dec:	f3c0 0008 	ubfx	r0, r0, #0, #9
   22df0:	fb10 f002 	smulbb	r0, r0, r2
   22df4:	f500 7080 	add.w	r0, r0, #256	; 0x100
   22df8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   22dfc:	4770      	bx	lr

00022dfe <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI>:
   22dfe:	2000      	movs	r0, #0
   22e00:	4770      	bx	lr
   22e02:	2800      	cmp	r0, #0
   22e04:	db09      	blt.n	22e1a <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x1c>
   22e06:	f000 021f 	and.w	r2, r0, #31
   22e0a:	2101      	movs	r1, #1
   22e0c:	4091      	lsls	r1, r2
   22e0e:	0940      	lsrs	r0, r0, #5
   22e10:	0080      	lsls	r0, r0, #2
   22e12:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   22e16:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   22e1a:	4770      	bx	lr
   22e1c:	2800      	cmp	r0, #0
   22e1e:	db0d      	blt.n	22e3c <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x3e>
   22e20:	f000 021f 	and.w	r2, r0, #31
   22e24:	2101      	movs	r1, #1
   22e26:	4091      	lsls	r1, r2
   22e28:	0940      	lsrs	r0, r0, #5
   22e2a:	0080      	lsls	r0, r0, #2
   22e2c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   22e30:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   22e34:	f3bf 8f4f 	dsb	sy
   22e38:	f3bf 8f6f 	isb	sy
   22e3c:	4770      	bx	lr
   22e3e:	5840      	ldr	r0, [r0, r1]
   22e40:	2800      	cmp	r0, #0
   22e42:	d000      	beq.n	22e46 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x48>
   22e44:	2001      	movs	r0, #1
   22e46:	4770      	bx	lr
   22e48:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   22e4c:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   22e50:	f002 0201 	and.w	r2, r2, #1
   22e54:	03c0      	lsls	r0, r0, #15
   22e56:	d503      	bpl.n	22e60 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x62>
   22e58:	428a      	cmp	r2, r1
   22e5a:	d101      	bne.n	22e60 <sym_2XHWCFCONWNVOJMSX36K54RLWKHKBPZWGYV3IRI+0x62>
   22e5c:	2001      	movs	r0, #1
   22e5e:	4770      	bx	lr
   22e60:	2000      	movs	r0, #0
   22e62:	4770      	bx	lr

00022e64 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   22e64:	b510      	push	{r4, lr}
   22e66:	2101      	movs	r1, #1
   22e68:	0788      	lsls	r0, r1, #30
   22e6a:	f7fa fa15 	bl	1d298 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   22e6e:	2800      	cmp	r0, #0
   22e70:	d000      	beq.n	22e74 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   22e72:	2001      	movs	r0, #1
   22e74:	bd10      	pop	{r4, pc}

00022e76 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   22e76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   22e7a:	2101      	movs	r1, #1
   22e7c:	6001      	str	r1, [r0, #0]
   22e7e:	4770      	bx	lr

00022e80 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   22e80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   22e84:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   22e88:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   22e8c:	f002 0203 	and.w	r2, r2, #3
   22e90:	03c9      	lsls	r1, r1, #15
   22e92:	d503      	bpl.n	22e9c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   22e94:	4282      	cmp	r2, r0
   22e96:	d101      	bne.n	22e9c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   22e98:	2001      	movs	r0, #1
   22e9a:	4770      	bx	lr
   22e9c:	2000      	movs	r0, #0
   22e9e:	4770      	bx	lr

00022ea0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   22ea0:	b510      	push	{r4, lr}
   22ea2:	2100      	movs	r1, #0
   22ea4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   22ea8:	f7fa f9f6 	bl	1d298 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   22eac:	2800      	cmp	r0, #0
   22eae:	d000      	beq.n	22eb2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   22eb0:	2001      	movs	r0, #1
   22eb2:	bd10      	pop	{r4, pc}
   22eb4:	2800      	cmp	r0, #0
   22eb6:	db09      	blt.n	22ecc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   22eb8:	f000 021f 	and.w	r2, r0, #31
   22ebc:	2101      	movs	r1, #1
   22ebe:	4091      	lsls	r1, r2
   22ec0:	0940      	lsrs	r0, r0, #5
   22ec2:	0080      	lsls	r0, r0, #2
   22ec4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   22ec8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   22ecc:	4770      	bx	lr
   22ece:	2800      	cmp	r0, #0
   22ed0:	db0d      	blt.n	22eee <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   22ed2:	f000 021f 	and.w	r2, r0, #31
   22ed6:	2101      	movs	r1, #1
   22ed8:	4091      	lsls	r1, r2
   22eda:	0940      	lsrs	r0, r0, #5
   22edc:	0080      	lsls	r0, r0, #2
   22ede:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   22ee2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   22ee6:	f3bf 8f4f 	dsb	sy
   22eea:	f3bf 8f6f 	isb	sy
   22eee:	4770      	bx	lr
   22ef0:	00021000 	.word	0x00021000
   22ef4:	000000fa 	.word	0x000000fa
   22ef8:	cc9ef18c 	.word	0xcc9ef18c
   22efc:	a7d74134 	.word	0xa7d74134
   22f00:	1459f70e 	.word	0x1459f70e
   22f04:	67d72bbb 	.word	0x67d72bbb
   22f08:	ebbebb7f 	.word	0xebbebb7f
   22f0c:	2800      	cmp	r0, #0
   22f0e:	db09      	blt.n	22f24 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   22f10:	f000 021f 	and.w	r2, r0, #31
   22f14:	2101      	movs	r1, #1
   22f16:	4091      	lsls	r1, r2
   22f18:	0940      	lsrs	r0, r0, #5
   22f1a:	0080      	lsls	r0, r0, #2
   22f1c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   22f20:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   22f24:	4770      	bx	lr

00022f26 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   22f26:	f3ef 8110 	mrs	r1, PRIMASK
   22f2a:	b672      	cpsid	i
   22f2c:	7802      	ldrb	r2, [r0, #0]
   22f2e:	2a01      	cmp	r2, #1
   22f30:	d001      	beq.n	22f36 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   22f32:	2201      	movs	r2, #1
   22f34:	e000      	b.n	22f38 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   22f36:	2200      	movs	r2, #0
   22f38:	2301      	movs	r3, #1
   22f3a:	7003      	strb	r3, [r0, #0]
   22f3c:	b901      	cbnz	r1, 22f40 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   22f3e:	b662      	cpsie	i
   22f40:	b10a      	cbz	r2, 22f46 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   22f42:	2000      	movs	r0, #0
   22f44:	4770      	bx	lr
   22f46:	f06f 0022 	mvn.w	r0, #34	; 0x22
   22f4a:	4770      	bx	lr

00022f4c <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   22f4c:	2100      	movs	r1, #0
   22f4e:	7001      	strb	r1, [r0, #0]
   22f50:	4608      	mov	r0, r1
   22f52:	4770      	bx	lr

00022f54 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   22f54:	f3ef 8110 	mrs	r1, PRIMASK
   22f58:	b672      	cpsid	i
   22f5a:	2200      	movs	r2, #0
   22f5c:	7002      	strb	r2, [r0, #0]
   22f5e:	b901      	cbnz	r1, 22f62 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   22f60:	b662      	cpsie	i
   22f62:	2000      	movs	r0, #0
   22f64:	4770      	bx	lr

00022f66 <mpsl_low_priority_process>:
   22f66:	f7fa baed 	b.w	1d544 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00022f6a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   22f6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   22f6e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   22f72:	280f      	cmp	r0, #15
   22f74:	d001      	beq.n	22f7a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   22f76:	2000      	movs	r0, #0
   22f78:	4770      	bx	lr
   22f7a:	2001      	movs	r0, #1
   22f7c:	4770      	bx	lr

00022f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   22f7e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   22f82:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   22f86:	280a      	cmp	r0, #10
   22f88:	d001      	beq.n	22f8e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   22f8a:	2000      	movs	r0, #0
   22f8c:	4770      	bx	lr
   22f8e:	2001      	movs	r0, #1
   22f90:	4770      	bx	lr

00022f92 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   22f92:	b500      	push	{lr}
   22f94:	f7ff fff3 	bl	22f7e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   22f98:	b120      	cbz	r0, 22fa4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   22f9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   22f9e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   22fa2:	b108      	cbz	r0, 22fa8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   22fa4:	2000      	movs	r0, #0
   22fa6:	bd00      	pop	{pc}
   22fa8:	2001      	movs	r0, #1
   22faa:	bd00      	pop	{pc}

00022fac <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   22fac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   22fb0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   22fb4:	280e      	cmp	r0, #14
   22fb6:	d001      	beq.n	22fbc <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   22fb8:	2000      	movs	r0, #0
   22fba:	4770      	bx	lr
   22fbc:	2001      	movs	r0, #1
   22fbe:	4770      	bx	lr

00022fc0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   22fc0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   22fc4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   22fc8:	2810      	cmp	r0, #16
   22fca:	d001      	beq.n	22fd0 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   22fcc:	2000      	movs	r0, #0
   22fce:	4770      	bx	lr
   22fd0:	2001      	movs	r0, #1
   22fd2:	4770      	bx	lr

00022fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   22fd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   22fd8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   22fdc:	2806      	cmp	r0, #6
   22fde:	d003      	beq.n	22fe8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   22fe0:	1c40      	adds	r0, r0, #1
   22fe2:	d001      	beq.n	22fe8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   22fe4:	2000      	movs	r0, #0
   22fe6:	4770      	bx	lr
   22fe8:	2001      	movs	r0, #1
   22fea:	4770      	bx	lr

00022fec <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   22fec:	b500      	push	{lr}
   22fee:	f7ff fff1 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   22ff2:	b148      	cbz	r0, 23008 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   22ff4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   22ff8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   22ffc:	2806      	cmp	r0, #6
   22ffe:	d303      	bcc.n	23008 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   23000:	1c40      	adds	r0, r0, #1
   23002:	d001      	beq.n	23008 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   23004:	2001      	movs	r0, #1
   23006:	bd00      	pop	{pc}
   23008:	2000      	movs	r0, #0
   2300a:	bd00      	pop	{pc}

0002300c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   2300c:	b500      	push	{lr}
   2300e:	f7ff ffe1 	bl	22fd4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   23012:	b138      	cbz	r0, 23024 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   23014:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   23018:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   2301c:	2806      	cmp	r0, #6
   2301e:	d303      	bcc.n	23028 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   23020:	1c40      	adds	r0, r0, #1
   23022:	d001      	beq.n	23028 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   23024:	2000      	movs	r0, #0
   23026:	bd00      	pop	{pc}
   23028:	2001      	movs	r0, #1
   2302a:	bd00      	pop	{pc}

0002302c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   2302c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   23030:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   23034:	280d      	cmp	r0, #13
   23036:	d001      	beq.n	2303c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   23038:	2000      	movs	r0, #0
   2303a:	4770      	bx	lr
   2303c:	2001      	movs	r0, #1
   2303e:	4770      	bx	lr

00023040 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   23040:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   23044:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   23048:	2808      	cmp	r0, #8
   2304a:	d001      	beq.n	23050 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   2304c:	2000      	movs	r0, #0
   2304e:	4770      	bx	lr
   23050:	2001      	movs	r0, #1
   23052:	4770      	bx	lr

00023054 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   23054:	f7fa bab0 	b.w	1d5b8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00023058 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   23058:	f7fa baae 	b.w	1d5b8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0002305c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   2305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23060:	428a      	cmp	r2, r1
   23062:	d803      	bhi.n	2306c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   23064:	2179      	movs	r1, #121	; 0x79
   23066:	2096      	movs	r0, #150	; 0x96
   23068:	f7fa f96c 	bl	1d344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2306c:	fab2 f382 	clz	r3, r2
   23070:	b13b      	cbz	r3, 23082 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   23072:	4099      	lsls	r1, r3
   23074:	f1c3 0420 	rsb	r4, r3, #32
   23078:	fa20 f404 	lsr.w	r4, r0, r4
   2307c:	4321      	orrs	r1, r4
   2307e:	4098      	lsls	r0, r3
   23080:	409a      	lsls	r2, r3
   23082:	0c14      	lsrs	r4, r2, #16
   23084:	0c07      	lsrs	r7, r0, #16
   23086:	b286      	uxth	r6, r0
   23088:	fbb1 f0f4 	udiv	r0, r1, r4
   2308c:	fbb1 f3f4 	udiv	r3, r1, r4
   23090:	fb04 1c10 	mls	ip, r4, r0, r1
   23094:	b295      	uxth	r5, r2
   23096:	fb03 f005 	mul.w	r0, r3, r5
   2309a:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   2309e:	4560      	cmp	r0, ip
   230a0:	d907      	bls.n	230b2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   230a2:	eba0 000c 	sub.w	r0, r0, ip
   230a6:	4290      	cmp	r0, r2
   230a8:	d901      	bls.n	230ae <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   230aa:	2002      	movs	r0, #2
   230ac:	e000      	b.n	230b0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   230ae:	2001      	movs	r0, #1
   230b0:	1a1b      	subs	r3, r3, r0
   230b2:	0409      	lsls	r1, r1, #16
   230b4:	0418      	lsls	r0, r3, #16
   230b6:	19c9      	adds	r1, r1, r7
   230b8:	fba3 3702 	umull	r3, r7, r3, r2
   230bc:	1acf      	subs	r7, r1, r3
   230be:	fbb7 f1f4 	udiv	r1, r7, r4
   230c2:	fbb7 f3f4 	udiv	r3, r7, r4
   230c6:	fb04 7413 	mls	r4, r4, r3, r7
   230ca:	fb01 f305 	mul.w	r3, r1, r5
   230ce:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   230d2:	42a3      	cmp	r3, r4
   230d4:	d906      	bls.n	230e4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   230d6:	1b1b      	subs	r3, r3, r4
   230d8:	4293      	cmp	r3, r2
   230da:	d901      	bls.n	230e0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   230dc:	2202      	movs	r2, #2
   230de:	e000      	b.n	230e2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   230e0:	2201      	movs	r2, #1
   230e2:	1a89      	subs	r1, r1, r2
   230e4:	4308      	orrs	r0, r1
   230e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000230ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   230ea:	b4f0      	push	{r4, r5, r6, r7}
   230ec:	ea80 0c01 	eor.w	ip, r0, r1
   230f0:	4603      	mov	r3, r0
   230f2:	f01c 0f03 	tst.w	ip, #3
   230f6:	d13c      	bne.n	23172 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   230f8:	f013 0f03 	tst.w	r3, #3
   230fc:	d00b      	beq.n	23116 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   230fe:	2a00      	cmp	r2, #0
   23100:	bf04      	itt	eq
   23102:	bcf0      	popeq	{r4, r5, r6, r7}
   23104:	4770      	bxeq	lr
   23106:	f811 cb01 	ldrb.w	ip, [r1], #1
   2310a:	f803 cb01 	strb.w	ip, [r3], #1
   2310e:	1e52      	subs	r2, r2, #1
   23110:	f013 0f03 	tst.w	r3, #3
   23114:	d1f3      	bne.n	230fe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   23116:	2a03      	cmp	r2, #3
   23118:	d94f      	bls.n	231ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   2311a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   2311e:	d24c      	bcs.n	231ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   23120:	f1c2 0c00 	rsb	ip, r2, #0
   23124:	ea4f 74ec 	mov.w	r4, ip, asr #31
   23128:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   2312c:	ea4f 0cac 	mov.w	ip, ip, asr #2
   23130:	f1cc 0c00 	rsb	ip, ip, #0
   23134:	f1bc 0f00 	cmp.w	ip, #0
   23138:	dd1b      	ble.n	23172 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   2313a:	1f0d      	subs	r5, r1, #4
   2313c:	1f1c      	subs	r4, r3, #4
   2313e:	f01c 0f01 	tst.w	ip, #1
   23142:	d003      	beq.n	2314c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   23144:	f855 6f04 	ldr.w	r6, [r5, #4]!
   23148:	f844 6f04 	str.w	r6, [r4, #4]!
   2314c:	ea5f 066c 	movs.w	r6, ip, asr #1
   23150:	d007      	beq.n	23162 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   23152:	686f      	ldr	r7, [r5, #4]
   23154:	6067      	str	r7, [r4, #4]
   23156:	f855 7f08 	ldr.w	r7, [r5, #8]!
   2315a:	f844 7f08 	str.w	r7, [r4, #8]!
   2315e:	1e76      	subs	r6, r6, #1
   23160:	d1f7      	bne.n	23152 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   23162:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   23166:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   2316a:	f1cc 0c00 	rsb	ip, ip, #0
   2316e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   23172:	2a00      	cmp	r2, #0
   23174:	bf04      	itt	eq
   23176:	bcf0      	popeq	{r4, r5, r6, r7}
   23178:	4770      	bxeq	lr
   2317a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   2317e:	d226      	bcs.n	231ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   23180:	2a00      	cmp	r2, #0
   23182:	bfdc      	itt	le
   23184:	bcf0      	pople	{r4, r5, r6, r7}
   23186:	4770      	bxle	lr
   23188:	1e49      	subs	r1, r1, #1
   2318a:	1e5b      	subs	r3, r3, #1
   2318c:	f012 0f01 	tst.w	r2, #1
   23190:	d003      	beq.n	2319a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   23192:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   23196:	f803 cf01 	strb.w	ip, [r3, #1]!
   2319a:	1052      	asrs	r2, r2, #1
   2319c:	bf04      	itt	eq
   2319e:	bcf0      	popeq	{r4, r5, r6, r7}
   231a0:	4770      	bxeq	lr
   231a2:	f891 c001 	ldrb.w	ip, [r1, #1]
   231a6:	f883 c001 	strb.w	ip, [r3, #1]
   231aa:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   231ae:	f803 cf02 	strb.w	ip, [r3, #2]!
   231b2:	1e52      	subs	r2, r2, #1
   231b4:	d1f5      	bne.n	231a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   231b6:	bcf0      	pop	{r4, r5, r6, r7}
   231b8:	4770      	bx	lr
   231ba:	2a04      	cmp	r2, #4
   231bc:	d3d9      	bcc.n	23172 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   231be:	f851 cb04 	ldr.w	ip, [r1], #4
   231c2:	1f12      	subs	r2, r2, #4
   231c4:	f843 cb04 	str.w	ip, [r3], #4
   231c8:	2a04      	cmp	r2, #4
   231ca:	d2f8      	bcs.n	231be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   231cc:	e7d1      	b.n	23172 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   231ce:	f811 cb01 	ldrb.w	ip, [r1], #1
   231d2:	f803 cb01 	strb.w	ip, [r3], #1
   231d6:	1e52      	subs	r2, r2, #1
   231d8:	d1f9      	bne.n	231ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   231da:	bcf0      	pop	{r4, r5, r6, r7}
   231dc:	4770      	bx	lr

000231de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   231de:	b470      	push	{r4, r5, r6}
   231e0:	4603      	mov	r3, r0
   231e2:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   231e6:	f010 0f03 	tst.w	r0, #3
   231ea:	d009      	beq.n	23200 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   231ec:	2a00      	cmp	r2, #0
   231ee:	bf04      	itt	eq
   231f0:	bc70      	popeq	{r4, r5, r6}
   231f2:	4770      	bxeq	lr
   231f4:	f803 cb01 	strb.w	ip, [r3], #1
   231f8:	1e52      	subs	r2, r2, #1
   231fa:	f013 0f03 	tst.w	r3, #3
   231fe:	d1f5      	bne.n	231ec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   23200:	b2c9      	uxtb	r1, r1
   23202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   23206:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   2320a:	2a03      	cmp	r2, #3
   2320c:	d939      	bls.n	23282 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   2320e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   23212:	d236      	bcs.n	23282 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   23214:	4251      	negs	r1, r2
   23216:	17cc      	asrs	r4, r1, #31
   23218:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   2321c:	1089      	asrs	r1, r1, #2
   2321e:	424e      	negs	r6, r1
   23220:	2e00      	cmp	r6, #0
   23222:	dd11      	ble.n	23248 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   23224:	1f19      	subs	r1, r3, #4
   23226:	f016 0f01 	tst.w	r6, #1
   2322a:	bf18      	it	ne
   2322c:	f841 5f04 	strne.w	r5, [r1, #4]!
   23230:	1074      	asrs	r4, r6, #1
   23232:	d004      	beq.n	2323e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   23234:	604d      	str	r5, [r1, #4]
   23236:	f841 5f08 	str.w	r5, [r1, #8]!
   2323a:	1e64      	subs	r4, r4, #1
   2323c:	d1fa      	bne.n	23234 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   2323e:	4271      	negs	r1, r6
   23240:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   23244:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   23248:	2a00      	cmp	r2, #0
   2324a:	bf04      	itt	eq
   2324c:	bc70      	popeq	{r4, r5, r6}
   2324e:	4770      	bxeq	lr
   23250:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   23254:	d21d      	bcs.n	23292 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   23256:	2a00      	cmp	r2, #0
   23258:	bfdc      	itt	le
   2325a:	bc70      	pople	{r4, r5, r6}
   2325c:	4770      	bxle	lr
   2325e:	1e59      	subs	r1, r3, #1
   23260:	f012 0f01 	tst.w	r2, #1
   23264:	bf18      	it	ne
   23266:	f801 cf01 	strbne.w	ip, [r1, #1]!
   2326a:	1052      	asrs	r2, r2, #1
   2326c:	bf04      	itt	eq
   2326e:	bc70      	popeq	{r4, r5, r6}
   23270:	4770      	bxeq	lr
   23272:	f881 c001 	strb.w	ip, [r1, #1]
   23276:	f801 cf02 	strb.w	ip, [r1, #2]!
   2327a:	1e52      	subs	r2, r2, #1
   2327c:	d1f9      	bne.n	23272 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   2327e:	bc70      	pop	{r4, r5, r6}
   23280:	4770      	bx	lr
   23282:	2a04      	cmp	r2, #4
   23284:	d3e0      	bcc.n	23248 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   23286:	1f12      	subs	r2, r2, #4
   23288:	f843 5b04 	str.w	r5, [r3], #4
   2328c:	2a04      	cmp	r2, #4
   2328e:	d2fa      	bcs.n	23286 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   23290:	e7da      	b.n	23248 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   23292:	f803 cb01 	strb.w	ip, [r3], #1
   23296:	1e52      	subs	r2, r2, #1
   23298:	d1fb      	bne.n	23292 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   2329a:	bc70      	pop	{r4, r5, r6}
   2329c:	4770      	bx	lr
   2329e:	2107      	movs	r1, #7
   232a0:	7001      	strb	r1, [r0, #0]
   232a2:	2000      	movs	r0, #0
   232a4:	4770      	bx	lr
   232a6:	2000      	movs	r0, #0
   232a8:	4770      	bx	lr
   232aa:	2000      	movs	r0, #0
   232ac:	4770      	bx	lr
   232ae:	2000      	movs	r0, #0
   232b0:	4770      	bx	lr
   232b2:	b108      	cbz	r0, 232b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xda>
   232b4:	2000      	movs	r0, #0
   232b6:	4770      	bx	lr
   232b8:	f06f 0015 	mvn.w	r0, #21
   232bc:	4770      	bx	lr
   232be:	f04f 30ff 	mov.w	r0, #4294967295
   232c2:	4770      	bx	lr
   232c4:	2000      	movs	r0, #0
   232c6:	4770      	bx	lr
   232c8:	2000      	movs	r0, #0
   232ca:	4770      	bx	lr
   232cc:	f04f 30ff 	mov.w	r0, #4294967295
   232d0:	4770      	bx	lr
   232d2:	4770      	bx	lr
   232d4:	4770      	bx	lr
   232d6:	2000      	movs	r0, #0
   232d8:	4770      	bx	lr
   232da:	2100      	movs	r1, #0
   232dc:	7001      	strb	r1, [r0, #0]
   232de:	4770      	bx	lr
   232e0:	f04f 30ff 	mov.w	r0, #4294967295
   232e4:	4770      	bx	lr
   232e6:	f04f 30ff 	mov.w	r0, #4294967295
   232ea:	4770      	bx	lr
   232ec:	2100      	movs	r1, #0
   232ee:	7001      	strb	r1, [r0, #0]
   232f0:	4770      	bx	lr
   232f2:	f04f 30ff 	mov.w	r0, #4294967295
   232f6:	4770      	bx	lr
   232f8:	f04f 30ff 	mov.w	r0, #4294967295
   232fc:	4770      	bx	lr
   232fe:	7800      	ldrb	r0, [r0, #0]
   23300:	2800      	cmp	r0, #0
   23302:	d001      	beq.n	23308 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12a>
   23304:	f06f 0015 	mvn.w	r0, #21
   23308:	4770      	bx	lr
   2330a:	2000      	movs	r0, #0
   2330c:	4770      	bx	lr
   2330e:	2200      	movs	r2, #0
   23310:	f000 b802 	b.w	23318 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00023314 <mpsl_fem_init>:
   23314:	f7f6 ba5c 	b.w	197d0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00023318 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   23318:	b570      	push	{r4, r5, r6, lr}
   2331a:	4614      	mov	r4, r2
   2331c:	460d      	mov	r5, r1
   2331e:	1b00      	subs	r0, r0, r4
   23320:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   23324:	4288      	cmp	r0, r1
   23326:	da01      	bge.n	2332c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   23328:	4608      	mov	r0, r1
   2332a:	e002      	b.n	23332 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   2332c:	287f      	cmp	r0, #127	; 0x7f
   2332e:	dd00      	ble.n	23332 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   23330:	207f      	movs	r0, #127	; 0x7f
   23332:	4619      	mov	r1, r3
   23334:	b240      	sxtb	r0, r0
   23336:	f7f6 fa7f 	bl	19838 <mpsl_tx_power_radio_supported_power_adjust>
   2333a:	7028      	strb	r0, [r5, #0]
   2333c:	706c      	strb	r4, [r5, #1]
   2333e:	2100      	movs	r1, #0
   23340:	4420      	add	r0, r4
   23342:	70a9      	strb	r1, [r5, #2]
   23344:	b240      	sxtb	r0, r0
   23346:	bd70      	pop	{r4, r5, r6, pc}

00023348 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY>:
   23348:	b538      	push	{r3, r4, r5, lr}
   2334a:	4615      	mov	r5, r2
   2334c:	460c      	mov	r4, r1
   2334e:	466a      	mov	r2, sp
   23350:	4629      	mov	r1, r5
   23352:	f7fa fad3 	bl	1d8fc <sym_UZUI4YQAV7IWWBS4QSQS6JUSLV3JFA6COL6SGJQ>
   23356:	f89d 0000 	ldrb.w	r0, [sp]
   2335a:	7020      	strb	r0, [r4, #0]
   2335c:	f8bd 0001 	ldrh.w	r0, [sp, #1]
   23360:	f8a4 0001 	strh.w	r0, [r4, #1]
   23364:	f99d 0003 	ldrsb.w	r0, [sp, #3]
   23368:	bd38      	pop	{r3, r4, r5, pc}
   2336a:	2000      	movs	r0, #0
   2336c:	4770      	bx	lr
   2336e:	2000      	movs	r0, #0
   23370:	4770      	bx	lr
   23372:	2000      	movs	r0, #0
   23374:	4770      	bx	lr
   23376:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2337a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   2337e:	f362 5114 	bfi	r1, r2, #20, #1
   23382:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   23386:	4770      	bx	lr
   23388:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2338c:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   23390:	f8c0 3514 	str.w	r3, [r0, #1300]	; 0x514
   23394:	4770      	bx	lr

00023396 <sym_3BRTDPN7XWPAND7Z2VPL7ANWY4DHJFOP4VM7OOQ>:
   23396:	b538      	push	{r3, r4, r5, lr}
   23398:	4604      	mov	r4, r0
   2339a:	300c      	adds	r0, #12
   2339c:	f7fa fa72 	bl	1d884 <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY>
   233a0:	f104 001c 	add.w	r0, r4, #28
   233a4:	f7fa fa6e 	bl	1d884 <sym_VKBZW53QXJCHSTQZJ6PISB3AUAIGB3JG46CLOVY>
   233a8:	7a20      	ldrb	r0, [r4, #8]
   233aa:	f88d 0000 	strb.w	r0, [sp]
   233ae:	4668      	mov	r0, sp
   233b0:	f7fa fa9c 	bl	1d8ec <sym_XCJWKZY7PLHQ3WYDBXY2N635EFQYR732K4ZIXUI>
   233b4:	2000      	movs	r0, #0
   233b6:	bd38      	pop	{r3, r4, r5, pc}

000233b8 <sym_K27LNRXEE7HXLOB6ANRAZAL5UKZYP4WXS7EA7XI>:
   233b8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   233bc:	b10a      	cbz	r2, 233c2 <sym_K27LNRXEE7HXLOB6ANRAZAL5UKZYP4WXS7EA7XI+0xa>
   233be:	7a40      	ldrb	r0, [r0, #9]
   233c0:	e000      	b.n	233c4 <sym_K27LNRXEE7HXLOB6ANRAZAL5UKZYP4WXS7EA7XI+0xc>
   233c2:	2000      	movs	r0, #0
   233c4:	7008      	strb	r0, [r1, #0]
   233c6:	4770      	bx	lr

000233c8 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>:
   233c8:	7e02      	ldrb	r2, [r0, #24]
   233ca:	b10a      	cbz	r2, 233d0 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY+0x8>
   233cc:	7a00      	ldrb	r0, [r0, #8]
   233ce:	e000      	b.n	233d2 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY+0xa>
   233d0:	2000      	movs	r0, #0
   233d2:	7008      	strb	r0, [r1, #0]
   233d4:	4770      	bx	lr

000233d6 <sym_R3CY5O5PWFOP6PPHA2W2A2Q2GG2C3KWHG5ABJVI>:
   233d6:	b508      	push	{r3, lr}
   233d8:	460b      	mov	r3, r1
   233da:	4669      	mov	r1, sp
   233dc:	f7ff fff4 	bl	233c8 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>
   233e0:	f993 0000 	ldrsb.w	r0, [r3]
   233e4:	f99d 1000 	ldrsb.w	r1, [sp]
   233e8:	4288      	cmp	r0, r1
   233ea:	d002      	beq.n	233f2 <sym_R3CY5O5PWFOP6PPHA2W2A2Q2GG2C3KWHG5ABJVI+0x1c>
   233ec:	f06f 0015 	mvn.w	r0, #21
   233f0:	bd08      	pop	{r3, pc}
   233f2:	2000      	movs	r0, #0
   233f4:	bd08      	pop	{r3, pc}

000233f6 <sym_NSB5Z4D72O5VWEUXZVDQIBPNQ5UV64KEO7NVTOQ>:
   233f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   233fa:	461c      	mov	r4, r3
   233fc:	4615      	mov	r5, r2
   233fe:	460e      	mov	r6, r1
   23400:	4680      	mov	r8, r0
   23402:	9f08      	ldr	r7, [sp, #32]
   23404:	f7fa fa82 	bl	1d90c <sym_6TQUPGH3JCOXHF5S5KOV5JVT7ENJIB42OACFZEY>
   23408:	b140      	cbz	r0, 2341c <sym_NSB5Z4D72O5VWEUXZVDQIBPNQ5UV64KEO7NVTOQ+0x26>
   2340a:	b001      	add	sp, #4
   2340c:	463b      	mov	r3, r7
   2340e:	4622      	mov	r2, r4
   23410:	4629      	mov	r1, r5
   23412:	4630      	mov	r0, r6
   23414:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23418:	f7ff bf96 	b.w	23348 <sym_ECVUNLUE75MH4IFHQABUWIWXLABULY5DCISIGIY>
   2341c:	4669      	mov	r1, sp
   2341e:	4640      	mov	r0, r8
   23420:	f7ff ffd2 	bl	233c8 <sym_XWQGTONAVLSGPVLQHPRD2ZOJKJG4LL4CPTBVTQY>
   23424:	463b      	mov	r3, r7
   23426:	f99d 2000 	ldrsb.w	r2, [sp]
   2342a:	4629      	mov	r1, r5
   2342c:	4630      	mov	r0, r6
   2342e:	f7ff ff73 	bl	23318 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>
   23432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23436:	080c      	.short	0x080c
   23438:	010d1702 	.word	0x010d1702
   2343c:	09090201 	.word	0x09090201
   23440:	02060101 	.word	0x02060101
   23444:	03181809 	.word	0x03181809
   23448:	09090101 	.word	0x09090101
   2344c:	03050303 	.word	0x03050303
   23450:	02230102 	.word	0x02230102
   23454:	10092402 	.word	0x10092402
   23458:	05050404 	.word	0x05050404
   2345c:	0b040b0b 	.word	0x0b040b0b
   23460:	2b          	.byte	0x2b
   23461:	d8          	.byte	0xd8
   23462:	f0ec      	.short	0xf0ec
   23464:	00fcf8f4 	.word	0x00fcf8f4
   23468:	05040302 	.word	0x05040302
   2346c:	00080706 	.word	0x00080706
	...
   23480:	01000000 	.word	0x01000000
   23484:	02010101 	.word	0x02010101
   23488:	03020202 	.word	0x03020202
   2348c:	04030303 	.word	0x04030303
   23490:	05040404 	.word	0x05040404
   23494:	06050505 	.word	0x06050505
   23498:	09080706 	.word	0x09080706
   2349c:	0d0c0b0a 	.word	0x0d0c0b0a
	...
   234b4:	01010101 	.word	0x01010101
   234b8:	02020202 	.word	0x02020202
   234bc:	03030303 	.word	0x03030303
   234c0:	04040404 	.word	0x04040404
   234c4:	05050505 	.word	0x05050505
   234c8:	08060606 	.word	0x08060606
   234cc:	00000009 	.word	0x00000009

000234d0 <pwm_set>:
 * @retval -ENOTSUP If requested period or pulse cycles are not supported.
 * @retval -errno Other negative errno code on failure.
 */
static inline int pwm_set(const struct device *dev, uint32_t channel,
			  uint32_t period, uint32_t pulse, pwm_flags_t flags)
{
   234d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234d4:	b087      	sub	sp, #28
   234d6:	4605      	mov	r5, r0
   234d8:	9103      	str	r1, [sp, #12]
   234da:	4617      	mov	r7, r2
   234dc:	461e      	mov	r6, r3
	return api->get_cycles_per_sec(dev, channel, cycles);
   234de:	6883      	ldr	r3, [r0, #8]
   234e0:	aa04      	add	r2, sp, #16
   234e2:	685b      	ldr	r3, [r3, #4]
   234e4:	4798      	blx	r3
	uint64_t pulse_cycles;
	uint64_t period_cycles;
	uint64_t cycles_per_sec;

	err = pwm_get_cycles_per_sec(dev, channel, &cycles_per_sec);
	if (err < 0) {
   234e6:	2800      	cmp	r0, #0
   234e8:	db31      	blt.n	2354e <pwm_set+0x7e>
		return err;
	}

	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
   234ea:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
   234ee:	fba7 b304 	umull	fp, r3, r7, r4
   234f2:	fb07 370a 	mla	r7, r7, sl, r3
   234f6:	4658      	mov	r0, fp
   234f8:	a319      	add	r3, pc, #100	; (adr r3, 23560 <pwm_set+0x90>)
   234fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   234fe:	4639      	mov	r1, r7
   23500:	f7e8 fefe 	bl	c300 <__aeabi_uldivmod>
	if (period_cycles > UINT32_MAX) {
   23504:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23568 <pwm_set+0x98>
	period_cycles = (period * cycles_per_sec) / NSEC_PER_SEC;
   23508:	9002      	str	r0, [sp, #8]
	if (period_cycles > UINT32_MAX) {
   2350a:	f04f 39ff 	mov.w	r9, #4294967295
   2350e:	45d9      	cmp	r9, fp
   23510:	eb78 0307 	sbcs.w	r3, r8, r7
   23514:	d31e      	bcc.n	23554 <pwm_set+0x84>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
   23516:	fba6 b404 	umull	fp, r4, r6, r4
   2351a:	fb06 440a 	mla	r4, r6, sl, r4
   2351e:	a310      	add	r3, pc, #64	; (adr r3, 23560 <pwm_set+0x90>)
   23520:	e9d3 2300 	ldrd	r2, r3, [r3]
   23524:	4621      	mov	r1, r4
   23526:	4658      	mov	r0, fp
   23528:	f7e8 feea 	bl	c300 <__aeabi_uldivmod>
	if (pulse_cycles > UINT32_MAX) {
   2352c:	45d9      	cmp	r9, fp
   2352e:	eb78 0404 	sbcs.w	r4, r8, r4
	pulse_cycles = (pulse * cycles_per_sec) / NSEC_PER_SEC;
   23532:	4603      	mov	r3, r0
	if (pulse_cycles > UINT32_MAX) {
   23534:	d30e      	bcc.n	23554 <pwm_set+0x84>
	if (pulse > period) {
   23536:	9902      	ldr	r1, [sp, #8]
	const struct pwm_driver_api *api =
   23538:	68aa      	ldr	r2, [r5, #8]
	if (pulse > period) {
   2353a:	4299      	cmp	r1, r3
   2353c:	d30d      	bcc.n	2355a <pwm_set+0x8a>
	return api->set_cycles(dev, channel, period, pulse, flags);
   2353e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   23542:	9100      	str	r1, [sp, #0]
   23544:	6814      	ldr	r4, [r2, #0]
   23546:	4628      	mov	r0, r5
   23548:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   2354c:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_set_cycles(dev, channel, (uint32_t)period_cycles,
			      (uint32_t)pulse_cycles, flags);
}
   2354e:	b007      	add	sp, #28
   23550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
   23554:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23558:	e7f9      	b.n	2354e <pwm_set+0x7e>
		return -EINVAL;
   2355a:	f06f 0015 	mvn.w	r0, #21
   2355e:	e7f6      	b.n	2354e <pwm_set+0x7e>
   23560:	3b9aca00 	.word	0x3b9aca00
   23564:	00000000 	.word	0x00000000
   23568:	3b9ac9ff 	.word	0x3b9ac9ff

0002356c <button_handler>:
		
	printk("Work thread executed. \n");
}

static void button_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger, void *context)
{
   2356c:	b510      	push	{r4, lr}
	if (debounce_check)
   2356e:	4c07      	ldr	r4, [pc, #28]	; (2358c <button_handler+0x20>)
   23570:	7823      	ldrb	r3, [r4, #0]
   23572:	b133      	cbz	r3, 23582 <button_handler+0x16>
	{
		printk("GPIO input event callback\n");
   23574:	4806      	ldr	r0, [pc, #24]	; (23590 <button_handler+0x24>)
   23576:	f014 fb1f 	bl	37bb8 <printk>

		k_work_submit_to_queue(&offload_work_q, &my_work.work);
   2357a:	4906      	ldr	r1, [pc, #24]	; (23594 <button_handler+0x28>)
   2357c:	4806      	ldr	r0, [pc, #24]	; (23598 <button_handler+0x2c>)
   2357e:	f018 f83d 	bl	3b5fc <k_work_submit_to_queue>
			
	}
	debounce_check = !debounce_check;
   23582:	7823      	ldrb	r3, [r4, #0]
   23584:	f083 0301 	eor.w	r3, r3, #1
   23588:	7023      	strb	r3, [r4, #0]
}
   2358a:	bd10      	pop	{r4, pc}
   2358c:	20004c86 	.word	0x20004c86
   23590:	0003c7aa 	.word	0x0003c7aa
   23594:	20003320 	.word	0x20003320
   23598:	20001be0 	.word	0x20001be0

0002359c <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   2359c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2359e:	6803      	ldr	r3, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   235a0:	095a      	lsrs	r2, r3, #5
   235a2:	d00c      	beq.n	235be <nrf_gpio_pin_port_decode+0x22>
   235a4:	2a01      	cmp	r2, #1
   235a6:	d013      	beq.n	235d0 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   235a8:	490e      	ldr	r1, [pc, #56]	; (235e4 <nrf_gpio_pin_port_decode+0x48>)
   235aa:	480f      	ldr	r0, [pc, #60]	; (235e8 <nrf_gpio_pin_port_decode+0x4c>)
   235ac:	f240 2247 	movw	r2, #583	; 0x247
   235b0:	f014 fd0a 	bl	37fc8 <assert_print>
   235b4:	480b      	ldr	r0, [pc, #44]	; (235e4 <nrf_gpio_pin_port_decode+0x48>)
   235b6:	f240 2147 	movw	r1, #583	; 0x247
   235ba:	f014 fcfe 	bl	37fba <assert_post_action>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   235be:	f04f 32ff 	mov.w	r2, #4294967295
   235c2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   235c6:	07d9      	lsls	r1, r3, #31
   235c8:	d5ee      	bpl.n	235a8 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   235ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   235ce:	e008      	b.n	235e2 <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   235d0:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   235d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   235d8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   235da:	07d2      	lsls	r2, r2, #31
   235dc:	d5e4      	bpl.n	235a8 <nrf_gpio_pin_port_decode+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   235de:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   235e0:	4802      	ldr	r0, [pc, #8]	; (235ec <nrf_gpio_pin_port_decode+0x50>)
}
   235e2:	bd08      	pop	{r3, pc}
   235e4:	0003c7c5 	.word	0x0003c7c5
   235e8:	0003c7f8 	.word	0x0003c7f8
   235ec:	50000300 	.word	0x50000300

000235f0 <connected_cb>:
{
   235f0:	b530      	push	{r4, r5, lr}
	conn_handle = conn;
   235f2:	4b2c      	ldr	r3, [pc, #176]	; (236a4 <connected_cb+0xb4>)
    page_alert_attr = &paging_service.attrs[2];
   235f4:	4a2c      	ldr	r2, [pc, #176]	; (236a8 <connected_cb+0xb8>)
	conn_handle = conn;
   235f6:	6018      	str	r0, [r3, #0]
    page_alert_attr = &paging_service.attrs[2];
   235f8:	4b2c      	ldr	r3, [pc, #176]	; (236ac <connected_cb+0xbc>)
{
   235fa:	b09b      	sub	sp, #108	; 0x6c
   235fc:	4604      	mov	r4, r0
    page_alert_attr = &paging_service.attrs[2];
   235fe:	601a      	str	r2, [r3, #0]
	if (err) 
   23600:	b129      	cbz	r1, 2360e <connected_cb+0x1e>
		printk("Connection failed (err %u)\n", err);
   23602:	482b      	ldr	r0, [pc, #172]	; (236b0 <connected_cb+0xc0>)
}
   23604:	b01b      	add	sp, #108	; 0x6c
   23606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Connection failed (err %u)\n", err);
   2360a:	f014 bad5 	b.w	37bb8 <printk>
	else if(bt_conn_get_info(conn, &info))
   2360e:	a911      	add	r1, sp, #68	; 0x44
   23610:	f005 fb7a 	bl	28d08 <bt_conn_get_info>
   23614:	b150      	cbz	r0, 2362c <connected_cb+0x3c>
		printk("Could not parse connection info\n");
   23616:	4827      	ldr	r0, [pc, #156]	; (236b4 <connected_cb+0xc4>)
   23618:	f014 face 	bl	37bb8 <printk>
	nrfx_gpiote_out_task_enable(HAPTIC_MOTOR_PIN);
   2361c:	200d      	movs	r0, #13
   2361e:	f00c fe05 	bl	3022c <nrfx_gpiote_out_task_enable>
	nrf_gpio_pin_clear(BLUE_LED_PIN);
   23622:	2010      	movs	r0, #16
   23624:	f014 fa93 	bl	37b4e <nrf_gpio_pin_clear>
}
   23628:	b01b      	add	sp, #108	; 0x6c
   2362a:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   2362c:	4620      	mov	r0, r4
   2362e:	f015 fc4f 	bl	38ed0 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   23632:	7803      	ldrb	r3, [r0, #0]
   23634:	4604      	mov	r4, r0
   23636:	ad06      	add	r5, sp, #24
   23638:	2b03      	cmp	r3, #3
   2363a:	d82d      	bhi.n	23698 <connected_cb+0xa8>
   2363c:	e8df f003 	tbb	[pc, r3]
   23640:	2a282602 	.word	0x2a282602
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   23644:	491c      	ldr	r1, [pc, #112]	; (236b8 <connected_cb+0xc8>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   23646:	4628      	mov	r0, r5
   23648:	f015 f86a 	bl	38720 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   2364c:	79a3      	ldrb	r3, [r4, #6]
   2364e:	9505      	str	r5, [sp, #20]
   23650:	7862      	ldrb	r2, [r4, #1]
   23652:	9204      	str	r2, [sp, #16]
   23654:	78a2      	ldrb	r2, [r4, #2]
   23656:	9203      	str	r2, [sp, #12]
   23658:	78e2      	ldrb	r2, [r4, #3]
   2365a:	9202      	str	r2, [sp, #8]
   2365c:	7922      	ldrb	r2, [r4, #4]
   2365e:	9201      	str	r2, [sp, #4]
   23660:	7962      	ldrb	r2, [r4, #5]
   23662:	9200      	str	r2, [sp, #0]
   23664:	211e      	movs	r1, #30
   23666:	4a15      	ldr	r2, [pc, #84]	; (236bc <connected_cb+0xcc>)
   23668:	a809      	add	r0, sp, #36	; 0x24
   2366a:	f014 fab2 	bl	37bd2 <snprintk>
		printk("\n \n Connection established!\n\
   2366e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   23672:	9301      	str	r3, [sp, #4]
   23674:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   23678:	9300      	str	r3, [sp, #0]
   2367a:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
   2367e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   23682:	480f      	ldr	r0, [pc, #60]	; (236c0 <connected_cb+0xd0>)
   23684:	a909      	add	r1, sp, #36	; 0x24
   23686:	f014 fa97 	bl	37bb8 <printk>
   2368a:	e7c7      	b.n	2361c <connected_cb+0x2c>
		strcpy(type, "random");
   2368c:	490d      	ldr	r1, [pc, #52]	; (236c4 <connected_cb+0xd4>)
   2368e:	e7da      	b.n	23646 <connected_cb+0x56>
		strcpy(type, "public-id");
   23690:	490d      	ldr	r1, [pc, #52]	; (236c8 <connected_cb+0xd8>)
   23692:	e7d8      	b.n	23646 <connected_cb+0x56>
		strcpy(type, "random-id");
   23694:	490d      	ldr	r1, [pc, #52]	; (236cc <connected_cb+0xdc>)
   23696:	e7d6      	b.n	23646 <connected_cb+0x56>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   23698:	4a0d      	ldr	r2, [pc, #52]	; (236d0 <connected_cb+0xe0>)
   2369a:	210a      	movs	r1, #10
   2369c:	4628      	mov	r0, r5
   2369e:	f014 fa98 	bl	37bd2 <snprintk>
		break;
   236a2:	e7d3      	b.n	2364c <connected_cb+0x5c>
   236a4:	20003318 	.word	0x20003318
   236a8:	0003be28 	.word	0x0003be28
   236ac:	20003314 	.word	0x20003314
   236b0:	0003c810 	.word	0x0003c810
   236b4:	0003c82c 	.word	0x0003c82c
   236b8:	0003c84d 	.word	0x0003c84d
   236bc:	0003c876 	.word	0x0003c876
   236c0:	0003c899 	.word	0x0003c899
   236c4:	0003c854 	.word	0x0003c854
   236c8:	0003c85b 	.word	0x0003c85b
   236cc:	0003c865 	.word	0x0003c865
   236d0:	0003c86f 	.word	0x0003c86f

000236d4 <my_service_init>:
{
   236d4:	b508      	push	{r3, lr}
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
   236d6:	22f0      	movs	r2, #240	; 0xf0
   236d8:	2100      	movs	r1, #0
   236da:	4802      	ldr	r0, [pc, #8]	; (236e4 <my_service_init+0x10>)
   236dc:	f015 f878 	bl	387d0 <memset>
}
   236e0:	2000      	movs	r0, #0
   236e2:	bd08      	pop	{r3, pc}
   236e4:	20004c87 	.word	0x20004c87

000236e8 <start_advertising_coded>:
{
   236e8:	b508      	push	{r3, lr}
    err = bt_le_ext_adv_start(adv, NULL);
   236ea:	4b0a      	ldr	r3, [pc, #40]	; (23714 <start_advertising_coded+0x2c>)
   236ec:	2100      	movs	r1, #0
   236ee:	6818      	ldr	r0, [r3, #0]
   236f0:	f004 fc90 	bl	28014 <bt_le_ext_adv_start>
    if(err)
   236f4:	4601      	mov	r1, r0
   236f6:	b120      	cbz	r0, 23702 <start_advertising_coded+0x1a>
}
   236f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Error: Advertising NOT started. return %d\n", err);
   236fc:	4806      	ldr	r0, [pc, #24]	; (23718 <start_advertising_coded+0x30>)
   236fe:	f014 ba5b 	b.w	37bb8 <printk>
		printk("Bluetooth advertising started!\n");
   23702:	4806      	ldr	r0, [pc, #24]	; (2371c <start_advertising_coded+0x34>)
   23704:	f014 fa58 	bl	37bb8 <printk>
}
   23708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nrf_gpio_pin_set(BLUE_LED_PIN);
   2370c:	2010      	movs	r0, #16
   2370e:	f014 ba03 	b.w	37b18 <nrf_gpio_pin_set>
   23712:	bf00      	nop
   23714:	2000331c 	.word	0x2000331c
   23718:	0003c942 	.word	0x0003c942
   2371c:	0003c96d 	.word	0x0003c96d

00023720 <disconnected_cb>:
{
   23720:	b508      	push	{r3, lr}
    printk("Disconnected with reason %d\n", reason);
   23722:	4809      	ldr	r0, [pc, #36]	; (23748 <disconnected_cb+0x28>)
   23724:	f014 fa48 	bl	37bb8 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   23728:	2100      	movs	r1, #0
   2372a:	f640 40cd 	movw	r0, #3277	; 0xccd
   2372e:	f010 fa57 	bl	33be0 <z_impl_k_sleep>
	conn_handle = NULL;
   23732:	4b06      	ldr	r3, [pc, #24]	; (2374c <disconnected_cb+0x2c>)
   23734:	2200      	movs	r2, #0
   23736:	601a      	str	r2, [r3, #0]
    start_advertising_coded();
   23738:	f7ff ffd6 	bl	236e8 <start_advertising_coded>
}
   2373c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	nrfx_gpiote_out_task_disable(HAPTIC_MOTOR_PIN);
   23740:	200d      	movs	r0, #13
   23742:	f00c bda7 	b.w	30294 <nrfx_gpiote_out_task_disable>
   23746:	bf00      	nop
   23748:	0003c98d 	.word	0x0003c98d
   2374c:	20003318 	.word	0x20003318

00023750 <bt_pageAlert>:
{
   23750:	b570      	push	{r4, r5, r6, lr}
    if(bt_gatt_notify(conn, page_alert_attr, &data, len))
   23752:	4b0f      	ldr	r3, [pc, #60]	; (23790 <bt_pageAlert+0x40>)
{
   23754:	b088      	sub	sp, #32
    if(bt_gatt_notify(conn, page_alert_attr, &data, len))
   23756:	681e      	ldr	r6, [r3, #0]
{
   23758:	9101      	str	r1, [sp, #4]
   2375a:	4604      	mov	r4, r0
   2375c:	4615      	mov	r5, r2
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   2375e:	2100      	movs	r1, #0
   23760:	2218      	movs	r2, #24
   23762:	a802      	add	r0, sp, #8
   23764:	f015 f834 	bl	387d0 <memset>

	params.attr = attr;
   23768:	9603      	str	r6, [sp, #12]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   2376a:	a902      	add	r1, sp, #8
	params.data = data;
   2376c:	ae01      	add	r6, sp, #4
	return bt_gatt_notify_cb(conn, &params);
   2376e:	4620      	mov	r0, r4
	params.data = data;
   23770:	9604      	str	r6, [sp, #16]
	params.len = len;
   23772:	f8ad 5014 	strh.w	r5, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   23776:	f007 fb1d 	bl	2adb4 <bt_gatt_notify_cb>
    if(bt_gatt_notify(conn, page_alert_attr, &data, len))
   2377a:	b120      	cbz	r0, 23786 <bt_pageAlert+0x36>
        printk("Error, unable to send notification\n");
   2377c:	4805      	ldr	r0, [pc, #20]	; (23794 <bt_pageAlert+0x44>)
   2377e:	f014 fa1b 	bl	37bb8 <printk>
}
   23782:	b008      	add	sp, #32
   23784:	bd70      	pop	{r4, r5, r6, pc}
        printk("Notified Peer of %d\n", (int) &data);
   23786:	4804      	ldr	r0, [pc, #16]	; (23798 <bt_pageAlert+0x48>)
   23788:	4631      	mov	r1, r6
   2378a:	f014 fa15 	bl	37bb8 <printk>
}
   2378e:	e7f8      	b.n	23782 <bt_pageAlert+0x32>
   23790:	20003314 	.word	0x20003314
   23794:	0003c9aa 	.word	0x0003c9aa
   23798:	0003c9ce 	.word	0x0003c9ce

0002379c <offload_function>:
{
   2379c:	b507      	push	{r0, r1, r2, lr}
	if (conn_handle != NULL)
   2379e:	4b07      	ldr	r3, [pc, #28]	; (237bc <offload_function+0x20>)
   237a0:	6818      	ldr	r0, [r3, #0]
	uint8_t page_d[] = {0x01};
   237a2:	2201      	movs	r2, #1
   237a4:	f88d 2004 	strb.w	r2, [sp, #4]
	if (conn_handle != NULL)
   237a8:	b110      	cbz	r0, 237b0 <offload_function+0x14>
		bt_pageAlert(conn_handle, page_p, 1);
   237aa:	a901      	add	r1, sp, #4
   237ac:	f7ff ffd0 	bl	23750 <bt_pageAlert>
	printk("Work thread executed. \n");
   237b0:	4803      	ldr	r0, [pc, #12]	; (237c0 <offload_function+0x24>)
   237b2:	f014 fa01 	bl	37bb8 <printk>
}
   237b6:	b003      	add	sp, #12
   237b8:	f85d fb04 	ldr.w	pc, [sp], #4
   237bc:	20003318 	.word	0x20003318
   237c0:	0003c9e3 	.word	0x0003c9e3

000237c4 <configure_haptic_button>:

nrfx_err_t configure_haptic_button(void)
{
   237c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    nrfx_err_t err = NRFX_SUCCESS;
	uint8_t in_channel;
    uint8_t out_channel;
    uint8_t ppi_channel;

	IRQ_CONNECT(DT_IRQN(DT_NODELABEL(gpiote)),
   237c6:	2200      	movs	r2, #0
{
   237c8:	b085      	sub	sp, #20
	IRQ_CONNECT(DT_IRQN(DT_NODELABEL(gpiote)),
   237ca:	2105      	movs	r1, #5
   237cc:	2006      	movs	r0, #6
   237ce:	f001 fe3b 	bl	25448 <z_arm_irq_priority_set>
		    DT_IRQ(DT_NODELABEL(gpiote), priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	err = nrfx_gpiote_init(0);
   237d2:	2000      	movs	r0, #0
   237d4:	f00c fcfc 	bl	301d0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   237d8:	4d37      	ldr	r5, [pc, #220]	; (238b8 <configure_haptic_button+0xf4>)
   237da:	42a8      	cmp	r0, r5
	err = nrfx_gpiote_init(0);
   237dc:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
   237de:	d006      	beq.n	237ee <configure_haptic_button+0x2a>
		printk("nrfx_gpiote_init error: 0x%08X", err);
   237e0:	4601      	mov	r1, r0
   237e2:	4836      	ldr	r0, [pc, #216]	; (238bc <configure_haptic_button+0xf8>)
	};
	err = nrfx_gpiote_output_configure(HAPTIC_MOTOR_PIN,
					   &output_config,
					   &task_config);
	if (err != NRFX_SUCCESS) {
		printk("nrfx_gpiote_output_configure error: 0x%08X", err);
   237e4:	f014 f9e8 	bl	37bb8 <printk>

	/* Enable the channel. */
	nrfx_gppi_channels_enable(BIT(ppi_channel));

    return err;
}
   237e8:	4620      	mov	r0, r4
   237ea:	b005      	add	sp, #20
   237ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = nrfx_gpiote_channel_alloc(&in_channel);
   237ee:	f10d 0701 	add.w	r7, sp, #1
   237f2:	4638      	mov	r0, r7
   237f4:	f00c fd14 	bl	30220 <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   237f8:	42a8      	cmp	r0, r5
	err = nrfx_gpiote_channel_alloc(&in_channel);
   237fa:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
   237fc:	d002      	beq.n	23804 <configure_haptic_button+0x40>
		printk("Failed to allocate in_channel, error: 0x%08X", err);
   237fe:	4601      	mov	r1, r0
   23800:	482f      	ldr	r0, [pc, #188]	; (238c0 <configure_haptic_button+0xfc>)
   23802:	e7ef      	b.n	237e4 <configure_haptic_button+0x20>
    err = nrfx_gpiote_channel_alloc(&out_channel);
   23804:	f10d 0002 	add.w	r0, sp, #2
   23808:	f00c fd0a 	bl	30220 <nrfx_gpiote_channel_alloc>
	if (err != NRFX_SUCCESS) {
   2380c:	42a8      	cmp	r0, r5
    err = nrfx_gpiote_channel_alloc(&out_channel);
   2380e:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
   23810:	d002      	beq.n	23818 <configure_haptic_button+0x54>
		printk("Failed to allocate out_channel, error: 0x%08X", err);
   23812:	4601      	mov	r1, r0
   23814:	482b      	ldr	r0, [pc, #172]	; (238c4 <configure_haptic_button+0x100>)
   23816:	e7e5      	b.n	237e4 <configure_haptic_button+0x20>
	err = nrfx_gpiote_input_configure(PAGE_BUTTON_PIN,
   23818:	4b2b      	ldr	r3, [pc, #172]	; (238c8 <configure_haptic_button+0x104>)
   2381a:	492c      	ldr	r1, [pc, #176]	; (238cc <configure_haptic_button+0x108>)
	const nrfx_gpiote_trigger_config_t trigger_config = {
   2381c:	9703      	str	r7, [sp, #12]
   2381e:	2603      	movs	r6, #3
	err = nrfx_gpiote_input_configure(PAGE_BUTTON_PIN,
   23820:	aa02      	add	r2, sp, #8
   23822:	200b      	movs	r0, #11
	const nrfx_gpiote_trigger_config_t trigger_config = {
   23824:	f88d 6008 	strb.w	r6, [sp, #8]
	err = nrfx_gpiote_input_configure(PAGE_BUTTON_PIN,
   23828:	f00c fbb4 	bl	2ff94 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2382c:	42a8      	cmp	r0, r5
	err = nrfx_gpiote_input_configure(PAGE_BUTTON_PIN,
   2382e:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
   23830:	d002      	beq.n	23838 <configure_haptic_button+0x74>
		printk("nrfx_gpiote_input_configure error: 0x%08X", err);
   23832:	4601      	mov	r1, r0
   23834:	4826      	ldr	r0, [pc, #152]	; (238d0 <configure_haptic_button+0x10c>)
   23836:	e7d5      	b.n	237e4 <configure_haptic_button+0x20>
	const nrfx_gpiote_task_config_t task_config = {
   23838:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2383c:	f88d 6005 	strb.w	r6, [sp, #5]
	err = nrfx_gpiote_output_configure(HAPTIC_MOTOR_PIN,
   23840:	4924      	ldr	r1, [pc, #144]	; (238d4 <configure_haptic_button+0x110>)
	const nrfx_gpiote_task_config_t task_config = {
   23842:	f88d 3004 	strb.w	r3, [sp, #4]
   23846:	2600      	movs	r6, #0
	err = nrfx_gpiote_output_configure(HAPTIC_MOTOR_PIN,
   23848:	aa01      	add	r2, sp, #4
   2384a:	200d      	movs	r0, #13
	const nrfx_gpiote_task_config_t task_config = {
   2384c:	f88d 6006 	strb.w	r6, [sp, #6]
	err = nrfx_gpiote_output_configure(HAPTIC_MOTOR_PIN,
   23850:	f00c fc4a 	bl	300e8 <nrfx_gpiote_output_configure>
	if (err != NRFX_SUCCESS) {
   23854:	42a8      	cmp	r0, r5
	err = nrfx_gpiote_output_configure(HAPTIC_MOTOR_PIN,
   23856:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
   23858:	d002      	beq.n	23860 <configure_haptic_button+0x9c>
		printk("nrfx_gpiote_output_configure error: 0x%08X", err);
   2385a:	4601      	mov	r1, r0
   2385c:	481e      	ldr	r0, [pc, #120]	; (238d8 <configure_haptic_button+0x114>)
   2385e:	e7c1      	b.n	237e4 <configure_haptic_button+0x20>
    nrfx_gpiote_trigger_enable(PAGE_BUTTON_PIN, true);
   23860:	2101      	movs	r1, #1
   23862:	200b      	movs	r0, #11
   23864:	f00c fd74 	bl	30350 <nrfx_gpiote_trigger_enable>
}

__STATIC_INLINE nrfx_err_t nrfx_gppi_channel_alloc(uint8_t * p_channel)
{
#if NRFX_CHECK(NRFX_PPI_ENABLED)
    return nrfx_ppi_channel_alloc((nrf_ppi_channel_t *)p_channel);
   23868:	f10d 0003 	add.w	r0, sp, #3
   2386c:	f00c ff66 	bl	3073c <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
   23870:	42a8      	cmp	r0, r5
   23872:	4604      	mov	r4, r0
   23874:	d005      	beq.n	23882 <configure_haptic_button+0xbe>
		printk("nrfx_gppi_channel_alloc error: 0x%08X", err);
   23876:	4601      	mov	r1, r0
   23878:	4818      	ldr	r0, [pc, #96]	; (238dc <configure_haptic_button+0x118>)
   2387a:	f014 f99d 	bl	37bb8 <printk>
		return 0;
   2387e:	4634      	mov	r4, r6
   23880:	e7b2      	b.n	237e8 <configure_haptic_button+0x24>
	nrfx_gppi_channel_endpoints_setup(ppi_channel,
   23882:	200b      	movs	r0, #11
   23884:	f89d 5003 	ldrb.w	r5, [sp, #3]
   23888:	f017 fab5 	bl	3adf6 <nrfx_gpiote_in_event_addr_get>
   2388c:	4606      	mov	r6, r0
   2388e:	200d      	movs	r0, #13
   23890:	f017 faa9 	bl	3ade6 <nrfx_gpiote_out_task_addr_get>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   23894:	00eb      	lsls	r3, r5, #3
   23896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2389a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
	nrfx_gppi_channels_enable(BIT(ppi_channel));
   2389e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   238a2:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   238a6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
   238aa:	2301      	movs	r3, #1
   238ac:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   238ae:	4a0c      	ldr	r2, [pc, #48]	; (238e0 <configure_haptic_button+0x11c>)
   238b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return err;
   238b4:	e798      	b.n	237e8 <configure_haptic_button+0x24>
   238b6:	bf00      	nop
   238b8:	0bad0000 	.word	0x0bad0000
   238bc:	0003c9fb 	.word	0x0003c9fb
   238c0:	0003ca1a 	.word	0x0003ca1a
   238c4:	0003ca47 	.word	0x0003ca47
   238c8:	0003bdf8 	.word	0x0003bdf8
   238cc:	0003cc1d 	.word	0x0003cc1d
   238d0:	0003ca75 	.word	0x0003ca75
   238d4:	0003cc1a 	.word	0x0003cc1a
   238d8:	0003ca9f 	.word	0x0003ca9f
   238dc:	0003caca 	.word	0x0003caca
   238e0:	4001f000 	.word	0x4001f000

000238e4 <main>:


void main(void)
{
   238e4:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err;

	printk("~~~~~~~~~~rareBit Flag Demo~~~~~~~~~~~~~\n");
   238e6:	4866      	ldr	r0, [pc, #408]	; (23a80 <main+0x19c>)
{
   238e8:	b088      	sub	sp, #32
	printk("~~~~~~~~~~rareBit Flag Demo~~~~~~~~~~~~~\n");
   238ea:	f014 f965 	bl	37bb8 <printk>
    nrf_gpio_cfg(
   238ee:	260b      	movs	r6, #11
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   238f0:	a803      	add	r0, sp, #12
   238f2:	9603      	str	r6, [sp, #12]
   238f4:	f7ff fe52 	bl	2359c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   238f8:	9b03      	ldr	r3, [sp, #12]
   238fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   238fe:	240c      	movs	r4, #12
   23900:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23904:	eb0d 0004 	add.w	r0, sp, r4
   23908:	9403      	str	r4, [sp, #12]
   2390a:	f7ff fe47 	bl	2359c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2390e:	9b03      	ldr	r3, [sp, #12]
   23910:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23914:	2500      	movs	r5, #0
   23916:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   2391a:	2318      	movs	r3, #24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2391c:	eb0d 0004 	add.w	r0, sp, r4
   23920:	9303      	str	r3, [sp, #12]
   23922:	f7ff fe3b 	bl	2359c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23926:	9b03      	ldr	r3, [sp, #12]
   23928:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
	nrf_gpio_cfg_input(PAGE_BUTTON_PIN, NRF_GPIO_PIN_PULLUP);
	nrf_gpio_cfg_input(USB_PIN, NRF_GPIO_PIN_NOPULL);
	nrf_gpio_cfg_input(CHG_STAT_PIN, NRF_GPIO_PIN_NOPULL);

	/* Configure to generate PORT event (wakeup) on button 1 press. */
	nrf_gpio_cfg_sense_set(PAGE_BUTTON_PIN, NRF_GPIO_PIN_SENSE_LOW);
   2392c:	2103      	movs	r1, #3
   2392e:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
   23932:	4630      	mov	r0, r6
   23934:	f014 f918 	bl	37b68 <nrf_gpio_cfg_sense_set>
	nrf_gpio_cfg_sense_set(USB_PIN, NRF_GPIO_PIN_SENSE_HIGH);
   23938:	2102      	movs	r1, #2
   2393a:	4620      	mov	r0, r4
   2393c:	f014 f914 	bl	37b68 <nrf_gpio_cfg_sense_set>

	nrf_gpio_cfg_output(RED_LED_PIN);
   23940:	200e      	movs	r0, #14
   23942:	f014 f8f6 	bl	37b32 <nrf_gpio_cfg_output>
	nrf_gpio_cfg_output(GREEN_LED_PIN);
   23946:	200f      	movs	r0, #15
   23948:	f014 f8f3 	bl	37b32 <nrf_gpio_cfg_output>
	nrf_gpio_cfg_output(BLUE_LED_PIN);
   2394c:	2010      	movs	r0, #16
   2394e:	f014 f8f0 	bl	37b32 <nrf_gpio_cfg_output>
	    k_sleep(K_SECONDS(SLEEP_S));

	}
#endif
	//Continues...
	k_work_queue_start(&offload_work_q, my_stack_area,
   23952:	2304      	movs	r3, #4
   23954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23958:	494a      	ldr	r1, [pc, #296]	; (23a84 <main+0x1a0>)
   2395a:	484b      	ldr	r0, [pc, #300]	; (23a88 <main+0x1a4>)
   2395c:	9500      	str	r5, [sp, #0]
   2395e:	f00f f855 	bl	32a0c <k_work_queue_start>
					K_THREAD_STACK_SIZEOF(my_stack_area), WORKQ_PRIORITY,
					NULL);
	strcpy(my_work.name, "Bluetooth Notify thread");
   23962:	494a      	ldr	r1, [pc, #296]	; (23a8c <main+0x1a8>)
   23964:	484a      	ldr	r0, [pc, #296]	; (23a90 <main+0x1ac>)
   23966:	f014 fedb 	bl	38720 <strcpy>
	k_work_init(&my_work.work, offload_function);
   2396a:	494a      	ldr	r1, [pc, #296]	; (23a94 <main+0x1b0>)
   2396c:	484a      	ldr	r0, [pc, #296]	; (23a98 <main+0x1b4>)
   2396e:	f00e ff97 	bl	328a0 <k_work_init>
	
    //Initialize Button/Motor Peripherals
    err = configure_haptic_button();
   23972:	f7ff ff27 	bl	237c4 <configure_haptic_button>
    if (err != NRFX_SUCCESS)
   23976:	4b49      	ldr	r3, [pc, #292]	; (23a9c <main+0x1b8>)
   23978:	4298      	cmp	r0, r3
    err = configure_haptic_button();
   2397a:	4604      	mov	r4, r0
    if (err != NRFX_SUCCESS)
   2397c:	d17d      	bne.n	23a7a <main+0x196>
        return;
    }
#endif

    // Initialize the Bluetooth stack
    rc = bt_enable(NULL);
   2397e:	4628      	mov	r0, r5
   23980:	f003 fcf8 	bl	27374 <bt_enable>
    if (rc)
   23984:	b130      	cbz	r0, 23994 <main+0xb0>
    {
        printk("Bluetooth init failed (err %d)\n", err);
   23986:	4846      	ldr	r0, [pc, #280]	; (23aa0 <main+0x1bc>)
   23988:	4621      	mov	r1, r4
			nrf_gpio_pin_clear(GREEN_LED_PIN);
		}
			
#endif
    }
   2398a:	b008      	add	sp, #32
   2398c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Bluetooth init failed (err %d)\n", err);
   23990:	f014 b912 	b.w	37bb8 <printk>
    rc = my_service_init();
   23994:	f7ff fe9e 	bl	236d4 <my_service_init>
    if(rc)
   23998:	4606      	mov	r6, r0
   2399a:	b128      	cbz	r0, 239a8 <main+0xc4>
        printk("Could not initialize simple service \n");
   2399c:	4841      	ldr	r0, [pc, #260]	; (23aa4 <main+0x1c0>)
   2399e:	b008      	add	sp, #32
   239a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Could not initialize simple service \n");
   239a4:	f014 b908 	b.w	37bb8 <printk>
    printk("....\n Bluetooth stack init success\n");
   239a8:	483f      	ldr	r0, [pc, #252]	; (23aa8 <main+0x1c4>)
    struct bt_le_adv_param params = BT_LE_ADV_PARAM_INIT(BT_LE_ADV_OPT_CONNECTABLE |
   239aa:	4d40      	ldr	r5, [pc, #256]	; (23aac <main+0x1c8>)
    printk("....\n Bluetooth stack init success\n");
   239ac:	f014 f904 	bl	37bb8 <printk>
    bt_conn_cb_register(&conn_callbacks);
   239b0:	483f      	ldr	r0, [pc, #252]	; (23ab0 <main+0x1cc>)
   239b2:	f005 f933 	bl	28c1c <bt_conn_cb_register>
    struct bt_le_adv_param params = BT_LE_ADV_PARAM_INIT(BT_LE_ADV_OPT_CONNECTABLE |
   239b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   239b8:	ac03      	add	r4, sp, #12
   239ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   239bc:	682b      	ldr	r3, [r5, #0]
    err = bt_le_ext_adv_create(&params, NULL, &adv);
   239be:	4a3d      	ldr	r2, [pc, #244]	; (23ab4 <main+0x1d0>)
    struct bt_le_adv_param params = BT_LE_ADV_PARAM_INIT(BT_LE_ADV_OPT_CONNECTABLE |
   239c0:	6023      	str	r3, [r4, #0]
    err = bt_le_ext_adv_create(&params, NULL, &adv);
   239c2:	4631      	mov	r1, r6
   239c4:	a803      	add	r0, sp, #12
   239c6:	f004 faf5 	bl	27fb4 <bt_le_ext_adv_create>
    if(err)
   239ca:	4601      	mov	r1, r0
   239cc:	2800      	cmp	r0, #0
   239ce:	d045      	beq.n	23a5c <main+0x178>
        printk("Error %d could not create ext_adv.\n", err);
   239d0:	4839      	ldr	r0, [pc, #228]	; (23ab8 <main+0x1d4>)
   239d2:	f014 f8f1 	bl	37bb8 <printk>
    err = bt_le_ext_adv_set_data(adv, ad, ARRAY_SIZE(ad), NULL, 0);
   239d6:	2300      	movs	r3, #0
   239d8:	4836      	ldr	r0, [pc, #216]	; (23ab4 <main+0x1d0>)
   239da:	9300      	str	r3, [sp, #0]
   239dc:	4937      	ldr	r1, [pc, #220]	; (23abc <main+0x1d8>)
   239de:	6800      	ldr	r0, [r0, #0]
   239e0:	2204      	movs	r2, #4
   239e2:	f015 f9e6 	bl	38db2 <bt_le_ext_adv_set_data>
    if(err)
   239e6:	4601      	mov	r1, r0
   239e8:	2800      	cmp	r0, #0
   239ea:	d03b      	beq.n	23a64 <main+0x180>
        printk("Error %d could not set_data.\n", err);
   239ec:	4834      	ldr	r0, [pc, #208]	; (23ac0 <main+0x1dc>)
   239ee:	f014 f8e3 	bl	37bb8 <printk>
    start_advertising_coded();
   239f2:	f7ff fe79 	bl	236e8 <start_advertising_coded>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
   239f6:	4d33      	ldr	r5, [pc, #204]	; (23ac4 <main+0x1e0>)
	int blink_cnt = 0;
   239f8:	2400      	movs	r4, #0
	return z_impl_k_sleep(timeout);
   239fa:	f640 40cd 	movw	r0, #3277	; 0xccd
   239fe:	2100      	movs	r1, #0
		blink_cnt++;
   23a00:	3401      	adds	r4, #1
   23a02:	f010 f8ed 	bl	33be0 <z_impl_k_sleep>
		if (blink_cnt >= 100)
   23a06:	2c64      	cmp	r4, #100	; 0x64
   23a08:	d109      	bne.n	23a1e <main+0x13a>
			nrf_gpio_pin_set(BLUE_LED_PIN);
   23a0a:	2010      	movs	r0, #16
   23a0c:	f014 f884 	bl	37b18 <nrf_gpio_pin_set>
	z_impl_k_busy_wait(usec_to_wait);
   23a10:	4628      	mov	r0, r5
   23a12:	f017 fe3b 	bl	3b68c <z_impl_k_busy_wait>
			nrf_gpio_pin_clear(BLUE_LED_PIN);
   23a16:	2010      	movs	r0, #16
   23a18:	f014 f899 	bl	37b4e <nrf_gpio_pin_clear>
			blink_cnt = 0;
   23a1c:	2400      	movs	r4, #0
		if(nrf_gpio_pin_read(USB_PIN))
   23a1e:	230c      	movs	r3, #12
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a20:	eb0d 0003 	add.w	r0, sp, r3
   23a24:	9303      	str	r3, [sp, #12]
   23a26:	f7ff fdb9 	bl	2359c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23a2a:	9a03      	ldr	r2, [sp, #12]
    return p_reg->IN;
   23a2c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23a30:	40d3      	lsrs	r3, r2
   23a32:	07da      	lsls	r2, r3, #31
   23a34:	d51a      	bpl.n	23a6c <main+0x188>
			if(nrf_gpio_pin_read(CHG_STAT_PIN))
   23a36:	2318      	movs	r3, #24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23a38:	a803      	add	r0, sp, #12
   23a3a:	9303      	str	r3, [sp, #12]
   23a3c:	f7ff fdae 	bl	2359c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23a40:	9a03      	ldr	r2, [sp, #12]
    return p_reg->IN;
   23a42:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23a46:	40d3      	lsrs	r3, r2
   23a48:	07db      	lsls	r3, r3, #31
				nrf_gpio_pin_clear(RED_LED_PIN);
   23a4a:	f04f 000e 	mov.w	r0, #14
			if(nrf_gpio_pin_read(CHG_STAT_PIN))
   23a4e:	d502      	bpl.n	23a56 <main+0x172>
				nrf_gpio_pin_clear(RED_LED_PIN);
   23a50:	f014 f87d 	bl	37b4e <nrf_gpio_pin_clear>
				nrf_gpio_pin_set(GREEN_LED_PIN);
   23a54:	200f      	movs	r0, #15
				nrf_gpio_pin_set(RED_LED_PIN);
   23a56:	f014 f85f 	bl	37b18 <nrf_gpio_pin_set>
   23a5a:	e7ce      	b.n	239fa <main+0x116>
    else printk("CODED PHY Advertising Configured.\n");
   23a5c:	481a      	ldr	r0, [pc, #104]	; (23ac8 <main+0x1e4>)
   23a5e:	f014 f8ab 	bl	37bb8 <printk>
   23a62:	e7b8      	b.n	239d6 <main+0xf2>
    else printk("CODED PHY adv data set.\n");
   23a64:	4819      	ldr	r0, [pc, #100]	; (23acc <main+0x1e8>)
   23a66:	f014 f8a7 	bl	37bb8 <printk>
   23a6a:	e7c2      	b.n	239f2 <main+0x10e>
			nrf_gpio_pin_clear(RED_LED_PIN);
   23a6c:	200e      	movs	r0, #14
   23a6e:	f014 f86e 	bl	37b4e <nrf_gpio_pin_clear>
			nrf_gpio_pin_clear(GREEN_LED_PIN);
   23a72:	200f      	movs	r0, #15
   23a74:	f014 f86b 	bl	37b4e <nrf_gpio_pin_clear>
   23a78:	e7bf      	b.n	239fa <main+0x116>
   23a7a:	b008      	add	sp, #32
   23a7c:	bd70      	pop	{r4, r5, r6, pc}
   23a7e:	bf00      	nop
   23a80:	0003caf0 	.word	0x0003caf0
   23a84:	200052c0 	.word	0x200052c0
   23a88:	20001be0 	.word	0x20001be0
   23a8c:	0003cb1a 	.word	0x0003cb1a
   23a90:	20003330 	.word	0x20003330
   23a94:	0002379d 	.word	0x0002379d
   23a98:	20003320 	.word	0x20003320
   23a9c:	0bad0000 	.word	0x0bad0000
   23aa0:	0003cb32 	.word	0x0003cb32
   23aa4:	0003cb52 	.word	0x0003cb52
   23aa8:	0003cb78 	.word	0x0003cb78
   23aac:	0003bd90 	.word	0x0003bd90
   23ab0:	20000608 	.word	0x20000608
   23ab4:	2000331c 	.word	0x2000331c
   23ab8:	0003cb9c 	.word	0x0003cb9c
   23abc:	0003be50 	.word	0x0003be50
   23ac0:	0003cbe3 	.word	0x0003cbe3
   23ac4:	00030d40 	.word	0x00030d40
   23ac8:	0003cbc0 	.word	0x0003cbc0
   23acc:	0003cc01 	.word	0x0003cc01

00023ad0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   23ad0:	4b01      	ldr	r3, [pc, #4]	; (23ad8 <char_out+0x8>)
   23ad2:	681b      	ldr	r3, [r3, #0]
   23ad4:	4718      	bx	r3
   23ad6:	bf00      	nop
   23ad8:	20000628 	.word	0x20000628

00023adc <__printk_hook_install>:
	_char_out = fn;
   23adc:	4b01      	ldr	r3, [pc, #4]	; (23ae4 <__printk_hook_install+0x8>)
   23ade:	6018      	str	r0, [r3, #0]
}
   23ae0:	4770      	bx	lr
   23ae2:	bf00      	nop
   23ae4:	20000628 	.word	0x20000628

00023ae8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   23ae8:	b507      	push	{r0, r1, r2, lr}
   23aea:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   23aec:	2100      	movs	r1, #0
   23aee:	4602      	mov	r2, r0
   23af0:	9100      	str	r1, [sp, #0]
   23af2:	4803      	ldr	r0, [pc, #12]	; (23b00 <vprintk+0x18>)
   23af4:	f000 fba8 	bl	24248 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   23af8:	b003      	add	sp, #12
   23afa:	f85d fb04 	ldr.w	pc, [sp], #4
   23afe:	bf00      	nop
   23b00:	00023ad1 	.word	0x00023ad1

00023b04 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   23b04:	b530      	push	{r4, r5, lr}
   23b06:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   23b08:	2500      	movs	r5, #0
   23b0a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   23b0e:	4604      	mov	r4, r0
   23b10:	9500      	str	r5, [sp, #0]
   23b12:	a903      	add	r1, sp, #12
   23b14:	4805      	ldr	r0, [pc, #20]	; (23b2c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   23b16:	9505      	str	r5, [sp, #20]
   23b18:	f000 fb96 	bl	24248 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   23b1c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   23b20:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   23b22:	bfb8      	it	lt
   23b24:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   23b26:	b007      	add	sp, #28
   23b28:	bd30      	pop	{r4, r5, pc}
   23b2a:	bf00      	nop
   23b2c:	00037b93 	.word	0x00037b93

00023b30 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   23b30:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   23b32:	b351      	cbz	r1, 23b8a <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   23b34:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23b36:	1f0b      	subs	r3, r1, #4
   23b38:	1a9b      	subs	r3, r3, r2
   23b3a:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   23b3c:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   23b40:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23b42:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   23b44:	07e0      	lsls	r0, r4, #31
   23b46:	d408      	bmi.n	23b5a <sys_heap_free+0x2a>
   23b48:	4910      	ldr	r1, [pc, #64]	; (23b8c <sys_heap_free+0x5c>)
   23b4a:	4811      	ldr	r0, [pc, #68]	; (23b90 <sys_heap_free+0x60>)
   23b4c:	22af      	movs	r2, #175	; 0xaf
   23b4e:	f014 fa3b 	bl	37fc8 <assert_print>
   23b52:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   23b54:	480d      	ldr	r0, [pc, #52]	; (23b8c <sys_heap_free+0x5c>)
   23b56:	f014 fa30 	bl	37fba <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   23b5a:	4610      	mov	r0, r2
   23b5c:	f014 f850 	bl	37c00 <chunk_size>
   23b60:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   23b62:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23b66:	1b40      	subs	r0, r0, r5
   23b68:	4281      	cmp	r1, r0
   23b6a:	d006      	beq.n	23b7a <sys_heap_free+0x4a>
   23b6c:	4907      	ldr	r1, [pc, #28]	; (23b8c <sys_heap_free+0x5c>)
   23b6e:	4808      	ldr	r0, [pc, #32]	; (23b90 <sys_heap_free+0x60>)
   23b70:	22b7      	movs	r2, #183	; 0xb7
   23b72:	f014 fa29 	bl	37fc8 <assert_print>
   23b76:	21b7      	movs	r1, #183	; 0xb7
   23b78:	e7ec      	b.n	23b54 <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   23b7a:	f024 0401 	bic.w	r4, r4, #1
   23b7e:	805c      	strh	r4, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   23b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   23b84:	4610      	mov	r0, r2
   23b86:	f014 b8f8 	b.w	37d7a <free_chunk>
}
   23b8a:	bd38      	pop	{r3, r4, r5, pc}
   23b8c:	0003cc41 	.word	0x0003cc41
   23b90:	0003c7f8 	.word	0x0003c7f8

00023b94 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   23b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23b98:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   23b9a:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   23b9c:	6806      	ldr	r6, [r0, #0]
{
   23b9e:	460f      	mov	r7, r1
   23ba0:	4614      	mov	r4, r2
	if (align != rew) {
   23ba2:	d011      	beq.n	23bc8 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   23ba4:	f1c1 0900 	rsb	r9, r1, #0
   23ba8:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   23bac:	464a      	mov	r2, r9
   23bae:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   23bb0:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   23bb4:	bf28      	it	cs
   23bb6:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   23bb8:	4219      	tst	r1, r3
   23bba:	d10c      	bne.n	23bd6 <sys_heap_aligned_alloc+0x42>
   23bbc:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   23bbe:	b9c4      	cbnz	r4, 23bf2 <sys_heap_aligned_alloc+0x5e>
		return NULL;
   23bc0:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   23bc2:	4628      	mov	r0, r5
   23bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   23bc8:	2904      	cmp	r1, #4
   23bca:	d80f      	bhi.n	23bec <sys_heap_aligned_alloc+0x58>
}
   23bcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   23bd0:	4611      	mov	r1, r2
   23bd2:	f014 b903 	b.w	37ddc <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   23bd6:	492a      	ldr	r1, [pc, #168]	; (23c80 <sys_heap_aligned_alloc+0xec>)
   23bd8:	482a      	ldr	r0, [pc, #168]	; (23c84 <sys_heap_aligned_alloc+0xf0>)
   23bda:	f44f 72a2 	mov.w	r2, #324	; 0x144
   23bde:	f014 f9f3 	bl	37fc8 <assert_print>
   23be2:	4827      	ldr	r0, [pc, #156]	; (23c80 <sys_heap_aligned_alloc+0xec>)
   23be4:	f44f 71a2 	mov.w	r1, #324	; 0x144
   23be8:	f014 f9e7 	bl	37fba <assert_post_action>
		rew = 0;
   23bec:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   23bee:	2204      	movs	r2, #4
   23bf0:	e7e5      	b.n	23bbe <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   23bf2:	68b3      	ldr	r3, [r6, #8]
   23bf4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   23bf8:	d9e2      	bls.n	23bc0 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23bfa:	f104 010b 	add.w	r1, r4, #11
   23bfe:	4439      	add	r1, r7
   23c00:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   23c02:	08c9      	lsrs	r1, r1, #3
   23c04:	4630      	mov	r0, r6
   23c06:	f014 f851 	bl	37cac <alloc_chunk>
	if (c0 == 0) {
   23c0a:	4680      	mov	r8, r0
   23c0c:	2800      	cmp	r0, #0
   23c0e:	d0d7      	beq.n	23bc0 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   23c10:	f109 0504 	add.w	r5, r9, #4
   23c14:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   23c18:	1e7b      	subs	r3, r7, #1
   23c1a:	4435      	add	r5, r6
   23c1c:	441d      	add	r5, r3
   23c1e:	427f      	negs	r7, r7
   23c20:	403d      	ands	r5, r7
   23c22:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23c26:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23c28:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23c2a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23c2c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23c2e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   23c32:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   23c34:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23c38:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   23c3c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   23c40:	d208      	bcs.n	23c54 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c0, c);
   23c42:	4601      	mov	r1, r0
   23c44:	463a      	mov	r2, r7
   23c46:	4630      	mov	r0, r6
   23c48:	f014 f87d 	bl	37d46 <split_chunks>
		free_list_add(h, c0);
   23c4c:	4641      	mov	r1, r8
   23c4e:	4630      	mov	r0, r6
   23c50:	f013 ffdb 	bl	37c0a <free_list_add>
	return c + chunk_size(h, c);
   23c54:	4639      	mov	r1, r7
   23c56:	4630      	mov	r0, r6
   23c58:	f013 ffd2 	bl	37c00 <chunk_size>
   23c5c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   23c5e:	4284      	cmp	r4, r0
   23c60:	d207      	bcs.n	23c72 <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c, c_end);
   23c62:	4630      	mov	r0, r6
   23c64:	4622      	mov	r2, r4
   23c66:	f014 f86e 	bl	37d46 <split_chunks>
		free_list_add(h, c_end);
   23c6a:	4621      	mov	r1, r4
   23c6c:	4630      	mov	r0, r6
   23c6e:	f013 ffcc 	bl	37c0a <free_list_add>
	void *cmem = &buf[c];
   23c72:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23c76:	8873      	ldrh	r3, [r6, #2]
   23c78:	f043 0301 	orr.w	r3, r3, #1
   23c7c:	8073      	strh	r3, [r6, #2]
   23c7e:	e7a0      	b.n	23bc2 <sys_heap_aligned_alloc+0x2e>
   23c80:	0003cc41 	.word	0x0003cc41
   23c84:	0003c7f8 	.word	0x0003c7f8

00023c88 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   23c88:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   23c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c8e:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   23c90:	d30a      	bcc.n	23ca8 <sys_heap_init+0x20>
   23c92:	4933      	ldr	r1, [pc, #204]	; (23d60 <sys_heap_init+0xd8>)
   23c94:	4833      	ldr	r0, [pc, #204]	; (23d64 <sys_heap_init+0xdc>)
   23c96:	f240 12eb 	movw	r2, #491	; 0x1eb
   23c9a:	f014 f995 	bl	37fc8 <assert_print>
   23c9e:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   23ca2:	482f      	ldr	r0, [pc, #188]	; (23d60 <sys_heap_init+0xd8>)
   23ca4:	f014 f989 	bl	37fba <assert_post_action>
   23ca8:	2a04      	cmp	r2, #4
   23caa:	d808      	bhi.n	23cbe <sys_heap_init+0x36>
   23cac:	492c      	ldr	r1, [pc, #176]	; (23d60 <sys_heap_init+0xd8>)
   23cae:	482d      	ldr	r0, [pc, #180]	; (23d64 <sys_heap_init+0xdc>)
   23cb0:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   23cb4:	f014 f988 	bl	37fc8 <assert_print>
   23cb8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   23cbc:	e7f1      	b.n	23ca2 <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
   23cbe:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23cc0:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23cc2:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23cc4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23cc8:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23ccc:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   23cce:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23cd0:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   23cd4:	d808      	bhi.n	23ce8 <sys_heap_init+0x60>
   23cd6:	4922      	ldr	r1, [pc, #136]	; (23d60 <sys_heap_init+0xd8>)
   23cd8:	4822      	ldr	r0, [pc, #136]	; (23d64 <sys_heap_init+0xdc>)
   23cda:	f240 12fb 	movw	r2, #507	; 0x1fb
   23cde:	f014 f973 	bl	37fc8 <assert_print>
   23ce2:	f240 11fb 	movw	r1, #507	; 0x1fb
   23ce6:	e7dc      	b.n	23ca2 <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   23ce8:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   23cec:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23cf0:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   23cf4:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23cf6:	3107      	adds	r1, #7
   23cf8:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   23cfa:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   23cfc:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   23cfe:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   23d00:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   23d04:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   23d06:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   23d08:	d908      	bls.n	23d1c <sys_heap_init+0x94>
   23d0a:	4915      	ldr	r1, [pc, #84]	; (23d60 <sys_heap_init+0xd8>)
   23d0c:	4815      	ldr	r0, [pc, #84]	; (23d64 <sys_heap_init+0xdc>)
   23d0e:	f44f 7203 	mov.w	r2, #524	; 0x20c
   23d12:	f014 f959 	bl	37fc8 <assert_print>
   23d16:	f44f 7103 	mov.w	r1, #524	; 0x20c
   23d1a:	e7c2      	b.n	23ca2 <sys_heap_init+0x1a>
   23d1c:	f100 050c 	add.w	r5, r0, #12
   23d20:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   23d24:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   23d28:	42b5      	cmp	r5, r6
   23d2a:	d1fb      	bne.n	23d24 <sys_heap_init+0x9c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23d2c:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23d2e:	f045 0501 	orr.w	r5, r5, #1
   23d32:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   23d34:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   23d38:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23d3a:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   23d3c:	8004      	strh	r4, [r0, #0]
   23d3e:	8077      	strh	r7, [r6, #2]
   23d40:	1886      	adds	r6, r0, r2
   23d42:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   23d46:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   23d4a:	8074      	strh	r4, [r6, #2]
   23d4c:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23d4e:	885a      	ldrh	r2, [r3, #2]
   23d50:	f042 0201 	orr.w	r2, r2, #1
   23d54:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   23d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   23d5a:	f013 bf56 	b.w	37c0a <free_list_add>
   23d5e:	bf00      	nop
   23d60:	0003cc41 	.word	0x0003cc41
   23d64:	0003c7f8 	.word	0x0003c7f8

00023d68 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   23d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d6c:	4604      	mov	r4, r0
   23d6e:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23d70:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   23d72:	0719      	lsls	r1, r3, #28
{
   23d74:	4616      	mov	r6, r2
	if (processing) {
   23d76:	d412      	bmi.n	23d9e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   23d78:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23d7a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   23d7e:	d162      	bne.n	23e46 <process_event+0xde>
			evt = process_recheck(mgr);
   23d80:	4620      	mov	r0, r4
   23d82:	f014 f854 	bl	37e2e <process_recheck>
		}

		if (evt == EVT_NOP) {
   23d86:	b188      	cbz	r0, 23dac <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   23d88:	3801      	subs	r0, #1
   23d8a:	2804      	cmp	r0, #4
   23d8c:	f200 8121 	bhi.w	23fd2 <process_event+0x26a>
   23d90:	e8df f010 	tbh	[pc, r0, lsl #1]
   23d94:	011f0059 	.word	0x011f0059
   23d98:	00c4007e 	.word	0x00c4007e
   23d9c:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
   23d9e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   23da0:	bf0c      	ite	eq
   23da2:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   23da6:	f043 0120 	orrne.w	r1, r3, #32
   23daa:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23dac:	f104 0014 	add.w	r0, r4, #20
   23db0:	f00d fed0 	bl	31b54 <z_spin_unlock_valid>
   23db4:	2800      	cmp	r0, #0
   23db6:	f000 80a9 	beq.w	23f0c <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   23dba:	f386 8811 	msr	BASEPRI, r6
   23dbe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   23dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23dc6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   23dca:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   23dcc:	2801      	cmp	r0, #1
   23dce:	d81e      	bhi.n	23e0e <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   23dd0:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   23dd2:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   23dd4:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   23dd6:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   23dda:	d114      	bne.n	23e06 <process_event+0x9e>
		*clients = mgr->clients;
   23ddc:	463a      	mov	r2, r7
   23dde:	e003      	b.n	23de8 <process_event+0x80>
				mgr->refs += 1U;
   23de0:	8be0      	ldrh	r0, [r4, #30]
   23de2:	3001      	adds	r0, #1
   23de4:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   23de6:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   23de8:	2a00      	cmp	r2, #0
   23dea:	d1f9      	bne.n	23de0 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23dec:	f023 0307 	bic.w	r3, r3, #7
   23df0:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   23df4:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   23df6:	4620      	mov	r0, r4
   23df8:	f014 f819 	bl	37e2e <process_recheck>
   23dfc:	b390      	cbz	r0, 23e64 <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   23dfe:	f042 0220 	orr.w	r2, r2, #32
   23e02:	83a2      	strh	r2, [r4, #28]
   23e04:	e02e      	b.n	23e64 <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23e06:	f023 0307 	bic.w	r3, r3, #7
   23e0a:	b29a      	uxth	r2, r3
}
   23e0c:	e7f2      	b.n	23df4 <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
   23e0e:	2a04      	cmp	r2, #4
   23e10:	d133      	bne.n	23e7a <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23e12:	f023 0307 	bic.w	r3, r3, #7
   23e16:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   23e18:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   23e1a:	4620      	mov	r0, r4
   23e1c:	f014 f807 	bl	37e2e <process_recheck>
   23e20:	b110      	cbz	r0, 23e28 <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   23e22:	f042 0220 	orr.w	r2, r2, #32
   23e26:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23e28:	8ba3      	ldrh	r3, [r4, #28]
   23e2a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   23e2e:	4589      	cmp	r9, r1
   23e30:	f040 80d8 	bne.w	23fe4 <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   23e34:	8ba1      	ldrh	r1, [r4, #28]
   23e36:	06ca      	lsls	r2, r1, #27
   23e38:	f140 811e 	bpl.w	24078 <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   23e3c:	f021 0310 	bic.w	r3, r1, #16
   23e40:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   23e42:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   23e46:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23e4a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   23e4c:	f1b8 0f00 	cmp.w	r8, #0
   23e50:	dab9      	bge.n	23dc6 <process_event+0x5e>
	list->head = NULL;
   23e52:	2200      	movs	r2, #0
		*clients = mgr->clients;
   23e54:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23e56:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   23e5a:	e9c4 2200 	strd	r2, r2, [r4]
   23e5e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   23e62:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23e64:	8ba3      	ldrh	r3, [r4, #28]
   23e66:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   23e6a:	4589      	cmp	r9, r1
   23e6c:	f040 80bb 	bne.w	23fe6 <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
   23e70:	2f00      	cmp	r7, #0
   23e72:	d0df      	beq.n	23e34 <process_event+0xcc>
   23e74:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23e76:	46aa      	mov	sl, r5
   23e78:	e03e      	b.n	23ef8 <process_event+0x190>
		__ASSERT_NO_MSG(false);
   23e7a:	4984      	ldr	r1, [pc, #528]	; (2408c <process_event+0x324>)
   23e7c:	4884      	ldr	r0, [pc, #528]	; (24090 <process_event+0x328>)
   23e7e:	f240 121b 	movw	r2, #283	; 0x11b
   23e82:	f014 f8a1 	bl	37fc8 <assert_print>
   23e86:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   23e8a:	4880      	ldr	r0, [pc, #512]	; (2408c <process_event+0x324>)
   23e8c:	f014 f895 	bl	37fba <assert_post_action>
   23e90:	b141      	cbz	r1, 23ea4 <process_event+0x13c>
   23e92:	497e      	ldr	r1, [pc, #504]	; (2408c <process_event+0x324>)
   23e94:	487e      	ldr	r0, [pc, #504]	; (24090 <process_event+0x328>)
   23e96:	f44f 72ab 	mov.w	r2, #342	; 0x156
   23e9a:	f014 f895 	bl	37fc8 <assert_print>
   23e9e:	f44f 71ab 	mov.w	r1, #342	; 0x156
   23ea2:	e7f2      	b.n	23e8a <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   23ea4:	6823      	ldr	r3, [r4, #0]
   23ea6:	b943      	cbnz	r3, 23eba <process_event+0x152>
   23ea8:	4978      	ldr	r1, [pc, #480]	; (2408c <process_event+0x324>)
   23eaa:	4879      	ldr	r0, [pc, #484]	; (24090 <process_event+0x328>)
   23eac:	f240 1257 	movw	r2, #343	; 0x157
   23eb0:	f014 f88a 	bl	37fc8 <assert_print>
   23eb4:	f240 1157 	movw	r1, #343	; 0x157
   23eb8:	e7e7      	b.n	23e8a <process_event+0x122>
			transit = mgr->transitions->start;
   23eba:	6923      	ldr	r3, [r4, #16]
   23ebc:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   23ebe:	b945      	cbnz	r5, 23ed2 <process_event+0x16a>
   23ec0:	4972      	ldr	r1, [pc, #456]	; (2408c <process_event+0x324>)
   23ec2:	4873      	ldr	r0, [pc, #460]	; (24090 <process_event+0x328>)
   23ec4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   23ec8:	f014 f87e 	bl	37fc8 <assert_print>
   23ecc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   23ed0:	e7db      	b.n	23e8a <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23ed2:	8ba3      	ldrh	r3, [r4, #28]
   23ed4:	f023 0307 	bic.w	r3, r3, #7
   23ed8:	f043 0306 	orr.w	r3, r3, #6
   23edc:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   23ede:	83a3      	strh	r3, [r4, #28]
   23ee0:	460f      	mov	r7, r1
		res = 0;
   23ee2:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23ee4:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   23ee8:	68a2      	ldr	r2, [r4, #8]
   23eea:	2a00      	cmp	r2, #0
   23eec:	d17d      	bne.n	23fea <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
   23eee:	2f00      	cmp	r7, #0
   23ef0:	d17e      	bne.n	23ff0 <process_event+0x288>
		    || (transit != NULL)) {
   23ef2:	2d00      	cmp	r5, #0
   23ef4:	d09e      	beq.n	23e34 <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23ef6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   23ef8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   23efc:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   23f00:	83a3      	strh	r3, [r4, #28]
   23f02:	4658      	mov	r0, fp
   23f04:	f00d fe26 	bl	31b54 <z_spin_unlock_valid>
   23f08:	2800      	cmp	r0, #0
   23f0a:	d173      	bne.n	23ff4 <process_event+0x28c>
   23f0c:	4961      	ldr	r1, [pc, #388]	; (24094 <process_event+0x32c>)
   23f0e:	4860      	ldr	r0, [pc, #384]	; (24090 <process_event+0x328>)
   23f10:	22c2      	movs	r2, #194	; 0xc2
   23f12:	f014 f859 	bl	37fc8 <assert_print>
   23f16:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23f18:	485e      	ldr	r0, [pc, #376]	; (24094 <process_event+0x32c>)
   23f1a:	e7b7      	b.n	23e8c <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   23f1c:	2902      	cmp	r1, #2
   23f1e:	d008      	beq.n	23f32 <process_event+0x1ca>
   23f20:	495a      	ldr	r1, [pc, #360]	; (2408c <process_event+0x324>)
   23f22:	485b      	ldr	r0, [pc, #364]	; (24090 <process_event+0x328>)
   23f24:	f240 125d 	movw	r2, #349	; 0x15d
   23f28:	f014 f84e 	bl	37fc8 <assert_print>
   23f2c:	f240 115d 	movw	r1, #349	; 0x15d
   23f30:	e7ab      	b.n	23e8a <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
   23f32:	8be7      	ldrh	r7, [r4, #30]
   23f34:	b147      	cbz	r7, 23f48 <process_event+0x1e0>
   23f36:	4955      	ldr	r1, [pc, #340]	; (2408c <process_event+0x324>)
   23f38:	4855      	ldr	r0, [pc, #340]	; (24090 <process_event+0x328>)
   23f3a:	f44f 72af 	mov.w	r2, #350	; 0x15e
   23f3e:	f014 f843 	bl	37fc8 <assert_print>
   23f42:	f44f 71af 	mov.w	r1, #350	; 0x15e
   23f46:	e7a0      	b.n	23e8a <process_event+0x122>
			transit = mgr->transitions->stop;
   23f48:	6923      	ldr	r3, [r4, #16]
   23f4a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   23f4c:	b945      	cbnz	r5, 23f60 <process_event+0x1f8>
   23f4e:	494f      	ldr	r1, [pc, #316]	; (2408c <process_event+0x324>)
   23f50:	484f      	ldr	r0, [pc, #316]	; (24090 <process_event+0x328>)
   23f52:	f240 1261 	movw	r2, #353	; 0x161
   23f56:	f014 f837 	bl	37fc8 <assert_print>
   23f5a:	f240 1161 	movw	r1, #353	; 0x161
   23f5e:	e794      	b.n	23e8a <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23f60:	8ba3      	ldrh	r3, [r4, #28]
   23f62:	f023 0307 	bic.w	r3, r3, #7
   23f66:	f043 0304 	orr.w	r3, r3, #4
   23f6a:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   23f6c:	83a3      	strh	r3, [r4, #28]
		res = 0;
   23f6e:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23f70:	f04f 0904 	mov.w	r9, #4
   23f74:	e7b8      	b.n	23ee8 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   23f76:	2901      	cmp	r1, #1
   23f78:	d008      	beq.n	23f8c <process_event+0x224>
   23f7a:	4944      	ldr	r1, [pc, #272]	; (2408c <process_event+0x324>)
   23f7c:	4844      	ldr	r0, [pc, #272]	; (24090 <process_event+0x328>)
   23f7e:	f44f 72b2 	mov.w	r2, #356	; 0x164
   23f82:	f014 f821 	bl	37fc8 <assert_print>
   23f86:	f44f 71b2 	mov.w	r1, #356	; 0x164
   23f8a:	e77e      	b.n	23e8a <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   23f8c:	6823      	ldr	r3, [r4, #0]
   23f8e:	b943      	cbnz	r3, 23fa2 <process_event+0x23a>
   23f90:	493e      	ldr	r1, [pc, #248]	; (2408c <process_event+0x324>)
   23f92:	483f      	ldr	r0, [pc, #252]	; (24090 <process_event+0x328>)
   23f94:	f240 1265 	movw	r2, #357	; 0x165
   23f98:	f014 f816 	bl	37fc8 <assert_print>
   23f9c:	f240 1165 	movw	r1, #357	; 0x165
   23fa0:	e773      	b.n	23e8a <process_event+0x122>
			transit = mgr->transitions->reset;
   23fa2:	6923      	ldr	r3, [r4, #16]
   23fa4:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   23fa6:	b945      	cbnz	r5, 23fba <process_event+0x252>
   23fa8:	4938      	ldr	r1, [pc, #224]	; (2408c <process_event+0x324>)
   23faa:	4839      	ldr	r0, [pc, #228]	; (24090 <process_event+0x328>)
   23fac:	f44f 72b4 	mov.w	r2, #360	; 0x168
   23fb0:	f014 f80a 	bl	37fc8 <assert_print>
   23fb4:	f44f 71b4 	mov.w	r1, #360	; 0x168
   23fb8:	e767      	b.n	23e8a <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23fba:	8ba3      	ldrh	r3, [r4, #28]
   23fbc:	f023 0307 	bic.w	r3, r3, #7
   23fc0:	f043 0305 	orr.w	r3, r3, #5
   23fc4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   23fc6:	2700      	movs	r7, #0
   23fc8:	83a3      	strh	r3, [r4, #28]
		res = 0;
   23fca:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23fcc:	f04f 0905 	mov.w	r9, #5
   23fd0:	e78a      	b.n	23ee8 <process_event+0x180>
			__ASSERT_NO_MSG(false);
   23fd2:	492e      	ldr	r1, [pc, #184]	; (2408c <process_event+0x324>)
   23fd4:	482e      	ldr	r0, [pc, #184]	; (24090 <process_event+0x328>)
   23fd6:	f240 126b 	movw	r2, #363	; 0x16b
   23fda:	f013 fff5 	bl	37fc8 <assert_print>
   23fde:	f240 116b 	movw	r1, #363	; 0x16b
   23fe2:	e752      	b.n	23e8a <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
   23fe4:	2700      	movs	r7, #0
   23fe6:	2500      	movs	r5, #0
   23fe8:	e77e      	b.n	23ee8 <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   23fea:	f04f 0a01 	mov.w	sl, #1
   23fee:	e783      	b.n	23ef8 <process_event+0x190>
   23ff0:	4692      	mov	sl, r2
   23ff2:	e781      	b.n	23ef8 <process_event+0x190>
   23ff4:	f386 8811 	msr	BASEPRI, r6
   23ff8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   23ffc:	f1ba 0f00 	cmp.w	sl, #0
   24000:	d117      	bne.n	24032 <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
   24002:	bb4f      	cbnz	r7, 24058 <process_event+0x2f0>
			if (transit != NULL) {
   24004:	b115      	cbz	r5, 2400c <process_event+0x2a4>
				transit(mgr, transition_complete);
   24006:	4924      	ldr	r1, [pc, #144]	; (24098 <process_event+0x330>)
   24008:	4620      	mov	r0, r4
   2400a:	47a8      	blx	r5
	__asm__ volatile(
   2400c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24010:	f3ef 8611 	mrs	r6, BASEPRI
   24014:	f383 8812 	msr	BASEPRI_MAX, r3
   24018:	f3bf 8f6f 	isb	sy
   2401c:	4658      	mov	r0, fp
   2401e:	f00d fd8b 	bl	31b38 <z_spin_lock_valid>
   24022:	bb08      	cbnz	r0, 24068 <process_event+0x300>
   24024:	491b      	ldr	r1, [pc, #108]	; (24094 <process_event+0x32c>)
   24026:	481a      	ldr	r0, [pc, #104]	; (24090 <process_event+0x328>)
   24028:	2294      	movs	r2, #148	; 0x94
   2402a:	f013 ffcd 	bl	37fc8 <assert_print>
   2402e:	2194      	movs	r1, #148	; 0x94
   24030:	e772      	b.n	23f18 <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   24032:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   24034:	2900      	cmp	r1, #0
   24036:	d0e4      	beq.n	24002 <process_event+0x29a>
	return node->next;
   24038:	680e      	ldr	r6, [r1, #0]
   2403a:	2900      	cmp	r1, #0
   2403c:	d0e1      	beq.n	24002 <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
   2403e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   24042:	4643      	mov	r3, r8
   24044:	464a      	mov	r2, r9
   24046:	4620      	mov	r0, r4
   24048:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2404a:	b11e      	cbz	r6, 24054 <process_event+0x2ec>
   2404c:	6833      	ldr	r3, [r6, #0]
   2404e:	4631      	mov	r1, r6
   24050:	461e      	mov	r6, r3
   24052:	e7f2      	b.n	2403a <process_event+0x2d2>
   24054:	4633      	mov	r3, r6
   24056:	e7fa      	b.n	2404e <process_event+0x2e6>
   24058:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   2405a:	4643      	mov	r3, r8
   2405c:	464a      	mov	r2, r9
   2405e:	4620      	mov	r0, r4
   24060:	683f      	ldr	r7, [r7, #0]
   24062:	f013 ff10 	bl	37e86 <notify_one>
   24066:	e7cc      	b.n	24002 <process_event+0x29a>
	z_spin_lock_set_owner(l);
   24068:	4658      	mov	r0, fp
   2406a:	f00d fd83 	bl	31b74 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2406e:	8ba3      	ldrh	r3, [r4, #28]
   24070:	f023 0308 	bic.w	r3, r3, #8
   24074:	83a3      	strh	r3, [r4, #28]
   24076:	e6dd      	b.n	23e34 <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   24078:	068b      	lsls	r3, r1, #26
   2407a:	f57f ae97 	bpl.w	23dac <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2407e:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   24082:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   24084:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   24088:	e67a      	b.n	23d80 <process_event+0x18>
   2408a:	bf00      	nop
   2408c:	0003cc62 	.word	0x0003cc62
   24090:	0003c7f8 	.word	0x0003c7f8
   24094:	0003cc84 	.word	0x0003cc84
   24098:	0002409d 	.word	0x0002409d

0002409c <transition_complete>:
{
   2409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2409e:	4604      	mov	r4, r0
   240a0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   240a2:	f100 0614 	add.w	r6, r0, #20
   240a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   240aa:	f3ef 8711 	mrs	r7, BASEPRI
   240ae:	f383 8812 	msr	BASEPRI_MAX, r3
   240b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240b6:	4630      	mov	r0, r6
   240b8:	f00d fd3e 	bl	31b38 <z_spin_lock_valid>
   240bc:	b940      	cbnz	r0, 240d0 <transition_complete+0x34>
   240be:	490a      	ldr	r1, [pc, #40]	; (240e8 <transition_complete+0x4c>)
   240c0:	480a      	ldr	r0, [pc, #40]	; (240ec <transition_complete+0x50>)
   240c2:	2294      	movs	r2, #148	; 0x94
   240c4:	f013 ff80 	bl	37fc8 <assert_print>
   240c8:	4807      	ldr	r0, [pc, #28]	; (240e8 <transition_complete+0x4c>)
   240ca:	2194      	movs	r1, #148	; 0x94
   240cc:	f013 ff75 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   240d0:	4630      	mov	r0, r6
   240d2:	f00d fd4f 	bl	31b74 <z_spin_lock_set_owner>
	mgr->last_res = res;
   240d6:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   240d8:	463a      	mov	r2, r7
   240da:	4620      	mov	r0, r4
   240dc:	2101      	movs	r1, #1
}
   240de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   240e2:	f7ff be41 	b.w	23d68 <process_event>
   240e6:	bf00      	nop
   240e8:	0003cc84 	.word	0x0003cc84
   240ec:	0003c7f8 	.word	0x0003c7f8

000240f0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   240f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240f4:	4604      	mov	r4, r0
   240f6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   240f8:	f013 feb5 	bl	37e66 <validate_args>

	if (rv < 0) {
   240fc:	1e05      	subs	r5, r0, #0
   240fe:	db5c      	blt.n	241ba <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24100:	f104 0914 	add.w	r9, r4, #20
   24104:	f04f 0340 	mov.w	r3, #64	; 0x40
   24108:	f3ef 8a11 	mrs	sl, BASEPRI
   2410c:	f383 8812 	msr	BASEPRI_MAX, r3
   24110:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24114:	4648      	mov	r0, r9
   24116:	f00d fd0f 	bl	31b38 <z_spin_lock_valid>
   2411a:	4680      	mov	r8, r0
   2411c:	b938      	cbnz	r0, 2412e <onoff_request+0x3e>
   2411e:	4932      	ldr	r1, [pc, #200]	; (241e8 <onoff_request+0xf8>)
   24120:	4832      	ldr	r0, [pc, #200]	; (241ec <onoff_request+0xfc>)
   24122:	2294      	movs	r2, #148	; 0x94
   24124:	f013 ff50 	bl	37fc8 <assert_print>
   24128:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2412a:	482f      	ldr	r0, [pc, #188]	; (241e8 <onoff_request+0xf8>)
   2412c:	e03a      	b.n	241a4 <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
   2412e:	4648      	mov	r0, r9
   24130:	f00d fd20 	bl	31b74 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   24134:	8be3      	ldrh	r3, [r4, #30]
   24136:	8ba6      	ldrh	r6, [r4, #28]
   24138:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2413c:	4293      	cmp	r3, r2
   2413e:	f006 0607 	and.w	r6, r6, #7
   24142:	d03d      	beq.n	241c0 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   24144:	2e02      	cmp	r6, #2
   24146:	d10e      	bne.n	24166 <onoff_request+0x76>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   24148:	3301      	adds	r3, #1
   2414a:	83e3      	strh	r3, [r4, #30]
	rv = state;
   2414c:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2414e:	4648      	mov	r0, r9
   24150:	f00d fd00 	bl	31b54 <z_spin_unlock_valid>
   24154:	2800      	cmp	r0, #0
   24156:	d139      	bne.n	241cc <onoff_request+0xdc>
   24158:	4923      	ldr	r1, [pc, #140]	; (241e8 <onoff_request+0xf8>)
   2415a:	4824      	ldr	r0, [pc, #144]	; (241ec <onoff_request+0xfc>)
   2415c:	22c2      	movs	r2, #194	; 0xc2
   2415e:	f013 ff33 	bl	37fc8 <assert_print>
   24162:	21c2      	movs	r1, #194	; 0xc2
   24164:	e7e1      	b.n	2412a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   24166:	2e06      	cmp	r6, #6
   24168:	d813      	bhi.n	24192 <onoff_request+0xa2>
   2416a:	e8df f006 	tbb	[pc, r6]
   2416e:	2c09      	.short	0x2c09
   24170:	04091212 	.word	0x04091212
   24174:	09          	.byte	0x09
   24175:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   24176:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2417a:	f04f 0800 	mov.w	r8, #0
   2417e:	e7e6      	b.n	2414e <onoff_request+0x5e>
	parent->next = child;
   24180:	2300      	movs	r3, #0
   24182:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   24184:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   24186:	b97b      	cbnz	r3, 241a8 <onoff_request+0xb8>
	list->head = node;
   24188:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   2418c:	b17e      	cbz	r6, 241ae <onoff_request+0xbe>
	rv = state;
   2418e:	4635      	mov	r5, r6
   24190:	e7f3      	b.n	2417a <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24192:	4917      	ldr	r1, [pc, #92]	; (241f0 <onoff_request+0x100>)
   24194:	4815      	ldr	r0, [pc, #84]	; (241ec <onoff_request+0xfc>)
   24196:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   2419a:	f013 ff15 	bl	37fc8 <assert_print>
   2419e:	4814      	ldr	r0, [pc, #80]	; (241f0 <onoff_request+0x100>)
   241a0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   241a4:	f013 ff09 	bl	37fba <assert_post_action>
	parent->next = child;
   241a8:	601f      	str	r7, [r3, #0]
	list->tail = node;
   241aa:	6067      	str	r7, [r4, #4]
}
   241ac:	e7ee      	b.n	2418c <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
   241ae:	4652      	mov	r2, sl
   241b0:	2102      	movs	r1, #2
   241b2:	4620      	mov	r0, r4
   241b4:	f7ff fdd8 	bl	23d68 <process_event>
   241b8:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   241ba:	4628      	mov	r0, r5
   241bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   241c0:	f06f 050a 	mvn.w	r5, #10
   241c4:	e7d9      	b.n	2417a <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
   241c6:	f06f 0504 	mvn.w	r5, #4
   241ca:	e7d6      	b.n	2417a <onoff_request+0x8a>
	__asm__ volatile(
   241cc:	f38a 8811 	msr	BASEPRI, sl
   241d0:	f3bf 8f6f 	isb	sy
		if (notify) {
   241d4:	f1b8 0f00 	cmp.w	r8, #0
   241d8:	d0ef      	beq.n	241ba <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   241da:	2300      	movs	r3, #0
   241dc:	4632      	mov	r2, r6
   241de:	4639      	mov	r1, r7
   241e0:	4620      	mov	r0, r4
   241e2:	f013 fe50 	bl	37e86 <notify_one>
   241e6:	e7e8      	b.n	241ba <onoff_request+0xca>
   241e8:	0003cc84 	.word	0x0003cc84
   241ec:	0003c7f8 	.word	0x0003c7f8
   241f0:	0003cc62 	.word	0x0003cc62

000241f4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   241f4:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   241f6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   241f8:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   241fa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   241fe:	2a02      	cmp	r2, #2
{
   24200:	4603      	mov	r3, r0
	switch (method) {
   24202:	d00a      	beq.n	2421a <sys_notify_finalize+0x26>
   24204:	2a03      	cmp	r2, #3
   24206:	f04f 0100 	mov.w	r1, #0
   2420a:	d003      	beq.n	24214 <sys_notify_finalize+0x20>
   2420c:	2a01      	cmp	r2, #1
   2420e:	d10a      	bne.n	24226 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24210:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24212:	e006      	b.n	24222 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   24214:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24216:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   24218:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   2421a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2421c:	2200      	movs	r2, #0
   2421e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24220:	b950      	cbnz	r0, 24238 <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
   24222:	2000      	movs	r0, #0
   24224:	e7f8      	b.n	24218 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   24226:	4906      	ldr	r1, [pc, #24]	; (24240 <sys_notify_finalize+0x4c>)
   24228:	4806      	ldr	r0, [pc, #24]	; (24244 <sys_notify_finalize+0x50>)
   2422a:	2245      	movs	r2, #69	; 0x45
   2422c:	f013 fecc 	bl	37fc8 <assert_print>
   24230:	4803      	ldr	r0, [pc, #12]	; (24240 <sys_notify_finalize+0x4c>)
   24232:	2145      	movs	r1, #69	; 0x45
   24234:	f013 fec1 	bl	37fba <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   24238:	f010 fbb6 	bl	349a8 <z_impl_k_poll_signal_raise>
   2423c:	e7f1      	b.n	24222 <sys_notify_finalize+0x2e>
   2423e:	bf00      	nop
   24240:	0003ccb1 	.word	0x0003ccb1
   24244:	0003c7f8 	.word	0x0003c7f8

00024248 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   24248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2424c:	4681      	mov	r9, r0
   2424e:	b095      	sub	sp, #84	; 0x54
   24250:	468b      	mov	fp, r1
   24252:	4617      	mov	r7, r2
   24254:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   24256:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   24258:	7838      	ldrb	r0, [r7, #0]
   2425a:	b908      	cbnz	r0, 24260 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   2425c:	4628      	mov	r0, r5
   2425e:	e358      	b.n	24912 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   24260:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   24262:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   24264:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   24266:	d006      	beq.n	24276 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   24268:	4659      	mov	r1, fp
   2426a:	47c8      	blx	r9
   2426c:	2800      	cmp	r0, #0
   2426e:	f2c0 8350 	blt.w	24912 <z_cbvprintf_impl+0x6ca>
   24272:	3501      	adds	r5, #1
		if (bps == NULL) {
   24274:	e1fb      	b.n	2466e <z_cbvprintf_impl+0x426>
		} state = {
   24276:	2218      	movs	r2, #24
   24278:	2100      	movs	r1, #0
   2427a:	a80e      	add	r0, sp, #56	; 0x38
   2427c:	f014 faa8 	bl	387d0 <memset>
	if (*sp == '%') {
   24280:	787b      	ldrb	r3, [r7, #1]
   24282:	2b25      	cmp	r3, #37	; 0x25
   24284:	d07d      	beq.n	24382 <z_cbvprintf_impl+0x13a>
   24286:	2300      	movs	r3, #0
   24288:	1c78      	adds	r0, r7, #1
   2428a:	4698      	mov	r8, r3
   2428c:	469e      	mov	lr, r3
   2428e:	469c      	mov	ip, r3
   24290:	461e      	mov	r6, r3
   24292:	4601      	mov	r1, r0
		switch (*sp) {
   24294:	f810 2b01 	ldrb.w	r2, [r0], #1
   24298:	2a2b      	cmp	r2, #43	; 0x2b
   2429a:	f000 80a1 	beq.w	243e0 <z_cbvprintf_impl+0x198>
   2429e:	f200 8098 	bhi.w	243d2 <z_cbvprintf_impl+0x18a>
   242a2:	2a20      	cmp	r2, #32
   242a4:	f000 809f 	beq.w	243e6 <z_cbvprintf_impl+0x19e>
   242a8:	2a23      	cmp	r2, #35	; 0x23
   242aa:	f000 809f 	beq.w	243ec <z_cbvprintf_impl+0x1a4>
   242ae:	b12b      	cbz	r3, 242bc <z_cbvprintf_impl+0x74>
   242b0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   242b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   242b8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   242bc:	f1b8 0f00 	cmp.w	r8, #0
   242c0:	d005      	beq.n	242ce <z_cbvprintf_impl+0x86>
   242c2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   242c6:	f043 0320 	orr.w	r3, r3, #32
   242ca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   242ce:	f1be 0f00 	cmp.w	lr, #0
   242d2:	d005      	beq.n	242e0 <z_cbvprintf_impl+0x98>
   242d4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   242d8:	f043 0310 	orr.w	r3, r3, #16
   242dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   242e0:	f1bc 0f00 	cmp.w	ip, #0
   242e4:	d005      	beq.n	242f2 <z_cbvprintf_impl+0xaa>
   242e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   242ea:	f043 0308 	orr.w	r3, r3, #8
   242ee:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   242f2:	b12e      	cbz	r6, 24300 <z_cbvprintf_impl+0xb8>
   242f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   242f8:	f043 0304 	orr.w	r3, r3, #4
   242fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   24300:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24304:	f003 0044 	and.w	r0, r3, #68	; 0x44
   24308:	2844      	cmp	r0, #68	; 0x44
   2430a:	d103      	bne.n	24314 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   2430c:	f36f 1386 	bfc	r3, #6, #1
   24310:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   24314:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   24318:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   2431a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2431e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   24322:	d17f      	bne.n	24424 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   24324:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   24328:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   2432c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   2432e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   24332:	781a      	ldrb	r2, [r3, #0]
   24334:	2a2e      	cmp	r2, #46	; 0x2e
   24336:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   2433a:	bf0c      	ite	eq
   2433c:	2101      	moveq	r1, #1
   2433e:	2100      	movne	r1, #0
   24340:	f361 0241 	bfi	r2, r1, #1, #1
   24344:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   24348:	d178      	bne.n	2443c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   2434a:	785a      	ldrb	r2, [r3, #1]
   2434c:	2a2a      	cmp	r2, #42	; 0x2a
   2434e:	d06e      	beq.n	2442e <z_cbvprintf_impl+0x1e6>
	++sp;
   24350:	3301      	adds	r3, #1
	size_t val = 0;
   24352:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   24354:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24358:	4619      	mov	r1, r3
   2435a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2435e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   24362:	2e09      	cmp	r6, #9
   24364:	f240 8095 	bls.w	24492 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   24368:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   2436c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   2436e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   24372:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   24376:	460a      	mov	r2, r1
   24378:	f360 0241 	bfi	r2, r0, #1, #1
   2437c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   24380:	e05c      	b.n	2443c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   24382:	1cba      	adds	r2, r7, #2
   24384:	9203      	str	r2, [sp, #12]
   24386:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   2438a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   2438e:	07da      	lsls	r2, r3, #31
   24390:	f140 812e 	bpl.w	245f0 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   24394:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   24398:	f1b8 0f00 	cmp.w	r8, #0
   2439c:	da07      	bge.n	243ae <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   2439e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   243a2:	f042 0204 	orr.w	r2, r2, #4
   243a6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   243aa:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   243ae:	075e      	lsls	r6, r3, #29
   243b0:	f140 8127 	bpl.w	24602 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   243b4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   243b8:	f1ba 0f00 	cmp.w	sl, #0
   243bc:	f280 8126 	bge.w	2460c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   243c0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   243c4:	f36f 0341 	bfc	r3, #1, #1
   243c8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   243cc:	f04f 3aff 	mov.w	sl, #4294967295
   243d0:	e11c      	b.n	2460c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   243d2:	2a2d      	cmp	r2, #45	; 0x2d
   243d4:	d00d      	beq.n	243f2 <z_cbvprintf_impl+0x1aa>
   243d6:	2a30      	cmp	r2, #48	; 0x30
   243d8:	f47f af69 	bne.w	242ae <z_cbvprintf_impl+0x66>
   243dc:	2301      	movs	r3, #1
	} while (loop);
   243de:	e758      	b.n	24292 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   243e0:	f04f 0c01 	mov.w	ip, #1
   243e4:	e755      	b.n	24292 <z_cbvprintf_impl+0x4a>
   243e6:	f04f 0e01 	mov.w	lr, #1
   243ea:	e752      	b.n	24292 <z_cbvprintf_impl+0x4a>
   243ec:	f04f 0801 	mov.w	r8, #1
   243f0:	e74f      	b.n	24292 <z_cbvprintf_impl+0x4a>
   243f2:	2601      	movs	r6, #1
   243f4:	e74d      	b.n	24292 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   243f6:	fb0e 6202 	mla	r2, lr, r2, r6
   243fa:	3a30      	subs	r2, #48	; 0x30
   243fc:	4603      	mov	r3, r0
   243fe:	4618      	mov	r0, r3
   24400:	f810 6b01 	ldrb.w	r6, [r0], #1
   24404:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   24408:	f1bc 0f09 	cmp.w	ip, #9
   2440c:	d9f3      	bls.n	243f6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   2440e:	4299      	cmp	r1, r3
   24410:	d08f      	beq.n	24332 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   24412:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   24416:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   24418:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   2441a:	f362 0141 	bfi	r1, r2, #1, #1
   2441e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   24422:	e786      	b.n	24332 <z_cbvprintf_impl+0xea>
   24424:	460b      	mov	r3, r1
	size_t val = 0;
   24426:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   24428:	f04f 0e0a 	mov.w	lr, #10
   2442c:	e7e7      	b.n	243fe <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   2442e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   24432:	f042 0204 	orr.w	r2, r2, #4
   24436:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   2443a:	3302      	adds	r3, #2
	switch (*sp) {
   2443c:	781a      	ldrb	r2, [r3, #0]
   2443e:	2a6c      	cmp	r2, #108	; 0x6c
   24440:	d047      	beq.n	244d2 <z_cbvprintf_impl+0x28a>
   24442:	d82b      	bhi.n	2449c <z_cbvprintf_impl+0x254>
   24444:	2a68      	cmp	r2, #104	; 0x68
   24446:	d031      	beq.n	244ac <z_cbvprintf_impl+0x264>
   24448:	2a6a      	cmp	r2, #106	; 0x6a
   2444a:	d04b      	beq.n	244e4 <z_cbvprintf_impl+0x29c>
   2444c:	2a4c      	cmp	r2, #76	; 0x4c
   2444e:	d051      	beq.n	244f4 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   24450:	461a      	mov	r2, r3
   24452:	f812 3b01 	ldrb.w	r3, [r2], #1
   24456:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   24458:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   2445a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   2445e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   24462:	f200 80be 	bhi.w	245e2 <z_cbvprintf_impl+0x39a>
   24466:	2b6d      	cmp	r3, #109	; 0x6d
   24468:	d851      	bhi.n	2450e <z_cbvprintf_impl+0x2c6>
   2446a:	2b69      	cmp	r3, #105	; 0x69
   2446c:	f200 80b9 	bhi.w	245e2 <z_cbvprintf_impl+0x39a>
   24470:	2b57      	cmp	r3, #87	; 0x57
   24472:	d867      	bhi.n	24544 <z_cbvprintf_impl+0x2fc>
   24474:	2b41      	cmp	r3, #65	; 0x41
   24476:	d003      	beq.n	24480 <z_cbvprintf_impl+0x238>
   24478:	3b45      	subs	r3, #69	; 0x45
   2447a:	2b02      	cmp	r3, #2
   2447c:	f200 80b1 	bhi.w	245e2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   24480:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   24484:	2204      	movs	r2, #4
   24486:	f362 0302 	bfi	r3, r2, #0, #3
   2448a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   2448e:	2301      	movs	r3, #1
			break;
   24490:	e073      	b.n	2457a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   24492:	fb0c 0202 	mla	r2, ip, r2, r0
   24496:	3a30      	subs	r2, #48	; 0x30
   24498:	460b      	mov	r3, r1
   2449a:	e75d      	b.n	24358 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   2449c:	2a74      	cmp	r2, #116	; 0x74
   2449e:	d025      	beq.n	244ec <z_cbvprintf_impl+0x2a4>
   244a0:	2a7a      	cmp	r2, #122	; 0x7a
   244a2:	d1d5      	bne.n	24450 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   244a4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   244a8:	2106      	movs	r1, #6
   244aa:	e00c      	b.n	244c6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   244ac:	785a      	ldrb	r2, [r3, #1]
   244ae:	2a68      	cmp	r2, #104	; 0x68
   244b0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   244b4:	d106      	bne.n	244c4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   244b6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   244b8:	f361 02c6 	bfi	r2, r1, #3, #4
   244bc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   244c0:	3302      	adds	r3, #2
   244c2:	e7c5      	b.n	24450 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   244c4:	2102      	movs	r1, #2
   244c6:	f361 02c6 	bfi	r2, r1, #3, #4
   244ca:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   244ce:	3301      	adds	r3, #1
   244d0:	e7be      	b.n	24450 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   244d2:	785a      	ldrb	r2, [r3, #1]
   244d4:	2a6c      	cmp	r2, #108	; 0x6c
   244d6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   244da:	d101      	bne.n	244e0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   244dc:	2104      	movs	r1, #4
   244de:	e7eb      	b.n	244b8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   244e0:	2103      	movs	r1, #3
   244e2:	e7f0      	b.n	244c6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   244e4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   244e8:	2105      	movs	r1, #5
   244ea:	e7ec      	b.n	244c6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   244ec:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   244f0:	2107      	movs	r1, #7
   244f2:	e7e8      	b.n	244c6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   244f4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   244f8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   244fc:	f022 0202 	bic.w	r2, r2, #2
   24500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   24504:	f042 0202 	orr.w	r2, r2, #2
   24508:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   2450c:	e7df      	b.n	244ce <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   2450e:	3b6e      	subs	r3, #110	; 0x6e
   24510:	b2d9      	uxtb	r1, r3
   24512:	2301      	movs	r3, #1
   24514:	408b      	lsls	r3, r1
   24516:	f240 4182 	movw	r1, #1154	; 0x482
   2451a:	420b      	tst	r3, r1
   2451c:	d137      	bne.n	2458e <z_cbvprintf_impl+0x346>
   2451e:	f013 0f24 	tst.w	r3, #36	; 0x24
   24522:	d151      	bne.n	245c8 <z_cbvprintf_impl+0x380>
   24524:	07d8      	lsls	r0, r3, #31
   24526:	d55c      	bpl.n	245e2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   24528:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2452c:	2103      	movs	r1, #3
   2452e:	f361 0302 	bfi	r3, r1, #0, #3
   24532:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   24536:	f002 0378 	and.w	r3, r2, #120	; 0x78
   2453a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   2453e:	424b      	negs	r3, r1
   24540:	414b      	adcs	r3, r1
   24542:	e01a      	b.n	2457a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   24544:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   24548:	b2c9      	uxtb	r1, r1
   2454a:	2001      	movs	r0, #1
   2454c:	fa00 f101 	lsl.w	r1, r0, r1
   24550:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   24554:	d194      	bne.n	24480 <z_cbvprintf_impl+0x238>
   24556:	f640 0601 	movw	r6, #2049	; 0x801
   2455a:	4231      	tst	r1, r6
   2455c:	d11d      	bne.n	2459a <z_cbvprintf_impl+0x352>
   2455e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   24562:	d03e      	beq.n	245e2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   24564:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   24568:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   2456c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   24570:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   24572:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   24576:	d034      	beq.n	245e2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   24578:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   2457a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   2457e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   24582:	430b      	orrs	r3, r1
   24584:	f363 0241 	bfi	r2, r3, #1, #1
   24588:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   2458c:	e6fd      	b.n	2438a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   2458e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   24592:	2102      	movs	r1, #2
   24594:	f361 0302 	bfi	r3, r1, #0, #3
   24598:	e7e8      	b.n	2456c <z_cbvprintf_impl+0x324>
   2459a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   2459e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   245a0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   245a4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   245a8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   245aa:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   245ae:	bf02      	ittt	eq
   245b0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   245b4:	f041 0101 	orreq.w	r1, r1, #1
   245b8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   245bc:	2b63      	cmp	r3, #99	; 0x63
   245be:	d1db      	bne.n	24578 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   245c0:	1e13      	subs	r3, r2, #0
   245c2:	bf18      	it	ne
   245c4:	2301      	movne	r3, #1
   245c6:	e7d8      	b.n	2457a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   245c8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   245cc:	2103      	movs	r1, #3
   245ce:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   245d2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   245d6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   245da:	bf14      	ite	ne
   245dc:	2301      	movne	r3, #1
   245de:	2300      	moveq	r3, #0
   245e0:	e7cb      	b.n	2457a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   245e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   245e6:	f043 0301 	orr.w	r3, r3, #1
   245ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   245ee:	e7c3      	b.n	24578 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   245f0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   245f4:	2a00      	cmp	r2, #0
			width = conv->width_value;
   245f6:	bfb4      	ite	lt
   245f8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   245fc:	f04f 38ff 	movge.w	r8, #4294967295
   24600:	e6d5      	b.n	243ae <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   24602:	0798      	lsls	r0, r3, #30
   24604:	f57f aee2 	bpl.w	243cc <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   24608:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   2460c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   24610:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   24612:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   24616:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   2461a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   2461e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   24620:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   24624:	d133      	bne.n	2468e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   24626:	1ecb      	subs	r3, r1, #3
   24628:	2b04      	cmp	r3, #4
   2462a:	d804      	bhi.n	24636 <z_cbvprintf_impl+0x3ee>
   2462c:	e8df f003 	tbb	[pc, r3]
   24630:	21464621 	.word	0x21464621
   24634:	21          	.byte	0x21
   24635:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   24636:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   24638:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   2463a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   2463e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   24642:	d11c      	bne.n	2467e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   24644:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   24648:	17da      	asrs	r2, r3, #31
   2464a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   2464e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   24650:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   24654:	f013 0603 	ands.w	r6, r3, #3
   24658:	d050      	beq.n	246fc <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   2465a:	9b03      	ldr	r3, [sp, #12]
   2465c:	463a      	mov	r2, r7
   2465e:	4659      	mov	r1, fp
   24660:	4648      	mov	r0, r9
   24662:	f013 fc93 	bl	37f8c <outs>
   24666:	2800      	cmp	r0, #0
   24668:	f2c0 8153 	blt.w	24912 <z_cbvprintf_impl+0x6ca>
   2466c:	4405      	add	r5, r0
			continue;
   2466e:	9f03      	ldr	r7, [sp, #12]
   24670:	e5f2      	b.n	24258 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   24672:	f854 3b04 	ldr.w	r3, [r4], #4
   24676:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   24678:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   2467c:	e7e8      	b.n	24650 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   2467e:	2902      	cmp	r1, #2
   24680:	d1e5      	bne.n	2464e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   24682:	b21a      	sxth	r2, r3
   24684:	f343 33c0 	sbfx	r3, r3, #15, #1
   24688:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   2468c:	e7df      	b.n	2464e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   2468e:	2b02      	cmp	r3, #2
   24690:	d124      	bne.n	246dc <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   24692:	1ecb      	subs	r3, r1, #3
   24694:	2b04      	cmp	r3, #4
   24696:	d804      	bhi.n	246a2 <z_cbvprintf_impl+0x45a>
   24698:	e8df f003 	tbb	[pc, r3]
   2469c:	18101018 	.word	0x18101018
   246a0:	18          	.byte	0x18
   246a1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   246a2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   246a4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   246a8:	f04f 0200 	mov.w	r2, #0
   246ac:	d014      	beq.n	246d8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   246ae:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   246b0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   246b4:	d1cc      	bne.n	24650 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   246b6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   246b8:	930e      	str	r3, [sp, #56]	; 0x38
   246ba:	e7c9      	b.n	24650 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   246bc:	3407      	adds	r4, #7
   246be:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   246c2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   246c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   246ca:	e7c1      	b.n	24650 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   246cc:	f854 3b04 	ldr.w	r3, [r4], #4
   246d0:	930e      	str	r3, [sp, #56]	; 0x38
   246d2:	2300      	movs	r3, #0
   246d4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   246d6:	e7bb      	b.n	24650 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   246d8:	b2db      	uxtb	r3, r3
   246da:	e7cd      	b.n	24678 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   246dc:	2b04      	cmp	r3, #4
   246de:	d108      	bne.n	246f2 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   246e0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   246e2:	f024 0407 	bic.w	r4, r4, #7
   246e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   246ea:	3408      	adds	r4, #8
   246ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   246f0:	e7ae      	b.n	24650 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   246f2:	2b03      	cmp	r3, #3
   246f4:	d1ac      	bne.n	24650 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   246f6:	f854 3b04 	ldr.w	r3, [r4], #4
   246fa:	e7dd      	b.n	246b8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   246fc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   24700:	2878      	cmp	r0, #120	; 0x78
   24702:	d8b4      	bhi.n	2466e <z_cbvprintf_impl+0x426>
   24704:	2862      	cmp	r0, #98	; 0x62
   24706:	d81c      	bhi.n	24742 <z_cbvprintf_impl+0x4fa>
   24708:	2825      	cmp	r0, #37	; 0x25
   2470a:	f43f adad 	beq.w	24268 <z_cbvprintf_impl+0x20>
   2470e:	2858      	cmp	r0, #88	; 0x58
   24710:	d1ad      	bne.n	2466e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   24712:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   24716:	9300      	str	r3, [sp, #0]
   24718:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2471c:	ab08      	add	r3, sp, #32
   2471e:	aa10      	add	r2, sp, #64	; 0x40
   24720:	f013 fbee 	bl	37f00 <encode_uint>
			if (precision >= 0) {
   24724:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   24728:	4607      	mov	r7, r0
			if (precision >= 0) {
   2472a:	f280 809a 	bge.w	24862 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   2472e:	2f00      	cmp	r7, #0
   24730:	d09d      	beq.n	2466e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   24732:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   24736:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   24738:	2e00      	cmp	r6, #0
   2473a:	f000 80c1 	beq.w	248c0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   2473e:	3001      	adds	r0, #1
   24740:	e0be      	b.n	248c0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   24742:	3863      	subs	r0, #99	; 0x63
   24744:	2815      	cmp	r0, #21
   24746:	d892      	bhi.n	2466e <z_cbvprintf_impl+0x426>
   24748:	a201      	add	r2, pc, #4	; (adr r2, 24750 <z_cbvprintf_impl+0x508>)
   2474a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   2474e:	bf00      	nop
   24750:	00024825 	.word	0x00024825
   24754:	00024837 	.word	0x00024837
   24758:	0002466f 	.word	0x0002466f
   2475c:	0002466f 	.word	0x0002466f
   24760:	0002466f 	.word	0x0002466f
   24764:	0002466f 	.word	0x0002466f
   24768:	00024837 	.word	0x00024837
   2476c:	0002466f 	.word	0x0002466f
   24770:	0002466f 	.word	0x0002466f
   24774:	0002466f 	.word	0x0002466f
   24778:	0002466f 	.word	0x0002466f
   2477c:	000248c5 	.word	0x000248c5
   24780:	0002485d 	.word	0x0002485d
   24784:	00024883 	.word	0x00024883
   24788:	0002466f 	.word	0x0002466f
   2478c:	0002466f 	.word	0x0002466f
   24790:	000247a9 	.word	0x000247a9
   24794:	0002466f 	.word	0x0002466f
   24798:	0002485d 	.word	0x0002485d
   2479c:	0002466f 	.word	0x0002466f
   247a0:	0002466f 	.word	0x0002466f
   247a4:	0002485d 	.word	0x0002485d
			if (precision >= 0) {
   247a8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   247ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   247ae:	db35      	blt.n	2481c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   247b0:	4651      	mov	r1, sl
   247b2:	4638      	mov	r0, r7
   247b4:	f013 ffc5 	bl	38742 <strnlen>
			bpe = bps + len;
   247b8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   247bc:	2f00      	cmp	r7, #0
   247be:	f43f af56 	beq.w	2466e <z_cbvprintf_impl+0x426>
		char sign = 0;
   247c2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   247c4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   247c8:	f013 0210 	ands.w	r2, r3, #16
   247cc:	9205      	str	r2, [sp, #20]
   247ce:	f000 8093 	beq.w	248f8 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   247d2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   247d4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   247d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   247d8:	bf48      	it	mi
   247da:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   247dc:	9204      	str	r2, [sp, #16]
   247de:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   247e0:	bf48      	it	mi
   247e2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   247e4:	f1b8 0f00 	cmp.w	r8, #0
   247e8:	f340 80a0 	ble.w	2492c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   247ec:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   247f0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   247f4:	f3c2 0380 	ubfx	r3, r2, #2, #1
   247f8:	0750      	lsls	r0, r2, #29
   247fa:	9306      	str	r3, [sp, #24]
   247fc:	f100 8096 	bmi.w	2492c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   24800:	0651      	lsls	r1, r2, #25
   24802:	f140 8089 	bpl.w	24918 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   24806:	b13e      	cbz	r6, 24818 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   24808:	4659      	mov	r1, fp
   2480a:	4630      	mov	r0, r6
   2480c:	47c8      	blx	r9
   2480e:	2800      	cmp	r0, #0
   24810:	db7f      	blt.n	24912 <z_cbvprintf_impl+0x6ca>
   24812:	9b06      	ldr	r3, [sp, #24]
   24814:	3501      	adds	r5, #1
   24816:	461e      	mov	r6, r3
					pad = '0';
   24818:	2230      	movs	r2, #48	; 0x30
   2481a:	e07e      	b.n	2491a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   2481c:	4638      	mov	r0, r7
   2481e:	f013 ff89 	bl	38734 <strlen>
   24822:	e7c9      	b.n	247b8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   24824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24826:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   2482a:	2600      	movs	r6, #0
			bps = buf;
   2482c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   2482e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   24832:	2001      	movs	r0, #1
   24834:	e7c6      	b.n	247c4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   24836:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   24838:	bf5c      	itt	pl
   2483a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   2483e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   24840:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   24844:	bf48      	it	mi
   24846:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   24848:	2b00      	cmp	r3, #0
   2484a:	f6bf af62 	bge.w	24712 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   2484e:	4252      	negs	r2, r2
   24850:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   24854:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   24858:	262d      	movs	r6, #45	; 0x2d
   2485a:	e75a      	b.n	24712 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   2485c:	2600      	movs	r6, #0
   2485e:	e758      	b.n	24712 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   24860:	2600      	movs	r6, #0
				conv->flag_zero = false;
   24862:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   24866:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   2486a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   2486c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   24870:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   24872:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   24876:	f67f af5a 	bls.w	2472e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   2487a:	ebaa 0303 	sub.w	r3, sl, r3
   2487e:	9311      	str	r3, [sp, #68]	; 0x44
   24880:	e755      	b.n	2472e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   24882:	980e      	ldr	r0, [sp, #56]	; 0x38
   24884:	b390      	cbz	r0, 248ec <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   24886:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   2488a:	9300      	str	r3, [sp, #0]
   2488c:	aa10      	add	r2, sp, #64	; 0x40
   2488e:	ab08      	add	r3, sp, #32
   24890:	2100      	movs	r1, #0
   24892:	f013 fb35 	bl	37f00 <encode_uint>
				conv->altform_0c = true;
   24896:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   2489a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   2489e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   248a2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   248a6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   248aa:	4607      	mov	r7, r0
				conv->altform_0c = true;
   248ac:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   248b0:	dad6      	bge.n	24860 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   248b2:	2800      	cmp	r0, #0
   248b4:	f43f aedb 	beq.w	2466e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   248b8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   248bc:	1a18      	subs	r0, r3, r0
		char sign = 0;
   248be:	2600      	movs	r6, #0
   248c0:	469a      	mov	sl, r3
   248c2:	e77f      	b.n	247c4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   248c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   248c6:	2907      	cmp	r1, #7
   248c8:	f63f aed1 	bhi.w	2466e <z_cbvprintf_impl+0x426>
   248cc:	e8df f001 	tbb	[pc, r1]
   248d0:	0c06040c 	.word	0x0c06040c
   248d4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   248d8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   248da:	e6c8      	b.n	2466e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   248dc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   248de:	e6c6      	b.n	2466e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   248e0:	17ea      	asrs	r2, r5, #31
   248e2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   248e6:	e6c2      	b.n	2466e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   248e8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   248ea:	e6c0      	b.n	2466e <z_cbvprintf_impl+0x426>
   248ec:	4f2e      	ldr	r7, [pc, #184]	; (249a8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   248ee:	4606      	mov	r6, r0
			bpe = bps + 5;
   248f0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   248f4:	2005      	movs	r0, #5
   248f6:	e765      	b.n	247c4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   248f8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   248fa:	bf48      	it	mi
   248fc:	3001      	addmi	r0, #1
   248fe:	e769      	b.n	247d4 <z_cbvprintf_impl+0x58c>
   24900:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   24902:	4610      	mov	r0, r2
   24904:	9206      	str	r2, [sp, #24]
   24906:	4659      	mov	r1, fp
   24908:	47c8      	blx	r9
   2490a:	2800      	cmp	r0, #0
   2490c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   24910:	da04      	bge.n	2491c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   24912:	b015      	add	sp, #84	; 0x54
   24914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   24918:	2220      	movs	r2, #32
					pad = '0';
   2491a:	4643      	mov	r3, r8
				while (width-- > 0) {
   2491c:	4619      	mov	r1, r3
   2491e:	2900      	cmp	r1, #0
   24920:	f103 33ff 	add.w	r3, r3, #4294967295
   24924:	dcec      	bgt.n	24900 <z_cbvprintf_impl+0x6b8>
   24926:	4445      	add	r5, r8
   24928:	1a6d      	subs	r5, r5, r1
   2492a:	4698      	mov	r8, r3
		if (sign != 0) {
   2492c:	b12e      	cbz	r6, 2493a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   2492e:	4659      	mov	r1, fp
   24930:	4630      	mov	r0, r6
   24932:	47c8      	blx	r9
   24934:	2800      	cmp	r0, #0
   24936:	dbec      	blt.n	24912 <z_cbvprintf_impl+0x6ca>
   24938:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   2493a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2493e:	06da      	lsls	r2, r3, #27
   24940:	d401      	bmi.n	24946 <z_cbvprintf_impl+0x6fe>
   24942:	071b      	lsls	r3, r3, #28
   24944:	d505      	bpl.n	24952 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   24946:	4659      	mov	r1, fp
   24948:	2030      	movs	r0, #48	; 0x30
   2494a:	47c8      	blx	r9
   2494c:	2800      	cmp	r0, #0
   2494e:	dbe0      	blt.n	24912 <z_cbvprintf_impl+0x6ca>
   24950:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   24952:	9b05      	ldr	r3, [sp, #20]
   24954:	b133      	cbz	r3, 24964 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   24956:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   2495a:	4659      	mov	r1, fp
   2495c:	47c8      	blx	r9
   2495e:	2800      	cmp	r0, #0
   24960:	dbd7      	blt.n	24912 <z_cbvprintf_impl+0x6ca>
   24962:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   24964:	9e04      	ldr	r6, [sp, #16]
   24966:	442e      	add	r6, r5
   24968:	e005      	b.n	24976 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   2496a:	4659      	mov	r1, fp
   2496c:	2030      	movs	r0, #48	; 0x30
   2496e:	47c8      	blx	r9
   24970:	2800      	cmp	r0, #0
   24972:	dbce      	blt.n	24912 <z_cbvprintf_impl+0x6ca>
   24974:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   24976:	1b73      	subs	r3, r6, r5
   24978:	2b00      	cmp	r3, #0
   2497a:	dcf6      	bgt.n	2496a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   2497c:	4653      	mov	r3, sl
   2497e:	463a      	mov	r2, r7
   24980:	4659      	mov	r1, fp
   24982:	4648      	mov	r0, r9
   24984:	f013 fb02 	bl	37f8c <outs>
   24988:	2800      	cmp	r0, #0
   2498a:	dbc2      	blt.n	24912 <z_cbvprintf_impl+0x6ca>
   2498c:	4405      	add	r5, r0
		while (width > 0) {
   2498e:	44a8      	add	r8, r5
   24990:	eba8 0305 	sub.w	r3, r8, r5
   24994:	2b00      	cmp	r3, #0
   24996:	f77f ae6a 	ble.w	2466e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   2499a:	4659      	mov	r1, fp
   2499c:	2020      	movs	r0, #32
   2499e:	47c8      	blx	r9
   249a0:	2800      	cmp	r0, #0
   249a2:	dbb6      	blt.n	24912 <z_cbvprintf_impl+0x6ca>
   249a4:	3501      	adds	r5, #1
			--width;
   249a6:	e7f3      	b.n	24990 <z_cbvprintf_impl+0x748>
   249a8:	0003ccd4 	.word	0x0003ccd4

000249ac <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   249ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   249ae:	f04f 0240 	mov.w	r2, #64	; 0x40
   249b2:	f3ef 8311 	mrs	r3, BASEPRI
   249b6:	f382 8812 	msr	BASEPRI_MAX, r2
   249ba:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   249be:	f001 fa6f 	bl	25ea0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   249c2:	4803      	ldr	r0, [pc, #12]	; (249d0 <sys_reboot+0x24>)
   249c4:	f013 f8f8 	bl	37bb8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   249c8:	f000 fcc6 	bl	25358 <arch_cpu_idle>
   249cc:	e7fc      	b.n	249c8 <sys_reboot+0x1c>
   249ce:	bf00      	nop
   249d0:	0003ccda 	.word	0x0003ccda

000249d4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   249d4:	f00b b912 	b.w	2fbfc <SystemInit>

000249d8 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   249d8:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   249da:	4b11      	ldr	r3, [pc, #68]	; (24a20 <flash_area_open+0x48>)
   249dc:	681c      	ldr	r4, [r3, #0]
{
   249de:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   249e0:	b1dc      	cbz	r4, 24a1a <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   249e2:	4b10      	ldr	r3, [pc, #64]	; (24a24 <flash_area_open+0x4c>)
   249e4:	6819      	ldr	r1, [r3, #0]
   249e6:	2300      	movs	r3, #0
   249e8:	428b      	cmp	r3, r1
   249ea:	db02      	blt.n	249f2 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   249ec:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   249f0:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   249f2:	4622      	mov	r2, r4
   249f4:	f812 6b10 	ldrb.w	r6, [r2], #16
   249f8:	4286      	cmp	r6, r0
   249fa:	d002      	beq.n	24a02 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   249fc:	3301      	adds	r3, #1
   249fe:	4614      	mov	r4, r2
   24a00:	e7f2      	b.n	249e8 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   24a02:	68e0      	ldr	r0, [r4, #12]
   24a04:	b910      	cbnz	r0, 24a0c <flash_area_open+0x34>
		return -ENODEV;
   24a06:	f06f 0012 	mvn.w	r0, #18
   24a0a:	e7f1      	b.n	249f0 <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   24a0c:	f016 fd06 	bl	3b41c <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   24a10:	2800      	cmp	r0, #0
   24a12:	d0f8      	beq.n	24a06 <flash_area_open+0x2e>
	*fap = area;
   24a14:	602c      	str	r4, [r5, #0]
	return 0;
   24a16:	2000      	movs	r0, #0
   24a18:	e7ea      	b.n	249f0 <flash_area_open+0x18>
		return -EACCES;
   24a1a:	f06f 000c 	mvn.w	r0, #12
   24a1e:	e7e7      	b.n	249f0 <flash_area_open+0x18>
   24a20:	20000634 	.word	0x20000634
   24a24:	0003be80 	.word	0x0003be80

00024a28 <flash_sync>:
}

#endif /* CONFIG_STREAM_FLASH_ERASE */

static int flash_sync(struct stream_flash_ctx *ctx)
{
   24a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t buf_bytes_aligned;
	size_t fill_length;
	uint8_t filler;


	if (ctx->buf_bytes == 0) {
   24a2a:	6883      	ldr	r3, [r0, #8]
{
   24a2c:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   24a2e:	2b00      	cmp	r3, #0
   24a30:	d031      	beq.n	24a96 <flash_sync+0x6e>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   24a32:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
				rc, write_addr);
			return rc;
		}
	}

	fill_length = flash_get_write_block_size(ctx->fdev);
   24a36:	68c0      	ldr	r0, [r0, #12]
   24a38:	f013 fb63 	bl	38102 <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   24a3c:	68a5      	ldr	r5, [r4, #8]
   24a3e:	fbb5 f3f0 	udiv	r3, r5, r0
   24a42:	fb00 5513 	mls	r5, r0, r3, r5
   24a46:	b15d      	cbz	r5, 24a60 <flash_sync+0x38>
		fill_length -= ctx->buf_bytes % fill_length;
   24a48:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   24a4a:	68e0      	ldr	r0, [r4, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   24a4c:	6883      	ldr	r3, [r0, #8]
   24a4e:	68db      	ldr	r3, [r3, #12]
   24a50:	4798      	blx	r3

		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   24a52:	68a3      	ldr	r3, [r4, #8]
   24a54:	7901      	ldrb	r1, [r0, #4]
   24a56:	6820      	ldr	r0, [r4, #0]
   24a58:	462a      	mov	r2, r5
   24a5a:	4418      	add	r0, r3
   24a5c:	f013 feb8 	bl	387d0 <memset>
	} else {
		fill_length = 0;
	}

	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   24a60:	68a3      	ldr	r3, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   24a62:	68e0      	ldr	r0, [r4, #12]
   24a64:	6822      	ldr	r2, [r4, #0]
	size_t write_addr = ctx->offset + ctx->bytes_written;
   24a66:	443e      	add	r6, r7
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   24a68:	442b      	add	r3, r5
	rc = api->write(dev, offset, data, len);
   24a6a:	6881      	ldr	r1, [r0, #8]
   24a6c:	684d      	ldr	r5, [r1, #4]
   24a6e:	4631      	mov	r1, r6
   24a70:	47a8      	blx	r5

	if (rc != 0) {
   24a72:	4605      	mov	r5, r0
   24a74:	b138      	cbz	r0, 24a86 <flash_sync+0x5e>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   24a76:	4602      	mov	r2, r0
   24a78:	4633      	mov	r3, r6
   24a7a:	4818      	ldr	r0, [pc, #96]	; (24adc <flash_sync+0xb4>)
   24a7c:	2145      	movs	r1, #69	; 0x45
   24a7e:	f013 fab1 	bl	37fe4 <z_log_minimal_printk>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   24a82:	4628      	mov	r0, r5
   24a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ctx->callback) {
   24a86:	69e3      	ldr	r3, [r4, #28]
   24a88:	b95b      	cbnz	r3, 24aa2 <flash_sync+0x7a>
	ctx->bytes_written += ctx->buf_bytes;
   24a8a:	6923      	ldr	r3, [r4, #16]
   24a8c:	68a2      	ldr	r2, [r4, #8]
   24a8e:	4413      	add	r3, r2
   24a90:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   24a92:	2300      	movs	r3, #0
   24a94:	60a3      	str	r3, [r4, #8]
		return 0;
   24a96:	2500      	movs	r5, #0
   24a98:	e7f3      	b.n	24a82 <flash_sync+0x5a>
			ctx->buf[i] = ~ctx->buf[i];
   24a9a:	5d53      	ldrb	r3, [r2, r5]
   24a9c:	43db      	mvns	r3, r3
   24a9e:	5553      	strb	r3, [r2, r5]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   24aa0:	3501      	adds	r5, #1
   24aa2:	68a3      	ldr	r3, [r4, #8]
			ctx->buf[i] = ~ctx->buf[i];
   24aa4:	6822      	ldr	r2, [r4, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   24aa6:	42ab      	cmp	r3, r5
   24aa8:	d8f7      	bhi.n	24a9a <flash_sync+0x72>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   24aaa:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   24aac:	6881      	ldr	r1, [r0, #8]
   24aae:	680d      	ldr	r5, [r1, #0]
   24ab0:	4631      	mov	r1, r6
   24ab2:	47a8      	blx	r5
		if (rc != 0) {
   24ab4:	4605      	mov	r5, r0
   24ab6:	b128      	cbz	r0, 24ac4 <flash_sync+0x9c>
			LOG_ERR("flash read failed: %d", rc);
   24ab8:	4602      	mov	r2, r0
   24aba:	4809      	ldr	r0, [pc, #36]	; (24ae0 <flash_sync+0xb8>)
   24abc:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("callback failed: %d", rc);
   24abe:	f013 fa91 	bl	37fe4 <z_log_minimal_printk>
			return rc;
   24ac2:	e7de      	b.n	24a82 <flash_sync+0x5a>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   24ac4:	69e3      	ldr	r3, [r4, #28]
   24ac6:	68a1      	ldr	r1, [r4, #8]
   24ac8:	6820      	ldr	r0, [r4, #0]
   24aca:	4632      	mov	r2, r6
   24acc:	4798      	blx	r3
		if (rc != 0) {
   24ace:	4605      	mov	r5, r0
   24ad0:	2800      	cmp	r0, #0
   24ad2:	d0da      	beq.n	24a8a <flash_sync+0x62>
			LOG_ERR("callback failed: %d", rc);
   24ad4:	4602      	mov	r2, r0
   24ad6:	2145      	movs	r1, #69	; 0x45
   24ad8:	4802      	ldr	r0, [pc, #8]	; (24ae4 <flash_sync+0xbc>)
   24ada:	e7f0      	b.n	24abe <flash_sync+0x96>
   24adc:	0003cd03 	.word	0x0003cd03
   24ae0:	0003cd2c 	.word	0x0003cd2c
   24ae4:	0003cd47 	.word	0x0003cd47

00024ae8 <find_flash_total_size>:
	size_t total_size;
};

static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
   24ae8:	b510      	push	{r4, lr}
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   24aea:	6843      	ldr	r3, [r0, #4]
   24aec:	680a      	ldr	r2, [r1, #0]
   24aee:	429a      	cmp	r2, r3
{
   24af0:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   24af2:	d907      	bls.n	24b04 <find_flash_total_size+0x1c>
		LOG_ERR("Buffer size is bigger than page");
   24af4:	4805      	ldr	r0, [pc, #20]	; (24b0c <find_flash_total_size+0x24>)
   24af6:	2145      	movs	r1, #69	; 0x45
   24af8:	f013 fa74 	bl	37fe4 <z_log_minimal_printk>
   24afc:	2300      	movs	r3, #0
   24afe:	4618      	mov	r0, r3
		ctx->total_size = 0;
   24b00:	6063      	str	r3, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   24b02:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   24b04:	684a      	ldr	r2, [r1, #4]
	return true;
   24b06:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   24b08:	4413      	add	r3, r2
	return true;
   24b0a:	e7f9      	b.n	24b00 <find_flash_total_size+0x18>
   24b0c:	0003cd60 	.word	0x0003cd60

00024b10 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   24b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24b14:	460d      	mov	r5, r1
   24b16:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   24b1a:	4691      	mov	r9, r2
   24b1c:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   24b1e:	4604      	mov	r4, r0
   24b20:	b180      	cbz	r0, 24b44 <stream_flash_init+0x34>
   24b22:	b179      	cbz	r1, 24b44 <stream_flash_init+0x34>
   24b24:	b172      	cbz	r2, 24b44 <stream_flash_init+0x34>
		LOG_ERR("Error %d initializing settings subsystem", rc);
		return rc;
	}
#endif

	struct _inspect_flash inspect_flash_ctx = {
   24b26:	9300      	str	r3, [sp, #0]
		.buf_len = buf_len,
		.total_size = 0
	};

	if (buf_len % flash_get_write_block_size(fdev)) {
   24b28:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   24b2a:	2300      	movs	r3, #0
   24b2c:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   24b2e:	f013 fae8 	bl	38102 <flash_get_write_block_size>
   24b32:	fbb7 f3f0 	udiv	r3, r7, r0
   24b36:	fb03 7010 	mls	r0, r3, r0, r7
   24b3a:	b140      	cbz	r0, 24b4e <stream_flash_init+0x3e>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   24b3c:	4818      	ldr	r0, [pc, #96]	; (24ba0 <stream_flash_init+0x90>)
   24b3e:	2145      	movs	r1, #69	; 0x45
   24b40:	f013 fa50 	bl	37fe4 <z_log_minimal_printk>
		return -EFAULT;
   24b44:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   24b48:	b003      	add	sp, #12
   24b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   24b4e:	4915      	ldr	r1, [pc, #84]	; (24ba4 <stream_flash_init+0x94>)
   24b50:	466a      	mov	r2, sp
   24b52:	4628      	mov	r0, r5
   24b54:	f015 fd7a 	bl	3a64c <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   24b58:	9b01      	ldr	r3, [sp, #4]
   24b5a:	2b00      	cmp	r3, #0
   24b5c:	d0f2      	beq.n	24b44 <stream_flash_init+0x34>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   24b5e:	eb08 0206 	add.w	r2, r8, r6
   24b62:	4293      	cmp	r3, r2
   24b64:	d202      	bcs.n	24b6c <stream_flash_init+0x5c>
		LOG_ERR("Incorrect parameter");
   24b66:	4810      	ldr	r0, [pc, #64]	; (24ba8 <stream_flash_init+0x98>)
   24b68:	2145      	movs	r1, #69	; 0x45
   24b6a:	e7e9      	b.n	24b40 <stream_flash_init+0x30>
	    offset % flash_get_write_block_size(fdev)) {
   24b6c:	4628      	mov	r0, r5
   24b6e:	f013 fac8 	bl	38102 <flash_get_write_block_size>
   24b72:	fbb8 f3f0 	udiv	r3, r8, r0
   24b76:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   24b7a:	2800      	cmp	r0, #0
   24b7c:	d1f3      	bne.n	24b66 <stream_flash_init+0x56>
	ctx->buf_len = buf_len;
   24b7e:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   24b82:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   24b84:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   24b86:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   24b88:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   24b8c:	b916      	cbnz	r6, 24b94 <stream_flash_init+0x84>
   24b8e:	9e01      	ldr	r6, [sp, #4]
   24b90:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   24b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   24b96:	61a6      	str	r6, [r4, #24]
	ctx->callback = cb;
   24b98:	61e3      	str	r3, [r4, #28]
	return 0;
   24b9a:	2000      	movs	r0, #0
   24b9c:	e7d4      	b.n	24b48 <stream_flash_init+0x38>
   24b9e:	bf00      	nop
   24ba0:	0003cd85 	.word	0x0003cd85
   24ba4:	00024ae9 	.word	0x00024ae9
   24ba8:	0003cdc1 	.word	0x0003cdc1

00024bac <pm_resume_devices>:

	return 0;
}

static void pm_resume_devices(void)
{
   24bac:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   24bae:	4d08      	ldr	r5, [pc, #32]	; (24bd0 <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
   24bb0:	4e08      	ldr	r6, [pc, #32]	; (24bd4 <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
   24bb2:	682c      	ldr	r4, [r5, #0]
   24bb4:	3c01      	subs	r4, #1
   24bb6:	2c00      	cmp	r4, #0
   24bb8:	da02      	bge.n	24bc0 <pm_resume_devices+0x14>
				    PM_DEVICE_ACTION_RESUME);
	}

	num_susp = 0;
   24bba:	2300      	movs	r3, #0
   24bbc:	602b      	str	r3, [r5, #0]
}
   24bbe:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
   24bc0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   24bc4:	2101      	movs	r1, #1
   24bc6:	f000 fa0b 	bl	24fe0 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   24bca:	3c01      	subs	r4, #1
   24bcc:	e7f3      	b.n	24bb6 <pm_resume_devices+0xa>
   24bce:	bf00      	nop
   24bd0:	2000334c 	.word	0x2000334c
   24bd4:	20000a1c 	.word	0x20000a1c

00024bd8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   24bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24bdc:	4605      	mov	r5, r0
   24bde:	f04f 0340 	mov.w	r3, #64	; 0x40
   24be2:	f3ef 8611 	mrs	r6, BASEPRI
   24be6:	f383 8812 	msr	BASEPRI_MAX, r3
   24bea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24bee:	481b      	ldr	r0, [pc, #108]	; (24c5c <pm_state_notify+0x84>)
   24bf0:	f00c ffa2 	bl	31b38 <z_spin_lock_valid>
   24bf4:	b940      	cbnz	r0, 24c08 <pm_state_notify+0x30>
   24bf6:	491a      	ldr	r1, [pc, #104]	; (24c60 <pm_state_notify+0x88>)
   24bf8:	481a      	ldr	r0, [pc, #104]	; (24c64 <pm_state_notify+0x8c>)
   24bfa:	2294      	movs	r2, #148	; 0x94
   24bfc:	f013 f9e4 	bl	37fc8 <assert_print>
   24c00:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c02:	4817      	ldr	r0, [pc, #92]	; (24c60 <pm_state_notify+0x88>)
   24c04:	f013 f9d9 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   24c08:	4814      	ldr	r0, [pc, #80]	; (24c5c <pm_state_notify+0x84>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   24c0a:	4f17      	ldr	r7, [pc, #92]	; (24c68 <pm_state_notify+0x90>)
   24c0c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 24c6c <pm_state_notify+0x94>
   24c10:	f00c ffb0 	bl	31b74 <z_spin_lock_set_owner>
	return list->head;
   24c14:	4b16      	ldr	r3, [pc, #88]	; (24c70 <pm_state_notify+0x98>)
   24c16:	681c      	ldr	r4, [r3, #0]
   24c18:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   24c1c:	b954      	cbnz	r4, 24c34 <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c1e:	480f      	ldr	r0, [pc, #60]	; (24c5c <pm_state_notify+0x84>)
   24c20:	f00c ff98 	bl	31b54 <z_spin_unlock_valid>
   24c24:	b9a0      	cbnz	r0, 24c50 <pm_state_notify+0x78>
   24c26:	490e      	ldr	r1, [pc, #56]	; (24c60 <pm_state_notify+0x88>)
   24c28:	480e      	ldr	r0, [pc, #56]	; (24c64 <pm_state_notify+0x8c>)
   24c2a:	22c2      	movs	r2, #194	; 0xc2
   24c2c:	f013 f9cc 	bl	37fc8 <assert_print>
   24c30:	21c2      	movs	r1, #194	; 0xc2
   24c32:	e7e6      	b.n	24c02 <pm_state_notify+0x2a>
			callback = notifier->state_exit;
   24c34:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   24c38:	2d00      	cmp	r5, #0
   24c3a:	bf18      	it	ne
   24c3c:	4613      	movne	r3, r2
		if (callback) {
   24c3e:	b12b      	cbz	r3, 24c4c <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   24c40:	f898 2014 	ldrb.w	r2, [r8, #20]
   24c44:	fb09 f202 	mul.w	r2, r9, r2
   24c48:	5cb8      	ldrb	r0, [r7, r2]
   24c4a:	4798      	blx	r3
	return node->next;
   24c4c:	6824      	ldr	r4, [r4, #0]
   24c4e:	e7e5      	b.n	24c1c <pm_state_notify+0x44>
	__asm__ volatile(
   24c50:	f386 8811 	msr	BASEPRI, r6
   24c54:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   24c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24c5c:	20003350 	.word	0x20003350
   24c60:	0003cc84 	.word	0x0003cc84
   24c64:	0003c7f8 	.word	0x0003c7f8
   24c68:	20003364 	.word	0x20003364
   24c6c:	2000413c 	.word	0x2000413c
   24c70:	20003370 	.word	0x20003370

00024c74 <pm_system_resume>:

void pm_system_resume(void)
{
   24c74:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   24c76:	4b19      	ldr	r3, [pc, #100]	; (24cdc <pm_system_resume+0x68>)
   24c78:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24c7a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   24c7e:	f004 031f 	and.w	r3, r4, #31
   24c82:	2201      	movs	r2, #1
   24c84:	409a      	lsls	r2, r3
   24c86:	4b16      	ldr	r3, [pc, #88]	; (24ce0 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24c88:	0961      	lsrs	r1, r4, #5
   24c8a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   24c8e:	43d0      	mvns	r0, r2
   24c90:	e853 1f00 	ldrex	r1, [r3]
   24c94:	ea01 0500 	and.w	r5, r1, r0
   24c98:	e843 5600 	strex	r6, r5, [r3]
   24c9c:	2e00      	cmp	r6, #0
   24c9e:	d1f7      	bne.n	24c90 <pm_system_resume+0x1c>
   24ca0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   24ca4:	420a      	tst	r2, r1
   24ca6:	d013      	beq.n	24cd0 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   24ca8:	4b0e      	ldr	r3, [pc, #56]	; (24ce4 <pm_system_resume+0x70>)
   24caa:	4d0f      	ldr	r5, [pc, #60]	; (24ce8 <pm_system_resume+0x74>)
   24cac:	b18b      	cbz	r3, 24cd2 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   24cae:	230c      	movs	r3, #12
   24cb0:	4363      	muls	r3, r4
   24cb2:	18ea      	adds	r2, r5, r3
   24cb4:	5ce8      	ldrb	r0, [r5, r3]
   24cb6:	7851      	ldrb	r1, [r2, #1]
   24cb8:	f013 fdaf 	bl	3881a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   24cbc:	2000      	movs	r0, #0
   24cbe:	f7ff ff8b 	bl	24bd8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   24cc2:	230c      	movs	r3, #12
   24cc4:	435c      	muls	r4, r3
   24cc6:	192a      	adds	r2, r5, r4
   24cc8:	2300      	movs	r3, #0
   24cca:	512b      	str	r3, [r5, r4]
   24ccc:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   24cd0:	bd70      	pop	{r4, r5, r6, pc}
   24cd2:	f383 8811 	msr	BASEPRI, r3
   24cd6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   24cda:	e7ef      	b.n	24cbc <pm_system_resume+0x48>
   24cdc:	2000413c 	.word	0x2000413c
   24ce0:	20003378 	.word	0x20003378
   24ce4:	0003881b 	.word	0x0003881b
   24ce8:	20003364 	.word	0x20003364

00024cec <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   24cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t id = CURRENT_CPU;
   24cf0:	4b7e      	ldr	r3, [pc, #504]	; (24eec <pm_system_suspend+0x200>)
{
   24cf2:	b085      	sub	sp, #20
	uint8_t id = CURRENT_CPU;
   24cf4:	7d1c      	ldrb	r4, [r3, #20]
{
   24cf6:	4606      	mov	r6, r0
	__asm__ volatile(
   24cf8:	f04f 0340 	mov.w	r3, #64	; 0x40
   24cfc:	f3ef 8811 	mrs	r8, BASEPRI
   24d00:	f383 8812 	msr	BASEPRI_MAX, r3
   24d04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d08:	4879      	ldr	r0, [pc, #484]	; (24ef0 <pm_system_suspend+0x204>)
   24d0a:	f00c ff15 	bl	31b38 <z_spin_lock_valid>
   24d0e:	b940      	cbnz	r0, 24d22 <pm_system_suspend+0x36>
   24d10:	4978      	ldr	r1, [pc, #480]	; (24ef4 <pm_system_suspend+0x208>)
   24d12:	4879      	ldr	r0, [pc, #484]	; (24ef8 <pm_system_suspend+0x20c>)
   24d14:	2294      	movs	r2, #148	; 0x94
   24d16:	f013 f957 	bl	37fc8 <assert_print>
   24d1a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d1c:	4875      	ldr	r0, [pc, #468]	; (24ef4 <pm_system_suspend+0x208>)
   24d1e:	f013 f94c 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   24d22:	4873      	ldr	r0, [pc, #460]	; (24ef0 <pm_system_suspend+0x204>)
   24d24:	4f75      	ldr	r7, [pc, #468]	; (24efc <pm_system_suspend+0x210>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   24d26:	250c      	movs	r5, #12
   24d28:	f00c ff24 	bl	31b74 <z_spin_lock_set_owner>
   24d2c:	4365      	muls	r5, r4
   24d2e:	4b74      	ldr	r3, [pc, #464]	; (24f00 <pm_system_suspend+0x214>)
   24d30:	5d59      	ldrb	r1, [r3, r5]
   24d32:	195a      	adds	r2, r3, r5
   24d34:	b191      	cbz	r1, 24d5c <pm_system_suspend+0x70>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   24d36:	ca07      	ldmia	r2, {r0, r1, r2}
   24d38:	eb07 0c05 	add.w	ip, r7, r5
   24d3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   24d40:	2200      	movs	r2, #0
   24d42:	555a      	strb	r2, [r3, r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d44:	486a      	ldr	r0, [pc, #424]	; (24ef0 <pm_system_suspend+0x204>)
   24d46:	f00c ff05 	bl	31b54 <z_spin_unlock_valid>
   24d4a:	4681      	mov	r9, r0
   24d4c:	b988      	cbnz	r0, 24d72 <pm_system_suspend+0x86>
   24d4e:	4969      	ldr	r1, [pc, #420]	; (24ef4 <pm_system_suspend+0x208>)
   24d50:	4869      	ldr	r0, [pc, #420]	; (24ef8 <pm_system_suspend+0x20c>)
   24d52:	22c2      	movs	r2, #194	; 0xc2
   24d54:	f013 f938 	bl	37fc8 <assert_print>
   24d58:	21c2      	movs	r1, #194	; 0xc2
   24d5a:	e7df      	b.n	24d1c <pm_system_suspend+0x30>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   24d5c:	4631      	mov	r1, r6
   24d5e:	4620      	mov	r0, r4
   24d60:	f000 f8e0 	bl	24f24 <pm_policy_next_state>
		if (info != NULL) {
   24d64:	2800      	cmp	r0, #0
   24d66:	d0ed      	beq.n	24d44 <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   24d68:	c807      	ldmia	r0, {r0, r1, r2}
   24d6a:	443d      	add	r5, r7
   24d6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   24d70:	e7e8      	b.n	24d44 <pm_system_suspend+0x58>
	__asm__ volatile(
   24d72:	f388 8811 	msr	BASEPRI, r8
   24d76:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   24d7a:	230c      	movs	r3, #12
   24d7c:	4363      	muls	r3, r4
   24d7e:	18fa      	adds	r2, r7, r3
   24d80:	5cfb      	ldrb	r3, [r7, r3]
   24d82:	2b00      	cmp	r3, #0
   24d84:	f000 80a2 	beq.w	24ecc <pm_system_suspend+0x1e0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   24d88:	1c73      	adds	r3, r6, #1
   24d8a:	d010      	beq.n	24dae <pm_system_suspend+0xc2>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   24d8c:	f8d2 c008 	ldr.w	ip, [r2, #8]
   24d90:	4d5c      	ldr	r5, [pc, #368]	; (24f04 <pm_system_suspend+0x218>)
   24d92:	4a5d      	ldr	r2, [pc, #372]	; (24f08 <pm_system_suspend+0x21c>)
   24d94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   24d98:	2100      	movs	r1, #0
   24d9a:	fbec 5100 	umlal	r5, r1, ip, r0
   24d9e:	2300      	movs	r3, #0
   24da0:	4628      	mov	r0, r5
   24da2:	f7e7 faad 	bl	c300 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   24da6:	2101      	movs	r1, #1
   24da8:	1a30      	subs	r0, r6, r0
   24daa:	f00f f9d1 	bl	34150 <z_set_timeout_expiry>
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if ((z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) &&
   24dae:	230c      	movs	r3, #12
   24db0:	4363      	muls	r3, r4
   24db2:	4e56      	ldr	r6, [pc, #344]	; (24f0c <pm_system_suspend+0x220>)
   24db4:	5cfb      	ldrb	r3, [r7, r3]
   24db6:	2b01      	cmp	r3, #1
   24db8:	d01a      	beq.n	24df0 <pm_system_suspend+0x104>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24dba:	f3bf 8f5b 	dmb	ish
   24dbe:	e856 5f00 	ldrex	r5, [r6]
   24dc2:	3d01      	subs	r5, #1
   24dc4:	e846 5300 	strex	r3, r5, [r6]
   24dc8:	2b00      	cmp	r3, #0
   24dca:	d1f8      	bne.n	24dbe <pm_system_suspend+0xd2>
   24dcc:	f3bf 8f5b 	dmb	ish
   24dd0:	b975      	cbnz	r5, 24df0 <pm_system_suspend+0x104>
	devc = z_device_get_all_static(&devs);
   24dd2:	a803      	add	r0, sp, #12
   24dd4:	f00c fbaa 	bl	3152c <z_device_get_all_static>
	num_susp = 0;
   24dd8:	f8df b134 	ldr.w	fp, [pc, #308]	; 24f10 <pm_system_suspend+0x224>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   24ddc:	231c      	movs	r3, #28
	num_susp = 0;
   24dde:	f8cb 5000 	str.w	r5, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   24de2:	4358      	muls	r0, r3
   24de4:	9d03      	ldr	r5, [sp, #12]
   24de6:	381c      	subs	r0, #28
   24de8:	4405      	add	r5, r0
   24dea:	9b03      	ldr	r3, [sp, #12]
   24dec:	429d      	cmp	r5, r3
   24dee:	d233      	bcs.n	24e58 <pm_system_suspend+0x16c>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   24df0:	f00e f9cc 	bl	3318c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   24df4:	2001      	movs	r0, #1
   24df6:	f7ff feef 	bl	24bd8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24dfa:	f3bf 8f5b 	dmb	ish
   24dfe:	4b45      	ldr	r3, [pc, #276]	; (24f14 <pm_system_suspend+0x228>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24e00:	0962      	lsrs	r2, r4, #5
   24e02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   24e06:	f004 011f 	and.w	r1, r4, #31
   24e0a:	2201      	movs	r2, #1
   24e0c:	408a      	lsls	r2, r1
   24e0e:	e853 0f00 	ldrex	r0, [r3]
   24e12:	4310      	orrs	r0, r2
   24e14:	e843 0100 	strex	r1, r0, [r3]
   24e18:	2900      	cmp	r1, #0
   24e1a:	d1f8      	bne.n	24e0e <pm_system_suspend+0x122>
   24e1c:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   24e20:	4b3d      	ldr	r3, [pc, #244]	; (24f18 <pm_system_suspend+0x22c>)
   24e22:	b133      	cbz	r3, 24e32 <pm_system_suspend+0x146>
		pm_state_set(info->state, info->substate_id);
   24e24:	230c      	movs	r3, #12
   24e26:	435c      	muls	r4, r3
   24e28:	193b      	adds	r3, r7, r4
   24e2a:	5d38      	ldrb	r0, [r7, r4]
   24e2c:	7859      	ldrb	r1, [r3, #1]
   24e2e:	f013 fce8 	bl	38802 <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24e32:	f3bf 8f5b 	dmb	ish
   24e36:	e856 3f00 	ldrex	r3, [r6]
   24e3a:	1c5a      	adds	r2, r3, #1
   24e3c:	e846 2100 	strex	r1, r2, [r6]
   24e40:	2900      	cmp	r1, #0
   24e42:	d1f8      	bne.n	24e36 <pm_system_suspend+0x14a>
   24e44:	f3bf 8f5b 	dmb	ish
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
   24e48:	b90b      	cbnz	r3, 24e4e <pm_system_suspend+0x162>
		pm_resume_devices();
   24e4a:	f7ff feaf 	bl	24bac <pm_resume_devices>
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   24e4e:	f7ff ff11 	bl	24c74 <pm_system_resume>
	k_sched_unlock();
   24e52:	f00e f9e7 	bl	33224 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   24e56:	e03b      	b.n	24ed0 <pm_system_suspend+0x1e4>
		if (pm_device_is_busy(dev) || pm_device_state_is_locked(dev)
   24e58:	4628      	mov	r0, r5
   24e5a:	f013 f9a5 	bl	381a8 <pm_device_is_busy>
   24e5e:	2800      	cmp	r0, #0
   24e60:	d142      	bne.n	24ee8 <pm_system_suspend+0x1fc>
   24e62:	4628      	mov	r0, r5
   24e64:	f013 f9b4 	bl	381d0 <pm_device_state_is_locked>
   24e68:	2800      	cmp	r0, #0
   24e6a:	d13d      	bne.n	24ee8 <pm_system_suspend+0x1fc>
		    || pm_device_wakeup_is_enabled(dev) ||
   24e6c:	4628      	mov	r0, r5
   24e6e:	f013 f9a5 	bl	381bc <pm_device_wakeup_is_enabled>
   24e72:	4682      	mov	sl, r0
   24e74:	bbc0      	cbnz	r0, 24ee8 <pm_system_suspend+0x1fc>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   24e76:	4601      	mov	r1, r0
   24e78:	4628      	mov	r0, r5
   24e7a:	f000 f8b1 	bl	24fe0 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   24e7e:	f020 0320 	bic.w	r3, r0, #32
   24e82:	3378      	adds	r3, #120	; 0x78
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   24e84:	4680      	mov	r8, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   24e86:	d02f      	beq.n	24ee8 <pm_system_suspend+0x1fc>
   24e88:	f110 0f86 	cmn.w	r0, #134	; 0x86
   24e8c:	d02c      	beq.n	24ee8 <pm_system_suspend+0x1fc>
		} else if (ret < 0) {
   24e8e:	2800      	cmp	r0, #0
   24e90:	da22      	bge.n	24ed8 <pm_system_suspend+0x1ec>
			LOG_ERR("Device %s did not enter %s state (%d)",
   24e92:	2001      	movs	r0, #1
   24e94:	682d      	ldr	r5, [r5, #0]
   24e96:	f000 f897 	bl	24fc8 <pm_device_state_str>
   24e9a:	462a      	mov	r2, r5
   24e9c:	4603      	mov	r3, r0
   24e9e:	2145      	movs	r1, #69	; 0x45
   24ea0:	481e      	ldr	r0, [pc, #120]	; (24f1c <pm_system_suspend+0x230>)
   24ea2:	f8cd 8000 	str.w	r8, [sp]
   24ea6:	f013 f89d 	bl	37fe4 <z_log_minimal_printk>
			pm_resume_devices();
   24eaa:	f7ff fe7f 	bl	24bac <pm_resume_devices>
			z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
   24eae:	230c      	movs	r3, #12
   24eb0:	4363      	muls	r3, r4
   24eb2:	f807 a003 	strb.w	sl, [r7, r3]
   24eb6:	f3bf 8f5b 	dmb	ish
   24eba:	e856 3f00 	ldrex	r3, [r6]
   24ebe:	3301      	adds	r3, #1
   24ec0:	e846 3200 	strex	r2, r3, [r6]
   24ec4:	2a00      	cmp	r2, #0
   24ec6:	d1f8      	bne.n	24eba <pm_system_suspend+0x1ce>
   24ec8:	f3bf 8f5b 	dmb	ish
		return false;
   24ecc:	f04f 0900 	mov.w	r9, #0
}
   24ed0:	4648      	mov	r0, r9
   24ed2:	b005      	add	sp, #20
   24ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__pm_device_slots_start[num_susp] = dev;
   24ed8:	f8db 3000 	ldr.w	r3, [fp]
   24edc:	4a10      	ldr	r2, [pc, #64]	; (24f20 <pm_system_suspend+0x234>)
   24ede:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
		num_susp++;
   24ee2:	3301      	adds	r3, #1
   24ee4:	f8cb 3000 	str.w	r3, [fp]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   24ee8:	3d1c      	subs	r5, #28
   24eea:	e77e      	b.n	24dea <pm_system_suspend+0xfe>
   24eec:	2000413c 	.word	0x2000413c
   24ef0:	20003354 	.word	0x20003354
   24ef4:	0003cc84 	.word	0x0003cc84
   24ef8:	0003c7f8 	.word	0x0003c7f8
   24efc:	20003364 	.word	0x20003364
   24f00:	20003358 	.word	0x20003358
   24f04:	000f423f 	.word	0x000f423f
   24f08:	000f4240 	.word	0x000f4240
   24f0c:	2000062c 	.word	0x2000062c
   24f10:	2000334c 	.word	0x2000334c
   24f14:	20003378 	.word	0x20003378
   24f18:	00038803 	.word	0x00038803
   24f1c:	0003cde7 	.word	0x0003cde7
   24f20:	20000a1c 	.word	0x20000a1c

00024f24 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   24f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f28:	b085      	sub	sp, #20
   24f2a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   24f2c:	a903      	add	r1, sp, #12
   24f2e:	f000 f843 	bl	24fb8 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   24f32:	4b1e      	ldr	r3, [pc, #120]	; (24fac <pm_policy_next_state+0x88>)
   24f34:	9d03      	ldr	r5, [sp, #12]
   24f36:	f8d3 a000 	ldr.w	sl, [r3]
   24f3a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 24fb0 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   24f3e:	1e43      	subs	r3, r0, #1
   24f40:	b21b      	sxth	r3, r3
   24f42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   24f46:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   24f48:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   24f4c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   24f50:	f04f 0b00 	mov.w	fp, #0
   24f54:	b924      	cbnz	r4, 24f60 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   24f56:	46a1      	mov	r9, r4
}
   24f58:	4648      	mov	r0, r9
   24f5a:	b005      	add	sp, #20
   24f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f60:	6868      	ldr	r0, [r5, #4]
   24f62:	4a14      	ldr	r2, [pc, #80]	; (24fb4 <pm_policy_next_state+0x90>)
   24f64:	46c4      	mov	ip, r8
   24f66:	4659      	mov	r1, fp
   24f68:	fbe0 c107 	umlal	ip, r1, r0, r7
   24f6c:	2300      	movs	r3, #0
   24f6e:	4660      	mov	r0, ip
   24f70:	f7e7 f9c6 	bl	c300 <__aeabi_uldivmod>
   24f74:	9001      	str	r0, [sp, #4]
   24f76:	68a8      	ldr	r0, [r5, #8]
   24f78:	4a0e      	ldr	r2, [pc, #56]	; (24fb4 <pm_policy_next_state+0x90>)
   24f7a:	46c4      	mov	ip, r8
   24f7c:	4659      	mov	r1, fp
   24f7e:	fbe0 c107 	umlal	ip, r1, r0, r7
   24f82:	2300      	movs	r3, #0
   24f84:	4660      	mov	r0, ip
   24f86:	f7e7 f9bb 	bl	c300 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   24f8a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   24f8e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   24f90:	d001      	beq.n	24f96 <pm_policy_next_state+0x72>
   24f92:	4582      	cmp	sl, r0
   24f94:	d905      	bls.n	24fa2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   24f96:	1c73      	adds	r3, r6, #1
   24f98:	d0de      	beq.n	24f58 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   24f9a:	9b01      	ldr	r3, [sp, #4]
   24f9c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   24f9e:	42b0      	cmp	r0, r6
   24fa0:	d9da      	bls.n	24f58 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   24fa2:	3c01      	subs	r4, #1
   24fa4:	b2a4      	uxth	r4, r4
   24fa6:	3d0c      	subs	r5, #12
   24fa8:	e7d4      	b.n	24f54 <pm_policy_next_state+0x30>
   24faa:	bf00      	nop
   24fac:	20000630 	.word	0x20000630
   24fb0:	000f423f 	.word	0x000f423f
   24fb4:	000f4240 	.word	0x000f4240

00024fb8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   24fb8:	b908      	cbnz	r0, 24fbe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   24fba:	4b02      	ldr	r3, [pc, #8]	; (24fc4 <pm_state_cpu_get_all+0xc>)
   24fbc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   24fbe:	2000      	movs	r0, #0
   24fc0:	4770      	bx	lr
   24fc2:	bf00      	nop
   24fc4:	0003be70 	.word	0x0003be70

00024fc8 <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
   24fc8:	2803      	cmp	r0, #3
   24fca:	bf9a      	itte	ls
   24fcc:	4b02      	ldrls	r3, [pc, #8]	; (24fd8 <pm_device_state_str+0x10>)
   24fce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   24fd2:	4802      	ldrhi	r0, [pc, #8]	; (24fdc <pm_device_state_str+0x14>)
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
	}
}
   24fd4:	4770      	bx	lr
   24fd6:	bf00      	nop
   24fd8:	0003be70 	.word	0x0003be70
   24fdc:	0003ee96 	.word	0x0003ee96

00024fe0 <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
   24fe0:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
   24fe2:	6984      	ldr	r4, [r0, #24]
{
   24fe4:	4603      	mov	r3, r0
   24fe6:	460d      	mov	r5, r1
	int ret;

	if (pm == NULL) {
   24fe8:	2c00      	cmp	r4, #0
   24fea:	d03a      	beq.n	25062 <pm_device_action_run+0x82>
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
   24fec:	f013 f8f0 	bl	381d0 <pm_device_state_is_locked>
   24ff0:	2800      	cmp	r0, #0
   24ff2:	d139      	bne.n	25068 <pm_device_action_run+0x88>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
   24ff4:	4821      	ldr	r0, [pc, #132]	; (2507c <pm_device_action_run+0x9c>)
   24ff6:	7a22      	ldrb	r2, [r4, #8]
   24ff8:	5c46      	ldrb	r6, [r0, r1]
   24ffa:	42b2      	cmp	r2, r6
   24ffc:	d037      	beq.n	2506e <pm_device_action_run+0x8e>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
   24ffe:	4820      	ldr	r0, [pc, #128]	; (25080 <pm_device_action_run+0xa0>)
   25000:	5c40      	ldrb	r0, [r0, r1]
   25002:	4290      	cmp	r0, r2
   25004:	d136      	bne.n	25074 <pm_device_action_run+0x94>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
   25006:	68e2      	ldr	r2, [r4, #12]
   25008:	4618      	mov	r0, r3
   2500a:	4790      	blx	r2
	if (ret < 0) {
   2500c:	2800      	cmp	r0, #0
   2500e:	da15      	bge.n	2503c <pm_device_action_run+0x5c>
		 * physical behavior.
		 *
		 * The function will still return the error code so the domain
		 * can take whatever action is more appropriated.
		 */
		switch (action) {
   25010:	2d02      	cmp	r5, #2
   25012:	d011      	beq.n	25038 <pm_device_action_run+0x58>
   25014:	2d03      	cmp	r5, #3
   25016:	d110      	bne.n	2503a <pm_device_action_run+0x5a>
		case PM_DEVICE_ACTION_TURN_ON:
			/* Store an error flag when the transition explicitly fails */
			if (ret != -ENOTSUP) {
   25018:	f110 0f86 	cmn.w	r0, #134	; 0x86
   2501c:	d00c      	beq.n	25038 <pm_device_action_run+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2501e:	f3bf 8f5b 	dmb	ish
   25022:	1d23      	adds	r3, r4, #4
   25024:	e853 1f00 	ldrex	r1, [r3]
   25028:	f041 0102 	orr.w	r1, r1, #2
   2502c:	e843 1200 	strex	r2, r1, [r3]
   25030:	2a00      	cmp	r2, #0
   25032:	d1f7      	bne.n	25024 <pm_device_action_run+0x44>
   25034:	f3bf 8f5b 	dmb	ish
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
			}
			__fallthrough;
		case PM_DEVICE_ACTION_TURN_OFF:
			pm->state = action_target_state[action];
   25038:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
}
   2503a:	bd70      	pop	{r4, r5, r6, pc}
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
   2503c:	2d02      	cmp	r5, #2
	pm->state = action_target_state[action];
   2503e:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
   25040:	d001      	beq.n	25046 <pm_device_action_run+0x66>
	return 0;
   25042:	2000      	movs	r0, #0
   25044:	e7f9      	b.n	2503a <pm_device_action_run+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25046:	3404      	adds	r4, #4
   25048:	f3bf 8f5b 	dmb	ish
   2504c:	e854 3f00 	ldrex	r3, [r4]
   25050:	f023 0302 	bic.w	r3, r3, #2
   25054:	e844 3200 	strex	r2, r3, [r4]
   25058:	2a00      	cmp	r2, #0
   2505a:	d1f7      	bne.n	2504c <pm_device_action_run+0x6c>
   2505c:	f3bf 8f5b 	dmb	ish
   25060:	e7ef      	b.n	25042 <pm_device_action_run+0x62>
		return -ENOSYS;
   25062:	f06f 0057 	mvn.w	r0, #87	; 0x57
   25066:	e7e8      	b.n	2503a <pm_device_action_run+0x5a>
		return -EPERM;
   25068:	f04f 30ff 	mov.w	r0, #4294967295
   2506c:	e7e5      	b.n	2503a <pm_device_action_run+0x5a>
		return -EALREADY;
   2506e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25072:	e7e2      	b.n	2503a <pm_device_action_run+0x5a>
		return -ENOTSUP;
   25074:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25078:	e7df      	b.n	2503a <pm_device_action_run+0x5a>
   2507a:	bf00      	nop
   2507c:	0003ce38 	.word	0x0003ce38
   25080:	0003ce34 	.word	0x0003ce34

00025084 <stats_group_get_next>:
}

struct stats_hdr *
stats_group_get_next(const struct stats_hdr *cur)
{
	if (cur == NULL) {
   25084:	b910      	cbnz	r0, 2508c <stats_group_get_next+0x8>
		return stats_list;
   25086:	4b02      	ldr	r3, [pc, #8]	; (25090 <stats_group_get_next+0xc>)
   25088:	6818      	ldr	r0, [r3, #0]
   2508a:	4770      	bx	lr
	}

	/* Cast away const. */
	return cur->s_next;
   2508c:	6940      	ldr	r0, [r0, #20]
}
   2508e:	4770      	bx	lr
   25090:	2000337c 	.word	0x2000337c

00025094 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   25094:	b538      	push	{r3, r4, r5, lr}
	struct stats_hdr *hdr;

	for (hdr = stats_list; hdr != NULL; hdr = hdr->s_next) {
   25096:	4b07      	ldr	r3, [pc, #28]	; (250b4 <stats_group_find+0x20>)
   25098:	681c      	ldr	r4, [r3, #0]
{
   2509a:	4605      	mov	r5, r0
	for (hdr = stats_list; hdr != NULL; hdr = hdr->s_next) {
   2509c:	b90c      	cbnz	r4, 250a2 <stats_group_find+0xe>
			return hdr;
		}
	}

	return NULL;
}
   2509e:	4620      	mov	r0, r4
   250a0:	bd38      	pop	{r3, r4, r5, pc}
		if (strcmp(hdr->s_name, name) == 0) {
   250a2:	6820      	ldr	r0, [r4, #0]
   250a4:	4629      	mov	r1, r5
   250a6:	f013 fb55 	bl	38754 <strcmp>
   250aa:	2800      	cmp	r0, #0
   250ac:	d0f7      	beq.n	2509e <stats_group_find+0xa>
	for (hdr = stats_list; hdr != NULL; hdr = hdr->s_next) {
   250ae:	6964      	ldr	r4, [r4, #20]
   250b0:	e7f4      	b.n	2509c <stats_group_find+0x8>
   250b2:	bf00      	nop
   250b4:	2000337c 	.word	0x2000337c

000250b8 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   250b8:	4904      	ldr	r1, [pc, #16]	; (250cc <sub_bytes+0x14>)
   250ba:	1e43      	subs	r3, r0, #1
   250bc:	300f      	adds	r0, #15
   250be:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   250c2:	5c8a      	ldrb	r2, [r1, r2]
   250c4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   250c6:	4283      	cmp	r3, r0
   250c8:	d1f9      	bne.n	250be <sub_bytes+0x6>
	}
}
   250ca:	4770      	bx	lr
   250cc:	0003ce3c 	.word	0x0003ce3c

000250d0 <tc_aes128_set_encrypt_key>:
{
   250d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   250d2:	4e26      	ldr	r6, [pc, #152]	; (2516c <tc_aes128_set_encrypt_key+0x9c>)
{
   250d4:	4607      	mov	r7, r0
   250d6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   250d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   250da:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   250dc:	ad01      	add	r5, sp, #4
   250de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   250e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   250e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   250e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   250e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   250ec:	4638      	mov	r0, r7
   250ee:	2f00      	cmp	r7, #0
   250f0:	d038      	beq.n	25164 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   250f2:	2c00      	cmp	r4, #0
   250f4:	d038      	beq.n	25168 <tc_aes128_set_encrypt_key+0x98>
   250f6:	1f38      	subs	r0, r7, #4
   250f8:	4621      	mov	r1, r4
   250fa:	4602      	mov	r2, r0
   250fc:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   250fe:	784b      	ldrb	r3, [r1, #1]
   25100:	780d      	ldrb	r5, [r1, #0]
   25102:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   25104:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   25108:	78cd      	ldrb	r5, [r1, #3]
   2510a:	432b      	orrs	r3, r5
   2510c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2510e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   25110:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   25114:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   25116:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2511a:	d1f0      	bne.n	250fe <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2511c:	4c14      	ldr	r4, [pc, #80]	; (25170 <tc_aes128_set_encrypt_key+0xa0>)
   2511e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   25120:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   25122:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   25124:	d116      	bne.n	25154 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   25126:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2512a:	5ca5      	ldrb	r5, [r4, r2]
   2512c:	0e1a      	lsrs	r2, r3, #24
   2512e:	5ca2      	ldrb	r2, [r4, r2]
   25130:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   25134:	f3c3 2507 	ubfx	r5, r3, #8, #8
   25138:	b2db      	uxtb	r3, r3
   2513a:	5d65      	ldrb	r5, [r4, r5]
   2513c:	5ce3      	ldrb	r3, [r4, r3]
   2513e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   25142:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   25146:	f021 0303 	bic.w	r3, r1, #3
   2514a:	3330      	adds	r3, #48	; 0x30
   2514c:	446b      	add	r3, sp
   2514e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   25152:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   25154:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   25158:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2515a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2515c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2515e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   25160:	d1de      	bne.n	25120 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   25162:	2001      	movs	r0, #1
}
   25164:	b00d      	add	sp, #52	; 0x34
   25166:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   25168:	4620      	mov	r0, r4
   2516a:	e7fb      	b.n	25164 <tc_aes128_set_encrypt_key+0x94>
   2516c:	0003bda4 	.word	0x0003bda4
   25170:	0003ce3c 	.word	0x0003ce3c

00025174 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   25174:	4801      	ldr	r0, [pc, #4]	; (2517c <nrf_cc3xx_platform_abort_init+0x8>)
   25176:	f010 b849 	b.w	3520c <nrf_cc3xx_platform_set_abort>
   2517a:	bf00      	nop
   2517c:	0003bee4 	.word	0x0003bee4

00025180 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   25180:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   25182:	4604      	mov	r4, r0
   25184:	b918      	cbnz	r0, 2518e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   25186:	4b0f      	ldr	r3, [pc, #60]	; (251c4 <mutex_free_platform+0x44>)
   25188:	480f      	ldr	r0, [pc, #60]	; (251c8 <mutex_free_platform+0x48>)
   2518a:	685b      	ldr	r3, [r3, #4]
   2518c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   2518e:	6861      	ldr	r1, [r4, #4]
   25190:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   25194:	d00f      	beq.n	251b6 <mutex_free_platform+0x36>
   25196:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   2519a:	d00c      	beq.n	251b6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   2519c:	4d0b      	ldr	r5, [pc, #44]	; (251cc <mutex_free_platform+0x4c>)
   2519e:	42a9      	cmp	r1, r5
   251a0:	d009      	beq.n	251b6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   251a2:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   251a6:	d007      	beq.n	251b8 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   251a8:	4809      	ldr	r0, [pc, #36]	; (251d0 <mutex_free_platform+0x50>)
   251aa:	4621      	mov	r1, r4
   251ac:	f00c fc74 	bl	31a98 <k_mem_slab_free>
        mutex->mutex = NULL;
   251b0:	2300      	movs	r3, #0
   251b2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   251b4:	6065      	str	r5, [r4, #4]
}
   251b6:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   251b8:	6820      	ldr	r0, [r4, #0]
   251ba:	2214      	movs	r2, #20
   251bc:	f013 fb08 	bl	387d0 <memset>
   251c0:	e7f8      	b.n	251b4 <mutex_free_platform+0x34>
   251c2:	bf00      	nop
   251c4:	200008dc 	.word	0x200008dc
   251c8:	0003cf3c 	.word	0x0003cf3c
   251cc:	a95c5f2c 	.word	0xa95c5f2c
   251d0:	20003880 	.word	0x20003880

000251d4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   251d4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   251d6:	b320      	cbz	r0, 25222 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   251d8:	6843      	ldr	r3, [r0, #4]
   251da:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   251de:	d110      	bne.n	25202 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   251e0:	2201      	movs	r2, #1
   251e2:	6803      	ldr	r3, [r0, #0]
   251e4:	f3bf 8f5b 	dmb	ish
   251e8:	e853 1f00 	ldrex	r1, [r3]
   251ec:	2900      	cmp	r1, #0
   251ee:	d103      	bne.n	251f8 <mutex_lock_platform+0x24>
   251f0:	e843 2000 	strex	r0, r2, [r3]
   251f4:	2800      	cmp	r0, #0
   251f6:	d1f7      	bne.n	251e8 <mutex_lock_platform+0x14>
   251f8:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   251fc:	d10d      	bne.n	2521a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   251fe:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   25200:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   25202:	4a09      	ldr	r2, [pc, #36]	; (25228 <mutex_lock_platform+0x54>)
   25204:	4293      	cmp	r3, r2
   25206:	d00a      	beq.n	2521e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   25208:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2520a:	f04f 32ff 	mov.w	r2, #4294967295
   2520e:	f04f 33ff 	mov.w	r3, #4294967295
   25212:	f00c fea7 	bl	31f64 <z_impl_k_mutex_lock>
        if (ret == 0) {
   25216:	2800      	cmp	r0, #0
   25218:	d0f1      	beq.n	251fe <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   2521a:	4804      	ldr	r0, [pc, #16]	; (2522c <mutex_lock_platform+0x58>)
   2521c:	e7f0      	b.n	25200 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   2521e:	4804      	ldr	r0, [pc, #16]	; (25230 <mutex_lock_platform+0x5c>)
   25220:	e7ee      	b.n	25200 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   25222:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25226:	e7eb      	b.n	25200 <mutex_lock_platform+0x2c>
   25228:	a95c5f2c 	.word	0xa95c5f2c
   2522c:	ffff8fe9 	.word	0xffff8fe9
   25230:	ffff8fea 	.word	0xffff8fea

00025234 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   25234:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   25236:	b1d8      	cbz	r0, 25270 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   25238:	6843      	ldr	r3, [r0, #4]
   2523a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   2523e:	d110      	bne.n	25262 <mutex_unlock_platform+0x2e>
   25240:	2200      	movs	r2, #0
   25242:	6803      	ldr	r3, [r0, #0]
   25244:	f3bf 8f5b 	dmb	ish
   25248:	e853 1f00 	ldrex	r1, [r3]
   2524c:	2901      	cmp	r1, #1
   2524e:	d103      	bne.n	25258 <mutex_unlock_platform+0x24>
   25250:	e843 2000 	strex	r0, r2, [r3]
   25254:	2800      	cmp	r0, #0
   25256:	d1f7      	bne.n	25248 <mutex_unlock_platform+0x14>
   25258:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   2525c:	d10b      	bne.n	25276 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   2525e:	2000      	movs	r0, #0
    }
}
   25260:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   25262:	4a07      	ldr	r2, [pc, #28]	; (25280 <mutex_unlock_platform+0x4c>)
   25264:	4293      	cmp	r3, r2
   25266:	d008      	beq.n	2527a <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   25268:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   2526a:	f00c ff31 	bl	320d0 <z_impl_k_mutex_unlock>
   2526e:	e7f6      	b.n	2525e <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   25270:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25274:	e7f4      	b.n	25260 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   25276:	4803      	ldr	r0, [pc, #12]	; (25284 <mutex_unlock_platform+0x50>)
   25278:	e7f2      	b.n	25260 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   2527a:	4803      	ldr	r0, [pc, #12]	; (25288 <mutex_unlock_platform+0x54>)
   2527c:	e7f0      	b.n	25260 <mutex_unlock_platform+0x2c>
   2527e:	bf00      	nop
   25280:	a95c5f2c 	.word	0xa95c5f2c
   25284:	ffff8fe9 	.word	0xffff8fe9
   25288:	ffff8fea 	.word	0xffff8fea

0002528c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   2528c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   2528e:	4604      	mov	r4, r0
   25290:	b918      	cbnz	r0, 2529a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   25292:	4b1d      	ldr	r3, [pc, #116]	; (25308 <mutex_init_platform+0x7c>)
   25294:	481d      	ldr	r0, [pc, #116]	; (2530c <mutex_init_platform+0x80>)
   25296:	685b      	ldr	r3, [r3, #4]
   25298:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   2529a:	6863      	ldr	r3, [r4, #4]
   2529c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   252a0:	d02f      	beq.n	25302 <mutex_init_platform+0x76>
   252a2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   252a6:	d02c      	beq.n	25302 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   252a8:	4a19      	ldr	r2, [pc, #100]	; (25310 <mutex_init_platform+0x84>)
   252aa:	4293      	cmp	r3, r2
   252ac:	d119      	bne.n	252e2 <mutex_init_platform+0x56>
   252ae:	6823      	ldr	r3, [r4, #0]
   252b0:	bb03      	cbnz	r3, 252f4 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   252b2:	4818      	ldr	r0, [pc, #96]	; (25314 <mutex_init_platform+0x88>)
   252b4:	f04f 32ff 	mov.w	r2, #4294967295
   252b8:	f04f 33ff 	mov.w	r3, #4294967295
   252bc:	4621      	mov	r1, r4
   252be:	f00c fb93 	bl	319e8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   252c2:	b908      	cbnz	r0, 252c8 <mutex_init_platform+0x3c>
   252c4:	6823      	ldr	r3, [r4, #0]
   252c6:	b91b      	cbnz	r3, 252d0 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   252c8:	4b0f      	ldr	r3, [pc, #60]	; (25308 <mutex_init_platform+0x7c>)
   252ca:	4813      	ldr	r0, [pc, #76]	; (25318 <mutex_init_platform+0x8c>)
   252cc:	685b      	ldr	r3, [r3, #4]
   252ce:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   252d0:	6820      	ldr	r0, [r4, #0]
   252d2:	2214      	movs	r2, #20
   252d4:	2100      	movs	r1, #0
   252d6:	f013 fa7b 	bl	387d0 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   252da:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   252de:	6063      	str	r3, [r4, #4]
   252e0:	e008      	b.n	252f4 <mutex_init_platform+0x68>
    switch(flags){
   252e2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   252e6:	d80d      	bhi.n	25304 <mutex_init_platform+0x78>
   252e8:	2b3a      	cmp	r3, #58	; 0x3a
   252ea:	d003      	beq.n	252f4 <mutex_init_platform+0x68>
   252ec:	f640 62ba 	movw	r2, #3770	; 0xeba
   252f0:	4293      	cmp	r3, r2
   252f2:	d1de      	bne.n	252b2 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   252f4:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   252f6:	f016 f8e9 	bl	3b4cc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   252fa:	6863      	ldr	r3, [r4, #4]
   252fc:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   25300:	6063      	str	r3, [r4, #4]
}
   25302:	bd10      	pop	{r4, pc}
    switch(flags){
   25304:	4a05      	ldr	r2, [pc, #20]	; (2531c <mutex_init_platform+0x90>)
   25306:	e7f3      	b.n	252f0 <mutex_init_platform+0x64>
   25308:	200008dc 	.word	0x200008dc
   2530c:	0003cf3c 	.word	0x0003cf3c
   25310:	a95c5f2c 	.word	0xa95c5f2c
   25314:	20003880 	.word	0x20003880
   25318:	0003cf62 	.word	0x0003cf62
   2531c:	3a00003a 	.word	0x3a00003a

00025320 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   25320:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   25322:	4906      	ldr	r1, [pc, #24]	; (2533c <nrf_cc3xx_platform_mutex_init+0x1c>)
   25324:	4806      	ldr	r0, [pc, #24]	; (25340 <nrf_cc3xx_platform_mutex_init+0x20>)
   25326:	2340      	movs	r3, #64	; 0x40
   25328:	2214      	movs	r2, #20
   2532a:	f016 f8a4 	bl	3b476 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   2532e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   25332:	4904      	ldr	r1, [pc, #16]	; (25344 <nrf_cc3xx_platform_mutex_init+0x24>)
   25334:	4804      	ldr	r0, [pc, #16]	; (25348 <nrf_cc3xx_platform_mutex_init+0x28>)
   25336:	f010 b82f 	b.w	35398 <nrf_cc3xx_platform_set_mutexes>
   2533a:	bf00      	nop
   2533c:	20003380 	.word	0x20003380
   25340:	20003880 	.word	0x20003880
   25344:	0003beec 	.word	0x0003beec
   25348:	0003bf00 	.word	0x0003bf00

0002534c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2534c:	4901      	ldr	r1, [pc, #4]	; (25354 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2534e:	2210      	movs	r2, #16
	str	r2, [r1]
   25350:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   25352:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   25354:	e000ed10 	.word	0xe000ed10

00025358 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   25358:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2535a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2535c:	f380 8811 	msr	BASEPRI, r0
	isb
   25360:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   25364:	f3bf 8f4f 	dsb	sy
   25368:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2536a:	b662      	cpsie	i
	isb
   2536c:	f3bf 8f6f 	isb	sy

	bx	lr
   25370:	4770      	bx	lr
   25372:	bf00      	nop

00025374 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   25374:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   25376:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   25378:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   2537c:	f3bf 8f4f 	dsb	sy
   25380:	bf20      	wfe

	msr	BASEPRI, r0
   25382:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   25386:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   25388:	4770      	bx	lr
   2538a:	bf00      	nop

0002538c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2538c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2538e:	4605      	mov	r5, r0

	if (esf != NULL) {
   25390:	460c      	mov	r4, r1
   25392:	b1c9      	cbz	r1, 253c8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   25394:	688b      	ldr	r3, [r1, #8]
   25396:	9300      	str	r3, [sp, #0]
   25398:	e9d1 2300 	ldrd	r2, r3, [r1]
   2539c:	480e      	ldr	r0, [pc, #56]	; (253d8 <z_arm_fatal_error+0x4c>)
   2539e:	2145      	movs	r1, #69	; 0x45
   253a0:	f012 fe20 	bl	37fe4 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   253a4:	6963      	ldr	r3, [r4, #20]
   253a6:	9300      	str	r3, [sp, #0]
   253a8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   253ac:	480b      	ldr	r0, [pc, #44]	; (253dc <z_arm_fatal_error+0x50>)
   253ae:	2145      	movs	r1, #69	; 0x45
   253b0:	f012 fe18 	bl	37fe4 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   253b4:	69e2      	ldr	r2, [r4, #28]
   253b6:	480a      	ldr	r0, [pc, #40]	; (253e0 <z_arm_fatal_error+0x54>)
   253b8:	2145      	movs	r1, #69	; 0x45
   253ba:	f012 fe13 	bl	37fe4 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   253be:	69a2      	ldr	r2, [r4, #24]
   253c0:	4808      	ldr	r0, [pc, #32]	; (253e4 <z_arm_fatal_error+0x58>)
   253c2:	2145      	movs	r1, #69	; 0x45
   253c4:	f012 fe0e 	bl	37fe4 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   253c8:	4621      	mov	r1, r4
   253ca:	4628      	mov	r0, r5
}
   253cc:	b003      	add	sp, #12
   253ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   253d2:	f00c b8b9 	b.w	31548 <z_fatal_error>
   253d6:	bf00      	nop
   253d8:	0003cf8f 	.word	0x0003cf8f
   253dc:	0003cfc3 	.word	0x0003cfc3
   253e0:	0003cff7 	.word	0x0003cff7
   253e4:	0003d00b 	.word	0x0003d00b

000253e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   253e8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   253ea:	2800      	cmp	r0, #0
   253ec:	db07      	blt.n	253fe <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   253ee:	4a04      	ldr	r2, [pc, #16]	; (25400 <arch_irq_enable+0x18>)
   253f0:	0941      	lsrs	r1, r0, #5
   253f2:	2301      	movs	r3, #1
   253f4:	f000 001f 	and.w	r0, r0, #31
   253f8:	4083      	lsls	r3, r0
   253fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   253fe:	4770      	bx	lr
   25400:	e000e100 	.word	0xe000e100

00025404 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   25404:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   25406:	2800      	cmp	r0, #0
   25408:	db0c      	blt.n	25424 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2540a:	0943      	lsrs	r3, r0, #5
   2540c:	4906      	ldr	r1, [pc, #24]	; (25428 <arch_irq_disable+0x24>)
   2540e:	f000 001f 	and.w	r0, r0, #31
   25412:	3320      	adds	r3, #32
   25414:	2201      	movs	r2, #1
   25416:	4082      	lsls	r2, r0
   25418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2541c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25420:	f3bf 8f6f 	isb	sy
}
   25424:	4770      	bx	lr
   25426:	bf00      	nop
   25428:	e000e100 	.word	0xe000e100

0002542c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2542c:	4b05      	ldr	r3, [pc, #20]	; (25444 <arch_irq_is_enabled+0x18>)
   2542e:	0942      	lsrs	r2, r0, #5
   25430:	f000 001f 	and.w	r0, r0, #31
   25434:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   25438:	2301      	movs	r3, #1
   2543a:	fa03 f000 	lsl.w	r0, r3, r0
}
   2543e:	4010      	ands	r0, r2
   25440:	4770      	bx	lr
   25442:	bf00      	nop
   25444:	e000e100 	.word	0xe000e100

00025448 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   25448:	b508      	push	{r3, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   2544a:	07d3      	lsls	r3, r2, #31
   2544c:	d40b      	bmi.n	25466 <z_arm_irq_priority_set+0x1e>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   2544e:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   25450:	2907      	cmp	r1, #7
   25452:	d909      	bls.n	25468 <z_arm_irq_priority_set+0x20>
   25454:	490e      	ldr	r1, [pc, #56]	; (25490 <z_arm_irq_priority_set+0x48>)
   25456:	480f      	ldr	r0, [pc, #60]	; (25494 <z_arm_irq_priority_set+0x4c>)
   25458:	225b      	movs	r2, #91	; 0x5b
   2545a:	f012 fdb5 	bl	37fc8 <assert_print>
   2545e:	480c      	ldr	r0, [pc, #48]	; (25490 <z_arm_irq_priority_set+0x48>)
   25460:	215b      	movs	r1, #91	; 0x5b
   25462:	f012 fdaa 	bl	37fba <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   25466:	2100      	movs	r1, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   25468:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2546a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2546c:	bfac      	ite	ge
   2546e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25472:	4b09      	ldrlt	r3, [pc, #36]	; (25498 <z_arm_irq_priority_set+0x50>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25474:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25478:	bfb8      	it	lt
   2547a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2547e:	b2c9      	uxtb	r1, r1
   25480:	bfaa      	itet	ge
   25482:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25486:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25488:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   2548c:	bd08      	pop	{r3, pc}
   2548e:	bf00      	nop
   25490:	0003d03e 	.word	0x0003d03e
   25494:	0003c7f8 	.word	0x0003c7f8
   25498:	e000ed14 	.word	0xe000ed14

0002549c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2549c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2549e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   254a0:	4b04      	ldr	r3, [pc, #16]	; (254b4 <_arch_isr_direct_pm+0x18>)
   254a2:	699a      	ldr	r2, [r3, #24]
   254a4:	b11a      	cbz	r2, 254ae <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   254a6:	2200      	movs	r2, #0
   254a8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   254aa:	f016 f800 	bl	3b4ae <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   254ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   254b0:	bd08      	pop	{r3, pc}
   254b2:	bf00      	nop
   254b4:	2000413c 	.word	0x2000413c

000254b8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   254b8:	bf30      	wfi
    b z_SysNmiOnReset
   254ba:	f7ff bffd 	b.w	254b8 <z_SysNmiOnReset>
   254be:	bf00      	nop

000254c0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   254c0:	4a0b      	ldr	r2, [pc, #44]	; (254f0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   254c2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   254c4:	4b0b      	ldr	r3, [pc, #44]	; (254f4 <z_arm_prep_c+0x34>)
   254c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   254ca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   254cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   254d0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   254d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   254d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   254dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   254e0:	f00c f8ca 	bl	31678 <z_bss_zero>
	z_data_copy();
   254e4:	f00e fcb2 	bl	33e4c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   254e8:	f000 fb04 	bl	25af4 <z_arm_interrupt_init>
	z_cstart();
   254ec:	f00c f908 	bl	31700 <z_cstart>
   254f0:	0000c200 	.word	0x0000c200
   254f4:	e000ed00 	.word	0xe000ed00

000254f8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   254f8:	4a0a      	ldr	r2, [pc, #40]	; (25524 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   254fa:	490b      	ldr	r1, [pc, #44]	; (25528 <arch_swap+0x30>)
	_current->arch.basepri = key;
   254fc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   254fe:	6809      	ldr	r1, [r1, #0]
   25500:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   25504:	4909      	ldr	r1, [pc, #36]	; (2552c <arch_swap+0x34>)
	_current->arch.basepri = key;
   25506:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2550a:	684b      	ldr	r3, [r1, #4]
   2550c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   25510:	604b      	str	r3, [r1, #4]
   25512:	2300      	movs	r3, #0
   25514:	f383 8811 	msr	BASEPRI, r3
   25518:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2551c:	6893      	ldr	r3, [r2, #8]
}
   2551e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
   25522:	4770      	bx	lr
   25524:	2000413c 	.word	0x2000413c
   25528:	0003c4cc 	.word	0x0003c4cc
   2552c:	e000ed00 	.word	0xe000ed00

00025530 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   25530:	4913      	ldr	r1, [pc, #76]	; (25580 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   25532:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   25534:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   25538:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2553a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2553e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   25542:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   25544:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   25548:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2554c:	4f0d      	ldr	r7, [pc, #52]	; (25584 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2554e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   25552:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   25554:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   25556:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   25558:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    movs r3, #0
   2555c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2555e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   25562:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   25566:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   25568:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   2556a:	f000 fb5f 	bl	25c2c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   2556e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   25572:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   25576:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2557a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2557e:	4770      	bx	lr
    ldr r1, =_kernel
   25580:	2000413c 	.word	0x2000413c
    ldr v4, =_SCS_ICSR
   25584:	e000ed04 	.word	0xe000ed04

00025588 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   25588:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2558c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2558e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   25592:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   25596:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   25598:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2559c:	2902      	cmp	r1, #2
    beq _oops
   2559e:	d0ff      	beq.n	255a0 <_oops>

000255a0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   255a0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   255a2:	f013 f8ae 	bl	38702 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   255a6:	bd01      	pop	{r0, pc}

000255a8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   255a8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   255ac:	9b00      	ldr	r3, [sp, #0]
   255ae:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   255b2:	490a      	ldr	r1, [pc, #40]	; (255dc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   255b4:	9b01      	ldr	r3, [sp, #4]
   255b6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   255ba:	9b02      	ldr	r3, [sp, #8]
   255bc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   255c0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   255c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   255c8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   255cc:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   255d0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   255d2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   255d4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   255d6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   255da:	4770      	bx	lr
   255dc:	00037bed 	.word	0x00037bed

000255e0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   255e0:	4a09      	ldr	r2, [pc, #36]	; (25608 <z_check_thread_stack_fail+0x28>)
{
   255e2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   255e4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   255e6:	b170      	cbz	r0, 25606 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   255e8:	f113 0f16 	cmn.w	r3, #22
   255ec:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   255ee:	d005      	beq.n	255fc <z_check_thread_stack_fail+0x1c>
   255f0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   255f4:	429a      	cmp	r2, r3
   255f6:	d805      	bhi.n	25604 <z_check_thread_stack_fail+0x24>
   255f8:	4283      	cmp	r3, r0
   255fa:	d203      	bcs.n	25604 <z_check_thread_stack_fail+0x24>
		return 0;
   255fc:	4281      	cmp	r1, r0
   255fe:	bf28      	it	cs
   25600:	2000      	movcs	r0, #0
   25602:	4770      	bx	lr
   25604:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   25606:	4770      	bx	lr
   25608:	2000413c 	.word	0x2000413c

0002560c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   2560c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2560e:	4b09      	ldr	r3, [pc, #36]	; (25634 <arch_switch_to_main_thread+0x28>)
   25610:	6098      	str	r0, [r3, #8]
{
   25612:	460d      	mov	r5, r1
   25614:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   25616:	f000 fb09 	bl	25c2c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2561a:	4620      	mov	r0, r4
   2561c:	f385 8809 	msr	PSP, r5
   25620:	2100      	movs	r1, #0
   25622:	b663      	cpsie	if
   25624:	f381 8811 	msr	BASEPRI, r1
   25628:	f3bf 8f6f 	isb	sy
   2562c:	2200      	movs	r2, #0
   2562e:	2300      	movs	r3, #0
   25630:	f012 fadc 	bl	37bec <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   25634:	2000413c 	.word	0x2000413c

00025638 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   25638:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2563a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2563c:	4a0b      	ldr	r2, [pc, #44]	; (2566c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2563e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   25640:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   25642:	bf1e      	ittt	ne
	movne	r1, #0
   25644:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   25646:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   25648:	f015 ff31 	blne	3b4ae <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2564c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2564e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   25652:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   25656:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2565a:	4905      	ldr	r1, [pc, #20]	; (25670 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2565c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2565e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   25660:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   25662:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   25666:	4903      	ldr	r1, [pc, #12]	; (25674 <_isr_wrapper+0x3c>)
	bx r1
   25668:	4708      	bx	r1
   2566a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2566c:	2000413c 	.word	0x2000413c
	ldr r1, =_sw_isr_table
   25670:	0003ba6c 	.word	0x0003ba6c
	ldr r1, =z_arm_int_exit
   25674:	00025679 	.word	0x00025679

00025678 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   25678:	4b04      	ldr	r3, [pc, #16]	; (2568c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2567a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2567c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2567e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   25680:	d003      	beq.n	2568a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   25682:	4903      	ldr	r1, [pc, #12]	; (25690 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   25684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   25688:	600a      	str	r2, [r1, #0]

0002568a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2568a:	4770      	bx	lr
	ldr r3, =_kernel
   2568c:	2000413c 	.word	0x2000413c
	ldr r1, =_SCS_ICSR
   25690:	e000ed04 	.word	0xe000ed04

00025694 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   25694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   25698:	4c38      	ldr	r4, [pc, #224]	; (2577c <mem_manage_fault+0xe8>)
{
   2569a:	4607      	mov	r7, r0
   2569c:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   2569e:	4838      	ldr	r0, [pc, #224]	; (25780 <mem_manage_fault+0xec>)
   256a0:	2145      	movs	r1, #69	; 0x45
{
   256a2:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   256a4:	f012 fc9e 	bl	37fe4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   256a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   256aa:	06d8      	lsls	r0, r3, #27
   256ac:	d503      	bpl.n	256b6 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   256ae:	4835      	ldr	r0, [pc, #212]	; (25784 <mem_manage_fault+0xf0>)
   256b0:	2145      	movs	r1, #69	; 0x45
   256b2:	f012 fc97 	bl	37fe4 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   256b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   256b8:	0719      	lsls	r1, r3, #28
   256ba:	d503      	bpl.n	256c4 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   256bc:	4832      	ldr	r0, [pc, #200]	; (25788 <mem_manage_fault+0xf4>)
   256be:	2145      	movs	r1, #69	; 0x45
   256c0:	f012 fc90 	bl	37fe4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   256c4:	4c2d      	ldr	r4, [pc, #180]	; (2577c <mem_manage_fault+0xe8>)
   256c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   256c8:	079a      	lsls	r2, r3, #30
   256ca:	d432      	bmi.n	25732 <mem_manage_fault+0x9e>
	uint32_t mmfar = -EINVAL;
   256cc:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   256d0:	4c2a      	ldr	r4, [pc, #168]	; (2577c <mem_manage_fault+0xe8>)
   256d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   256d4:	07d8      	lsls	r0, r3, #31
   256d6:	d503      	bpl.n	256e0 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   256d8:	482c      	ldr	r0, [pc, #176]	; (2578c <mem_manage_fault+0xf8>)
   256da:	2145      	movs	r1, #69	; 0x45
   256dc:	f012 fc82 	bl	37fe4 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   256e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   256e2:	0699      	lsls	r1, r3, #26
   256e4:	d503      	bpl.n	256ee <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   256e6:	482a      	ldr	r0, [pc, #168]	; (25790 <mem_manage_fault+0xfc>)
   256e8:	2145      	movs	r1, #69	; 0x45
   256ea:	f012 fc7b 	bl	37fe4 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   256ee:	4c23      	ldr	r4, [pc, #140]	; (2577c <mem_manage_fault+0xe8>)
   256f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   256f2:	06da      	lsls	r2, r3, #27
   256f4:	d402      	bmi.n	256fc <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   256f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   256f8:	079b      	lsls	r3, r3, #30
   256fa:	d53d      	bpl.n	25778 <mem_manage_fault+0xe4>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   256fc:	6863      	ldr	r3, [r4, #4]
   256fe:	0518      	lsls	r0, r3, #20
   25700:	d53a      	bpl.n	25778 <mem_manage_fault+0xe4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   25702:	4639      	mov	r1, r7
   25704:	4630      	mov	r0, r6
   25706:	f7ff ff6b 	bl	255e0 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   2570a:	b338      	cbz	r0, 2575c <mem_manage_fault+0xc8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   2570c:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   25710:	2002      	movs	r0, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   25712:	4b1a      	ldr	r3, [pc, #104]	; (2577c <mem_manage_fault+0xe8>)
   25714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   25716:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   25718:	bf42      	ittt	mi
   2571a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   2571c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   25720:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   25722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   25724:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   25728:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   2572a:	2300      	movs	r3, #0
   2572c:	702b      	strb	r3, [r5, #0]

	return reason;
}
   2572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   25732:	4818      	ldr	r0, [pc, #96]	; (25794 <mem_manage_fault+0x100>)
   25734:	2145      	movs	r1, #69	; 0x45
   25736:	f012 fc55 	bl	37fe4 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   2573a:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2573c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2573e:	061b      	lsls	r3, r3, #24
   25740:	d5c4      	bpl.n	256cc <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   25742:	4815      	ldr	r0, [pc, #84]	; (25798 <mem_manage_fault+0x104>)
   25744:	4632      	mov	r2, r6
   25746:	2145      	movs	r1, #69	; 0x45
   25748:	f012 fc4c 	bl	37fe4 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   2574c:	f1b8 0f00 	cmp.w	r8, #0
   25750:	d0be      	beq.n	256d0 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   25752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   25758:	62a3      	str	r3, [r4, #40]	; 0x28
   2575a:	e7b9      	b.n	256d0 <mem_manage_fault+0x3c>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   2575c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2575e:	06d9      	lsls	r1, r3, #27
   25760:	d50a      	bpl.n	25778 <mem_manage_fault+0xe4>
   25762:	490e      	ldr	r1, [pc, #56]	; (2579c <mem_manage_fault+0x108>)
   25764:	480e      	ldr	r0, [pc, #56]	; (257a0 <mem_manage_fault+0x10c>)
   25766:	f44f 72ab 	mov.w	r2, #342	; 0x156
   2576a:	f012 fc2d 	bl	37fc8 <assert_print>
   2576e:	480b      	ldr	r0, [pc, #44]	; (2579c <mem_manage_fault+0x108>)
   25770:	f44f 71ab 	mov.w	r1, #342	; 0x156
   25774:	f012 fc21 	bl	37fba <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   25778:	2000      	movs	r0, #0
   2577a:	e7ca      	b.n	25712 <mem_manage_fault+0x7e>
   2577c:	e000ed00 	.word	0xe000ed00
   25780:	0003d074 	.word	0x0003d074
   25784:	0003d08f 	.word	0x0003d08f
   25788:	0003d0c7 	.word	0x0003d0c7
   2578c:	0003d117 	.word	0x0003d117
   25790:	0003d13b 	.word	0x0003d13b
   25794:	0003d0df 	.word	0x0003d0df
   25798:	0003d0fc 	.word	0x0003d0fc
   2579c:	0003d16f 	.word	0x0003d16f
   257a0:	0003c7f8 	.word	0x0003c7f8

000257a4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   257a4:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   257a6:	4c1d      	ldr	r4, [pc, #116]	; (2581c <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   257a8:	481d      	ldr	r0, [pc, #116]	; (25820 <usage_fault.constprop.0+0x7c>)
   257aa:	2145      	movs	r1, #69	; 0x45
   257ac:	f012 fc1a 	bl	37fe4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   257b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   257b2:	019b      	lsls	r3, r3, #6
   257b4:	d503      	bpl.n	257be <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   257b6:	481b      	ldr	r0, [pc, #108]	; (25824 <usage_fault.constprop.0+0x80>)
   257b8:	2145      	movs	r1, #69	; 0x45
   257ba:	f012 fc13 	bl	37fe4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   257be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   257c0:	01dc      	lsls	r4, r3, #7
   257c2:	d503      	bpl.n	257cc <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   257c4:	4818      	ldr	r0, [pc, #96]	; (25828 <usage_fault.constprop.0+0x84>)
   257c6:	2145      	movs	r1, #69	; 0x45
   257c8:	f012 fc0c 	bl	37fe4 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   257cc:	4c13      	ldr	r4, [pc, #76]	; (2581c <usage_fault.constprop.0+0x78>)
   257ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   257d0:	0318      	lsls	r0, r3, #12
   257d2:	d503      	bpl.n	257dc <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   257d4:	4815      	ldr	r0, [pc, #84]	; (2582c <usage_fault.constprop.0+0x88>)
   257d6:	2145      	movs	r1, #69	; 0x45
   257d8:	f012 fc04 	bl	37fe4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   257dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   257de:	0359      	lsls	r1, r3, #13
   257e0:	d503      	bpl.n	257ea <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   257e2:	4813      	ldr	r0, [pc, #76]	; (25830 <usage_fault.constprop.0+0x8c>)
   257e4:	2145      	movs	r1, #69	; 0x45
   257e6:	f012 fbfd 	bl	37fe4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   257ea:	4c0c      	ldr	r4, [pc, #48]	; (2581c <usage_fault.constprop.0+0x78>)
   257ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   257ee:	039a      	lsls	r2, r3, #14
   257f0:	d503      	bpl.n	257fa <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   257f2:	4810      	ldr	r0, [pc, #64]	; (25834 <usage_fault.constprop.0+0x90>)
   257f4:	2145      	movs	r1, #69	; 0x45
   257f6:	f012 fbf5 	bl	37fe4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   257fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   257fc:	03db      	lsls	r3, r3, #15
   257fe:	d503      	bpl.n	25808 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   25800:	480d      	ldr	r0, [pc, #52]	; (25838 <usage_fault.constprop.0+0x94>)
   25802:	2145      	movs	r1, #69	; 0x45
   25804:	f012 fbee 	bl	37fe4 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   25808:	4a04      	ldr	r2, [pc, #16]	; (2581c <usage_fault.constprop.0+0x78>)
   2580a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2580c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   25810:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   25814:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   25816:	2000      	movs	r0, #0
   25818:	bd10      	pop	{r4, pc}
   2581a:	bf00      	nop
   2581c:	e000ed00 	.word	0xe000ed00
   25820:	0003d1a9 	.word	0x0003d1a9
   25824:	0003d1c6 	.word	0x0003d1c6
   25828:	0003d1de 	.word	0x0003d1de
   2582c:	0003d1fd 	.word	0x0003d1fd
   25830:	0003d220 	.word	0x0003d220
   25834:	0003d24a 	.word	0x0003d24a
   25838:	0003d269 	.word	0x0003d269

0002583c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2583c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2583e:	4c23      	ldr	r4, [pc, #140]	; (258cc <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   25840:	4606      	mov	r6, r0
   25842:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   25844:	4822      	ldr	r0, [pc, #136]	; (258d0 <bus_fault.constprop.0+0x94>)
   25846:	2145      	movs	r1, #69	; 0x45
   25848:	f012 fbcc 	bl	37fe4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2584c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2584e:	04d9      	lsls	r1, r3, #19
   25850:	d503      	bpl.n	2585a <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   25852:	4820      	ldr	r0, [pc, #128]	; (258d4 <bus_fault.constprop.0+0x98>)
   25854:	2145      	movs	r1, #69	; 0x45
   25856:	f012 fbc5 	bl	37fe4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2585a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2585c:	051a      	lsls	r2, r3, #20
   2585e:	d503      	bpl.n	25868 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   25860:	481d      	ldr	r0, [pc, #116]	; (258d8 <bus_fault.constprop.0+0x9c>)
   25862:	2145      	movs	r1, #69	; 0x45
   25864:	f012 fbbe 	bl	37fe4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   25868:	4c18      	ldr	r4, [pc, #96]	; (258cc <bus_fault.constprop.0+0x90>)
   2586a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2586c:	059b      	lsls	r3, r3, #22
   2586e:	d510      	bpl.n	25892 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   25870:	481a      	ldr	r0, [pc, #104]	; (258dc <bus_fault.constprop.0+0xa0>)
   25872:	2145      	movs	r1, #69	; 0x45
   25874:	f012 fbb6 	bl	37fe4 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   25878:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2587a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2587c:	0418      	lsls	r0, r3, #16
   2587e:	d508      	bpl.n	25892 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   25880:	4817      	ldr	r0, [pc, #92]	; (258e0 <bus_fault.constprop.0+0xa4>)
   25882:	2145      	movs	r1, #69	; 0x45
   25884:	f012 fbae 	bl	37fe4 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   25888:	b11e      	cbz	r6, 25892 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2588a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2588c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   25890:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   25892:	4c0e      	ldr	r4, [pc, #56]	; (258cc <bus_fault.constprop.0+0x90>)
   25894:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25896:	0559      	lsls	r1, r3, #21
   25898:	d503      	bpl.n	258a2 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   2589a:	4812      	ldr	r0, [pc, #72]	; (258e4 <bus_fault.constprop.0+0xa8>)
   2589c:	2145      	movs	r1, #69	; 0x45
   2589e:	f012 fba1 	bl	37fe4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   258a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   258a4:	05da      	lsls	r2, r3, #23
   258a6:	d50b      	bpl.n	258c0 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   258a8:	480f      	ldr	r0, [pc, #60]	; (258e8 <bus_fault.constprop.0+0xac>)
   258aa:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   258ac:	f012 fb9a 	bl	37fe4 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   258b0:	4a06      	ldr	r2, [pc, #24]	; (258cc <bus_fault.constprop.0+0x90>)
   258b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   258b4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   258b6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   258ba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   258bc:	7028      	strb	r0, [r5, #0]
}
   258be:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   258c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   258c2:	049b      	lsls	r3, r3, #18
   258c4:	d5f4      	bpl.n	258b0 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   258c6:	4809      	ldr	r0, [pc, #36]	; (258ec <bus_fault.constprop.0+0xb0>)
   258c8:	2145      	movs	r1, #69	; 0x45
   258ca:	e7ef      	b.n	258ac <bus_fault.constprop.0+0x70>
   258cc:	e000ed00 	.word	0xe000ed00
   258d0:	0003d299 	.word	0x0003d299
   258d4:	0003d2b4 	.word	0x0003d2b4
   258d8:	0003d0c7 	.word	0x0003d0c7
   258dc:	0003d2ca 	.word	0x0003d2ca
   258e0:	0003d2e8 	.word	0x0003d2e8
   258e4:	0003d302 	.word	0x0003d302
   258e8:	0003d322 	.word	0x0003d322
   258ec:	0003d13b 	.word	0x0003d13b

000258f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   258f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   258f2:	4b6a      	ldr	r3, [pc, #424]	; (25a9c <z_arm_fault+0x1ac>)
{
   258f4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   258f6:	6858      	ldr	r0, [r3, #4]
{
   258f8:	b08a      	sub	sp, #40	; 0x28
   258fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
   258fe:	2600      	movs	r6, #0
   25900:	f386 8811 	msr	BASEPRI, r6
   25904:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   25908:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   2590c:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   25910:	d107      	bne.n	25922 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   25912:	f002 040c 	and.w	r4, r2, #12
   25916:	2c08      	cmp	r4, #8
   25918:	d10e      	bne.n	25938 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   2591a:	4861      	ldr	r0, [pc, #388]	; (25aa0 <z_arm_fault+0x1b0>)
   2591c:	2145      	movs	r1, #69	; 0x45
   2591e:	f012 fb61 	bl	37fe4 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   25922:	4960      	ldr	r1, [pc, #384]	; (25aa4 <z_arm_fault+0x1b4>)
   25924:	4860      	ldr	r0, [pc, #384]	; (25aa8 <z_arm_fault+0x1b8>)
   25926:	f44f 6284 	mov.w	r2, #1056	; 0x420
   2592a:	f012 fb4d 	bl	37fc8 <assert_print>
   2592e:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   25932:	485c      	ldr	r0, [pc, #368]	; (25aa4 <z_arm_fault+0x1b4>)
   25934:	f012 fb41 	bl	37fba <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   25938:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2593a:	bf4c      	ite	mi
   2593c:	460d      	movmi	r5, r1
			*nested_exc = true;
   2593e:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   25940:	2d00      	cmp	r5, #0
   25942:	d0ee      	beq.n	25922 <z_arm_fault+0x32>
	*recoverable = false;
   25944:	2400      	movs	r4, #0
	switch (fault) {
   25946:	1eda      	subs	r2, r3, #3
	*recoverable = false;
   25948:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   2594c:	2a09      	cmp	r2, #9
   2594e:	f200 8093 	bhi.w	25a78 <z_arm_fault+0x188>
   25952:	e8df f002 	tbb	[pc, r2]
   25956:	8605      	.short	0x8605
   25958:	9191718a 	.word	0x9191718a
   2595c:	8e919191 	.word	0x8e919191
	PR_FAULT_INFO("***** HARD FAULT *****");
   25960:	4852      	ldr	r0, [pc, #328]	; (25aac <z_arm_fault+0x1bc>)
   25962:	2145      	movs	r1, #69	; 0x45
   25964:	f012 fb3e 	bl	37fe4 <z_log_minimal_printk>
	*recoverable = false;
   25968:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2596c:	4c4b      	ldr	r4, [pc, #300]	; (25a9c <z_arm_fault+0x1ac>)
   2596e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25970:	079a      	lsls	r2, r3, #30
   25972:	d505      	bpl.n	25980 <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
   25974:	484e      	ldr	r0, [pc, #312]	; (25ab0 <z_arm_fault+0x1c0>)
   25976:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   25978:	f012 fb34 	bl	37fe4 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2597c:	2400      	movs	r4, #0
   2597e:	e029      	b.n	259d4 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   25980:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25982:	2b00      	cmp	r3, #0
   25984:	da02      	bge.n	2598c <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
   25986:	484b      	ldr	r0, [pc, #300]	; (25ab4 <z_arm_fault+0x1c4>)
   25988:	2145      	movs	r1, #69	; 0x45
   2598a:	e7f5      	b.n	25978 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2598c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2598e:	005b      	lsls	r3, r3, #1
   25990:	d55e      	bpl.n	25a50 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   25992:	4849      	ldr	r0, [pc, #292]	; (25ab8 <z_arm_fault+0x1c8>)
   25994:	2145      	movs	r1, #69	; 0x45
   25996:	f012 fb25 	bl	37fe4 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2599a:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   2599c:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2599e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   259a2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   259a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   259a8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   259ac:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   259ae:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   259b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   259b6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   259b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   259bc:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   259c0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   259c4:	429a      	cmp	r2, r3
   259c6:	d11e      	bne.n	25a06 <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   259c8:	682a      	ldr	r2, [r5, #0]
   259ca:	483c      	ldr	r0, [pc, #240]	; (25abc <z_arm_fault+0x1cc>)
   259cc:	2145      	movs	r1, #69	; 0x45
   259ce:	f012 fb09 	bl	37fe4 <z_log_minimal_printk>
			reason = esf->basic.r0;
   259d2:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   259d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   259d8:	b99b      	cbnz	r3, 25a02 <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   259da:	2220      	movs	r2, #32
   259dc:	4629      	mov	r1, r5
   259de:	a802      	add	r0, sp, #8
   259e0:	f012 feeb 	bl	387ba <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   259e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   259e6:	2e00      	cmp	r6, #0
   259e8:	d052      	beq.n	25a90 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   259ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
   259ee:	b922      	cbnz	r2, 259fa <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   259f0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   259f4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   259f8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   259fa:	a902      	add	r1, sp, #8
   259fc:	4620      	mov	r0, r4
   259fe:	f7ff fcc5 	bl	2538c <z_arm_fatal_error>
}
   25a02:	b00a      	add	sp, #40	; 0x28
   25a04:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   25a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25a08:	b2db      	uxtb	r3, r3
   25a0a:	b13b      	cbz	r3, 25a1c <z_arm_fault+0x12c>
			reason = mem_manage_fault(esf, 1, recoverable);
   25a0c:	f10d 0207 	add.w	r2, sp, #7
   25a10:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   25a12:	4628      	mov	r0, r5
   25a14:	f7ff fe3e 	bl	25694 <mem_manage_fault>
   25a18:	4604      	mov	r4, r0
		break;
   25a1a:	e7db      	b.n	259d4 <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   25a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25a1e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   25a22:	d005      	beq.n	25a30 <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   25a24:	f10d 0107 	add.w	r1, sp, #7
   25a28:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   25a2a:	f7ff ff07 	bl	2583c <bus_fault.constprop.0>
   25a2e:	e7f3      	b.n	25a18 <z_arm_fault+0x128>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   25a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   25a36:	d302      	bcc.n	25a3e <z_arm_fault+0x14e>
		reason = usage_fault(esf);
   25a38:	f7ff feb4 	bl	257a4 <usage_fault.constprop.0>
   25a3c:	e7ec      	b.n	25a18 <z_arm_fault+0x128>
			__ASSERT(0,
   25a3e:	4919      	ldr	r1, [pc, #100]	; (25aa4 <z_arm_fault+0x1b4>)
   25a40:	4819      	ldr	r0, [pc, #100]	; (25aa8 <z_arm_fault+0x1b8>)
   25a42:	f240 22f2 	movw	r2, #754	; 0x2f2
   25a46:	f012 fabf 	bl	37fc8 <assert_print>
   25a4a:	f240 21f2 	movw	r1, #754	; 0x2f2
   25a4e:	e770      	b.n	25932 <z_arm_fault+0x42>
		__ASSERT(0,
   25a50:	4914      	ldr	r1, [pc, #80]	; (25aa4 <z_arm_fault+0x1b4>)
   25a52:	4815      	ldr	r0, [pc, #84]	; (25aa8 <z_arm_fault+0x1b8>)
   25a54:	f240 22f6 	movw	r2, #758	; 0x2f6
   25a58:	f012 fab6 	bl	37fc8 <assert_print>
   25a5c:	f240 21f6 	movw	r1, #758	; 0x2f6
   25a60:	e767      	b.n	25932 <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   25a62:	f10d 0207 	add.w	r2, sp, #7
   25a66:	2100      	movs	r1, #0
   25a68:	e7d3      	b.n	25a12 <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   25a6a:	f10d 0107 	add.w	r1, sp, #7
   25a6e:	2000      	movs	r0, #0
   25a70:	e7db      	b.n	25a2a <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   25a72:	4813      	ldr	r0, [pc, #76]	; (25ac0 <z_arm_fault+0x1d0>)
   25a74:	2145      	movs	r1, #69	; 0x45
   25a76:	e77f      	b.n	25978 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
   25a78:	4912      	ldr	r1, [pc, #72]	; (25ac4 <z_arm_fault+0x1d4>)
   25a7a:	4a13      	ldr	r2, [pc, #76]	; (25ac8 <z_arm_fault+0x1d8>)
   25a7c:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   25a80:	bf08      	it	eq
   25a82:	460a      	moveq	r2, r1
   25a84:	4811      	ldr	r0, [pc, #68]	; (25acc <z_arm_fault+0x1dc>)
   25a86:	3b10      	subs	r3, #16
   25a88:	2145      	movs	r1, #69	; 0x45
   25a8a:	f012 faab 	bl	37fe4 <z_log_minimal_printk>
}
   25a8e:	e775      	b.n	2597c <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   25a90:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   25a94:	f023 0301 	bic.w	r3, r3, #1
   25a98:	e7ae      	b.n	259f8 <z_arm_fault+0x108>
   25a9a:	bf00      	nop
   25a9c:	e000ed00 	.word	0xe000ed00
   25aa0:	0003d36d 	.word	0x0003d36d
   25aa4:	0003d16f 	.word	0x0003d16f
   25aa8:	0003c7f8 	.word	0x0003c7f8
   25aac:	0003d39d 	.word	0x0003d39d
   25ab0:	0003d3b9 	.word	0x0003d3b9
   25ab4:	0003d3df 	.word	0x0003d3df
   25ab8:	0003d3f2 	.word	0x0003d3f2
   25abc:	0003d416 	.word	0x0003d416
   25ac0:	0003d437 	.word	0x0003d437
   25ac4:	0003d33f 	.word	0x0003d33f
   25ac8:	0003d354 	.word	0x0003d354
   25acc:	0003d460 	.word	0x0003d460

00025ad0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   25ad0:	4a02      	ldr	r2, [pc, #8]	; (25adc <z_arm_fault_init+0xc>)
   25ad2:	6953      	ldr	r3, [r2, #20]
   25ad4:	f043 0310 	orr.w	r3, r3, #16
   25ad8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   25ada:	4770      	bx	lr
   25adc:	e000ed00 	.word	0xe000ed00

00025ae0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   25ae0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   25ae4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   25ae8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   25aea:	4672      	mov	r2, lr
	bl z_arm_fault
   25aec:	f7ff ff00 	bl	258f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   25af0:	bd01      	pop	{r0, pc}
   25af2:	bf00      	nop

00025af4 <z_arm_interrupt_init>:
   25af4:	4804      	ldr	r0, [pc, #16]	; (25b08 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   25af6:	2300      	movs	r3, #0
   25af8:	2140      	movs	r1, #64	; 0x40
   25afa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   25afc:	3301      	adds	r3, #1
   25afe:	2b30      	cmp	r3, #48	; 0x30
   25b00:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   25b04:	d1f9      	bne.n	25afa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   25b06:	4770      	bx	lr
   25b08:	e000e100 	.word	0xe000e100

00025b0c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   25b0c:	2000      	movs	r0, #0
    msr CONTROL, r0
   25b0e:	f380 8814 	msr	CONTROL, r0
    isb
   25b12:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   25b16:	f7fe ff5d 	bl	249d4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   25b1a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   25b1c:	490d      	ldr	r1, [pc, #52]	; (25b54 <__start+0x48>)
    str r0, [r1]
   25b1e:	6008      	str	r0, [r1, #0]
    dsb
   25b20:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   25b24:	480c      	ldr	r0, [pc, #48]	; (25b58 <__start+0x4c>)
    msr msp, r0
   25b26:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   25b2a:	f000 f82b 	bl	25b84 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   25b2e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   25b30:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   25b34:	4809      	ldr	r0, [pc, #36]	; (25b5c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   25b36:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   25b3a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   25b3c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   25b40:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   25b44:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   25b46:	4308      	orrs	r0, r1
    msr CONTROL, r0
   25b48:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   25b4c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   25b50:	f7ff fcb6 	bl	254c0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   25b54:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   25b58:	20009d40 	.word	0x20009d40
    ldr r0, =z_interrupt_stacks
   25b5c:	20008380 	.word	0x20008380

00025b60 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   25b60:	4907      	ldr	r1, [pc, #28]	; (25b80 <z_arm_clear_arm_mpu_config+0x20>)
   25b62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   25b66:	2300      	movs	r3, #0
	int num_regions =
   25b68:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   25b6c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   25b6e:	4293      	cmp	r3, r2
   25b70:	db00      	blt.n	25b74 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   25b72:	4770      	bx	lr
  MPU->RNR = rnr;
   25b74:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   25b78:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   25b7c:	3301      	adds	r3, #1
   25b7e:	e7f6      	b.n	25b6e <z_arm_clear_arm_mpu_config+0xe>
   25b80:	e000ed00 	.word	0xe000ed00

00025b84 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   25b84:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   25b86:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   25b88:	2300      	movs	r3, #0
   25b8a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   25b8e:	f7ff ffe7 	bl	25b60 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   25b92:	4b14      	ldr	r3, [pc, #80]	; (25be4 <z_arm_init_arch_hw_at_boot+0x60>)
   25b94:	f04f 32ff 	mov.w	r2, #4294967295
   25b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   25b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   25ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   25ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   25ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   25bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   25bb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   25bb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   25bb8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   25bbc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   25bc0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   25bc4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   25bc8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   25bcc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   25bd0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   25bd4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   25bd8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   25bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25bde:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   25be2:	bd08      	pop	{r3, pc}
   25be4:	e000e100 	.word	0xe000e100

00025be8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   25be8:	4b08      	ldr	r3, [pc, #32]	; (25c0c <z_impl_k_thread_abort+0x24>)
   25bea:	689b      	ldr	r3, [r3, #8]
   25bec:	4283      	cmp	r3, r0
   25bee:	d10b      	bne.n	25c08 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25bf0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   25bf4:	b143      	cbz	r3, 25c08 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   25bf6:	4b06      	ldr	r3, [pc, #24]	; (25c10 <z_impl_k_thread_abort+0x28>)
   25bf8:	685a      	ldr	r2, [r3, #4]
   25bfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   25bfe:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   25c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   25c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   25c06:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   25c08:	f00e b81c 	b.w	33c44 <z_thread_abort>
   25c0c:	2000413c 	.word	0x2000413c
   25c10:	e000ed00 	.word	0xe000ed00

00025c14 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   25c14:	4b02      	ldr	r3, [pc, #8]	; (25c20 <z_arm_configure_static_mpu_regions+0xc>)
   25c16:	4a03      	ldr	r2, [pc, #12]	; (25c24 <z_arm_configure_static_mpu_regions+0x10>)
   25c18:	4803      	ldr	r0, [pc, #12]	; (25c28 <z_arm_configure_static_mpu_regions+0x14>)
   25c1a:	2101      	movs	r1, #1
   25c1c:	f000 b87c 	b.w	25d18 <arm_core_mpu_configure_static_mpu_regions>
   25c20:	20040000 	.word	0x20040000
   25c24:	20000000 	.word	0x20000000
   25c28:	0003bf10 	.word	0x0003bf10

00025c2c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   25c2c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   25c2e:	4b05      	ldr	r3, [pc, #20]	; (25c44 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   25c30:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   25c32:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   25c34:	4a04      	ldr	r2, [pc, #16]	; (25c48 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   25c36:	2140      	movs	r1, #64	; 0x40
   25c38:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   25c3c:	4618      	mov	r0, r3
   25c3e:	2101      	movs	r1, #1
   25c40:	f000 b886 	b.w	25d50 <arm_core_mpu_configure_dynamic_mpu_regions>
   25c44:	200038a0 	.word	0x200038a0
   25c48:	150b0000 	.word	0x150b0000

00025c4c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   25c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   25c4e:	4e24      	ldr	r6, [pc, #144]	; (25ce0 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   25c50:	2500      	movs	r5, #0
   25c52:	428d      	cmp	r5, r1
   25c54:	da0f      	bge.n	25c76 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   25c56:	6844      	ldr	r4, [r0, #4]
   25c58:	2c00      	cmp	r4, #0
   25c5a:	d03e      	beq.n	25cda <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   25c5c:	b19b      	cbz	r3, 25c86 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   25c5e:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   25c62:	ea14 0f0c 	tst.w	r4, ip
   25c66:	d008      	beq.n	25c7a <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   25c68:	481e      	ldr	r0, [pc, #120]	; (25ce4 <mpu_configure_regions+0x98>)
   25c6a:	462a      	mov	r2, r5
   25c6c:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   25c6e:	f012 f9b9 	bl	37fe4 <z_log_minimal_printk>
			return -EINVAL;
   25c72:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   25c76:	4610      	mov	r0, r2
   25c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   25c7a:	2c1f      	cmp	r4, #31
   25c7c:	d9f4      	bls.n	25c68 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
   25c7e:	6807      	ldr	r7, [r0, #0]
		&&
   25c80:	ea1c 0f07 	tst.w	ip, r7
   25c84:	d1f0      	bne.n	25c68 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   25c86:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   25c88:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   25c8a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   25c8e:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   25c92:	d910      	bls.n	25cb6 <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
   25c94:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   25c98:	d80f      	bhi.n	25cba <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   25c9a:	3c01      	subs	r4, #1
   25c9c:	fab4 f484 	clz	r4, r4
   25ca0:	f1c4 041f 	rsb	r4, r4, #31
   25ca4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   25ca6:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   25caa:	ea4c 0c04 	orr.w	ip, ip, r4
   25cae:	d906      	bls.n	25cbe <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   25cb0:	480d      	ldr	r0, [pc, #52]	; (25ce8 <mpu_configure_regions+0x9c>)
   25cb2:	2145      	movs	r1, #69	; 0x45
   25cb4:	e7db      	b.n	25c6e <mpu_configure_regions+0x22>
		return REGION_32B;
   25cb6:	2408      	movs	r4, #8
   25cb8:	e7f5      	b.n	25ca6 <mpu_configure_regions+0x5a>
		return REGION_4G;
   25cba:	243e      	movs	r4, #62	; 0x3e
   25cbc:	e7f3      	b.n	25ca6 <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   25cbe:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   25cc2:	4314      	orrs	r4, r2
   25cc4:	f044 0410 	orr.w	r4, r4, #16
   25cc8:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   25ccc:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   25cd0:	f04c 0401 	orr.w	r4, ip, #1
   25cd4:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   25cd8:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   25cda:	3501      	adds	r5, #1
   25cdc:	300c      	adds	r0, #12
   25cde:	e7b8      	b.n	25c52 <mpu_configure_regions+0x6>
   25ce0:	e000ed00 	.word	0xe000ed00
   25ce4:	0003d47c 	.word	0x0003d47c
   25ce8:	0003d4a4 	.word	0x0003d4a4

00025cec <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   25cec:	4b04      	ldr	r3, [pc, #16]	; (25d00 <arm_core_mpu_enable+0x14>)
   25cee:	2205      	movs	r2, #5
   25cf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   25cf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25cf8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   25cfc:	4770      	bx	lr
   25cfe:	bf00      	nop
   25d00:	e000ed00 	.word	0xe000ed00

00025d04 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   25d04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   25d08:	4b02      	ldr	r3, [pc, #8]	; (25d14 <arm_core_mpu_disable+0x10>)
   25d0a:	2200      	movs	r2, #0
   25d0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   25d10:	4770      	bx	lr
   25d12:	bf00      	nop
   25d14:	e000ed00 	.word	0xe000ed00

00025d18 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   25d18:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   25d1a:	4c0a      	ldr	r4, [pc, #40]	; (25d44 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   25d1c:	2301      	movs	r3, #1
   25d1e:	7822      	ldrb	r2, [r4, #0]
   25d20:	f7ff ff94 	bl	25c4c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   25d24:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   25d26:	3016      	adds	r0, #22
   25d28:	d10a      	bne.n	25d40 <arm_core_mpu_configure_static_mpu_regions+0x28>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   25d2a:	4907      	ldr	r1, [pc, #28]	; (25d48 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   25d2c:	4807      	ldr	r0, [pc, #28]	; (25d4c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   25d2e:	f44f 728d 	mov.w	r2, #282	; 0x11a
   25d32:	f012 f949 	bl	37fc8 <assert_print>
   25d36:	4804      	ldr	r0, [pc, #16]	; (25d48 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   25d38:	f44f 718d 	mov.w	r1, #282	; 0x11a
   25d3c:	f012 f93d 	bl	37fba <assert_post_action>
			regions_num);
	}
}
   25d40:	bd10      	pop	{r4, pc}
   25d42:	bf00      	nop
   25d44:	20004d77 	.word	0x20004d77
   25d48:	0003d4cf 	.word	0x0003d4cf
   25d4c:	0003c7f8 	.word	0x0003c7f8

00025d50 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   25d50:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   25d52:	4a0f      	ldr	r2, [pc, #60]	; (25d90 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   25d54:	2300      	movs	r3, #0
   25d56:	7812      	ldrb	r2, [r2, #0]
   25d58:	f7ff ff78 	bl	25c4c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   25d5c:	f110 0f16 	cmn.w	r0, #22
   25d60:	d004      	beq.n	25d6c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
   25d62:	4b0c      	ldr	r3, [pc, #48]	; (25d94 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   25d64:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   25d66:	2807      	cmp	r0, #7
   25d68:	dd0b      	ble.n	25d82 <arm_core_mpu_configure_dynamic_mpu_regions+0x32>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   25d6a:	bd08      	pop	{r3, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   25d6c:	490a      	ldr	r1, [pc, #40]	; (25d98 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   25d6e:	480b      	ldr	r0, [pc, #44]	; (25d9c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   25d70:	f240 1239 	movw	r2, #313	; 0x139
   25d74:	f012 f928 	bl	37fc8 <assert_print>
   25d78:	4807      	ldr	r0, [pc, #28]	; (25d98 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   25d7a:	f240 1139 	movw	r1, #313	; 0x139
   25d7e:	f012 f91c 	bl	37fba <assert_post_action>
  MPU->RNR = rnr;
   25d82:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   25d86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   25d8a:	3001      	adds	r0, #1
   25d8c:	e7eb      	b.n	25d66 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   25d8e:	bf00      	nop
   25d90:	20004d77 	.word	0x20004d77
   25d94:	e000ed00 	.word	0xe000ed00
   25d98:	0003d4cf 	.word	0x0003d4cf
   25d9c:	0003c7f8 	.word	0x0003c7f8

00025da0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   25da0:	4920      	ldr	r1, [pc, #128]	; (25e24 <z_arm_mpu_init+0x84>)
{
   25da2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   25da4:	680c      	ldr	r4, [r1, #0]
   25da6:	2c08      	cmp	r4, #8
   25da8:	d90a      	bls.n	25dc0 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   25daa:	491f      	ldr	r1, [pc, #124]	; (25e28 <z_arm_mpu_init+0x88>)
   25dac:	481f      	ldr	r0, [pc, #124]	; (25e2c <z_arm_mpu_init+0x8c>)
   25dae:	f240 1251 	movw	r2, #337	; 0x151
   25db2:	f012 f909 	bl	37fc8 <assert_print>
   25db6:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   25dba:	481b      	ldr	r0, [pc, #108]	; (25e28 <z_arm_mpu_init+0x88>)
   25dbc:	f012 f8fd 	bl	37fba <assert_post_action>
	arm_core_mpu_disable();
   25dc0:	f7ff ffa0 	bl	25d04 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   25dc4:	6848      	ldr	r0, [r1, #4]
   25dc6:	491a      	ldr	r1, [pc, #104]	; (25e30 <z_arm_mpu_init+0x90>)
   25dc8:	2200      	movs	r2, #0
   25dca:	4294      	cmp	r4, r2
   25dcc:	f100 000c 	add.w	r0, r0, #12
   25dd0:	d112      	bne.n	25df8 <z_arm_mpu_init+0x58>
	static_regions_num = mpu_config.num_regions;
   25dd2:	4b18      	ldr	r3, [pc, #96]	; (25e34 <z_arm_mpu_init+0x94>)
   25dd4:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   25dd6:	f7ff ff89 	bl	25cec <arm_core_mpu_enable>
	__ASSERT(
   25dda:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   25dde:	f3c3 2307 	ubfx	r3, r3, #8, #8
   25de2:	2b08      	cmp	r3, #8
   25de4:	d01b      	beq.n	25e1e <z_arm_mpu_init+0x7e>
   25de6:	4910      	ldr	r1, [pc, #64]	; (25e28 <z_arm_mpu_init+0x88>)
   25de8:	4810      	ldr	r0, [pc, #64]	; (25e2c <z_arm_mpu_init+0x8c>)
   25dea:	f240 12b7 	movw	r2, #439	; 0x1b7
   25dee:	f012 f8eb 	bl	37fc8 <assert_print>
   25df2:	f240 11b7 	movw	r1, #439	; 0x1b7
   25df6:	e7e0      	b.n	25dba <z_arm_mpu_init+0x1a>
   25df8:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   25dfc:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   25e00:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   25e04:	4313      	orrs	r3, r2
   25e06:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   25e0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   25e0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   25e12:	f043 0301 	orr.w	r3, r3, #1
   25e16:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   25e1a:	3201      	adds	r2, #1
   25e1c:	e7d5      	b.n	25dca <z_arm_mpu_init+0x2a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   25e1e:	2000      	movs	r0, #0
   25e20:	bd10      	pop	{r4, pc}
   25e22:	bf00      	nop
   25e24:	0003bf1c 	.word	0x0003bf1c
   25e28:	0003d4cf 	.word	0x0003d4cf
   25e2c:	0003c7f8 	.word	0x0003c7f8
   25e30:	e000ed00 	.word	0xe000ed00
   25e34:	20004d77 	.word	0x20004d77

00025e38 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   25e38:	4b01      	ldr	r3, [pc, #4]	; (25e40 <__stdout_hook_install+0x8>)
   25e3a:	6018      	str	r0, [r3, #0]
}
   25e3c:	4770      	bx	lr
   25e3e:	bf00      	nop
   25e40:	20000658 	.word	0x20000658

00025e44 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   25e44:	b40c      	push	{r2, r3}
   25e46:	b510      	push	{r4, lr}
   25e48:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   25e4a:	b909      	cbnz	r1, 25e50 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   25e4c:	f10d 000b 	add.w	r0, sp, #11
   25e50:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
   25e52:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
   25e56:	ab09      	add	r3, sp, #36	; 0x24
   25e58:	9a08      	ldr	r2, [sp, #32]
   25e5a:	9400      	str	r4, [sp, #0]
   25e5c:	a904      	add	r1, sp, #16
   25e5e:	4805      	ldr	r0, [pc, #20]	; (25e74 <snprintf+0x30>)
   25e60:	9303      	str	r3, [sp, #12]
   25e62:	f7fe f9f1 	bl	24248 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   25e66:	9b04      	ldr	r3, [sp, #16]
   25e68:	701c      	strb	r4, [r3, #0]
	return r;
}
   25e6a:	b006      	add	sp, #24
   25e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25e70:	b002      	add	sp, #8
   25e72:	4770      	bx	lr
   25e74:	000387e9 	.word	0x000387e9

00025e78 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   25e78:	f04f 0240 	mov.w	r2, #64	; 0x40
   25e7c:	f3ef 8311 	mrs	r3, BASEPRI
   25e80:	f382 8812 	msr	BASEPRI_MAX, r2
   25e84:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   25e88:	4a04      	ldr	r2, [pc, #16]	; (25e9c <nordicsemi_nrf52_init+0x24>)
   25e8a:	2101      	movs	r1, #1
   25e8c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   25e90:	f383 8811 	msr	BASEPRI, r3
   25e94:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   25e98:	2000      	movs	r0, #0
   25e9a:	4770      	bx	lr
   25e9c:	4001e000 	.word	0x4001e000

00025ea0 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   25ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   25ea4:	b2c0      	uxtb	r0, r0
   25ea6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   25eaa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   25eae:	4905      	ldr	r1, [pc, #20]	; (25ec4 <sys_arch_reboot+0x24>)
   25eb0:	4b05      	ldr	r3, [pc, #20]	; (25ec8 <sys_arch_reboot+0x28>)
   25eb2:	68ca      	ldr	r2, [r1, #12]
   25eb4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   25eb8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   25eba:	60cb      	str	r3, [r1, #12]
   25ebc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   25ec0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   25ec2:	e7fd      	b.n	25ec0 <sys_arch_reboot+0x20>
   25ec4:	e000ed00 	.word	0xe000ed00
   25ec8:	05fa0004 	.word	0x05fa0004

00025ecc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   25ecc:	b120      	cbz	r0, 25ed8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   25ece:	4b03      	ldr	r3, [pc, #12]	; (25edc <arch_busy_wait+0x10>)
   25ed0:	0180      	lsls	r0, r0, #6
   25ed2:	f043 0301 	orr.w	r3, r3, #1
   25ed6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   25ed8:	4770      	bx	lr
   25eda:	bf00      	nop
   25edc:	0003bdf0 	.word	0x0003bdf0

00025ee0 <nrf_gpio_pin_port_decode>:
{
   25ee0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25ee2:	6803      	ldr	r3, [r0, #0]
    switch (port)
   25ee4:	095a      	lsrs	r2, r3, #5
   25ee6:	d00c      	beq.n	25f02 <nrf_gpio_pin_port_decode+0x22>
   25ee8:	2a01      	cmp	r2, #1
   25eea:	d013      	beq.n	25f14 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25eec:	490e      	ldr	r1, [pc, #56]	; (25f28 <nrf_gpio_pin_port_decode+0x48>)
   25eee:	480f      	ldr	r0, [pc, #60]	; (25f2c <nrf_gpio_pin_port_decode+0x4c>)
   25ef0:	f240 2247 	movw	r2, #583	; 0x247
   25ef4:	f012 f868 	bl	37fc8 <assert_print>
   25ef8:	480b      	ldr	r0, [pc, #44]	; (25f28 <nrf_gpio_pin_port_decode+0x48>)
   25efa:	f240 2147 	movw	r1, #583	; 0x247
   25efe:	f012 f85c 	bl	37fba <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   25f02:	f04f 32ff 	mov.w	r2, #4294967295
   25f06:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25f0a:	07d9      	lsls	r1, r3, #31
   25f0c:	d5ee      	bpl.n	25eec <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   25f0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   25f12:	e008      	b.n	25f26 <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   25f14:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25f1c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25f1e:	07d2      	lsls	r2, r2, #31
   25f20:	d5e4      	bpl.n	25eec <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   25f22:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   25f24:	4802      	ldr	r0, [pc, #8]	; (25f30 <nrf_gpio_pin_port_decode+0x50>)
}
   25f26:	bd08      	pop	{r3, pc}
   25f28:	0003c7c5 	.word	0x0003c7c5
   25f2c:	0003c7f8 	.word	0x0003c7f8
   25f30:	50000300 	.word	0x50000300

00025f34 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   25f34:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   25f36:	7803      	ldrb	r3, [r0, #0]
   25f38:	b08b      	sub	sp, #44	; 0x2c
   25f3a:	4604      	mov	r4, r0
   25f3c:	ad07      	add	r5, sp, #28
   25f3e:	2b03      	cmp	r3, #3
   25f40:	d821      	bhi.n	25f86 <bt_addr_le_str+0x52>
   25f42:	e8df f003 	tbb	[pc, r3]
   25f46:	1a02      	.short	0x1a02
   25f48:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   25f4a:	4912      	ldr	r1, [pc, #72]	; (25f94 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   25f4c:	4628      	mov	r0, r5
   25f4e:	f012 fbe7 	bl	38720 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   25f52:	9505      	str	r5, [sp, #20]
   25f54:	7863      	ldrb	r3, [r4, #1]
   25f56:	9304      	str	r3, [sp, #16]
   25f58:	78a3      	ldrb	r3, [r4, #2]
   25f5a:	9303      	str	r3, [sp, #12]
   25f5c:	78e3      	ldrb	r3, [r4, #3]
   25f5e:	9302      	str	r3, [sp, #8]
   25f60:	7923      	ldrb	r3, [r4, #4]
   25f62:	9301      	str	r3, [sp, #4]
   25f64:	7963      	ldrb	r3, [r4, #5]
   25f66:	9300      	str	r3, [sp, #0]
   25f68:	79a3      	ldrb	r3, [r4, #6]
   25f6a:	4a0b      	ldr	r2, [pc, #44]	; (25f98 <bt_addr_le_str+0x64>)
   25f6c:	480b      	ldr	r0, [pc, #44]	; (25f9c <bt_addr_le_str+0x68>)
   25f6e:	211e      	movs	r1, #30
   25f70:	f011 fe2f 	bl	37bd2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   25f74:	4809      	ldr	r0, [pc, #36]	; (25f9c <bt_addr_le_str+0x68>)
   25f76:	b00b      	add	sp, #44	; 0x2c
   25f78:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   25f7a:	4909      	ldr	r1, [pc, #36]	; (25fa0 <bt_addr_le_str+0x6c>)
   25f7c:	e7e6      	b.n	25f4c <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   25f7e:	4909      	ldr	r1, [pc, #36]	; (25fa4 <bt_addr_le_str+0x70>)
   25f80:	e7e4      	b.n	25f4c <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   25f82:	4909      	ldr	r1, [pc, #36]	; (25fa8 <bt_addr_le_str+0x74>)
   25f84:	e7e2      	b.n	25f4c <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   25f86:	4a09      	ldr	r2, [pc, #36]	; (25fac <bt_addr_le_str+0x78>)
   25f88:	210a      	movs	r1, #10
   25f8a:	4628      	mov	r0, r5
   25f8c:	f011 fe21 	bl	37bd2 <snprintk>
		break;
   25f90:	e7df      	b.n	25f52 <bt_addr_le_str+0x1e>
   25f92:	bf00      	nop
   25f94:	0003c84d 	.word	0x0003c84d
   25f98:	0003c876 	.word	0x0003c876
   25f9c:	20004d78 	.word	0x20004d78
   25fa0:	0003c854 	.word	0x0003c854
   25fa4:	0003c85b 	.word	0x0003c85b
   25fa8:	0003c865 	.word	0x0003c865
   25fac:	0003c86f 	.word	0x0003c86f

00025fb0 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   25fb0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   25fb2:	4d0a      	ldr	r5, [pc, #40]	; (25fdc <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   25fb4:	4b0a      	ldr	r3, [pc, #40]	; (25fe0 <long_wq_init+0x30>)
{
   25fb6:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   25fb8:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   25fba:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   25fbc:	9302      	str	r3, [sp, #8]
   25fbe:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   25fc0:	f00c fd0e 	bl	329e0 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   25fc4:	ab02      	add	r3, sp, #8
   25fc6:	9300      	str	r3, [sp, #0]
   25fc8:	4628      	mov	r0, r5
   25fca:	4906      	ldr	r1, [pc, #24]	; (25fe4 <long_wq_init+0x34>)
   25fcc:	230a      	movs	r3, #10
   25fce:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   25fd2:	f00c fd1b 	bl	32a0c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   25fd6:	4620      	mov	r0, r4
   25fd8:	b005      	add	sp, #20
   25fda:	bd30      	pop	{r4, r5, pc}
   25fdc:	20001c98 	.word	0x20001c98
   25fe0:	0003d533 	.word	0x0003d533
   25fe4:	20006300 	.word	0x20006300

00025fe8 <bt_long_wq_schedule>:
{
   25fe8:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   25fea:	4801      	ldr	r0, [pc, #4]	; (25ff0 <bt_long_wq_schedule+0x8>)
   25fec:	f00c bd94 	b.w	32b18 <k_work_schedule_for_queue>
   25ff0:	20001c98 	.word	0x20001c98

00025ff4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   25ff4:	b430      	push	{r4, r5}
   25ff6:	4603      	mov	r3, r0
   25ff8:	4608      	mov	r0, r1
	switch (src->type) {
   25ffa:	781a      	ldrb	r2, [r3, #0]
   25ffc:	2a01      	cmp	r2, #1
   25ffe:	d013      	beq.n	26028 <uuid_to_uuid128+0x34>
   26000:	2a02      	cmp	r2, #2
   26002:	d026      	beq.n	26052 <uuid_to_uuid128+0x5e>
   26004:	b972      	cbnz	r2, 26024 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   26006:	4a15      	ldr	r2, [pc, #84]	; (2605c <uuid_to_uuid128+0x68>)
   26008:	f102 0410 	add.w	r4, r2, #16
   2600c:	f852 5b04 	ldr.w	r5, [r2], #4
   26010:	f841 5b04 	str.w	r5, [r1], #4
   26014:	42a2      	cmp	r2, r4
   26016:	d1f9      	bne.n	2600c <uuid_to_uuid128+0x18>
   26018:	7812      	ldrb	r2, [r2, #0]
   2601a:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   2601c:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   2601e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   26020:	0a1b      	lsrs	r3, r3, #8
   26022:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   26024:	bc30      	pop	{r4, r5}
   26026:	4770      	bx	lr
		*dst = uuid128_base;
   26028:	4a0c      	ldr	r2, [pc, #48]	; (2605c <uuid_to_uuid128+0x68>)
   2602a:	f102 0410 	add.w	r4, r2, #16
   2602e:	f852 5b04 	ldr.w	r5, [r2], #4
   26032:	f841 5b04 	str.w	r5, [r1], #4
   26036:	42a2      	cmp	r2, r4
   26038:	d1f9      	bne.n	2602e <uuid_to_uuid128+0x3a>
   2603a:	7812      	ldrb	r2, [r2, #0]
   2603c:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   2603e:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   26040:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   26042:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   26046:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   26048:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2604a:	0a1b      	lsrs	r3, r3, #8
   2604c:	7382      	strb	r2, [r0, #14]
   2604e:	7403      	strb	r3, [r0, #16]
}
   26050:	e7e8      	b.n	26024 <uuid_to_uuid128+0x30>
}
   26052:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   26054:	2211      	movs	r2, #17
   26056:	4619      	mov	r1, r3
   26058:	f012 bbaf 	b.w	387ba <memcpy>
   2605c:	0003d53c 	.word	0x0003d53c

00026060 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   26060:	2805      	cmp	r0, #5
{
   26062:	b538      	push	{r3, r4, r5, lr}
   26064:	4605      	mov	r5, r0
   26066:	d803      	bhi.n	26070 <bt_buf_get_rx+0x10>
   26068:	212a      	movs	r1, #42	; 0x2a
   2606a:	40c1      	lsrs	r1, r0
   2606c:	07c9      	lsls	r1, r1, #31
   2606e:	d408      	bmi.n	26082 <bt_buf_get_rx+0x22>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   26070:	490a      	ldr	r1, [pc, #40]	; (2609c <bt_buf_get_rx+0x3c>)
   26072:	480b      	ldr	r0, [pc, #44]	; (260a0 <bt_buf_get_rx+0x40>)
   26074:	223d      	movs	r2, #61	; 0x3d
   26076:	f011 ffa7 	bl	37fc8 <assert_print>
   2607a:	4808      	ldr	r0, [pc, #32]	; (2609c <bt_buf_get_rx+0x3c>)
   2607c:	213d      	movs	r1, #61	; 0x3d
   2607e:	f011 ff9c 	bl	37fba <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   26082:	4808      	ldr	r0, [pc, #32]	; (260a4 <bt_buf_get_rx+0x44>)
   26084:	f014 f916 	bl	3a2b4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   26088:	4604      	mov	r4, r0
   2608a:	b120      	cbz	r0, 26096 <bt_buf_get_rx+0x36>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   2608c:	2100      	movs	r1, #0
   2608e:	300c      	adds	r0, #12
   26090:	f005 ffee 	bl	2c070 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   26094:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   26096:	4620      	mov	r0, r4
   26098:	bd38      	pop	{r3, r4, r5, pc}
   2609a:	bf00      	nop
   2609c:	0003d54d 	.word	0x0003d54d
   260a0:	0003c7f8 	.word	0x0003c7f8
   260a4:	20000c34 	.word	0x20000c34

000260a8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   260a8:	b510      	push	{r4, lr}
   260aa:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   260ac:	490a      	ldr	r1, [pc, #40]	; (260d8 <bt_buf_get_cmd_complete+0x30>)
{
   260ae:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   260b0:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
   260b4:	b920      	cbnz	r0, 260c0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   260b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   260ba:	2001      	movs	r0, #1
   260bc:	f7ff bfd0 	b.w	26060 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   260c0:	f006 f8f0 	bl	2c2a4 <net_buf_ref>
   260c4:	2301      	movs	r3, #1
		buf->len = 0U;
   260c6:	2100      	movs	r1, #0
   260c8:	7603      	strb	r3, [r0, #24]
   260ca:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   260cc:	4604      	mov	r4, r0
   260ce:	300c      	adds	r0, #12
   260d0:	f005 ffce 	bl	2c070 <net_buf_simple_reserve>
}
   260d4:	4620      	mov	r0, r4
   260d6:	bd10      	pop	{r4, pc}
   260d8:	20000440 	.word	0x20000440

000260dc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   260dc:	b570      	push	{r4, r5, r6, lr}
   260de:	4604      	mov	r4, r0
	switch (evt) {
   260e0:	2c0f      	cmp	r4, #15
{
   260e2:	460d      	mov	r5, r1
   260e4:	4610      	mov	r0, r2
   260e6:	4619      	mov	r1, r3
	switch (evt) {
   260e8:	d805      	bhi.n	260f6 <bt_buf_get_evt+0x1a>
   260ea:	2c0d      	cmp	r4, #13
   260ec:	d90d      	bls.n	2610a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   260ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   260f2:	f7ff bfd9 	b.w	260a8 <bt_buf_get_cmd_complete>
	switch (evt) {
   260f6:	2c13      	cmp	r4, #19
   260f8:	d107      	bne.n	2610a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   260fa:	480c      	ldr	r0, [pc, #48]	; (2612c <bt_buf_get_evt+0x50>)
   260fc:	f014 f8da 	bl	3a2b4 <net_buf_alloc_fixed>
			if (buf) {
   26100:	4604      	mov	r4, r0
   26102:	b938      	cbnz	r0, 26114 <bt_buf_get_evt+0x38>
{
   26104:	2400      	movs	r4, #0
}
   26106:	4620      	mov	r0, r4
   26108:	bd70      	pop	{r4, r5, r6, pc}
   2610a:	4602      	mov	r2, r0
   2610c:	460b      	mov	r3, r1
		if (discardable) {
   2610e:	b145      	cbz	r5, 26122 <bt_buf_get_evt+0x46>
   26110:	4807      	ldr	r0, [pc, #28]	; (26130 <bt_buf_get_evt+0x54>)
   26112:	e7f3      	b.n	260fc <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   26114:	2100      	movs	r1, #0
   26116:	300c      	adds	r0, #12
   26118:	f005 ffaa 	bl	2c070 <net_buf_simple_reserve>
   2611c:	2301      	movs	r3, #1
   2611e:	7623      	strb	r3, [r4, #24]
}
   26120:	e7f1      	b.n	26106 <bt_buf_get_evt+0x2a>
}
   26122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   26126:	2001      	movs	r0, #1
   26128:	f7ff bf9a 	b.w	26060 <bt_buf_get_rx>
   2612c:	20000c68 	.word	0x20000c68
   26130:	20000b98 	.word	0x20000b98

00026134 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   26134:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   26136:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   26138:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   2613c:	781b      	ldrb	r3, [r3, #0]
   2613e:	b99b      	cbnz	r3, 26168 <hci_disconn_complete_prio+0x34>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   26140:	4620      	mov	r0, r4
   26142:	f002 fb8d 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   26146:	4605      	mov	r5, r0
   26148:	b978      	cbnz	r0, 2616a <hci_disconn_complete_prio+0x36>
		if (!disconnected_handles[i]) {
   2614a:	4b0c      	ldr	r3, [pc, #48]	; (2617c <hci_disconn_complete_prio+0x48>)
   2614c:	881a      	ldrh	r2, [r3, #0]
   2614e:	b922      	cbnz	r2, 2615a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   26150:	ea6f 5204 	mvn.w	r2, r4, lsl #20
   26154:	ea6f 5212 	mvn.w	r2, r2, lsr #20
   26158:	801a      	strh	r2, [r3, #0]
		if (!disconnected_handles[i]) {
   2615a:	885a      	ldrh	r2, [r3, #2]
   2615c:	b922      	cbnz	r2, 26168 <hci_disconn_complete_prio+0x34>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2615e:	ea6f 5404 	mvn.w	r4, r4, lsl #20
   26162:	ea6f 5414 	mvn.w	r4, r4, lsr #20
   26166:	805c      	strh	r4, [r3, #2]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   26168:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2616a:	2101      	movs	r1, #1
   2616c:	f002 fb80 	bl	28870 <bt_conn_set_state>
	bt_conn_unref(conn);
   26170:	4628      	mov	r0, r5
}
   26172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   26176:	f002 bb43 	b.w	28800 <bt_conn_unref>
   2617a:	bf00      	nop
   2617c:	20004c68 	.word	0x20004c68

00026180 <hci_disconn_complete>:

static void hci_disconn_complete(struct net_buf *buf)
{
   26180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   26182:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   26184:	782e      	ldrb	r6, [r5, #0]
   26186:	b9be      	cbnz	r6, 261b8 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   26188:	f8b5 7001 	ldrh.w	r7, [r5, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   2618c:	4638      	mov	r0, r7
   2618e:	f002 fb67 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   26192:	4604      	mov	r4, r0
   26194:	b930      	cbnz	r0, 261a4 <hci_disconn_complete+0x24>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   26196:	463a      	mov	r2, r7
   26198:	4808      	ldr	r0, [pc, #32]	; (261bc <hci_disconn_complete+0x3c>)
		bt_le_scan_update(false);
	}
#endif /* defined(CONFIG_BT_CENTRAL) && !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

	bt_conn_unref(conn);
}
   2619a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   2619e:	2145      	movs	r1, #69	; 0x45
   261a0:	f011 bf20 	b.w	37fe4 <z_log_minimal_printk>
	conn->err = evt->reason;
   261a4:	78eb      	ldrb	r3, [r5, #3]
   261a6:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   261a8:	4631      	mov	r1, r6
   261aa:	f002 fb61 	bl	28870 <bt_conn_set_state>
		bt_conn_unref(conn);
   261ae:	4620      	mov	r0, r4
}
   261b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   261b4:	f002 bb24 	b.w	28800 <bt_conn_unref>
}
   261b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   261ba:	bf00      	nop
   261bc:	0003d57c 	.word	0x0003d57c

000261c0 <le_data_len_change>:
	bt_conn_unref(conn);
}

#if defined(CONFIG_BT_DATA_LEN_UPDATE)
static void le_data_len_change(struct net_buf *buf)
{
   261c0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   261c2:	68c3      	ldr	r3, [r0, #12]
   261c4:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   261c6:	4620      	mov	r0, r4
   261c8:	f002 fb4a 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   261cc:	b930      	cbnz	r0, 261dc <le_data_len_change+0x1c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   261ce:	4622      	mov	r2, r4
   261d0:	4804      	ldr	r0, [pc, #16]	; (261e4 <le_data_len_change+0x24>)
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
   261d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   261d6:	2145      	movs	r1, #69	; 0x45
   261d8:	f011 bf04 	b.w	37fe4 <z_log_minimal_printk>
}
   261dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   261e0:	f002 bb0e 	b.w	28800 <bt_conn_unref>
   261e4:	0003d5a7 	.word	0x0003d5a7

000261e8 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   261e8:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   261ea:	2101      	movs	r1, #1
   261ec:	300c      	adds	r0, #12
   261ee:	f006 f903 	bl	2c3f8 <net_buf_simple_pull_mem>
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
}
   261f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   261f6:	7802      	ldrb	r2, [r0, #0]
   261f8:	4801      	ldr	r0, [pc, #4]	; (26200 <hci_hardware_error+0x18>)
   261fa:	2145      	movs	r1, #69	; 0x45
   261fc:	f011 bef2 	b.w	37fe4 <z_log_minimal_printk>
   26200:	0003d5d0 	.word	0x0003d5d0

00026204 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   26204:	4601      	mov	r1, r0
   26206:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   26208:	4807      	ldr	r0, [pc, #28]	; (26228 <rx_queue_put+0x24>)
   2620a:	f005 ff51 	bl	2c0b0 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   2620e:	4907      	ldr	r1, [pc, #28]	; (2622c <rx_queue_put+0x28>)
   26210:	4807      	ldr	r0, [pc, #28]	; (26230 <rx_queue_put+0x2c>)
   26212:	f015 f9f3 	bl	3b5fc <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   26216:	1e02      	subs	r2, r0, #0
   26218:	da05      	bge.n	26226 <rx_queue_put+0x22>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   2621a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Could not submit rx_work: %d", err);
   2621e:	4805      	ldr	r0, [pc, #20]	; (26234 <rx_queue_put+0x30>)
   26220:	2145      	movs	r1, #69	; 0x45
   26222:	f011 bedf 	b.w	37fe4 <z_log_minimal_printk>
}
   26226:	bd08      	pop	{r3, pc}
   26228:	20000534 	.word	0x20000534
   2622c:	200006ac 	.word	0x200006ac
   26230:	20001de8 	.word	0x20001de8
   26234:	0003d5f7 	.word	0x0003d5f7

00026238 <le_remote_feat_complete>:
{
   26238:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   2623a:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2623c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   26240:	4630      	mov	r0, r6
   26242:	f002 fb0d 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   26246:	4604      	mov	r4, r0
   26248:	b930      	cbnz	r0, 26258 <le_remote_feat_complete+0x20>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   2624a:	4632      	mov	r2, r6
   2624c:	480b      	ldr	r0, [pc, #44]	; (2627c <le_remote_feat_complete+0x44>)
}
   2624e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   26252:	2145      	movs	r1, #69	; 0x45
   26254:	f011 bec6 	b.w	37fe4 <z_log_minimal_printk>
	if (!evt->status) {
   26258:	782b      	ldrb	r3, [r5, #0]
   2625a:	b923      	cbnz	r3, 26266 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   2625c:	2208      	movs	r2, #8
   2625e:	1ce9      	adds	r1, r5, #3
   26260:	30b5      	adds	r0, #181	; 0xb5
   26262:	f012 faaa 	bl	387ba <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26266:	1d20      	adds	r0, r4, #4
   26268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2626c:	f012 fb70 	bl	38950 <atomic_or>
	bt_conn_unref(conn);
   26270:	4620      	mov	r0, r4
}
   26272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   26276:	f002 bac3 	b.w	28800 <bt_conn_unref>
   2627a:	bf00      	nop
   2627c:	0003d5a7 	.word	0x0003d5a7

00026280 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   26280:	b430      	push	{r4, r5}
   26282:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   26286:	4605      	mov	r5, r0
   26288:	4614      	mov	r4, r2
   2628a:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   2628c:	429c      	cmp	r4, r3
   2628e:	d101      	bne.n	26294 <handle_event_common.isra.0+0x14>
}
   26290:	bc30      	pop	{r4, r5}
   26292:	4770      	bx	lr
		if (handler->event != event) {
   26294:	4622      	mov	r2, r4
   26296:	f812 1b08 	ldrb.w	r1, [r2], #8
   2629a:	42a9      	cmp	r1, r5
   2629c:	d10c      	bne.n	262b8 <handle_event_common.isra.0+0x38>
		if (buf->len < handler->min_len) {
   2629e:	8a02      	ldrh	r2, [r0, #16]
   262a0:	7863      	ldrb	r3, [r4, #1]
   262a2:	4293      	cmp	r3, r2
   262a4:	d905      	bls.n	262b2 <handle_event_common.isra.0+0x32>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   262a6:	462b      	mov	r3, r5
   262a8:	4804      	ldr	r0, [pc, #16]	; (262bc <handle_event_common.isra.0+0x3c>)
}
   262aa:	bc30      	pop	{r4, r5}
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   262ac:	2145      	movs	r1, #69	; 0x45
   262ae:	f011 be99 	b.w	37fe4 <z_log_minimal_printk>
		handler->handler(buf);
   262b2:	6863      	ldr	r3, [r4, #4]
}
   262b4:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   262b6:	4718      	bx	r3
   262b8:	4614      	mov	r4, r2
   262ba:	e7e7      	b.n	2628c <handle_event_common.isra.0+0xc>
   262bc:	0003d619 	.word	0x0003d619

000262c0 <hci_le_meta_event>:
{
   262c0:	b510      	push	{r4, lr}
   262c2:	2101      	movs	r1, #1
   262c4:	4604      	mov	r4, r0
   262c6:	300c      	adds	r0, #12
   262c8:	f006 f896 	bl	2c3f8 <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
   262cc:	4621      	mov	r1, r4
   262ce:	4a03      	ldr	r2, [pc, #12]	; (262dc <hci_le_meta_event+0x1c>)
   262d0:	7800      	ldrb	r0, [r0, #0]
}
   262d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   262d6:	2309      	movs	r3, #9
   262d8:	f7ff bfd2 	b.w	26280 <handle_event_common.isra.0>
   262dc:	0003bfb4 	.word	0x0003bfb4

000262e0 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   262e0:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   262e2:	4844      	ldr	r0, [pc, #272]	; (263f4 <rx_work_handler+0x114>)
   262e4:	f005 ff36 	bl	2c154 <net_buf_slist_get>
	if (!buf) {
   262e8:	4604      	mov	r4, r0
   262ea:	2800      	cmp	r0, #0
   262ec:	f000 8081 	beq.w	263f2 <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   262f0:	7e02      	ldrb	r2, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   262f2:	2a01      	cmp	r2, #1
   262f4:	d04d      	beq.n	26392 <rx_work_handler+0xb2>
   262f6:	2a03      	cmp	r2, #3
   262f8:	d178      	bne.n	263ec <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   262fa:	8a03      	ldrh	r3, [r0, #16]
   262fc:	2b03      	cmp	r3, #3
   262fe:	d80b      	bhi.n	26318 <rx_work_handler+0x38>
   26300:	493d      	ldr	r1, [pc, #244]	; (263f8 <rx_work_handler+0x118>)
   26302:	483e      	ldr	r0, [pc, #248]	; (263fc <rx_work_handler+0x11c>)
   26304:	f240 12ed 	movw	r2, #493	; 0x1ed
   26308:	f011 fe5e 	bl	37fc8 <assert_print>
   2630c:	4040      	eors	r0, r0
   2630e:	f380 8811 	msr	BASEPRI, r0
   26312:	f04f 0003 	mov.w	r0, #3
   26316:	df02      	svc	2
   26318:	2104      	movs	r1, #4
   2631a:	f104 000c 	add.w	r0, r4, #12
   2631e:	f006 f86b 	bl	2c3f8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   26322:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   26324:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   26326:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   26328:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   2632a:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   2632c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   26330:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   26332:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   26334:	d007      	beq.n	26346 <rx_work_handler+0x66>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   26336:	4832      	ldr	r0, [pc, #200]	; (26400 <rx_work_handler+0x120>)
   26338:	2145      	movs	r1, #69	; 0x45
   2633a:	f011 fe53 	bl	37fe4 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   2633e:	4620      	mov	r0, r4
   26340:	f005 ff6e 	bl	2c220 <net_buf_unref>
		break;
   26344:	e014      	b.n	26370 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   26346:	f002 fa8b 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   2634a:	4605      	mov	r5, r0
   2634c:	b928      	cbnz	r0, 2635a <rx_work_handler+0x7a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   2634e:	8b62      	ldrh	r2, [r4, #26]
   26350:	482c      	ldr	r0, [pc, #176]	; (26404 <rx_work_handler+0x124>)
   26352:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   26354:	f011 fe46 	bl	37fe4 <z_log_minimal_printk>
   26358:	e7f1      	b.n	2633e <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   2635a:	f002 fb3f 	bl	289dc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2635e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   26360:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   26362:	4621      	mov	r1, r4
   26364:	4628      	mov	r0, r5
   26366:	f002 f921 	bl	285ac <bt_conn_recv>
	bt_conn_unref(conn);
   2636a:	4628      	mov	r0, r5
   2636c:	f002 fa48 	bl	28800 <bt_conn_unref>
	return list->head;
   26370:	4b25      	ldr	r3, [pc, #148]	; (26408 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   26372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   26376:	2b00      	cmp	r3, #0
   26378:	d03b      	beq.n	263f2 <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   2637a:	4924      	ldr	r1, [pc, #144]	; (2640c <rx_work_handler+0x12c>)
   2637c:	4824      	ldr	r0, [pc, #144]	; (26410 <rx_work_handler+0x130>)
   2637e:	f015 f93d 	bl	3b5fc <k_work_submit_to_queue>
#endif
		if (err < 0) {
   26382:	1e02      	subs	r2, r0, #0
   26384:	da35      	bge.n	263f2 <rx_work_handler+0x112>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   26386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Could not submit rx_work: %d", err);
   2638a:	4822      	ldr	r0, [pc, #136]	; (26414 <rx_work_handler+0x134>)
   2638c:	2145      	movs	r1, #69	; 0x45
   2638e:	f011 be29 	b.w	37fe4 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   26392:	8a03      	ldrh	r3, [r0, #16]
   26394:	2b01      	cmp	r3, #1
   26396:	d80b      	bhi.n	263b0 <rx_work_handler+0xd0>
   26398:	4917      	ldr	r1, [pc, #92]	; (263f8 <rx_work_handler+0x118>)
   2639a:	4818      	ldr	r0, [pc, #96]	; (263fc <rx_work_handler+0x11c>)
   2639c:	f640 126d 	movw	r2, #2413	; 0x96d
   263a0:	f011 fe12 	bl	37fc8 <assert_print>
   263a4:	4040      	eors	r0, r0
   263a6:	f380 8811 	msr	BASEPRI, r0
   263aa:	f04f 0003 	mov.w	r0, #3
   263ae:	df02      	svc	2
   263b0:	2102      	movs	r1, #2
   263b2:	f104 000c 	add.w	r0, r4, #12
   263b6:	f006 f81f 	bl	2c3f8 <net_buf_simple_pull_mem>
   263ba:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   263bc:	7800      	ldrb	r0, [r0, #0]
   263be:	f012 fab4 	bl	3892a <bt_hci_evt_get_flags>
   263c2:	0783      	lsls	r3, r0, #30
   263c4:	d40b      	bmi.n	263de <rx_work_handler+0xfe>
   263c6:	490c      	ldr	r1, [pc, #48]	; (263f8 <rx_work_handler+0x118>)
   263c8:	480c      	ldr	r0, [pc, #48]	; (263fc <rx_work_handler+0x11c>)
   263ca:	f640 1271 	movw	r2, #2417	; 0x971
   263ce:	f011 fdfb 	bl	37fc8 <assert_print>
   263d2:	4040      	eors	r0, r0
   263d4:	f380 8811 	msr	BASEPRI, r0
   263d8:	f04f 0003 	mov.w	r0, #3
   263dc:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   263de:	4a0e      	ldr	r2, [pc, #56]	; (26418 <rx_work_handler+0x138>)
   263e0:	7828      	ldrb	r0, [r5, #0]
   263e2:	2304      	movs	r3, #4
   263e4:	4621      	mov	r1, r4
   263e6:	f7ff ff4b 	bl	26280 <handle_event_common.isra.0>
	net_buf_unref(buf);
   263ea:	e7a8      	b.n	2633e <rx_work_handler+0x5e>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   263ec:	480b      	ldr	r0, [pc, #44]	; (2641c <rx_work_handler+0x13c>)
   263ee:	2145      	movs	r1, #69	; 0x45
   263f0:	e7b0      	b.n	26354 <rx_work_handler+0x74>
}
   263f2:	bd70      	pop	{r4, r5, r6, pc}
   263f4:	20000534 	.word	0x20000534
   263f8:	0003d640 	.word	0x0003d640
   263fc:	0003c7f8 	.word	0x0003c7f8
   26400:	0003d674 	.word	0x0003d674
   26404:	0003d69d 	.word	0x0003d69d
   26408:	20000440 	.word	0x20000440
   2640c:	200006ac 	.word	0x200006ac
   26410:	20001de8 	.word	0x20001de8
   26414:	0003d5f7 	.word	0x0003d5f7
   26418:	0003bf94 	.word	0x0003bf94
   2641c:	0003d6c4 	.word	0x0003d6c4

00026420 <le_conn_update_complete>:
{
   26420:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   26422:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   26424:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   26428:	4630      	mov	r0, r6
   2642a:	f002 fa19 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   2642e:	4604      	mov	r4, r0
   26430:	b938      	cbnz	r0, 26442 <le_conn_update_complete+0x22>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   26432:	482b      	ldr	r0, [pc, #172]	; (264e0 <le_conn_update_complete+0xc0>)
   26434:	4632      	mov	r2, r6
   26436:	2145      	movs	r1, #69	; 0x45
}
   26438:	b002      	add	sp, #8
   2643a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   2643e:	f011 bdd1 	b.w	37fe4 <z_log_minimal_printk>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   26442:	782b      	ldrb	r3, [r5, #0]
   26444:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   26446:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   2644a:	d119      	bne.n	26480 <le_conn_update_complete+0x60>
   2644c:	78c3      	ldrb	r3, [r0, #3]
   2644e:	2b01      	cmp	r3, #1
   26450:	d12a      	bne.n	264a8 <le_conn_update_complete+0x88>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   26452:	f44f 6180 	mov.w	r1, #1024	; 0x400
   26456:	4630      	mov	r0, r6
   26458:	f012 fa7a 	bl	38950 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   2645c:	0542      	lsls	r2, r0, #21
   2645e:	d40f      	bmi.n	26480 <le_conn_update_complete+0x60>
		param.interval_min = conn->le.interval_min;
   26460:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   26464:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   26466:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   26468:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   2646c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   2646e:	4620      	mov	r0, r4
   26470:	f002 ff4e 	bl	29310 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   26474:	4620      	mov	r0, r4
}
   26476:	b002      	add	sp, #8
   26478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2647c:	f002 b9c0 	b.w	28800 <bt_conn_unref>
		if (!evt->status) {
   26480:	782b      	ldrb	r3, [r5, #0]
   26482:	b98b      	cbnz	r3, 264a8 <le_conn_update_complete+0x88>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   26484:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   26488:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   2648c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   26490:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   26494:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   26498:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2649c:	f46f 7180 	mvn.w	r1, #256	; 0x100
   264a0:	4630      	mov	r0, r6
   264a2:	f012 fa64 	bl	3896e <atomic_and.isra.0>
}
   264a6:	e017      	b.n	264d8 <le_conn_update_complete+0xb8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   264a8:	f3bf 8f5b 	dmb	ish
   264ac:	6863      	ldr	r3, [r4, #4]
   264ae:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   264b2:	05db      	lsls	r3, r3, #23
   264b4:	d5f2      	bpl.n	2649c <le_conn_update_complete+0x7c>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   264b6:	782b      	ldrb	r3, [r5, #0]
   264b8:	2b20      	cmp	r3, #32
   264ba:	d1ef      	bne.n	2649c <le_conn_update_complete+0x7c>
			   conn->le.conn_param_retry_countdown) {
   264bc:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   264c0:	2b00      	cmp	r3, #0
   264c2:	d0eb      	beq.n	2649c <le_conn_update_complete+0x7c>
			conn->le.conn_param_retry_countdown--;
   264c4:	3b01      	subs	r3, #1
   264c6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   264ca:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   264ce:	2300      	movs	r3, #0
   264d0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   264d4:	f00c fb80 	bl	32bd8 <k_work_schedule>
		notify_le_param_updated(conn);
   264d8:	4620      	mov	r0, r4
   264da:	f002 fac7 	bl	28a6c <notify_le_param_updated>
   264de:	e7c9      	b.n	26474 <le_conn_update_complete+0x54>
   264e0:	0003d5a7 	.word	0x0003d5a7

000264e4 <hci_cmd_done>:
{
   264e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264e6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   264e8:	7a90      	ldrb	r0, [r2, #10]
{
   264ea:	460e      	mov	r6, r1
   264ec:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   264ee:	f005 fcb5 	bl	2be5c <net_buf_pool_get>
   264f2:	4b28      	ldr	r3, [pc, #160]	; (26594 <hci_cmd_done+0xb0>)
   264f4:	4283      	cmp	r3, r0
   264f6:	d14b      	bne.n	26590 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   264f8:	4620      	mov	r0, r4
   264fa:	f005 fcb7 	bl	2be6c <net_buf_id>
   264fe:	4d26      	ldr	r5, [pc, #152]	; (26598 <hci_cmd_done+0xb4>)
   26500:	230c      	movs	r3, #12
   26502:	fb03 5000 	mla	r0, r3, r0, r5
   26506:	8843      	ldrh	r3, [r0, #2]
   26508:	42bb      	cmp	r3, r7
   2650a:	d141      	bne.n	26590 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   2650c:	4f23      	ldr	r7, [pc, #140]	; (2659c <hci_cmd_done+0xb8>)
   2650e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
   26512:	b120      	cbz	r0, 2651e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   26514:	f005 fe84 	bl	2c220 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   26518:	2300      	movs	r3, #0
   2651a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	if (cmd(buf)->state && !status) {
   2651e:	4620      	mov	r0, r4
   26520:	f005 fca4 	bl	2be6c <net_buf_id>
   26524:	270c      	movs	r7, #12
   26526:	fb07 5000 	mla	r0, r7, r0, r5
   2652a:	6843      	ldr	r3, [r0, #4]
   2652c:	b19b      	cbz	r3, 26556 <hci_cmd_done+0x72>
   2652e:	b996      	cbnz	r6, 26556 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   26530:	4620      	mov	r0, r4
   26532:	f005 fc9b 	bl	2be6c <net_buf_id>
   26536:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2653a:	2101      	movs	r1, #1
   2653c:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   2653e:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   26542:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   26544:	f003 071f 	and.w	r7, r3, #31
   26548:	40b9      	lsls	r1, r7
	if (val) {
   2654a:	095b      	lsrs	r3, r3, #5
   2654c:	b1d2      	cbz	r2, 26584 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2654e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   26552:	f012 f9fd 	bl	38950 <atomic_or>
	if (cmd(buf)->sync) {
   26556:	4620      	mov	r0, r4
   26558:	f005 fc88 	bl	2be6c <net_buf_id>
   2655c:	270c      	movs	r7, #12
   2655e:	fb07 5000 	mla	r0, r7, r0, r5
   26562:	6883      	ldr	r3, [r0, #8]
   26564:	b1a3      	cbz	r3, 26590 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   26566:	4620      	mov	r0, r4
   26568:	f005 fc80 	bl	2be6c <net_buf_id>
   2656c:	4378      	muls	r0, r7
   2656e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   26570:	4620      	mov	r0, r4
   26572:	f005 fc7b 	bl	2be6c <net_buf_id>
   26576:	fb07 5500 	mla	r5, r7, r0, r5
   2657a:	68a8      	ldr	r0, [r5, #8]
}
   2657c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   26580:	f00b befa 	b.w	32378 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26584:	43c9      	mvns	r1, r1
   26586:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2658a:	f012 f9f0 	bl	3896e <atomic_and.isra.0>
   2658e:	e7e2      	b.n	26556 <hci_cmd_done+0x72>
   26590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26592:	bf00      	nop
   26594:	20000c00 	.word	0x20000c00
   26598:	200038ac 	.word	0x200038ac
   2659c:	20000440 	.word	0x20000440

000265a0 <hci_cmd_status>:
{
   265a0:	b538      	push	{r3, r4, r5, lr}
   265a2:	2104      	movs	r1, #4
   265a4:	4604      	mov	r4, r0
   265a6:	300c      	adds	r0, #12
   265a8:	f005 ff26 	bl	2c3f8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   265ac:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   265ae:	7801      	ldrb	r1, [r0, #0]
   265b0:	8840      	ldrh	r0, [r0, #2]
   265b2:	4622      	mov	r2, r4
   265b4:	f7ff ff96 	bl	264e4 <hci_cmd_done>
	if (ncmd) {
   265b8:	b125      	cbz	r5, 265c4 <hci_cmd_status+0x24>
   265ba:	4803      	ldr	r0, [pc, #12]	; (265c8 <hci_cmd_status+0x28>)
}
   265bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   265c0:	f00b beda 	b.w	32378 <z_impl_k_sem_give>
   265c4:	bd38      	pop	{r3, r4, r5, pc}
   265c6:	bf00      	nop
   265c8:	20000518 	.word	0x20000518

000265cc <hci_cmd_complete>:
{
   265cc:	b538      	push	{r3, r4, r5, lr}
   265ce:	2103      	movs	r1, #3
   265d0:	4604      	mov	r4, r0
   265d2:	300c      	adds	r0, #12
   265d4:	f005 ff10 	bl	2c3f8 <net_buf_simple_pull_mem>
	status = buf->data[0];
   265d8:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   265da:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   265dc:	7819      	ldrb	r1, [r3, #0]
   265de:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   265e2:	4622      	mov	r2, r4
   265e4:	f7ff ff7e 	bl	264e4 <hci_cmd_done>
	if (ncmd) {
   265e8:	b125      	cbz	r5, 265f4 <hci_cmd_complete+0x28>
   265ea:	4803      	ldr	r0, [pc, #12]	; (265f8 <hci_cmd_complete+0x2c>)
}
   265ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   265f0:	f00b bec2 	b.w	32378 <z_impl_k_sem_give>
   265f4:	bd38      	pop	{r3, r4, r5, pc}
   265f6:	bf00      	nop
   265f8:	20000518 	.word	0x20000518

000265fc <hci_num_completed_packets>:
{
   265fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   26600:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   26602:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   26604:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 266d8 <hci_num_completed_packets+0xdc>
			tx->pending_no_cb = 0U;
   26608:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   2660a:	783b      	ldrb	r3, [r7, #0]
   2660c:	429d      	cmp	r5, r3
   2660e:	db01      	blt.n	26614 <hci_num_completed_packets+0x18>
}
   26610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   26614:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   26618:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   2661c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   26620:	4650      	mov	r0, sl
   26622:	f002 f91d 	bl	28860 <bt_conn_lookup_handle>
		if (!conn) {
   26626:	4604      	mov	r4, r0
   26628:	b1d0      	cbz	r0, 26660 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   2662a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   2662e:	b346      	cbz	r6, 26682 <hci_num_completed_packets+0x86>
	__asm__ volatile(
   26630:	f04f 0340 	mov.w	r3, #64	; 0x40
   26634:	f3ef 8211 	mrs	r2, BASEPRI
   26638:	f383 8812 	msr	BASEPRI_MAX, r3
   2663c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   26640:	69e3      	ldr	r3, [r4, #28]
   26642:	b1a3      	cbz	r3, 2666e <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   26644:	3b01      	subs	r3, #1
   26646:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   26648:	f382 8811 	msr	BASEPRI, r2
   2664c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   26650:	4620      	mov	r0, r4
   26652:	f001 ff35 	bl	284c0 <bt_conn_get_pkts>
   26656:	3e01      	subs	r6, #1
   26658:	f00b fe8e 	bl	32378 <z_impl_k_sem_give>
   2665c:	b2b6      	uxth	r6, r6
   2665e:	e7e6      	b.n	2662e <hci_num_completed_packets+0x32>
			LOG_ERR("No connection for handle %u", handle);
   26660:	481e      	ldr	r0, [pc, #120]	; (266dc <hci_num_completed_packets+0xe0>)
   26662:	4652      	mov	r2, sl
   26664:	2145      	movs	r1, #69	; 0x45
   26666:	f011 fcbd 	bl	37fe4 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   2666a:	3501      	adds	r5, #1
   2666c:	e7cd      	b.n	2660a <hci_num_completed_packets+0xe>
   2666e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   26670:	b95b      	cbnz	r3, 2668a <hci_num_completed_packets+0x8e>
   26672:	f382 8811 	msr	BASEPRI, r2
   26676:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   2667a:	2145      	movs	r1, #69	; 0x45
   2667c:	4648      	mov	r0, r9
   2667e:	f011 fcb1 	bl	37fe4 <z_log_minimal_printk>
		bt_conn_unref(conn);
   26682:	4620      	mov	r0, r4
   26684:	f002 f8bc 	bl	28800 <bt_conn_unref>
   26688:	e7ef      	b.n	2666a <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2668a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2668c:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   2668e:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26690:	428b      	cmp	r3, r1
	list->tail = node;
   26692:	bf08      	it	eq
   26694:	61a0      	streq	r0, [r4, #24]
   26696:	f382 8811 	msr	BASEPRI, r2
   2669a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2669e:	f04f 0240 	mov.w	r2, #64	; 0x40
   266a2:	f3ef 8111 	mrs	r1, BASEPRI
   266a6:	f382 8812 	msr	BASEPRI_MAX, r2
   266aa:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   266ae:	68da      	ldr	r2, [r3, #12]
   266b0:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   266b2:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   266b6:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   266ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   266bc:	b94a      	cbnz	r2, 266d2 <hci_num_completed_packets+0xd6>
	list->head = node;
   266be:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   266c2:	f381 8811 	msr	BASEPRI, r1
   266c6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   266ca:	4650      	mov	r0, sl
   266cc:	f00c f982 	bl	329d4 <k_work_submit>
   266d0:	e7be      	b.n	26650 <hci_num_completed_packets+0x54>
	parent->next = child;
   266d2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   266d4:	6263      	str	r3, [r4, #36]	; 0x24
}
   266d6:	e7f4      	b.n	266c2 <hci_num_completed_packets+0xc6>
   266d8:	0003d6fe 	.word	0x0003d6fe
   266dc:	0003d6dd 	.word	0x0003d6dd

000266e0 <bt_hci_cmd_state_set_init>:
{
   266e0:	b510      	push	{r4, lr}
	state->bit = bit;
   266e2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   266e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   266ea:	720b      	strb	r3, [r1, #8]
{
   266ec:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   266ee:	f005 fbbd 	bl	2be6c <net_buf_id>
   266f2:	4b03      	ldr	r3, [pc, #12]	; (26700 <bt_hci_cmd_state_set_init+0x20>)
   266f4:	220c      	movs	r2, #12
   266f6:	fb02 3300 	mla	r3, r2, r0, r3
   266fa:	605c      	str	r4, [r3, #4]
}
   266fc:	bd10      	pop	{r4, pc}
   266fe:	bf00      	nop
   26700:	200038ac 	.word	0x200038ac

00026704 <bt_hci_cmd_create>:
{
   26704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   26708:	f04f 32ff 	mov.w	r2, #4294967295
   2670c:	4606      	mov	r6, r0
   2670e:	f04f 33ff 	mov.w	r3, #4294967295
   26712:	481d      	ldr	r0, [pc, #116]	; (26788 <bt_hci_cmd_create+0x84>)
   26714:	460f      	mov	r7, r1
   26716:	f013 fdcd 	bl	3a2b4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   2671a:	4604      	mov	r4, r0
   2671c:	b950      	cbnz	r0, 26734 <bt_hci_cmd_create+0x30>
   2671e:	491b      	ldr	r1, [pc, #108]	; (2678c <bt_hci_cmd_create+0x88>)
   26720:	481b      	ldr	r0, [pc, #108]	; (26790 <bt_hci_cmd_create+0x8c>)
   26722:	f240 1201 	movw	r2, #257	; 0x101
   26726:	f011 fc4f 	bl	37fc8 <assert_print>
   2672a:	4818      	ldr	r0, [pc, #96]	; (2678c <bt_hci_cmd_create+0x88>)
   2672c:	f240 1101 	movw	r1, #257	; 0x101
   26730:	f011 fc43 	bl	37fba <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   26734:	f100 0a0c 	add.w	sl, r0, #12
   26738:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2673a:	f04f 0800 	mov.w	r8, #0
   2673e:	4650      	mov	r0, sl
   26740:	f005 fc96 	bl	2c070 <net_buf_simple_reserve>
   26744:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   26748:	4620      	mov	r0, r4
   2674a:	f005 fb8f 	bl	2be6c <net_buf_id>
   2674e:	4d11      	ldr	r5, [pc, #68]	; (26794 <bt_hci_cmd_create+0x90>)
   26750:	f04f 090c 	mov.w	r9, #12
   26754:	fb09 5000 	mla	r0, r9, r0, r5
   26758:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2675a:	4620      	mov	r0, r4
   2675c:	f005 fb86 	bl	2be6c <net_buf_id>
   26760:	fb09 5000 	mla	r0, r9, r0, r5
   26764:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   26768:	4620      	mov	r0, r4
   2676a:	f005 fb7f 	bl	2be6c <net_buf_id>
   2676e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   26772:	2103      	movs	r1, #3
   26774:	f8c5 8004 	str.w	r8, [r5, #4]
   26778:	4650      	mov	r0, sl
   2677a:	f005 fe57 	bl	2c42c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   2677e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   26780:	7087      	strb	r7, [r0, #2]
}
   26782:	4620      	mov	r0, r4
   26784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26788:	20000c00 	.word	0x20000c00
   2678c:	0003d640 	.word	0x0003d640
   26790:	0003c7f8 	.word	0x0003c7f8
   26794:	200038ac 	.word	0x200038ac

00026798 <bt_hci_cmd_send_sync>:
{
   26798:	b570      	push	{r4, r5, r6, lr}
   2679a:	4615      	mov	r5, r2
   2679c:	b086      	sub	sp, #24
	if (!buf) {
   2679e:	460c      	mov	r4, r1
   267a0:	b921      	cbnz	r1, 267ac <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   267a2:	f7ff ffaf 	bl	26704 <bt_hci_cmd_create>
		if (!buf) {
   267a6:	4604      	mov	r4, r0
   267a8:	2800      	cmp	r0, #0
   267aa:	d041      	beq.n	26830 <bt_hci_cmd_send_sync+0x98>
	return z_impl_k_sem_init(sem, initial_count, limit);
   267ac:	2201      	movs	r2, #1
   267ae:	2100      	movs	r1, #0
   267b0:	4668      	mov	r0, sp
   267b2:	f014 fec0 	bl	3b536 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   267b6:	4620      	mov	r0, r4
   267b8:	f005 fb58 	bl	2be6c <net_buf_id>
   267bc:	4e1e      	ldr	r6, [pc, #120]	; (26838 <bt_hci_cmd_send_sync+0xa0>)
   267be:	230c      	movs	r3, #12
   267c0:	fb03 6000 	mla	r0, r3, r0, r6
   267c4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   267c8:	4620      	mov	r0, r4
   267ca:	f005 fd6b 	bl	2c2a4 <net_buf_ref>
   267ce:	4601      	mov	r1, r0
   267d0:	481a      	ldr	r0, [pc, #104]	; (2683c <bt_hci_cmd_send_sync+0xa4>)
   267d2:	f005 fd05 	bl	2c1e0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   267d6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   267da:	2300      	movs	r3, #0
   267dc:	4668      	mov	r0, sp
   267de:	f00b fe07 	bl	323f0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   267e2:	b158      	cbz	r0, 267fc <bt_hci_cmd_send_sync+0x64>
   267e4:	4916      	ldr	r1, [pc, #88]	; (26840 <bt_hci_cmd_send_sync+0xa8>)
   267e6:	4817      	ldr	r0, [pc, #92]	; (26844 <bt_hci_cmd_send_sync+0xac>)
   267e8:	f240 1249 	movw	r2, #329	; 0x149
   267ec:	f011 fbec 	bl	37fc8 <assert_print>
   267f0:	4040      	eors	r0, r0
   267f2:	f380 8811 	msr	BASEPRI, r0
   267f6:	f04f 0003 	mov.w	r0, #3
   267fa:	df02      	svc	2
	status = cmd(buf)->status;
   267fc:	4620      	mov	r0, r4
   267fe:	f005 fb35 	bl	2be6c <net_buf_id>
   26802:	230c      	movs	r3, #12
   26804:	4358      	muls	r0, r3
   26806:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   26808:	b156      	cbz	r6, 26820 <bt_hci_cmd_send_sync+0x88>
		net_buf_unref(buf);
   2680a:	4620      	mov	r0, r4
   2680c:	f005 fd08 	bl	2c220 <net_buf_unref>
			return -ECONNREFUSED;
   26810:	2e09      	cmp	r6, #9
   26812:	bf14      	ite	ne
   26814:	f06f 0004 	mvnne.w	r0, #4
   26818:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   2681c:	b006      	add	sp, #24
   2681e:	bd70      	pop	{r4, r5, r6, pc}
	if (rsp) {
   26820:	b115      	cbz	r5, 26828 <bt_hci_cmd_send_sync+0x90>
		*rsp = buf;
   26822:	602c      	str	r4, [r5, #0]
	return 0;
   26824:	2000      	movs	r0, #0
   26826:	e7f9      	b.n	2681c <bt_hci_cmd_send_sync+0x84>
		net_buf_unref(buf);
   26828:	4620      	mov	r0, r4
   2682a:	f005 fcf9 	bl	2c220 <net_buf_unref>
   2682e:	e7f9      	b.n	26824 <bt_hci_cmd_send_sync+0x8c>
			return -ENOBUFS;
   26830:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26834:	e7f2      	b.n	2681c <bt_hci_cmd_send_sync+0x84>
   26836:	bf00      	nop
   26838:	200038ac 	.word	0x200038ac
   2683c:	2000053c 	.word	0x2000053c
   26840:	0003d640 	.word	0x0003d640
   26844:	0003c7f8 	.word	0x0003c7f8

00026848 <hci_le_read_max_data_len>:
{
   26848:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2684a:	4606      	mov	r6, r0
   2684c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   2684e:	aa01      	add	r2, sp, #4
   26850:	2100      	movs	r1, #0
   26852:	f242 002f 	movw	r0, #8239	; 0x202f
   26856:	f7ff ff9f 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   2685a:	4604      	mov	r4, r0
   2685c:	b130      	cbz	r0, 2686c <hci_le_read_max_data_len+0x24>
		LOG_ERR("Failed to read DLE max data len");
   2685e:	4809      	ldr	r0, [pc, #36]	; (26884 <hci_le_read_max_data_len+0x3c>)
   26860:	2145      	movs	r1, #69	; 0x45
   26862:	f011 fbbf 	bl	37fe4 <z_log_minimal_printk>
}
   26866:	4620      	mov	r0, r4
   26868:	b002      	add	sp, #8
   2686a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   2686c:	9801      	ldr	r0, [sp, #4]
   2686e:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   26870:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   26874:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   26876:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   2687a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   2687c:	f005 fcd0 	bl	2c220 <net_buf_unref>
	return 0;
   26880:	e7f1      	b.n	26866 <hci_le_read_max_data_len+0x1e>
   26882:	bf00      	nop
   26884:	0003d71a 	.word	0x0003d71a

00026888 <bt_hci_le_rand>:
{
   26888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   2688a:	4b14      	ldr	r3, [pc, #80]	; (268dc <bt_hci_le_rand+0x54>)
   2688c:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
   26890:	2b00      	cmp	r3, #0
{
   26892:	4605      	mov	r5, r0
   26894:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   26896:	da1d      	bge.n	268d4 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   26898:	b914      	cbnz	r4, 268a0 <bt_hci_le_rand+0x18>
	return 0;
   2689a:	4620      	mov	r0, r4
}
   2689c:	b003      	add	sp, #12
   2689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   268a0:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   268a2:	aa01      	add	r2, sp, #4
   268a4:	f04f 0100 	mov.w	r1, #0
   268a8:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   268ac:	4626      	mov	r6, r4
   268ae:	bf28      	it	cs
   268b0:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   268b2:	f7ff ff71 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   268b6:	2800      	cmp	r0, #0
   268b8:	d1f0      	bne.n	2689c <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   268ba:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   268bc:	68f9      	ldr	r1, [r7, #12]
   268be:	4632      	mov	r2, r6
   268c0:	3101      	adds	r1, #1
   268c2:	4628      	mov	r0, r5
   268c4:	f011 ff79 	bl	387ba <memcpy>
		net_buf_unref(rsp);
   268c8:	4638      	mov	r0, r7
   268ca:	f005 fca9 	bl	2c220 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   268ce:	4435      	add	r5, r6
		len -= count;
   268d0:	1ba4      	subs	r4, r4, r6
   268d2:	e7e1      	b.n	26898 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   268d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   268d8:	e7e0      	b.n	2689c <bt_hci_le_rand+0x14>
   268da:	bf00      	nop
   268dc:	20000440 	.word	0x20000440

000268e0 <bt_get_phy>:
	switch (hci_phy) {
   268e0:	3801      	subs	r0, #1
   268e2:	b2c0      	uxtb	r0, r0
   268e4:	2802      	cmp	r0, #2
   268e6:	bf9a      	itte	ls
   268e8:	4b01      	ldrls	r3, [pc, #4]	; (268f0 <bt_get_phy+0x10>)
   268ea:	5c18      	ldrbls	r0, [r3, r0]
{
   268ec:	2000      	movhi	r0, #0
}
   268ee:	4770      	bx	lr
   268f0:	0003d8c9 	.word	0x0003d8c9

000268f4 <le_phy_update_complete>:
{
   268f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   268f6:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   268f8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   268fc:	4630      	mov	r0, r6
   268fe:	f001 ffaf 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   26902:	4604      	mov	r4, r0
   26904:	b930      	cbnz	r0, 26914 <le_phy_update_complete+0x20>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   26906:	4632      	mov	r2, r6
   26908:	480b      	ldr	r0, [pc, #44]	; (26938 <le_phy_update_complete+0x44>)
}
   2690a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   2690e:	2145      	movs	r1, #69	; 0x45
   26910:	f011 bb68 	b.w	37fe4 <z_log_minimal_printk>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   26914:	78e8      	ldrb	r0, [r5, #3]
   26916:	f7ff ffe3 	bl	268e0 <bt_get_phy>
   2691a:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   2691e:	7928      	ldrb	r0, [r5, #4]
   26920:	f7ff ffde 	bl	268e0 <bt_get_phy>
   26924:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
	notify_le_phy_updated(conn);
   26928:	4620      	mov	r0, r4
   2692a:	f002 f8fb 	bl	28b24 <notify_le_phy_updated>
	bt_conn_unref(conn);
   2692e:	4620      	mov	r0, r4
}
   26930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   26934:	f001 bf64 	b.w	28800 <bt_conn_unref>
   26938:	0003d5a7 	.word	0x0003d5a7

0002693c <bt_hci_le_enh_conn_complete>:
{
   2693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   26940:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   26944:	4a8e      	ldr	r2, [pc, #568]	; (26b80 <bt_hci_le_enh_conn_complete+0x244>)
	handle |= ~BT_ACL_HANDLE_MASK;
   26946:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   2694a:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   2694c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   26950:	b29b      	uxth	r3, r3
		if (disconnected_handles[i] == handle) {
   26952:	4299      	cmp	r1, r3
{
   26954:	b086      	sub	sp, #24
   26956:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   26958:	fa1f f987 	uxth.w	r9, r7
		if (disconnected_handles[i] == handle) {
   2695c:	d036      	beq.n	269cc <bt_hci_le_enh_conn_complete+0x90>
   2695e:	8851      	ldrh	r1, [r2, #2]
   26960:	4299      	cmp	r1, r3
   26962:	d135      	bne.n	269d0 <bt_hci_le_enh_conn_complete+0x94>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   26964:	2301      	movs	r3, #1
			disconnected_handles[i] = 0;
   26966:	2100      	movs	r1, #0
   26968:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   2696c:	f04f 0801 	mov.w	r8, #1
	if (evt->status) {
   26970:	7828      	ldrb	r0, [r5, #0]
   26972:	bb40      	cbnz	r0, 269c6 <bt_hci_le_enh_conn_complete+0x8a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   26974:	792b      	ldrb	r3, [r5, #4]
   26976:	3b02      	subs	r3, #2
   26978:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2697a:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2697e:	d82a      	bhi.n	269d6 <bt_hci_le_enh_conn_complete+0x9a>
	memcpy(dst, src, sizeof(*dst));
   26980:	2207      	movs	r2, #7
   26982:	4651      	mov	r1, sl
   26984:	a804      	add	r0, sp, #16
   26986:	f011 ff18 	bl	387ba <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2698a:	f89d 3010 	ldrb.w	r3, [sp, #16]
	memcpy(dst, src, sizeof(*dst));
   2698e:	2206      	movs	r2, #6
   26990:	3b02      	subs	r3, #2
   26992:	f105 0111 	add.w	r1, r5, #17
   26996:	f10d 0009 	add.w	r0, sp, #9
   2699a:	f88d 3010 	strb.w	r3, [sp, #16]
   2699e:	f011 ff0c 	bl	387ba <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   269a2:	2301      	movs	r3, #1
   269a4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   269a8:	78eb      	ldrb	r3, [r5, #3]
   269aa:	2b01      	cmp	r3, #1
   269ac:	d028      	beq.n	26a00 <bt_hci_le_enh_conn_complete+0xc4>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   269ae:	4650      	mov	r0, sl
   269b0:	f7ff fac0 	bl	25f34 <bt_addr_le_str>
   269b4:	2145      	movs	r1, #69	; 0x45
   269b6:	4602      	mov	r2, r0
   269b8:	4872      	ldr	r0, [pc, #456]	; (26b84 <bt_hci_le_enh_conn_complete+0x248>)
   269ba:	f011 fb13 	bl	37fe4 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   269be:	211f      	movs	r1, #31
   269c0:	4648      	mov	r0, r9
   269c2:	f011 ffe1 	bl	38988 <bt_hci_disconnect>
}
   269c6:	b006      	add	sp, #24
   269c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   269cc:	2300      	movs	r3, #0
   269ce:	e7ca      	b.n	26966 <bt_hci_le_enh_conn_complete+0x2a>
	return false;
   269d0:	f04f 0800 	mov.w	r8, #0
   269d4:	e7cc      	b.n	26970 <bt_hci_le_enh_conn_complete+0x34>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   269d6:	78eb      	ldrb	r3, [r5, #3]
   269d8:	2b01      	cmp	r3, #1
   269da:	bf08      	it	eq
   269dc:	4b6a      	ldreq	r3, [pc, #424]	; (26b88 <bt_hci_le_enh_conn_complete+0x24c>)
		bt_addr_le_copy(&id_addr,
   269de:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   269e0:	bf08      	it	eq
   269e2:	f893 0023 	ldrbeq.w	r0, [r3, #35]	; 0x23
		bt_addr_le_copy(&id_addr,
   269e6:	f012 f838 	bl	38a5a <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   269ea:	2207      	movs	r2, #7
   269ec:	4601      	mov	r1, r0
   269ee:	a804      	add	r0, sp, #16
   269f0:	f011 fee3 	bl	387ba <memcpy>
   269f4:	2207      	movs	r2, #7
   269f6:	4651      	mov	r1, sl
   269f8:	a802      	add	r0, sp, #8
   269fa:	f011 fede 	bl	387ba <memcpy>
}
   269fe:	e7d3      	b.n	269a8 <bt_hci_le_enh_conn_complete+0x6c>
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   26a00:	4e61      	ldr	r6, [pc, #388]	; (26b88 <bt_hci_le_enh_conn_complete+0x24c>)
   26a02:	2205      	movs	r2, #5
   26a04:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
   26a08:	a904      	add	r1, sp, #16
   26a0a:	f002 f94f 	bl	28cac <bt_conn_lookup_state_le>
		if (!conn) {
   26a0e:	4604      	mov	r4, r0
   26a10:	b940      	cbnz	r0, 26a24 <bt_hci_le_enh_conn_complete+0xe8>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   26a12:	495e      	ldr	r1, [pc, #376]	; (26b8c <bt_hci_le_enh_conn_complete+0x250>)
   26a14:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
   26a18:	2204      	movs	r2, #4
   26a1a:	f002 f947 	bl	28cac <bt_conn_lookup_state_le>
	if (!conn) {
   26a1e:	4604      	mov	r4, r0
   26a20:	2800      	cmp	r0, #0
   26a22:	d0c4      	beq.n	269ae <bt_hci_le_enh_conn_complete+0x72>
	conn->handle = handle;
   26a24:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   26a26:	2207      	movs	r2, #7
   26a28:	f820 7b90 	strh.w	r7, [r0], #144
   26a2c:	a904      	add	r1, sp, #16
   26a2e:	f011 fec4 	bl	387ba <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   26a32:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   26a36:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   26a3a:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   26a3e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   26a42:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   26a46:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   26a4a:	78eb      	ldrb	r3, [r5, #3]
   26a4c:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   26a4e:	2200      	movs	r2, #0
   26a50:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   26a52:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   26a54:	f240 1201 	movw	r2, #257	; 0x101
   26a58:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   26a5c:	d112      	bne.n	26a84 <bt_hci_le_enh_conn_complete+0x148>
   26a5e:	2207      	movs	r2, #7
   26a60:	a902      	add	r1, sp, #8
   26a62:	f104 0097 	add.w	r0, r4, #151	; 0x97
   26a66:	f011 fea8 	bl	387ba <memcpy>
	memcpy(dst, src, sizeof(*dst));
   26a6a:	f105 010b 	add.w	r1, r5, #11
   26a6e:	2206      	movs	r2, #6
   26a70:	f104 009f 	add.w	r0, r4, #159	; 0x9f
   26a74:	f011 fea1 	bl	387ba <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   26a78:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
   26a7c:	065d      	lsls	r5, r3, #25
   26a7e:	d501      	bpl.n	26a84 <bt_hci_le_enh_conn_complete+0x148>
			bt_le_adv_resume();
   26a80:	f001 fa50 	bl	27f24 <bt_le_adv_resume>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_PHY, sizeof(*cp));
   26a84:	2102      	movs	r1, #2
   26a86:	f242 0030 	movw	r0, #8240	; 0x2030
   26a8a:	f7ff fe3b 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   26a8e:	4605      	mov	r5, r0
   26a90:	b1d8      	cbz	r0, 26aca <bt_hci_le_enh_conn_complete+0x18e>
   26a92:	2102      	movs	r1, #2
   26a94:	300c      	adds	r0, #12
   26a96:	f005 fcc9 	bl	2c42c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26a9a:	8823      	ldrh	r3, [r4, #0]
   26a9c:	8003      	strh	r3, [r0, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_PHY, buf, &rsp);
   26a9e:	aa01      	add	r2, sp, #4
   26aa0:	4629      	mov	r1, r5
   26aa2:	f242 0030 	movw	r0, #8240	; 0x2030
   26aa6:	f7ff fe77 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   26aaa:	b970      	cbnz	r0, 26aca <bt_hci_le_enh_conn_complete+0x18e>
	rp = (void *)rsp->data;
   26aac:	9a01      	ldr	r2, [sp, #4]
   26aae:	68d1      	ldr	r1, [r2, #12]
	conn->le.phy.tx_phy = bt_get_phy(rp->tx_phy);
   26ab0:	78c8      	ldrb	r0, [r1, #3]
   26ab2:	f7ff ff15 	bl	268e0 <bt_get_phy>
   26ab6:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
	conn->le.phy.rx_phy = bt_get_phy(rp->rx_phy);
   26aba:	7908      	ldrb	r0, [r1, #4]
   26abc:	f7ff ff10 	bl	268e0 <bt_get_phy>
   26ac0:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
	net_buf_unref(rsp);
   26ac4:	4610      	mov	r0, r2
   26ac6:	f005 fbab 	bl	2c220 <net_buf_unref>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   26aca:	2107      	movs	r1, #7
   26acc:	4620      	mov	r0, r4
   26ace:	f001 fecf 	bl	28870 <bt_conn_set_state>
	if (is_disconnected) {
   26ad2:	f1b8 0f00 	cmp.w	r8, #0
   26ad6:	d003      	beq.n	26ae0 <bt_hci_le_enh_conn_complete+0x1a4>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   26ad8:	2101      	movs	r1, #1
   26ada:	4620      	mov	r0, r4
   26adc:	f001 fec8 	bl	28870 <bt_conn_set_state>
	bt_conn_connected(conn);
   26ae0:	4620      	mov	r0, r4
   26ae2:	f012 f9c2 	bl	38e6a <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   26ae6:	7aa3      	ldrb	r3, [r4, #10]
   26ae8:	2b07      	cmp	r3, #7
   26aea:	d141      	bne.n	26b70 <bt_hci_le_enh_conn_complete+0x234>
   26aec:	f3bf 8f5b 	dmb	ish
   26af0:	6863      	ldr	r3, [r4, #4]
   26af2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   26af6:	04d8      	lsls	r0, r3, #19
   26af8:	d41e      	bmi.n	26b38 <bt_hci_le_enh_conn_complete+0x1fc>
   26afa:	78e3      	ldrb	r3, [r4, #3]
   26afc:	b11b      	cbz	r3, 26b06 <bt_hci_le_enh_conn_complete+0x1ca>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   26afe:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   26b02:	0719      	lsls	r1, r3, #28
   26b04:	d518      	bpl.n	26b38 <bt_hci_le_enh_conn_complete+0x1fc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   26b06:	2102      	movs	r1, #2
   26b08:	f242 0016 	movw	r0, #8214	; 0x2016
   26b0c:	f7ff fdfa 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   26b10:	4605      	mov	r5, r0
   26b12:	b388      	cbz	r0, 26b78 <bt_hci_le_enh_conn_complete+0x23c>
   26b14:	2102      	movs	r1, #2
   26b16:	300c      	adds	r0, #12
   26b18:	f005 fc88 	bl	2c42c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26b1c:	8823      	ldrh	r3, [r4, #0]
   26b1e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   26b20:	2200      	movs	r2, #0
   26b22:	4629      	mov	r1, r5
   26b24:	f242 0016 	movw	r0, #8214	; 0x2016
   26b28:	f7ff fe36 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   26b2c:	4602      	mov	r2, r0
   26b2e:	b118      	cbz	r0, 26b38 <bt_hci_le_enh_conn_complete+0x1fc>
			LOG_ERR("Failed read remote features (%d)", err);
   26b30:	4817      	ldr	r0, [pc, #92]	; (26b90 <bt_hci_le_enh_conn_complete+0x254>)
   26b32:	2145      	movs	r1, #69	; 0x45
   26b34:	f011 fa56 	bl	37fe4 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   26b38:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   26b3c:	069a      	lsls	r2, r3, #26
   26b3e:	d517      	bpl.n	26b70 <bt_hci_le_enh_conn_complete+0x234>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   26b40:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
   26b44:	689b      	ldr	r3, [r3, #8]
   26b46:	079b      	lsls	r3, r3, #30
   26b48:	d512      	bpl.n	26b70 <bt_hci_le_enh_conn_complete+0x234>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   26b4a:	a901      	add	r1, sp, #4
   26b4c:	f10d 0002 	add.w	r0, sp, #2
   26b50:	f7ff fe7a 	bl	26848 <hci_le_read_max_data_len>
			if (!err) {
   26b54:	b960      	cbnz	r0, 26b70 <bt_hci_le_enh_conn_complete+0x234>
				err = bt_le_set_data_len(conn,
   26b56:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   26b5a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   26b5e:	4620      	mov	r0, r4
   26b60:	f011 ff2d 	bl	389be <bt_le_set_data_len>
				if (err) {
   26b64:	4602      	mov	r2, r0
   26b66:	b118      	cbz	r0, 26b70 <bt_hci_le_enh_conn_complete+0x234>
					LOG_ERR("Failed to set data len (%d)", err);
   26b68:	480a      	ldr	r0, [pc, #40]	; (26b94 <bt_hci_le_enh_conn_complete+0x258>)
   26b6a:	2145      	movs	r1, #69	; 0x45
   26b6c:	f011 fa3a 	bl	37fe4 <z_log_minimal_printk>
	bt_conn_unref(conn);
   26b70:	4620      	mov	r0, r4
   26b72:	f001 fe45 	bl	28800 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   26b76:	e726      	b.n	269c6 <bt_hci_le_enh_conn_complete+0x8a>
		return -ENOBUFS;
   26b78:	f06f 0268 	mvn.w	r2, #104	; 0x68
   26b7c:	e7d8      	b.n	26b30 <bt_hci_le_enh_conn_complete+0x1f4>
   26b7e:	bf00      	nop
   26b80:	20004c68 	.word	0x20004c68
   26b84:	0003d73f 	.word	0x0003d73f
   26b88:	20000440 	.word	0x20000440
   26b8c:	0003d519 	.word	0x0003d519
   26b90:	0003d760 	.word	0x0003d760
   26b94:	0003d786 	.word	0x0003d786

00026b98 <le_legacy_conn_complete>:
{
   26b98:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   26b9a:	68c1      	ldr	r1, [r0, #12]
   26b9c:	4c18      	ldr	r4, [pc, #96]	; (26c00 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   26b9e:	780b      	ldrb	r3, [r1, #0]
{
   26ba0:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   26ba2:	2207      	movs	r2, #7
	enh.status         = evt->status;
   26ba4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   26ba8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   26bac:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   26bb0:	78cb      	ldrb	r3, [r1, #3]
   26bb2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   26bb6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   26bba:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   26bbe:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   26bc2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   26bc6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   26bca:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   26bce:	7c4b      	ldrb	r3, [r1, #17]
   26bd0:	f88d 301d 	strb.w	r3, [sp, #29]
   26bd4:	3104      	adds	r1, #4
   26bd6:	a801      	add	r0, sp, #4
   26bd8:	f011 fdef 	bl	387ba <memcpy>
	memcpy(dst, src, sizeof(*dst));
   26bdc:	4621      	mov	r1, r4
   26bde:	2206      	movs	r2, #6
   26be0:	f10d 000b 	add.w	r0, sp, #11
   26be4:	f011 fde9 	bl	387ba <memcpy>
   26be8:	2206      	movs	r2, #6
   26bea:	4621      	mov	r1, r4
   26bec:	f10d 0011 	add.w	r0, sp, #17
   26bf0:	f011 fde3 	bl	387ba <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   26bf4:	4668      	mov	r0, sp
   26bf6:	f7ff fea1 	bl	2693c <bt_hci_le_enh_conn_complete>
}
   26bfa:	b008      	add	sp, #32
   26bfc:	bd10      	pop	{r4, pc}
   26bfe:	bf00      	nop
   26c00:	0003d52d 	.word	0x0003d52d

00026c04 <bt_send>:
	return bt_dev.drv->send(buf);
   26c04:	4b02      	ldr	r3, [pc, #8]	; (26c10 <bt_send+0xc>)
   26c06:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   26c0a:	695b      	ldr	r3, [r3, #20]
   26c0c:	4718      	bx	r3
   26c0e:	bf00      	nop
   26c10:	20000440 	.word	0x20000440

00026c14 <bt_hci_cmd_send>:
{
   26c14:	b538      	push	{r3, r4, r5, lr}
   26c16:	4605      	mov	r5, r0
	if (!buf) {
   26c18:	460c      	mov	r4, r1
   26c1a:	b919      	cbnz	r1, 26c24 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   26c1c:	f7ff fd72 	bl	26704 <bt_hci_cmd_create>
		if (!buf) {
   26c20:	4604      	mov	r4, r0
   26c22:	b1c0      	cbz	r0, 26c56 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   26c24:	f640 4335 	movw	r3, #3125	; 0xc35
   26c28:	429d      	cmp	r5, r3
   26c2a:	d10e      	bne.n	26c4a <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   26c2c:	4620      	mov	r0, r4
   26c2e:	f7ff ffe9 	bl	26c04 <bt_send>
		if (err) {
   26c32:	4605      	mov	r5, r0
   26c34:	b168      	cbz	r0, 26c52 <bt_hci_cmd_send+0x3e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   26c36:	4602      	mov	r2, r0
   26c38:	2145      	movs	r1, #69	; 0x45
   26c3a:	4808      	ldr	r0, [pc, #32]	; (26c5c <bt_hci_cmd_send+0x48>)
   26c3c:	f011 f9d2 	bl	37fe4 <z_log_minimal_printk>
			net_buf_unref(buf);
   26c40:	4620      	mov	r0, r4
   26c42:	f005 faed 	bl	2c220 <net_buf_unref>
}
   26c46:	4628      	mov	r0, r5
   26c48:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   26c4a:	4805      	ldr	r0, [pc, #20]	; (26c60 <bt_hci_cmd_send+0x4c>)
   26c4c:	4621      	mov	r1, r4
   26c4e:	f005 fac7 	bl	2c1e0 <net_buf_put>
	return 0;
   26c52:	2500      	movs	r5, #0
   26c54:	e7f7      	b.n	26c46 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   26c56:	f06f 0568 	mvn.w	r5, #104	; 0x68
   26c5a:	e7f4      	b.n	26c46 <bt_hci_cmd_send+0x32>
   26c5c:	0003d7a7 	.word	0x0003d7a7
   26c60:	2000053c 	.word	0x2000053c

00026c64 <le_conn_param_neg_reply>:
{
   26c64:	b570      	push	{r4, r5, r6, lr}
   26c66:	4606      	mov	r6, r0
   26c68:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   26c6a:	f242 0021 	movw	r0, #8225	; 0x2021
   26c6e:	2103      	movs	r1, #3
   26c70:	f7ff fd48 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   26c74:	4604      	mov	r4, r0
   26c76:	b928      	cbnz	r0, 26c84 <le_conn_param_neg_reply+0x20>
}
   26c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   26c7c:	4808      	ldr	r0, [pc, #32]	; (26ca0 <le_conn_param_neg_reply+0x3c>)
   26c7e:	2145      	movs	r1, #69	; 0x45
   26c80:	f011 b9b0 	b.w	37fe4 <z_log_minimal_printk>
   26c84:	2103      	movs	r1, #3
   26c86:	300c      	adds	r0, #12
   26c88:	f005 fbd0 	bl	2c42c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   26c8c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   26c8e:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   26c90:	4621      	mov	r1, r4
   26c92:	f242 0021 	movw	r0, #8225	; 0x2021
}
   26c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   26c9a:	f7ff bfbb 	b.w	26c14 <bt_hci_cmd_send>
   26c9e:	bf00      	nop
   26ca0:	0003d7ce 	.word	0x0003d7ce

00026ca4 <le_conn_param_req>:
{
   26ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   26ca6:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   26ca8:	78d9      	ldrb	r1, [r3, #3]
   26caa:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   26cac:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   26cae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26cb2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   26cb6:	7959      	ldrb	r1, [r3, #5]
   26cb8:	791a      	ldrb	r2, [r3, #4]
   26cba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26cbe:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   26cc2:	799a      	ldrb	r2, [r3, #6]
   26cc4:	79d9      	ldrb	r1, [r3, #7]
   26cc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26cca:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   26cce:	7a1a      	ldrb	r2, [r3, #8]
   26cd0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   26cd2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   26cd4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   26cd8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   26cda:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   26cde:	f001 fdbf 	bl	28860 <bt_conn_lookup_handle>
	if (!conn) {
   26ce2:	4606      	mov	r6, r0
   26ce4:	b950      	cbnz	r0, 26cfc <le_conn_param_req+0x58>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   26ce6:	481d      	ldr	r0, [pc, #116]	; (26d5c <le_conn_param_req+0xb8>)
   26ce8:	2145      	movs	r1, #69	; 0x45
   26cea:	4622      	mov	r2, r4
   26cec:	f011 f97a 	bl	37fe4 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   26cf0:	2102      	movs	r1, #2
   26cf2:	4620      	mov	r0, r4
   26cf4:	f7ff ffb6 	bl	26c64 <le_conn_param_neg_reply>
}
   26cf8:	b003      	add	sp, #12
   26cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   26cfc:	4669      	mov	r1, sp
   26cfe:	f001 ff43 	bl	28b88 <le_param_req>
   26d02:	b938      	cbnz	r0, 26d14 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   26d04:	211e      	movs	r1, #30
   26d06:	4620      	mov	r0, r4
   26d08:	f7ff ffac 	bl	26c64 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   26d0c:	4630      	mov	r0, r6
   26d0e:	f001 fd77 	bl	28800 <bt_conn_unref>
   26d12:	e7f1      	b.n	26cf8 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   26d14:	210e      	movs	r1, #14
   26d16:	f242 0020 	movw	r0, #8224	; 0x2020
   26d1a:	f7ff fcf3 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   26d1e:	4605      	mov	r5, r0
   26d20:	2800      	cmp	r0, #0
   26d22:	d0f3      	beq.n	26d0c <le_conn_param_req+0x68>
   26d24:	210e      	movs	r1, #14
   26d26:	300c      	adds	r0, #12
   26d28:	f005 fb80 	bl	2c42c <net_buf_simple_add>
   26d2c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   26d2e:	220e      	movs	r2, #14
   26d30:	2100      	movs	r1, #0
   26d32:	f011 fd4d 	bl	387d0 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   26d36:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   26d38:	f8bd 3000 	ldrh.w	r3, [sp]
   26d3c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   26d3e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   26d42:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   26d44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   26d48:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   26d4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   26d4e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   26d50:	4629      	mov	r1, r5
   26d52:	f242 0020 	movw	r0, #8224	; 0x2020
   26d56:	f7ff ff5d 	bl	26c14 <bt_hci_cmd_send>
   26d5a:	e7d7      	b.n	26d0c <le_conn_param_req+0x68>
   26d5c:	0003d5a7 	.word	0x0003d5a7

00026d60 <hci_tx_thread>:
{
   26d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   26d64:	4f41      	ldr	r7, [pc, #260]	; (26e6c <hci_tx_thread+0x10c>)
		BT_ASSERT(err == 0);
   26d66:	f8df 8108 	ldr.w	r8, [pc, #264]	; 26e70 <hci_tx_thread+0x110>
			ev_count += bt_conn_prepare_events(&events[1]);
   26d6a:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   26d6e:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   26d70:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   26d72:	f36f 3394 	bfc	r3, #14, #7
   26d76:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   26d78:	f001 fcce 	bl	28718 <bt_conn_prepare_events>
   26d7c:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   26d7e:	483b      	ldr	r0, [pc, #236]	; (26e6c <hci_tx_thread+0x10c>)
   26d80:	f04f 32ff 	mov.w	r2, #4294967295
   26d84:	f04f 33ff 	mov.w	r3, #4294967295
   26d88:	4629      	mov	r1, r5
   26d8a:	f00d fd5b 	bl	34844 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   26d8e:	b158      	cbz	r0, 26da8 <hci_tx_thread+0x48>
   26d90:	4838      	ldr	r0, [pc, #224]	; (26e74 <hci_tx_thread+0x114>)
   26d92:	f640 12e6 	movw	r2, #2534	; 0x9e6
   26d96:	4641      	mov	r1, r8
   26d98:	f011 f916 	bl	37fc8 <assert_print>
   26d9c:	4040      	eors	r0, r0
   26d9e:	f380 8811 	msr	BASEPRI, r0
   26da2:	f04f 0003 	mov.w	r0, #3
   26da6:	df02      	svc	2
{
   26da8:	4e30      	ldr	r6, [pc, #192]	; (26e6c <hci_tx_thread+0x10c>)
	for (; count; ev++, count--) {
   26daa:	b915      	cbnz	r5, 26db2 <hci_tx_thread+0x52>
	z_impl_k_yield();
   26dac:	f00c fe1a 	bl	339e4 <z_impl_k_yield>
	while (1) {
   26db0:	e7dd      	b.n	26d6e <hci_tx_thread+0xe>
		switch (ev->state) {
   26db2:	68f3      	ldr	r3, [r6, #12]
   26db4:	f3c3 3386 	ubfx	r3, r3, #14, #7
   26db8:	2b04      	cmp	r3, #4
   26dba:	d14c      	bne.n	26e56 <hci_tx_thread+0xf6>
			if (ev->tag == BT_EVENT_CMD_TX) {
   26dbc:	7b33      	ldrb	r3, [r6, #12]
   26dbe:	2b00      	cmp	r3, #0
   26dc0:	d14c      	bne.n	26e5c <hci_tx_thread+0xfc>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   26dc2:	482d      	ldr	r0, [pc, #180]	; (26e78 <hci_tx_thread+0x118>)
   26dc4:	2200      	movs	r2, #0
   26dc6:	2300      	movs	r3, #0
   26dc8:	f013 fa79 	bl	3a2be <net_buf_get>
	BT_ASSERT(buf);
   26dcc:	4604      	mov	r4, r0
   26dce:	b958      	cbnz	r0, 26de8 <hci_tx_thread+0x88>
   26dd0:	4828      	ldr	r0, [pc, #160]	; (26e74 <hci_tx_thread+0x114>)
   26dd2:	f44f 6218 	mov.w	r2, #2432	; 0x980
   26dd6:	4641      	mov	r1, r8
   26dd8:	f011 f8f6 	bl	37fc8 <assert_print>
   26ddc:	4040      	eors	r0, r0
   26dde:	f380 8811 	msr	BASEPRI, r0
   26de2:	f04f 0003 	mov.w	r0, #3
   26de6:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   26de8:	f8df a090 	ldr.w	sl, [pc, #144]	; 26e7c <hci_tx_thread+0x11c>
	return z_impl_k_sem_take(sem, timeout);
   26dec:	4824      	ldr	r0, [pc, #144]	; (26e80 <hci_tx_thread+0x120>)
   26dee:	f04f 33ff 	mov.w	r3, #4294967295
   26df2:	f04f 32ff 	mov.w	r2, #4294967295
   26df6:	f00b fafb 	bl	323f0 <z_impl_k_sem_take>
   26dfa:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
   26dfe:	b153      	cbz	r3, 26e16 <hci_tx_thread+0xb6>
		LOG_ERR("Uncleared pending sent_cmd");
   26e00:	4820      	ldr	r0, [pc, #128]	; (26e84 <hci_tx_thread+0x124>)
   26e02:	2145      	movs	r1, #69	; 0x45
   26e04:	f011 f8ee 	bl	37fe4 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   26e08:	f8da 00f0 	ldr.w	r0, [sl, #240]	; 0xf0
   26e0c:	f005 fa08 	bl	2c220 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   26e10:	2300      	movs	r3, #0
   26e12:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
	bt_dev.sent_cmd = net_buf_ref(buf);
   26e16:	4620      	mov	r0, r4
   26e18:	f005 fa44 	bl	2c2a4 <net_buf_ref>
   26e1c:	f8ca 00f0 	str.w	r0, [sl, #240]	; 0xf0
	err = bt_send(buf);
   26e20:	4620      	mov	r0, r4
   26e22:	f7ff feef 	bl	26c04 <bt_send>
	if (err) {
   26e26:	4602      	mov	r2, r0
   26e28:	b1a8      	cbz	r0, 26e56 <hci_tx_thread+0xf6>
		LOG_ERR("Unable to send to driver (err %d)", err);
   26e2a:	4817      	ldr	r0, [pc, #92]	; (26e88 <hci_tx_thread+0x128>)
   26e2c:	2145      	movs	r1, #69	; 0x45
   26e2e:	f011 f8d9 	bl	37fe4 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   26e32:	4813      	ldr	r0, [pc, #76]	; (26e80 <hci_tx_thread+0x120>)
   26e34:	f00b faa0 	bl	32378 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   26e38:	4620      	mov	r0, r4
   26e3a:	f005 f817 	bl	2be6c <net_buf_id>
   26e3e:	4b13      	ldr	r3, [pc, #76]	; (26e8c <hci_tx_thread+0x12c>)
   26e40:	220c      	movs	r2, #12
   26e42:	fb02 3000 	mla	r0, r2, r0, r3
   26e46:	211f      	movs	r1, #31
   26e48:	8840      	ldrh	r0, [r0, #2]
   26e4a:	4622      	mov	r2, r4
   26e4c:	f7ff fb4a 	bl	264e4 <hci_cmd_done>
		net_buf_unref(buf);
   26e50:	4620      	mov	r0, r4
   26e52:	f005 f9e5 	bl	2c220 <net_buf_unref>
	for (; count; ev++, count--) {
   26e56:	3614      	adds	r6, #20
   26e58:	3d01      	subs	r5, #1
   26e5a:	e7a6      	b.n	26daa <hci_tx_thread+0x4a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   26e5c:	2b01      	cmp	r3, #1
   26e5e:	d1fa      	bne.n	26e56 <hci_tx_thread+0xf6>
					conn = CONTAINER_OF(ev->fifo,
   26e60:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   26e62:	3838      	subs	r0, #56	; 0x38
   26e64:	f002 f8b2 	bl	28fcc <bt_conn_process_tx>
   26e68:	e7f5      	b.n	26e56 <hci_tx_thread+0xf6>
   26e6a:	bf00      	nop
   26e6c:	2000065c 	.word	0x2000065c
   26e70:	0003d640 	.word	0x0003d640
   26e74:	0003c7f8 	.word	0x0003c7f8
   26e78:	2000053c 	.word	0x2000053c
   26e7c:	20000440 	.word	0x20000440
   26e80:	20000518 	.word	0x20000518
   26e84:	0003d7ed 	.word	0x0003d7ed
   26e88:	0003d7a7 	.word	0x0003d7a7
   26e8c:	200038ac 	.word	0x200038ac

00026e90 <hci_event_prio>:
{
   26e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e94:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   26e96:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   26e9a:	4630      	mov	r0, r6
   26e9c:	f013 fa19 	bl	3a2d2 <net_buf_simple_headroom>
	state->len = buf->len;
   26ea0:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   26ea4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   26ea8:	4605      	mov	r5, r0
   26eaa:	d80b      	bhi.n	26ec4 <hci_event_prio+0x34>
   26eac:	491b      	ldr	r1, [pc, #108]	; (26f1c <hci_event_prio+0x8c>)
   26eae:	481c      	ldr	r0, [pc, #112]	; (26f20 <hci_event_prio+0x90>)
   26eb0:	f640 527b 	movw	r2, #3451	; 0xd7b
   26eb4:	f011 f888 	bl	37fc8 <assert_print>
   26eb8:	4040      	eors	r0, r0
   26eba:	f380 8811 	msr	BASEPRI, r0
   26ebe:	f04f 0003 	mov.w	r0, #3
   26ec2:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   26ec4:	4630      	mov	r0, r6
   26ec6:	2102      	movs	r1, #2
   26ec8:	f005 fa96 	bl	2c3f8 <net_buf_simple_pull_mem>
   26ecc:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   26ece:	7800      	ldrb	r0, [r0, #0]
   26ed0:	f011 fd2b 	bl	3892a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   26ed4:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   26ed6:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   26ed8:	d40b      	bmi.n	26ef2 <hci_event_prio+0x62>
   26eda:	4910      	ldr	r1, [pc, #64]	; (26f1c <hci_event_prio+0x8c>)
   26edc:	4810      	ldr	r0, [pc, #64]	; (26f20 <hci_event_prio+0x90>)
   26ede:	f640 527f 	movw	r2, #3455	; 0xd7f
   26ee2:	f011 f871 	bl	37fc8 <assert_print>
   26ee6:	4040      	eors	r0, r0
   26ee8:	f380 8811 	msr	BASEPRI, r0
   26eec:	f04f 0003 	mov.w	r0, #3
   26ef0:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   26ef2:	2305      	movs	r3, #5
   26ef4:	4a0b      	ldr	r2, [pc, #44]	; (26f24 <hci_event_prio+0x94>)
   26ef6:	7838      	ldrb	r0, [r7, #0]
   26ef8:	4621      	mov	r1, r4
   26efa:	f7ff f9c1 	bl	26280 <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   26efe:	07b3      	lsls	r3, r6, #30
   26f00:	d507      	bpl.n	26f12 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   26f02:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   26f04:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   26f08:	fa13 f585 	uxtah	r5, r3, r5
   26f0c:	60e5      	str	r5, [r4, #12]
}
   26f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   26f12:	4620      	mov	r0, r4
}
   26f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   26f18:	f005 b982 	b.w	2c220 <net_buf_unref>
   26f1c:	0003d640 	.word	0x0003d640
   26f20:	0003c7f8 	.word	0x0003c7f8
   26f24:	0003bf6c 	.word	0x0003bf6c

00026f28 <bt_recv>:
{
   26f28:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   26f2a:	7e02      	ldrb	r2, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   26f2c:	2a01      	cmp	r2, #1
{
   26f2e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   26f30:	d005      	beq.n	26f3e <bt_recv+0x16>
   26f32:	2a03      	cmp	r2, #3
   26f34:	d111      	bne.n	26f5a <bt_recv+0x32>
			rx_queue_put(buf);
   26f36:	f7ff f965 	bl	26204 <rx_queue_put>
		return 0;
   26f3a:	2000      	movs	r0, #0
}
   26f3c:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   26f3e:	68c3      	ldr	r3, [r0, #12]
   26f40:	7818      	ldrb	r0, [r3, #0]
   26f42:	f011 fcf2 	bl	3892a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   26f46:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   26f48:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   26f4a:	d502      	bpl.n	26f52 <bt_recv+0x2a>
			hci_event_prio(buf);
   26f4c:	4620      	mov	r0, r4
   26f4e:	f7ff ff9f 	bl	26e90 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   26f52:	07ab      	lsls	r3, r5, #30
   26f54:	d5f1      	bpl.n	26f3a <bt_recv+0x12>
			rx_queue_put(buf);
   26f56:	4620      	mov	r0, r4
   26f58:	e7ed      	b.n	26f36 <bt_recv+0xe>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   26f5a:	4805      	ldr	r0, [pc, #20]	; (26f70 <bt_recv+0x48>)
   26f5c:	2145      	movs	r1, #69	; 0x45
   26f5e:	f011 f841 	bl	37fe4 <z_log_minimal_printk>
		net_buf_unref(buf);
   26f62:	4620      	mov	r0, r4
   26f64:	f005 f95c 	bl	2c220 <net_buf_unref>
		return -EINVAL;
   26f68:	f06f 0015 	mvn.w	r0, #21
   26f6c:	e7e6      	b.n	26f3c <bt_recv+0x14>
   26f6e:	bf00      	nop
   26f70:	0003d80d 	.word	0x0003d80d

00026f74 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   26f74:	4a08      	ldr	r2, [pc, #32]	; (26f98 <bt_hci_driver_register+0x24>)
{
   26f76:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   26f78:	f8d2 0118 	ldr.w	r0, [r2, #280]	; 0x118
   26f7c:	b930      	cbnz	r0, 26f8c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   26f7e:	68d9      	ldr	r1, [r3, #12]
   26f80:	b139      	cbz	r1, 26f92 <bt_hci_driver_register+0x1e>
   26f82:	6959      	ldr	r1, [r3, #20]
   26f84:	b129      	cbz	r1, 26f92 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   26f86:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	return 0;
   26f8a:	4770      	bx	lr
		return -EALREADY;
   26f8c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   26f90:	4770      	bx	lr
		return -EINVAL;
   26f92:	f06f 0015 	mvn.w	r0, #21
}
   26f96:	4770      	bx	lr
   26f98:	20000440 	.word	0x20000440

00026f9c <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26f9c:	4801      	ldr	r0, [pc, #4]	; (26fa4 <bt_finalize_init+0x8>)
   26f9e:	2104      	movs	r1, #4
   26fa0:	f011 bcd6 	b.w	38950 <atomic_or>
   26fa4:	200004c8 	.word	0x200004c8

00026fa8 <bt_init>:
{
   26fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   26faa:	4db3      	ldr	r5, [pc, #716]	; (27278 <bt_init+0x2d0>)
   26fac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   26fb0:	6899      	ldr	r1, [r3, #8]
   26fb2:	f011 0101 	ands.w	r1, r1, #1
   26fb6:	d121      	bne.n	26ffc <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   26fb8:	aa01      	add	r2, sp, #4
   26fba:	f640 4003 	movw	r0, #3075	; 0xc03
   26fbe:	f7ff fbeb 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   26fc2:	4604      	mov	r4, r0
   26fc4:	2800      	cmp	r0, #0
   26fc6:	d162      	bne.n	2708e <bt_init+0xe6>
		hci_reset_complete(rsp);
   26fc8:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   26fca:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   26fcc:	781b      	ldrb	r3, [r3, #0]
   26fce:	b99b      	cbnz	r3, 26ff8 <bt_init+0x50>
   26fd0:	f3bf 8f5b 	dmb	ish
   26fd4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
   26fd8:	f3bf 8f5b 	dmb	ish
   26fdc:	f105 0288 	add.w	r2, r5, #136	; 0x88
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26fe0:	f003 0309 	and.w	r3, r3, #9
   26fe4:	f3bf 8f5b 	dmb	ish
   26fe8:	e852 1f00 	ldrex	r1, [r2]
   26fec:	e842 3400 	strex	r4, r3, [r2]
   26ff0:	2c00      	cmp	r4, #0
   26ff2:	d1f9      	bne.n	26fe8 <bt_init+0x40>
   26ff4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   26ff8:	f005 f912 	bl	2c220 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   26ffc:	aa01      	add	r2, sp, #4
   26ffe:	2100      	movs	r1, #0
   27000:	f241 0003 	movw	r0, #4099	; 0x1003
   27004:	f7ff fbc8 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   27008:	4604      	mov	r4, r0
   2700a:	2800      	cmp	r0, #0
   2700c:	d13f      	bne.n	2708e <bt_init+0xe6>
	read_local_features_complete(rsp);
   2700e:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   27010:	489a      	ldr	r0, [pc, #616]	; (2727c <bt_init+0x2d4>)
   27012:	68f1      	ldr	r1, [r6, #12]
   27014:	2208      	movs	r2, #8
   27016:	3101      	adds	r1, #1
   27018:	f011 fbcf 	bl	387ba <memcpy>
	net_buf_unref(rsp);
   2701c:	4630      	mov	r0, r6
   2701e:	f005 f8ff 	bl	2c220 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   27022:	4621      	mov	r1, r4
   27024:	aa01      	add	r2, sp, #4
   27026:	f241 0001 	movw	r0, #4097	; 0x1001
   2702a:	f7ff fbb5 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   2702e:	4604      	mov	r4, r0
   27030:	bb68      	cbnz	r0, 2708e <bt_init+0xe6>
	read_local_ver_complete(rsp);
   27032:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   27034:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   27036:	785a      	ldrb	r2, [r3, #1]
   27038:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   2703c:	885a      	ldrh	r2, [r3, #2]
   2703e:	84ea      	strh	r2, [r5, #38]	; 0x26
	bt_dev.lmp_version = rp->lmp_version;
   27040:	791a      	ldrb	r2, [r3, #4]
   27042:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   27046:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   2704a:	852a      	strh	r2, [r5, #40]	; 0x28
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   2704c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   27050:	856b      	strh	r3, [r5, #42]	; 0x2a
	net_buf_unref(rsp);
   27052:	f005 f8e5 	bl	2c220 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   27056:	4621      	mov	r1, r4
   27058:	aa01      	add	r2, sp, #4
   2705a:	f241 0002 	movw	r0, #4098	; 0x1002
   2705e:	f7ff fb9b 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   27062:	4604      	mov	r4, r0
   27064:	b998      	cbnz	r0, 2708e <bt_init+0xe6>
	read_supported_commands_complete(rsp);
   27066:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   27068:	4885      	ldr	r0, [pc, #532]	; (27280 <bt_init+0x2d8>)
   2706a:	68f1      	ldr	r1, [r6, #12]
   2706c:	2240      	movs	r2, #64	; 0x40
   2706e:	3101      	adds	r1, #1
   27070:	f011 fba3 	bl	387ba <memcpy>
	net_buf_unref(rsp);
   27074:	4630      	mov	r0, r6
   27076:	f005 f8d3 	bl	2c220 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   2707a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   2707e:	065e      	lsls	r6, r3, #25
   27080:	d408      	bmi.n	27094 <bt_init+0xec>
		LOG_ERR("Non-LE capable controller detected!");
   27082:	4880      	ldr	r0, [pc, #512]	; (27284 <bt_init+0x2dc>)
   27084:	2145      	movs	r1, #69	; 0x45
   27086:	f010 ffad 	bl	37fe4 <z_log_minimal_printk>
		return -ENODEV;
   2708a:	f06f 0412 	mvn.w	r4, #18
}
   2708e:	4620      	mov	r0, r4
   27090:	b003      	add	sp, #12
   27092:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   27094:	4621      	mov	r1, r4
   27096:	aa01      	add	r2, sp, #4
   27098:	f242 0003 	movw	r0, #8195	; 0x2003
   2709c:	f7ff fb7c 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   270a0:	4604      	mov	r4, r0
   270a2:	2800      	cmp	r0, #0
   270a4:	d1f3      	bne.n	2708e <bt_init+0xe6>
	read_le_features_complete(rsp);
   270a6:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   270a8:	4877      	ldr	r0, [pc, #476]	; (27288 <bt_init+0x2e0>)
   270aa:	68f1      	ldr	r1, [r6, #12]
   270ac:	2208      	movs	r2, #8
   270ae:	3101      	adds	r1, #1
   270b0:	f011 fb83 	bl	387ba <memcpy>
	net_buf_unref(rsp);
   270b4:	4630      	mov	r0, r6
   270b6:	f005 f8b3 	bl	2c220 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   270ba:	4621      	mov	r1, r4
   270bc:	aa01      	add	r2, sp, #4
   270be:	f242 0002 	movw	r0, #8194	; 0x2002
   270c2:	f7ff fb69 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   270c6:	4604      	mov	r4, r0
   270c8:	2800      	cmp	r0, #0
   270ca:	d1e0      	bne.n	2708e <bt_init+0xe6>
		le_read_buffer_size_complete(rsp);
   270cc:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   270ce:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   270d0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   270d4:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
   270d8:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   270da:	b121      	cbz	r1, 270e6 <bt_init+0x13e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   270dc:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   270de:	486b      	ldr	r0, [pc, #428]	; (2728c <bt_init+0x2e4>)
   270e0:	4611      	mov	r1, r2
   270e2:	f014 fa28 	bl	3b536 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   270e6:	4620      	mov	r0, r4
   270e8:	f005 f89a 	bl	2c220 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   270ec:	f895 6030 	ldrb.w	r6, [r5, #48]	; 0x30
   270f0:	f016 0620 	ands.w	r6, r6, #32
   270f4:	d118      	bne.n	27128 <bt_init+0x180>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   270f6:	2102      	movs	r1, #2
   270f8:	f640 406d 	movw	r0, #3181	; 0xc6d
   270fc:	f7ff fb02 	bl	26704 <bt_hci_cmd_create>
		if (!buf) {
   27100:	4604      	mov	r4, r0
   27102:	2800      	cmp	r0, #0
   27104:	f000 80ab 	beq.w	2725e <bt_init+0x2b6>
	return net_buf_simple_add(&buf->b, len);
   27108:	2102      	movs	r1, #2
   2710a:	300c      	adds	r0, #12
   2710c:	f005 f98e 	bl	2c42c <net_buf_simple_add>
		cp_le->le = 0x01;
   27110:	2301      	movs	r3, #1
   27112:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   27114:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   27116:	4621      	mov	r1, r4
   27118:	4632      	mov	r2, r6
   2711a:	f640 406d 	movw	r0, #3181	; 0xc6d
   2711e:	f7ff fb3b 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   27122:	4604      	mov	r4, r0
   27124:	2800      	cmp	r0, #0
   27126:	d1b2      	bne.n	2708e <bt_init+0xe6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   27128:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
   2712c:	071c      	lsls	r4, r3, #28
   2712e:	d512      	bpl.n	27156 <bt_init+0x1ae>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   27130:	aa01      	add	r2, sp, #4
   27132:	2100      	movs	r1, #0
   27134:	f242 001c 	movw	r0, #8220	; 0x201c
   27138:	f7ff fb2e 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   2713c:	4604      	mov	r4, r0
   2713e:	2800      	cmp	r0, #0
   27140:	d1a5      	bne.n	2708e <bt_init+0xe6>
		le_read_supp_states_complete(rsp);
   27142:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   27144:	68c3      	ldr	r3, [r0, #12]
   27146:	f8d3 2001 	ldr.w	r2, [r3, #1]
   2714a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   2714e:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
		net_buf_unref(rsp);
   27152:	f005 f865 	bl	2c220 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   27156:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   2715a:	0698      	lsls	r0, r3, #26
   2715c:	d523      	bpl.n	271a6 <bt_init+0x1fe>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2715e:	f10d 0102 	add.w	r1, sp, #2
   27162:	4668      	mov	r0, sp
   27164:	f7ff fb70 	bl	26848 <hci_le_read_max_data_len>
		if (err) {
   27168:	4604      	mov	r4, r0
   2716a:	2800      	cmp	r0, #0
   2716c:	d18f      	bne.n	2708e <bt_init+0xe6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   2716e:	2104      	movs	r1, #4
   27170:	f242 0024 	movw	r0, #8228	; 0x2024
   27174:	f7ff fac6 	bl	26704 <bt_hci_cmd_create>
		if (!buf) {
   27178:	4606      	mov	r6, r0
   2717a:	2800      	cmp	r0, #0
   2717c:	d06f      	beq.n	2725e <bt_init+0x2b6>
   2717e:	2104      	movs	r1, #4
   27180:	300c      	adds	r0, #12
   27182:	f005 f953 	bl	2c42c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   27186:	f8bd 3000 	ldrh.w	r3, [sp]
   2718a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   2718c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   27190:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   27192:	4622      	mov	r2, r4
   27194:	4631      	mov	r1, r6
   27196:	f242 0024 	movw	r0, #8228	; 0x2024
   2719a:	f7ff fafd 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   2719e:	4604      	mov	r4, r0
   271a0:	2800      	cmp	r0, #0
   271a2:	f47f af74 	bne.w	2708e <bt_init+0xe6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   271a6:	2108      	movs	r1, #8
   271a8:	f242 0001 	movw	r0, #8193	; 0x2001
   271ac:	f7ff faaa 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   271b0:	4604      	mov	r4, r0
   271b2:	2800      	cmp	r0, #0
   271b4:	d053      	beq.n	2725e <bt_init+0x2b6>
   271b6:	2108      	movs	r1, #8
   271b8:	300c      	adds	r0, #12
   271ba:	f005 f937 	bl	2c42c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   271be:	f895 2090 	ldrb.w	r2, [r5, #144]	; 0x90
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   271c2:	4933      	ldr	r1, [pc, #204]	; (27290 <bt_init+0x2e8>)
   271c4:	4b33      	ldr	r3, [pc, #204]	; (27294 <bt_init+0x2ec>)
   271c6:	f012 0f02 	tst.w	r2, #2
   271ca:	bf18      	it	ne
   271cc:	460b      	movne	r3, r1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   271ce:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   271d0:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   271d4:	bf48      	it	mi
   271d6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   271da:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   271de:	bf18      	it	ne
   271e0:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   271e4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   271e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   271ea:	2200      	movs	r2, #0
   271ec:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   271ee:	2307      	movs	r3, #7
   271f0:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
   271f2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   271f4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   271f6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   271f8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   271fa:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   271fc:	4621      	mov	r1, r4
   271fe:	f242 0001 	movw	r0, #8193	; 0x2001
   27202:	f7ff fac9 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   27206:	4604      	mov	r4, r0
   27208:	2800      	cmp	r0, #0
   2720a:	f47f af40 	bne.w	2708e <bt_init+0xe6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   2720e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	if (bt_dev.le.acl_mtu) {
   27212:	f8b5 10bc 	ldrh.w	r1, [r5, #188]	; 0xbc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   27216:	069a      	lsls	r2, r3, #26
   27218:	d424      	bmi.n	27264 <bt_init+0x2bc>
	if (bt_dev.le.acl_mtu) {
   2721a:	b9c9      	cbnz	r1, 27250 <bt_init+0x2a8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   2721c:	aa01      	add	r2, sp, #4
   2721e:	f241 0005 	movw	r0, #4101	; 0x1005
   27222:	f7ff fab9 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   27226:	4604      	mov	r4, r0
   27228:	2800      	cmp	r0, #0
   2722a:	f47f af30 	bne.w	2708e <bt_init+0xe6>
	if (bt_dev.le.acl_mtu) {
   2722e:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
	read_buffer_size_complete(rsp);
   27232:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   27234:	b94b      	cbnz	r3, 2724a <bt_init+0x2a2>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   27236:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   27238:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2723c:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   27240:	889a      	ldrh	r2, [r3, #4]
   27242:	4812      	ldr	r0, [pc, #72]	; (2728c <bt_init+0x2e4>)
   27244:	4611      	mov	r1, r2
   27246:	f014 f976 	bl	3b536 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   2724a:	4620      	mov	r0, r4
   2724c:	f004 ffe8 	bl	2c220 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   27250:	2108      	movs	r1, #8
   27252:	f640 4001 	movw	r0, #3073	; 0xc01
   27256:	f7ff fa55 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   2725a:	4604      	mov	r4, r0
   2725c:	b9f0      	cbnz	r0, 2729c <bt_init+0x2f4>
		return -ENOBUFS;
   2725e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   27262:	e714      	b.n	2708e <bt_init+0xe6>
	else if (!bt_dev.le.acl_mtu) {
   27264:	2900      	cmp	r1, #0
   27266:	d1f3      	bne.n	27250 <bt_init+0x2a8>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   27268:	480b      	ldr	r0, [pc, #44]	; (27298 <bt_init+0x2f0>)
   2726a:	2145      	movs	r1, #69	; 0x45
   2726c:	f010 feba 	bl	37fe4 <z_log_minimal_printk>
		return -EIO;
   27270:	f06f 0404 	mvn.w	r4, #4
   27274:	e70b      	b.n	2708e <bt_init+0xe6>
   27276:	bf00      	nop
   27278:	20000440 	.word	0x20000440
   2727c:	2000046c 	.word	0x2000046c
   27280:	20000474 	.word	0x20000474
   27284:	0003d826 	.word	0x0003d826
   27288:	200004d0 	.word	0x200004d0
   2728c:	20000500 	.word	0x20000500
   27290:	0007122e 	.word	0x0007122e
   27294:	0007120e 	.word	0x0007120e
   27298:	0003d84f 	.word	0x0003d84f
   2729c:	2108      	movs	r1, #8
   2729e:	300c      	adds	r0, #12
   272a0:	f005 f8c4 	bl	2c42c <net_buf_simple_add>
	dst[0] = val;
   272a4:	2310      	movs	r3, #16
   272a6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   272a8:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   272aa:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   272ac:	7043      	strb	r3, [r0, #1]
   272ae:	2602      	movs	r6, #2
   272b0:	2320      	movs	r3, #32
	dst[0] = val;
   272b2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   272b4:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   272b6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   272b8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   272ba:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   272bc:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   272be:	4621      	mov	r1, r4
   272c0:	f640 4001 	movw	r0, #3073	; 0xc01
   272c4:	f7ff fa68 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   272c8:	4604      	mov	r4, r0
   272ca:	2800      	cmp	r0, #0
   272cc:	f47f aedf 	bne.w	2708e <bt_init+0xe6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   272d0:	4601      	mov	r1, r0
   272d2:	aa01      	add	r2, sp, #4
   272d4:	f64f 4001 	movw	r0, #64513	; 0xfc01
   272d8:	f7ff fa5e 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   272dc:	4604      	mov	r4, r0
   272de:	bb48      	cbnz	r0, 27334 <bt_init+0x38c>
	net_buf_unref(rsp);
   272e0:	9801      	ldr	r0, [sp, #4]
   272e2:	f004 ff9d 	bl	2c220 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   272e6:	4621      	mov	r1, r4
   272e8:	aa01      	add	r2, sp, #4
   272ea:	f64f 4002 	movw	r0, #64514	; 0xfc02
   272ee:	f7ff fa53 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   272f2:	4604      	mov	r4, r0
   272f4:	b9f0      	cbnz	r0, 27334 <bt_init+0x38c>
	rp.cmds = (void *)rsp->data;
   272f6:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   272f8:	4816      	ldr	r0, [pc, #88]	; (27354 <bt_init+0x3ac>)
   272fa:	68f9      	ldr	r1, [r7, #12]
   272fc:	4632      	mov	r2, r6
   272fe:	3101      	adds	r1, #1
   27300:	f011 fa5b 	bl	387ba <memcpy>
	net_buf_unref(rsp);
   27304:	4638      	mov	r0, r7
   27306:	f004 ff8b 	bl	2c220 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   2730a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   2730e:	075b      	lsls	r3, r3, #29
   27310:	d510      	bpl.n	27334 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   27312:	aa01      	add	r2, sp, #4
   27314:	4621      	mov	r1, r4
   27316:	f64f 4003 	movw	r0, #64515	; 0xfc03
   2731a:	f7ff fa3d 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   2731e:	b948      	cbnz	r0, 27334 <bt_init+0x38c>
		rp.feat = (void *)rsp->data;
   27320:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   27322:	480d      	ldr	r0, [pc, #52]	; (27358 <bt_init+0x3b0>)
   27324:	68e1      	ldr	r1, [r4, #12]
   27326:	2201      	movs	r2, #1
   27328:	4411      	add	r1, r2
   2732a:	f011 fa46 	bl	387ba <memcpy>
		net_buf_unref(rsp);
   2732e:	4620      	mov	r0, r4
   27330:	f004 ff76 	bl	2c220 <net_buf_unref>
	err = bt_id_init();
   27334:	f000 fa68 	bl	27808 <bt_id_init>
	if (err) {
   27338:	4604      	mov	r4, r0
   2733a:	2800      	cmp	r0, #0
   2733c:	f47f aea7 	bne.w	2708e <bt_init+0xe6>
		err = bt_conn_init();
   27340:	f001 feb0 	bl	290a4 <bt_conn_init>
		if (err) {
   27344:	4604      	mov	r4, r0
   27346:	2800      	cmp	r0, #0
   27348:	f47f aea1 	bne.w	2708e <bt_init+0xe6>
	bt_finalize_init();
   2734c:	f7ff fe26 	bl	26f9c <bt_finalize_init>
	return 0;
   27350:	e69d      	b.n	2708e <bt_init+0xe6>
   27352:	bf00      	nop
   27354:	200004b5 	.word	0x200004b5
   27358:	200004b4 	.word	0x200004b4

0002735c <init_work>:
{
   2735c:	b510      	push	{r4, lr}
	err = bt_init();
   2735e:	f7ff fe23 	bl	26fa8 <bt_init>
	if (ready_cb) {
   27362:	4b03      	ldr	r3, [pc, #12]	; (27370 <init_work+0x14>)
   27364:	681b      	ldr	r3, [r3, #0]
   27366:	b113      	cbz	r3, 2736e <init_work+0x12>
}
   27368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2736c:	4718      	bx	r3
}
   2736e:	bd10      	pop	{r4, pc}
   27370:	200038c4 	.word	0x200038c4

00027374 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   27374:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   27376:	4d33      	ldr	r5, [pc, #204]	; (27444 <bt_enable+0xd0>)
   27378:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
{
   2737c:	b088      	sub	sp, #32
   2737e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   27380:	b943      	cbnz	r3, 27394 <bt_enable+0x20>
		LOG_ERR("No HCI driver registered");
   27382:	4831      	ldr	r0, [pc, #196]	; (27448 <bt_enable+0xd4>)
   27384:	2145      	movs	r1, #69	; 0x45
   27386:	f010 fe2d 	bl	37fe4 <z_log_minimal_printk>
		return -ENODEV;
   2738a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2738e:	4620      	mov	r0, r4
   27390:	b008      	add	sp, #32
   27392:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27394:	f06f 0102 	mvn.w	r1, #2
   27398:	f105 0088 	add.w	r0, r5, #136	; 0x88
   2739c:	f011 fae7 	bl	3896e <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   273a0:	2101      	movs	r1, #1
   273a2:	f011 fad5 	bl	38950 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   273a6:	ea10 0401 	ands.w	r4, r0, r1
   273aa:	d147      	bne.n	2743c <bt_enable+0xc8>
	ready_cb = cb;
   273ac:	4b27      	ldr	r3, [pc, #156]	; (2744c <bt_enable+0xd8>)
   273ae:	601e      	str	r6, [r3, #0]
   273b0:	460a      	mov	r2, r1
   273b2:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
   273b6:	f014 f8be 	bl	3b536 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   273ba:	f105 00fc 	add.w	r0, r5, #252	; 0xfc
   273be:	f014 f898 	bl	3b4f2 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   273c2:	2200      	movs	r2, #0
   273c4:	2300      	movs	r3, #0
   273c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   273ca:	f06f 0308 	mvn.w	r3, #8
   273ce:	e9cd 4302 	strd	r4, r3, [sp, #8]
   273d2:	e9cd 4400 	strd	r4, r4, [sp]
   273d6:	4b1e      	ldr	r3, [pc, #120]	; (27450 <bt_enable+0xdc>)
   273d8:	491e      	ldr	r1, [pc, #120]	; (27454 <bt_enable+0xe0>)
   273da:	9404      	str	r4, [sp, #16]
   273dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   273e0:	481d      	ldr	r0, [pc, #116]	; (27458 <bt_enable+0xe4>)
   273e2:	f00a fcdb 	bl	31d9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   273e6:	491d      	ldr	r1, [pc, #116]	; (2745c <bt_enable+0xe8>)
   273e8:	481b      	ldr	r0, [pc, #108]	; (27458 <bt_enable+0xe4>)
   273ea:	f014 f859 	bl	3b4a0 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   273ee:	481c      	ldr	r0, [pc, #112]	; (27460 <bt_enable+0xec>)
   273f0:	f00b faf6 	bl	329e0 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   273f4:	491b      	ldr	r1, [pc, #108]	; (27464 <bt_enable+0xf0>)
   273f6:	481a      	ldr	r0, [pc, #104]	; (27460 <bt_enable+0xec>)
   273f8:	9400      	str	r4, [sp, #0]
   273fa:	f06f 0307 	mvn.w	r3, #7
   273fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27402:	f00b fb03 	bl	32a0c <k_work_queue_start>
   27406:	4918      	ldr	r1, [pc, #96]	; (27468 <bt_enable+0xf4>)
   27408:	4815      	ldr	r0, [pc, #84]	; (27460 <bt_enable+0xec>)
   2740a:	f014 f849 	bl	3b4a0 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   2740e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   27412:	68db      	ldr	r3, [r3, #12]
   27414:	4798      	blx	r3
	if (err) {
   27416:	4604      	mov	r4, r0
   27418:	b128      	cbz	r0, 27426 <bt_enable+0xb2>
		LOG_ERR("HCI driver open failed (%d)", err);
   2741a:	4602      	mov	r2, r0
   2741c:	2145      	movs	r1, #69	; 0x45
   2741e:	4813      	ldr	r0, [pc, #76]	; (2746c <bt_enable+0xf8>)
   27420:	f010 fde0 	bl	37fe4 <z_log_minimal_printk>
		return err;
   27424:	e7b3      	b.n	2738e <bt_enable+0x1a>
	if (!cb) {
   27426:	b926      	cbnz	r6, 27432 <bt_enable+0xbe>
}
   27428:	b008      	add	sp, #32
   2742a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2742e:	f7ff bdbb 	b.w	26fa8 <bt_init>
	k_work_submit(&bt_dev.init);
   27432:	f105 0078 	add.w	r0, r5, #120	; 0x78
   27436:	f00b facd 	bl	329d4 <k_work_submit>
	return 0;
   2743a:	e7a8      	b.n	2738e <bt_enable+0x1a>
		return -EALREADY;
   2743c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   27440:	e7a5      	b.n	2738e <bt_enable+0x1a>
   27442:	bf00      	nop
   27444:	20000440 	.word	0x20000440
   27448:	0003d877 	.word	0x0003d877
   2744c:	200038c4 	.word	0x200038c4
   27450:	00026d61 	.word	0x00026d61
   27454:	20006880 	.word	0x20006880
   27458:	20001d50 	.word	0x20001d50
   2745c:	0003d895 	.word	0x0003d895
   27460:	20001de8 	.word	0x20001de8
   27464:	20006ec0 	.word	0x20006ec0
   27468:	0003d89b 	.word	0x0003d89b
   2746c:	0003d8a1 	.word	0x0003d8a1

00027470 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27470:	4b04      	ldr	r3, [pc, #16]	; (27484 <bt_is_ready+0x14>)
   27472:	f3bf 8f5b 	dmb	ish
   27476:	6818      	ldr	r0, [r3, #0]
   27478:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   2747c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   27480:	4770      	bx	lr
   27482:	bf00      	nop
   27484:	200004c8 	.word	0x200004c8

00027488 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   27488:	4800      	ldr	r0, [pc, #0]	; (2748c <bt_get_name+0x4>)
   2748a:	4770      	bx	lr
   2748c:	0003d8c2 	.word	0x0003d8c2

00027490 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   27490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   27492:	4f0a      	ldr	r7, [pc, #40]	; (274bc <id_find+0x2c>)
{
   27494:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   27496:	2500      	movs	r5, #0
   27498:	79fb      	ldrb	r3, [r7, #7]
   2749a:	b2ec      	uxtb	r4, r5
   2749c:	42a3      	cmp	r3, r4
   2749e:	d802      	bhi.n	274a6 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   274a0:	f06f 0001 	mvn.w	r0, #1
   274a4:	e009      	b.n	274ba <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   274a6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   274aa:	4439      	add	r1, r7
   274ac:	4630      	mov	r0, r6
   274ae:	f011 facc 	bl	38a4a <bt_addr_le_eq>
   274b2:	3501      	adds	r5, #1
   274b4:	2800      	cmp	r0, #0
   274b6:	d0ef      	beq.n	27498 <id_find+0x8>
   274b8:	4620      	mov	r0, r4
}
   274ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   274bc:	20000440 	.word	0x20000440

000274c0 <set_random_address>:
{
   274c0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   274c2:	4913      	ldr	r1, [pc, #76]	; (27510 <set_random_address+0x50>)
   274c4:	2206      	movs	r2, #6
   274c6:	4605      	mov	r5, r0
   274c8:	f011 f950 	bl	3876c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   274cc:	b1d0      	cbz	r0, 27504 <set_random_address+0x44>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   274ce:	2106      	movs	r1, #6
   274d0:	f242 0005 	movw	r0, #8197	; 0x2005
   274d4:	f7ff f916 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   274d8:	4604      	mov	r4, r0
   274da:	b1a8      	cbz	r0, 27508 <set_random_address+0x48>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   274dc:	2206      	movs	r2, #6
   274de:	4629      	mov	r1, r5
   274e0:	300c      	adds	r0, #12
   274e2:	f012 ff02 	bl	3a2ea <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   274e6:	2200      	movs	r2, #0
   274e8:	4621      	mov	r1, r4
   274ea:	f242 0005 	movw	r0, #8197	; 0x2005
   274ee:	f7ff f953 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   274f2:	b940      	cbnz	r0, 27506 <set_random_address+0x46>
	memcpy(dst, src, sizeof(*dst));
   274f4:	2206      	movs	r2, #6
   274f6:	4806      	ldr	r0, [pc, #24]	; (27510 <set_random_address+0x50>)
   274f8:	4629      	mov	r1, r5
   274fa:	f011 f95e 	bl	387ba <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   274fe:	4b05      	ldr	r3, [pc, #20]	; (27514 <set_random_address+0x54>)
   27500:	2201      	movs	r2, #1
   27502:	771a      	strb	r2, [r3, #28]
		return 0;
   27504:	2000      	movs	r0, #0
}
   27506:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   27508:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2750c:	e7fb      	b.n	27506 <set_random_address+0x46>
   2750e:	bf00      	nop
   27510:	2000045d 	.word	0x2000045d
   27514:	20000440 	.word	0x20000440

00027518 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   27518:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2751a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   2751c:	460d      	mov	r5, r1
   2751e:	b179      	cbz	r1, 27540 <id_create.constprop.0+0x28>
   27520:	4914      	ldr	r1, [pc, #80]	; (27574 <id_create.constprop.0+0x5c>)
   27522:	4628      	mov	r0, r5
   27524:	f011 fa91 	bl	38a4a <bt_addr_le_eq>
   27528:	b950      	cbnz	r0, 27540 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   2752a:	4813      	ldr	r0, [pc, #76]	; (27578 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2752c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   27530:	2207      	movs	r2, #7
   27532:	4629      	mov	r1, r5
   27534:	4420      	add	r0, r4
   27536:	f011 f940 	bl	387ba <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   2753a:	2000      	movs	r0, #0
}
   2753c:	b003      	add	sp, #12
   2753e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   27540:	4668      	mov	r0, sp
   27542:	f011 f9e4 	bl	3890e <bt_addr_le_create_static>
			if (err) {
   27546:	2800      	cmp	r0, #0
   27548:	d1f8      	bne.n	2753c <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   2754a:	4668      	mov	r0, sp
   2754c:	f7ff ffa0 	bl	27490 <id_find>
   27550:	2800      	cmp	r0, #0
   27552:	daf5      	bge.n	27540 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   27554:	4b08      	ldr	r3, [pc, #32]	; (27578 <id_create.constprop.0+0x60>)
   27556:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2755a:	441c      	add	r4, r3
   2755c:	2207      	movs	r2, #7
   2755e:	4669      	mov	r1, sp
   27560:	4620      	mov	r0, r4
   27562:	f011 f92a 	bl	387ba <memcpy>
		if (addr) {
   27566:	2d00      	cmp	r5, #0
   27568:	d0e7      	beq.n	2753a <id_create.constprop.0+0x22>
   2756a:	2207      	movs	r2, #7
   2756c:	4621      	mov	r1, r4
   2756e:	4628      	mov	r0, r5
   27570:	e7e1      	b.n	27536 <id_create.constprop.0+0x1e>
   27572:	bf00      	nop
   27574:	0003d520 	.word	0x0003d520
   27578:	20000440 	.word	0x20000440

0002757c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2757c:	b570      	push	{r4, r5, r6, lr}
   2757e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   27580:	4604      	mov	r4, r0
   27582:	b918      	cbnz	r0, 2758c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   27584:	b1e5      	cbz	r5, 275c0 <bt_id_create+0x44>
			return -EINVAL;
   27586:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   2758a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   2758c:	491e      	ldr	r1, [pc, #120]	; (27608 <bt_id_create+0x8c>)
   2758e:	f011 fa5c 	bl	38a4a <bt_addr_le_eq>
   27592:	2800      	cmp	r0, #0
   27594:	d1f6      	bne.n	27584 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   27596:	7823      	ldrb	r3, [r4, #0]
   27598:	2b01      	cmp	r3, #1
   2759a:	d104      	bne.n	275a6 <bt_id_create+0x2a>
   2759c:	79a3      	ldrb	r3, [r4, #6]
   2759e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   275a2:	2bc0      	cmp	r3, #192	; 0xc0
   275a4:	d004      	beq.n	275b0 <bt_id_create+0x34>
			LOG_ERR("Only static random identity address supported");
   275a6:	4819      	ldr	r0, [pc, #100]	; (2760c <bt_id_create+0x90>)
   275a8:	2145      	movs	r1, #69	; 0x45
   275aa:	f010 fd1b 	bl	37fe4 <z_log_minimal_printk>
			return -EINVAL;
   275ae:	e7ea      	b.n	27586 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   275b0:	4620      	mov	r0, r4
   275b2:	f7ff ff6d 	bl	27490 <id_find>
   275b6:	2800      	cmp	r0, #0
   275b8:	dbe4      	blt.n	27584 <bt_id_create+0x8>
			return -EALREADY;
   275ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   275be:	e7e4      	b.n	2758a <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   275c0:	4d13      	ldr	r5, [pc, #76]	; (27610 <bt_id_create+0x94>)
   275c2:	79eb      	ldrb	r3, [r5, #7]
   275c4:	2b01      	cmp	r3, #1
   275c6:	d01c      	beq.n	27602 <bt_id_create+0x86>
   275c8:	f3bf 8f5b 	dmb	ish
   275cc:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
   275d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   275d4:	07db      	lsls	r3, r3, #31
   275d6:	d50b      	bpl.n	275f0 <bt_id_create+0x74>
	new_id = bt_dev.id_count;
   275d8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   275da:	4621      	mov	r1, r4
   275dc:	4630      	mov	r0, r6
   275de:	f7ff ff9b 	bl	27518 <id_create.constprop.0>
	if (err) {
   275e2:	2800      	cmp	r0, #0
   275e4:	d1d1      	bne.n	2758a <bt_id_create+0xe>
		bt_dev.id_count++;
   275e6:	79eb      	ldrb	r3, [r5, #7]
   275e8:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   275ea:	4630      	mov	r0, r6
		bt_dev.id_count++;
   275ec:	71eb      	strb	r3, [r5, #7]
	return new_id;
   275ee:	e7cc      	b.n	2758a <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   275f0:	2c00      	cmp	r4, #0
   275f2:	d0c8      	beq.n	27586 <bt_id_create+0xa>
   275f4:	4904      	ldr	r1, [pc, #16]	; (27608 <bt_id_create+0x8c>)
   275f6:	4620      	mov	r0, r4
   275f8:	f011 fa27 	bl	38a4a <bt_addr_le_eq>
   275fc:	2800      	cmp	r0, #0
   275fe:	d0eb      	beq.n	275d8 <bt_id_create+0x5c>
   27600:	e7c1      	b.n	27586 <bt_id_create+0xa>
		return -ENOMEM;
   27602:	f06f 000b 	mvn.w	r0, #11
   27606:	e7c0      	b.n	2758a <bt_id_create+0xe>
   27608:	0003d520 	.word	0x0003d520
   2760c:	0003d8d8 	.word	0x0003d8d8
   27610:	20000440 	.word	0x20000440

00027614 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   27614:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   27616:	4604      	mov	r4, r0
   27618:	b198      	cbz	r0, 27642 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2761a:	aa01      	add	r2, sp, #4
   2761c:	2100      	movs	r1, #0
   2761e:	f241 0009 	movw	r0, #4105	; 0x1009
   27622:	f7ff f8b9 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   27626:	4606      	mov	r6, r0
   27628:	b958      	cbnz	r0, 27642 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2762a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   2762c:	490f      	ldr	r1, [pc, #60]	; (2766c <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2762e:	68dd      	ldr	r5, [r3, #12]
   27630:	3501      	adds	r5, #1
   27632:	2206      	movs	r2, #6
   27634:	4628      	mov	r0, r5
   27636:	f011 f899 	bl	3876c <memcmp>
   2763a:	b928      	cbnz	r0, 27648 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2763c:	9801      	ldr	r0, [sp, #4]
   2763e:	f004 fdef 	bl	2c220 <net_buf_unref>
		return 0U;
   27642:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   27644:	b002      	add	sp, #8
   27646:	bd70      	pop	{r4, r5, r6, pc}
   27648:	4909      	ldr	r1, [pc, #36]	; (27670 <bt_id_read_public_addr+0x5c>)
   2764a:	2206      	movs	r2, #6
   2764c:	4628      	mov	r0, r5
   2764e:	f011 f88d 	bl	3876c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   27652:	2800      	cmp	r0, #0
   27654:	d0f2      	beq.n	2763c <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
   27656:	2206      	movs	r2, #6
   27658:	4629      	mov	r1, r5
   2765a:	1c60      	adds	r0, r4, #1
   2765c:	f011 f8ad 	bl	387ba <memcpy>
	net_buf_unref(rsp);
   27660:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   27662:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   27664:	f004 fddc 	bl	2c220 <net_buf_unref>
	return 1U;
   27668:	2001      	movs	r0, #1
   2766a:	e7eb      	b.n	27644 <bt_id_read_public_addr+0x30>
   2766c:	0003d52d 	.word	0x0003d52d
   27670:	0003d527 	.word	0x0003d527

00027674 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   27674:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   27676:	4668      	mov	r0, sp
   27678:	f7ff ffcc 	bl	27614 <bt_id_read_public_addr>
   2767c:	4b04      	ldr	r3, [pc, #16]	; (27690 <bt_setup_public_id_addr+0x1c>)
   2767e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   27680:	b118      	cbz	r0, 2768a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   27682:	4669      	mov	r1, sp
   27684:	2000      	movs	r0, #0
   27686:	f7ff ff47 	bl	27518 <id_create.constprop.0>
}
   2768a:	b003      	add	sp, #12
   2768c:	f85d fb04 	ldr.w	pc, [sp], #4
   27690:	20000440 	.word	0x20000440

00027694 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   27694:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   27698:	4b16      	ldr	r3, [pc, #88]	; (276f4 <bt_read_static_addr+0x60>)
   2769a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   2769e:	07db      	lsls	r3, r3, #31
{
   276a0:	4607      	mov	r7, r0
   276a2:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   276a4:	d404      	bmi.n	276b0 <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
   276a6:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   276a8:	4630      	mov	r0, r6
   276aa:	b002      	add	sp, #8
   276ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   276b0:	aa01      	add	r2, sp, #4
   276b2:	2100      	movs	r1, #0
   276b4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   276b8:	f7ff f86e 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   276bc:	4604      	mov	r4, r0
   276be:	2800      	cmp	r0, #0
   276c0:	d1f1      	bne.n	276a6 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
   276c2:	9b01      	ldr	r3, [sp, #4]
   276c4:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   276c6:	786e      	ldrb	r6, [r5, #1]
   276c8:	4546      	cmp	r6, r8
   276ca:	bf28      	it	cs
   276cc:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
   276ce:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   276d0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   276d4:	42a6      	cmp	r6, r4
   276d6:	dc03      	bgt.n	276e0 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
   276d8:	9801      	ldr	r0, [sp, #4]
   276da:	f004 fda1 	bl	2c220 <net_buf_unref>
	if (!cnt) {
   276de:	e7e3      	b.n	276a8 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   276e0:	4629      	mov	r1, r5
   276e2:	fb08 7004 	mla	r0, r8, r4, r7
   276e6:	2216      	movs	r2, #22
   276e8:	f011 f867 	bl	387ba <memcpy>
	for (i = 0; i < cnt; i++) {
   276ec:	3401      	adds	r4, #1
   276ee:	3516      	adds	r5, #22
   276f0:	e7f0      	b.n	276d4 <bt_read_static_addr+0x40>
   276f2:	bf00      	nop
   276f4:	20000440 	.word	0x20000440

000276f8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   276f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   276fa:	4e15      	ldr	r6, [pc, #84]	; (27750 <bt_setup_random_id_addr+0x58>)
   276fc:	79f4      	ldrb	r4, [r6, #7]
{
   276fe:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   27700:	b92c      	cbnz	r4, 2770e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   27702:	2101      	movs	r1, #1
   27704:	a802      	add	r0, sp, #8
   27706:	f7ff ffc5 	bl	27694 <bt_read_static_addr>
   2770a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2770c:	b9c8      	cbnz	r0, 27742 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   2770e:	2100      	movs	r1, #0
   27710:	4608      	mov	r0, r1
}
   27712:	b009      	add	sp, #36	; 0x24
   27714:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   27718:	f7ff bf30 	b.w	2757c <bt_id_create>
   2771c:	ab02      	add	r3, sp, #8
   2771e:	fb07 3105 	mla	r1, r7, r5, r3
   27722:	2206      	movs	r2, #6
   27724:	f10d 0001 	add.w	r0, sp, #1
   27728:	f011 f847 	bl	387ba <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2772c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   2772e:	4669      	mov	r1, sp
   27730:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   27732:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   27736:	f7ff feef 	bl	27518 <id_create.constprop.0>
				if (err) {
   2773a:	3401      	adds	r4, #1
   2773c:	b110      	cbz	r0, 27744 <bt_setup_random_id_addr+0x4c>
}
   2773e:	b009      	add	sp, #36	; 0x24
   27740:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   27742:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   27744:	79f3      	ldrb	r3, [r6, #7]
   27746:	b2e5      	uxtb	r5, r4
   27748:	42ab      	cmp	r3, r5
   2774a:	d8e7      	bhi.n	2771c <bt_setup_random_id_addr+0x24>
			return 0;
   2774c:	2000      	movs	r0, #0
   2774e:	e7f6      	b.n	2773e <bt_setup_random_id_addr+0x46>
   27750:	20000440 	.word	0x20000440

00027754 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   27754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27758:	4690      	mov	r8, r2
   2775a:	460e      	mov	r6, r1
   2775c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   2775e:	4602      	mov	r2, r0
   27760:	2800      	cmp	r0, #0
   27762:	d04b      	beq.n	277fc <bt_id_set_adv_own_addr+0xa8>
   27764:	2b00      	cmp	r3, #0
   27766:	d049      	beq.n	277fc <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   27768:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   2776a:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2776c:	d531      	bpl.n	277d2 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2776e:	4f25      	ldr	r7, [pc, #148]	; (27804 <bt_id_set_adv_own_addr+0xb0>)
   27770:	f1b8 0f00 	cmp.w	r8, #0
   27774:	d013      	beq.n	2779e <bt_id_set_adv_own_addr+0x4a>
   27776:	0688      	lsls	r0, r1, #26
   27778:	d40a      	bmi.n	27790 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2777a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2777e:	5cfb      	ldrb	r3, [r7, r3]
   27780:	2b01      	cmp	r3, #1
   27782:	d015      	beq.n	277b0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   27784:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   27786:	06b2      	lsls	r2, r6, #26
   27788:	d50f      	bpl.n	277aa <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2778a:	f043 0302 	orr.w	r3, r3, #2
   2778e:	e00b      	b.n	277a8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   27790:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
   27794:	0659      	lsls	r1, r3, #25
   27796:	d4f0      	bmi.n	2777a <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   27798:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2779c:	e006      	b.n	277ac <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2779e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   277a2:	5cfb      	ldrb	r3, [r7, r3]
   277a4:	2b01      	cmp	r3, #1
   277a6:	d003      	beq.n	277b0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   277a8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   277aa:	2000      	movs	r0, #0
}
   277ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   277b0:	2107      	movs	r1, #7
   277b2:	fb01 7104 	mla	r1, r1, r4, r7
   277b6:	3101      	adds	r1, #1
   277b8:	4610      	mov	r0, r2
   277ba:	f011 f953 	bl	38a64 <bt_id_set_adv_random_addr>
				if (err) {
   277be:	2800      	cmp	r0, #0
   277c0:	d1f4      	bne.n	277ac <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   277c2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   277c6:	5d3b      	ldrb	r3, [r7, r4]
   277c8:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   277ca:	f1b8 0f00 	cmp.w	r8, #0
   277ce:	d0ec      	beq.n	277aa <bt_id_set_adv_own_addr+0x56>
   277d0:	e7d9      	b.n	27786 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   277d2:	074b      	lsls	r3, r1, #29
   277d4:	d50e      	bpl.n	277f4 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   277d6:	4e0b      	ldr	r6, [pc, #44]	; (27804 <bt_id_set_adv_own_addr+0xb0>)
   277d8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   277dc:	5df3      	ldrb	r3, [r6, r7]
   277de:	2b01      	cmp	r3, #1
   277e0:	d1e2      	bne.n	277a8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   277e2:	2107      	movs	r1, #7
   277e4:	fb11 3104 	smlabb	r1, r1, r4, r3
   277e8:	4431      	add	r1, r6
   277ea:	f011 f93b 	bl	38a64 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   277ee:	5df3      	ldrb	r3, [r6, r7]
   277f0:	702b      	strb	r3, [r5, #0]
		if (err) {
   277f2:	e7db      	b.n	277ac <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   277f4:	f011 f984 	bl	38b00 <bt_id_set_adv_private_addr>
   277f8:	2301      	movs	r3, #1
   277fa:	e7f9      	b.n	277f0 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   277fc:	f06f 0015 	mvn.w	r0, #21
   27800:	e7d4      	b.n	277ac <bt_id_set_adv_own_addr+0x58>
   27802:	bf00      	nop
   27804:	20000440 	.word	0x20000440

00027808 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   27808:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   2780a:	4d10      	ldr	r5, [pc, #64]	; (2784c <bt_id_init+0x44>)
   2780c:	79eb      	ldrb	r3, [r5, #7]
   2780e:	b113      	cbz	r3, 27816 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   27810:	2400      	movs	r4, #0
}
   27812:	4620      	mov	r0, r4
   27814:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   27816:	f7ff ff2d 	bl	27674 <bt_setup_public_id_addr>
		if (err) {
   2781a:	4604      	mov	r4, r0
   2781c:	b120      	cbz	r0, 27828 <bt_id_init+0x20>
			LOG_ERR("Unable to set identity address");
   2781e:	480c      	ldr	r0, [pc, #48]	; (27850 <bt_id_init+0x48>)
   27820:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Unable to set random address");
   27822:	f010 fbdf 	bl	37fe4 <z_log_minimal_printk>
			return err;
   27826:	e7f4      	b.n	27812 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   27828:	79eb      	ldrb	r3, [r5, #7]
   2782a:	2b00      	cmp	r3, #0
   2782c:	d1f0      	bne.n	27810 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   2782e:	f7ff ff63 	bl	276f8 <bt_setup_random_id_addr>
		if (err) {
   27832:	4604      	mov	r4, r0
   27834:	2800      	cmp	r0, #0
   27836:	d1f2      	bne.n	2781e <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   27838:	1c68      	adds	r0, r5, #1
   2783a:	f7ff fe41 	bl	274c0 <set_random_address>
		if (err) {
   2783e:	4604      	mov	r4, r0
   27840:	2800      	cmp	r0, #0
   27842:	d0e5      	beq.n	27810 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   27844:	4803      	ldr	r0, [pc, #12]	; (27854 <bt_id_init+0x4c>)
   27846:	2145      	movs	r1, #69	; 0x45
   27848:	e7eb      	b.n	27822 <bt_id_init+0x1a>
   2784a:	bf00      	nop
   2784c:	20000440 	.word	0x20000440
   27850:	0003d90b 	.word	0x0003d90b
   27854:	0003d92f 	.word	0x0003d92f

00027858 <hci_set_ad_ext>:
	return 0;
}

static int hci_set_ad_ext(struct bt_le_ext_adv *adv, uint16_t hci_op,
			  const struct bt_ad *ad, size_t ad_len)
{
   27858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2785c:	b08b      	sub	sp, #44	; 0x2c
   2785e:	e9cd 1000 	strd	r1, r0, [sp]
   27862:	4698      	mov	r8, r3
	size_t total_len_bytes = 0;

	for (size_t i = 0; i < ad_len; i++) {
   27864:	2300      	movs	r3, #0
{
   27866:	4614      	mov	r4, r2
	size_t total_len_bytes = 0;
   27868:	461d      	mov	r5, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   2786a:	1d16      	adds	r6, r2, #4
   2786c:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
   27870:	2200      	movs	r2, #0
   27872:	e007      	b.n	27884 <hci_set_ad_ext+0x2c>
			total_len_bytes += ad[i].data[j].data_len + 2;
   27874:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
   27878:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   2787c:	3201      	adds	r2, #1
			total_len_bytes += ad[i].data[j].data_len + 2;
   2787e:	7849      	ldrb	r1, [r1, #1]
   27880:	3102      	adds	r1, #2
   27882:	440d      	add	r5, r1
		for (size_t j = 0; j < ad[i].len; j++) {
   27884:	4290      	cmp	r0, r2
   27886:	d1f5      	bne.n	27874 <hci_set_ad_ext+0x1c>
	for (size_t i = 0; i < ad_len; i++) {
   27888:	3301      	adds	r3, #1
   2788a:	4598      	cmp	r8, r3
   2788c:	d1ee      	bne.n	2786c <hci_set_ad_ext+0x14>
		}
	}

	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2788e:	9b01      	ldr	r3, [sp, #4]
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   27890:	2dfb      	cmp	r5, #251	; 0xfb
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   27892:	f103 0010 	add.w	r0, r3, #16
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   27896:	d908      	bls.n	278aa <hci_set_ad_ext+0x52>
	    atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   27898:	2107      	movs	r1, #7
   2789a:	f011 f96b 	bl	38b74 <atomic_test_bit>
	if ((total_len_bytes > BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN) &&
   2789e:	4605      	mov	r5, r0
   278a0:	2800      	cmp	r0, #0
   278a2:	d077      	beq.n	27994 <hci_set_ad_ext+0x13c>
		/* It is not allowed to set advertising data in multiple
		 * operations while the advertiser is running.
		 */
		return -EAGAIN;
   278a4:	f06f 000a 	mvn.w	r0, #10
   278a8:	e12c      	b.n	27b04 <hci_set_ad_ext+0x2ac>
	if (!atomic_test_bit(adv->flags, BT_ADV_EXT_ADV) &&
   278aa:	210c      	movs	r1, #12
   278ac:	f011 f962 	bl	38b74 <atomic_test_bit>
   278b0:	b910      	cbnz	r0, 278b8 <hci_set_ad_ext+0x60>
   278b2:	2d1f      	cmp	r5, #31
   278b4:	bf28      	it	cs
   278b6:	251f      	movcs	r5, #31
	cmd_size = sizeof(*set_data) + total_data_len;
   278b8:	f105 0904 	add.w	r9, r5, #4
	buf = bt_hci_cmd_create(hci_op, cmd_size);
   278bc:	9800      	ldr	r0, [sp, #0]
   278be:	fa5f f189 	uxtb.w	r1, r9
   278c2:	f7fe ff1f 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   278c6:	4607      	mov	r7, r0
   278c8:	2800      	cmp	r0, #0
   278ca:	f000 8123 	beq.w	27b14 <hci_set_ad_ext+0x2bc>
	return net_buf_simple_add(&buf->b, len);
   278ce:	4649      	mov	r1, r9
   278d0:	300c      	adds	r0, #12
   278d2:	f004 fdab 	bl	2c42c <net_buf_simple_add>
	(void)memset(set_data, 0, cmd_size);
   278d6:	464a      	mov	r2, r9
   278d8:	2100      	movs	r1, #0
   278da:	4606      	mov	r6, r0
   278dc:	f010 ff78 	bl	387d0 <memset>
	err = set_data_add_complete(set_data->data, total_data_len,
   278e0:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
   278e4:	f106 0b04 	add.w	fp, r6, #4
	for (size_t i = 0; i < ad_len; i++) {
   278e8:	9302      	str	r3, [sp, #8]
	uint8_t set_data_len = 0;
   278ea:	f04f 0800 	mov.w	r8, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   278ee:	f8d4 a000 	ldr.w	sl, [r4]
   278f2:	2300      	movs	r3, #0
   278f4:	6862      	ldr	r2, [r4, #4]
   278f6:	4293      	cmp	r3, r2
   278f8:	d314      	bcc.n	27924 <hci_set_ad_ext+0xcc>
	for (size_t i = 0; i < ad_len; i++) {
   278fa:	9b02      	ldr	r3, [sp, #8]
   278fc:	3408      	adds	r4, #8
   278fe:	42a3      	cmp	r3, r4
   27900:	d1f5      	bne.n	278ee <hci_set_ad_ext+0x96>
	set_data->handle = adv->handle;
   27902:	9b01      	ldr	r3, [sp, #4]
	*data_len = set_data_len;
   27904:	f886 8003 	strb.w	r8, [r6, #3]
	set_data->handle = adv->handle;
   27908:	785b      	ldrb	r3, [r3, #1]
   2790a:	7033      	strb	r3, [r6, #0]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2790c:	9800      	ldr	r0, [sp, #0]
	set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
   2790e:	2303      	movs	r3, #3
   27910:	7073      	strb	r3, [r6, #1]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   27912:	2200      	movs	r2, #0
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
   27914:	2301      	movs	r3, #1
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   27916:	4639      	mov	r1, r7
	set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_DISABLED;
   27918:	70b3      	strb	r3, [r6, #2]
	} else {
		return hci_set_adv_ext_fragmented(adv, hci_op, ad, ad_len);
	}

	return 0;
}
   2791a:	b00b      	add	sp, #44	; 0x2c
   2791c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   27920:	f7fe bf3a 	b.w	26798 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   27924:	f89a 2001 	ldrb.w	r2, [sl, #1]
			uint8_t type = data[j].type;
   27928:	f89a c000 	ldrb.w	ip, [sl]
			if ((set_data_len + len + 2) > set_data_len_max) {
   2792c:	f108 0002 	add.w	r0, r8, #2
   27930:	1811      	adds	r1, r2, r0
   27932:	428d      	cmp	r5, r1
   27934:	d212      	bcs.n	2795c <hci_set_ad_ext+0x104>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   27936:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   2793a:	eba5 0200 	sub.w	r2, r5, r0
				if (!(type == BT_DATA_NAME_COMPLETE &&
   2793e:	d101      	bne.n	27944 <hci_set_ad_ext+0xec>
   27940:	2a00      	cmp	r2, #0
   27942:	dc09      	bgt.n	27958 <hci_set_ad_ext+0x100>
					LOG_ERR("Too big advertising data");
   27944:	4875      	ldr	r0, [pc, #468]	; (27b1c <hci_set_ad_ext+0x2c4>)
   27946:	2145      	movs	r1, #69	; 0x45
   27948:	f010 fb4c 	bl	37fe4 <z_log_minimal_printk>
		net_buf_unref(buf);
   2794c:	4638      	mov	r0, r7
   2794e:	f004 fc67 	bl	2c220 <net_buf_unref>
				return -EINVAL;
   27952:	f06f 0015 	mvn.w	r0, #21
   27956:	e0d5      	b.n	27b04 <hci_set_ad_ext+0x2ac>
				type = BT_DATA_NAME_SHORTENED;
   27958:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   2795c:	fa5f f982 	uxtb.w	r9, r2
   27960:	f109 0101 	add.w	r1, r9, #1
   27964:	f80b 1008 	strb.w	r1, [fp, r8]
   27968:	f108 0101 	add.w	r1, r8, #1
			set_data[set_data_len++] = type;
   2796c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   2796e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   27972:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   27976:	f8da 1004 	ldr.w	r1, [sl, #4]
   2797a:	9303      	str	r3, [sp, #12]
			set_data_len += len;
   2797c:	f109 0902 	add.w	r9, r9, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   27980:	f010 ff1b 	bl	387ba <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   27984:	9b03      	ldr	r3, [sp, #12]
			set_data_len += len;
   27986:	44c1      	add	r9, r8
   27988:	fa5f f889 	uxtb.w	r8, r9
		for (size_t j = 0; j < ad[i].len; j++) {
   2798c:	3301      	adds	r3, #1
   2798e:	f10a 0a08 	add.w	sl, sl, #8
   27992:	e7af      	b.n	278f4 <hci_set_ad_ext+0x9c>
	(void)memset(stream, 0, sizeof(*stream));
   27994:	4601      	mov	r1, r0
   27996:	2218      	movs	r2, #24
   27998:	a804      	add	r0, sp, #16
   2799a:	f010 ff19 	bl	387d0 <memset>
	stream->ad_len = ad_len;
   2799e:	e9cd 4804 	strd	r4, r8, [sp, #16]
	for (size_t i = 0; i < ad_len; i++) {
   279a2:	4628      	mov	r0, r5
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   279a4:	f240 6772 	movw	r7, #1650	; 0x672
		for (size_t j = 0; j < ad[i].len; j++) {
   279a8:	f856 5030 	ldr.w	r5, [r6, r0, lsl #3]
   279ac:	2300      	movs	r3, #0
   279ae:	e00b      	b.n	279c8 <hci_set_ad_ext+0x170>
			stream->remaining_size += ad[i].data[j].data_len + 2;
   279b0:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
   279b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   279b6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   279ba:	3102      	adds	r1, #2
   279bc:	7852      	ldrb	r2, [r2, #1]
   279be:	440a      	add	r2, r1
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   279c0:	42ba      	cmp	r2, r7
			stream->remaining_size += ad[i].data[j].data_len + 2;
   279c2:	9209      	str	r2, [sp, #36]	; 0x24
			if (stream->remaining_size > BT_GAP_ADV_MAX_EXT_ADV_DATA_LEN) {
   279c4:	d8c5      	bhi.n	27952 <hci_set_ad_ext+0xfa>
		for (size_t j = 0; j < ad[i].len; j++) {
   279c6:	3301      	adds	r3, #1
   279c8:	42ab      	cmp	r3, r5
   279ca:	d1f1      	bne.n	279b0 <hci_set_ad_ext+0x158>
	for (size_t i = 0; i < ad_len; i++) {
   279cc:	3001      	adds	r0, #1
   279ce:	4580      	cmp	r8, r0
   279d0:	d1ea      	bne.n	279a8 <hci_set_ad_ext+0x150>
   279d2:	f04f 0901 	mov.w	r9, #1
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
   279d6:	f04f 0800 	mov.w	r8, #0
   279da:	e08f      	b.n	27afc <hci_set_ad_ext+0x2a4>
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
   279dc:	28fb      	cmp	r0, #251	; 0xfb
   279de:	bf28      	it	cs
   279e0:	20fb      	movcs	r0, #251	; 0xfb
		const size_t cmd_size = sizeof(*set_data) + data_len;
   279e2:	1d05      	adds	r5, r0, #4
		const size_t data_len = MIN(BT_HCI_LE_EXT_ADV_FRAG_MAX_LEN, stream.remaining_size);
   279e4:	4604      	mov	r4, r0
		buf = bt_hci_cmd_create(hci_op, cmd_size);
   279e6:	b2e9      	uxtb	r1, r5
   279e8:	9800      	ldr	r0, [sp, #0]
   279ea:	f7fe fe8b 	bl	26704 <bt_hci_cmd_create>
		if (!buf) {
   279ee:	4607      	mov	r7, r0
   279f0:	2800      	cmp	r0, #0
   279f2:	f000 808f 	beq.w	27b14 <hci_set_ad_ext+0x2bc>
   279f6:	4629      	mov	r1, r5
   279f8:	300c      	adds	r0, #12
   279fa:	f004 fd17 	bl	2c42c <net_buf_simple_add>
		set_data->handle = adv->handle;
   279fe:	9b01      	ldr	r3, [sp, #4]
   27a00:	785b      	ldrb	r3, [r3, #1]
   27a02:	7003      	strb	r3, [r0, #0]
   27a04:	4606      	mov	r6, r0
		set_data->frag_pref = BT_HCI_LE_EXT_ADV_FRAG_ENABLED;
   27a06:	f880 8002 	strb.w	r8, [r0, #2]
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
   27a0a:	f100 0a04 	add.w	sl, r0, #4
   27a0e:	fa5f fb84 	uxtb.w	fp, r4
	uint8_t read_len = 0;
   27a12:	2500      	movs	r5, #0
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
   27a14:	9804      	ldr	r0, [sp, #16]
   27a16:	9a06      	ldr	r2, [sp, #24]
   27a18:	9b07      	ldr	r3, [sp, #28]
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
   27a1a:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
   27a1e:	f8bd e020 	ldrh.w	lr, [sp, #32]
   27a22:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	const struct bt_data *current_ltv = &stream->ad[stream->ad_index].data[stream->data_index];
   27a26:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	const bool done_reading_ltv = (stream->current_ltv_offset == current_ltv->data_len + 2);
   27a2a:	7849      	ldrb	r1, [r1, #1]
   27a2c:	3102      	adds	r1, #2
	if (done_reading_ltv) {
   27a2e:	458e      	cmp	lr, r1
   27a30:	d10b      	bne.n	27a4a <hci_set_ad_ext+0x1f2>
		stream->current_ltv_offset = 0;
   27a32:	f8ad 8020 	strh.w	r8, [sp, #32]
		if (stream->data_index + 1 == stream->ad[stream->ad_index].len) {
   27a36:	f8dc 1004 	ldr.w	r1, [ip, #4]
   27a3a:	3301      	adds	r3, #1
   27a3c:	428b      	cmp	r3, r1
			stream->ad_index++;
   27a3e:	bf03      	ittte	eq
   27a40:	3201      	addeq	r2, #1
			stream->data_index = 0;
   27a42:	f8cd 801c 	streq.w	r8, [sp, #28]
			stream->ad_index++;
   27a46:	9206      	streq	r2, [sp, #24]
			stream->data_index++;
   27a48:	9307      	strne	r3, [sp, #28]
	if (stream->ad_index == stream->ad_len) {
   27a4a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   27a4e:	4293      	cmp	r3, r2
   27a50:	d018      	beq.n	27a84 <hci_set_ad_ext+0x22c>
		return &stream->ad[stream->ad_index].data[stream->data_index];
   27a52:	9a07      	ldr	r2, [sp, #28]
   27a54:	f850 c033 	ldr.w	ip, [r0, r3, lsl #3]
		if (!current_ltv) {
   27a58:	eb1c 03c2 	adds.w	r3, ip, r2, lsl #3
   27a5c:	d012      	beq.n	27a84 <hci_set_ad_ext+0x22c>
		if (stream->current_ltv_offset == 0) {
   27a5e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
			buf[read_len] = current_ltv->data_len + 1;
   27a62:	eb0a 0005 	add.w	r0, sl, r5
		if (stream->current_ltv_offset == 0) {
   27a66:	b9c9      	cbnz	r1, 27a9c <hci_set_ad_ext+0x244>
			buf[read_len] = current_ltv->data_len + 1;
   27a68:	785b      	ldrb	r3, [r3, #1]
   27a6a:	3301      	adds	r3, #1
   27a6c:	f80a 3005 	strb.w	r3, [sl, r5]
			stream->current_ltv_offset++;
   27a70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
			read_len++;
   27a74:	3501      	adds	r5, #1
			stream->current_ltv_offset++;
   27a76:	3301      	adds	r3, #1
   27a78:	b29b      	uxth	r3, r3
			read_len++;
   27a7a:	b2ed      	uxtb	r5, r5
	while (read_len < buf_len) {
   27a7c:	455d      	cmp	r5, fp
			stream->current_ltv_offset++;
   27a7e:	f8ad 3020 	strh.w	r3, [sp, #32]
	while (read_len < buf_len) {
   27a82:	d3c7      	bcc.n	27a14 <hci_set_ad_ext+0x1bc>
	__ASSERT_NO_MSG(stream->remaining_size >= read_len);
   27a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27a86:	42ab      	cmp	r3, r5
   27a88:	d225      	bcs.n	27ad6 <hci_set_ad_ext+0x27e>
   27a8a:	4925      	ldr	r1, [pc, #148]	; (27b20 <hci_set_ad_ext+0x2c8>)
   27a8c:	4825      	ldr	r0, [pc, #148]	; (27b24 <hci_set_ad_ext+0x2cc>)
   27a8e:	22a7      	movs	r2, #167	; 0xa7
   27a90:	f010 fa9a 	bl	37fc8 <assert_print>
   27a94:	4822      	ldr	r0, [pc, #136]	; (27b20 <hci_set_ad_ext+0x2c8>)
   27a96:	21a7      	movs	r1, #167	; 0xa7
   27a98:	f010 fa8f 	bl	37fba <assert_post_action>
		} else if (stream->current_ltv_offset == 1) {
   27a9c:	2901      	cmp	r1, #1
   27a9e:	d103      	bne.n	27aa8 <hci_set_ad_ext+0x250>
			buf[read_len] = current_ltv->type;
   27aa0:	f81c 3032 	ldrb.w	r3, [ip, r2, lsl #3]
   27aa4:	7003      	strb	r3, [r0, #0]
   27aa6:	e7e3      	b.n	27a70 <hci_set_ad_ext+0x218>
					current_ltv->data_len - stream->current_ltv_offset + 2;
   27aa8:	785a      	ldrb	r2, [r3, #1]
				&current_ltv->data[stream->current_ltv_offset - 2],
   27aaa:	685b      	ldr	r3, [r3, #4]
					current_ltv->data_len - stream->current_ltv_offset + 2;
   27aac:	1a52      	subs	r2, r2, r1
   27aae:	3202      	adds	r2, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
   27ab0:	eba4 0c05 	sub.w	ip, r4, r5
   27ab4:	4562      	cmp	r2, ip
				&current_ltv->data[stream->current_ltv_offset - 2],
   27ab6:	f1a1 0102 	sub.w	r1, r1, #2
			const size_t size_to_copy = MIN(buf_len - read_len, remaining_data_len);
   27aba:	bf28      	it	cs
   27abc:	4662      	movcs	r2, ip
			(void)memcpy(&buf[read_len],
   27abe:	4419      	add	r1, r3
   27ac0:	9202      	str	r2, [sp, #8]
   27ac2:	f010 fe7a 	bl	387ba <memcpy>
			stream->current_ltv_offset += size_to_copy;
   27ac6:	9a02      	ldr	r2, [sp, #8]
   27ac8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27acc:	4413      	add	r3, r2
			read_len += size_to_copy;
   27ace:	442a      	add	r2, r5
			stream->current_ltv_offset += size_to_copy;
   27ad0:	b29b      	uxth	r3, r3
			read_len += size_to_copy;
   27ad2:	b2d5      	uxtb	r5, r2
   27ad4:	e7d2      	b.n	27a7c <hci_set_ad_ext+0x224>
	stream->remaining_size -= read_len;
   27ad6:	1b5b      	subs	r3, r3, r5
   27ad8:	9309      	str	r3, [sp, #36]	; 0x24
		set_data->len = ad_stream_read(&stream, set_data->data, data_len);
   27ada:	70f5      	strb	r5, [r6, #3]
		if (is_first_iteration && ad_stream_is_empty(&stream)) {
   27adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27ade:	f1b9 0f00 	cmp.w	r9, #0
   27ae2:	d012      	beq.n	27b0a <hci_set_ad_ext+0x2b2>
   27ae4:	2b00      	cmp	r3, #0
   27ae6:	bf0c      	ite	eq
   27ae8:	2303      	moveq	r3, #3
   27aea:	2301      	movne	r3, #1
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
   27aec:	9800      	ldr	r0, [sp, #0]
			set_data->op = BT_HCI_LE_EXT_ADV_OP_COMPLETE_DATA;
   27aee:	7073      	strb	r3, [r6, #1]
		err = bt_hci_cmd_send_sync(hci_op, buf, NULL);
   27af0:	2200      	movs	r2, #0
   27af2:	4639      	mov	r1, r7
   27af4:	f7fe fe50 	bl	26798 <bt_hci_cmd_send_sync>
		if (err) {
   27af8:	b920      	cbnz	r0, 27b04 <hci_set_ad_ext+0x2ac>
		is_first_iteration = false;
   27afa:	4681      	mov	r9, r0
	return stream->remaining_size == 0;
   27afc:	9809      	ldr	r0, [sp, #36]	; 0x24
	while (!ad_stream_is_empty(&stream)) {
   27afe:	2800      	cmp	r0, #0
   27b00:	f47f af6c 	bne.w	279dc <hci_set_ad_ext+0x184>
}
   27b04:	b00b      	add	sp, #44	; 0x2c
   27b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (ad_stream_is_empty(&stream)) {
   27b0a:	fab3 f383 	clz	r3, r3
   27b0e:	095b      	lsrs	r3, r3, #5
   27b10:	005b      	lsls	r3, r3, #1
   27b12:	e7eb      	b.n	27aec <hci_set_ad_ext+0x294>
		return -ENOBUFS;
   27b14:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27b18:	e7f4      	b.n	27b04 <hci_set_ad_ext+0x2ac>
   27b1a:	bf00      	nop
   27b1c:	0003d957 	.word	0x0003d957
   27b20:	0003d975 	.word	0x0003d975
   27b24:	0003c7f8 	.word	0x0003c7f8

00027b28 <le_adv_stop_free_conn>:
	*out_conn = conn;
	return 0;
}

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   27b28:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   27b2a:	f100 0609 	add.w	r6, r0, #9
{
   27b2e:	4604      	mov	r4, r0
   27b30:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
   27b32:	2207      	movs	r2, #7
   27b34:	490c      	ldr	r1, [pc, #48]	; (27b68 <le_adv_stop_free_conn+0x40>)
   27b36:	4630      	mov	r0, r6
   27b38:	f010 fe18 	bl	3876c <memcmp>
   27b3c:	4603      	mov	r3, r0
   27b3e:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   27b40:	b973      	cbnz	r3, 27b60 <le_adv_stop_free_conn+0x38>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   27b42:	490a      	ldr	r1, [pc, #40]	; (27b6c <le_adv_stop_free_conn+0x44>)
   27b44:	2204      	movs	r2, #4
					       BT_CONN_CONNECTING_ADV);
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   27b46:	f001 f8b1 	bl	28cac <bt_conn_lookup_state_le>
   27b4a:	4604      	mov	r4, r0
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   27b4c:	b158      	cbz	r0, 27b66 <le_adv_stop_free_conn+0x3e>
		conn->err = status;
   27b4e:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27b50:	2100      	movs	r1, #0
   27b52:	f000 fe8d 	bl	28870 <bt_conn_set_state>
		bt_conn_unref(conn);
   27b56:	4620      	mov	r0, r4
	}
}
   27b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   27b5c:	f000 be50 	b.w	28800 <bt_conn_unref>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   27b60:	2205      	movs	r2, #5
   27b62:	4631      	mov	r1, r6
   27b64:	e7ef      	b.n	27b46 <le_adv_stop_free_conn+0x1e>
}
   27b66:	bd70      	pop	{r4, r5, r6, pc}
   27b68:	0003d520 	.word	0x0003d520
   27b6c:	0003d519 	.word	0x0003d519

00027b70 <adv_new>:
{
   27b70:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27b72:	4e0f      	ldr	r6, [pc, #60]	; (27bb0 <adv_new+0x40>)
   27b74:	4630      	mov	r0, r6
   27b76:	f010 fff7 	bl	38b68 <atomic_get>
		if (!atomic_test_bit(adv_pool[i].flags, BT_ADV_CREATED)) {
   27b7a:	f010 0501 	ands.w	r5, r0, #1
   27b7e:	d115      	bne.n	27bac <adv_new+0x3c>
	(void)memset(adv, 0, sizeof(*adv));
   27b80:	f1a6 0410 	sub.w	r4, r6, #16
   27b84:	2250      	movs	r2, #80	; 0x50
   27b86:	4629      	mov	r1, r5
   27b88:	4620      	mov	r0, r4
   27b8a:	f010 fe21 	bl	387d0 <memset>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27b8e:	f3bf 8f5b 	dmb	ish
   27b92:	e856 3f00 	ldrex	r3, [r6]
   27b96:	f043 0301 	orr.w	r3, r3, #1
   27b9a:	e846 3200 	strex	r2, r3, [r6]
   27b9e:	2a00      	cmp	r2, #0
   27ba0:	d1f7      	bne.n	27b92 <adv_new+0x22>
   27ba2:	f3bf 8f5b 	dmb	ish
	adv->handle = i;
   27ba6:	4620      	mov	r0, r4
   27ba8:	7065      	strb	r5, [r4, #1]
}
   27baa:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   27bac:	2000      	movs	r0, #0
   27bae:	e7fc      	b.n	27baa <adv_new+0x3a>
   27bb0:	20001eb0 	.word	0x20001eb0

00027bb4 <valid_adv_ext_param>:
{
   27bb4:	b538      	push	{r3, r4, r5, lr}
		if (param->peer &&
   27bb6:	6902      	ldr	r2, [r0, #16]
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27bb8:	6843      	ldr	r3, [r0, #4]
{
   27bba:	4604      	mov	r4, r0
		if (param->peer &&
   27bbc:	b152      	cbz	r2, 27bd4 <valid_adv_ext_param+0x20>
		    !(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27bbe:	f240 4201 	movw	r2, #1025	; 0x401
   27bc2:	4213      	tst	r3, r2
   27bc4:	d101      	bne.n	27bca <valid_adv_ext_param+0x16>
			return false;
   27bc6:	2000      	movs	r0, #0
}
   27bc8:	bd38      	pop	{r3, r4, r5, pc}
		    (param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27bca:	f403 6282 	and.w	r2, r3, #1040	; 0x410
   27bce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   27bd2:	d0f8      	beq.n	27bc6 <valid_adv_ext_param+0x12>
		if (!(param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27bd4:	0559      	lsls	r1, r3, #21
   27bd6:	d402      	bmi.n	27bde <valid_adv_ext_param+0x2a>
   27bd8:	f413 4ff8 	tst.w	r3, #31744	; 0x7c00
   27bdc:	d1f3      	bne.n	27bc6 <valid_adv_ext_param+0x12>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27bde:	4a1a      	ldr	r2, [pc, #104]	; (27c48 <valid_adv_ext_param+0x94>)
   27be0:	439a      	bics	r2, r3
   27be2:	d0f0      	beq.n	27bc6 <valid_adv_ext_param+0x12>
	if (param->id >= bt_dev.id_count ||
   27be4:	4d19      	ldr	r5, [pc, #100]	; (27c4c <valid_adv_ext_param+0x98>)
   27be6:	7820      	ldrb	r0, [r4, #0]
   27be8:	79eb      	ldrb	r3, [r5, #7]
   27bea:	4283      	cmp	r3, r0
   27bec:	d9eb      	bls.n	27bc6 <valid_adv_ext_param+0x12>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   27bee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   27bf2:	4917      	ldr	r1, [pc, #92]	; (27c50 <valid_adv_ext_param+0x9c>)
   27bf4:	2207      	movs	r2, #7
   27bf6:	4428      	add	r0, r5
   27bf8:	f010 fdb8 	bl	3876c <memcmp>
	if (param->id >= bt_dev.id_count ||
   27bfc:	2800      	cmp	r0, #0
   27bfe:	d0e2      	beq.n	27bc6 <valid_adv_ext_param+0x12>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   27c00:	6860      	ldr	r0, [r4, #4]
   27c02:	07c2      	lsls	r2, r0, #31
   27c04:	d406      	bmi.n	27c14 <valid_adv_ext_param+0x60>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   27c06:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   27c0a:	2b08      	cmp	r3, #8
   27c0c:	d802      	bhi.n	27c14 <valid_adv_ext_param+0x60>
   27c0e:	68a3      	ldr	r3, [r4, #8]
   27c10:	2b9f      	cmp	r3, #159	; 0x9f
   27c12:	d9d8      	bls.n	27bc6 <valid_adv_ext_param+0x12>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   27c14:	f010 0f30 	tst.w	r0, #48	; 0x30
   27c18:	d002      	beq.n	27c20 <valid_adv_ext_param+0x6c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   27c1a:	6923      	ldr	r3, [r4, #16]
   27c1c:	2b00      	cmp	r3, #0
   27c1e:	d0d2      	beq.n	27bc6 <valid_adv_ext_param+0x12>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   27c20:	06c3      	lsls	r3, r0, #27
   27c22:	d401      	bmi.n	27c28 <valid_adv_ext_param+0x74>
   27c24:	6923      	ldr	r3, [r4, #16]
   27c26:	b943      	cbnz	r3, 27c3a <valid_adv_ext_param+0x86>
		if (param->interval_min > param->interval_max ||
   27c28:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   27c2c:	429a      	cmp	r2, r3
   27c2e:	d8ca      	bhi.n	27bc6 <valid_adv_ext_param+0x12>
   27c30:	2a1f      	cmp	r2, #31
   27c32:	d9c8      	bls.n	27bc6 <valid_adv_ext_param+0x12>
		    param->interval_min < 0x0020 ||
   27c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   27c38:	d8c5      	bhi.n	27bc6 <valid_adv_ext_param+0x12>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   27c3a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   27c3e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   27c42:	bf18      	it	ne
   27c44:	2001      	movne	r0, #1
   27c46:	e7bf      	b.n	27bc8 <valid_adv_ext_param+0x14>
   27c48:	00040600 	.word	0x00040600
   27c4c:	20000440 	.word	0x20000440
   27c50:	0003d520 	.word	0x0003d520

00027c54 <le_adv_start_add_conn>:
{
   27c54:	b570      	push	{r4, r5, r6, lr}
	bt_dev.adv_conn_id = adv->id;
   27c56:	4605      	mov	r5, r0
   27c58:	4b16      	ldr	r3, [pc, #88]	; (27cb4 <le_adv_start_add_conn+0x60>)
   27c5a:	f815 2b09 	ldrb.w	r2, [r5], #9
   27c5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
{
   27c62:	4604      	mov	r4, r0
   27c64:	460e      	mov	r6, r1
   27c66:	2207      	movs	r2, #7
   27c68:	4913      	ldr	r1, [pc, #76]	; (27cb8 <le_adv_start_add_conn+0x64>)
   27c6a:	4628      	mov	r0, r5
   27c6c:	f010 fd7e 	bl	3876c <memcmp>
   27c70:	4603      	mov	r3, r0
   27c72:	7820      	ldrb	r0, [r4, #0]
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   27c74:	b96b      	cbnz	r3, 27c92 <le_adv_start_add_conn+0x3e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   27c76:	4911      	ldr	r1, [pc, #68]	; (27cbc <le_adv_start_add_conn+0x68>)
   27c78:	f000 ffd8 	bl	28c2c <bt_conn_add_le>
		if (!conn) {
   27c7c:	4604      	mov	r4, r0
   27c7e:	b910      	cbnz	r0, 27c86 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   27c80:	f06f 000b 	mvn.w	r0, #11
}
   27c84:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   27c86:	2104      	movs	r1, #4
   27c88:	f000 fdf2 	bl	28870 <bt_conn_set_state>
		*out_conn = conn;
   27c8c:	6034      	str	r4, [r6, #0]
		return 0;
   27c8e:	2000      	movs	r0, #0
   27c90:	e7f8      	b.n	27c84 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   27c92:	4629      	mov	r1, r5
   27c94:	f011 f914 	bl	38ec0 <bt_conn_exists_le>
   27c98:	b940      	cbnz	r0, 27cac <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   27c9a:	7820      	ldrb	r0, [r4, #0]
   27c9c:	4629      	mov	r1, r5
   27c9e:	f000 ffc5 	bl	28c2c <bt_conn_add_le>
	if (!conn) {
   27ca2:	4604      	mov	r4, r0
   27ca4:	2800      	cmp	r0, #0
   27ca6:	d0eb      	beq.n	27c80 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   27ca8:	2105      	movs	r1, #5
   27caa:	e7ed      	b.n	27c88 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   27cac:	f06f 0015 	mvn.w	r0, #21
   27cb0:	e7e8      	b.n	27c84 <le_adv_start_add_conn+0x30>
   27cb2:	bf00      	nop
   27cb4:	20000440 	.word	0x20000440
   27cb8:	0003d520 	.word	0x0003d520
   27cbc:	0003d519 	.word	0x0003d519

00027cc0 <le_ext_adv_param_set>:
}

static int le_ext_adv_param_set(struct bt_le_ext_adv *adv,
				const struct bt_le_adv_param *param,
				bool  has_scan_data)
{
   27cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_ext_adv_param *cp;
	bool dir_adv = param->peer != NULL, scannable;
   27cc4:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   27cc8:	4607      	mov	r7, r0
	bool dir_adv = param->peer != NULL, scannable;
   27cca:	f1ba 0400 	subs.w	r4, sl, #0
{
   27cce:	460e      	mov	r6, r1
	struct net_buf *buf, *rsp;
	int err;
	enum adv_name_type name_type;
	uint16_t props = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
   27cd0:	f242 0036 	movw	r0, #8246	; 0x2036
   27cd4:	f04f 0119 	mov.w	r1, #25
{
   27cd8:	4693      	mov	fp, r2
	bool dir_adv = param->peer != NULL, scannable;
   27cda:	bf18      	it	ne
   27cdc:	2401      	movne	r4, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(*cp));
   27cde:	f7fe fd11 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   27ce2:	4681      	mov	r9, r0
   27ce4:	2800      	cmp	r0, #0
   27ce6:	f000 810a 	beq.w	27efe <le_ext_adv_param_set+0x23e>
   27cea:	2119      	movs	r1, #25
   27cec:	300c      	adds	r0, #12
   27cee:	f004 fb9d 	bl	2c42c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	(void)memset(cp, 0, sizeof(*cp));
   27cf2:	2219      	movs	r2, #25
   27cf4:	4605      	mov	r5, r0
   27cf6:	2100      	movs	r1, #0
   27cf8:	f010 fd6a 	bl	387d0 <memset>

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   27cfc:	4622      	mov	r2, r4
   27cfe:	6871      	ldr	r1, [r6, #4]
   27d00:	f105 030a 	add.w	r3, r5, #10
   27d04:	4638      	mov	r0, r7
   27d06:	f7ff fd25 	bl	27754 <bt_id_set_adv_own_addr>
				     &cp->own_addr_type);
	if (err) {
   27d0a:	4604      	mov	r4, r0
   27d0c:	2800      	cmp	r0, #0
   27d0e:	f040 80c4 	bne.w	27e9a <le_ext_adv_param_set+0x1da>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   27d12:	f107 0009 	add.w	r0, r7, #9
	if (dir_adv) {
   27d16:	f1ba 0f00 	cmp.w	sl, #0
   27d1a:	f000 80c2 	beq.w	27ea2 <le_ext_adv_param_set+0x1e2>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   27d1e:	6931      	ldr	r1, [r6, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   27d20:	f010 ff3e 	bl	38ba0 <bt_addr_le_copy>
	}

	name_type = get_adv_name_type_param(param);
   27d24:	4630      	mov	r0, r6
   27d26:	f010 ffec 	bl	38d02 <get_adv_name_type_param>

	cp->handle = adv->handle;
   27d2a:	787b      	ldrb	r3, [r7, #1]
   27d2c:	702b      	strb	r3, [r5, #0]
	sys_put_le24(param->interval_min, cp->prim_min_interval);
   27d2e:	68b3      	ldr	r3, [r6, #8]
	dst[0] = val;
   27d30:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
   27d32:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   27d36:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   27d38:	712a      	strb	r2, [r5, #4]
	dst[2] = val >> 16;
   27d3a:	716b      	strb	r3, [r5, #5]
	sys_put_le24(param->interval_max, cp->prim_max_interval);
   27d3c:	68f3      	ldr	r3, [r6, #12]
	dst[0] = val;
   27d3e:	71ab      	strb	r3, [r5, #6]
	dst[1] = val >> 8;
   27d40:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   27d44:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   27d46:	71ea      	strb	r2, [r5, #7]
	dst[2] = val >> 16;
   27d48:	722b      	strb	r3, [r5, #8]
	name_type = get_adv_name_type_param(param);
   27d4a:	4680      	mov	r8, r0
	cp->prim_channel_map = get_adv_channel_map(param->options);
   27d4c:	6870      	ldr	r0, [r6, #4]
   27d4e:	f010 fefc 	bl	38b4a <get_adv_channel_map>
	cp->filter_policy = get_filter_policy(param->options);
   27d52:	2300      	movs	r3, #0
   27d54:	74ab      	strb	r3, [r5, #18]
	cp->tx_power = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
   27d56:	237f      	movs	r3, #127	; 0x7f
   27d58:	74eb      	strb	r3, [r5, #19]

	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
   27d5a:	2301      	movs	r3, #1
	cp->prim_channel_map = get_adv_channel_map(param->options);
   27d5c:	7268      	strb	r0, [r5, #9]
	cp->prim_adv_phy = BT_HCI_LE_PHY_1M;
   27d5e:	752b      	strb	r3, [r5, #20]
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   27d60:	6872      	ldr	r2, [r6, #4]
   27d62:	0551      	lsls	r1, r2, #21
   27d64:	d503      	bpl.n	27d6e <le_ext_adv_param_set+0xae>
		if (param->options & BT_LE_ADV_OPT_NO_2M) {
   27d66:	0514      	lsls	r4, r2, #20
			cp->sec_adv_phy = BT_HCI_LE_PHY_1M;
		} else {
			cp->sec_adv_phy = BT_HCI_LE_PHY_2M;
   27d68:	bf58      	it	pl
   27d6a:	2302      	movpl	r3, #2
   27d6c:	75ab      	strb	r3, [r5, #22]
		}
	}

	if (param->options & BT_LE_ADV_OPT_CODED) {
   27d6e:	6873      	ldr	r3, [r6, #4]
   27d70:	04d8      	lsls	r0, r3, #19
		cp->prim_adv_phy = BT_HCI_LE_PHY_CODED;
   27d72:	bf42      	ittt	mi
   27d74:	2303      	movmi	r3, #3
   27d76:	752b      	strbmi	r3, [r5, #20]
		cp->sec_adv_phy = BT_HCI_LE_PHY_CODED;
   27d78:	75ab      	strbmi	r3, [r5, #22]
	}

	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   27d7a:	6873      	ldr	r3, [r6, #4]
   27d7c:	f483 6480 	eor.w	r4, r3, #1024	; 0x400
   27d80:	f3c4 2480 	ubfx	r4, r4, #10, #1
		props |= BT_HCI_LE_ADV_PROP_LEGACY;
	}

	if (param->options & BT_LE_ADV_OPT_USE_TX_POWER) {
   27d84:	0459      	lsls	r1, r3, #17
	if (!(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   27d86:	ea4f 1404 	mov.w	r4, r4, lsl #4
		props |= BT_HCI_LE_ADV_PROP_TX_POWER;
   27d8a:	bf48      	it	mi
   27d8c:	f044 0440 	orrmi.w	r4, r4, #64	; 0x40
	}

	if (param->options & BT_LE_ADV_OPT_ANONYMOUS) {
   27d90:	049a      	lsls	r2, r3, #18
		props |= BT_HCI_LE_ADV_PROP_ANON;
   27d92:	bf44      	itt	mi
   27d94:	f044 0420 	orrmi.w	r4, r4, #32
   27d98:	b2a4      	uxthmi	r4, r4
	}

	if (param->options & BT_LE_ADV_OPT_NOTIFY_SCAN_REQ) {
   27d9a:	05db      	lsls	r3, r3, #23
		cp->scan_req_notify_enable = BT_HCI_LE_ADV_SCAN_REQ_ENABLE;
   27d9c:	bf44      	itt	mi
   27d9e:	2301      	movmi	r3, #1
   27da0:	762b      	strbmi	r3, [r5, #24]
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   27da2:	6873      	ldr	r3, [r6, #4]
   27da4:	f013 0f01 	tst.w	r3, #1
   27da8:	f403 7100 	and.w	r1, r3, #512	; 0x200
   27dac:	f000 8097 	beq.w	27ede <le_ext_adv_param_set+0x21e>
		props |= BT_HCI_LE_ADV_PROP_CONN;
   27db0:	f044 0201 	orr.w	r2, r4, #1
   27db4:	b292      	uxth	r2, r2
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   27db6:	f1ba 0f00 	cmp.w	sl, #0
   27dba:	d079      	beq.n	27eb0 <le_ext_adv_param_set+0x1f0>
			 */
			props |= BT_HCI_LE_ADV_PROP_SCAN;
		}
	}

	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   27dbc:	b911      	cbnz	r1, 27dc4 <le_ext_adv_param_set+0x104>
   27dbe:	f1bb 0f00 	cmp.w	fp, #0
   27dc2:	d070      	beq.n	27ea6 <le_ext_adv_param_set+0x1e6>
	    (name_type == ADV_NAME_TYPE_SD)) {
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   27dc4:	f044 0403 	orr.w	r4, r4, #3
   27dc8:	b2a4      	uxth	r4, r4

	scannable = !!(props & BT_HCI_LE_ADV_PROP_SCAN);

	if (dir_adv) {
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
		if (!(param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY)) {
   27dca:	06db      	lsls	r3, r3, #27
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
		}

		bt_addr_le_copy(&cp->peer_addr, param->peer);
   27dcc:	6931      	ldr	r1, [r6, #16]
   27dce:	f105 000b 	add.w	r0, r5, #11
		props |= BT_HCI_LE_ADV_PROP_DIRECT;
   27dd2:	bf4c      	ite	mi
   27dd4:	f044 0b04 	orrmi.w	fp, r4, #4
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
   27dd8:	f044 0b0c 	orrpl.w	fp, r4, #12
		bt_addr_le_copy(&cp->peer_addr, param->peer);
   27ddc:	f010 fee0 	bl	38ba0 <bt_addr_le_copy>
			props |= BT_HCI_LE_ADV_PROP_HI_DC_CONN;
   27de0:	fa1f fb8b 	uxth.w	fp, fp
		bt_addr_le_copy(&cp->peer_addr, param->peer);
   27de4:	46a2      	mov	sl, r4
   27de6:	465c      	mov	r4, fp
	}

	cp->sid = param->sid;
   27de8:	7873      	ldrb	r3, [r6, #1]
   27dea:	75eb      	strb	r3, [r5, #23]

	cp->props = sys_cpu_to_le16(props);
   27dec:	f8a5 4001 	strh.w	r4, [r5, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, &rsp);
   27df0:	aa01      	add	r2, sp, #4
   27df2:	4649      	mov	r1, r9
   27df4:	f242 0036 	movw	r0, #8246	; 0x2036
   27df8:	f7fe fcce 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   27dfc:	4604      	mov	r4, r0
   27dfe:	2800      	cmp	r0, #0
   27e00:	d14b      	bne.n	27e9a <le_ext_adv_param_set+0x1da>
		return err;
	}

#if defined(CONFIG_BT_EXT_ADV)
	struct bt_hci_rp_le_set_ext_adv_param *rp = (void *)rsp->data;
   27e02:	9801      	ldr	r0, [sp, #4]

	adv->tx_power = rp->tx_power;
   27e04:	68c3      	ldr	r3, [r0, #12]
   27e06:	f993 3001 	ldrsb.w	r3, [r3, #1]
   27e0a:	763b      	strb	r3, [r7, #24]
#endif /* defined(CONFIG_BT_EXT_ADV) */

	net_buf_unref(rsp);

	atomic_set_bit(adv->flags, BT_ADV_PARAMS_SET);
   27e0c:	f107 0510 	add.w	r5, r7, #16
	net_buf_unref(rsp);
   27e10:	f004 fa06 	bl	2c220 <net_buf_unref>
   27e14:	f3bf 8f5b 	dmb	ish
   27e18:	e855 3f00 	ldrex	r3, [r5]
   27e1c:	f043 0302 	orr.w	r3, r3, #2
   27e20:	e845 3200 	strex	r2, r3, [r5]
   27e24:	2a00      	cmp	r2, #0
   27e26:	d1f7      	bne.n	27e18 <le_ext_adv_param_set+0x158>
   27e28:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27e2c:	f06f 0108 	mvn.w	r1, #8
   27e30:	4628      	mov	r0, r5
   27e32:	f010 fea6 	bl	38b82 <atomic_and>

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_RANDOM_ADDR_PENDING)) {
   27e36:	0700      	lsls	r0, r0, #28
   27e38:	d459      	bmi.n	27eee <le_ext_adv_param_set+0x22e>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27e3a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   27e3e:	4628      	mov	r0, r5
   27e40:	f010 fe9f 	bl	38b82 <atomic_and>
	}

	/* Flag only used by bt_le_adv_start API. */
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, false);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   27e44:	f108 33ff 	add.w	r3, r8, #4294967295
   27e48:	425a      	negs	r2, r3
   27e4a:	415a      	adcs	r2, r3
   27e4c:	2108      	movs	r1, #8
   27e4e:	4628      	mov	r0, r5
   27e50:	f010 fea9 	bl	38ba6 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   27e54:	f1a8 0102 	sub.w	r1, r8, #2
   27e58:	424a      	negs	r2, r1
   27e5a:	414a      	adcs	r2, r1
   27e5c:	4628      	mov	r0, r5
   27e5e:	2109      	movs	r1, #9
   27e60:	f010 fea1 	bl	38ba6 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   27e64:	6872      	ldr	r2, [r6, #4]
   27e66:	210a      	movs	r1, #10
   27e68:	f002 0201 	and.w	r2, r2, #1
   27e6c:	4628      	mov	r0, r5
   27e6e:	f010 fe9a 	bl	38ba6 <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   27e72:	f3ca 0240 	ubfx	r2, sl, #1, #1
   27e76:	210b      	movs	r1, #11
   27e78:	4628      	mov	r0, r5
   27e7a:	f010 fe94 	bl	38ba6 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   27e7e:	6872      	ldr	r2, [r6, #4]
   27e80:	210d      	movs	r1, #13
   27e82:	f3c2 0280 	ubfx	r2, r2, #2, #1
   27e86:	4628      	mov	r0, r5
   27e88:	f010 fe8d 	bl	38ba6 <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	atomic_set_bit_to(adv->flags, BT_ADV_EXT_ADV,
   27e8c:	6872      	ldr	r2, [r6, #4]
   27e8e:	210c      	movs	r1, #12
   27e90:	f3c2 2280 	ubfx	r2, r2, #10, #1
   27e94:	4628      	mov	r0, r5
   27e96:	f010 fe86 	bl	38ba6 <atomic_set_bit_to>
			  param->options & BT_LE_ADV_OPT_EXT_ADV);

	return 0;
}
   27e9a:	4620      	mov	r0, r4
   27e9c:	b003      	add	sp, #12
   27e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   27ea2:	4918      	ldr	r1, [pc, #96]	; (27f04 <le_ext_adv_param_set+0x244>)
   27ea4:	e73c      	b.n	27d20 <le_ext_adv_param_set+0x60>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   27ea6:	f1b8 0f02 	cmp.w	r8, #2
   27eaa:	d08b      	beq.n	27dc4 <le_ext_adv_param_set+0x104>
		props |= BT_HCI_LE_ADV_PROP_CONN;
   27eac:	4614      	mov	r4, r2
   27eae:	e78c      	b.n	27dca <le_ext_adv_param_set+0x10a>
		if (!dir_adv && !(param->options & BT_LE_ADV_OPT_EXT_ADV)) {
   27eb0:	0558      	lsls	r0, r3, #21
   27eb2:	d40e      	bmi.n	27ed2 <le_ext_adv_param_set+0x212>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   27eb4:	f044 0403 	orr.w	r4, r4, #3
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   27eb8:	b2a4      	uxth	r4, r4
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   27eba:	b971      	cbnz	r1, 27eda <le_ext_adv_param_set+0x21a>
   27ebc:	f1bb 0f00 	cmp.w	fp, #0
   27ec0:	d10f      	bne.n	27ee2 <le_ext_adv_param_set+0x222>
   27ec2:	f1b8 0f02 	cmp.w	r8, #2
   27ec6:	d00c      	beq.n	27ee2 <le_ext_adv_param_set+0x222>
	if (dir_adv) {
   27ec8:	f1ba 0f00 	cmp.w	sl, #0
   27ecc:	f47f af7d 	bne.w	27dca <le_ext_adv_param_set+0x10a>
   27ed0:	e003      	b.n	27eda <le_ext_adv_param_set+0x21a>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   27ed2:	b151      	cbz	r1, 27eea <le_ext_adv_param_set+0x22a>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   27ed4:	f044 0403 	orr.w	r4, r4, #3
   27ed8:	b2a4      	uxth	r4, r4
	if (dir_adv) {
   27eda:	46a2      	mov	sl, r4
   27edc:	e784      	b.n	27de8 <le_ext_adv_param_set+0x128>
	if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || has_scan_data ||
   27ede:	2900      	cmp	r1, #0
   27ee0:	d0ec      	beq.n	27ebc <le_ext_adv_param_set+0x1fc>
		props |= BT_HCI_LE_ADV_PROP_SCAN;
   27ee2:	f044 0402 	orr.w	r4, r4, #2
   27ee6:	b2a4      	uxth	r4, r4
   27ee8:	e7ee      	b.n	27ec8 <le_ext_adv_param_set+0x208>
		props |= BT_HCI_LE_ADV_PROP_CONN;
   27eea:	4614      	mov	r4, r2
   27eec:	e7e6      	b.n	27ebc <le_ext_adv_param_set+0x1fc>
		err = bt_id_set_adv_random_addr(adv, &adv->random_addr.a);
   27eee:	1cf9      	adds	r1, r7, #3
   27ef0:	4638      	mov	r0, r7
   27ef2:	f010 fdb7 	bl	38a64 <bt_id_set_adv_random_addr>
		if (err) {
   27ef6:	2800      	cmp	r0, #0
   27ef8:	d09f      	beq.n	27e3a <le_ext_adv_param_set+0x17a>
   27efa:	4604      	mov	r4, r0
   27efc:	e7cd      	b.n	27e9a <le_ext_adv_param_set+0x1da>
		return -ENOBUFS;
   27efe:	f06f 0468 	mvn.w	r4, #104	; 0x68
   27f02:	e7ca      	b.n	27e9a <le_ext_adv_param_set+0x1da>
   27f04:	0003d520 	.word	0x0003d520

00027f08 <bt_le_adv_delete_legacy>:
{
   27f08:	b510      	push	{r4, lr}
	if (bt_dev.adv) {
   27f0a:	4c05      	ldr	r4, [pc, #20]	; (27f20 <bt_le_adv_delete_legacy+0x18>)
   27f0c:	69a0      	ldr	r0, [r4, #24]
   27f0e:	b130      	cbz	r0, 27f1e <bt_le_adv_delete_legacy+0x16>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27f10:	f06f 0101 	mvn.w	r1, #1
   27f14:	3010      	adds	r0, #16
   27f16:	f010 fe34 	bl	38b82 <atomic_and>
		bt_dev.adv = NULL;
   27f1a:	2300      	movs	r3, #0
   27f1c:	61a3      	str	r3, [r4, #24]
}
   27f1e:	bd10      	pop	{r4, pc}
   27f20:	20000440 	.word	0x20000440

00027f24 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   27f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return bt_dev.adv;
   27f26:	4b22      	ldr	r3, [pc, #136]	; (27fb0 <bt_le_adv_resume+0x8c>)
   27f28:	699e      	ldr	r6, [r3, #24]
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	struct bt_conn *conn;
	bool persist_paused = false;
	int err;

	if (!adv) {
   27f2a:	2e00      	cmp	r6, #0
   27f2c:	d03d      	beq.n	27faa <bt_le_adv_resume+0x86>
		LOG_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   27f2e:	f106 0410 	add.w	r4, r6, #16
   27f32:	210e      	movs	r1, #14
   27f34:	4620      	mov	r0, r4
   27f36:	f010 fe1d 	bl	38b74 <atomic_test_bit>
   27f3a:	b3b0      	cbz	r0, 27faa <bt_le_adv_resume+0x86>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   27f3c:	2107      	movs	r1, #7
   27f3e:	4620      	mov	r0, r4
   27f40:	f010 fe18 	bl	38b74 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   27f44:	bb88      	cbnz	r0, 27faa <bt_le_adv_resume+0x86>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   27f46:	210a      	movs	r1, #10
   27f48:	4620      	mov	r0, r4
   27f4a:	f010 fe13 	bl	38b74 <atomic_test_bit>
   27f4e:	b360      	cbz	r0, 27faa <bt_le_adv_resume+0x86>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   27f50:	a901      	add	r1, sp, #4
   27f52:	4630      	mov	r0, r6
   27f54:	f7ff fe7e 	bl	27c54 <le_adv_start_add_conn>
	if (err) {
   27f58:	4605      	mov	r5, r0
   27f5a:	bb30      	cbnz	r0, 27faa <bt_le_adv_resume+0x86>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
   27f5c:	4630      	mov	r0, r6
   27f5e:	2101      	movs	r1, #1
   27f60:	f010 ff21 	bl	38da6 <bt_le_adv_set_enable>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   27f64:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   27f66:	b928      	cbnz	r0, 27f74 <bt_le_adv_resume+0x50>
	bt_conn_unref(conn);
   27f68:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   27f6a:	b002      	add	sp, #8
   27f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   27f70:	f000 bc46 	b.w	28800 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27f74:	4629      	mov	r1, r5
   27f76:	4630      	mov	r0, r6
   27f78:	f000 fc7a 	bl	28870 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27f7c:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   27f80:	4620      	mov	r0, r4
   27f82:	f010 fdfe 	bl	38b82 <atomic_and>
   27f86:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   27f88:	4630      	mov	r0, r6
   27f8a:	f000 fc39 	bl	28800 <bt_conn_unref>
	if (persist_paused) {
   27f8e:	046b      	lsls	r3, r5, #17
   27f90:	d50b      	bpl.n	27faa <bt_le_adv_resume+0x86>
   27f92:	f3bf 8f5b 	dmb	ish
   27f96:	e854 3f00 	ldrex	r3, [r4]
   27f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   27f9e:	e844 3200 	strex	r2, r3, [r4]
   27fa2:	2a00      	cmp	r2, #0
   27fa4:	d1f7      	bne.n	27f96 <bt_le_adv_resume+0x72>
   27fa6:	f3bf 8f5b 	dmb	ish
}
   27faa:	b002      	add	sp, #8
   27fac:	bd70      	pop	{r4, r5, r6, pc}
   27fae:	bf00      	nop
   27fb0:	20000440 	.word	0x20000440

00027fb4 <bt_le_ext_adv_create>:
}

int bt_le_ext_adv_create(const struct bt_le_adv_param *param,
			 const struct bt_le_ext_adv_cb *cb,
			 struct bt_le_ext_adv **out_adv)
{
   27fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fb6:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27fb8:	4815      	ldr	r0, [pc, #84]	; (28010 <bt_le_ext_adv_create+0x5c>)
   27fba:	f010 fdd5 	bl	38b68 <atomic_get>
	struct bt_le_ext_adv *adv;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   27fbe:	0743      	lsls	r3, r0, #29
{
   27fc0:	460f      	mov	r7, r1
   27fc2:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   27fc4:	d51a      	bpl.n	27ffc <bt_le_ext_adv_create+0x48>
		return -EAGAIN;
	}

	if (!valid_adv_ext_param(param)) {
   27fc6:	4620      	mov	r0, r4
   27fc8:	f7ff fdf4 	bl	27bb4 <valid_adv_ext_param>
   27fcc:	b1c8      	cbz	r0, 28002 <bt_le_ext_adv_create+0x4e>
		return -EINVAL;
	}

	adv = adv_new();
   27fce:	f7ff fdcf 	bl	27b70 <adv_new>
   27fd2:	4605      	mov	r5, r0
	if (!adv) {
   27fd4:	b1c0      	cbz	r0, 28008 <bt_le_ext_adv_create+0x54>
		return -ENOMEM;
	}

	adv->id = param->id;
   27fd6:	7823      	ldrb	r3, [r4, #0]
   27fd8:	7003      	strb	r3, [r0, #0]
	adv->cb = cb;

	err = le_ext_adv_param_set(adv, param, false);
   27fda:	4621      	mov	r1, r4
	adv->cb = cb;
   27fdc:	6147      	str	r7, [r0, #20]
	err = le_ext_adv_param_set(adv, param, false);
   27fde:	2200      	movs	r2, #0
   27fe0:	f7ff fe6e 	bl	27cc0 <le_ext_adv_param_set>
	if (err) {
   27fe4:	4604      	mov	r4, r0
   27fe6:	b138      	cbz	r0, 27ff8 <bt_le_ext_adv_create+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27fe8:	f06f 0101 	mvn.w	r1, #1
   27fec:	f105 0010 	add.w	r0, r5, #16
   27ff0:	f010 fdc7 	bl	38b82 <atomic_and>
		return err;
	}

	*out_adv = adv;
	return 0;
}
   27ff4:	4620      	mov	r0, r4
   27ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*out_adv = adv;
   27ff8:	6035      	str	r5, [r6, #0]
	return 0;
   27ffa:	e7fb      	b.n	27ff4 <bt_le_ext_adv_create+0x40>
		return -EAGAIN;
   27ffc:	f06f 040a 	mvn.w	r4, #10
   28000:	e7f8      	b.n	27ff4 <bt_le_ext_adv_create+0x40>
		return -EINVAL;
   28002:	f06f 0415 	mvn.w	r4, #21
   28006:	e7f5      	b.n	27ff4 <bt_le_ext_adv_create+0x40>
		return -ENOMEM;
   28008:	f06f 040b 	mvn.w	r4, #11
   2800c:	e7f2      	b.n	27ff4 <bt_le_ext_adv_create+0x40>
   2800e:	bf00      	nop
   28010:	200004c8 	.word	0x200004c8

00028014 <bt_le_ext_adv_start>:
	return le_ext_adv_param_set(adv, param, false);
}

int bt_le_ext_adv_start(struct bt_le_ext_adv *adv,
			struct bt_le_ext_adv_start_param *param)
{
   28014:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = NULL;
	int err;

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28016:	f100 0710 	add.w	r7, r0, #16
{
   2801a:	b085      	sub	sp, #20
   2801c:	4605      	mov	r5, r0
   2801e:	460e      	mov	r6, r1
	struct bt_conn *conn = NULL;
   28020:	2300      	movs	r3, #0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28022:	2107      	movs	r1, #7
   28024:	4638      	mov	r0, r7
	struct bt_conn *conn = NULL;
   28026:	9303      	str	r3, [sp, #12]
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   28028:	f010 fda4 	bl	38b74 <atomic_test_bit>
   2802c:	2800      	cmp	r0, #0
   2802e:	d153      	bne.n	280d8 <bt_le_ext_adv_start+0xc4>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   28030:	210a      	movs	r1, #10
   28032:	4638      	mov	r0, r7
   28034:	f010 fd9e 	bl	38b74 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   28038:	bbc0      	cbnz	r0, 280ac <bt_le_ext_adv_start+0x98>
		if (err) {
			return err;
		}
	}

	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   2803a:	2e00      	cmp	r6, #0
   2803c:	d140      	bne.n	280c0 <bt_le_ext_adv_start+0xac>
   2803e:	4632      	mov	r2, r6
   28040:	2106      	movs	r1, #6
   28042:	4638      	mov	r0, r7
   28044:	f010 fdaf 	bl	38ba6 <atomic_set_bit_to>
			  (param->timeout > 0 || param->num_events > 0));

	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   28048:	210a      	movs	r1, #10
   2804a:	4638      	mov	r0, r7
   2804c:	f010 fd92 	bl	38b74 <atomic_test_bit>
   28050:	b938      	cbnz	r0, 28062 <bt_le_ext_adv_start+0x4e>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
			bt_id_set_adv_private_addr(adv);
		}
	} else {
		if (!atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   28052:	210d      	movs	r1, #13
   28054:	4638      	mov	r0, r7
   28056:	f010 fd8d 	bl	38b74 <atomic_test_bit>
   2805a:	b910      	cbnz	r0, 28062 <bt_le_ext_adv_start+0x4e>
			bt_id_set_adv_private_addr(adv);
   2805c:	4628      	mov	r0, r5
   2805e:	f010 fd4f 	bl	38b00 <bt_id_set_adv_private_addr>
		}
	}

	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
   28062:	4628      	mov	r0, r5
   28064:	f010 fe3d 	bl	38ce2 <get_adv_name_type>
   28068:	b158      	cbz	r0, 28082 <bt_le_ext_adv_start+0x6e>
	    !atomic_test_bit(adv->flags, BT_ADV_DATA_SET)) {
   2806a:	2102      	movs	r1, #2
   2806c:	4638      	mov	r0, r7
   2806e:	f010 fd81 	bl	38b74 <atomic_test_bit>
	if (get_adv_name_type(adv) != ADV_NAME_TYPE_NONE &&
   28072:	4603      	mov	r3, r0
   28074:	b928      	cbnz	r0, 28082 <bt_le_ext_adv_start+0x6e>
		/* Set the advertiser name */
		bt_le_ext_adv_set_data(adv, NULL, 0, NULL, 0);
   28076:	9000      	str	r0, [sp, #0]
   28078:	4602      	mov	r2, r0
   2807a:	4601      	mov	r1, r0
   2807c:	4628      	mov	r0, r5
   2807e:	f010 fe98 	bl	38db2 <bt_le_ext_adv_set_data>
	}

	err = bt_le_adv_set_enable_ext(adv, true, param);
   28082:	4628      	mov	r0, r5
   28084:	4632      	mov	r2, r6
   28086:	2101      	movs	r1, #1
   28088:	f010 fe4b 	bl	38d22 <bt_le_adv_set_enable_ext>
	if (err) {
		LOG_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2808c:	9d03      	ldr	r5, [sp, #12]
	if (err) {
   2808e:	4604      	mov	r4, r0
   28090:	b1f8      	cbz	r0, 280d2 <bt_le_ext_adv_start+0xbe>
		LOG_ERR("Failed to start advertiser");
   28092:	4813      	ldr	r0, [pc, #76]	; (280e0 <bt_le_ext_adv_start+0xcc>)
   28094:	2145      	movs	r1, #69	; 0x45
   28096:	f00f ffa5 	bl	37fe4 <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2809a:	b175      	cbz	r5, 280ba <bt_le_ext_adv_start+0xa6>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2809c:	2100      	movs	r1, #0
   2809e:	4628      	mov	r0, r5
   280a0:	f000 fbe6 	bl	28870 <bt_conn_set_state>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   280a4:	4628      	mov	r0, r5
   280a6:	f000 fbab 	bl	28800 <bt_conn_unref>
   280aa:	e006      	b.n	280ba <bt_le_ext_adv_start+0xa6>
		err = le_adv_start_add_conn(adv, &conn);
   280ac:	a903      	add	r1, sp, #12
   280ae:	4628      	mov	r0, r5
   280b0:	f7ff fdd0 	bl	27c54 <le_adv_start_add_conn>
		if (err) {
   280b4:	4604      	mov	r4, r0
   280b6:	2800      	cmp	r0, #0
   280b8:	d0bf      	beq.n	2803a <bt_le_ext_adv_start+0x26>
	}

	return 0;
}
   280ba:	4620      	mov	r0, r4
   280bc:	b005      	add	sp, #20
   280be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   280c0:	8833      	ldrh	r3, [r6, #0]
   280c2:	b923      	cbnz	r3, 280ce <bt_le_ext_adv_start+0xba>
			  (param->timeout > 0 || param->num_events > 0));
   280c4:	78b2      	ldrb	r2, [r6, #2]
   280c6:	3a00      	subs	r2, #0
   280c8:	bf18      	it	ne
   280ca:	2201      	movne	r2, #1
   280cc:	e7b8      	b.n	28040 <bt_le_ext_adv_start+0x2c>
	atomic_set_bit_to(adv->flags, BT_ADV_LIMITED, param &&
   280ce:	2201      	movs	r2, #1
   280d0:	e7b6      	b.n	28040 <bt_le_ext_adv_start+0x2c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   280d2:	2d00      	cmp	r5, #0
   280d4:	d1e6      	bne.n	280a4 <bt_le_ext_adv_start+0x90>
   280d6:	e7f0      	b.n	280ba <bt_le_ext_adv_start+0xa6>
		return -EALREADY;
   280d8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   280dc:	e7ed      	b.n	280ba <bt_le_ext_adv_start+0xa6>
   280de:	bf00      	nop
   280e0:	0003d9a4 	.word	0x0003d9a4

000280e4 <bt_hci_le_adv_set_terminated>:
#endif /* CONFIG_BT_PER_ADV */

#if defined(CONFIG_BT_EXT_ADV)
#if defined(CONFIG_BT_BROADCASTER)
void bt_hci_le_adv_set_terminated(struct net_buf *buf)
{
   280e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t conn_handle;
#if defined(CONFIG_BT_CONN) && (CONFIG_BT_EXT_ADV_MAX_ADV_SET > 1)
	bool was_adv_enabled;
#endif

	evt = (void *)buf->data;
   280e6:	68c6      	ldr	r6, [r0, #12]
	adv = bt_adv_lookup_handle(evt->adv_handle);
   280e8:	7875      	ldrb	r5, [r6, #1]
	if (handle < ARRAY_SIZE(adv_pool) &&
   280ea:	2d00      	cmp	r5, #0
   280ec:	d13b      	bne.n	28166 <bt_hci_le_adv_set_terminated+0x82>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   280ee:	4836      	ldr	r0, [pc, #216]	; (281c8 <bt_hci_le_adv_set_terminated+0xe4>)
   280f0:	f010 fd3a 	bl	38b68 <atomic_get>
   280f4:	07c2      	lsls	r2, r0, #31
   280f6:	d536      	bpl.n	28166 <bt_hci_le_adv_set_terminated+0x82>
	if (!adv) {
		LOG_ERR("No valid adv");
		return;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   280f8:	4c34      	ldr	r4, [pc, #208]	; (281cc <bt_hci_le_adv_set_terminated+0xe8>)
	conn_handle = sys_le16_to_cpu(evt->conn_handle);
   280fa:	8877      	ldrh	r7, [r6, #2]
	(void)bt_le_lim_adv_cancel_timeout(adv);
   280fc:	4620      	mov	r0, r4
   280fe:	f010 fe55 	bl	38dac <bt_le_lim_adv_cancel_timeout>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28102:	f06f 0180 	mvn.w	r1, #128	; 0x80
   28106:	f104 0010 	add.w	r0, r4, #16
   2810a:	f010 fd3a 	bl	38b82 <atomic_and>
			bt_dev.cached_conn_complete[i].valid = false;
		}
	}
#endif

	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2810e:	7833      	ldrb	r3, [r6, #0]
   28110:	2b00      	cmp	r3, #0
   28112:	d12f      	bne.n	28174 <bt_hci_le_adv_set_terminated+0x90>
		 */
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
	}

	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
		struct bt_conn *conn = bt_conn_lookup_handle(conn_handle);
   28114:	4638      	mov	r0, r7
   28116:	f000 fba3 	bl	28860 <bt_conn_lookup_handle>

		if (conn) {
   2811a:	4605      	mov	r5, r0
   2811c:	2800      	cmp	r0, #0
   2811e:	d13c      	bne.n	2819a <bt_hci_le_adv_set_terminated+0xb6>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28120:	4829      	ldr	r0, [pc, #164]	; (281c8 <bt_hci_le_adv_set_terminated+0xe4>)
   28122:	f06f 0140 	mvn.w	r1, #64	; 0x40
   28126:	f010 fd2c 	bl	38b82 <atomic_and>

			bt_conn_unref(conn);
		}
	}

	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_LIMITED)) {
   2812a:	0643      	lsls	r3, r0, #25
   2812c:	d50c      	bpl.n	28148 <bt_hci_le_adv_set_terminated+0x64>
		bt_id_adv_limited_stopped(adv);
   2812e:	4827      	ldr	r0, [pc, #156]	; (281cc <bt_hci_le_adv_set_terminated+0xe8>)
   28130:	f010 fcfd 	bl	38b2e <bt_id_adv_limited_stopped>

#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif

		if (adv->cb && adv->cb->sent) {
   28134:	6963      	ldr	r3, [r4, #20]
   28136:	b13b      	cbz	r3, 28148 <bt_hci_le_adv_set_terminated+0x64>
   28138:	681b      	ldr	r3, [r3, #0]
   2813a:	b12b      	cbz	r3, 28148 <bt_hci_le_adv_set_terminated+0x64>
			struct bt_le_ext_adv_sent_info info = {
   2813c:	7932      	ldrb	r2, [r6, #4]
				.num_sent = evt->num_completed_ext_adv_evts,
			};

			adv->cb->sent(adv, &info);
   2813e:	4823      	ldr	r0, [pc, #140]	; (281cc <bt_hci_le_adv_set_terminated+0xe8>)
			struct bt_le_ext_adv_sent_info info = {
   28140:	f88d 2004 	strb.w	r2, [sp, #4]
			adv->cb->sent(adv, &info);
   28144:	a901      	add	r1, sp, #4
   28146:	4798      	blx	r3
		}
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST) && adv == bt_dev.adv) {
   28148:	481f      	ldr	r0, [pc, #124]	; (281c8 <bt_hci_le_adv_set_terminated+0xe4>)
   2814a:	210e      	movs	r1, #14
   2814c:	f010 fd12 	bl	38b74 <atomic_test_bit>
   28150:	2800      	cmp	r0, #0
   28152:	d136      	bne.n	281c2 <bt_hci_le_adv_set_terminated+0xde>
   28154:	4b1e      	ldr	r3, [pc, #120]	; (281d0 <bt_hci_le_adv_set_terminated+0xec>)
   28156:	699b      	ldr	r3, [r3, #24]
   28158:	42a3      	cmp	r3, r4
   2815a:	d132      	bne.n	281c2 <bt_hci_le_adv_set_terminated+0xde>
		bt_le_adv_delete_legacy();
	}
}
   2815c:	b003      	add	sp, #12
   2815e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_adv_delete_legacy();
   28162:	f7ff bed1 	b.w	27f08 <bt_le_adv_delete_legacy>
		LOG_ERR("No valid adv");
   28166:	481b      	ldr	r0, [pc, #108]	; (281d4 <bt_hci_le_adv_set_terminated+0xf0>)
   28168:	2145      	movs	r1, #69	; 0x45
}
   2816a:	b003      	add	sp, #12
   2816c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		LOG_ERR("No valid adv");
   28170:	f00f bf38 	b.w	37fe4 <z_log_minimal_printk>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   28174:	210a      	movs	r1, #10
   28176:	f104 0010 	add.w	r0, r4, #16
   2817a:	f010 fcfb 	bl	38b74 <atomic_test_bit>
	if (evt->status && IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2817e:	b140      	cbz	r0, 28192 <bt_hci_le_adv_set_terminated+0xae>
		le_adv_stop_free_conn(adv, adv == bt_dev.adv ? evt->status : 0);
   28180:	4b13      	ldr	r3, [pc, #76]	; (281d0 <bt_hci_le_adv_set_terminated+0xec>)
   28182:	4812      	ldr	r0, [pc, #72]	; (281cc <bt_hci_le_adv_set_terminated+0xe8>)
   28184:	699b      	ldr	r3, [r3, #24]
   28186:	42a3      	cmp	r3, r4
   28188:	bf08      	it	eq
   2818a:	7835      	ldrbeq	r5, [r6, #0]
   2818c:	4629      	mov	r1, r5
   2818e:	f7ff fccb 	bl	27b28 <le_adv_stop_free_conn>
	if (IS_ENABLED(CONFIG_BT_CONN) && !evt->status) {
   28192:	7833      	ldrb	r3, [r6, #0]
   28194:	2b00      	cmp	r3, #0
   28196:	d1c3      	bne.n	28120 <bt_hci_le_adv_set_terminated+0x3c>
   28198:	e7bc      	b.n	28114 <bt_hci_le_adv_set_terminated+0x30>
					&bt_dev.id_addr[conn->id]);
   2819a:	7a01      	ldrb	r1, [r0, #8]
				bt_addr_le_copy(&conn->le.resp_addr,
   2819c:	4b0c      	ldr	r3, [pc, #48]	; (281d0 <bt_hci_le_adv_set_terminated+0xec>)
					&bt_dev.id_addr[conn->id]);
   2819e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   281a2:	4419      	add	r1, r3
   281a4:	309e      	adds	r0, #158	; 0x9e
   281a6:	f010 fcfb 	bl	38ba0 <bt_addr_le_copy>
			if (adv->cb && adv->cb->connected) {
   281aa:	6963      	ldr	r3, [r4, #20]
   281ac:	b12b      	cbz	r3, 281ba <bt_hci_le_adv_set_terminated+0xd6>
   281ae:	685b      	ldr	r3, [r3, #4]
   281b0:	b11b      	cbz	r3, 281ba <bt_hci_le_adv_set_terminated+0xd6>
				adv->cb->connected(adv, &info);
   281b2:	4806      	ldr	r0, [pc, #24]	; (281cc <bt_hci_le_adv_set_terminated+0xe8>)
				struct bt_le_ext_adv_connected_info info = {
   281b4:	9501      	str	r5, [sp, #4]
				adv->cb->connected(adv, &info);
   281b6:	a901      	add	r1, sp, #4
   281b8:	4798      	blx	r3
			bt_conn_unref(conn);
   281ba:	4628      	mov	r0, r5
   281bc:	f000 fb20 	bl	28800 <bt_conn_unref>
   281c0:	e7ae      	b.n	28120 <bt_hci_le_adv_set_terminated+0x3c>
}
   281c2:	b003      	add	sp, #12
   281c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   281c6:	bf00      	nop
   281c8:	20001eb0 	.word	0x20001eb0
   281cc:	20001ea0 	.word	0x20001ea0
   281d0:	20000440 	.word	0x20000440
   281d4:	0003d9c4 	.word	0x0003d9c4

000281d8 <bt_hci_le_scan_req_received>:

void bt_hci_le_scan_req_received(struct net_buf *buf)
{
   281d8:	b530      	push	{r4, r5, lr}
	struct bt_hci_evt_le_scan_req_received *evt;
	struct bt_le_ext_adv *adv;

	evt = (void *)buf->data;
   281da:	68c2      	ldr	r2, [r0, #12]
	if (handle < ARRAY_SIZE(adv_pool) &&
   281dc:	7813      	ldrb	r3, [r2, #0]
{
   281de:	b085      	sub	sp, #20
	if (handle < ARRAY_SIZE(adv_pool) &&
   281e0:	b95b      	cbnz	r3, 281fa <bt_hci_le_scan_req_received+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   281e2:	4b1a      	ldr	r3, [pc, #104]	; (2824c <bt_hci_le_scan_req_received+0x74>)
   281e4:	4618      	mov	r0, r3
   281e6:	f010 fcbf 	bl	38b68 <atomic_get>
   281ea:	07c1      	lsls	r1, r0, #31
   281ec:	d505      	bpl.n	281fa <bt_hci_le_scan_req_received+0x22>
	if (!adv) {
		LOG_ERR("No valid adv");
		return;
	}

	if (adv->cb && adv->cb->scanned) {
   281ee:	6859      	ldr	r1, [r3, #4]
   281f0:	f1a3 0510 	sub.w	r5, r3, #16
   281f4:	b941      	cbnz	r1, 28208 <bt_hci_le_scan_req_received+0x30>
		}

		info.addr = &id_addr;
		adv->cb->scanned(adv, &info);
	}
}
   281f6:	b005      	add	sp, #20
   281f8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No valid adv");
   281fa:	4815      	ldr	r0, [pc, #84]	; (28250 <bt_hci_le_scan_req_received+0x78>)
   281fc:	2145      	movs	r1, #69	; 0x45
}
   281fe:	b005      	add	sp, #20
   28200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("No valid adv");
   28204:	f00f beee 	b.w	37fe4 <z_log_minimal_printk>
	if (adv->cb && adv->cb->scanned) {
   28208:	6889      	ldr	r1, [r1, #8]
   2820a:	2900      	cmp	r1, #0
   2820c:	d0f3      	beq.n	281f6 <bt_hci_le_scan_req_received+0x1e>
			bt_addr_le_copy(&id_addr, &evt->addr);
   2820e:	1c51      	adds	r1, r2, #1
		if (evt->addr.type == BT_ADDR_LE_PUBLIC_ID ||
   28210:	7852      	ldrb	r2, [r2, #1]
   28212:	3a02      	subs	r2, #2
   28214:	2a01      	cmp	r2, #1
   28216:	ac02      	add	r4, sp, #8
   28218:	d80e      	bhi.n	28238 <bt_hci_le_scan_req_received+0x60>
			bt_addr_le_copy(&id_addr, &evt->addr);
   2821a:	4620      	mov	r0, r4
   2821c:	f010 fcc0 	bl	38ba0 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   28220:	f89d 3008 	ldrb.w	r3, [sp, #8]
   28224:	3b02      	subs	r3, #2
   28226:	f88d 3008 	strb.w	r3, [sp, #8]
		adv->cb->scanned(adv, &info);
   2822a:	696b      	ldr	r3, [r5, #20]
   2822c:	4809      	ldr	r0, [pc, #36]	; (28254 <bt_hci_le_scan_req_received+0x7c>)
   2822e:	689b      	ldr	r3, [r3, #8]
		info.addr = &id_addr;
   28230:	9401      	str	r4, [sp, #4]
		adv->cb->scanned(adv, &info);
   28232:	a901      	add	r1, sp, #4
   28234:	4798      	blx	r3
   28236:	e7de      	b.n	281f6 <bt_hci_le_scan_req_received+0x1e>
			bt_addr_le_copy(&id_addr,
   28238:	f813 0c10 	ldrb.w	r0, [r3, #-16]
   2823c:	f010 fc0d 	bl	38a5a <bt_lookup_id_addr>
   28240:	4601      	mov	r1, r0
   28242:	4620      	mov	r0, r4
   28244:	f010 fcac 	bl	38ba0 <bt_addr_le_copy>
   28248:	e7ef      	b.n	2822a <bt_hci_le_scan_req_received+0x52>
   2824a:	bf00      	nop
   2824c:	20001eb0 	.word	0x20001eb0
   28250:	0003d9c4 	.word	0x0003d9c4
   28254:	20001ea0 	.word	0x20001ea0

00028258 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   28258:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2825a:	4b11      	ldr	r3, [pc, #68]	; (282a0 <notify_connected+0x48>)
   2825c:	681d      	ldr	r5, [r3, #0]
{
   2825e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   28260:	b975      	cbnz	r5, 28280 <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28262:	4d10      	ldr	r5, [pc, #64]	; (282a4 <notify_connected+0x4c>)
   28264:	4e10      	ldr	r6, [pc, #64]	; (282a8 <notify_connected+0x50>)
   28266:	42b5      	cmp	r5, r6
   28268:	d918      	bls.n	2829c <notify_connected+0x44>
   2826a:	4910      	ldr	r1, [pc, #64]	; (282ac <notify_connected+0x54>)
   2826c:	4810      	ldr	r0, [pc, #64]	; (282b0 <notify_connected+0x58>)
   2826e:	f240 525b 	movw	r2, #1371	; 0x55b
   28272:	f00f fea9 	bl	37fc8 <assert_print>
   28276:	480d      	ldr	r0, [pc, #52]	; (282ac <notify_connected+0x54>)
   28278:	f240 515b 	movw	r1, #1371	; 0x55b
   2827c:	f00f fe9d 	bl	37fba <assert_post_action>
		if (cb->connected) {
   28280:	682b      	ldr	r3, [r5, #0]
   28282:	b113      	cbz	r3, 2828a <notify_connected+0x32>
			cb->connected(conn, conn->err);
   28284:	7a61      	ldrb	r1, [r4, #9]
   28286:	4620      	mov	r0, r4
   28288:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2828a:	696d      	ldr	r5, [r5, #20]
   2828c:	e7e8      	b.n	28260 <notify_connected+0x8>
		if (cb->connected) {
   2828e:	682b      	ldr	r3, [r5, #0]
   28290:	b113      	cbz	r3, 28298 <notify_connected+0x40>
			cb->connected(conn, conn->err);
   28292:	7a61      	ldrb	r1, [r4, #9]
   28294:	4620      	mov	r0, r4
   28296:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28298:	3518      	adds	r5, #24
   2829a:	e7e4      	b.n	28266 <notify_connected+0xe>
   2829c:	d3f7      	bcc.n	2828e <notify_connected+0x36>
		}
	}
}
   2829e:	bd70      	pop	{r4, r5, r6, pc}
   282a0:	20003918 	.word	0x20003918
   282a4:	0003bc4c 	.word	0x0003bc4c
   282a8:	0003bc4c 	.word	0x0003bc4c
   282ac:	0003d9dd 	.word	0x0003d9dd
   282b0:	0003c7f8 	.word	0x0003c7f8

000282b4 <tx_notify>:
{
   282b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   282b8:	4f15      	ldr	r7, [pc, #84]	; (28310 <tx_notify+0x5c>)
{
   282ba:	4604      	mov	r4, r0
	tx->cb = NULL;
   282bc:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   282c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   282c4:	f3ef 8311 	mrs	r3, BASEPRI
   282c8:	f382 8812 	msr	BASEPRI_MAX, r2
   282cc:	f3bf 8f6f 	isb	sy
	return list->head;
   282d0:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   282d2:	b929      	cbnz	r1, 282e0 <tx_notify+0x2c>
	__asm__ volatile(
   282d4:	f383 8811 	msr	BASEPRI, r3
   282d8:	f3bf 8f6f 	isb	sy
}
   282dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   282e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   282e2:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   282e4:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   282e6:	4281      	cmp	r1, r0
	list->tail = node;
   282e8:	bf08      	it	eq
   282ea:	6262      	streq	r2, [r4, #36]	; 0x24
   282ec:	f383 8811 	msr	BASEPRI, r3
   282f0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   282f4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   282f8:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   282fc:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   28300:	4638      	mov	r0, r7
   28302:	f013 f903 	bl	3b50c <k_queue_append>
		cb(conn, user_data, 0);
   28306:	2200      	movs	r2, #0
   28308:	4631      	mov	r1, r6
   2830a:	4620      	mov	r0, r4
   2830c:	47a8      	blx	r5
	while (1) {
   2830e:	e7d7      	b.n	282c0 <tx_notify+0xc>
   28310:	20000b48 	.word	0x20000b48

00028314 <conn_tx_destroy>:
{
   28314:	b570      	push	{r4, r5, r6, lr}
   28316:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   28318:	b941      	cbnz	r1, 2832c <conn_tx_destroy+0x18>
   2831a:	490d      	ldr	r1, [pc, #52]	; (28350 <conn_tx_destroy+0x3c>)
   2831c:	480d      	ldr	r0, [pc, #52]	; (28354 <conn_tx_destroy+0x40>)
   2831e:	2239      	movs	r2, #57	; 0x39
   28320:	f00f fe52 	bl	37fc8 <assert_print>
   28324:	480a      	ldr	r0, [pc, #40]	; (28350 <conn_tx_destroy+0x3c>)
   28326:	2139      	movs	r1, #57	; 0x39
   28328:	f00f fe47 	bl	37fba <assert_post_action>
	void *user_data = tx->user_data;
   2832c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   28330:	2200      	movs	r2, #0
	tx->user_data = NULL;
   28332:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   28336:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   28338:	4807      	ldr	r0, [pc, #28]	; (28358 <conn_tx_destroy+0x44>)
   2833a:	f013 f8e7 	bl	3b50c <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   2833e:	4631      	mov	r1, r6
   28340:	4620      	mov	r0, r4
   28342:	462b      	mov	r3, r5
   28344:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   28348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   2834c:	4718      	bx	r3
   2834e:	bf00      	nop
   28350:	0003d9dd 	.word	0x0003d9dd
   28354:	0003c7f8 	.word	0x0003c7f8
   28358:	20000b48 	.word	0x20000b48

0002835c <send_frag>:
{
   2835c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28360:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   28362:	698d      	ldr	r5, [r1, #24]
{
   28364:	460e      	mov	r6, r1
   28366:	4617      	mov	r7, r2
   28368:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   2836a:	f04f 33ff 	mov.w	r3, #4294967295
   2836e:	4850      	ldr	r0, [pc, #320]	; (284b0 <send_frag+0x154>)
   28370:	f04f 32ff 	mov.w	r2, #4294967295
   28374:	f00a f83c 	bl	323f0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   28378:	7aa3      	ldrb	r3, [r4, #10]
   2837a:	2b07      	cmp	r3, #7
   2837c:	f040 808c 	bne.w	28498 <send_frag+0x13c>
	__asm__ volatile(
   28380:	f04f 0340 	mov.w	r3, #64	; 0x40
   28384:	f3ef 8211 	mrs	r2, BASEPRI
   28388:	f383 8812 	msr	BASEPRI_MAX, r3
   2838c:	f3bf 8f6f 	isb	sy
	if (tx) {
   28390:	2d00      	cmp	r5, #0
   28392:	d04d      	beq.n	28430 <send_frag+0xd4>
	parent->next = child;
   28394:	2300      	movs	r3, #0
   28396:	602b      	str	r3, [r5, #0]
	return list->tail;
   28398:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   2839a:	2b00      	cmp	r3, #0
   2839c:	d145      	bne.n	2842a <send_frag+0xce>
	list->head = node;
   2839e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   283a2:	f382 8811 	msr	BASEPRI, r2
   283a6:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   283aa:	2104      	movs	r1, #4
   283ac:	f106 000c 	add.w	r0, r6, #12
   283b0:	f003 ffec 	bl	2c38c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   283b4:	8823      	ldrh	r3, [r4, #0]
   283b6:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   283ba:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   283be:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   283c0:	8a33      	ldrh	r3, [r6, #16]
   283c2:	3b04      	subs	r3, #4
   283c4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   283c6:	2302      	movs	r3, #2
   283c8:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   283ca:	4630      	mov	r0, r6
   283cc:	f7fe fc1a 	bl	26c04 <bt_send>
	if (err) {
   283d0:	4602      	mov	r2, r0
   283d2:	2800      	cmp	r0, #0
   283d4:	d06a      	beq.n	284ac <send_frag+0x150>
		LOG_ERR("Unable to send to driver (err %d)", err);
   283d6:	4837      	ldr	r0, [pc, #220]	; (284b4 <send_frag+0x158>)
   283d8:	2145      	movs	r1, #69	; 0x45
   283da:	f00f fe03 	bl	37fe4 <z_log_minimal_printk>
	__asm__ volatile(
   283de:	f04f 0340 	mov.w	r3, #64	; 0x40
   283e2:	f3ef 8111 	mrs	r1, BASEPRI
   283e6:	f383 8812 	msr	BASEPRI_MAX, r3
   283ea:	f3bf 8f6f 	isb	sy
		if (tx) {
   283ee:	2d00      	cmp	r5, #0
   283f0:	d034      	beq.n	2845c <send_frag+0x100>
	return list->head;
   283f2:	6962      	ldr	r2, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   283f4:	2300      	movs	r3, #0
   283f6:	b152      	cbz	r2, 2840e <send_frag+0xb2>
   283f8:	4295      	cmp	r5, r2
   283fa:	d12c      	bne.n	28456 <send_frag+0xfa>
	return node->next;
   283fc:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   283fe:	bb23      	cbnz	r3, 2844a <send_frag+0xee>
   28400:	69a3      	ldr	r3, [r4, #24]
	list->head = node;
   28402:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   28404:	429d      	cmp	r5, r3
   28406:	d100      	bne.n	2840a <send_frag+0xae>
	list->tail = node;
   28408:	61a2      	str	r2, [r4, #24]
	parent->next = child;
   2840a:	2300      	movs	r3, #0
   2840c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2840e:	f381 8811 	msr	BASEPRI, r1
   28412:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   28416:	4826      	ldr	r0, [pc, #152]	; (284b0 <send_frag+0x154>)
   28418:	f009 ffae 	bl	32378 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   2841c:	2300      	movs	r3, #0
   2841e:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   28420:	4629      	mov	r1, r5
   28422:	4620      	mov	r0, r4
   28424:	f7ff ff76 	bl	28314 <conn_tx_destroy>
   28428:	e030      	b.n	2848c <send_frag+0x130>
   2842a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2842c:	61a5      	str	r5, [r4, #24]
}
   2842e:	e7b8      	b.n	283a2 <send_frag+0x46>
	return list->tail;
   28430:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   28432:	b133      	cbz	r3, 28442 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   28434:	f103 080c 	add.w	r8, r3, #12
   28438:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   2843a:	3301      	adds	r3, #1
   2843c:	f8c8 3000 	str.w	r3, [r8]
   28440:	e7af      	b.n	283a2 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   28442:	69e3      	ldr	r3, [r4, #28]
   28444:	f104 081c 	add.w	r8, r4, #28
   28448:	e7f7      	b.n	2843a <send_frag+0xde>
	parent->next = child;
   2844a:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2844c:	69a2      	ldr	r2, [r4, #24]
   2844e:	4295      	cmp	r5, r2
	list->tail = node;
   28450:	bf08      	it	eq
   28452:	61a3      	streq	r3, [r4, #24]
}
   28454:	e7d9      	b.n	2840a <send_frag+0xae>
	return node->next;
   28456:	4613      	mov	r3, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28458:	6812      	ldr	r2, [r2, #0]
   2845a:	e7cc      	b.n	283f6 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   2845c:	f8d8 2000 	ldr.w	r2, [r8]
   28460:	b952      	cbnz	r2, 28478 <send_frag+0x11c>
   28462:	4915      	ldr	r1, [pc, #84]	; (284b8 <send_frag+0x15c>)
   28464:	4815      	ldr	r0, [pc, #84]	; (284bc <send_frag+0x160>)
   28466:	f240 2227 	movw	r2, #551	; 0x227
   2846a:	f00f fdad 	bl	37fc8 <assert_print>
   2846e:	4812      	ldr	r0, [pc, #72]	; (284b8 <send_frag+0x15c>)
   28470:	f240 2127 	movw	r1, #551	; 0x227
   28474:	f00f fda1 	bl	37fba <assert_post_action>
			(*pending_no_cb)--;
   28478:	3a01      	subs	r2, #1
   2847a:	f8c8 2000 	str.w	r2, [r8]
   2847e:	f381 8811 	msr	BASEPRI, r1
   28482:	f3bf 8f6f 	isb	sy
   28486:	480a      	ldr	r0, [pc, #40]	; (284b0 <send_frag+0x154>)
   28488:	f009 ff76 	bl	32378 <z_impl_k_sem_give>
	if (always_consume) {
   2848c:	f1b9 0f00 	cmp.w	r9, #0
   28490:	d108      	bne.n	284a4 <send_frag+0x148>
	return false;
   28492:	2000      	movs	r0, #0
}
   28494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28498:	4805      	ldr	r0, [pc, #20]	; (284b0 <send_frag+0x154>)
   2849a:	f009 ff6d 	bl	32378 <z_impl_k_sem_give>
	if (tx) {
   2849e:	2d00      	cmp	r5, #0
   284a0:	d1bc      	bne.n	2841c <send_frag+0xc0>
   284a2:	e7f3      	b.n	2848c <send_frag+0x130>
		net_buf_unref(buf);
   284a4:	4630      	mov	r0, r6
   284a6:	f003 febb 	bl	2c220 <net_buf_unref>
   284aa:	e7f2      	b.n	28492 <send_frag+0x136>
	return true;
   284ac:	2001      	movs	r0, #1
   284ae:	e7f1      	b.n	28494 <send_frag+0x138>
   284b0:	20000500 	.word	0x20000500
   284b4:	0003d7a7 	.word	0x0003d7a7
   284b8:	0003d9dd 	.word	0x0003d9dd
   284bc:	0003c7f8 	.word	0x0003c7f8

000284c0 <bt_conn_get_pkts>:
}
   284c0:	4800      	ldr	r0, [pc, #0]	; (284c4 <bt_conn_get_pkts+0x4>)
   284c2:	4770      	bx	lr
   284c4:	20000500 	.word	0x20000500

000284c8 <bt_conn_new>:
{
   284c8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   284ca:	2200      	movs	r2, #0
   284cc:	4604      	mov	r4, r0
   284ce:	428a      	cmp	r2, r1
   284d0:	d102      	bne.n	284d8 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   284d2:	2400      	movs	r4, #0
}
   284d4:	4620      	mov	r0, r4
   284d6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   284d8:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
   284dc:	2001      	movs	r0, #1
   284de:	f3bf 8f5b 	dmb	ish
   284e2:	e853 5f00 	ldrex	r5, [r3]
   284e6:	2d00      	cmp	r5, #0
   284e8:	d104      	bne.n	284f4 <bt_conn_new+0x2c>
   284ea:	e843 0c00 	strex	ip, r0, [r3]
   284ee:	f1bc 0f00 	cmp.w	ip, #0
   284f2:	d1f6      	bne.n	284e2 <bt_conn_new+0x1a>
   284f4:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   284f8:	d002      	beq.n	28500 <bt_conn_new+0x38>
   284fa:	34d0      	adds	r4, #208	; 0xd0
	for (i = 0; i < size; i++) {
   284fc:	4402      	add	r2, r0
   284fe:	e7e6      	b.n	284ce <bt_conn_new+0x6>
	if (!conn) {
   28500:	2c00      	cmp	r4, #0
   28502:	d0e6      	beq.n	284d2 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   28504:	22c8      	movs	r2, #200	; 0xc8
   28506:	2100      	movs	r1, #0
   28508:	4620      	mov	r0, r4
   2850a:	f010 f961 	bl	387d0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2850e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   28512:	4904      	ldr	r1, [pc, #16]	; (28524 <bt_conn_new+0x5c>)
   28514:	f00a fada 	bl	32acc <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   28518:	4903      	ldr	r1, [pc, #12]	; (28528 <bt_conn_new+0x60>)
   2851a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2851e:	f00a f9bf 	bl	328a0 <k_work_init>
	return conn;
   28522:	e7d7      	b.n	284d4 <bt_conn_new+0xc>
   28524:	00028e3d 	.word	0x00028e3d
   28528:	00038e0f 	.word	0x00038e0f

0002852c <conn_cleanup>:
{
   2852c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28530:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   28532:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   28534:	f104 0638 	add.w	r6, r4, #56	; 0x38
   28538:	2300      	movs	r3, #0
   2853a:	2200      	movs	r2, #0
   2853c:	4630      	mov	r0, r6
   2853e:	f011 febe 	bl	3a2be <net_buf_get>
   28542:	4603      	mov	r3, r0
   28544:	b960      	cbnz	r0, 28560 <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   28546:	6963      	ldr	r3, [r4, #20]
   28548:	b1ab      	cbz	r3, 28576 <conn_cleanup+0x4a>
   2854a:	4916      	ldr	r1, [pc, #88]	; (285a4 <conn_cleanup+0x78>)
   2854c:	4816      	ldr	r0, [pc, #88]	; (285a8 <conn_cleanup+0x7c>)
   2854e:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   28552:	f00f fd39 	bl	37fc8 <assert_print>
   28556:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   2855a:	4812      	ldr	r0, [pc, #72]	; (285a4 <conn_cleanup+0x78>)
   2855c:	f00f fd2d 	bl	37fba <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   28560:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   28562:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   28564:	f003 fe5c 	bl	2c220 <net_buf_unref>
		if (tx) {
   28568:	2d00      	cmp	r5, #0
   2856a:	d0e5      	beq.n	28538 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   2856c:	4629      	mov	r1, r5
   2856e:	4620      	mov	r0, r4
   28570:	f7ff fed0 	bl	28314 <conn_tx_destroy>
   28574:	e7de      	b.n	28534 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   28576:	69e3      	ldr	r3, [r4, #28]
   28578:	b143      	cbz	r3, 2858c <conn_cleanup+0x60>
   2857a:	490a      	ldr	r1, [pc, #40]	; (285a4 <conn_cleanup+0x78>)
   2857c:	480a      	ldr	r0, [pc, #40]	; (285a8 <conn_cleanup+0x7c>)
   2857e:	f240 22b5 	movw	r2, #693	; 0x2b5
   28582:	f00f fd21 	bl	37fc8 <assert_print>
   28586:	f240 21b5 	movw	r1, #693	; 0x2b5
   2858a:	e7e6      	b.n	2855a <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   2858c:	4620      	mov	r0, r4
   2858e:	f010 fc41 	bl	38e14 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   28592:	f104 0060 	add.w	r0, r4, #96	; 0x60
   28596:	2200      	movs	r2, #0
}
   28598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2859c:	2300      	movs	r3, #0
   2859e:	f00a bb7f 	b.w	32ca0 <k_work_reschedule>
   285a2:	bf00      	nop
   285a4:	0003d9dd 	.word	0x0003d9dd
   285a8:	0003c7f8 	.word	0x0003c7f8

000285ac <bt_conn_recv>:
{
   285ac:	b570      	push	{r4, r5, r6, lr}
   285ae:	4616      	mov	r6, r2
   285b0:	4604      	mov	r4, r0
   285b2:	460d      	mov	r5, r1
	tx_notify(conn);
   285b4:	f7ff fe7e 	bl	282b4 <tx_notify>
	switch (flags) {
   285b8:	2e01      	cmp	r6, #1
   285ba:	d01f      	beq.n	285fc <bt_conn_recv+0x50>
   285bc:	2e02      	cmp	r6, #2
   285be:	d149      	bne.n	28654 <bt_conn_recv+0xa8>
		if (conn->rx) {
   285c0:	6923      	ldr	r3, [r4, #16]
   285c2:	b133      	cbz	r3, 285d2 <bt_conn_recv+0x26>
			LOG_ERR("Unexpected first L2CAP frame");
   285c4:	482b      	ldr	r0, [pc, #172]	; (28674 <bt_conn_recv+0xc8>)
   285c6:	2145      	movs	r1, #69	; 0x45
   285c8:	f00f fd0c 	bl	37fe4 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   285cc:	4620      	mov	r0, r4
   285ce:	f010 fc21 	bl	38e14 <bt_conn_reset_rx_state>
		conn->rx = buf;
   285d2:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   285d4:	6921      	ldr	r1, [r4, #16]
   285d6:	8a0a      	ldrh	r2, [r1, #16]
   285d8:	2a01      	cmp	r2, #1
   285da:	d949      	bls.n	28670 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   285dc:	68cb      	ldr	r3, [r1, #12]
   285de:	881b      	ldrh	r3, [r3, #0]
   285e0:	3304      	adds	r3, #4
   285e2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   285e4:	429a      	cmp	r2, r3
   285e6:	d343      	bcc.n	28670 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   285e8:	d93a      	bls.n	28660 <bt_conn_recv+0xb4>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   285ea:	4823      	ldr	r0, [pc, #140]	; (28678 <bt_conn_recv+0xcc>)
   285ec:	2145      	movs	r1, #69	; 0x45
   285ee:	f00f fcf9 	bl	37fe4 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   285f2:	4620      	mov	r0, r4
}
   285f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   285f8:	f010 bc0c 	b.w	38e14 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   285fc:	6920      	ldr	r0, [r4, #16]
   285fe:	b938      	cbnz	r0, 28610 <bt_conn_recv+0x64>
			LOG_ERR("Unexpected L2CAP continuation");
   28600:	481e      	ldr	r0, [pc, #120]	; (2867c <bt_conn_recv+0xd0>)
   28602:	2145      	movs	r1, #69	; 0x45
   28604:	f00f fcee 	bl	37fe4 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   28608:	4620      	mov	r0, r4
   2860a:	f010 fc03 	bl	38e14 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   2860e:	e001      	b.n	28614 <bt_conn_recv+0x68>
		if (!buf->len) {
   28610:	8a2e      	ldrh	r6, [r5, #16]
   28612:	b926      	cbnz	r6, 2861e <bt_conn_recv+0x72>
			net_buf_unref(buf);
   28614:	4628      	mov	r0, r5
}
   28616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   2861a:	f003 be01 	b.w	2c220 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   2861e:	300c      	adds	r0, #12
   28620:	f011 fe5b 	bl	3a2da <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   28624:	4286      	cmp	r6, r0
   28626:	d90b      	bls.n	28640 <bt_conn_recv+0x94>
			LOG_ERR("Not enough buffer space for L2CAP data");
   28628:	4815      	ldr	r0, [pc, #84]	; (28680 <bt_conn_recv+0xd4>)
   2862a:	2145      	movs	r1, #69	; 0x45
   2862c:	f00f fcda 	bl	37fe4 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   28630:	6921      	ldr	r1, [r4, #16]
   28632:	2200      	movs	r2, #0
   28634:	4620      	mov	r0, r4
   28636:	f000 fe43 	bl	292c0 <bt_l2cap_recv>
			conn->rx = NULL;
   2863a:	2300      	movs	r3, #0
   2863c:	6123      	str	r3, [r4, #16]
   2863e:	e7e9      	b.n	28614 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   28640:	6920      	ldr	r0, [r4, #16]
   28642:	8a2a      	ldrh	r2, [r5, #16]
   28644:	68e9      	ldr	r1, [r5, #12]
   28646:	300c      	adds	r0, #12
   28648:	f011 fe4f 	bl	3a2ea <net_buf_simple_add_mem>
		net_buf_unref(buf);
   2864c:	4628      	mov	r0, r5
   2864e:	f003 fde7 	bl	2c220 <net_buf_unref>
		break;
   28652:	e7bf      	b.n	285d4 <bt_conn_recv+0x28>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   28654:	480b      	ldr	r0, [pc, #44]	; (28684 <bt_conn_recv+0xd8>)
   28656:	4632      	mov	r2, r6
   28658:	2145      	movs	r1, #69	; 0x45
   2865a:	f00f fcc3 	bl	37fe4 <z_log_minimal_printk>
   2865e:	e7d3      	b.n	28608 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   28660:	2300      	movs	r3, #0
   28662:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   28664:	4620      	mov	r0, r4
   28666:	2201      	movs	r2, #1
}
   28668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   2866c:	f000 be28 	b.w	292c0 <bt_l2cap_recv>
}
   28670:	bd70      	pop	{r4, r5, r6, pc}
   28672:	bf00      	nop
   28674:	0003da0d 	.word	0x0003da0d
   28678:	0003daa1 	.word	0x0003daa1
   2867c:	0003da2f 	.word	0x0003da2f
   28680:	0003da52 	.word	0x0003da52
   28684:	0003da7e 	.word	0x0003da7e

00028688 <bt_conn_send_cb>:
{
   28688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2868a:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2868c:	7a83      	ldrb	r3, [r0, #10]
   2868e:	2b07      	cmp	r3, #7
{
   28690:	4604      	mov	r4, r0
   28692:	460e      	mov	r6, r1
   28694:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   28696:	d006      	beq.n	286a6 <bt_conn_send_cb+0x1e>
		LOG_ERR("not connected!");
   28698:	481b      	ldr	r0, [pc, #108]	; (28708 <bt_conn_send_cb+0x80>)
   2869a:	2145      	movs	r1, #69	; 0x45
   2869c:	f00f fca2 	bl	37fe4 <z_log_minimal_printk>
		return -ENOTCONN;
   286a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   286a4:	e016      	b.n	286d4 <bt_conn_send_cb+0x4c>
	if (cb) {
   286a6:	b36a      	cbz	r2, 28704 <bt_conn_send_cb+0x7c>
	return z_impl_z_current_get();
   286a8:	f00b fac6 	bl	33c38 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   286ac:	4b17      	ldr	r3, [pc, #92]	; (2870c <bt_conn_send_cb+0x84>)
   286ae:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   286b0:	4817      	ldr	r0, [pc, #92]	; (28710 <bt_conn_send_cb+0x88>)
   286b2:	bf07      	ittee	eq
   286b4:	2200      	moveq	r2, #0
   286b6:	2300      	moveq	r3, #0
   286b8:	f04f 32ff 	movne.w	r2, #4294967295
   286bc:	f04f 33ff 	movne.w	r3, #4294967295
   286c0:	f009 fe02 	bl	322c8 <z_impl_k_queue_get>
   286c4:	4601      	mov	r1, r0
		if (!tx) {
   286c6:	b930      	cbnz	r0, 286d6 <bt_conn_send_cb+0x4e>
			LOG_ERR("Unable to allocate TX context");
   286c8:	4812      	ldr	r0, [pc, #72]	; (28714 <bt_conn_send_cb+0x8c>)
   286ca:	2145      	movs	r1, #69	; 0x45
   286cc:	f00f fc8a 	bl	37fe4 <z_log_minimal_printk>
			return -ENOBUFS;
   286d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   286d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   286d6:	7aa3      	ldrb	r3, [r4, #10]
   286d8:	2b07      	cmp	r3, #7
   286da:	f04f 0200 	mov.w	r2, #0
   286de:	d006      	beq.n	286ee <bt_conn_send_cb+0x66>
	tx->user_data = NULL;
   286e0:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
   286e4:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
   286e6:	480a      	ldr	r0, [pc, #40]	; (28710 <bt_conn_send_cb+0x88>)
   286e8:	f012 ff10 	bl	3b50c <k_queue_append>
}
   286ec:	e7d8      	b.n	286a0 <bt_conn_send_cb+0x18>
		tx->user_data = user_data;
   286ee:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   286f2:	60c2      	str	r2, [r0, #12]
		tx_data(buf)->tx = tx;
   286f4:	61b1      	str	r1, [r6, #24]
	net_buf_put(&conn->tx_queue, buf);
   286f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   286fa:	4631      	mov	r1, r6
   286fc:	f003 fd70 	bl	2c1e0 <net_buf_put>
	return 0;
   28700:	2000      	movs	r0, #0
   28702:	e7e7      	b.n	286d4 <bt_conn_send_cb+0x4c>
   28704:	4611      	mov	r1, r2
   28706:	e7f5      	b.n	286f4 <bt_conn_send_cb+0x6c>
   28708:	0003dac1 	.word	0x0003dac1
   2870c:	20003230 	.word	0x20003230
   28710:	20000b48 	.word	0x20000b48
   28714:	0003dad5 	.word	0x0003dad5

00028718 <bt_conn_prepare_events>:
{
   28718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2871c:	4606      	mov	r6, r0
	z_impl_k_poll_signal_init(sig);
   2871e:	4820      	ldr	r0, [pc, #128]	; (287a0 <bt_conn_prepare_events+0x88>)
   28720:	4c20      	ldr	r4, [pc, #128]	; (287a4 <bt_conn_prepare_events+0x8c>)
   28722:	f013 f88f 	bl	3b844 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   28726:	4b1e      	ldr	r3, [pc, #120]	; (287a0 <bt_conn_prepare_events+0x88>)
   28728:	2200      	movs	r2, #0
   2872a:	2101      	movs	r1, #1
   2872c:	4630      	mov	r0, r6
   2872e:	f00c f85f 	bl	347f0 <k_poll_event_init>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28732:	2700      	movs	r7, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   28734:	2501      	movs	r5, #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   28736:	f04f 0914 	mov.w	r9, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2873a:	f3bf 8f5b 	dmb	ish
   2873e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   28742:	f3bf 8f5b 	dmb	ish
   28746:	fb09 6805 	mla	r8, r9, r5, r6
	if (!atomic_get(&conn->ref)) {
   2874a:	b19b      	cbz	r3, 28774 <bt_conn_prepare_events+0x5c>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2874c:	7aa3      	ldrb	r3, [r4, #10]
   2874e:	b9c3      	cbnz	r3, 28782 <bt_conn_prepare_events+0x6a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28750:	f3bf 8f5b 	dmb	ish
   28754:	1d23      	adds	r3, r4, #4
   28756:	e853 2f00 	ldrex	r2, [r3]
   2875a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   2875e:	e843 1000 	strex	r0, r1, [r3]
   28762:	2800      	cmp	r0, #0
   28764:	d1f7      	bne.n	28756 <bt_conn_prepare_events+0x3e>
   28766:	f3bf 8f5b 	dmb	ish
   2876a:	0653      	lsls	r3, r2, #25
   2876c:	d509      	bpl.n	28782 <bt_conn_prepare_events+0x6a>
		conn_cleanup(conn);
   2876e:	4620      	mov	r0, r4
   28770:	f7ff fedc 	bl	2852c <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28774:	34d0      	adds	r4, #208	; 0xd0
   28776:	b117      	cbz	r7, 2877e <bt_conn_prepare_events+0x66>
}
   28778:	4628      	mov	r0, r5
   2877a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2877e:	2701      	movs	r7, #1
   28780:	e7db      	b.n	2873a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   28782:	7aa3      	ldrb	r3, [r4, #10]
   28784:	2b07      	cmp	r3, #7
   28786:	d1f5      	bne.n	28774 <bt_conn_prepare_events+0x5c>
	k_poll_event_init(&events[0],
   28788:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2878c:	2200      	movs	r2, #0
   2878e:	2104      	movs	r1, #4
   28790:	4640      	mov	r0, r8
   28792:	f00c f82d 	bl	347f0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   28796:	2301      	movs	r3, #1
   28798:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   2879c:	441d      	add	r5, r3
   2879e:	e7e9      	b.n	28774 <bt_conn_prepare_events+0x5c>
   287a0:	200006bc 	.word	0x200006bc
   287a4:	20001ef0 	.word	0x20001ef0

000287a8 <bt_conn_ref>:
{
   287a8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   287aa:	b950      	cbnz	r0, 287c2 <bt_conn_ref+0x1a>
   287ac:	4912      	ldr	r1, [pc, #72]	; (287f8 <bt_conn_ref+0x50>)
   287ae:	4813      	ldr	r0, [pc, #76]	; (287fc <bt_conn_ref+0x54>)
   287b0:	f240 427c 	movw	r2, #1148	; 0x47c
   287b4:	f00f fc08 	bl	37fc8 <assert_print>
   287b8:	480f      	ldr	r0, [pc, #60]	; (287f8 <bt_conn_ref+0x50>)
   287ba:	f240 417c 	movw	r1, #1148	; 0x47c
   287be:	f00f fbfc 	bl	37fba <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   287c2:	f3bf 8f5b 	dmb	ish
   287c6:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
   287ca:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   287ce:	f100 02c8 	add.w	r2, r0, #200	; 0xc8
		if (!old) {
   287d2:	b17b      	cbz	r3, 287f4 <bt_conn_ref+0x4c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   287d4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   287d8:	1c59      	adds	r1, r3, #1
   287da:	e852 4f00 	ldrex	r4, [r2]
   287de:	429c      	cmp	r4, r3
   287e0:	d104      	bne.n	287ec <bt_conn_ref+0x44>
   287e2:	e842 1c00 	strex	ip, r1, [r2]
   287e6:	f1bc 0f00 	cmp.w	ip, #0
   287ea:	d1f6      	bne.n	287da <bt_conn_ref+0x32>
   287ec:	f3bf 8f5b 	dmb	ish
   287f0:	d1e7      	bne.n	287c2 <bt_conn_ref+0x1a>
}
   287f2:	bd10      	pop	{r4, pc}
			return NULL;
   287f4:	4618      	mov	r0, r3
   287f6:	e7fc      	b.n	287f2 <bt_conn_ref+0x4a>
   287f8:	0003d9dd 	.word	0x0003d9dd
   287fc:	0003c7f8 	.word	0x0003c7f8

00028800 <bt_conn_unref>:
{
   28800:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   28802:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   28806:	f3bf 8f5b 	dmb	ish
   2880a:	e853 2f00 	ldrex	r2, [r3]
   2880e:	1e51      	subs	r1, r2, #1
   28810:	e843 1400 	strex	r4, r1, [r3]
   28814:	2c00      	cmp	r4, #0
   28816:	d1f8      	bne.n	2880a <bt_conn_unref+0xa>
   28818:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   2881c:	2a00      	cmp	r2, #0
   2881e:	dc0a      	bgt.n	28836 <bt_conn_unref+0x36>
   28820:	490d      	ldr	r1, [pc, #52]	; (28858 <bt_conn_unref+0x58>)
   28822:	480e      	ldr	r0, [pc, #56]	; (2885c <bt_conn_unref+0x5c>)
   28824:	f44f 6293 	mov.w	r2, #1176	; 0x498
   28828:	f00f fbce 	bl	37fc8 <assert_print>
   2882c:	480a      	ldr	r0, [pc, #40]	; (28858 <bt_conn_unref+0x58>)
   2882e:	f44f 6193 	mov.w	r1, #1176	; 0x498
   28832:	f00f fbc2 	bl	37fba <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   28836:	8842      	ldrh	r2, [r0, #2]
   28838:	f240 1301 	movw	r3, #257	; 0x101
   2883c:	429a      	cmp	r2, r3
   2883e:	d10a      	bne.n	28856 <bt_conn_unref+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28840:	f3bf 8f5b 	dmb	ish
   28844:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
   28848:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2884c:	b91b      	cbnz	r3, 28856 <bt_conn_unref+0x56>
}
   2884e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   28852:	f7ff bb67 	b.w	27f24 <bt_le_adv_resume>
}
   28856:	bd10      	pop	{r4, pc}
   28858:	0003d9dd 	.word	0x0003d9dd
   2885c:	0003c7f8 	.word	0x0003c7f8

00028860 <bt_conn_lookup_handle>:
{
   28860:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   28862:	2102      	movs	r1, #2
   28864:	4801      	ldr	r0, [pc, #4]	; (2886c <bt_conn_lookup_handle+0xc>)
   28866:	f010 bade 	b.w	38e26 <conn_lookup_handle>
   2886a:	bf00      	nop
   2886c:	20001ef0 	.word	0x20001ef0

00028870 <bt_conn_set_state>:
{
   28870:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   28872:	7a85      	ldrb	r5, [r0, #10]
   28874:	428d      	cmp	r5, r1
{
   28876:	4604      	mov	r4, r0
	if (conn->state == state) {
   28878:	f000 808d 	beq.w	28996 <bt_conn_set_state+0x126>
	conn->state = state;
   2887c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   2887e:	b925      	cbnz	r5, 2888a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   28880:	7883      	ldrb	r3, [r0, #2]
   28882:	2b08      	cmp	r3, #8
   28884:	d001      	beq.n	2888a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   28886:	f7ff ff8f 	bl	287a8 <bt_conn_ref>
	switch (conn->state) {
   2888a:	7aa3      	ldrb	r3, [r4, #10]
   2888c:	2b01      	cmp	r3, #1
   2888e:	d116      	bne.n	288be <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   28890:	4d50      	ldr	r5, [pc, #320]	; (289d4 <bt_conn_set_state+0x164>)
		tx->pending_no_cb = 0U;
   28892:	2600      	movs	r6, #0
	__asm__ volatile(
   28894:	f04f 0240 	mov.w	r2, #64	; 0x40
   28898:	f3ef 8311 	mrs	r3, BASEPRI
   2889c:	f382 8812 	msr	BASEPRI_MAX, r2
   288a0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   288a4:	69e2      	ldr	r2, [r4, #28]
   288a6:	2a00      	cmp	r2, #0
   288a8:	d06f      	beq.n	2898a <bt_conn_set_state+0x11a>
			conn->pending_no_cb--;
   288aa:	3a01      	subs	r2, #1
   288ac:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   288ae:	f383 8811 	msr	BASEPRI, r3
   288b2:	f3bf 8f6f 	isb	sy
   288b6:	4628      	mov	r0, r5
   288b8:	f009 fd5e 	bl	32378 <z_impl_k_sem_give>
}
   288bc:	e7ea      	b.n	28894 <bt_conn_set_state+0x24>
	switch (conn->state) {
   288be:	2b07      	cmp	r3, #7
   288c0:	d009      	beq.n	288d6 <bt_conn_set_state+0x66>
   288c2:	2b00      	cmp	r3, #0
   288c4:	d167      	bne.n	28996 <bt_conn_set_state+0x126>
		if (conn->type == BT_CONN_TYPE_SCO) {
   288c6:	78a3      	ldrb	r3, [r4, #2]
   288c8:	2b04      	cmp	r3, #4
   288ca:	d121      	bne.n	28910 <bt_conn_set_state+0xa0>
			bt_conn_unref(conn);
   288cc:	4620      	mov	r0, r4
}
   288ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   288d2:	f7ff bf95 	b.w	28800 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   288d6:	78a3      	ldrb	r3, [r4, #2]
   288d8:	2b04      	cmp	r3, #4
   288da:	d05c      	beq.n	28996 <bt_conn_set_state+0x126>
	z_impl_k_queue_init(queue);
   288dc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   288e0:	f012 fe07 	bl	3b4f2 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   288e4:	483c      	ldr	r0, [pc, #240]	; (289d8 <bt_conn_set_state+0x168>)
   288e6:	2100      	movs	r1, #0
   288e8:	f00c f85e 	bl	349a8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   288ec:	2300      	movs	r3, #0
	list->tail = NULL;
   288ee:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   288f2:	78e3      	ldrb	r3, [r4, #3]
   288f4:	2b01      	cmp	r3, #1
   288f6:	d14e      	bne.n	28996 <bt_conn_set_state+0x126>
			conn->le.conn_param_retry_countdown =
   288f8:	2303      	movs	r3, #3
   288fa:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   288fe:	f104 0060 	add.w	r0, r4, #96	; 0x60
   28902:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   28906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2890a:	2300      	movs	r3, #0
   2890c:	f00a b964 	b.w	32bd8 <k_work_schedule>
		switch (old_state) {
   28910:	3d01      	subs	r5, #1
   28912:	2d05      	cmp	r5, #5
   28914:	d83f      	bhi.n	28996 <bt_conn_set_state+0x126>
   28916:	a301      	add	r3, pc, #4	; (adr r3, 2891c <bt_conn_set_state+0xac>)
   28918:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2891c:	00028935 	.word	0x00028935
   28920:	0002897d 	.word	0x0002897d
   28924:	000288cd 	.word	0x000288cd
   28928:	000288cd 	.word	0x000288cd
   2892c:	0002897d 	.word	0x0002897d
   28930:	0002897d 	.word	0x0002897d
			tx_notify(conn);
   28934:	4620      	mov	r0, r4
   28936:	f7ff fcbd 	bl	282b4 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   2893a:	78a3      	ldrb	r3, [r4, #2]
   2893c:	2b01      	cmp	r3, #1
   2893e:	d10a      	bne.n	28956 <bt_conn_set_state+0xe6>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   28940:	f104 0560 	add.w	r5, r4, #96	; 0x60
   28944:	4628      	mov	r0, r5
   28946:	f012 fe6a 	bl	3b61e <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   2894a:	f010 0f0c 	tst.w	r0, #12
   2894e:	d002      	beq.n	28956 <bt_conn_set_state+0xe6>
				k_work_cancel_delayable(&conn->deferred_work);
   28950:	4628      	mov	r0, r5
   28952:	f00a f9ab 	bl	32cac <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28956:	f3bf 8f5b 	dmb	ish
   2895a:	3404      	adds	r4, #4
   2895c:	e854 3f00 	ldrex	r3, [r4]
   28960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28964:	e844 3200 	strex	r2, r3, [r4]
   28968:	2a00      	cmp	r2, #0
   2896a:	d1f7      	bne.n	2895c <bt_conn_set_state+0xec>
   2896c:	f3bf 8f5b 	dmb	ish
   28970:	4819      	ldr	r0, [pc, #100]	; (289d8 <bt_conn_set_state+0x168>)
}
   28972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28976:	2100      	movs	r1, #0
   28978:	f00c b816 	b.w	349a8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2897c:	7a63      	ldrb	r3, [r4, #9]
   2897e:	2b00      	cmp	r3, #0
   28980:	d0a4      	beq.n	288cc <bt_conn_set_state+0x5c>
				notify_connected(conn);
   28982:	4620      	mov	r0, r4
   28984:	f7ff fc68 	bl	28258 <notify_connected>
   28988:	e7a0      	b.n	288cc <bt_conn_set_state+0x5c>
	return list->head;
   2898a:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2898c:	b921      	cbnz	r1, 28998 <bt_conn_set_state+0x128>
   2898e:	f383 8811 	msr	BASEPRI, r3
   28992:	f3bf 8f6f 	isb	sy
}
   28996:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28998:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   2899a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2899c:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2899e:	4281      	cmp	r1, r0
	list->tail = node;
   289a0:	bf08      	it	eq
   289a2:	61a2      	streq	r2, [r4, #24]
   289a4:	f383 8811 	msr	BASEPRI, r3
   289a8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   289ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   289b0:	f3ef 8311 	mrs	r3, BASEPRI
   289b4:	f382 8812 	msr	BASEPRI_MAX, r2
   289b8:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   289bc:	68ca      	ldr	r2, [r1, #12]
   289be:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   289c0:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   289c2:	f383 8811 	msr	BASEPRI, r3
   289c6:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   289ca:	4620      	mov	r0, r4
   289cc:	f7ff fca2 	bl	28314 <conn_tx_destroy>
   289d0:	e771      	b.n	288b6 <bt_conn_set_state+0x46>
   289d2:	bf00      	nop
   289d4:	20000500 	.word	0x20000500
   289d8:	200006bc 	.word	0x200006bc

000289dc <bt_conn_index>:
{
   289dc:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   289de:	4b0a      	ldr	r3, [pc, #40]	; (28a08 <bt_conn_index+0x2c>)
   289e0:	4a0a      	ldr	r2, [pc, #40]	; (28a0c <bt_conn_index+0x30>)
   289e2:	1ac3      	subs	r3, r0, r3
   289e4:	1118      	asrs	r0, r3, #4
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   289e6:	2bd0      	cmp	r3, #208	; 0xd0
		index = conn - acl_conns;
   289e8:	fb02 f000 	mul.w	r0, r2, r0
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   289ec:	d90a      	bls.n	28a04 <bt_conn_index+0x28>
   289ee:	4908      	ldr	r1, [pc, #32]	; (28a10 <bt_conn_index+0x34>)
   289f0:	4808      	ldr	r0, [pc, #32]	; (28a14 <bt_conn_index+0x38>)
   289f2:	f240 42b6 	movw	r2, #1206	; 0x4b6
   289f6:	f00f fae7 	bl	37fc8 <assert_print>
   289fa:	4805      	ldr	r0, [pc, #20]	; (28a10 <bt_conn_index+0x34>)
   289fc:	f240 41b6 	movw	r1, #1206	; 0x4b6
   28a00:	f00f fadb 	bl	37fba <assert_post_action>
}
   28a04:	b2c0      	uxtb	r0, r0
   28a06:	bd08      	pop	{r3, pc}
   28a08:	20001ef0 	.word	0x20001ef0
   28a0c:	c4ec4ec5 	.word	0xc4ec4ec5
   28a10:	0003d9dd 	.word	0x0003d9dd
   28a14:	0003c7f8 	.word	0x0003c7f8

00028a18 <bt_conn_create_pdu_timeout>:
{
   28a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a1a:	4604      	mov	r4, r0
   28a1c:	460d      	mov	r5, r1
   28a1e:	4617      	mov	r7, r2
   28a20:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   28a22:	f012 fd37 	bl	3b494 <k_is_in_isr>
   28a26:	b150      	cbz	r0, 28a3e <bt_conn_create_pdu_timeout+0x26>
   28a28:	490d      	ldr	r1, [pc, #52]	; (28a60 <bt_conn_create_pdu_timeout+0x48>)
   28a2a:	480e      	ldr	r0, [pc, #56]	; (28a64 <bt_conn_create_pdu_timeout+0x4c>)
   28a2c:	f240 42d2 	movw	r2, #1234	; 0x4d2
   28a30:	f00f faca 	bl	37fc8 <assert_print>
   28a34:	480a      	ldr	r0, [pc, #40]	; (28a60 <bt_conn_create_pdu_timeout+0x48>)
   28a36:	f240 41d2 	movw	r1, #1234	; 0x4d2
   28a3a:	f00f fabe 	bl	37fba <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   28a3e:	490a      	ldr	r1, [pc, #40]	; (28a68 <bt_conn_create_pdu_timeout+0x50>)
   28a40:	463a      	mov	r2, r7
   28a42:	2c00      	cmp	r4, #0
   28a44:	bf14      	ite	ne
   28a46:	4620      	movne	r0, r4
   28a48:	4608      	moveq	r0, r1
   28a4a:	4633      	mov	r3, r6
   28a4c:	f011 fc32 	bl	3a2b4 <net_buf_alloc_fixed>
	if (!buf) {
   28a50:	4604      	mov	r4, r0
   28a52:	b118      	cbz	r0, 28a5c <bt_conn_create_pdu_timeout+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
   28a54:	1d29      	adds	r1, r5, #4
   28a56:	300c      	adds	r0, #12
   28a58:	f003 fb0a 	bl	2c070 <net_buf_simple_reserve>
}
   28a5c:	4620      	mov	r0, r4
   28a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28a60:	0003d9dd 	.word	0x0003d9dd
   28a64:	0003c7f8 	.word	0x0003c7f8
   28a68:	20000b64 	.word	0x20000b64

00028a6c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   28a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28a6e:	f3bf 8f5b 	dmb	ish
   28a72:	6842      	ldr	r2, [r0, #4]
   28a74:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   28a78:	0592      	lsls	r2, r2, #22
{
   28a7a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   28a7c:	f100 0304 	add.w	r3, r0, #4
   28a80:	d519      	bpl.n	28ab6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   28a82:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   28a86:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   28a8a:	4291      	cmp	r1, r2
   28a8c:	d813      	bhi.n	28ab6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   28a8e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   28a92:	4291      	cmp	r1, r2
   28a94:	d30f      	bcc.n	28ab6 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   28a96:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   28a9a:	4291      	cmp	r1, r2
   28a9c:	d10b      	bne.n	28ab6 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28a9e:	f3bf 8f5b 	dmb	ish
   28aa2:	e853 1f00 	ldrex	r1, [r3]
   28aa6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   28aaa:	e843 1200 	strex	r2, r1, [r3]
   28aae:	2a00      	cmp	r2, #0
   28ab0:	d1f7      	bne.n	28aa2 <notify_le_param_updated+0x36>
   28ab2:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   28ab6:	4b16      	ldr	r3, [pc, #88]	; (28b10 <notify_le_param_updated+0xa4>)
   28ab8:	681d      	ldr	r5, [r3, #0]
   28aba:	b975      	cbnz	r5, 28ada <notify_le_param_updated+0x6e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28abc:	4d15      	ldr	r5, [pc, #84]	; (28b14 <notify_le_param_updated+0xa8>)
   28abe:	4f16      	ldr	r7, [pc, #88]	; (28b18 <notify_le_param_updated+0xac>)
   28ac0:	42bd      	cmp	r5, r7
   28ac2:	d922      	bls.n	28b0a <notify_le_param_updated+0x9e>
   28ac4:	4915      	ldr	r1, [pc, #84]	; (28b1c <notify_le_param_updated+0xb0>)
   28ac6:	4816      	ldr	r0, [pc, #88]	; (28b20 <notify_le_param_updated+0xb4>)
   28ac8:	f240 52a5 	movw	r2, #1445	; 0x5a5
   28acc:	f00f fa7c 	bl	37fc8 <assert_print>
   28ad0:	4812      	ldr	r0, [pc, #72]	; (28b1c <notify_le_param_updated+0xb0>)
   28ad2:	f240 51a5 	movw	r1, #1445	; 0x5a5
   28ad6:	f00f fa70 	bl	37fba <assert_post_action>
		if (cb->le_param_updated) {
   28ada:	68ee      	ldr	r6, [r5, #12]
   28adc:	b13e      	cbz	r6, 28aee <notify_le_param_updated+0x82>
			cb->le_param_updated(conn, conn->le.interval,
   28ade:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   28ae2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   28ae6:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   28aea:	4620      	mov	r0, r4
   28aec:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   28aee:	696d      	ldr	r5, [r5, #20]
   28af0:	e7e3      	b.n	28aba <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   28af2:	68ee      	ldr	r6, [r5, #12]
   28af4:	b13e      	cbz	r6, 28b06 <notify_le_param_updated+0x9a>
			cb->le_param_updated(conn, conn->le.interval,
   28af6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   28afa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   28afe:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   28b02:	4620      	mov	r0, r4
   28b04:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28b06:	3518      	adds	r5, #24
   28b08:	e7da      	b.n	28ac0 <notify_le_param_updated+0x54>
   28b0a:	d3f2      	bcc.n	28af2 <notify_le_param_updated+0x86>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   28b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28b0e:	bf00      	nop
   28b10:	20003918 	.word	0x20003918
   28b14:	0003bc4c 	.word	0x0003bc4c
   28b18:	0003bc4c 	.word	0x0003bc4c
   28b1c:	0003d9dd 	.word	0x0003d9dd
   28b20:	0003c7f8 	.word	0x0003c7f8

00028b24 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   28b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   28b26:	4b13      	ldr	r3, [pc, #76]	; (28b74 <notify_le_phy_updated+0x50>)
   28b28:	681d      	ldr	r5, [r3, #0]
{
   28b2a:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   28b2c:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
	for (cb = callback_list; cb; cb = cb->_next) {
   28b30:	b985      	cbnz	r5, 28b54 <notify_le_phy_updated+0x30>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28b32:	4d11      	ldr	r5, [pc, #68]	; (28b78 <notify_le_phy_updated+0x54>)
   28b34:	4e11      	ldr	r6, [pc, #68]	; (28b7c <notify_le_phy_updated+0x58>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   28b36:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28b3a:	42b5      	cmp	r5, r6
   28b3c:	d918      	bls.n	28b70 <notify_le_phy_updated+0x4c>
   28b3e:	4910      	ldr	r1, [pc, #64]	; (28b80 <notify_le_phy_updated+0x5c>)
   28b40:	4810      	ldr	r0, [pc, #64]	; (28b84 <notify_le_phy_updated+0x60>)
   28b42:	f240 52cc 	movw	r2, #1484	; 0x5cc
   28b46:	f00f fa3f 	bl	37fc8 <assert_print>
   28b4a:	480d      	ldr	r0, [pc, #52]	; (28b80 <notify_le_phy_updated+0x5c>)
   28b4c:	f240 51cc 	movw	r1, #1484	; 0x5cc
   28b50:	f00f fa33 	bl	37fba <assert_post_action>
		if (cb->le_phy_updated) {
   28b54:	692b      	ldr	r3, [r5, #16]
   28b56:	b113      	cbz	r3, 28b5e <notify_le_phy_updated+0x3a>
			cb->le_phy_updated(conn, &conn->le.phy);
   28b58:	4631      	mov	r1, r6
   28b5a:	4620      	mov	r0, r4
   28b5c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   28b5e:	696d      	ldr	r5, [r5, #20]
   28b60:	e7e6      	b.n	28b30 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   28b62:	692b      	ldr	r3, [r5, #16]
   28b64:	b113      	cbz	r3, 28b6c <notify_le_phy_updated+0x48>
			cb->le_phy_updated(conn, &conn->le.phy);
   28b66:	4639      	mov	r1, r7
   28b68:	4620      	mov	r0, r4
   28b6a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28b6c:	3518      	adds	r5, #24
   28b6e:	e7e4      	b.n	28b3a <notify_le_phy_updated+0x16>
   28b70:	d3f7      	bcc.n	28b62 <notify_le_phy_updated+0x3e>
		}
	}
}
   28b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28b74:	20003918 	.word	0x20003918
   28b78:	0003bc4c 	.word	0x0003bc4c
   28b7c:	0003bc4c 	.word	0x0003bc4c
   28b80:	0003d9dd 	.word	0x0003d9dd
   28b84:	0003c7f8 	.word	0x0003c7f8

00028b88 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   28b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b8c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   28b8e:	4608      	mov	r0, r1
{
   28b90:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   28b92:	f00f ff35 	bl	38a00 <bt_le_conn_params_valid>
   28b96:	4605      	mov	r5, r0
   28b98:	b918      	cbnz	r0, 28ba2 <le_param_req+0x1a>
		return false;
   28b9a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   28b9c:	4628      	mov	r0, r5
   28b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   28ba2:	4b19      	ldr	r3, [pc, #100]	; (28c08 <le_param_req+0x80>)
   28ba4:	681e      	ldr	r6, [r3, #0]
   28ba6:	b97e      	cbnz	r6, 28bc8 <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28ba8:	4e18      	ldr	r6, [pc, #96]	; (28c0c <le_param_req+0x84>)
   28baa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 28c10 <le_param_req+0x88>
   28bae:	4546      	cmp	r6, r8
   28bb0:	d923      	bls.n	28bfa <le_param_req+0x72>
   28bb2:	4918      	ldr	r1, [pc, #96]	; (28c14 <le_param_req+0x8c>)
   28bb4:	4818      	ldr	r0, [pc, #96]	; (28c18 <le_param_req+0x90>)
   28bb6:	f240 52ed 	movw	r2, #1517	; 0x5ed
   28bba:	f00f fa05 	bl	37fc8 <assert_print>
   28bbe:	4815      	ldr	r0, [pc, #84]	; (28c14 <le_param_req+0x8c>)
   28bc0:	f240 51ed 	movw	r1, #1517	; 0x5ed
   28bc4:	f00f f9f9 	bl	37fba <assert_post_action>
		if (!cb->le_param_req) {
   28bc8:	68b3      	ldr	r3, [r6, #8]
   28bca:	b90b      	cbnz	r3, 28bd0 <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   28bcc:	6976      	ldr	r6, [r6, #20]
   28bce:	e7ea      	b.n	28ba6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   28bd0:	4621      	mov	r1, r4
   28bd2:	4638      	mov	r0, r7
   28bd4:	4798      	blx	r3
   28bd6:	2800      	cmp	r0, #0
   28bd8:	d0df      	beq.n	28b9a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   28bda:	4620      	mov	r0, r4
   28bdc:	f00f ff10 	bl	38a00 <bt_le_conn_params_valid>
   28be0:	2800      	cmp	r0, #0
   28be2:	d1f3      	bne.n	28bcc <le_param_req+0x44>
   28be4:	e7d9      	b.n	28b9a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   28be6:	4621      	mov	r1, r4
   28be8:	4638      	mov	r0, r7
   28bea:	4798      	blx	r3
   28bec:	2800      	cmp	r0, #0
   28bee:	d0d4      	beq.n	28b9a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   28bf0:	4620      	mov	r0, r4
   28bf2:	f00f ff05 	bl	38a00 <bt_le_conn_params_valid>
   28bf6:	b920      	cbnz	r0, 28c02 <le_param_req+0x7a>
   28bf8:	e7cf      	b.n	28b9a <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28bfa:	d2cf      	bcs.n	28b9c <le_param_req+0x14>
		if (!cb->le_param_req) {
   28bfc:	68b3      	ldr	r3, [r6, #8]
   28bfe:	2b00      	cmp	r3, #0
   28c00:	d1f1      	bne.n	28be6 <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28c02:	3618      	adds	r6, #24
   28c04:	e7d3      	b.n	28bae <le_param_req+0x26>
   28c06:	bf00      	nop
   28c08:	20003918 	.word	0x20003918
   28c0c:	0003bc4c 	.word	0x0003bc4c
   28c10:	0003bc4c 	.word	0x0003bc4c
   28c14:	0003d9dd 	.word	0x0003d9dd
   28c18:	0003c7f8 	.word	0x0003c7f8

00028c1c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   28c1c:	4b02      	ldr	r3, [pc, #8]	; (28c28 <bt_conn_cb_register+0xc>)
   28c1e:	681a      	ldr	r2, [r3, #0]
   28c20:	6142      	str	r2, [r0, #20]
	callback_list = cb;
   28c22:	6018      	str	r0, [r3, #0]
}
   28c24:	4770      	bx	lr
   28c26:	bf00      	nop
   28c28:	20003918 	.word	0x20003918

00028c2c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   28c2c:	b570      	push	{r4, r5, r6, lr}
   28c2e:	4606      	mov	r6, r0
   28c30:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   28c32:	4809      	ldr	r0, [pc, #36]	; (28c58 <bt_conn_add_le+0x2c>)
   28c34:	2102      	movs	r1, #2
   28c36:	f7ff fc47 	bl	284c8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   28c3a:	4604      	mov	r4, r0
   28c3c:	b150      	cbz	r0, 28c54 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   28c3e:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   28c40:	2207      	movs	r2, #7
   28c42:	4629      	mov	r1, r5
   28c44:	3090      	adds	r0, #144	; 0x90
   28c46:	f00f fdb8 	bl	387ba <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   28c4a:	2301      	movs	r3, #1
   28c4c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   28c4e:	4b03      	ldr	r3, [pc, #12]	; (28c5c <bt_conn_add_le+0x30>)
   28c50:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   28c54:	4620      	mov	r0, r4
   28c56:	bd70      	pop	{r4, r5, r6, pc}
   28c58:	20001ef0 	.word	0x20001ef0
   28c5c:	00280018 	.word	0x00280018

00028c60 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   28c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c64:	4d10      	ldr	r5, [pc, #64]	; (28ca8 <bt_conn_lookup_addr_le+0x48>)
   28c66:	4606      	mov	r6, r0
   28c68:	460f      	mov	r7, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28c6a:	f04f 0800 	mov.w	r8, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   28c6e:	4628      	mov	r0, r5
   28c70:	f7ff fd9a 	bl	287a8 <bt_conn_ref>

		if (!conn) {
   28c74:	4604      	mov	r4, r0
   28c76:	b120      	cbz	r0, 28c82 <bt_conn_lookup_addr_le+0x22>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   28c78:	7883      	ldrb	r3, [r0, #2]
   28c7a:	2b01      	cmp	r3, #1
   28c7c:	d00c      	beq.n	28c98 <bt_conn_lookup_addr_le+0x38>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   28c7e:	f7ff fdbf 	bl	28800 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28c82:	35d0      	adds	r5, #208	; 0xd0
   28c84:	f1b8 0f00 	cmp.w	r8, #0
   28c88:	d003      	beq.n	28c92 <bt_conn_lookup_addr_le+0x32>
		}

		return conn;
	}

	return NULL;
   28c8a:	2400      	movs	r4, #0
}
   28c8c:	4620      	mov	r0, r4
   28c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28c92:	f04f 0801 	mov.w	r8, #1
   28c96:	e7ea      	b.n	28c6e <bt_conn_lookup_addr_le+0xe>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   28c98:	463a      	mov	r2, r7
   28c9a:	4631      	mov	r1, r6
   28c9c:	f010 f8f0 	bl	38e80 <bt_conn_is_peer_addr_le>
   28ca0:	2800      	cmp	r0, #0
   28ca2:	d1f3      	bne.n	28c8c <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   28ca4:	4620      	mov	r0, r4
   28ca6:	e7ea      	b.n	28c7e <bt_conn_lookup_addr_le+0x1e>
   28ca8:	20001ef0 	.word	0x20001ef0

00028cac <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   28cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   28cb0:	f8df a050 	ldr.w	sl, [pc, #80]	; 28d04 <bt_conn_lookup_state_le+0x58>
{
   28cb4:	4605      	mov	r5, r0
   28cb6:	460e      	mov	r6, r1
   28cb8:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28cba:	2700      	movs	r7, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   28cbc:	f04f 09d0 	mov.w	r9, #208	; 0xd0
   28cc0:	fb09 a007 	mla	r0, r9, r7, sl
   28cc4:	f7ff fd70 	bl	287a8 <bt_conn_ref>

		if (!conn) {
   28cc8:	4604      	mov	r4, r0
   28cca:	b120      	cbz	r0, 28cd6 <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   28ccc:	7883      	ldrb	r3, [r0, #2]
   28cce:	2b01      	cmp	r3, #1
   28cd0:	d006      	beq.n	28ce0 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   28cd2:	f7ff fd95 	bl	28800 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28cd6:	b10f      	cbz	r7, 28cdc <bt_conn_lookup_state_le+0x30>
		}

		return conn;
	}

	return NULL;
   28cd8:	2400      	movs	r4, #0
   28cda:	e00f      	b.n	28cfc <bt_conn_lookup_state_le+0x50>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   28cdc:	2701      	movs	r7, #1
   28cde:	e7ef      	b.n	28cc0 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   28ce0:	b136      	cbz	r6, 28cf0 <bt_conn_lookup_state_le+0x44>
   28ce2:	4632      	mov	r2, r6
   28ce4:	4629      	mov	r1, r5
   28ce6:	f010 f8cb 	bl	38e80 <bt_conn_is_peer_addr_le>
   28cea:	b908      	cbnz	r0, 28cf0 <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   28cec:	4620      	mov	r0, r4
   28cee:	e7f0      	b.n	28cd2 <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   28cf0:	7aa3      	ldrb	r3, [r4, #10]
   28cf2:	4543      	cmp	r3, r8
   28cf4:	d1fa      	bne.n	28cec <bt_conn_lookup_state_le+0x40>
   28cf6:	7a23      	ldrb	r3, [r4, #8]
   28cf8:	42ab      	cmp	r3, r5
   28cfa:	d1f7      	bne.n	28cec <bt_conn_lookup_state_le+0x40>
}
   28cfc:	4620      	mov	r0, r4
   28cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28d02:	bf00      	nop
   28d04:	20001ef0 	.word	0x20001ef0

00028d08 <bt_conn_get_info>:
		return 0;
	}
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   28d08:	b510      	push	{r4, lr}
	info->type = conn->type;
   28d0a:	7883      	ldrb	r3, [r0, #2]
   28d0c:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   28d0e:	78c3      	ldrb	r3, [r0, #3]
   28d10:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   28d12:	7a03      	ldrb	r3, [r0, #8]
   28d14:	708b      	strb	r3, [r1, #2]
	info->state = conn_internal_to_public_state(conn->state);
   28d16:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   28d18:	2b08      	cmp	r3, #8
   28d1a:	d80e      	bhi.n	28d3a <bt_conn_get_info+0x32>
	info->state = conn_internal_to_public_state(conn->state);
   28d1c:	4a28      	ldr	r2, [pc, #160]	; (28dc0 <bt_conn_get_info+0xb8>)
   28d1e:	5cd3      	ldrb	r3, [r2, r3]
   28d20:	f881 3020 	strb.w	r3, [r1, #32]
	info->security.flags = 0;
	info->security.level = bt_conn_get_security(conn);
   28d24:	2301      	movs	r3, #1
   28d26:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
	info->security.enc_key_size = bt_conn_enc_key_size(conn);
#else
	info->security.enc_key_size = 0;
   28d2a:	2300      	movs	r3, #0
   28d2c:	844b      	strh	r3, [r1, #34]	; 0x22
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

	switch (conn->type) {
   28d2e:	7883      	ldrb	r3, [r0, #2]
   28d30:	2b01      	cmp	r3, #1
   28d32:	d00d      	beq.n	28d50 <bt_conn_get_info+0x48>
		}
		return 0;
#endif
	}

	return -EINVAL;
   28d34:	f06f 0015 	mvn.w	r0, #21
}
   28d38:	bd10      	pop	{r4, pc}
		__ASSERT(false, "Invalid conn state %u", state);
   28d3a:	4922      	ldr	r1, [pc, #136]	; (28dc4 <bt_conn_get_info+0xbc>)
   28d3c:	4822      	ldr	r0, [pc, #136]	; (28dc8 <bt_conn_get_info+0xc0>)
   28d3e:	f640 120e 	movw	r2, #2318	; 0x90e
   28d42:	f00f f941 	bl	37fc8 <assert_print>
   28d46:	481f      	ldr	r0, [pc, #124]	; (28dc4 <bt_conn_get_info+0xbc>)
   28d48:	f640 110e 	movw	r1, #2318	; 0x90e
   28d4c:	f00f f935 	bl	37fba <assert_post_action>
		info->le.dst = &conn->le.dst;
   28d50:	f100 0390 	add.w	r3, r0, #144	; 0x90
   28d54:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   28d56:	7a03      	ldrb	r3, [r0, #8]
   28d58:	4a1c      	ldr	r2, [pc, #112]	; (28dcc <bt_conn_get_info+0xc4>)
   28d5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   28d5e:	4413      	add	r3, r2
   28d60:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28d62:	78c4      	ldrb	r4, [r0, #3]
			info->le.remote = &conn->le.resp_addr;
   28d64:	f100 039e 	add.w	r3, r0, #158	; 0x9e
			info->le.local = &conn->le.init_addr;
   28d68:	f100 0297 	add.w	r2, r0, #151	; 0x97
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28d6c:	b114      	cbz	r4, 28d74 <bt_conn_get_info+0x6c>
   28d6e:	461c      	mov	r4, r3
   28d70:	4613      	mov	r3, r2
   28d72:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   28d74:	e9c1 2303 	strd	r2, r3, [r1, #12]
		info->le.interval = conn->le.interval;
   28d78:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   28d7c:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   28d7e:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   28d82:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   28d84:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   28d88:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
   28d8a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
   28d8e:	61cb      	str	r3, [r1, #28]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   28d90:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   28d94:	b12b      	cbz	r3, 28da2 <bt_conn_get_info+0x9a>
   28d96:	7b5b      	ldrb	r3, [r3, #13]
   28d98:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   28d9a:	bf44      	itt	mi
   28d9c:	2301      	movmi	r3, #1
   28d9e:	f881 3023 	strbmi.w	r3, [r1, #35]	; 0x23
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   28da2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   28da6:	b113      	cbz	r3, 28dae <bt_conn_get_info+0xa6>
   28da8:	7b5b      	ldrb	r3, [r3, #13]
   28daa:	069b      	lsls	r3, r3, #26
   28dac:	d401      	bmi.n	28db2 <bt_conn_get_info+0xaa>
		return 0;
   28dae:	2000      	movs	r0, #0
   28db0:	e7c2      	b.n	28d38 <bt_conn_get_info+0x30>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   28db2:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   28db6:	f043 0302 	orr.w	r3, r3, #2
   28dba:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
   28dbe:	e7f6      	b.n	28dae <bt_conn_get_info+0xa6>
   28dc0:	0003daf8 	.word	0x0003daf8
   28dc4:	0003d9dd 	.word	0x0003d9dd
   28dc8:	0003c7f8 	.word	0x0003c7f8
   28dcc:	20000440 	.word	0x20000440

00028dd0 <send_conn_le_param_update>:
{
   28dd0:	b538      	push	{r3, r4, r5, lr}
   28dd2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   28dd4:	4608      	mov	r0, r1
{
   28dd6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   28dd8:	f00f fe12 	bl	38a00 <bt_le_conn_params_valid>
   28ddc:	b348      	cbz	r0, 28e32 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   28dde:	4b16      	ldr	r3, [pc, #88]	; (28e38 <send_conn_le_param_update+0x68>)
   28de0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   28de4:	0799      	lsls	r1, r3, #30
   28de6:	d407      	bmi.n	28df8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   28de8:	78e3      	ldrb	r3, [r4, #3]
   28dea:	b183      	cbz	r3, 28e0e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   28dec:	4629      	mov	r1, r5
   28dee:	4620      	mov	r0, r4
}
   28df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   28df4:	f000 ba8c 	b.w	29310 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   28df8:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   28dfc:	079a      	lsls	r2, r3, #30
   28dfe:	d5f3      	bpl.n	28de8 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28e00:	f3bf 8f5b 	dmb	ish
   28e04:	6863      	ldr	r3, [r4, #4]
   28e06:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   28e0a:	055b      	lsls	r3, r3, #21
   28e0c:	d4ec      	bmi.n	28de8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   28e0e:	4629      	mov	r1, r5
   28e10:	4620      	mov	r0, r4
   28e12:	f010 f85f 	bl	38ed4 <bt_conn_le_conn_update>
		if (rc == 0) {
   28e16:	b958      	cbnz	r0, 28e30 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   28e18:	882b      	ldrh	r3, [r5, #0]
   28e1a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   28e1e:	886b      	ldrh	r3, [r5, #2]
   28e20:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   28e24:	88ab      	ldrh	r3, [r5, #4]
   28e26:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   28e2a:	88eb      	ldrh	r3, [r5, #6]
   28e2c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   28e30:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28e32:	f06f 0015 	mvn.w	r0, #21
   28e36:	e7fb      	b.n	28e30 <send_conn_le_param_update+0x60>
   28e38:	20000440 	.word	0x20000440

00028e3c <deferred_work>:
{
   28e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   28e3e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   28e42:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   28e44:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   28e48:	bb5b      	cbnz	r3, 28ea2 <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   28e4a:	4630      	mov	r0, r6
   28e4c:	f010 f881 	bl	38f52 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   28e50:	4b3a      	ldr	r3, [pc, #232]	; (28f3c <deferred_work+0x100>)
   28e52:	681d      	ldr	r5, [r3, #0]
   28e54:	b975      	cbnz	r5, 28e74 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28e56:	4d3a      	ldr	r5, [pc, #232]	; (28f40 <deferred_work+0x104>)
   28e58:	4f3a      	ldr	r7, [pc, #232]	; (28f44 <deferred_work+0x108>)
   28e5a:	42bd      	cmp	r5, r7
   28e5c:	d91a      	bls.n	28e94 <deferred_work+0x58>
   28e5e:	493a      	ldr	r1, [pc, #232]	; (28f48 <deferred_work+0x10c>)
   28e60:	483a      	ldr	r0, [pc, #232]	; (28f4c <deferred_work+0x110>)
   28e62:	f240 526c 	movw	r2, #1388	; 0x56c
   28e66:	f00f f8af 	bl	37fc8 <assert_print>
   28e6a:	4837      	ldr	r0, [pc, #220]	; (28f48 <deferred_work+0x10c>)
   28e6c:	f240 516c 	movw	r1, #1388	; 0x56c
   28e70:	f00f f8a3 	bl	37fba <assert_post_action>
		if (cb->disconnected) {
   28e74:	686b      	ldr	r3, [r5, #4]
   28e76:	b11b      	cbz	r3, 28e80 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   28e78:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   28e7c:	4630      	mov	r0, r6
   28e7e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   28e80:	696d      	ldr	r5, [r5, #20]
   28e82:	e7e7      	b.n	28e54 <deferred_work+0x18>
		if (cb->disconnected) {
   28e84:	686b      	ldr	r3, [r5, #4]
   28e86:	b11b      	cbz	r3, 28e90 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   28e88:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   28e8c:	4630      	mov	r0, r6
   28e8e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   28e90:	3518      	adds	r5, #24
   28e92:	e7e2      	b.n	28e5a <deferred_work+0x1e>
   28e94:	d3f6      	bcc.n	28e84 <deferred_work+0x48>
		bt_conn_unref(conn);
   28e96:	4630      	mov	r0, r6
}
   28e98:	b003      	add	sp, #12
   28e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   28e9e:	f7ff bcaf 	b.w	28800 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   28ea2:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   28ea6:	2b01      	cmp	r3, #1
   28ea8:	d130      	bne.n	28f0c <deferred_work+0xd0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28eaa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   28eae:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   28eb2:	e855 3f00 	ldrex	r3, [r5]
   28eb6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   28eba:	e845 2100 	strex	r1, r2, [r5]
   28ebe:	2900      	cmp	r1, #0
   28ec0:	d1f7      	bne.n	28eb2 <deferred_work+0x76>
   28ec2:	f3bf 8f5b 	dmb	ish
   28ec6:	059b      	lsls	r3, r3, #22
   28ec8:	d522      	bpl.n	28f10 <deferred_work+0xd4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   28eca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28ecc:	9300      	str	r3, [sp, #0]
		err = send_conn_le_param_update(conn, param);
   28ece:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   28ed0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   28ed2:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
   28ed4:	4630      	mov	r0, r6
   28ed6:	f7ff ff7b 	bl	28dd0 <send_conn_le_param_update>
		if (!err) {
   28eda:	b958      	cbnz	r0, 28ef4 <deferred_work+0xb8>
   28edc:	f3bf 8f5b 	dmb	ish
   28ee0:	e855 3f00 	ldrex	r3, [r5]
   28ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   28ee8:	e845 3200 	strex	r2, r3, [r5]
   28eec:	2a00      	cmp	r2, #0
   28eee:	d1f7      	bne.n	28ee0 <deferred_work+0xa4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28ef0:	f3bf 8f5b 	dmb	ish
   28ef4:	f3bf 8f5b 	dmb	ish
   28ef8:	e855 3f00 	ldrex	r3, [r5]
   28efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   28f00:	e845 3200 	strex	r2, r3, [r5]
   28f04:	2a00      	cmp	r2, #0
   28f06:	d1f7      	bne.n	28ef8 <deferred_work+0xbc>
   28f08:	f3bf 8f5b 	dmb	ish
}
   28f0c:	b003      	add	sp, #12
   28f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   28f10:	4a0f      	ldr	r2, [pc, #60]	; (28f50 <deferred_work+0x114>)
   28f12:	6810      	ldr	r0, [r2, #0]
   28f14:	6851      	ldr	r1, [r2, #4]
   28f16:	466b      	mov	r3, sp
   28f18:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   28f1a:	4669      	mov	r1, sp
   28f1c:	4630      	mov	r0, r6
   28f1e:	f7ff ff57 	bl	28dd0 <send_conn_le_param_update>
		if (!err) {
   28f22:	2800      	cmp	r0, #0
   28f24:	d1e6      	bne.n	28ef4 <deferred_work+0xb8>
   28f26:	f3bf 8f5b 	dmb	ish
   28f2a:	e855 3f00 	ldrex	r3, [r5]
   28f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   28f32:	e845 3200 	strex	r2, r3, [r5]
   28f36:	2a00      	cmp	r2, #0
   28f38:	d0da      	beq.n	28ef0 <deferred_work+0xb4>
   28f3a:	e7f6      	b.n	28f2a <deferred_work+0xee>
   28f3c:	20003918 	.word	0x20003918
   28f40:	0003bc4c 	.word	0x0003bc4c
   28f44:	0003bc4c 	.word	0x0003bc4c
   28f48:	0003d9dd 	.word	0x0003d9dd
   28f4c:	0003c7f8 	.word	0x0003c7f8
   28f50:	0003bddc 	.word	0x0003bddc

00028f54 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   28f54:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   28f56:	4801      	ldr	r0, [pc, #4]	; (28f5c <bt_conn_create_frag_timeout+0x8>)
   28f58:	f7ff bd5e 	b.w	28a18 <bt_conn_create_pdu_timeout>
   28f5c:	20000bcc 	.word	0x20000bcc

00028f60 <create_frag>:
{
   28f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28f64:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   28f66:	f04f 33ff 	mov.w	r3, #4294967295
   28f6a:	f04f 32ff 	mov.w	r2, #4294967295
   28f6e:	2000      	movs	r0, #0
{
   28f70:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   28f72:	f7ff ffef 	bl	28f54 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   28f76:	7ab3      	ldrb	r3, [r6, #10]
   28f78:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   28f7a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   28f7c:	f04f 0600 	mov.w	r6, #0
   28f80:	d005      	beq.n	28f8e <create_frag+0x2e>
		net_buf_unref(frag);
   28f82:	f003 f94d 	bl	2c220 <net_buf_unref>
		return NULL;
   28f86:	4635      	mov	r5, r6
}
   28f88:	4628      	mov	r0, r5
   28f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   28f8e:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   28f90:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   28f94:	4e0c      	ldr	r6, [pc, #48]	; (28fc8 <create_frag+0x68>)
   28f96:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   28f98:	f8b6 80bc 	ldrh.w	r8, [r6, #188]	; 0xbc
   28f9c:	f011 f99d 	bl	3a2da <net_buf_simple_tailroom>
   28fa0:	4580      	cmp	r8, r0
   28fa2:	d20c      	bcs.n	28fbe <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   28fa4:	f8b6 60bc 	ldrh.w	r6, [r6, #188]	; 0xbc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   28fa8:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   28fac:	4632      	mov	r2, r6
   28fae:	4638      	mov	r0, r7
   28fb0:	f011 f99b 	bl	3a2ea <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   28fb4:	4631      	mov	r1, r6
   28fb6:	4620      	mov	r0, r4
   28fb8:	f003 fa04 	bl	2c3c4 <net_buf_simple_pull>
   28fbc:	e7e4      	b.n	28f88 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   28fbe:	4638      	mov	r0, r7
   28fc0:	f011 f98b 	bl	3a2da <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   28fc4:	b286      	uxth	r6, r0
   28fc6:	e7ef      	b.n	28fa8 <create_frag+0x48>
   28fc8:	20000440 	.word	0x20000440

00028fcc <bt_conn_process_tx>:
{
   28fcc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   28fce:	7a83      	ldrb	r3, [r0, #10]
{
   28fd0:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   28fd2:	b993      	cbnz	r3, 28ffa <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28fd4:	f3bf 8f5b 	dmb	ish
   28fd8:	1d03      	adds	r3, r0, #4
   28fda:	e853 2f00 	ldrex	r2, [r3]
   28fde:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   28fe2:	e843 1500 	strex	r5, r1, [r3]
   28fe6:	2d00      	cmp	r5, #0
   28fe8:	d1f7      	bne.n	28fda <bt_conn_process_tx+0xe>
   28fea:	f3bf 8f5b 	dmb	ish
   28fee:	0653      	lsls	r3, r2, #25
   28ff0:	d503      	bpl.n	28ffa <bt_conn_process_tx+0x2e>
}
   28ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   28ff6:	f7ff ba99 	b.w	2852c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   28ffa:	2200      	movs	r2, #0
   28ffc:	2300      	movs	r3, #0
   28ffe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   29002:	f011 f95c 	bl	3a2be <net_buf_get>
	BT_ASSERT(buf);
   29006:	4605      	mov	r5, r0
   29008:	b958      	cbnz	r0, 29022 <bt_conn_process_tx+0x56>
   2900a:	4923      	ldr	r1, [pc, #140]	; (29098 <bt_conn_process_tx+0xcc>)
   2900c:	4823      	ldr	r0, [pc, #140]	; (2909c <bt_conn_process_tx+0xd0>)
   2900e:	f240 321a 	movw	r2, #794	; 0x31a
   29012:	f00e ffd9 	bl	37fc8 <assert_print>
   29016:	4040      	eors	r0, r0
   29018:	f380 8811 	msr	BASEPRI, r0
   2901c:	f04f 0003 	mov.w	r0, #3
   29020:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   29022:	4e1f      	ldr	r6, [pc, #124]	; (290a0 <bt_conn_process_tx+0xd4>)
	if (buf->len <= conn_mtu(conn)) {
   29024:	8a2a      	ldrh	r2, [r5, #16]
   29026:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
   2902a:	429a      	cmp	r2, r3
   2902c:	d807      	bhi.n	2903e <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   2902e:	2300      	movs	r3, #0
   29030:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   29032:	4629      	mov	r1, r5
   29034:	4620      	mov	r0, r4
   29036:	f7ff f991 	bl	2835c <send_frag>
	if (!send_buf(conn, buf)) {
   2903a:	b968      	cbnz	r0, 29058 <bt_conn_process_tx+0x8c>
   2903c:	e005      	b.n	2904a <bt_conn_process_tx+0x7e>
	frag = create_frag(conn, buf);
   2903e:	4629      	mov	r1, r5
   29040:	4620      	mov	r0, r4
   29042:	f7ff ff8d 	bl	28f60 <create_frag>
	if (!frag) {
   29046:	4601      	mov	r1, r0
   29048:	b938      	cbnz	r0, 2905a <bt_conn_process_tx+0x8e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2904a:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   2904c:	2300      	movs	r3, #0
   2904e:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   29050:	4628      	mov	r0, r5
   29052:	f003 f8e5 	bl	2c220 <net_buf_unref>
		if (tx) {
   29056:	b9ce      	cbnz	r6, 2908c <bt_conn_process_tx+0xc0>
}
   29058:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   2905a:	2301      	movs	r3, #1
   2905c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2905e:	4620      	mov	r0, r4
   29060:	f7ff f97c 	bl	2835c <send_frag>
   29064:	2800      	cmp	r0, #0
   29066:	d0f0      	beq.n	2904a <bt_conn_process_tx+0x7e>
	while (buf->len > conn_mtu(conn)) {
   29068:	8a2a      	ldrh	r2, [r5, #16]
   2906a:	f8b6 30bc 	ldrh.w	r3, [r6, #188]	; 0xbc
   2906e:	429a      	cmp	r2, r3
   29070:	d802      	bhi.n	29078 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   29072:	2300      	movs	r3, #0
   29074:	2203      	movs	r2, #3
   29076:	e7dc      	b.n	29032 <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
   29078:	4629      	mov	r1, r5
   2907a:	4620      	mov	r0, r4
   2907c:	f7ff ff70 	bl	28f60 <create_frag>
		if (!frag) {
   29080:	4601      	mov	r1, r0
   29082:	2800      	cmp	r0, #0
   29084:	d0e1      	beq.n	2904a <bt_conn_process_tx+0x7e>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   29086:	2301      	movs	r3, #1
   29088:	461a      	mov	r2, r3
   2908a:	e7e8      	b.n	2905e <bt_conn_process_tx+0x92>
			conn_tx_destroy(conn, tx);
   2908c:	4631      	mov	r1, r6
   2908e:	4620      	mov	r0, r4
}
   29090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   29094:	f7ff b93e 	b.w	28314 <conn_tx_destroy>
   29098:	0003d9dd 	.word	0x0003d9dd
   2909c:	0003c7f8 	.word	0x0003c7f8
   290a0:	20000440 	.word	0x20000440

000290a4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   290a4:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   290a6:	480c      	ldr	r0, [pc, #48]	; (290d8 <bt_conn_init+0x34>)
   290a8:	4d0c      	ldr	r5, [pc, #48]	; (290dc <bt_conn_init+0x38>)
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   290aa:	4e0b      	ldr	r6, [pc, #44]	; (290d8 <bt_conn_init+0x34>)
   290ac:	f012 fa21 	bl	3b4f2 <z_impl_k_queue_init>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   290b0:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
   290b2:	4629      	mov	r1, r5
   290b4:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   290b6:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
   290b8:	f012 fa28 	bl	3b50c <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   290bc:	2c05      	cmp	r4, #5
   290be:	f105 0510 	add.w	r5, r5, #16
   290c2:	d1f6      	bne.n	290b2 <bt_conn_init+0xe>
	}

	bt_att_init();
   290c4:	f000 ff2c 	bl	29f20 <bt_att_init>

	err = bt_smp_init();
   290c8:	f010 ff3f 	bl	39f4a <bt_smp_init>
	if (err) {
   290cc:	4604      	mov	r4, r0
   290ce:	b908      	cbnz	r0, 290d4 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   290d0:	f00f ff7d 	bl	38fce <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   290d4:	4620      	mov	r0, r4
   290d6:	bd70      	pop	{r4, r5, r6, pc}
   290d8:	20000b48 	.word	0x20000b48
   290dc:	200038c8 	.word	0x200038c8

000290e0 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   290e0:	b510      	push	{r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   290e2:	4b0b      	ldr	r3, [pc, #44]	; (29110 <l2cap_accept+0x30>)
   290e4:	681c      	ldr	r4, [r3, #0]
{
   290e6:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
   290e8:	b154      	cbz	r4, 29100 <l2cap_accept+0x20>
   290ea:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
   290ee:	b130      	cbz	r0, 290fe <l2cap_accept+0x1e>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   290f0:	4808      	ldr	r0, [pc, #32]	; (29114 <l2cap_accept+0x34>)
   290f2:	2145      	movs	r1, #69	; 0x45
   290f4:	f00e ff76 	bl	37fe4 <z_log_minimal_printk>
   290f8:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   290fc:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   290fe:	2401      	movs	r4, #1
		l2cap->chan.chan.ops = &ops;
   29100:	2294      	movs	r2, #148	; 0x94
   29102:	fb02 3304 	mla	r3, r2, r4, r3
   29106:	4a04      	ldr	r2, [pc, #16]	; (29118 <l2cap_accept+0x38>)
   29108:	605a      	str	r2, [r3, #4]
		return 0;
   2910a:	2000      	movs	r0, #0
		*chan = &l2cap->chan.chan;
   2910c:	600b      	str	r3, [r1, #0]
		return 0;
   2910e:	e7f5      	b.n	290fc <l2cap_accept+0x1c>
   29110:	2000391c 	.word	0x2000391c
   29114:	0003db09 	.word	0x0003db09
   29118:	0003c02c 	.word	0x0003c02c

0002911c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2911e:	4605      	mov	r5, r0
   29120:	460f      	mov	r7, r1
   29122:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   29124:	2300      	movs	r3, #0
   29126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2912a:	2104      	movs	r1, #4
   2912c:	2000      	movs	r0, #0
   2912e:	f7ff fc73 	bl	28a18 <bt_conn_create_pdu_timeout>
	if (!buf) {
   29132:	4604      	mov	r4, r0
   29134:	b930      	cbnz	r0, 29144 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   29136:	4807      	ldr	r0, [pc, #28]	; (29154 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   29138:	462a      	mov	r2, r5
   2913a:	2145      	movs	r1, #69	; 0x45
   2913c:	f00e ff52 	bl	37fe4 <z_log_minimal_printk>
}
   29140:	4620      	mov	r0, r4
   29142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   29144:	2104      	movs	r1, #4
   29146:	300c      	adds	r0, #12
   29148:	f003 f970 	bl	2c42c <net_buf_simple_add>
	hdr->code = code;
   2914c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2914e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   29150:	8046      	strh	r6, [r0, #2]
	return buf;
   29152:	e7f5      	b.n	29140 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   29154:	0003db35 	.word	0x0003db35

00029158 <bt_l2cap_connected>:
{
   29158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2915a:	4d2a      	ldr	r5, [pc, #168]	; (29204 <bt_l2cap_connected+0xac>)
   2915c:	4f2a      	ldr	r7, [pc, #168]	; (29208 <bt_l2cap_connected+0xb0>)
{
   2915e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29160:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   29162:	42bd      	cmp	r5, r7
   29164:	d94a      	bls.n	291fc <bt_l2cap_connected+0xa4>
   29166:	4929      	ldr	r1, [pc, #164]	; (2920c <bt_l2cap_connected+0xb4>)
   29168:	4829      	ldr	r0, [pc, #164]	; (29210 <bt_l2cap_connected+0xb8>)
   2916a:	f240 1281 	movw	r2, #385	; 0x181
   2916e:	f00e ff2b 	bl	37fc8 <assert_print>
   29172:	4826      	ldr	r0, [pc, #152]	; (2920c <bt_l2cap_connected+0xb4>)
   29174:	f240 1181 	movw	r1, #385	; 0x181
   29178:	f00e ff1f 	bl	37fba <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   2917c:	686b      	ldr	r3, [r5, #4]
   2917e:	a901      	add	r1, sp, #4
   29180:	4620      	mov	r0, r4
   29182:	4798      	blx	r3
   29184:	2800      	cmp	r0, #0
   29186:	db34      	blt.n	291f2 <bt_l2cap_connected+0x9a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   29188:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   2918a:	882a      	ldrh	r2, [r5, #0]
   2918c:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   2918e:	849a      	strh	r2, [r3, #36]	; 0x24
   29190:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   29194:	68a8      	ldr	r0, [r5, #8]
   29196:	f3bf 8f5b 	dmb	ish
   2919a:	e852 1f00 	ldrex	r1, [r2]
   2919e:	e842 6c00 	strex	ip, r6, [r2]
   291a2:	f1bc 0f00 	cmp.w	ip, #0
   291a6:	d1f8      	bne.n	2919a <bt_l2cap_connected+0x42>
   291a8:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   291ac:	609e      	str	r6, [r3, #8]
	return list->tail;
   291ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   291b0:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   291b4:	b9f9      	cbnz	r1, 291f6 <bt_l2cap_connected+0x9e>
	list->head = node;
   291b6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   291ba:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   291bc:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   291be:	9801      	ldr	r0, [sp, #4]
   291c0:	6843      	ldr	r3, [r0, #4]
   291c2:	681b      	ldr	r3, [r3, #0]
   291c4:	b103      	cbz	r3, 291c8 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   291c6:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   291c8:	9b01      	ldr	r3, [sp, #4]
   291ca:	f3bf 8f5b 	dmb	ish
   291ce:	3310      	adds	r3, #16
   291d0:	e853 1f00 	ldrex	r1, [r3]
   291d4:	f041 0101 	orr.w	r1, r1, #1
   291d8:	e843 1200 	strex	r2, r1, [r3]
   291dc:	2a00      	cmp	r2, #0
   291de:	d1f7      	bne.n	291d0 <bt_l2cap_connected+0x78>
   291e0:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   291e4:	9801      	ldr	r0, [sp, #4]
   291e6:	6843      	ldr	r3, [r0, #4]
   291e8:	69db      	ldr	r3, [r3, #28]
   291ea:	b113      	cbz	r3, 291f2 <bt_l2cap_connected+0x9a>
			chan->ops->status(chan, chan->status);
   291ec:	f100 0110 	add.w	r1, r0, #16
   291f0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   291f2:	350c      	adds	r5, #12
   291f4:	e7b5      	b.n	29162 <bt_l2cap_connected+0xa>
	parent->next = child;
   291f6:	600a      	str	r2, [r1, #0]
	list->tail = node;
   291f8:	65a2      	str	r2, [r4, #88]	; 0x58
}
   291fa:	e7de      	b.n	291ba <bt_l2cap_connected+0x62>
   291fc:	d3be      	bcc.n	2917c <bt_l2cap_connected+0x24>
}
   291fe:	b003      	add	sp, #12
   29200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29202:	bf00      	nop
   29204:	0003bc28 	.word	0x0003bc28
   29208:	0003bc4c 	.word	0x0003bc4c
   2920c:	0003db62 	.word	0x0003db62
   29210:	0003c7f8 	.word	0x0003c7f8

00029214 <l2cap_recv>:
{
   29214:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   29216:	8a0b      	ldrh	r3, [r1, #16]
   29218:	2b03      	cmp	r3, #3
{
   2921a:	4606      	mov	r6, r0
   2921c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2921e:	d804      	bhi.n	2922a <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   29220:	4822      	ldr	r0, [pc, #136]	; (292ac <l2cap_recv+0x98>)
   29222:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Invalid ident value in L2CAP PDU");
   29224:	f00e fede 	bl	37fe4 <z_log_minimal_printk>
		return 0;
   29228:	e00d      	b.n	29246 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   2922a:	2104      	movs	r1, #4
   2922c:	f105 000c 	add.w	r0, r5, #12
   29230:	f003 f8e2 	bl	2c3f8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   29234:	8a2a      	ldrh	r2, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   29236:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   29238:	4293      	cmp	r3, r2
   2923a:	4604      	mov	r4, r0
   2923c:	d006      	beq.n	2924c <l2cap_recv+0x38>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   2923e:	481c      	ldr	r0, [pc, #112]	; (292b0 <l2cap_recv+0x9c>)
   29240:	2145      	movs	r1, #69	; 0x45
   29242:	f00e fecf 	bl	37fe4 <z_log_minimal_printk>
}
   29246:	2000      	movs	r0, #0
   29248:	b002      	add	sp, #8
   2924a:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   2924c:	7842      	ldrb	r2, [r0, #1]
   2924e:	b912      	cbnz	r2, 29256 <l2cap_recv+0x42>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   29250:	4818      	ldr	r0, [pc, #96]	; (292b4 <l2cap_recv+0xa0>)
   29252:	2145      	movs	r1, #69	; 0x45
   29254:	e7e6      	b.n	29224 <l2cap_recv+0x10>
	switch (hdr->code) {
   29256:	7802      	ldrb	r2, [r0, #0]
   29258:	2a01      	cmp	r2, #1
   2925a:	d0f4      	beq.n	29246 <l2cap_recv+0x32>
   2925c:	2a13      	cmp	r2, #19
   2925e:	d104      	bne.n	2926a <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   29260:	2b01      	cmp	r3, #1
   29262:	d8f0      	bhi.n	29246 <l2cap_recv+0x32>
		LOG_ERR("Too small LE conn param rsp");
   29264:	4814      	ldr	r0, [pc, #80]	; (292b8 <l2cap_recv+0xa4>)
   29266:	2145      	movs	r1, #69	; 0x45
   29268:	e7dc      	b.n	29224 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   2926a:	4814      	ldr	r0, [pc, #80]	; (292bc <l2cap_recv+0xa8>)
   2926c:	2157      	movs	r1, #87	; 0x57
   2926e:	f00e feb9 	bl	37fe4 <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   29272:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   29274:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   29276:	2202      	movs	r2, #2
   29278:	2001      	movs	r0, #1
   2927a:	f7ff ff4f 	bl	2911c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2927e:	4604      	mov	r4, r0
   29280:	2800      	cmp	r0, #0
   29282:	d0e0      	beq.n	29246 <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   29284:	2102      	movs	r1, #2
   29286:	300c      	adds	r0, #12
   29288:	f003 f8d0 	bl	2c42c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2928c:	2300      	movs	r3, #0
   2928e:	7003      	strb	r3, [r0, #0]
   29290:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   29292:	4622      	mov	r2, r4
   29294:	9300      	str	r3, [sp, #0]
   29296:	2105      	movs	r1, #5
   29298:	4628      	mov	r0, r5
   2929a:	f00f fe75 	bl	38f88 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2929e:	2800      	cmp	r0, #0
   292a0:	d0d1      	beq.n	29246 <l2cap_recv+0x32>
		net_buf_unref(buf);
   292a2:	4620      	mov	r0, r4
   292a4:	f002 ffbc 	bl	2c220 <net_buf_unref>
   292a8:	e7cd      	b.n	29246 <l2cap_recv+0x32>
   292aa:	bf00      	nop
   292ac:	0003db93 	.word	0x0003db93
   292b0:	0003dbb6 	.word	0x0003dbb6
   292b4:	0003dbdc 	.word	0x0003dbdc
   292b8:	0003dc02 	.word	0x0003dc02
   292bc:	0003dc23 	.word	0x0003dc23

000292c0 <bt_l2cap_recv>:
{
   292c0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   292c2:	8a0b      	ldrh	r3, [r1, #16]
   292c4:	2b03      	cmp	r3, #3
{
   292c6:	4605      	mov	r5, r0
   292c8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   292ca:	d808      	bhi.n	292de <bt_l2cap_recv+0x1e>
		LOG_ERR("Too small L2CAP PDU received");
   292cc:	480e      	ldr	r0, [pc, #56]	; (29308 <bt_l2cap_recv+0x48>)
   292ce:	2145      	movs	r1, #69	; 0x45
   292d0:	f00e fe88 	bl	37fe4 <z_log_minimal_printk>
	net_buf_unref(buf);
   292d4:	4620      	mov	r0, r4
}
   292d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   292da:	f002 bfa1 	b.w	2c220 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   292de:	2104      	movs	r1, #4
   292e0:	f104 000c 	add.w	r0, r4, #12
   292e4:	f003 f888 	bl	2c3f8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   292e8:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   292ea:	4628      	mov	r0, r5
   292ec:	4611      	mov	r1, r2
   292ee:	f00f fe64 	bl	38fba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   292f2:	b920      	cbnz	r0, 292fe <bt_l2cap_recv+0x3e>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   292f4:	4805      	ldr	r0, [pc, #20]	; (2930c <bt_l2cap_recv+0x4c>)
   292f6:	2157      	movs	r1, #87	; 0x57
   292f8:	f00e fe74 	bl	37fe4 <z_log_minimal_printk>
		net_buf_unref(buf);
   292fc:	e7ea      	b.n	292d4 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   292fe:	6843      	ldr	r3, [r0, #4]
   29300:	4621      	mov	r1, r4
   29302:	695b      	ldr	r3, [r3, #20]
   29304:	4798      	blx	r3
   29306:	e7e5      	b.n	292d4 <bt_l2cap_recv+0x14>
   29308:	0003dc50 	.word	0x0003dc50
   2930c:	0003dc72 	.word	0x0003dc72

00029310 <bt_l2cap_update_conn_param>:
{
   29310:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   29312:	4b17      	ldr	r3, [pc, #92]	; (29370 <bt_l2cap_update_conn_param+0x60>)
{
   29314:	460e      	mov	r6, r1
	ident++;
   29316:	7819      	ldrb	r1, [r3, #0]
   29318:	3101      	adds	r1, #1
   2931a:	b2c9      	uxtb	r1, r1
   2931c:	2901      	cmp	r1, #1
   2931e:	bf38      	it	cc
   29320:	2101      	movcc	r1, #1
{
   29322:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   29324:	2208      	movs	r2, #8
   29326:	2012      	movs	r0, #18
	ident++;
   29328:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2932a:	f7ff fef7 	bl	2911c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2932e:	4604      	mov	r4, r0
   29330:	b1d0      	cbz	r0, 29368 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   29332:	2108      	movs	r1, #8
   29334:	300c      	adds	r0, #12
   29336:	f003 f879 	bl	2c42c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2933a:	8833      	ldrh	r3, [r6, #0]
   2933c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2933e:	8873      	ldrh	r3, [r6, #2]
   29340:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   29342:	88b3      	ldrh	r3, [r6, #4]
   29344:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   29346:	88f3      	ldrh	r3, [r6, #6]
   29348:	80c3      	strh	r3, [r0, #6]
   2934a:	2300      	movs	r3, #0
   2934c:	4628      	mov	r0, r5
   2934e:	9300      	str	r3, [sp, #0]
   29350:	4622      	mov	r2, r4
   29352:	2105      	movs	r1, #5
   29354:	f00f fe18 	bl	38f88 <bt_l2cap_send_cb>
	if (err) {
   29358:	4605      	mov	r5, r0
   2935a:	b110      	cbz	r0, 29362 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   2935c:	4620      	mov	r0, r4
   2935e:	f002 ff5f 	bl	2c220 <net_buf_unref>
}
   29362:	4628      	mov	r0, r5
   29364:	b002      	add	sp, #8
   29366:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   29368:	f06f 050b 	mvn.w	r5, #11
   2936c:	e7f9      	b.n	29362 <bt_l2cap_update_conn_param+0x52>
   2936e:	bf00      	nop
   29370:	20004d96 	.word	0x20004d96

00029374 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   29374:	2823      	cmp	r0, #35	; 0x23
   29376:	d81f      	bhi.n	293b8 <att_op_get_type+0x44>
   29378:	281a      	cmp	r0, #26
   2937a:	d804      	bhi.n	29386 <att_op_get_type+0x12>
   2937c:	1e43      	subs	r3, r0, #1
   2937e:	2b18      	cmp	r3, #24
   29380:	d90e      	bls.n	293a0 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   29382:	2006      	movs	r0, #6
   29384:	4770      	bx	lr
	switch (op) {
   29386:	f1a0 031b 	sub.w	r3, r0, #27
   2938a:	2b08      	cmp	r3, #8
   2938c:	d81e      	bhi.n	293cc <att_op_get_type+0x58>
   2938e:	e8df f003 	tbb	[pc, r3]
   29392:	1d05      	.short	0x1d05
   29394:	191d231b 	.word	0x191d231b
   29398:	1d25      	.short	0x1d25
   2939a:	05          	.byte	0x05
   2939b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   2939c:	2003      	movs	r0, #3
   2939e:	4770      	bx	lr
	switch (op) {
   293a0:	4a0f      	ldr	r2, [pc, #60]	; (293e0 <att_op_get_type+0x6c>)
   293a2:	2301      	movs	r3, #1
   293a4:	4083      	lsls	r3, r0
   293a6:	401a      	ands	r2, r3
   293a8:	b9c2      	cbnz	r2, 293dc <att_op_get_type+0x68>
   293aa:	4a0e      	ldr	r2, [pc, #56]	; (293e4 <att_op_get_type+0x70>)
   293ac:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   293ae:	2a00      	cmp	r2, #0
   293b0:	bf14      	ite	ne
   293b2:	2001      	movne	r0, #1
   293b4:	2006      	moveq	r0, #6
   293b6:	4770      	bx	lr
	switch (op) {
   293b8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   293bc:	2b52      	cmp	r3, #82	; 0x52
   293be:	d105      	bne.n	293cc <att_op_get_type+0x58>
		return ATT_COMMAND;
   293c0:	2000      	movs	r0, #0
}
   293c2:	4770      	bx	lr
		return ATT_REQUEST;
   293c4:	2001      	movs	r0, #1
   293c6:	4770      	bx	lr
		return ATT_INDICATION;
   293c8:	2005      	movs	r0, #5
   293ca:	4770      	bx	lr
		return ATT_COMMAND;
   293cc:	f010 0f40 	tst.w	r0, #64	; 0x40
   293d0:	bf0c      	ite	eq
   293d2:	2006      	moveq	r0, #6
   293d4:	2000      	movne	r0, #0
   293d6:	4770      	bx	lr
	switch (op) {
   293d8:	2004      	movs	r0, #4
   293da:	4770      	bx	lr
		return ATT_RESPONSE;
   293dc:	2002      	movs	r0, #2
   293de:	4770      	bx	lr
   293e0:	028aaaaa 	.word	0x028aaaaa
   293e4:	01455554 	.word	0x01455554

000293e8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   293e8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   293ea:	3804      	subs	r0, #4
   293ec:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   293ee:	a901      	add	r1, sp, #4
   293f0:	4802      	ldr	r0, [pc, #8]	; (293fc <bt_att_released+0x14>)
   293f2:	f008 fb51 	bl	31a98 <k_mem_slab_free>
}
   293f6:	b003      	add	sp, #12
   293f8:	f85d fb04 	ldr.w	pc, [sp], #4
   293fc:	20000a88 	.word	0x20000a88

00029400 <att_get>:
{
   29400:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   29402:	7a83      	ldrb	r3, [r0, #10]
   29404:	2b07      	cmp	r3, #7
   29406:	d108      	bne.n	2941a <att_get+0x1a>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   29408:	2104      	movs	r1, #4
   2940a:	f00f fdd6 	bl	38fba <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2940e:	4603      	mov	r3, r0
   29410:	b928      	cbnz	r0, 2941e <att_get+0x1e>
		LOG_ERR("Unable to find ATT channel");
   29412:	480c      	ldr	r0, [pc, #48]	; (29444 <att_get+0x44>)
   29414:	2145      	movs	r1, #69	; 0x45
   29416:	f00e fde5 	bl	37fe4 <z_log_minimal_printk>
		return NULL;
   2941a:	2000      	movs	r0, #0
}
   2941c:	bd08      	pop	{r3, pc}
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   2941e:	2102      	movs	r1, #2
   29420:	3094      	adds	r0, #148	; 0x94
   29422:	f00f fdf9 	bl	39018 <atomic_test_bit>
   29426:	b950      	cbnz	r0, 2943e <att_get+0x3e>
   29428:	4907      	ldr	r1, [pc, #28]	; (29448 <att_get+0x48>)
   2942a:	4808      	ldr	r0, [pc, #32]	; (2944c <att_get+0x4c>)
   2942c:	f640 322a 	movw	r2, #2858	; 0xb2a
   29430:	f00e fdca 	bl	37fc8 <assert_print>
   29434:	4804      	ldr	r0, [pc, #16]	; (29448 <att_get+0x48>)
   29436:	f640 312a 	movw	r1, #2858	; 0xb2a
   2943a:	f00e fdbe 	bl	37fba <assert_post_action>
	return att_chan->att;
   2943e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   29442:	e7eb      	b.n	2941c <att_get+0x1c>
   29444:	0003dcce 	.word	0x0003dcce
   29448:	0003dcee 	.word	0x0003dcee
   2944c:	0003c7f8 	.word	0x0003c7f8

00029450 <tx_meta_data_free>:
{
   29450:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   29452:	4604      	mov	r4, r0
   29454:	b940      	cbnz	r0, 29468 <tx_meta_data_free+0x18>
   29456:	4909      	ldr	r1, [pc, #36]	; (2947c <tx_meta_data_free+0x2c>)
   29458:	4809      	ldr	r0, [pc, #36]	; (29480 <tx_meta_data_free+0x30>)
   2945a:	22a6      	movs	r2, #166	; 0xa6
   2945c:	f00e fdb4 	bl	37fc8 <assert_print>
   29460:	4806      	ldr	r0, [pc, #24]	; (2947c <tx_meta_data_free+0x2c>)
   29462:	21a6      	movs	r1, #166	; 0xa6
   29464:	f00e fda9 	bl	37fba <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   29468:	2100      	movs	r1, #0
   2946a:	2214      	movs	r2, #20
   2946c:	f00f f9b0 	bl	387d0 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   29470:	4621      	mov	r1, r4
   29472:	4804      	ldr	r0, [pc, #16]	; (29484 <tx_meta_data_free+0x34>)
}
   29474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   29478:	f012 b848 	b.w	3b50c <k_queue_append>
   2947c:	0003dcee 	.word	0x0003dcee
   29480:	0003c7f8 	.word	0x0003c7f8
   29484:	20000b2c 	.word	0x20000b2c

00029488 <chan_send>:
{
   29488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2948c:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2948e:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
   29492:	68cb      	ldr	r3, [r1, #12]
{
   29494:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   29496:	3098      	adds	r0, #152	; 0x98
   29498:	2102      	movs	r1, #2
   2949a:	f00f fdbd 	bl	39018 <atomic_test_bit>
   2949e:	2800      	cmp	r0, #0
   294a0:	d047      	beq.n	29532 <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   294a2:	781b      	ldrb	r3, [r3, #0]
   294a4:	2bd2      	cmp	r3, #210	; 0xd2
   294a6:	d114      	bne.n	294d2 <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   294a8:	6833      	ldr	r3, [r6, #0]
   294aa:	4621      	mov	r1, r4
   294ac:	6818      	ldr	r0, [r3, #0]
   294ae:	f010 fd49 	bl	39f44 <bt_smp_sign>
		if (err) {
   294b2:	4605      	mov	r5, r0
   294b4:	b168      	cbz	r0, 294d2 <chan_send+0x4a>
			LOG_ERR("Error signing data");
   294b6:	4820      	ldr	r0, [pc, #128]	; (29538 <chan_send+0xb0>)
   294b8:	2145      	movs	r1, #69	; 0x45
   294ba:	f00e fd93 	bl	37fe4 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   294be:	69a0      	ldr	r0, [r4, #24]
   294c0:	f7ff ffc6 	bl	29450 <tx_meta_data_free>
			net_buf_unref(buf);
   294c4:	4620      	mov	r0, r4
   294c6:	f002 feab 	bl	2c220 <net_buf_unref>
}
   294ca:	4628      	mov	r0, r5
   294cc:	b003      	add	sp, #12
   294ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   294d2:	f104 000c 	add.w	r0, r4, #12
   294d6:	f010 fefc 	bl	3a2d2 <net_buf_simple_headroom>
	state->len = buf->len;
   294da:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   294de:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   294e2:	6833      	ldr	r3, [r6, #0]
   294e4:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   294e6:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   294e8:	4607      	mov	r7, r0
   294ea:	7818      	ldrb	r0, [r3, #0]
   294ec:	f7ff ff42 	bl	29374 <att_op_get_type>
	switch (op_type) {
   294f0:	2805      	cmp	r0, #5
   294f2:	d813      	bhi.n	2951c <chan_send+0x94>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   294f4:	4b11      	ldr	r3, [pc, #68]	; (2953c <chan_send+0xb4>)
   294f6:	f8cd 8000 	str.w	r8, [sp]
   294fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   294fe:	4622      	mov	r2, r4
   29500:	4628      	mov	r0, r5
   29502:	2104      	movs	r1, #4
   29504:	f00f fd40 	bl	38f88 <bt_l2cap_send_cb>
	if (err) {
   29508:	4605      	mov	r5, r0
   2950a:	2800      	cmp	r0, #0
   2950c:	d0dd      	beq.n	294ca <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   2950e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   29510:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   29514:	fa13 f787 	uxtah	r7, r3, r7
   29518:	60e7      	str	r7, [r4, #12]
}
   2951a:	e7d6      	b.n	294ca <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   2951c:	4908      	ldr	r1, [pc, #32]	; (29540 <chan_send+0xb8>)
   2951e:	4809      	ldr	r0, [pc, #36]	; (29544 <chan_send+0xbc>)
   29520:	f240 2257 	movw	r2, #599	; 0x257
   29524:	f00e fd50 	bl	37fc8 <assert_print>
   29528:	4805      	ldr	r0, [pc, #20]	; (29540 <chan_send+0xb8>)
   2952a:	f240 2157 	movw	r1, #599	; 0x257
   2952e:	f00e fd44 	bl	37fba <assert_post_action>
		return -EINVAL;
   29532:	f06f 0515 	mvn.w	r5, #21
   29536:	e7c8      	b.n	294ca <chan_send+0x42>
   29538:	0003dd1d 	.word	0x0003dd1d
   2953c:	0003c054 	.word	0x0003c054
   29540:	0003dcee 	.word	0x0003dcee
   29544:	0003c7f8 	.word	0x0003c7f8

00029548 <bt_att_chan_req_send>:
{
   29548:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   2954a:	b950      	cbnz	r0, 29562 <bt_att_chan_req_send+0x1a>
   2954c:	4917      	ldr	r1, [pc, #92]	; (295ac <bt_att_chan_req_send+0x64>)
   2954e:	4818      	ldr	r0, [pc, #96]	; (295b0 <bt_att_chan_req_send+0x68>)
   29550:	f44f 7246 	mov.w	r2, #792	; 0x318
   29554:	f00e fd38 	bl	37fc8 <assert_print>
   29558:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   2955c:	4813      	ldr	r0, [pc, #76]	; (295ac <bt_att_chan_req_send+0x64>)
   2955e:	f00e fd2c 	bl	37fba <assert_post_action>
   29562:	b941      	cbnz	r1, 29576 <bt_att_chan_req_send+0x2e>
   29564:	4911      	ldr	r1, [pc, #68]	; (295ac <bt_att_chan_req_send+0x64>)
   29566:	4812      	ldr	r0, [pc, #72]	; (295b0 <bt_att_chan_req_send+0x68>)
   29568:	f240 3219 	movw	r2, #793	; 0x319
   2956c:	f00e fd2c 	bl	37fc8 <assert_print>
   29570:	f240 3119 	movw	r1, #793	; 0x319
   29574:	e7f2      	b.n	2955c <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   29576:	684a      	ldr	r2, [r1, #4]
   29578:	b942      	cbnz	r2, 2958c <bt_att_chan_req_send+0x44>
   2957a:	490c      	ldr	r1, [pc, #48]	; (295ac <bt_att_chan_req_send+0x64>)
   2957c:	480c      	ldr	r0, [pc, #48]	; (295b0 <bt_att_chan_req_send+0x68>)
   2957e:	f240 321a 	movw	r2, #794	; 0x31a
   29582:	f00e fd21 	bl	37fc8 <assert_print>
   29586:	f240 311a 	movw	r1, #794	; 0x31a
   2958a:	e7e7      	b.n	2955c <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   2958c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   29590:	b143      	cbz	r3, 295a4 <bt_att_chan_req_send+0x5c>
   29592:	4906      	ldr	r1, [pc, #24]	; (295ac <bt_att_chan_req_send+0x64>)
   29594:	4806      	ldr	r0, [pc, #24]	; (295b0 <bt_att_chan_req_send+0x68>)
   29596:	f240 321b 	movw	r2, #795	; 0x31b
   2959a:	f00e fd15 	bl	37fc8 <assert_print>
   2959e:	f240 311b 	movw	r1, #795	; 0x31b
   295a2:	e7db      	b.n	2955c <bt_att_chan_req_send+0x14>
}
   295a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   295a8:	f00f be9e 	b.w	392e8 <chan_req_send>
   295ac:	0003dcee 	.word	0x0003dcee
   295b0:	0003c7f8 	.word	0x0003c7f8

000295b4 <bt_att_connected>:
{
   295b4:	b510      	push	{r4, lr}
   295b6:	f100 0394 	add.w	r3, r0, #148	; 0x94
   295ba:	4604      	mov	r4, r0
   295bc:	f3bf 8f5b 	dmb	ish
   295c0:	e853 1f00 	ldrex	r1, [r3]
   295c4:	f041 0104 	orr.w	r1, r1, #4
   295c8:	e843 1200 	strex	r2, r1, [r3]
   295cc:	2a00      	cmp	r2, #0
   295ce:	d1f7      	bne.n	295c0 <bt_att_connected+0xc>
   295d0:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   295d4:	2317      	movs	r3, #23
   295d6:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   295d8:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   295da:	1f20      	subs	r0, r4, #4
   295dc:	f00f fe41 	bl	39262 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   295e0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   295e4:	4903      	ldr	r1, [pc, #12]	; (295f4 <bt_att_connected+0x40>)
   295e6:	f009 fa71 	bl	32acc <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   295ea:	6820      	ldr	r0, [r4, #0]
}
   295ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   295f0:	f001 bd00 	b.w	2aff4 <bt_gatt_connected>
   295f4:	0002a0fd 	.word	0x0002a0fd

000295f8 <read_group_cb>:
{
   295f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   295fc:	4605      	mov	r5, r0
   295fe:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   29600:	f04f 0800 	mov.w	r8, #0
   29604:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   29608:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   2960a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2960c:	f88d 8008 	strb.w	r8, [sp, #8]
   29610:	a902      	add	r1, sp, #8
{
   29612:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   29614:	f8ad 300a 	strh.w	r3, [sp, #10]
   29618:	f00f f930 	bl	3887c <bt_uuid_cmp>
   2961c:	b1a0      	cbz	r0, 29648 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2961e:	f642 0301 	movw	r3, #10241	; 0x2801
   29622:	6828      	ldr	r0, [r5, #0]
   29624:	f88d 800c 	strb.w	r8, [sp, #12]
   29628:	a903      	add	r1, sp, #12
   2962a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2962e:	f00f f925 	bl	3887c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   29632:	b148      	cbz	r0, 29648 <read_group_cb+0x50>
		if (data->group &&
   29634:	6923      	ldr	r3, [r4, #16]
   29636:	b11b      	cbz	r3, 29640 <read_group_cb+0x48>
   29638:	885a      	ldrh	r2, [r3, #2]
   2963a:	42b2      	cmp	r2, r6
   2963c:	d200      	bcs.n	29640 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2963e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   29640:	2001      	movs	r0, #1
}
   29642:	b004      	add	sp, #16
   29644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   29648:	6861      	ldr	r1, [r4, #4]
   2964a:	6828      	ldr	r0, [r5, #0]
   2964c:	f00f f916 	bl	3887c <bt_uuid_cmp>
   29650:	b110      	cbz	r0, 29658 <read_group_cb+0x60>
		data->group = NULL;
   29652:	2300      	movs	r3, #0
   29654:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   29656:	e7f3      	b.n	29640 <read_group_cb+0x48>
	if (data->rsp->len &&
   29658:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2965a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   2965c:	781a      	ldrb	r2, [r3, #0]
   2965e:	b132      	cbz	r2, 2966e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   29660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   29662:	8a01      	ldrh	r1, [r0, #16]
   29664:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   29666:	4293      	cmp	r3, r2
   29668:	da01      	bge.n	2966e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   2966a:	2000      	movs	r0, #0
   2966c:	e7e9      	b.n	29642 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2966e:	2104      	movs	r1, #4
   29670:	300c      	adds	r0, #12
   29672:	f002 fedb 	bl	2c42c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   29676:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   29678:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2967a:	6923      	ldr	r3, [r4, #16]
   2967c:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2967e:	4b08      	ldr	r3, [pc, #32]	; (296a0 <read_group_cb+0xa8>)
   29680:	9300      	str	r3, [sp, #0]
   29682:	9401      	str	r4, [sp, #4]
   29684:	68a2      	ldr	r2, [r4, #8]
   29686:	2300      	movs	r3, #0
   29688:	4629      	mov	r1, r5
   2968a:	4638      	mov	r0, r7
   2968c:	f00f fe6d 	bl	3936a <att_chan_read>
	if (read < 0) {
   29690:	2800      	cmp	r0, #0
   29692:	dbea      	blt.n	2966a <read_group_cb+0x72>
	if (!data->group) {
   29694:	6920      	ldr	r0, [r4, #16]
   29696:	3800      	subs	r0, #0
   29698:	bf18      	it	ne
   2969a:	2001      	movne	r0, #1
   2969c:	e7d1      	b.n	29642 <read_group_cb+0x4a>
   2969e:	bf00      	nop
   296a0:	000392c9 	.word	0x000392c9

000296a4 <read_type_cb>:
{
   296a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   296a8:	6817      	ldr	r7, [r2, #0]
{
   296aa:	4605      	mov	r5, r0
   296ac:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   296ae:	6800      	ldr	r0, [r0, #0]
   296b0:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   296b2:	687e      	ldr	r6, [r7, #4]
{
   296b4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   296b6:	f00f f8e1 	bl	3887c <bt_uuid_cmp>
   296ba:	4681      	mov	r9, r0
   296bc:	2800      	cmp	r0, #0
   296be:	d13c      	bne.n	2973a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   296c0:	4630      	mov	r0, r6
   296c2:	2295      	movs	r2, #149	; 0x95
   296c4:	4629      	mov	r1, r5
   296c6:	f010 fb67 	bl	39d98 <bt_gatt_check_perm>
   296ca:	4606      	mov	r6, r0
   296cc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   296ce:	b140      	cbz	r0, 296e2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   296d0:	68e3      	ldr	r3, [r4, #12]
   296d2:	781b      	ldrb	r3, [r3, #0]
   296d4:	b10b      	cbz	r3, 296da <read_type_cb+0x36>
			data->err = 0x00;
   296d6:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   296da:	2000      	movs	r0, #0
}
   296dc:	b003      	add	sp, #12
   296de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   296e2:	68a0      	ldr	r0, [r4, #8]
   296e4:	f002 fdf4 	bl	2c2d0 <net_buf_frag_last>
   296e8:	2102      	movs	r1, #2
   296ea:	300c      	adds	r0, #12
   296ec:	f002 fe9e 	bl	2c42c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   296f0:	4b13      	ldr	r3, [pc, #76]	; (29740 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   296f2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   296f4:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   296f8:	9300      	str	r3, [sp, #0]
   296fa:	9401      	str	r4, [sp, #4]
   296fc:	68a2      	ldr	r2, [r4, #8]
   296fe:	4633      	mov	r3, r6
   29700:	4629      	mov	r1, r5
   29702:	4638      	mov	r0, r7
   29704:	f00f fe31 	bl	3936a <att_chan_read>
	if (read < 0) {
   29708:	2800      	cmp	r0, #0
   2970a:	da07      	bge.n	2971c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   2970c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   29710:	bf26      	itte	cs
   29712:	4240      	negcs	r0, r0
   29714:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   29716:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   29718:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2971a:	e7de      	b.n	296da <read_type_cb+0x36>
	if (!data->item) {
   2971c:	6923      	ldr	r3, [r4, #16]
   2971e:	2b00      	cmp	r3, #0
   29720:	d0db      	beq.n	296da <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   29722:	68a0      	ldr	r0, [r4, #8]
   29724:	f00f fc5e 	bl	38fe4 <net_buf_frags_len>
   29728:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2972a:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2972c:	68e3      	ldr	r3, [r4, #12]
   2972e:	781b      	ldrb	r3, [r3, #0]
   29730:	4298      	cmp	r0, r3
   29732:	bf94      	ite	ls
   29734:	2000      	movls	r0, #0
   29736:	2001      	movhi	r0, #1
   29738:	e7d0      	b.n	296dc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   2973a:	2001      	movs	r0, #1
   2973c:	e7ce      	b.n	296dc <read_type_cb+0x38>
   2973e:	bf00      	nop
   29740:	00038ff5 	.word	0x00038ff5

00029744 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   29744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   29746:	2300      	movs	r3, #0
{
   29748:	4604      	mov	r4, r0
   2974a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2974c:	482c      	ldr	r0, [pc, #176]	; (29800 <bt_att_accept+0xbc>)
   2974e:	2200      	movs	r2, #0
   29750:	4669      	mov	r1, sp
   29752:	f008 f949 	bl	319e8 <k_mem_slab_alloc>
   29756:	4605      	mov	r5, r0
   29758:	b148      	cbz	r0, 2976e <bt_att_accept+0x2a>
		LOG_ERR("No available ATT context for conn %p", conn);
   2975a:	482a      	ldr	r0, [pc, #168]	; (29804 <bt_att_accept+0xc0>)
   2975c:	4622      	mov	r2, r4
   2975e:	2145      	movs	r1, #69	; 0x45
   29760:	f00e fc40 	bl	37fe4 <z_log_minimal_printk>
		return -ENOMEM;
   29764:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   29768:	4628      	mov	r0, r5
   2976a:	b003      	add	sp, #12
   2976c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   2976e:	f00a fa63 	bl	33c38 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   29772:	4b25      	ldr	r3, [pc, #148]	; (29808 <bt_att_accept+0xc4>)
	(void)memset(att, 0, sizeof(*att));
   29774:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   29776:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   29778:	2230      	movs	r2, #48	; 0x30
   2977a:	9800      	ldr	r0, [sp, #0]
   2977c:	f00f f828 	bl	387d0 <memset>
	att->conn = conn;
   29780:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   29782:	4822      	ldr	r0, [pc, #136]	; (2980c <bt_att_accept+0xc8>)
	att->conn = conn;
   29784:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   29786:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   29788:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   2978a:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2978e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   29792:	2200      	movs	r2, #0
   29794:	2300      	movs	r3, #0
   29796:	a901      	add	r1, sp, #4
   29798:	f008 f926 	bl	319e8 <k_mem_slab_alloc>
   2979c:	4605      	mov	r5, r0
   2979e:	2800      	cmp	r0, #0
   297a0:	d1e0      	bne.n	29764 <bt_att_accept+0x20>
	(void)memset(chan, 0, sizeof(*chan));
   297a2:	4601      	mov	r1, r0
   297a4:	22f8      	movs	r2, #248	; 0xf8
   297a6:	9801      	ldr	r0, [sp, #4]
   297a8:	f00f f812 	bl	387d0 <memset>
	chan->chan.chan.ops = &ops;
   297ac:	9801      	ldr	r0, [sp, #4]
   297ae:	4b18      	ldr	r3, [pc, #96]	; (29810 <bt_att_accept+0xcc>)
   297b0:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   297b2:	30a0      	adds	r0, #160	; 0xa0
   297b4:	f011 fe9d 	bl	3b4f2 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   297b8:	9b01      	ldr	r3, [sp, #4]
   297ba:	f3bf 8f5b 	dmb	ish
   297be:	3398      	adds	r3, #152	; 0x98
   297c0:	e853 2f00 	ldrex	r2, [r3]
   297c4:	e843 5100 	strex	r1, r5, [r3]
   297c8:	2900      	cmp	r1, #0
   297ca:	d1f9      	bne.n	297c0 <bt_att_accept+0x7c>
   297cc:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   297d0:	9b01      	ldr	r3, [sp, #4]
   297d2:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   297d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   297d6:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   297d8:	b91b      	cbnz	r3, 297e2 <bt_att_accept+0x9e>
   297da:	f104 000c 	add.w	r0, r4, #12
   297de:	f011 fe88 	bl	3b4f2 <z_impl_k_queue_init>
	return list->head;
   297e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   297e4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   297e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   297ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   297ee:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   297f0:	b902      	cbnz	r2, 297f4 <bt_att_accept+0xb0>
	list->tail = node;
   297f2:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   297f4:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   297f6:	2b00      	cmp	r3, #0
   297f8:	d0b4      	beq.n	29764 <bt_att_accept+0x20>
	*ch = &chan->chan.chan;
   297fa:	3304      	adds	r3, #4
   297fc:	6033      	str	r3, [r6, #0]
	return 0;
   297fe:	e7b3      	b.n	29768 <bt_att_accept+0x24>
   29800:	20000a68 	.word	0x20000a68
   29804:	0003dd35 	.word	0x0003dd35
   29808:	20003aa8 	.word	0x20003aa8
   2980c:	20000a88 	.word	0x20000a88
   29810:	200006cc 	.word	0x200006cc

00029814 <bt_att_chan_create_pdu>:
{
   29814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   29816:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   29818:	3201      	adds	r2, #1
   2981a:	429a      	cmp	r2, r3
{
   2981c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2981e:	d817      	bhi.n	29850 <bt_att_chan_create_pdu+0x3c>
	switch (att_op_get_type(op)) {
   29820:	4608      	mov	r0, r1
   29822:	f7ff fda7 	bl	29374 <att_op_get_type>
   29826:	2802      	cmp	r0, #2
   29828:	d015      	beq.n	29856 <bt_att_chan_create_pdu+0x42>
   2982a:	2804      	cmp	r0, #4
   2982c:	d013      	beq.n	29856 <bt_att_chan_create_pdu+0x42>
		timeout = K_FOREVER;
   2982e:	f04f 36ff 	mov.w	r6, #4294967295
   29832:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29836:	2100      	movs	r1, #0
   29838:	4632      	mov	r2, r6
   2983a:	463b      	mov	r3, r7
   2983c:	4608      	mov	r0, r1
   2983e:	f00f fba0 	bl	38f82 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   29842:	4604      	mov	r4, r0
   29844:	b958      	cbnz	r0, 2985e <bt_att_chan_create_pdu+0x4a>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   29846:	480f      	ldr	r0, [pc, #60]	; (29884 <bt_att_chan_create_pdu+0x70>)
   29848:	462a      	mov	r2, r5
   2984a:	2145      	movs	r1, #69	; 0x45
   2984c:	f00e fbca 	bl	37fe4 <z_log_minimal_printk>
		return NULL;
   29850:	2400      	movs	r4, #0
}
   29852:	4620      	mov	r0, r4
   29854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   29856:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   2985a:	2700      	movs	r7, #0
   2985c:	e7eb      	b.n	29836 <bt_att_chan_create_pdu+0x22>
	return z_impl_k_queue_get(queue, timeout);
   2985e:	480a      	ldr	r0, [pc, #40]	; (29888 <bt_att_chan_create_pdu+0x74>)
   29860:	4632      	mov	r2, r6
   29862:	463b      	mov	r3, r7
   29864:	f008 fd30 	bl	322c8 <z_impl_k_queue_get>
	if (!data) {
   29868:	b918      	cbnz	r0, 29872 <bt_att_chan_create_pdu+0x5e>
		net_buf_unref(buf);
   2986a:	4620      	mov	r0, r4
   2986c:	f002 fcd8 	bl	2c220 <net_buf_unref>
		return NULL;
   29870:	e7ee      	b.n	29850 <bt_att_chan_create_pdu+0x3c>
	bt_att_tx_meta_data(buf) = data;
   29872:	61a0      	str	r0, [r4, #24]
   29874:	2101      	movs	r1, #1
   29876:	f104 000c 	add.w	r0, r4, #12
   2987a:	f002 fdd7 	bl	2c42c <net_buf_simple_add>
	hdr->code = op;
   2987e:	7005      	strb	r5, [r0, #0]
	return buf;
   29880:	e7e7      	b.n	29852 <bt_att_chan_create_pdu+0x3e>
   29882:	bf00      	nop
   29884:	0003db35 	.word	0x0003db35
   29888:	20000b2c 	.word	0x20000b2c

0002988c <bt_att_recv>:
{
   2988c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   29890:	8a0b      	ldrh	r3, [r1, #16]
{
   29892:	4606      	mov	r6, r0
   29894:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   29896:	b933      	cbnz	r3, 298a6 <bt_att_recv+0x1a>
		LOG_ERR("Too small ATT PDU received");
   29898:	482e      	ldr	r0, [pc, #184]	; (29954 <bt_att_recv+0xc8>)
   2989a:	2145      	movs	r1, #69	; 0x45
   2989c:	f00e fba2 	bl	37fe4 <z_log_minimal_printk>
}
   298a0:	2000      	movs	r0, #0
   298a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   298a6:	2101      	movs	r1, #1
   298a8:	f104 000c 	add.w	r0, r4, #12
   298ac:	f002 fda4 	bl	2c3f8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   298b0:	f856 3c04 	ldr.w	r3, [r6, #-4]
   298b4:	4607      	mov	r7, r0
   298b6:	2b00      	cmp	r3, #0
   298b8:	d0f2      	beq.n	298a0 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   298ba:	7801      	ldrb	r1, [r0, #0]
   298bc:	4d26      	ldr	r5, [pc, #152]	; (29958 <bt_att_recv+0xcc>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   298be:	f1a6 0804 	sub.w	r8, r6, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   298c2:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   298c4:	f815 0033 	ldrb.w	r0, [r5, r3, lsl #3]
   298c8:	4288      	cmp	r0, r1
   298ca:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   298ce:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   298d2:	d11a      	bne.n	2990a <bt_att_recv+0x7e>
		if (handler->type == ATT_REQUEST &&
   298d4:	f892 9002 	ldrb.w	r9, [r2, #2]
   298d8:	f1b9 0f01 	cmp.w	r9, #1
   298dc:	d127      	bne.n	2992e <bt_att_recv+0xa2>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   298de:	2100      	movs	r1, #0
   298e0:	f106 0094 	add.w	r0, r6, #148	; 0x94
   298e4:	f00f fde7 	bl	394b6 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   298e8:	2800      	cmp	r0, #0
   298ea:	d1d9      	bne.n	298a0 <bt_att_recv+0x14>
	if (buf->len < handler->expect_len) {
   298ec:	4455      	add	r5, sl
   298ee:	8a22      	ldrh	r2, [r4, #16]
   298f0:	786b      	ldrb	r3, [r5, #1]
   298f2:	4293      	cmp	r3, r2
   298f4:	d920      	bls.n	29938 <bt_att_recv+0xac>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   298f6:	783b      	ldrb	r3, [r7, #0]
   298f8:	4818      	ldr	r0, [pc, #96]	; (2995c <bt_att_recv+0xd0>)
   298fa:	2145      	movs	r1, #69	; 0x45
   298fc:	f00e fb72 	bl	37fe4 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   29900:	f1b9 0f01 	cmp.w	r9, #1
   29904:	d1cc      	bne.n	298a0 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   29906:	2304      	movs	r3, #4
   29908:	e020      	b.n	2994c <bt_att_recv+0xc0>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2990a:	3301      	adds	r3, #1
   2990c:	2b0e      	cmp	r3, #14
   2990e:	d1d9      	bne.n	298c4 <bt_att_recv+0x38>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   29910:	4608      	mov	r0, r1
   29912:	f7ff fd2f 	bl	29374 <att_op_get_type>
   29916:	2800      	cmp	r0, #0
   29918:	d0c2      	beq.n	298a0 <bt_att_recv+0x14>
   2991a:	2805      	cmp	r0, #5
   2991c:	d0c0      	beq.n	298a0 <bt_att_recv+0x14>
	if (!req) {
   2991e:	2900      	cmp	r1, #0
   29920:	d0be      	beq.n	298a0 <bt_att_recv+0x14>
   29922:	2306      	movs	r3, #6
   29924:	2200      	movs	r2, #0
   29926:	4640      	mov	r0, r8
   29928:	f00f ff39 	bl	3979e <send_err_rsp.part.0>
   2992c:	e7b8      	b.n	298a0 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   2992e:	f1b9 0f05 	cmp.w	r9, #5
   29932:	d1db      	bne.n	298ec <bt_att_recv+0x60>
			   atomic_test_and_set_bit(att_chan->flags,
   29934:	2101      	movs	r1, #1
   29936:	e7d3      	b.n	298e0 <bt_att_recv+0x54>
		err = handler->func(att_chan, buf);
   29938:	686b      	ldr	r3, [r5, #4]
   2993a:	4621      	mov	r1, r4
   2993c:	4640      	mov	r0, r8
   2993e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   29940:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   29944:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   29946:	d1ab      	bne.n	298a0 <bt_att_recv+0x14>
   29948:	2800      	cmp	r0, #0
   2994a:	d0a9      	beq.n	298a0 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   2994c:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   2994e:	2900      	cmp	r1, #0
   29950:	d0a6      	beq.n	298a0 <bt_att_recv+0x14>
   29952:	e7e7      	b.n	29924 <bt_att_recv+0x98>
   29954:	0003dd5f 	.word	0x0003dd5f
   29958:	0003c06c 	.word	0x0003c06c
   2995c:	0003dd7f 	.word	0x0003dd7f

00029960 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   29960:	b5f0      	push	{r4, r5, r6, r7, lr}
   29962:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   29964:	6803      	ldr	r3, [r0, #0]
   29966:	460d      	mov	r5, r1
   29968:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2996a:	b087      	sub	sp, #28
   2996c:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2996e:	bf18      	it	ne
   29970:	2101      	movne	r1, #1
   29972:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   29974:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   29976:	f010 fa78 	bl	39e6a <bt_gatt_change_aware>
   2997a:	b948      	cbnz	r0, 29990 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2997c:	2105      	movs	r1, #5
   2997e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   29982:	f00f fd98 	bl	394b6 <atomic_test_and_set_bit>
   29986:	2800      	cmp	r0, #0
   29988:	d048      	beq.n	29a1c <att_write_rsp.constprop.0+0xbc>
			return 0;
   2998a:	2000      	movs	r0, #0
}
   2998c:	b007      	add	sp, #28
   2998e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   29990:	2e00      	cmp	r6, #0
   29992:	d045      	beq.n	29a20 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   29994:	2218      	movs	r2, #24
   29996:	2100      	movs	r1, #0
   29998:	4668      	mov	r0, sp
   2999a:	f00e ff19 	bl	387d0 <memset>
	if (rsp) {
   2999e:	bb67      	cbnz	r7, 299fa <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   299a0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   299a2:	4a20      	ldr	r2, [pc, #128]	; (29a24 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   299a4:	681b      	ldr	r3, [r3, #0]
   299a6:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   299a8:	2300      	movs	r3, #0
   299aa:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   299ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   299b0:	9303      	str	r3, [sp, #12]
	data.len = len;
   299b2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   299b6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   299ba:	2301      	movs	r3, #1
   299bc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   299c0:	4631      	mov	r1, r6
   299c2:	466b      	mov	r3, sp
   299c4:	4630      	mov	r0, r6
	data.req = req;
   299c6:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   299ca:	f00f fb5f 	bl	3908c <bt_gatt_foreach_attr>
	if (data.err) {
   299ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
   299d2:	b1e3      	cbz	r3, 29a0e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   299d4:	2f00      	cmp	r7, #0
   299d6:	d0d8      	beq.n	2998a <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   299d8:	9b01      	ldr	r3, [sp, #4]
   299da:	6998      	ldr	r0, [r3, #24]
   299dc:	f7ff fd38 	bl	29450 <tx_meta_data_free>
			net_buf_unref(data.buf);
   299e0:	9801      	ldr	r0, [sp, #4]
   299e2:	f002 fc1d 	bl	2c220 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   299e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   299ea:	2d00      	cmp	r5, #0
   299ec:	d0cd      	beq.n	2998a <att_write_rsp.constprop.0+0x2a>
   299ee:	4632      	mov	r2, r6
   299f0:	4629      	mov	r1, r5
   299f2:	4620      	mov	r0, r4
   299f4:	f00f fed3 	bl	3979e <send_err_rsp.part.0>
   299f8:	e7c7      	b.n	2998a <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   299fa:	2200      	movs	r2, #0
   299fc:	4639      	mov	r1, r7
   299fe:	4620      	mov	r0, r4
   29a00:	f7ff ff08 	bl	29814 <bt_att_chan_create_pdu>
   29a04:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   29a06:	2800      	cmp	r0, #0
   29a08:	d1ca      	bne.n	299a0 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   29a0a:	200e      	movs	r0, #14
   29a0c:	e7be      	b.n	2998c <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   29a0e:	9901      	ldr	r1, [sp, #4]
   29a10:	2900      	cmp	r1, #0
   29a12:	d0ba      	beq.n	2998a <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   29a14:	4620      	mov	r0, r4
   29a16:	f00f fc81 	bl	3931c <bt_att_chan_send_rsp>
   29a1a:	e7b6      	b.n	2998a <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   29a1c:	2012      	movs	r0, #18
   29a1e:	e7b5      	b.n	2998c <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   29a20:	2001      	movs	r0, #1
   29a22:	e7b3      	b.n	2998c <att_write_rsp.constprop.0+0x2c>
   29a24:	0003902b 	.word	0x0003902b

00029a28 <att_read_group_req>:
{
   29a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   29a2c:	8a0e      	ldrh	r6, [r1, #16]
   29a2e:	3e04      	subs	r6, #4
   29a30:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   29a32:	2e02      	cmp	r6, #2
{
   29a34:	4604      	mov	r4, r0
   29a36:	b08c      	sub	sp, #48	; 0x30
   29a38:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   29a3a:	d001      	beq.n	29a40 <att_read_group_req+0x18>
   29a3c:	2e10      	cmp	r6, #16
   29a3e:	d16a      	bne.n	29b16 <att_read_group_req+0xee>
   29a40:	2104      	movs	r1, #4
   29a42:	300c      	adds	r0, #12
   29a44:	f002 fcd8 	bl	2c3f8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   29a48:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   29a4c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29a4e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   29a50:	1d01      	adds	r1, r0, #4
   29a52:	4632      	mov	r2, r6
   29a54:	4640      	mov	r0, r8
   29a56:	f00e ff3f 	bl	388d8 <bt_uuid_create>
   29a5a:	2800      	cmp	r0, #0
   29a5c:	d05d      	beq.n	29b1a <att_read_group_req+0xf2>
	if (!start || !end) {
   29a5e:	2d00      	cmp	r5, #0
   29a60:	d03a      	beq.n	29ad8 <att_read_group_req+0xb0>
   29a62:	2600      	movs	r6, #0
   29a64:	2f00      	cmp	r7, #0
   29a66:	d036      	beq.n	29ad6 <att_read_group_req+0xae>
	if (start > end) {
   29a68:	42bd      	cmp	r5, r7
   29a6a:	d835      	bhi.n	29ad8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   29a6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   29a70:	a901      	add	r1, sp, #4
   29a72:	4640      	mov	r0, r8
   29a74:	f88d 6004 	strb.w	r6, [sp, #4]
   29a78:	f8ad 3006 	strh.w	r3, [sp, #6]
   29a7c:	f00e fefe 	bl	3887c <bt_uuid_cmp>
   29a80:	bb70      	cbnz	r0, 29ae0 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   29a82:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   29a84:	2214      	movs	r2, #20
   29a86:	2100      	movs	r1, #0
   29a88:	a807      	add	r0, sp, #28
   29a8a:	f00e fea1 	bl	387d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   29a8e:	2201      	movs	r2, #1
   29a90:	2111      	movs	r1, #17
   29a92:	4630      	mov	r0, r6
   29a94:	f00f fec6 	bl	39824 <bt_att_create_pdu>
   29a98:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   29a9a:	2800      	cmp	r0, #0
   29a9c:	d03d      	beq.n	29b1a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   29a9e:	2101      	movs	r1, #1
   29aa0:	300c      	adds	r0, #12
	data.uuid = uuid;
   29aa2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   29aa6:	f002 fcc1 	bl	2c42c <net_buf_simple_add>
	data.rsp->len = 0U;
   29aaa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   29aac:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   29aae:	4a1c      	ldr	r2, [pc, #112]	; (29b20 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   29ab0:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   29ab2:	4639      	mov	r1, r7
	data.group = NULL;
   29ab4:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   29ab6:	4628      	mov	r0, r5
   29ab8:	ab07      	add	r3, sp, #28
   29aba:	f00f fae7 	bl	3908c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   29abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29ac0:	781b      	ldrb	r3, [r3, #0]
   29ac2:	bb1b      	cbnz	r3, 29b0c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   29ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29ac6:	6998      	ldr	r0, [r3, #24]
   29ac8:	f7ff fcc2 	bl	29450 <tx_meta_data_free>
		net_buf_unref(data.buf);
   29acc:	9809      	ldr	r0, [sp, #36]	; 0x24
   29ace:	f002 fba7 	bl	2c220 <net_buf_unref>
	if (!req) {
   29ad2:	230a      	movs	r3, #10
   29ad4:	e001      	b.n	29ada <att_read_group_req+0xb2>
			*err = 0U;
   29ad6:	463d      	mov	r5, r7
	if (!req) {
   29ad8:	2301      	movs	r3, #1
   29ada:	462a      	mov	r2, r5
   29adc:	2110      	movs	r1, #16
   29ade:	e00e      	b.n	29afe <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   29ae0:	f642 0301 	movw	r3, #10241	; 0x2801
   29ae4:	a907      	add	r1, sp, #28
   29ae6:	4640      	mov	r0, r8
   29ae8:	f88d 601c 	strb.w	r6, [sp, #28]
   29aec:	f8ad 301e 	strh.w	r3, [sp, #30]
   29af0:	f00e fec4 	bl	3887c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   29af4:	2800      	cmp	r0, #0
   29af6:	d0c4      	beq.n	29a82 <att_read_group_req+0x5a>
	if (!req) {
   29af8:	2310      	movs	r3, #16
   29afa:	462a      	mov	r2, r5
   29afc:	4619      	mov	r1, r3
   29afe:	4620      	mov	r0, r4
   29b00:	f00f fe4d 	bl	3979e <send_err_rsp.part.0>
		return 0;
   29b04:	2000      	movs	r0, #0
}
   29b06:	b00c      	add	sp, #48	; 0x30
   29b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   29b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
   29b0e:	4620      	mov	r0, r4
   29b10:	f00f fc04 	bl	3931c <bt_att_chan_send_rsp>
	return 0;
   29b14:	e7f6      	b.n	29b04 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   29b16:	2004      	movs	r0, #4
   29b18:	e7f5      	b.n	29b06 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   29b1a:	200e      	movs	r0, #14
   29b1c:	e7f3      	b.n	29b06 <att_read_group_req+0xde>
   29b1e:	bf00      	nop
   29b20:	000295f9 	.word	0x000295f9

00029b24 <att_read_mult_vl_req>:
{
   29b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   29b28:	6846      	ldr	r6, [r0, #4]
{
   29b2a:	b085      	sub	sp, #20
   29b2c:	4604      	mov	r4, r0
   29b2e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   29b30:	4630      	mov	r0, r6
   29b32:	2101      	movs	r1, #1
   29b34:	f010 f999 	bl	39e6a <bt_gatt_change_aware>
   29b38:	b950      	cbnz	r0, 29b50 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   29b3a:	2105      	movs	r1, #5
   29b3c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   29b40:	f00f fcb9 	bl	394b6 <atomic_test_and_set_bit>
   29b44:	2800      	cmp	r0, #0
   29b46:	d13b      	bne.n	29bc0 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   29b48:	2012      	movs	r0, #18
}
   29b4a:	b005      	add	sp, #20
   29b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   29b50:	2210      	movs	r2, #16
   29b52:	2100      	movs	r1, #0
   29b54:	4668      	mov	r0, sp
   29b56:	f00e fe3b 	bl	387d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   29b5a:	2200      	movs	r2, #0
   29b5c:	2121      	movs	r1, #33	; 0x21
   29b5e:	4630      	mov	r0, r6
   29b60:	f00f fe60 	bl	39824 <bt_att_create_pdu>
   29b64:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   29b66:	b368      	cbz	r0, 29bc4 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   29b68:	f8df 905c 	ldr.w	r9, [pc, #92]	; 29bc8 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   29b6c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   29b6e:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   29b72:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   29b76:	8a2b      	ldrh	r3, [r5, #16]
   29b78:	2b01      	cmp	r3, #1
   29b7a:	d804      	bhi.n	29b86 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   29b7c:	9902      	ldr	r1, [sp, #8]
   29b7e:	4620      	mov	r0, r4
   29b80:	f00f fbcc 	bl	3931c <bt_att_chan_send_rsp>
	return 0;
   29b84:	e01c      	b.n	29bc0 <att_read_mult_vl_req+0x9c>
   29b86:	4638      	mov	r0, r7
   29b88:	f010 fb9b 	bl	3a2c2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   29b8c:	466b      	mov	r3, sp
   29b8e:	464a      	mov	r2, r9
   29b90:	4601      	mov	r1, r0
   29b92:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   29b94:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   29b98:	f00f fa78 	bl	3908c <bt_gatt_foreach_attr>
		if (data.err) {
   29b9c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29ba0:	2b00      	cmp	r3, #0
   29ba2:	d0e8      	beq.n	29b76 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   29ba4:	9b02      	ldr	r3, [sp, #8]
   29ba6:	6998      	ldr	r0, [r3, #24]
   29ba8:	f7ff fc52 	bl	29450 <tx_meta_data_free>
			net_buf_unref(data.buf);
   29bac:	9802      	ldr	r0, [sp, #8]
   29bae:	f002 fb37 	bl	2c220 <net_buf_unref>
	if (!req) {
   29bb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29bb6:	4632      	mov	r2, r6
   29bb8:	2120      	movs	r1, #32
   29bba:	4620      	mov	r0, r4
   29bbc:	f00f fdef 	bl	3979e <send_err_rsp.part.0>
			return 0;
   29bc0:	2000      	movs	r0, #0
   29bc2:	e7c2      	b.n	29b4a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   29bc4:	200e      	movs	r0, #14
   29bc6:	e7c0      	b.n	29b4a <att_read_mult_vl_req+0x26>
   29bc8:	00039527 	.word	0x00039527

00029bcc <att_read_mult_req>:
{
   29bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   29bd0:	6846      	ldr	r6, [r0, #4]
{
   29bd2:	b085      	sub	sp, #20
   29bd4:	4604      	mov	r4, r0
   29bd6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   29bd8:	4630      	mov	r0, r6
   29bda:	2101      	movs	r1, #1
   29bdc:	f010 f945 	bl	39e6a <bt_gatt_change_aware>
   29be0:	b950      	cbnz	r0, 29bf8 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   29be2:	2105      	movs	r1, #5
   29be4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   29be8:	f00f fc65 	bl	394b6 <atomic_test_and_set_bit>
   29bec:	2800      	cmp	r0, #0
   29bee:	d13b      	bne.n	29c68 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   29bf0:	2012      	movs	r0, #18
}
   29bf2:	b005      	add	sp, #20
   29bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   29bf8:	2210      	movs	r2, #16
   29bfa:	2100      	movs	r1, #0
   29bfc:	4668      	mov	r0, sp
   29bfe:	f00e fde7 	bl	387d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   29c02:	2200      	movs	r2, #0
   29c04:	210f      	movs	r1, #15
   29c06:	4630      	mov	r0, r6
   29c08:	f00f fe0c 	bl	39824 <bt_att_create_pdu>
   29c0c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   29c0e:	b368      	cbz	r0, 29c6c <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   29c10:	f8df 905c 	ldr.w	r9, [pc, #92]	; 29c70 <att_read_mult_req+0xa4>
	data.chan = chan;
   29c14:	9400      	str	r4, [sp, #0]
   29c16:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   29c1a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   29c1e:	8a2b      	ldrh	r3, [r5, #16]
   29c20:	2b01      	cmp	r3, #1
   29c22:	d804      	bhi.n	29c2e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   29c24:	9902      	ldr	r1, [sp, #8]
   29c26:	4620      	mov	r0, r4
   29c28:	f00f fb78 	bl	3931c <bt_att_chan_send_rsp>
	return 0;
   29c2c:	e01c      	b.n	29c68 <att_read_mult_req+0x9c>
   29c2e:	4638      	mov	r0, r7
   29c30:	f010 fb47 	bl	3a2c2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   29c34:	466b      	mov	r3, sp
   29c36:	464a      	mov	r2, r9
   29c38:	4601      	mov	r1, r0
   29c3a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   29c3c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   29c40:	f00f fa24 	bl	3908c <bt_gatt_foreach_attr>
		if (data.err) {
   29c44:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29c48:	2b00      	cmp	r3, #0
   29c4a:	d0e8      	beq.n	29c1e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   29c4c:	9b02      	ldr	r3, [sp, #8]
   29c4e:	6998      	ldr	r0, [r3, #24]
   29c50:	f7ff fbfe 	bl	29450 <tx_meta_data_free>
			net_buf_unref(data.buf);
   29c54:	9802      	ldr	r0, [sp, #8]
   29c56:	f002 fae3 	bl	2c220 <net_buf_unref>
	if (!req) {
   29c5a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29c5e:	4632      	mov	r2, r6
   29c60:	210e      	movs	r1, #14
   29c62:	4620      	mov	r0, r4
   29c64:	f00f fd9b 	bl	3979e <send_err_rsp.part.0>
			return 0;
   29c68:	2000      	movs	r0, #0
   29c6a:	e7c2      	b.n	29bf2 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   29c6c:	200e      	movs	r0, #14
   29c6e:	e7c0      	b.n	29bf2 <att_read_mult_req+0x26>
   29c70:	000394e1 	.word	0x000394e1

00029c74 <att_read_rsp>:
{
   29c74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   29c78:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   29c7c:	4604      	mov	r4, r0
   29c7e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   29c80:	4640      	mov	r0, r8
   29c82:	2101      	movs	r1, #1
{
   29c84:	4617      	mov	r7, r2
   29c86:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   29c88:	f010 f8ef 	bl	39e6a <bt_gatt_change_aware>
   29c8c:	b948      	cbnz	r0, 29ca2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   29c8e:	2105      	movs	r1, #5
   29c90:	f104 0098 	add.w	r0, r4, #152	; 0x98
   29c94:	f00f fc0f 	bl	394b6 <atomic_test_and_set_bit>
   29c98:	bb78      	cbnz	r0, 29cfa <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   29c9a:	2012      	movs	r0, #18
}
   29c9c:	b004      	add	sp, #16
   29c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   29ca2:	b38d      	cbz	r5, 29d08 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   29ca4:	2210      	movs	r2, #16
   29ca6:	2100      	movs	r1, #0
   29ca8:	4668      	mov	r0, sp
   29caa:	f00e fd91 	bl	387d0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   29cae:	2200      	movs	r2, #0
   29cb0:	4639      	mov	r1, r7
   29cb2:	4640      	mov	r0, r8
   29cb4:	f00f fdb6 	bl	39824 <bt_att_create_pdu>
   29cb8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   29cba:	b338      	cbz	r0, 29d0c <att_read_rsp+0x98>
	data.offset = offset;
   29cbc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   29cc0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   29cc4:	2301      	movs	r3, #1
   29cc6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   29cca:	4a11      	ldr	r2, [pc, #68]	; (29d10 <att_read_rsp+0x9c>)
	data.chan = chan;
   29ccc:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   29cce:	466b      	mov	r3, sp
   29cd0:	4629      	mov	r1, r5
   29cd2:	4628      	mov	r0, r5
   29cd4:	f00f f9da 	bl	3908c <bt_gatt_foreach_attr>
	if (data.err) {
   29cd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29cdc:	b17b      	cbz	r3, 29cfe <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   29cde:	9b02      	ldr	r3, [sp, #8]
   29ce0:	6998      	ldr	r0, [r3, #24]
   29ce2:	f7ff fbb5 	bl	29450 <tx_meta_data_free>
		net_buf_unref(data.buf);
   29ce6:	9802      	ldr	r0, [sp, #8]
   29ce8:	f002 fa9a 	bl	2c220 <net_buf_unref>
	if (!req) {
   29cec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   29cf0:	462a      	mov	r2, r5
   29cf2:	4631      	mov	r1, r6
   29cf4:	4620      	mov	r0, r4
   29cf6:	f00f fd52 	bl	3979e <send_err_rsp.part.0>
			return 0;
   29cfa:	2000      	movs	r0, #0
   29cfc:	e7ce      	b.n	29c9c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   29cfe:	9902      	ldr	r1, [sp, #8]
   29d00:	4620      	mov	r0, r4
   29d02:	f00f fb0b 	bl	3931c <bt_att_chan_send_rsp>
	return 0;
   29d06:	e7f8      	b.n	29cfa <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   29d08:	2001      	movs	r0, #1
   29d0a:	e7c7      	b.n	29c9c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   29d0c:	200e      	movs	r0, #14
   29d0e:	e7c5      	b.n	29c9c <att_read_rsp+0x28>
   29d10:	000394e1 	.word	0x000394e1

00029d14 <att_read_type_req>:
{
   29d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   29d18:	8a0d      	ldrh	r5, [r1, #16]
   29d1a:	3d04      	subs	r5, #4
   29d1c:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   29d1e:	2d02      	cmp	r5, #2
{
   29d20:	4604      	mov	r4, r0
   29d22:	b08c      	sub	sp, #48	; 0x30
   29d24:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   29d26:	d001      	beq.n	29d2c <att_read_type_req+0x18>
   29d28:	2d10      	cmp	r5, #16
   29d2a:	d150      	bne.n	29dce <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   29d2c:	2104      	movs	r1, #4
   29d2e:	300c      	adds	r0, #12
   29d30:	f002 fb62 	bl	2c3f8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   29d34:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   29d38:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29d3a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   29d3c:	1d01      	adds	r1, r0, #4
   29d3e:	462a      	mov	r2, r5
   29d40:	4640      	mov	r0, r8
   29d42:	f00e fdc9 	bl	388d8 <bt_uuid_create>
   29d46:	b188      	cbz	r0, 29d6c <att_read_type_req+0x58>
	if (!start || !end) {
   29d48:	b19e      	cbz	r6, 29d72 <att_read_type_req+0x5e>
   29d4a:	b18f      	cbz	r7, 29d70 <att_read_type_req+0x5c>
	if (start > end) {
   29d4c:	42b7      	cmp	r7, r6
   29d4e:	d310      	bcc.n	29d72 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   29d50:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   29d52:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   29d54:	2100      	movs	r1, #0
   29d56:	eb0d 0002 	add.w	r0, sp, r2
   29d5a:	f00e fd39 	bl	387d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   29d5e:	2201      	movs	r2, #1
   29d60:	2109      	movs	r1, #9
   29d62:	4628      	mov	r0, r5
   29d64:	f00f fd5e 	bl	39824 <bt_att_create_pdu>
   29d68:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   29d6a:	b960      	cbnz	r0, 29d86 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   29d6c:	200e      	movs	r0, #14
   29d6e:	e007      	b.n	29d80 <att_read_type_req+0x6c>
			*err = 0U;
   29d70:	463e      	mov	r6, r7
	if (!req) {
   29d72:	2301      	movs	r3, #1
   29d74:	4632      	mov	r2, r6
   29d76:	2108      	movs	r1, #8
   29d78:	4620      	mov	r0, r4
   29d7a:	f00f fd10 	bl	3979e <send_err_rsp.part.0>
		return 0;
   29d7e:	2000      	movs	r0, #0
}
   29d80:	b00c      	add	sp, #48	; 0x30
   29d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   29d86:	2101      	movs	r1, #1
   29d88:	300c      	adds	r0, #12
	data.uuid = uuid;
   29d8a:	e9cd 4806 	strd	r4, r8, [sp, #24]
   29d8e:	f002 fb4d 	bl	2c42c <net_buf_simple_add>
	data.rsp->len = 0U;
   29d92:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   29d94:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   29d96:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   29d98:	230a      	movs	r3, #10
   29d9a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   29d9e:	4a0d      	ldr	r2, [pc, #52]	; (29dd4 <att_read_type_req+0xc0>)
   29da0:	ab06      	add	r3, sp, #24
   29da2:	4639      	mov	r1, r7
   29da4:	4630      	mov	r0, r6
   29da6:	f00f f971 	bl	3908c <bt_gatt_foreach_attr>
	if (data.err) {
   29daa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   29dae:	b14b      	cbz	r3, 29dc4 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   29db0:	9b08      	ldr	r3, [sp, #32]
   29db2:	6998      	ldr	r0, [r3, #24]
   29db4:	f7ff fb4c 	bl	29450 <tx_meta_data_free>
		net_buf_unref(data.buf);
   29db8:	9808      	ldr	r0, [sp, #32]
   29dba:	f002 fa31 	bl	2c220 <net_buf_unref>
	if (!req) {
   29dbe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   29dc2:	e7d7      	b.n	29d74 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   29dc4:	9908      	ldr	r1, [sp, #32]
   29dc6:	4620      	mov	r0, r4
   29dc8:	f00f faa8 	bl	3931c <bt_att_chan_send_rsp>
	return 0;
   29dcc:	e7d7      	b.n	29d7e <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   29dce:	2004      	movs	r0, #4
   29dd0:	e7d6      	b.n	29d80 <att_read_type_req+0x6c>
   29dd2:	bf00      	nop
   29dd4:	000296a5 	.word	0x000296a5

00029dd8 <att_find_type_req>:
{
   29dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29ddc:	460f      	mov	r7, r1
   29dde:	b086      	sub	sp, #24
   29de0:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   29de2:	2106      	movs	r1, #6
   29de4:	f107 000c 	add.w	r0, r7, #12
   29de8:	f002 fb06 	bl	2c3f8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   29dec:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29dee:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   29df2:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   29df4:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   29df8:	b1c5      	cbz	r5, 29e2c <att_find_type_req+0x54>
   29dfa:	2300      	movs	r3, #0
   29dfc:	f1b8 0f00 	cmp.w	r8, #0
   29e00:	d013      	beq.n	29e2a <att_find_type_req+0x52>
	if (start > end) {
   29e02:	4545      	cmp	r5, r8
   29e04:	d812      	bhi.n	29e2c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   29e06:	f88d 3000 	strb.w	r3, [sp]
   29e0a:	f88d 3004 	strb.w	r3, [sp, #4]
   29e0e:	a901      	add	r1, sp, #4
   29e10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   29e14:	4668      	mov	r0, sp
   29e16:	f8ad 2002 	strh.w	r2, [sp, #2]
   29e1a:	f8ad 3006 	strh.w	r3, [sp, #6]
   29e1e:	f00e fd2d 	bl	3887c <bt_uuid_cmp>
   29e22:	4606      	mov	r6, r0
   29e24:	b160      	cbz	r0, 29e40 <att_find_type_req+0x68>
	if (!req) {
   29e26:	230a      	movs	r3, #10
   29e28:	e001      	b.n	29e2e <att_find_type_req+0x56>
			*err = 0U;
   29e2a:	4645      	mov	r5, r8
	if (!req) {
   29e2c:	2301      	movs	r3, #1
   29e2e:	462a      	mov	r2, r5
   29e30:	2106      	movs	r1, #6
   29e32:	4620      	mov	r0, r4
   29e34:	f00f fcb3 	bl	3979e <send_err_rsp.part.0>
		return 0;
   29e38:	2000      	movs	r0, #0
}
   29e3a:	b006      	add	sp, #24
   29e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   29e40:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   29e44:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   29e46:	4601      	mov	r1, r0
   29e48:	2214      	movs	r2, #20
   29e4a:	a801      	add	r0, sp, #4
   29e4c:	f00e fcc0 	bl	387d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   29e50:	4632      	mov	r2, r6
   29e52:	2107      	movs	r1, #7
   29e54:	4650      	mov	r0, sl
   29e56:	f00f fce5 	bl	39824 <bt_att_create_pdu>
   29e5a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   29e5c:	b1f8      	cbz	r0, 29e9e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   29e5e:	230a      	movs	r3, #10
   29e60:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   29e64:	4a0f      	ldr	r2, [pc, #60]	; (29ea4 <att_find_type_req+0xcc>)
	data.chan = chan;
   29e66:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   29e68:	ab01      	add	r3, sp, #4
   29e6a:	4641      	mov	r1, r8
   29e6c:	4628      	mov	r0, r5
	data.value = value;
   29e6e:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   29e72:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   29e76:	f00f f909 	bl	3908c <bt_gatt_foreach_attr>
	if (data.err) {
   29e7a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   29e7e:	b14b      	cbz	r3, 29e94 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   29e80:	9b02      	ldr	r3, [sp, #8]
   29e82:	6998      	ldr	r0, [r3, #24]
   29e84:	f7ff fae4 	bl	29450 <tx_meta_data_free>
		net_buf_unref(data.buf);
   29e88:	9802      	ldr	r0, [sp, #8]
   29e8a:	f002 f9c9 	bl	2c220 <net_buf_unref>
	if (!req) {
   29e8e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   29e92:	e7cc      	b.n	29e2e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   29e94:	9902      	ldr	r1, [sp, #8]
   29e96:	4620      	mov	r0, r4
   29e98:	f00f fa40 	bl	3931c <bt_att_chan_send_rsp>
	return 0;
   29e9c:	e7cc      	b.n	29e38 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   29e9e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   29ea0:	e7cb      	b.n	29e3a <att_find_type_req+0x62>
   29ea2:	bf00      	nop
   29ea4:	000390a3 	.word	0x000390a3

00029ea8 <att_find_info_req>:
{
   29ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   29eaa:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   29eac:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29eae:	885e      	ldrh	r6, [r3, #2]
{
   29eb0:	b085      	sub	sp, #20
   29eb2:	4604      	mov	r4, r0
	if (!start || !end) {
   29eb4:	b195      	cbz	r5, 29edc <att_find_info_req+0x34>
   29eb6:	b186      	cbz	r6, 29eda <att_find_info_req+0x32>
	if (start > end) {
   29eb8:	42b5      	cmp	r5, r6
   29eba:	d80f      	bhi.n	29edc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   29ebc:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   29ebe:	2210      	movs	r2, #16
   29ec0:	2100      	movs	r1, #0
   29ec2:	4668      	mov	r0, sp
   29ec4:	f00e fc84 	bl	387d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   29ec8:	2200      	movs	r2, #0
   29eca:	2105      	movs	r1, #5
   29ecc:	4638      	mov	r0, r7
   29ece:	f00f fca9 	bl	39824 <bt_att_create_pdu>
   29ed2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   29ed4:	b958      	cbnz	r0, 29eee <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   29ed6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   29ed8:	e007      	b.n	29eea <att_find_info_req+0x42>
			*err = 0U;
   29eda:	4635      	mov	r5, r6
	if (!req) {
   29edc:	2301      	movs	r3, #1
   29ede:	462a      	mov	r2, r5
   29ee0:	2104      	movs	r1, #4
   29ee2:	4620      	mov	r0, r4
   29ee4:	f00f fc5b 	bl	3979e <send_err_rsp.part.0>
		return 0;
   29ee8:	2000      	movs	r0, #0
}
   29eea:	b005      	add	sp, #20
   29eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   29eee:	466b      	mov	r3, sp
   29ef0:	4a0a      	ldr	r2, [pc, #40]	; (29f1c <att_find_info_req+0x74>)
	data.chan = chan;
   29ef2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   29ef4:	4631      	mov	r1, r6
   29ef6:	4628      	mov	r0, r5
   29ef8:	f00f f8c8 	bl	3908c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   29efc:	9b02      	ldr	r3, [sp, #8]
   29efe:	b943      	cbnz	r3, 29f12 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   29f00:	9b01      	ldr	r3, [sp, #4]
   29f02:	6998      	ldr	r0, [r3, #24]
   29f04:	f7ff faa4 	bl	29450 <tx_meta_data_free>
		net_buf_unref(data.buf);
   29f08:	9801      	ldr	r0, [sp, #4]
   29f0a:	f002 f989 	bl	2c220 <net_buf_unref>
	if (!req) {
   29f0e:	230a      	movs	r3, #10
   29f10:	e7e5      	b.n	29ede <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   29f12:	9901      	ldr	r1, [sp, #4]
   29f14:	4620      	mov	r0, r4
   29f16:	f00f fa01 	bl	3931c <bt_att_chan_send_rsp>
	return 0;
   29f1a:	e7e5      	b.n	29ee8 <att_find_info_req+0x40>
   29f1c:	000391cb 	.word	0x000391cb

00029f20 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   29f20:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   29f22:	4809      	ldr	r0, [pc, #36]	; (29f48 <bt_att_init+0x28>)
   29f24:	4d09      	ldr	r5, [pc, #36]	; (29f4c <bt_att_init+0x2c>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   29f26:	4e08      	ldr	r6, [pc, #32]	; (29f48 <bt_att_init+0x28>)
   29f28:	f011 fae3 	bl	3b4f2 <z_impl_k_queue_init>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   29f2c:	2400      	movs	r4, #0
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   29f2e:	4629      	mov	r1, r5
   29f30:	4630      	mov	r0, r6
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   29f32:	3401      	adds	r4, #1
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   29f34:	f011 faea 	bl	3b50c <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   29f38:	2c05      	cmp	r4, #5
   29f3a:	f105 0514 	add.w	r5, r5, #20
   29f3e:	d1f6      	bne.n	29f2e <bt_att_init+0xe>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   29f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_init();
   29f44:	f000 bb26 	b.w	2a594 <bt_gatt_init>
   29f48:	20000b2c 	.word	0x20000b2c
   29f4c:	20003a44 	.word	0x20003a44

00029f50 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   29f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   29f52:	2300      	movs	r3, #0
{
   29f54:	4605      	mov	r5, r0
   29f56:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   29f58:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   29f5a:	f009 fe6d 	bl	33c38 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   29f5e:	4b0b      	ldr	r3, [pc, #44]	; (29f8c <bt_att_req_alloc+0x3c>)
   29f60:	681b      	ldr	r3, [r3, #0]
   29f62:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   29f64:	bf04      	itt	eq
   29f66:	2500      	moveq	r5, #0
   29f68:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   29f6a:	a901      	add	r1, sp, #4
   29f6c:	4808      	ldr	r0, [pc, #32]	; (29f90 <bt_att_req_alloc+0x40>)
   29f6e:	462a      	mov	r2, r5
   29f70:	4623      	mov	r3, r4
   29f72:	f007 fd39 	bl	319e8 <k_mem_slab_alloc>
   29f76:	4601      	mov	r1, r0
   29f78:	b930      	cbnz	r0, 29f88 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   29f7a:	9801      	ldr	r0, [sp, #4]
   29f7c:	2210      	movs	r2, #16
   29f7e:	f00e fc27 	bl	387d0 <memset>

	return req;
   29f82:	9801      	ldr	r0, [sp, #4]
}
   29f84:	b003      	add	sp, #12
   29f86:	bd30      	pop	{r4, r5, pc}
		return NULL;
   29f88:	2000      	movs	r0, #0
   29f8a:	e7fb      	b.n	29f84 <bt_att_req_alloc+0x34>
   29f8c:	20003aa8 	.word	0x20003aa8
   29f90:	20000aa8 	.word	0x20000aa8

00029f94 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   29f94:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   29f96:	6883      	ldr	r3, [r0, #8]
{
   29f98:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   29f9a:	b14b      	cbz	r3, 29fb0 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   29f9c:	6998      	ldr	r0, [r3, #24]
   29f9e:	f7ff fa57 	bl	29450 <tx_meta_data_free>
		net_buf_unref(req->buf);
   29fa2:	9b01      	ldr	r3, [sp, #4]
   29fa4:	6898      	ldr	r0, [r3, #8]
   29fa6:	f002 f93b 	bl	2c220 <net_buf_unref>
		req->buf = NULL;
   29faa:	9b01      	ldr	r3, [sp, #4]
   29fac:	2200      	movs	r2, #0
   29fae:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   29fb0:	4803      	ldr	r0, [pc, #12]	; (29fc0 <bt_att_req_free+0x2c>)
   29fb2:	a901      	add	r1, sp, #4
   29fb4:	f007 fd70 	bl	31a98 <k_mem_slab_free>
}
   29fb8:	b003      	add	sp, #12
   29fba:	f85d fb04 	ldr.w	pc, [sp], #4
   29fbe:	bf00      	nop
   29fc0:	20000aa8 	.word	0x20000aa8

00029fc4 <att_handle_rsp>:
{
   29fc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29fc8:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   29fca:	30c0      	adds	r0, #192	; 0xc0
{
   29fcc:	460e      	mov	r6, r1
   29fce:	4617      	mov	r7, r2
   29fd0:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   29fd2:	f008 fe6b 	bl	32cac <k_work_cancel_delayable>
	if (!chan->req) {
   29fd6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   29fda:	b930      	cbnz	r0, 29fea <att_handle_rsp+0x26>
	att_req_send_process(chan->att);
   29fdc:	6820      	ldr	r0, [r4, #0]
   29fde:	f00f fb0e 	bl	395fe <att_req_send_process>
}
   29fe2:	2000      	movs	r0, #0
   29fe4:	b002      	add	sp, #8
   29fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   29fea:	4b11      	ldr	r3, [pc, #68]	; (2a030 <att_handle_rsp+0x6c>)
   29fec:	4298      	cmp	r0, r3
   29fee:	f04f 0800 	mov.w	r8, #0
   29ff2:	d102      	bne.n	29ffa <att_handle_rsp+0x36>
		chan->req = NULL;
   29ff4:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   29ff8:	e7f0      	b.n	29fdc <att_handle_rsp+0x18>
	func = chan->req->func;
   29ffa:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   29ffe:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   2a002:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   2a006:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   2a00a:	f7ff ffc3 	bl	29f94 <bt_att_req_free>
	att_req_send_process(chan->att);
   2a00e:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   2a010:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   2a014:	f00f faf3 	bl	395fe <att_req_send_process>
	if (func) {
   2a018:	f1b9 0f00 	cmp.w	r9, #0
   2a01c:	d0e1      	beq.n	29fe2 <att_handle_rsp+0x1e>
		func(chan->att->conn, err, pdu, len, params);
   2a01e:	6820      	ldr	r0, [r4, #0]
   2a020:	f8cd a000 	str.w	sl, [sp]
   2a024:	6800      	ldr	r0, [r0, #0]
   2a026:	463b      	mov	r3, r7
   2a028:	4632      	mov	r2, r6
   2a02a:	4629      	mov	r1, r5
   2a02c:	47c8      	blx	r9
   2a02e:	e7d8      	b.n	29fe2 <att_handle_rsp+0x1e>
   2a030:	20003aac 	.word	0x20003aac

0002a034 <bt_att_disconnected>:
{
   2a034:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   2a038:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   2a03c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2a03e:	2e00      	cmp	r6, #0
   2a040:	d056      	beq.n	2a0f0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2a042:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   2a046:	f106 0028 	add.w	r0, r6, #40	; 0x28
   2a04a:	f00f fa19 	bl	39480 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2a04e:	1f27      	subs	r7, r4, #4
   2a050:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   2a054:	2200      	movs	r2, #0
   2a056:	2300      	movs	r3, #0
   2a058:	4640      	mov	r0, r8
   2a05a:	f010 f930 	bl	3a2be <net_buf_get>
   2a05e:	4605      	mov	r5, r0
   2a060:	bb28      	cbnz	r0, 2a0ae <bt_att_disconnected+0x7a>
	if (chan->req) {
   2a062:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2a066:	b12b      	cbz	r3, 2a074 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2a068:	4602      	mov	r2, r0
   2a06a:	4601      	mov	r1, r0
   2a06c:	230e      	movs	r3, #14
   2a06e:	4638      	mov	r0, r7
   2a070:	f7ff ffa8 	bl	29fc4 <att_handle_rsp>
	chan->att = NULL;
   2a074:	2300      	movs	r3, #0
   2a076:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   2a07a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2a07c:	2b00      	cmp	r3, #0
   2a07e:	d137      	bne.n	2a0f0 <bt_att_disconnected+0xbc>
	att_reset(att);
   2a080:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   2a082:	9803      	ldr	r0, [sp, #12]
   2a084:	2200      	movs	r2, #0
   2a086:	2300      	movs	r3, #0
   2a088:	300c      	adds	r0, #12
   2a08a:	f010 f918 	bl	3a2be <net_buf_get>
   2a08e:	4605      	mov	r5, r0
   2a090:	b9a0      	cbnz	r0, 2a0bc <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   2a092:	9803      	ldr	r0, [sp, #12]
	return list->head;
   2a094:	6845      	ldr	r5, [r0, #4]
   2a096:	b9c5      	cbnz	r5, 2a0ca <bt_att_disconnected+0x96>
	att->conn = NULL;
   2a098:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   2a09a:	a903      	add	r1, sp, #12
   2a09c:	4816      	ldr	r0, [pc, #88]	; (2a0f8 <bt_att_disconnected+0xc4>)
   2a09e:	f007 fcfb 	bl	31a98 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   2a0a2:	6820      	ldr	r0, [r4, #0]
}
   2a0a4:	b004      	add	sp, #16
   2a0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   2a0aa:	f000 bfc7 	b.w	2b03c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2a0ae:	69a8      	ldr	r0, [r5, #24]
   2a0b0:	f7ff f9ce 	bl	29450 <tx_meta_data_free>
		net_buf_unref(buf);
   2a0b4:	4628      	mov	r0, r5
   2a0b6:	f002 f8b3 	bl	2c220 <net_buf_unref>
   2a0ba:	e7cb      	b.n	2a054 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2a0bc:	69a8      	ldr	r0, [r5, #24]
   2a0be:	f7ff f9c7 	bl	29450 <tx_meta_data_free>
		net_buf_unref(buf);
   2a0c2:	4628      	mov	r0, r5
   2a0c4:	f002 f8ac 	bl	2c220 <net_buf_unref>
   2a0c8:	e7db      	b.n	2a082 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a0ca:	6882      	ldr	r2, [r0, #8]
	return node->next;
   2a0cc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2a0ce:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a0d0:	4295      	cmp	r5, r2
	list->tail = node;
   2a0d2:	bf08      	it	eq
   2a0d4:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   2a0d6:	686e      	ldr	r6, [r5, #4]
   2a0d8:	b136      	cbz	r6, 2a0e8 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   2a0da:	68eb      	ldr	r3, [r5, #12]
   2a0dc:	9300      	str	r3, [sp, #0]
   2a0de:	2300      	movs	r3, #0
   2a0e0:	6800      	ldr	r0, [r0, #0]
   2a0e2:	461a      	mov	r2, r3
   2a0e4:	210e      	movs	r1, #14
   2a0e6:	47b0      	blx	r6
		bt_att_req_free(req);
   2a0e8:	4628      	mov	r0, r5
   2a0ea:	f7ff ff53 	bl	29f94 <bt_att_req_free>
   2a0ee:	e7d0      	b.n	2a092 <bt_att_disconnected+0x5e>
}
   2a0f0:	b004      	add	sp, #16
   2a0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a0f6:	bf00      	nop
   2a0f8:	20000a68 	.word	0x20000a68

0002a0fc <att_timeout>:
{
   2a0fc:	b510      	push	{r4, lr}
	LOG_ERR("ATT Timeout");
   2a0fe:	2145      	movs	r1, #69	; 0x45
{
   2a100:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   2a102:	4804      	ldr	r0, [pc, #16]	; (2a114 <att_timeout+0x18>)
   2a104:	f00d ff6e 	bl	37fe4 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   2a108:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   2a10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   2a110:	f7ff bf90 	b.w	2a034 <bt_att_disconnected>
   2a114:	0003dda3 	.word	0x0003dda3

0002a118 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a11a:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   2a11c:	b950      	cbnz	r0, 2a134 <bt_att_send+0x1c>
   2a11e:	4928      	ldr	r1, [pc, #160]	; (2a1c0 <bt_att_send+0xa8>)
   2a120:	4828      	ldr	r0, [pc, #160]	; (2a1c4 <bt_att_send+0xac>)
   2a122:	f640 62a4 	movw	r2, #3748	; 0xea4
   2a126:	f00d ff4f 	bl	37fc8 <assert_print>
   2a12a:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   2a12e:	4824      	ldr	r0, [pc, #144]	; (2a1c0 <bt_att_send+0xa8>)
   2a130:	f00d ff43 	bl	37fba <assert_post_action>
   2a134:	b941      	cbnz	r1, 2a148 <bt_att_send+0x30>
   2a136:	4922      	ldr	r1, [pc, #136]	; (2a1c0 <bt_att_send+0xa8>)
   2a138:	4822      	ldr	r0, [pc, #136]	; (2a1c4 <bt_att_send+0xac>)
   2a13a:	f640 62a5 	movw	r2, #3749	; 0xea5
   2a13e:	f00d ff43 	bl	37fc8 <assert_print>
   2a142:	f640 61a5 	movw	r1, #3749	; 0xea5
   2a146:	e7f2      	b.n	2a12e <bt_att_send+0x16>

	att = att_get(conn);
   2a148:	f7ff f95a 	bl	29400 <att_get>
	if (!att) {
   2a14c:	4605      	mov	r5, r0
   2a14e:	b940      	cbnz	r0, 2a162 <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2a150:	69a0      	ldr	r0, [r4, #24]
   2a152:	f7ff f97d 	bl	29450 <tx_meta_data_free>
		net_buf_unref(buf);
   2a156:	4620      	mov	r0, r4
   2a158:	f002 f862 	bl	2c220 <net_buf_unref>
		return -ENOTCONN;
   2a15c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2a160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2a162:	f100 060c 	add.w	r6, r0, #12
   2a166:	4621      	mov	r1, r4
   2a168:	4630      	mov	r0, r6
   2a16a:	f002 f839 	bl	2c1e0 <net_buf_put>
	return list->head;
   2a16e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a170:	b14d      	cbz	r5, 2a186 <bt_att_send+0x6e>
	return node->next;
   2a172:	f855 49f0 	ldr.w	r4, [r5], #-240
   2a176:	b104      	cbz	r4, 2a17a <bt_att_send+0x62>
   2a178:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   2a17a:	4631      	mov	r1, r6
   2a17c:	4628      	mov	r0, r5
   2a17e:	f00f f8db 	bl	39338 <process_queue>
		if (!err) {
   2a182:	4603      	mov	r3, r0
   2a184:	b980      	cbnz	r0, 2a1a8 <bt_att_send+0x90>
	return 0;
   2a186:	2000      	movs	r0, #0
   2a188:	e7ea      	b.n	2a160 <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2a18a:	2103      	movs	r1, #3
   2a18c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2a190:	f00e ff42 	bl	39018 <atomic_test_bit>
   2a194:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2a196:	f105 0098 	add.w	r0, r5, #152	; 0x98
   2a19a:	f00e ff3d 	bl	39018 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2a19e:	4287      	cmp	r7, r0
   2a1a0:	f06f 0301 	mvn.w	r3, #1
   2a1a4:	d107      	bne.n	2a1b6 <bt_att_send+0x9e>
   2a1a6:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a1a8:	2c00      	cmp	r4, #0
   2a1aa:	d0ec      	beq.n	2a186 <bt_att_send+0x6e>
   2a1ac:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   2a1b0:	b922      	cbnz	r2, 2a1bc <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   2a1b2:	3302      	adds	r3, #2
   2a1b4:	d0e9      	beq.n	2a18a <bt_att_send+0x72>
{
   2a1b6:	4625      	mov	r5, r4
   2a1b8:	4614      	mov	r4, r2
   2a1ba:	e7de      	b.n	2a17a <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2a1bc:	3af0      	subs	r2, #240	; 0xf0
   2a1be:	e7f8      	b.n	2a1b2 <bt_att_send+0x9a>
   2a1c0:	0003dcee 	.word	0x0003dcee
   2a1c4:	0003c7f8 	.word	0x0003c7f8

0002a1c8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2a1c8:	b510      	push	{r4, lr}
   2a1ca:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   2a1cc:	b950      	cbnz	r0, 2a1e4 <bt_att_req_send+0x1c>
   2a1ce:	4914      	ldr	r1, [pc, #80]	; (2a220 <bt_att_req_send+0x58>)
   2a1d0:	4814      	ldr	r0, [pc, #80]	; (2a224 <bt_att_req_send+0x5c>)
   2a1d2:	f640 62ba 	movw	r2, #3770	; 0xeba
   2a1d6:	f00d fef7 	bl	37fc8 <assert_print>
   2a1da:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   2a1de:	4810      	ldr	r0, [pc, #64]	; (2a220 <bt_att_req_send+0x58>)
   2a1e0:	f00d feeb 	bl	37fba <assert_post_action>
   2a1e4:	b941      	cbnz	r1, 2a1f8 <bt_att_req_send+0x30>
   2a1e6:	490e      	ldr	r1, [pc, #56]	; (2a220 <bt_att_req_send+0x58>)
   2a1e8:	480e      	ldr	r0, [pc, #56]	; (2a224 <bt_att_req_send+0x5c>)
   2a1ea:	f640 62bb 	movw	r2, #3771	; 0xebb
   2a1ee:	f00d feeb 	bl	37fc8 <assert_print>
   2a1f2:	f640 61bb 	movw	r1, #3771	; 0xebb
   2a1f6:	e7f2      	b.n	2a1de <bt_att_req_send+0x16>

	att = att_get(conn);
   2a1f8:	f7ff f902 	bl	29400 <att_get>
	if (!att) {
   2a1fc:	b160      	cbz	r0, 2a218 <bt_att_req_send+0x50>
	parent->next = child;
   2a1fe:	2300      	movs	r3, #0
   2a200:	6023      	str	r3, [r4, #0]
	return list->tail;
   2a202:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2a204:	b92b      	cbnz	r3, 2a212 <bt_att_req_send+0x4a>
	list->head = node;
   2a206:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2a20a:	f00f f9f8 	bl	395fe <att_req_send_process>

	return 0;
   2a20e:	2000      	movs	r0, #0
}
   2a210:	bd10      	pop	{r4, pc}
	parent->next = child;
   2a212:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a214:	6084      	str	r4, [r0, #8]
}
   2a216:	e7f8      	b.n	2a20a <bt_att_req_send+0x42>
		return -ENOTCONN;
   2a218:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a21c:	e7f8      	b.n	2a210 <bt_att_req_send+0x48>
   2a21e:	bf00      	nop
   2a220:	0003dcee 	.word	0x0003dcee
   2a224:	0003c7f8 	.word	0x0003c7f8

0002a228 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   2a228:	b570      	push	{r4, r5, r6, lr}
   2a22a:	4d14      	ldr	r5, [pc, #80]	; (2a27c <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   2a22c:	4606      	mov	r6, r0
   2a22e:	b140      	cbz	r0, 2a242 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2a230:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2a234:	462a      	mov	r2, r5
   2a236:	1e6c      	subs	r4, r5, #1
   2a238:	f00e fe22 	bl	38e80 <bt_conn_is_peer_addr_le>
   2a23c:	b198      	cbz	r0, 2a266 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2a23e:	4620      	mov	r0, r4
   2a240:	e00c      	b.n	2a25c <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   2a242:	490f      	ldr	r1, [pc, #60]	; (2a280 <find_cf_cfg+0x58>)
   2a244:	4628      	mov	r0, r5
   2a246:	f00f fc04 	bl	39a52 <bt_addr_le_eq>
   2a24a:	b940      	cbnz	r0, 2a25e <find_cf_cfg+0x36>
   2a24c:	490c      	ldr	r1, [pc, #48]	; (2a280 <find_cf_cfg+0x58>)
   2a24e:	f105 0010 	add.w	r0, r5, #16
   2a252:	f00f fbfe 	bl	39a52 <bt_addr_le_eq>
   2a256:	b120      	cbz	r0, 2a262 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2a258:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   2a25c:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2a25e:	1e68      	subs	r0, r5, #1
   2a260:	e7fc      	b.n	2a25c <find_cf_cfg+0x34>
	return NULL;
   2a262:	2000      	movs	r0, #0
   2a264:	e7fa      	b.n	2a25c <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2a266:	7c21      	ldrb	r1, [r4, #16]
   2a268:	f104 0211 	add.w	r2, r4, #17
   2a26c:	4630      	mov	r0, r6
   2a26e:	f00e fe07 	bl	38e80 <bt_conn_is_peer_addr_le>
   2a272:	2800      	cmp	r0, #0
   2a274:	d0f5      	beq.n	2a262 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2a276:	f104 0010 	add.w	r0, r4, #16
   2a27a:	e7ef      	b.n	2a25c <find_cf_cfg+0x34>
   2a27c:	20003aed 	.word	0x20003aed
   2a280:	0003d520 	.word	0x0003d520

0002a284 <find_sc_cfg>:
{
   2a284:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   2a286:	4c0e      	ldr	r4, [pc, #56]	; (2a2c0 <find_sc_cfg+0x3c>)
   2a288:	7823      	ldrb	r3, [r4, #0]
   2a28a:	4283      	cmp	r3, r0
{
   2a28c:	4605      	mov	r5, r0
   2a28e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   2a290:	d00c      	beq.n	2a2ac <find_sc_cfg+0x28>
   2a292:	7b23      	ldrb	r3, [r4, #12]
   2a294:	42ab      	cmp	r3, r5
   2a296:	d110      	bne.n	2a2ba <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   2a298:	480a      	ldr	r0, [pc, #40]	; (2a2c4 <find_sc_cfg+0x40>)
   2a29a:	4631      	mov	r1, r6
   2a29c:	f00f fbd9 	bl	39a52 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   2a2a0:	b158      	cbz	r0, 2a2ba <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2a2a2:	2301      	movs	r3, #1
			return &sc_cfg[i];
   2a2a4:	220c      	movs	r2, #12
   2a2a6:	fb02 4003 	mla	r0, r2, r3, r4
   2a2aa:	e007      	b.n	2a2bc <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   2a2ac:	1c60      	adds	r0, r4, #1
   2a2ae:	f00f fbd0 	bl	39a52 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   2a2b2:	2800      	cmp	r0, #0
   2a2b4:	d0ed      	beq.n	2a292 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2a2b6:	2300      	movs	r3, #0
   2a2b8:	e7f4      	b.n	2a2a4 <find_sc_cfg+0x20>
	return NULL;
   2a2ba:	2000      	movs	r0, #0
}
   2a2bc:	bd70      	pop	{r4, r5, r6, pc}
   2a2be:	bf00      	nop
   2a2c0:	20004c6c 	.word	0x20004c6c
   2a2c4:	20004c79 	.word	0x20004c79

0002a2c8 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   2a2c8:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   2a2ca:	1c4a      	adds	r2, r1, #1
{
   2a2cc:	460c      	mov	r4, r1
		if (conn) {
   2a2ce:	4605      	mov	r5, r0
   2a2d0:	b968      	cbnz	r0, 2a2ee <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   2a2d2:	490e      	ldr	r1, [pc, #56]	; (2a30c <find_ccc_cfg+0x44>)
   2a2d4:	4610      	mov	r0, r2
   2a2d6:	f00f fbbc 	bl	39a52 <bt_addr_le_eq>
   2a2da:	b930      	cbnz	r0, 2a2ea <find_ccc_cfg+0x22>
   2a2dc:	490b      	ldr	r1, [pc, #44]	; (2a30c <find_ccc_cfg+0x44>)
   2a2de:	f104 000b 	add.w	r0, r4, #11
   2a2e2:	f00f fbb6 	bl	39a52 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2a2e6:	b170      	cbz	r0, 2a306 <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2a2e8:	340a      	adds	r4, #10
   2a2ea:	4620      	mov	r0, r4
   2a2ec:	e00c      	b.n	2a308 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2a2ee:	7809      	ldrb	r1, [r1, #0]
   2a2f0:	f00e fdc6 	bl	38e80 <bt_conn_is_peer_addr_le>
   2a2f4:	2800      	cmp	r0, #0
   2a2f6:	d1f8      	bne.n	2a2ea <find_ccc_cfg+0x22>
   2a2f8:	7aa1      	ldrb	r1, [r4, #10]
   2a2fa:	f104 020b 	add.w	r2, r4, #11
   2a2fe:	4628      	mov	r0, r5
   2a300:	f00e fdbe 	bl	38e80 <bt_conn_is_peer_addr_le>
   2a304:	e7ef      	b.n	2a2e6 <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   2a306:	2000      	movs	r0, #0
}
   2a308:	bd38      	pop	{r3, r4, r5, pc}
   2a30a:	bf00      	nop
   2a30c:	0003d520 	.word	0x0003d520

0002a310 <clear_cf_cfg>:
{
   2a310:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2a312:	490c      	ldr	r1, [pc, #48]	; (2a344 <clear_cf_cfg+0x34>)
{
   2a314:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2a316:	3001      	adds	r0, #1
   2a318:	f00f fba3 	bl	39a62 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2a31c:	f104 0008 	add.w	r0, r4, #8
   2a320:	2201      	movs	r2, #1
   2a322:	2100      	movs	r1, #0
   2a324:	f00e fa54 	bl	387d0 <memset>
   2a328:	f3bf 8f5b 	dmb	ish
   2a32c:	340c      	adds	r4, #12
   2a32e:	2300      	movs	r3, #0
   2a330:	e854 2f00 	ldrex	r2, [r4]
   2a334:	e844 3100 	strex	r1, r3, [r4]
   2a338:	2900      	cmp	r1, #0
   2a33a:	d1f9      	bne.n	2a330 <clear_cf_cfg+0x20>
   2a33c:	f3bf 8f5b 	dmb	ish
}
   2a340:	bd10      	pop	{r4, pc}
   2a342:	bf00      	nop
   2a344:	0003d520 	.word	0x0003d520

0002a348 <sc_save>:
{
   2a348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a34c:	4680      	mov	r8, r0
   2a34e:	460f      	mov	r7, r1
   2a350:	4616      	mov	r6, r2
   2a352:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   2a354:	f7ff ff96 	bl	2a284 <find_sc_cfg>
	if (!cfg) {
   2a358:	4604      	mov	r4, r0
   2a35a:	b978      	cbnz	r0, 2a37c <sc_save+0x34>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2a35c:	490e      	ldr	r1, [pc, #56]	; (2a398 <sc_save+0x50>)
   2a35e:	f7ff ff91 	bl	2a284 <find_sc_cfg>
		if (!cfg) {
   2a362:	4604      	mov	r4, r0
   2a364:	b928      	cbnz	r0, 2a372 <sc_save+0x2a>
}
   2a366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("unable to save SC: no cfg left");
   2a36a:	480c      	ldr	r0, [pc, #48]	; (2a39c <sc_save+0x54>)
   2a36c:	2145      	movs	r1, #69	; 0x45
   2a36e:	f00d be39 	b.w	37fe4 <z_log_minimal_printk>
		cfg->id = id;
   2a372:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   2a376:	4639      	mov	r1, r7
   2a378:	f00f fb73 	bl	39a62 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   2a37c:	8922      	ldrh	r2, [r4, #8]
   2a37e:	8963      	ldrh	r3, [r4, #10]
   2a380:	b91a      	cbnz	r2, 2a38a <sc_save+0x42>
   2a382:	b92b      	cbnz	r3, 2a390 <sc_save+0x48>
		cfg->data.start = start;
   2a384:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   2a386:	8165      	strh	r5, [r4, #10]
   2a388:	e004      	b.n	2a394 <sc_save+0x4c>
	if (new_start >= *start && new_end <= *end) {
   2a38a:	4296      	cmp	r6, r2
		*start = new_start;
   2a38c:	bf38      	it	cc
   2a38e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   2a390:	429d      	cmp	r5, r3
   2a392:	d8f8      	bhi.n	2a386 <sc_save+0x3e>
}
   2a394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a398:	0003d520 	.word	0x0003d520
   2a39c:	0003ddbb 	.word	0x0003ddbb

0002a3a0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   2a3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   2a3a4:	4b28      	ldr	r3, [pc, #160]	; (2a448 <disconnected_cb+0xa8>)
{
   2a3a6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2a3a8:	6882      	ldr	r2, [r0, #8]
   2a3aa:	429a      	cmp	r2, r3
{
   2a3ac:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2a3ae:	d12b      	bne.n	2a408 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   2a3b0:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   2a3b2:	8aab      	ldrh	r3, [r5, #20]
   2a3b4:	b343      	cbz	r3, 2a408 <disconnected_cb+0x68>
   2a3b6:	1c6c      	adds	r4, r5, #1
   2a3b8:	f105 0915 	add.w	r9, r5, #21
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   2a3bc:	f04f 0800 	mov.w	r8, #0

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   2a3c0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   2a3c4:	b19b      	cbz	r3, 2a3ee <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2a3c6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   2a3ca:	4622      	mov	r2, r4
   2a3cc:	4630      	mov	r0, r6
   2a3ce:	f00e fd57 	bl	38e80 <bt_conn_is_peer_addr_le>
   2a3d2:	b9e0      	cbnz	r0, 2a40e <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2a3d4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2a3d8:	4621      	mov	r1, r4
   2a3da:	f7fe fc41 	bl	28c60 <bt_conn_lookup_addr_le>
			if (tmp) {
   2a3de:	b130      	cbz	r0, 2a3ee <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   2a3e0:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   2a3e2:	2b07      	cmp	r3, #7
   2a3e4:	bf08      	it	eq
   2a3e6:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   2a3ea:	f7fe fa09 	bl	28800 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2a3ee:	340a      	adds	r4, #10
   2a3f0:	454c      	cmp	r4, r9
   2a3f2:	d1e5      	bne.n	2a3c0 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   2a3f4:	f1b8 0f00 	cmp.w	r8, #0
   2a3f8:	d106      	bne.n	2a408 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   2a3fa:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   2a3fc:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   2a400:	b113      	cbz	r3, 2a408 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   2a402:	4641      	mov	r1, r8
   2a404:	4638      	mov	r0, r7
   2a406:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   2a408:	2001      	movs	r0, #1
   2a40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2a40e:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   2a412:	7a30      	ldrb	r0, [r6, #8]
   2a414:	4651      	mov	r1, sl
   2a416:	f00e fb16 	bl	38a46 <bt_addr_le_is_bonded>
   2a41a:	b978      	cbnz	r0, 2a43c <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   2a41c:	4b0b      	ldr	r3, [pc, #44]	; (2a44c <disconnected_cb+0xac>)
   2a41e:	429d      	cmp	r5, r3
   2a420:	d102      	bne.n	2a428 <disconnected_cb+0x88>
					sc_clear(conn);
   2a422:	4630      	mov	r0, r6
   2a424:	f00f fb92 	bl	39b4c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2a428:	4909      	ldr	r1, [pc, #36]	; (2a450 <disconnected_cb+0xb0>)
   2a42a:	4620      	mov	r0, r4
   2a42c:	f00f fb19 	bl	39a62 <bt_addr_le_copy>
	cfg->id = 0U;
   2a430:	2300      	movs	r3, #0
   2a432:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   2a436:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   2a43a:	e7d8      	b.n	2a3ee <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2a43c:	4651      	mov	r1, sl
   2a43e:	4620      	mov	r0, r4
   2a440:	f00f fb0f 	bl	39a62 <bt_addr_le_copy>
   2a444:	e7d3      	b.n	2a3ee <disconnected_cb+0x4e>
   2a446:	bf00      	nop
   2a448:	0002a455 	.word	0x0002a455
   2a44c:	2000070c 	.word	0x2000070c
   2a450:	0003d520 	.word	0x0003d520

0002a454 <bt_gatt_attr_write_ccc>:
{
   2a454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a458:	461e      	mov	r6, r3
   2a45a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2a45e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2a462:	4681      	mov	r9, r0
   2a464:	460f      	mov	r7, r1
	if (offset) {
   2a466:	2b00      	cmp	r3, #0
   2a468:	d13d      	bne.n	2a4e6 <bt_gatt_attr_write_ccc+0x92>
	if (!len || len > sizeof(uint16_t)) {
   2a46a:	1e73      	subs	r3, r6, #1
   2a46c:	2b01      	cmp	r3, #1
   2a46e:	d83d      	bhi.n	2a4ec <bt_gatt_attr_write_ccc+0x98>
	if (len < sizeof(uint16_t)) {
   2a470:	2e01      	cmp	r6, #1
	cfg = find_ccc_cfg(conn, ccc);
   2a472:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   2a474:	7815      	ldrb	r5, [r2, #0]
   2a476:	bf18      	it	ne
   2a478:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   2a47a:	f7ff ff25 	bl	2a2c8 <find_ccc_cfg>
	if (!cfg) {
   2a47e:	4604      	mov	r4, r0
   2a480:	b980      	cbnz	r0, 2a4a4 <bt_gatt_attr_write_ccc+0x50>
		if (!value) {
   2a482:	b915      	cbnz	r5, 2a48a <bt_gatt_attr_write_ccc+0x36>
			return len;
   2a484:	4630      	mov	r0, r6
}
   2a486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2a48a:	4641      	mov	r1, r8
   2a48c:	f7ff ff1c 	bl	2a2c8 <find_ccc_cfg>
		if (!cfg) {
   2a490:	4604      	mov	r4, r0
   2a492:	b370      	cbz	r0, 2a4f2 <bt_gatt_attr_write_ccc+0x9e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2a494:	f109 0190 	add.w	r1, r9, #144	; 0x90
   2a498:	3001      	adds	r0, #1
   2a49a:	f00f fae2 	bl	39a62 <bt_addr_le_copy>
		cfg->id = conn->id;
   2a49e:	f899 3008 	ldrb.w	r3, [r9, #8]
   2a4a2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   2a4a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
   2a4a8:	b98b      	cbnz	r3, 2a4ce <bt_gatt_attr_write_ccc+0x7a>
	cfg->value = value;
   2a4aa:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   2a4ac:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   2a4b0:	42ab      	cmp	r3, r5
   2a4b2:	d003      	beq.n	2a4bc <bt_gatt_attr_write_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   2a4b4:	4641      	mov	r1, r8
   2a4b6:	4638      	mov	r0, r7
   2a4b8:	f00f fa53 	bl	39962 <gatt_ccc_changed>
	if (!value) {
   2a4bc:	2d00      	cmp	r5, #0
   2a4be:	d1e1      	bne.n	2a484 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2a4c0:	490d      	ldr	r1, [pc, #52]	; (2a4f8 <bt_gatt_attr_write_ccc+0xa4>)
   2a4c2:	1c60      	adds	r0, r4, #1
   2a4c4:	f00f facd 	bl	39a62 <bt_addr_le_copy>
	cfg->id = 0U;
   2a4c8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2a4ca:	8125      	strh	r5, [r4, #8]
}
   2a4cc:	e7da      	b.n	2a484 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2a4ce:	462a      	mov	r2, r5
   2a4d0:	4639      	mov	r1, r7
   2a4d2:	4648      	mov	r0, r9
   2a4d4:	4798      	blx	r3
		if (write < 0) {
   2a4d6:	2800      	cmp	r0, #0
   2a4d8:	dbd5      	blt.n	2a486 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   2a4da:	3801      	subs	r0, #1
   2a4dc:	2801      	cmp	r0, #1
   2a4de:	d9e4      	bls.n	2a4aa <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2a4e0:	f06f 000d 	mvn.w	r0, #13
   2a4e4:	e7cf      	b.n	2a486 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a4e6:	f06f 0006 	mvn.w	r0, #6
   2a4ea:	e7cc      	b.n	2a486 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2a4ec:	f06f 000c 	mvn.w	r0, #12
   2a4f0:	e7c9      	b.n	2a486 <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2a4f2:	f06f 0010 	mvn.w	r0, #16
   2a4f6:	e7c6      	b.n	2a486 <bt_gatt_attr_write_ccc+0x32>
   2a4f8:	0003d520 	.word	0x0003d520

0002a4fc <read_ppcp>:
{
   2a4fc:	b513      	push	{r0, r1, r4, lr}
   2a4fe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2a502:	4c0b      	ldr	r4, [pc, #44]	; (2a530 <read_ppcp+0x34>)
{
   2a504:	4610      	mov	r0, r2
	if (offset > value_len) {
   2a506:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2a508:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   2a50c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   2a510:	d80b      	bhi.n	2a52a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   2a512:	f1c1 0408 	rsb	r4, r1, #8
   2a516:	429c      	cmp	r4, r3
   2a518:	bfa8      	it	ge
   2a51a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2a51c:	4622      	mov	r2, r4
   2a51e:	4469      	add	r1, sp
   2a520:	f00e f94b 	bl	387ba <memcpy>
}
   2a524:	4620      	mov	r0, r4
   2a526:	b002      	add	sp, #8
   2a528:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a52a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2a52e:	e7f9      	b.n	2a524 <read_ppcp+0x28>
   2a530:	00280018 	.word	0x00280018

0002a534 <sc_indicate_rsp>:
{
   2a534:	b510      	push	{r4, lr}
   2a536:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a538:	4815      	ldr	r0, [pc, #84]	; (2a590 <sc_indicate_rsp+0x5c>)
   2a53a:	f3bf 8f5b 	dmb	ish
   2a53e:	e850 3f00 	ldrex	r3, [r0]
   2a542:	f023 0302 	bic.w	r3, r3, #2
   2a546:	e840 3200 	strex	r2, r3, [r0]
   2a54a:	2a00      	cmp	r2, #0
   2a54c:	d1f7      	bne.n	2a53e <sc_indicate_rsp+0xa>
   2a54e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a552:	f3bf 8f5b 	dmb	ish
   2a556:	6803      	ldr	r3, [r0, #0]
   2a558:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2a55c:	07da      	lsls	r2, r3, #31
   2a55e:	d504      	bpl.n	2a56a <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   2a560:	2200      	movs	r2, #0
   2a562:	2300      	movs	r3, #0
   2a564:	3830      	subs	r0, #48	; 0x30
   2a566:	f008 fb9b 	bl	32ca0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   2a56a:	4620      	mov	r0, r4
   2a56c:	f00f f9c8 	bl	39900 <bt_att_fixed_chan_only>
   2a570:	b160      	cbz	r0, 2a58c <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   2a572:	4620      	mov	r0, r4
   2a574:	f7ff fe58 	bl	2a228 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2a578:	b140      	cbz	r0, 2a58c <sc_indicate_rsp+0x58>
   2a57a:	7a03      	ldrb	r3, [r0, #8]
   2a57c:	07db      	lsls	r3, r3, #31
   2a57e:	d505      	bpl.n	2a58c <sc_indicate_rsp+0x58>
}
   2a580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2a584:	2100      	movs	r1, #0
   2a586:	300c      	adds	r0, #12
   2a588:	f00f ba6e 	b.w	39a68 <atomic_set_bit>
}
   2a58c:	bd10      	pop	{r4, pc}
   2a58e:	bf00      	nop
   2a590:	20002148 	.word	0x20002148

0002a594 <bt_gatt_init>:
{
   2a594:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a596:	4b27      	ldr	r3, [pc, #156]	; (2a634 <bt_gatt_init+0xa0>)
   2a598:	f3bf 8f5b 	dmb	ish
   2a59c:	2201      	movs	r2, #1
   2a59e:	e853 1f00 	ldrex	r1, [r3]
   2a5a2:	2900      	cmp	r1, #0
   2a5a4:	d103      	bne.n	2a5ae <bt_gatt_init+0x1a>
   2a5a6:	e843 2000 	strex	r0, r2, [r3]
   2a5aa:	2800      	cmp	r0, #0
   2a5ac:	d1f7      	bne.n	2a59e <bt_gatt_init+0xa>
   2a5ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   2a5b2:	d13e      	bne.n	2a632 <bt_gatt_init+0x9e>
   2a5b4:	f3bf 8f5b 	dmb	ish
   2a5b8:	4b1f      	ldr	r3, [pc, #124]	; (2a638 <bt_gatt_init+0xa4>)
   2a5ba:	e853 1f00 	ldrex	r1, [r3]
   2a5be:	2900      	cmp	r1, #0
   2a5c0:	d103      	bne.n	2a5ca <bt_gatt_init+0x36>
   2a5c2:	e843 2000 	strex	r0, r2, [r3]
   2a5c6:	2800      	cmp	r0, #0
   2a5c8:	d1f7      	bne.n	2a5ba <bt_gatt_init+0x26>
   2a5ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   2a5ce:	d11c      	bne.n	2a60a <bt_gatt_init+0x76>
   2a5d0:	491a      	ldr	r1, [pc, #104]	; (2a63c <bt_gatt_init+0xa8>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2a5d2:	4a1b      	ldr	r2, [pc, #108]	; (2a640 <bt_gatt_init+0xac>)
   2a5d4:	880b      	ldrh	r3, [r1, #0]
   2a5d6:	4c1b      	ldr	r4, [pc, #108]	; (2a644 <bt_gatt_init+0xb0>)
	if (!atomic_cas(&service_init, 0, 1)) {
   2a5d8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2a5da:	42a2      	cmp	r2, r4
   2a5dc:	d912      	bls.n	2a604 <bt_gatt_init+0x70>
   2a5de:	b100      	cbz	r0, 2a5e2 <bt_gatt_init+0x4e>
   2a5e0:	800b      	strh	r3, [r1, #0]
   2a5e2:	4919      	ldr	r1, [pc, #100]	; (2a648 <bt_gatt_init+0xb4>)
   2a5e4:	4819      	ldr	r0, [pc, #100]	; (2a64c <bt_gatt_init+0xb8>)
   2a5e6:	f44f 62a1 	mov.w	r2, #1288	; 0x508
   2a5ea:	f00d fced 	bl	37fc8 <assert_print>
   2a5ee:	4816      	ldr	r0, [pc, #88]	; (2a648 <bt_gatt_init+0xb4>)
   2a5f0:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   2a5f4:	f00d fce1 	bl	37fba <assert_post_action>
		last_static_handle += svc->attr_count;
   2a5f8:	6850      	ldr	r0, [r2, #4]
   2a5fa:	4403      	add	r3, r0
   2a5fc:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2a5fe:	3208      	adds	r2, #8
   2a600:	2001      	movs	r0, #1
   2a602:	e7ea      	b.n	2a5da <bt_gatt_init+0x46>
   2a604:	d3f8      	bcc.n	2a5f8 <bt_gatt_init+0x64>
   2a606:	b100      	cbz	r0, 2a60a <bt_gatt_init+0x76>
   2a608:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   2a60a:	4b11      	ldr	r3, [pc, #68]	; (2a650 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   2a60c:	4911      	ldr	r1, [pc, #68]	; (2a654 <bt_gatt_init+0xc0>)
   2a60e:	4812      	ldr	r0, [pc, #72]	; (2a658 <bt_gatt_init+0xc4>)
   2a610:	2200      	movs	r2, #0
	list->tail = NULL;
   2a612:	e9c3 2200 	strd	r2, r2, [r3]
   2a616:	f008 fa59 	bl	32acc <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   2a61a:	480f      	ldr	r0, [pc, #60]	; (2a658 <bt_gatt_init+0xc4>)
   2a61c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2a620:	2300      	movs	r3, #0
   2a622:	f7fb fce1 	bl	25fe8 <bt_long_wq_schedule>
}
   2a626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   2a62a:	490c      	ldr	r1, [pc, #48]	; (2a65c <bt_gatt_init+0xc8>)
   2a62c:	480c      	ldr	r0, [pc, #48]	; (2a660 <bt_gatt_init+0xcc>)
   2a62e:	f008 ba4d 	b.w	32acc <k_work_init_delayable>
}
   2a632:	bd10      	pop	{r4, pc}
   2a634:	20003b10 	.word	0x20003b10
   2a638:	20003b0c 	.word	0x20003b0c
   2a63c:	20004c84 	.word	0x20004c84
   2a640:	0003bc4c 	.word	0x0003bc4c
   2a644:	0003bc64 	.word	0x0003bc64
   2a648:	0003dddf 	.word	0x0003dddf
   2a64c:	0003c7f8 	.word	0x0003c7f8
   2a650:	20003b14 	.word	0x20003b14
   2a654:	00039d95 	.word	0x00039d95
   2a658:	200020a0 	.word	0x200020a0
   2a65c:	0002ac45 	.word	0x0002ac45
   2a660:	20002118 	.word	0x20002118

0002a664 <bt_gatt_attr_get_handle>:
{
   2a664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   2a668:	4603      	mov	r3, r0
   2a66a:	b378      	cbz	r0, 2a6cc <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   2a66c:	8a00      	ldrh	r0, [r0, #16]
   2a66e:	bb68      	cbnz	r0, 2a6cc <bt_gatt_attr_get_handle+0x68>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2a670:	4918      	ldr	r1, [pc, #96]	; (2a6d4 <bt_gatt_attr_get_handle+0x70>)
   2a672:	f8df e064 	ldr.w	lr, [pc, #100]	; 2a6d8 <bt_gatt_attr_get_handle+0x74>
	uint16_t handle = 1;
   2a676:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2a678:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2a67c:	4571      	cmp	r1, lr
   2a67e:	d924      	bls.n	2a6ca <bt_gatt_attr_get_handle+0x66>
   2a680:	4916      	ldr	r1, [pc, #88]	; (2a6dc <bt_gatt_attr_get_handle+0x78>)
   2a682:	4817      	ldr	r0, [pc, #92]	; (2a6e0 <bt_gatt_attr_get_handle+0x7c>)
   2a684:	f240 625d 	movw	r2, #1629	; 0x65d
   2a688:	f00d fc9e 	bl	37fc8 <assert_print>
   2a68c:	4813      	ldr	r0, [pc, #76]	; (2a6dc <bt_gatt_attr_get_handle+0x78>)
   2a68e:	f240 615d 	movw	r1, #1629	; 0x65d
   2a692:	f00d fc92 	bl	37fba <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2a696:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   2a69a:	42bb      	cmp	r3, r7
   2a69c:	d304      	bcc.n	2a6a8 <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2a69e:	fb0c 7206 	mla	r2, ip, r6, r7
   2a6a2:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   2a6a4:	4293      	cmp	r3, r2
   2a6a6:	d90e      	bls.n	2a6c6 <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   2a6a8:	4434      	add	r4, r6
   2a6aa:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2a6ac:	3108      	adds	r1, #8
   2a6ae:	4614      	mov	r4, r2
   2a6b0:	e7e4      	b.n	2a67c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   2a6b2:	fb0c 7805 	mla	r8, ip, r5, r7
   2a6b6:	4543      	cmp	r3, r8
   2a6b8:	d00a      	beq.n	2a6d0 <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   2a6ba:	3501      	adds	r5, #1
   2a6bc:	1962      	adds	r2, r4, r5
   2a6be:	42b5      	cmp	r5, r6
   2a6c0:	b292      	uxth	r2, r2
   2a6c2:	d1f6      	bne.n	2a6b2 <bt_gatt_attr_get_handle+0x4e>
   2a6c4:	e7f2      	b.n	2a6ac <bt_gatt_attr_get_handle+0x48>
   2a6c6:	2500      	movs	r5, #0
   2a6c8:	e7f8      	b.n	2a6bc <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2a6ca:	d3e4      	bcc.n	2a696 <bt_gatt_attr_get_handle+0x32>
}
   2a6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a6d0:	4610      	mov	r0, r2
   2a6d2:	e7fb      	b.n	2a6cc <bt_gatt_attr_get_handle+0x68>
   2a6d4:	0003bc4c 	.word	0x0003bc4c
   2a6d8:	0003bc64 	.word	0x0003bc64
   2a6dc:	0003dddf 	.word	0x0003dddf
   2a6e0:	0003c7f8 	.word	0x0003c7f8

0002a6e4 <bt_gatt_foreach_attr_type>:
{
   2a6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6e8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   2a6ec:	9100      	str	r1, [sp, #0]
   2a6ee:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   2a6f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a6f4:	2d00      	cmp	r5, #0
   2a6f6:	bf08      	it	eq
   2a6f8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   2a6fa:	4b29      	ldr	r3, [pc, #164]	; (2a7a0 <bt_gatt_foreach_attr_type+0xbc>)
   2a6fc:	881b      	ldrh	r3, [r3, #0]
   2a6fe:	4283      	cmp	r3, r0
{
   2a700:	4607      	mov	r7, r0
   2a702:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   2a704:	d232      	bcs.n	2a76c <bt_gatt_foreach_attr_type+0x88>
}
   2a706:	b003      	add	sp, #12
   2a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2a70c:	5889      	ldr	r1, [r1, r2]
   2a70e:	9301      	str	r3, [sp, #4]
   2a710:	4640      	mov	r0, r8
   2a712:	f00e f8b3 	bl	3887c <bt_uuid_cmp>
   2a716:	9b01      	ldr	r3, [sp, #4]
   2a718:	b190      	cbz	r0, 2a740 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2a71a:	3401      	adds	r4, #1
   2a71c:	f10a 0a01 	add.w	sl, sl, #1
   2a720:	b2a4      	uxth	r4, r4
   2a722:	6873      	ldr	r3, [r6, #4]
   2a724:	4553      	cmp	r3, sl
   2a726:	d92c      	bls.n	2a782 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   2a728:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2a72a:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   2a72c:	429c      	cmp	r4, r3
   2a72e:	d8ea      	bhi.n	2a706 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   2a730:	42bc      	cmp	r4, r7
   2a732:	d3f2      	bcc.n	2a71a <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2a734:	fb0b f20a 	mul.w	r2, fp, sl
   2a738:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2a73a:	f1b8 0f00 	cmp.w	r8, #0
   2a73e:	d1e5      	bne.n	2a70c <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   2a740:	f1b9 0f00 	cmp.w	r9, #0
   2a744:	d10b      	bne.n	2a75e <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   2a746:	3d01      	subs	r5, #1
   2a748:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   2a74a:	4618      	mov	r0, r3
   2a74c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a74e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2a750:	4621      	mov	r1, r4
   2a752:	4798      	blx	r3
	if (!*num_matches) {
   2a754:	2d00      	cmp	r5, #0
   2a756:	d0d6      	beq.n	2a706 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2a758:	2800      	cmp	r0, #0
   2a75a:	d1de      	bne.n	2a71a <bt_gatt_foreach_attr_type+0x36>
   2a75c:	e7d3      	b.n	2a706 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   2a75e:	68da      	ldr	r2, [r3, #12]
   2a760:	4591      	cmp	r9, r2
   2a762:	d1da      	bne.n	2a71a <bt_gatt_foreach_attr_type+0x36>
   2a764:	e7ef      	b.n	2a746 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2a766:	f04f 0a00 	mov.w	sl, #0
   2a76a:	e7da      	b.n	2a722 <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2a76c:	4e0d      	ldr	r6, [pc, #52]	; (2a7a4 <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   2a76e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2a770:	f04f 0b14 	mov.w	fp, #20
   2a774:	e006      	b.n	2a784 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2a776:	d2c6      	bcs.n	2a706 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   2a778:	6873      	ldr	r3, [r6, #4]
   2a77a:	4423      	add	r3, r4
   2a77c:	42bb      	cmp	r3, r7
   2a77e:	d2f2      	bcs.n	2a766 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   2a780:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2a782:	3608      	adds	r6, #8
   2a784:	4b08      	ldr	r3, [pc, #32]	; (2a7a8 <bt_gatt_foreach_attr_type+0xc4>)
   2a786:	429e      	cmp	r6, r3
   2a788:	d9f5      	bls.n	2a776 <bt_gatt_foreach_attr_type+0x92>
   2a78a:	4908      	ldr	r1, [pc, #32]	; (2a7ac <bt_gatt_foreach_attr_type+0xc8>)
   2a78c:	4808      	ldr	r0, [pc, #32]	; (2a7b0 <bt_gatt_foreach_attr_type+0xcc>)
   2a78e:	f240 7221 	movw	r2, #1825	; 0x721
   2a792:	f00d fc19 	bl	37fc8 <assert_print>
   2a796:	4805      	ldr	r0, [pc, #20]	; (2a7ac <bt_gatt_foreach_attr_type+0xc8>)
   2a798:	f240 7121 	movw	r1, #1825	; 0x721
   2a79c:	f00d fc0d 	bl	37fba <assert_post_action>
   2a7a0:	20004c84 	.word	0x20004c84
   2a7a4:	0003bc4c 	.word	0x0003bc4c
   2a7a8:	0003bc64 	.word	0x0003bc64
   2a7ac:	0003dddf 	.word	0x0003dddf
   2a7b0:	0003c7f8 	.word	0x0003c7f8

0002a7b4 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   2a7b4:	b510      	push	{r4, lr}
   2a7b6:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   2a7b8:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2a7ba:	aa1c      	add	r2, sp, #112	; 0x70
   2a7bc:	4669      	mov	r1, sp
   2a7be:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   2a7c0:	e9cd 3300 	strd	r3, r3, [sp]
   2a7c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2a7c8:	f00d fecd 	bl	38566 <tc_cmac_setup>
   2a7cc:	b928      	cbnz	r0, 2a7da <db_hash_gen.constprop.0+0x26>
		LOG_ERR("Unable to setup AES CMAC");
   2a7ce:	4817      	ldr	r0, [pc, #92]	; (2a82c <db_hash_gen.constprop.0+0x78>)
   2a7d0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unable to calculate hash");
   2a7d2:	f00d fc07 	bl	37fe4 <z_log_minimal_printk>
}
   2a7d6:	b048      	add	sp, #288	; 0x120
   2a7d8:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   2a7da:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a7de:	2001      	movs	r0, #1
   2a7e0:	4a13      	ldr	r2, [pc, #76]	; (2a830 <db_hash_gen.constprop.0+0x7c>)
   2a7e2:	ab04      	add	r3, sp, #16
   2a7e4:	f00f facb 	bl	39d7e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2a7e8:	4812      	ldr	r0, [pc, #72]	; (2a834 <db_hash_gen.constprop.0+0x80>)
   2a7ea:	a904      	add	r1, sp, #16
   2a7ec:	f00d ff50 	bl	38690 <tc_cmac_final>
   2a7f0:	b910      	cbnz	r0, 2a7f8 <db_hash_gen.constprop.0+0x44>
		LOG_ERR("Unable to calculate hash");
   2a7f2:	4811      	ldr	r0, [pc, #68]	; (2a838 <db_hash_gen.constprop.0+0x84>)
   2a7f4:	2145      	movs	r1, #69	; 0x45
   2a7f6:	e7ec      	b.n	2a7d2 <db_hash_gen.constprop.0+0x1e>
   2a7f8:	4b0e      	ldr	r3, [pc, #56]	; (2a834 <db_hash_gen.constprop.0+0x80>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2a7fa:	2208      	movs	r2, #8
   2a7fc:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   2a800:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2a802:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   2a806:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   2a80a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2a80c:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   2a80e:	d1f7      	bne.n	2a800 <db_hash_gen.constprop.0+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a810:	f3bf 8f5b 	dmb	ish
   2a814:	4b09      	ldr	r3, [pc, #36]	; (2a83c <db_hash_gen.constprop.0+0x88>)
   2a816:	e853 1f00 	ldrex	r1, [r3]
   2a81a:	f041 0104 	orr.w	r1, r1, #4
   2a81e:	e843 1200 	strex	r2, r1, [r3]
   2a822:	2a00      	cmp	r2, #0
   2a824:	d1f7      	bne.n	2a816 <db_hash_gen.constprop.0+0x62>
   2a826:	f3bf 8f5b 	dmb	ish
   2a82a:	e7d4      	b.n	2a7d6 <db_hash_gen.constprop.0+0x22>
   2a82c:	0003de0f 	.word	0x0003de0f
   2a830:	000399ad 	.word	0x000399ad
   2a834:	20002090 	.word	0x20002090
   2a838:	0003de2d 	.word	0x0003de2d
   2a83c:	20002148 	.word	0x20002148

0002a840 <db_hash_read>:
{
   2a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2a842:	491d      	ldr	r1, [pc, #116]	; (2a8b8 <db_hash_read+0x78>)
{
   2a844:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2a848:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2a84a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   2a84e:	461f      	mov	r7, r3
   2a850:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2a852:	f008 fa71 	bl	32d38 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a856:	f3bf 8f5b 	dmb	ish
   2a85a:	4b18      	ldr	r3, [pc, #96]	; (2a8bc <db_hash_read+0x7c>)
   2a85c:	681b      	ldr	r3, [r3, #0]
   2a85e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2a862:	0759      	lsls	r1, r3, #29
   2a864:	d401      	bmi.n	2a86a <db_hash_read+0x2a>
		db_hash_gen(true);
   2a866:	f7ff ffa5 	bl	2a7b4 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   2a86a:	4620      	mov	r0, r4
   2a86c:	f7ff fcdc 	bl	2a228 <find_cf_cfg>
	if (cfg &&
   2a870:	4601      	mov	r1, r0
   2a872:	b170      	cbz	r0, 2a892 <db_hash_read+0x52>
   2a874:	7a03      	ldrb	r3, [r0, #8]
   2a876:	07da      	lsls	r2, r3, #31
   2a878:	d50b      	bpl.n	2a892 <db_hash_read+0x52>
   2a87a:	f3bf 8f5b 	dmb	ish
   2a87e:	68cb      	ldr	r3, [r1, #12]
   2a880:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   2a884:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2a886:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   2a88a:	d402      	bmi.n	2a892 <db_hash_read+0x52>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   2a88c:	2101      	movs	r1, #1
   2a88e:	f00f f8eb 	bl	39a68 <atomic_set_bit>
	if (offset > value_len) {
   2a892:	2e10      	cmp	r6, #16
   2a894:	d80c      	bhi.n	2a8b0 <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
   2a896:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   2a89a:	4909      	ldr	r1, [pc, #36]	; (2a8c0 <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
   2a89c:	42bc      	cmp	r4, r7
   2a89e:	bfa8      	it	ge
   2a8a0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2a8a2:	4622      	mov	r2, r4
   2a8a4:	4431      	add	r1, r6
   2a8a6:	4628      	mov	r0, r5
   2a8a8:	f00d ff87 	bl	387ba <memcpy>
}
   2a8ac:	4620      	mov	r0, r4
   2a8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a8b0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   2a8b4:	e7fa      	b.n	2a8ac <db_hash_read+0x6c>
   2a8b6:	bf00      	nop
   2a8b8:	200020d0 	.word	0x200020d0
   2a8bc:	20002148 	.word	0x20002148
   2a8c0:	20002090 	.word	0x20002090

0002a8c4 <bt_gatt_attr_next>:
{
   2a8c4:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   2a8c6:	2300      	movs	r3, #0
   2a8c8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   2a8ca:	f7ff fecb 	bl	2a664 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   2a8ce:	1c41      	adds	r1, r0, #1
   2a8d0:	b289      	uxth	r1, r1
   2a8d2:	4608      	mov	r0, r1
   2a8d4:	4a03      	ldr	r2, [pc, #12]	; (2a8e4 <bt_gatt_attr_next+0x20>)
   2a8d6:	ab01      	add	r3, sp, #4
   2a8d8:	f00f fa51 	bl	39d7e <bt_gatt_foreach_attr>
}
   2a8dc:	9801      	ldr	r0, [sp, #4]
   2a8de:	b003      	add	sp, #12
   2a8e0:	f85d fb04 	ldr.w	pc, [sp], #4
   2a8e4:	0003995d 	.word	0x0003995d

0002a8e8 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   2a8e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2a8ec:	460c      	mov	r4, r1
   2a8ee:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   2a8f0:	4605      	mov	r5, r0
   2a8f2:	b950      	cbnz	r0, 2a90a <bt_gatt_is_subscribed+0x22>
   2a8f4:	4958      	ldr	r1, [pc, #352]	; (2aa58 <bt_gatt_is_subscribed+0x170>)
   2a8f6:	4859      	ldr	r0, [pc, #356]	; (2aa5c <bt_gatt_is_subscribed+0x174>)
   2a8f8:	f640 424d 	movw	r2, #3149	; 0xc4d
   2a8fc:	f00d fb64 	bl	37fc8 <assert_print>
   2a900:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   2a904:	4854      	ldr	r0, [pc, #336]	; (2aa58 <bt_gatt_is_subscribed+0x170>)
   2a906:	f00d fb58 	bl	37fba <assert_post_action>
   2a90a:	b941      	cbnz	r1, 2a91e <bt_gatt_is_subscribed+0x36>
   2a90c:	4952      	ldr	r1, [pc, #328]	; (2aa58 <bt_gatt_is_subscribed+0x170>)
   2a90e:	4853      	ldr	r0, [pc, #332]	; (2aa5c <bt_gatt_is_subscribed+0x174>)
   2a910:	f640 424e 	movw	r2, #3150	; 0xc4e
   2a914:	f00d fb58 	bl	37fc8 <assert_print>
   2a918:	f640 414e 	movw	r1, #3150	; 0xc4e
   2a91c:	e7f2      	b.n	2a904 <bt_gatt_is_subscribed+0x1c>

	if (conn->state != BT_CONN_CONNECTED) {
   2a91e:	7a83      	ldrb	r3, [r0, #10]
   2a920:	2b07      	cmp	r3, #7
   2a922:	d110      	bne.n	2a946 <bt_gatt_is_subscribed+0x5e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2a924:	2300      	movs	r3, #0
   2a926:	f88d 300c 	strb.w	r3, [sp, #12]
   2a92a:	6820      	ldr	r0, [r4, #0]
   2a92c:	f642 0303 	movw	r3, #10243	; 0x2803
   2a930:	a903      	add	r1, sp, #12
   2a932:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a936:	f00d ffa1 	bl	3887c <bt_uuid_cmp>
   2a93a:	b9b0      	cbnz	r0, 2a96a <bt_gatt_is_subscribed+0x82>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   2a93c:	68e3      	ldr	r3, [r4, #12]
   2a93e:	799b      	ldrb	r3, [r3, #6]
   2a940:	f013 0f30 	tst.w	r3, #48	; 0x30
   2a944:	d103      	bne.n	2a94e <bt_gatt_is_subscribed+0x66>
		return false;
   2a946:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   2a948:	b004      	add	sp, #16
   2a94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2a94e:	4620      	mov	r0, r4
   2a950:	f7ff ffb8 	bl	2a8c4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   2a954:	4604      	mov	r4, r0
   2a956:	b940      	cbnz	r0, 2a96a <bt_gatt_is_subscribed+0x82>
   2a958:	493f      	ldr	r1, [pc, #252]	; (2aa58 <bt_gatt_is_subscribed+0x170>)
   2a95a:	4840      	ldr	r0, [pc, #256]	; (2aa5c <bt_gatt_is_subscribed+0x174>)
   2a95c:	f640 425f 	movw	r2, #3167	; 0xc5f
   2a960:	f00d fb32 	bl	37fc8 <assert_print>
   2a964:	f640 415f 	movw	r1, #3167	; 0xc5f
   2a968:	e7cc      	b.n	2a904 <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2a96a:	2300      	movs	r3, #0
   2a96c:	6820      	ldr	r0, [r4, #0]
   2a96e:	f88d 300c 	strb.w	r3, [sp, #12]
   2a972:	a903      	add	r1, sp, #12
   2a974:	f642 1302 	movw	r3, #10498	; 0x2902
   2a978:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a97c:	f00d ff7e 	bl	3887c <bt_uuid_cmp>
   2a980:	b168      	cbz	r0, 2a99e <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   2a982:	4620      	mov	r0, r4
   2a984:	f7ff ff9e 	bl	2a8c4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   2a988:	4604      	mov	r4, r0
   2a98a:	b940      	cbnz	r0, 2a99e <bt_gatt_is_subscribed+0xb6>
   2a98c:	4932      	ldr	r1, [pc, #200]	; (2aa58 <bt_gatt_is_subscribed+0x170>)
   2a98e:	4833      	ldr	r0, [pc, #204]	; (2aa5c <bt_gatt_is_subscribed+0x174>)
   2a990:	f640 4265 	movw	r2, #3173	; 0xc65
   2a994:	f00d fb18 	bl	37fc8 <assert_print>
   2a998:	f640 4165 	movw	r1, #3173	; 0xc65
   2a99c:	e7b2      	b.n	2a904 <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2a99e:	2700      	movs	r7, #0
   2a9a0:	f642 1802 	movw	r8, #10498	; 0x2902
   2a9a4:	6820      	ldr	r0, [r4, #0]
   2a9a6:	f88d 7000 	strb.w	r7, [sp]
   2a9aa:	4669      	mov	r1, sp
   2a9ac:	f8ad 8002 	strh.w	r8, [sp, #2]
   2a9b0:	f00d ff64 	bl	3887c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2a9b4:	bb20      	cbnz	r0, 2aa00 <bt_gatt_is_subscribed+0x118>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2a9b6:	2300      	movs	r3, #0
   2a9b8:	6820      	ldr	r0, [r4, #0]
   2a9ba:	f88d 300c 	strb.w	r3, [sp, #12]
   2a9be:	a903      	add	r1, sp, #12
   2a9c0:	f642 1302 	movw	r3, #10498	; 0x2902
   2a9c4:	f8ad 300e 	strh.w	r3, [sp, #14]
   2a9c8:	f00d ff58 	bl	3887c <bt_uuid_cmp>
   2a9cc:	2800      	cmp	r0, #0
   2a9ce:	d1ba      	bne.n	2a946 <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   2a9d0:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2a9d2:	4622      	mov	r2, r4
   2a9d4:	4628      	mov	r0, r5
   2a9d6:	f812 1b01 	ldrb.w	r1, [r2], #1
   2a9da:	f00e fa51 	bl	38e80 <bt_conn_is_peer_addr_le>
   2a9de:	b110      	cbz	r0, 2a9e6 <bt_gatt_is_subscribed+0xfe>
   2a9e0:	8923      	ldrh	r3, [r4, #8]
   2a9e2:	421e      	tst	r6, r3
   2a9e4:	d10a      	bne.n	2a9fc <bt_gatt_is_subscribed+0x114>
   2a9e6:	7aa1      	ldrb	r1, [r4, #10]
   2a9e8:	f104 020b 	add.w	r2, r4, #11
   2a9ec:	4628      	mov	r0, r5
   2a9ee:	f00e fa47 	bl	38e80 <bt_conn_is_peer_addr_le>
   2a9f2:	2800      	cmp	r0, #0
   2a9f4:	d0a7      	beq.n	2a946 <bt_gatt_is_subscribed+0x5e>
   2a9f6:	8a63      	ldrh	r3, [r4, #18]
   2a9f8:	421e      	tst	r6, r3
   2a9fa:	d0a4      	beq.n	2a946 <bt_gatt_is_subscribed+0x5e>
			return true;
   2a9fc:	2001      	movs	r0, #1
   2a9fe:	e7a3      	b.n	2a948 <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2aa00:	6820      	ldr	r0, [r4, #0]
   2aa02:	f88d 7004 	strb.w	r7, [sp, #4]
   2aa06:	f642 0303 	movw	r3, #10243	; 0x2803
   2aa0a:	a901      	add	r1, sp, #4
   2aa0c:	f8ad 3006 	strh.w	r3, [sp, #6]
   2aa10:	f00d ff34 	bl	3887c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2aa14:	2800      	cmp	r0, #0
   2aa16:	d0ce      	beq.n	2a9b6 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2aa18:	6820      	ldr	r0, [r4, #0]
   2aa1a:	f88d 7008 	strb.w	r7, [sp, #8]
   2aa1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2aa22:	a902      	add	r1, sp, #8
   2aa24:	f8ad 300a 	strh.w	r3, [sp, #10]
   2aa28:	f00d ff28 	bl	3887c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2aa2c:	2800      	cmp	r0, #0
   2aa2e:	d0c2      	beq.n	2a9b6 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2aa30:	6820      	ldr	r0, [r4, #0]
   2aa32:	f88d 700c 	strb.w	r7, [sp, #12]
   2aa36:	f642 0301 	movw	r3, #10241	; 0x2801
   2aa3a:	a903      	add	r1, sp, #12
   2aa3c:	f8ad 300e 	strh.w	r3, [sp, #14]
   2aa40:	f00d ff1c 	bl	3887c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2aa44:	2800      	cmp	r0, #0
   2aa46:	d0b6      	beq.n	2a9b6 <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   2aa48:	4620      	mov	r0, r4
   2aa4a:	f7ff ff3b 	bl	2a8c4 <bt_gatt_attr_next>
		if (!attr) {
   2aa4e:	4604      	mov	r4, r0
   2aa50:	2800      	cmp	r0, #0
   2aa52:	d1a7      	bne.n	2a9a4 <bt_gatt_is_subscribed+0xbc>
   2aa54:	e777      	b.n	2a946 <bt_gatt_is_subscribed+0x5e>
   2aa56:	bf00      	nop
   2aa58:	0003dddf 	.word	0x0003dddf
   2aa5c:	0003c7f8 	.word	0x0003c7f8

0002aa60 <gatt_indicate>:
{
   2aa60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2aa64:	4615      	mov	r5, r2
   2aa66:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2aa68:	2294      	movs	r2, #148	; 0x94
   2aa6a:	6869      	ldr	r1, [r5, #4]
{
   2aa6c:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2aa6e:	f00f f993 	bl	39d98 <bt_gatt_check_perm>
   2aa72:	4680      	mov	r8, r0
   2aa74:	2800      	cmp	r0, #0
   2aa76:	d144      	bne.n	2ab02 <gatt_indicate+0xa2>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   2aa78:	6869      	ldr	r1, [r5, #4]
   2aa7a:	2202      	movs	r2, #2
   2aa7c:	4630      	mov	r0, r6
   2aa7e:	f7ff ff33 	bl	2a8e8 <bt_gatt_is_subscribed>
   2aa82:	2800      	cmp	r0, #0
   2aa84:	d040      	beq.n	2ab08 <gatt_indicate+0xa8>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2aa86:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2aa8a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   2aa8c:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2aa8e:	f7ff fa5f 	bl	29f50 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   2aa92:	3702      	adds	r7, #2
	if (!req) {
   2aa94:	4604      	mov	r4, r0
   2aa96:	b160      	cbz	r0, 2aab2 <gatt_indicate+0x52>
	req->func = func;
   2aa98:	4b1d      	ldr	r3, [pc, #116]	; (2ab10 <gatt_indicate+0xb0>)
   2aa9a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   2aa9c:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   2aa9e:	463a      	mov	r2, r7
   2aaa0:	211d      	movs	r1, #29
   2aaa2:	4630      	mov	r0, r6
   2aaa4:	f00e febe 	bl	39824 <bt_att_create_pdu>
	if (!buf) {
   2aaa8:	4607      	mov	r7, r0
   2aaaa:	b938      	cbnz	r0, 2aabc <gatt_indicate+0x5c>
		bt_att_req_free(req);
   2aaac:	4620      	mov	r0, r4
   2aaae:	f7ff fa71 	bl	29f94 <bt_att_req_free>
		return -ENOMEM;
   2aab2:	f06f 050b 	mvn.w	r5, #11
}
   2aab6:	4628      	mov	r0, r5
   2aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   2aabc:	2301      	movs	r3, #1
   2aabe:	4642      	mov	r2, r8
   2aac0:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   2aac2:	f107 0a0c 	add.w	sl, r7, #12
   2aac6:	f00e ff42 	bl	3994e <bt_att_set_tx_meta_data>
   2aaca:	2102      	movs	r1, #2
   2aacc:	4650      	mov	r0, sl
   2aace:	f001 fcad 	bl	2c42c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2aad2:	4680      	mov	r8, r0
   2aad4:	4650      	mov	r0, sl
   2aad6:	f828 9b02 	strh.w	r9, [r8], #2
   2aada:	8aa9      	ldrh	r1, [r5, #20]
   2aadc:	f001 fca6 	bl	2c42c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   2aae0:	8aaa      	ldrh	r2, [r5, #20]
   2aae2:	6929      	ldr	r1, [r5, #16]
   2aae4:	4640      	mov	r0, r8
   2aae6:	f00d fe68 	bl	387ba <memcpy>
	req->buf = buf;
   2aaea:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   2aaec:	4621      	mov	r1, r4
   2aaee:	4630      	mov	r0, r6
   2aaf0:	f7ff fb6a 	bl	2a1c8 <bt_att_req_send>
	if (err) {
   2aaf4:	4605      	mov	r5, r0
   2aaf6:	2800      	cmp	r0, #0
   2aaf8:	d0dd      	beq.n	2aab6 <gatt_indicate+0x56>
		bt_att_req_free(req);
   2aafa:	4620      	mov	r0, r4
   2aafc:	f7ff fa4a 	bl	29f94 <bt_att_req_free>
   2ab00:	e7d9      	b.n	2aab6 <gatt_indicate+0x56>
		return -EPERM;
   2ab02:	f04f 35ff 	mov.w	r5, #4294967295
   2ab06:	e7d6      	b.n	2aab6 <gatt_indicate+0x56>
			return -EINVAL;
   2ab08:	f06f 0515 	mvn.w	r5, #21
   2ab0c:	e7d3      	b.n	2aab6 <gatt_indicate+0x56>
   2ab0e:	bf00      	nop
   2ab10:	0003997f 	.word	0x0003997f

0002ab14 <bt_gatt_indicate>:
{
   2ab14:	b530      	push	{r4, r5, lr}
   2ab16:	4605      	mov	r5, r0
   2ab18:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   2ab1a:	460c      	mov	r4, r1
   2ab1c:	b951      	cbnz	r1, 2ab34 <bt_gatt_indicate+0x20>
   2ab1e:	4944      	ldr	r1, [pc, #272]	; (2ac30 <bt_gatt_indicate+0x11c>)
   2ab20:	4844      	ldr	r0, [pc, #272]	; (2ac34 <bt_gatt_indicate+0x120>)
   2ab22:	f640 320d 	movw	r2, #2829	; 0xb0d
   2ab26:	f00d fa4f 	bl	37fc8 <assert_print>
   2ab2a:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   2ab2e:	4840      	ldr	r0, [pc, #256]	; (2ac30 <bt_gatt_indicate+0x11c>)
   2ab30:	f00d fa43 	bl	37fba <assert_post_action>
   2ab34:	684b      	ldr	r3, [r1, #4]
   2ab36:	b953      	cbnz	r3, 2ab4e <bt_gatt_indicate+0x3a>
   2ab38:	680b      	ldr	r3, [r1, #0]
   2ab3a:	b943      	cbnz	r3, 2ab4e <bt_gatt_indicate+0x3a>
   2ab3c:	493c      	ldr	r1, [pc, #240]	; (2ac30 <bt_gatt_indicate+0x11c>)
   2ab3e:	483d      	ldr	r0, [pc, #244]	; (2ac34 <bt_gatt_indicate+0x120>)
   2ab40:	f640 320e 	movw	r2, #2830	; 0xb0e
   2ab44:	f00d fa40 	bl	37fc8 <assert_print>
   2ab48:	f640 310e 	movw	r1, #2830	; 0xb0e
   2ab4c:	e7ef      	b.n	2ab2e <bt_gatt_indicate+0x1a>
   2ab4e:	4b3a      	ldr	r3, [pc, #232]	; (2ac38 <bt_gatt_indicate+0x124>)
   2ab50:	f3bf 8f5b 	dmb	ish
   2ab54:	681b      	ldr	r3, [r3, #0]
   2ab56:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ab5a:	075a      	lsls	r2, r3, #29
   2ab5c:	d561      	bpl.n	2ac22 <bt_gatt_indicate+0x10e>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2ab5e:	b115      	cbz	r5, 2ab66 <bt_gatt_indicate+0x52>
   2ab60:	7aab      	ldrb	r3, [r5, #10]
   2ab62:	2b07      	cmp	r3, #7
   2ab64:	d160      	bne.n	2ac28 <bt_gatt_indicate+0x114>
	data.attr = params->attr;
   2ab66:	6860      	ldr	r0, [r4, #4]
   2ab68:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2ab6a:	f7ff fd7b 	bl	2a664 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2ab6e:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2ab70:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2ab74:	b33a      	cbz	r2, 2abc6 <bt_gatt_indicate+0xb2>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ab76:	a905      	add	r1, sp, #20
   2ab78:	9102      	str	r1, [sp, #8]
   2ab7a:	4930      	ldr	r1, [pc, #192]	; (2ac3c <bt_gatt_indicate+0x128>)
   2ab7c:	9101      	str	r1, [sp, #4]
   2ab7e:	2101      	movs	r1, #1
	found->attr = NULL;
   2ab80:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ab82:	9100      	str	r1, [sp, #0]
   2ab84:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2ab88:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ab8a:	f7ff fdab 	bl	2a6e4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2ab8e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2ab90:	b91b      	cbnz	r3, 2ab9a <bt_gatt_indicate+0x86>
			return -ENOENT;
   2ab92:	f06f 0001 	mvn.w	r0, #1
}
   2ab96:	b00b      	add	sp, #44	; 0x2c
   2ab98:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2ab9a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2ab9c:	9b05      	ldr	r3, [sp, #20]
   2ab9e:	6818      	ldr	r0, [r3, #0]
   2aba0:	2300      	movs	r3, #0
   2aba2:	f88d 3010 	strb.w	r3, [sp, #16]
   2aba6:	a904      	add	r1, sp, #16
   2aba8:	f642 0303 	movw	r3, #10243	; 0x2803
   2abac:	f8ad 3012 	strh.w	r3, [sp, #18]
   2abb0:	f00d fe64 	bl	3887c <bt_uuid_cmp>
   2abb4:	b970      	cbnz	r0, 2abd4 <bt_gatt_indicate+0xc0>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2abb6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   2abb8:	68c3      	ldr	r3, [r0, #12]
   2abba:	799b      	ldrb	r3, [r3, #6]
   2abbc:	069b      	lsls	r3, r3, #26
   2abbe:	d405      	bmi.n	2abcc <bt_gatt_indicate+0xb8>
			return -EINVAL;
   2abc0:	f06f 0015 	mvn.w	r0, #21
   2abc4:	e7e7      	b.n	2ab96 <bt_gatt_indicate+0x82>
		if (!data.handle) {
   2abc6:	2800      	cmp	r0, #0
   2abc8:	d1e8      	bne.n	2ab9c <bt_gatt_indicate+0x88>
   2abca:	e7e2      	b.n	2ab92 <bt_gatt_indicate+0x7e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2abcc:	f00f f889 	bl	39ce2 <bt_gatt_attr_value_handle>
   2abd0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   2abd4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2abd8:	b13d      	cbz	r5, 2abea <bt_gatt_indicate+0xd6>
		params->_ref = 1;
   2abda:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   2abdc:	4601      	mov	r1, r0
		params->_ref = 1;
   2abde:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   2abe0:	4622      	mov	r2, r4
   2abe2:	4628      	mov	r0, r5
   2abe4:	f7ff ff3c 	bl	2aa60 <gatt_indicate>
   2abe8:	e7d5      	b.n	2ab96 <bt_gatt_indicate+0x82>
	data.err = -ENOTCONN;
   2abea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2abee:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   2abf0:	2302      	movs	r3, #2
   2abf2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2abf6:	f642 1302 	movw	r3, #10498	; 0x2902
   2abfa:	f8ad 3012 	strh.w	r3, [sp, #18]
   2abfe:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   2ac00:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ac02:	9302      	str	r3, [sp, #8]
   2ac04:	4b0e      	ldr	r3, [pc, #56]	; (2ac40 <bt_gatt_indicate+0x12c>)
   2ac06:	9301      	str	r3, [sp, #4]
   2ac08:	2301      	movs	r3, #1
   2ac0a:	9300      	str	r3, [sp, #0]
   2ac0c:	aa04      	add	r2, sp, #16
   2ac0e:	462b      	mov	r3, r5
   2ac10:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   2ac14:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ac16:	f88d 5010 	strb.w	r5, [sp, #16]
   2ac1a:	f7ff fd63 	bl	2a6e4 <bt_gatt_foreach_attr_type>
	return data.err;
   2ac1e:	9807      	ldr	r0, [sp, #28]
   2ac20:	e7b9      	b.n	2ab96 <bt_gatt_indicate+0x82>
		return -EAGAIN;
   2ac22:	f06f 000a 	mvn.w	r0, #10
   2ac26:	e7b6      	b.n	2ab96 <bt_gatt_indicate+0x82>
		return -ENOTCONN;
   2ac28:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ac2c:	e7b3      	b.n	2ab96 <bt_gatt_indicate+0x82>
   2ac2e:	bf00      	nop
   2ac30:	0003dddf 	.word	0x0003dddf
   2ac34:	0003c7f8 	.word	0x0003c7f8
   2ac38:	200004c8 	.word	0x200004c8
   2ac3c:	000399a5 	.word	0x000399a5
   2ac40:	0002aedd 	.word	0x0002aedd

0002ac44 <sc_process>:
{
   2ac44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ac46:	f3bf 8f5b 	dmb	ish
   2ac4a:	6b02      	ldr	r2, [r0, #48]	; 0x30
   2ac4c:	f3bf 8f5b 	dmb	ish
   2ac50:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   2ac52:	f1a0 0120 	sub.w	r1, r0, #32
   2ac56:	f100 0430 	add.w	r4, r0, #48	; 0x30
   2ac5a:	f3c2 0040 	ubfx	r0, r2, #1, #1
   2ac5e:	0792      	lsls	r2, r2, #30
   2ac60:	d50a      	bpl.n	2ac78 <sc_process+0x34>
   2ac62:	4919      	ldr	r1, [pc, #100]	; (2acc8 <sc_process+0x84>)
   2ac64:	4819      	ldr	r0, [pc, #100]	; (2accc <sc_process+0x88>)
   2ac66:	f240 429a 	movw	r2, #1178	; 0x49a
   2ac6a:	f00d f9ad 	bl	37fc8 <assert_print>
   2ac6e:	4816      	ldr	r0, [pc, #88]	; (2acc8 <sc_process+0x84>)
   2ac70:	f240 419a 	movw	r1, #1178	; 0x49a
   2ac74:	f00d f9a1 	bl	37fba <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2ac78:	f853 2c08 	ldr.w	r2, [r3, #-8]
   2ac7c:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ac7e:	f3bf 8f5b 	dmb	ish
   2ac82:	e854 2f00 	ldrex	r2, [r4]
   2ac86:	f022 0201 	bic.w	r2, r2, #1
   2ac8a:	e844 2500 	strex	r5, r2, [r4]
   2ac8e:	2d00      	cmp	r5, #0
   2ac90:	d1f7      	bne.n	2ac82 <sc_process+0x3e>
   2ac92:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   2ac96:	4a0e      	ldr	r2, [pc, #56]	; (2acd0 <sc_process+0x8c>)
   2ac98:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   2ac9c:	4a0d      	ldr	r2, [pc, #52]	; (2acd4 <sc_process+0x90>)
   2ac9e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   2aca2:	aa01      	add	r2, sp, #4
   2aca4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   2aca8:	2204      	movs	r2, #4
	sc->start = 0U;
   2acaa:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   2acae:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   2acb2:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   2acb6:	f7ff ff2d 	bl	2ab14 <bt_gatt_indicate>
   2acba:	b918      	cbnz	r0, 2acc4 <sc_process+0x80>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   2acbc:	2101      	movs	r1, #1
   2acbe:	4620      	mov	r0, r4
   2acc0:	f00e fed2 	bl	39a68 <atomic_set_bit>
}
   2acc4:	b003      	add	sp, #12
   2acc6:	bd30      	pop	{r4, r5, pc}
   2acc8:	0003dddf 	.word	0x0003dddf
   2accc:	0003c7f8 	.word	0x0003c7f8
   2acd0:	0003c104 	.word	0x0003c104
   2acd4:	0002a535 	.word	0x0002a535

0002acd8 <update_ccc>:
{
   2acd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2acda:	4b30      	ldr	r3, [pc, #192]	; (2ad9c <update_ccc+0xc4>)
	struct bt_conn *conn = data->conn;
   2acdc:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   2acde:	6882      	ldr	r2, [r0, #8]
   2ace0:	429a      	cmp	r2, r3
{
   2ace2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ace4:	d156      	bne.n	2ad94 <update_ccc+0xbc>
	ccc = attr->user_data;
   2ace6:	68c5      	ldr	r5, [r0, #12]
		if (!cfg->value ||
   2ace8:	892b      	ldrh	r3, [r5, #8]
   2acea:	b173      	cbz	r3, 2ad0a <update_ccc+0x32>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2acec:	462a      	mov	r2, r5
   2acee:	4620      	mov	r0, r4
   2acf0:	f812 1b01 	ldrb.w	r1, [r2], #1
   2acf4:	f00e f8c4 	bl	38e80 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2acf8:	b138      	cbz	r0, 2ad0a <update_ccc+0x32>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2acfa:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2acfe:	4631      	mov	r1, r6
   2ad00:	4620      	mov	r0, r4
   2ad02:	f00f f849 	bl	39d98 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2ad06:	2803      	cmp	r0, #3
   2ad08:	d112      	bne.n	2ad30 <update_ccc+0x58>
		if (!cfg->value ||
   2ad0a:	8a6b      	ldrh	r3, [r5, #18]
   2ad0c:	2b00      	cmp	r3, #0
   2ad0e:	d041      	beq.n	2ad94 <update_ccc+0xbc>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2ad10:	7aa9      	ldrb	r1, [r5, #10]
   2ad12:	f105 020b 	add.w	r2, r5, #11
   2ad16:	4620      	mov	r0, r4
   2ad18:	f00e f8b2 	bl	38e80 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2ad1c:	2800      	cmp	r0, #0
   2ad1e:	d039      	beq.n	2ad94 <update_ccc+0xbc>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2ad20:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2ad24:	4631      	mov	r1, r6
   2ad26:	4620      	mov	r0, r4
   2ad28:	f00f f836 	bl	39d98 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2ad2c:	2803      	cmp	r0, #3
   2ad2e:	d031      	beq.n	2ad94 <update_ccc+0xbc>
		gatt_ccc_changed(attr, ccc);
   2ad30:	4629      	mov	r1, r5
   2ad32:	4630      	mov	r0, r6
   2ad34:	f00e fe15 	bl	39962 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2ad38:	4b19      	ldr	r3, [pc, #100]	; (2ada0 <update_ccc+0xc8>)
   2ad3a:	429d      	cmp	r5, r3
   2ad3c:	d12a      	bne.n	2ad94 <update_ccc+0xbc>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2ad3e:	7a20      	ldrb	r0, [r4, #8]
   2ad40:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2ad44:	f7ff fa9e 	bl	2a284 <find_sc_cfg>
	if (!cfg) {
   2ad48:	b320      	cbz	r0, 2ad94 <update_ccc+0xbc>
	if (!(cfg->data.start || cfg->data.end)) {
   2ad4a:	8902      	ldrh	r2, [r0, #8]
   2ad4c:	8943      	ldrh	r3, [r0, #10]
   2ad4e:	ea52 0103 	orrs.w	r1, r2, r3
   2ad52:	d01f      	beq.n	2ad94 <update_ccc+0xbc>
	index = bt_conn_index(conn);
   2ad54:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   2ad56:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   2ad5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   2ad5e:	f7fd fe3d 	bl	289dc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2ad62:	4910      	ldr	r1, [pc, #64]	; (2ada4 <update_ccc+0xcc>)
   2ad64:	4a10      	ldr	r2, [pc, #64]	; (2ada8 <update_ccc+0xd0>)
   2ad66:	2318      	movs	r3, #24
   2ad68:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2ad6c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2ad6e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   2ad70:	4a0e      	ldr	r2, [pc, #56]	; (2adac <update_ccc+0xd4>)
   2ad72:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   2ad74:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2ad76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   2ad7a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   2ad7c:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2ad7e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   2ad82:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2ad84:	4620      	mov	r0, r4
   2ad86:	f7ff fec5 	bl	2ab14 <bt_gatt_indicate>
   2ad8a:	b118      	cbz	r0, 2ad94 <update_ccc+0xbc>
		LOG_ERR("SC restore indication failed");
   2ad8c:	4808      	ldr	r0, [pc, #32]	; (2adb0 <update_ccc+0xd8>)
   2ad8e:	2145      	movs	r1, #69	; 0x45
   2ad90:	f00d f928 	bl	37fe4 <z_log_minimal_printk>
}
   2ad94:	2001      	movs	r0, #1
   2ad96:	b002      	add	sp, #8
   2ad98:	bd70      	pop	{r4, r5, r6, pc}
   2ad9a:	bf00      	nop
   2ad9c:	0002a455 	.word	0x0002a455
   2ada0:	2000070c 	.word	0x2000070c
   2ada4:	20003abc 	.word	0x20003abc
   2ada8:	0003c104 	.word	0x0003c104
   2adac:	00039b0d 	.word	0x00039b0d
   2adb0:	0003de4b 	.word	0x0003de4b

0002adb4 <bt_gatt_notify_cb>:
{
   2adb4:	b530      	push	{r4, r5, lr}
   2adb6:	4605      	mov	r5, r0
   2adb8:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   2adba:	460c      	mov	r4, r1
   2adbc:	b951      	cbnz	r1, 2add4 <bt_gatt_notify_cb+0x20>
   2adbe:	4942      	ldr	r1, [pc, #264]	; (2aec8 <bt_gatt_notify_cb+0x114>)
   2adc0:	4842      	ldr	r0, [pc, #264]	; (2aecc <bt_gatt_notify_cb+0x118>)
   2adc2:	f640 222d 	movw	r2, #2605	; 0xa2d
   2adc6:	f00d f8ff 	bl	37fc8 <assert_print>
   2adca:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   2adce:	483e      	ldr	r0, [pc, #248]	; (2aec8 <bt_gatt_notify_cb+0x114>)
   2add0:	f00d f8f3 	bl	37fba <assert_post_action>
   2add4:	684b      	ldr	r3, [r1, #4]
   2add6:	b953      	cbnz	r3, 2adee <bt_gatt_notify_cb+0x3a>
   2add8:	680b      	ldr	r3, [r1, #0]
   2adda:	b943      	cbnz	r3, 2adee <bt_gatt_notify_cb+0x3a>
   2addc:	493a      	ldr	r1, [pc, #232]	; (2aec8 <bt_gatt_notify_cb+0x114>)
   2adde:	483b      	ldr	r0, [pc, #236]	; (2aecc <bt_gatt_notify_cb+0x118>)
   2ade0:	f640 222e 	movw	r2, #2606	; 0xa2e
   2ade4:	f00d f8f0 	bl	37fc8 <assert_print>
   2ade8:	f640 212e 	movw	r1, #2606	; 0xa2e
   2adec:	e7ef      	b.n	2adce <bt_gatt_notify_cb+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2adee:	4b38      	ldr	r3, [pc, #224]	; (2aed0 <bt_gatt_notify_cb+0x11c>)
   2adf0:	f3bf 8f5b 	dmb	ish
   2adf4:	681b      	ldr	r3, [r3, #0]
   2adf6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2adfa:	075a      	lsls	r2, r3, #29
   2adfc:	d55d      	bpl.n	2aeba <bt_gatt_notify_cb+0x106>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2adfe:	b115      	cbz	r5, 2ae06 <bt_gatt_notify_cb+0x52>
   2ae00:	7aab      	ldrb	r3, [r5, #10]
   2ae02:	2b07      	cmp	r3, #7
   2ae04:	d15c      	bne.n	2aec0 <bt_gatt_notify_cb+0x10c>
	data.attr = params->attr;
   2ae06:	6860      	ldr	r0, [r4, #4]
   2ae08:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2ae0a:	f7ff fc2b 	bl	2a664 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2ae0e:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2ae10:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2ae14:	b33a      	cbz	r2, 2ae66 <bt_gatt_notify_cb+0xb2>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ae16:	a905      	add	r1, sp, #20
   2ae18:	9102      	str	r1, [sp, #8]
   2ae1a:	492e      	ldr	r1, [pc, #184]	; (2aed4 <bt_gatt_notify_cb+0x120>)
   2ae1c:	9101      	str	r1, [sp, #4]
   2ae1e:	2101      	movs	r1, #1
	found->attr = NULL;
   2ae20:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ae22:	9100      	str	r1, [sp, #0]
   2ae24:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2ae28:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ae2a:	f7ff fc5b 	bl	2a6e4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2ae2e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2ae30:	b91b      	cbnz	r3, 2ae3a <bt_gatt_notify_cb+0x86>
			return -ENOENT;
   2ae32:	f06f 0001 	mvn.w	r0, #1
}
   2ae36:	b00b      	add	sp, #44	; 0x2c
   2ae38:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2ae3a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2ae3c:	9b05      	ldr	r3, [sp, #20]
   2ae3e:	6818      	ldr	r0, [r3, #0]
   2ae40:	2300      	movs	r3, #0
   2ae42:	f88d 3010 	strb.w	r3, [sp, #16]
   2ae46:	a904      	add	r1, sp, #16
   2ae48:	f642 0303 	movw	r3, #10243	; 0x2803
   2ae4c:	f8ad 3012 	strh.w	r3, [sp, #18]
   2ae50:	f00d fd14 	bl	3887c <bt_uuid_cmp>
   2ae54:	b970      	cbnz	r0, 2ae74 <bt_gatt_notify_cb+0xc0>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2ae56:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2ae58:	68c3      	ldr	r3, [r0, #12]
   2ae5a:	799b      	ldrb	r3, [r3, #6]
   2ae5c:	06db      	lsls	r3, r3, #27
   2ae5e:	d405      	bmi.n	2ae6c <bt_gatt_notify_cb+0xb8>
			return -EINVAL;
   2ae60:	f06f 0015 	mvn.w	r0, #21
   2ae64:	e7e7      	b.n	2ae36 <bt_gatt_notify_cb+0x82>
		if (!data.handle) {
   2ae66:	2800      	cmp	r0, #0
   2ae68:	d1e8      	bne.n	2ae3c <bt_gatt_notify_cb+0x88>
   2ae6a:	e7e2      	b.n	2ae32 <bt_gatt_notify_cb+0x7e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2ae6c:	f00e ff39 	bl	39ce2 <bt_gatt_attr_value_handle>
   2ae70:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   2ae74:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2ae78:	b12d      	cbz	r5, 2ae86 <bt_gatt_notify_cb+0xd2>
		return gatt_notify(conn, data.handle, params);
   2ae7a:	4601      	mov	r1, r0
   2ae7c:	4622      	mov	r2, r4
   2ae7e:	4628      	mov	r0, r5
   2ae80:	f00e ffb3 	bl	39dea <gatt_notify>
   2ae84:	e7d7      	b.n	2ae36 <bt_gatt_notify_cb+0x82>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ae86:	f642 1202 	movw	r2, #10498	; 0x2902
   2ae8a:	f8ad 2012 	strh.w	r2, [sp, #18]
   2ae8e:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   2ae90:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ae94:	9202      	str	r2, [sp, #8]
   2ae96:	4a10      	ldr	r2, [pc, #64]	; (2aed8 <bt_gatt_notify_cb+0x124>)
	data.err = -ENOTCONN;
   2ae98:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2ae9a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ae9c:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   2aea0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2aea4:	aa04      	add	r2, sp, #16
   2aea6:	462b      	mov	r3, r5
   2aea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   2aeac:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2aeae:	f88d 5010 	strb.w	r5, [sp, #16]
   2aeb2:	f7ff fc17 	bl	2a6e4 <bt_gatt_foreach_attr_type>
	return data.err;
   2aeb6:	9807      	ldr	r0, [sp, #28]
   2aeb8:	e7bd      	b.n	2ae36 <bt_gatt_notify_cb+0x82>
		return -EAGAIN;
   2aeba:	f06f 000a 	mvn.w	r0, #10
   2aebe:	e7ba      	b.n	2ae36 <bt_gatt_notify_cb+0x82>
		return -ENOTCONN;
   2aec0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2aec4:	e7b7      	b.n	2ae36 <bt_gatt_notify_cb+0x82>
   2aec6:	bf00      	nop
   2aec8:	0003dddf 	.word	0x0003dddf
   2aecc:	0003c7f8 	.word	0x0003c7f8
   2aed0:	200004c8 	.word	0x200004c8
   2aed4:	000399a5 	.word	0x000399a5
   2aed8:	0002aedd 	.word	0x0002aedd

0002aedc <notify_cb>:
{
   2aedc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2aee0:	4b40      	ldr	r3, [pc, #256]	; (2afe4 <notify_cb+0x108>)
{
   2aee2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2aee4:	6882      	ldr	r2, [r0, #8]
   2aee6:	429a      	cmp	r2, r3
{
   2aee8:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2aeea:	d136      	bne.n	2af5a <notify_cb+0x7e>
	ccc = attr->user_data;
   2aeec:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2aef0:	4b3d      	ldr	r3, [pc, #244]	; (2afe8 <notify_cb+0x10c>)
   2aef2:	459a      	cmp	sl, r3
   2aef4:	d119      	bne.n	2af2a <notify_cb+0x4e>
   2aef6:	4c3d      	ldr	r4, [pc, #244]	; (2afec <notify_cb+0x110>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   2aef8:	4f3d      	ldr	r7, [pc, #244]	; (2aff0 <notify_cb+0x114>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2aefa:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   2aefc:	4639      	mov	r1, r7
   2aefe:	4620      	mov	r0, r4
   2af00:	f00e fda7 	bl	39a52 <bt_addr_le_eq>
   2af04:	b978      	cbnz	r0, 2af26 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   2af06:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2af0a:	2207      	movs	r2, #7
   2af0c:	4621      	mov	r1, r4
   2af0e:	f7fd fecd 	bl	28cac <bt_conn_lookup_state_le>
			if (!conn) {
   2af12:	bb38      	cbnz	r0, 2af64 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   2af14:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   2af16:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   2af1a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2af1c:	4621      	mov	r1, r4
   2af1e:	8853      	ldrh	r3, [r2, #2]
   2af20:	8812      	ldrh	r2, [r2, #0]
   2af22:	f7ff fa11 	bl	2a348 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2af26:	340c      	adds	r4, #12
   2af28:	b1d6      	cbz	r6, 2af60 <notify_cb+0x84>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2af2a:	f10a 0601 	add.w	r6, sl, #1
   2af2e:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   2af32:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   2af36:	89ab      	ldrh	r3, [r5, #12]
   2af38:	429a      	cmp	r2, r3
   2af3a:	d10b      	bne.n	2af54 <notify_cb+0x78>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2af3c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   2af40:	4631      	mov	r1, r6
   2af42:	f7fd fe8d 	bl	28c60 <bt_conn_lookup_addr_le>
		if (!conn) {
   2af46:	4604      	mov	r4, r0
   2af48:	b120      	cbz	r0, 2af54 <notify_cb+0x78>
		if (conn->state != BT_CONN_CONNECTED) {
   2af4a:	7a83      	ldrb	r3, [r0, #10]
   2af4c:	2b07      	cmp	r3, #7
   2af4e:	d00c      	beq.n	2af6a <notify_cb+0x8e>
			bt_conn_unref(conn);
   2af50:	f7fd fc56 	bl	28800 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2af54:	360a      	adds	r6, #10
   2af56:	45b3      	cmp	fp, r6
   2af58:	d1eb      	bne.n	2af32 <notify_cb+0x56>
		return BT_GATT_ITER_CONTINUE;
   2af5a:	f04f 0901 	mov.w	r9, #1
   2af5e:	e03e      	b.n	2afde <notify_cb+0x102>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2af60:	2601      	movs	r6, #1
   2af62:	e7cb      	b.n	2aefc <notify_cb+0x20>
			bt_conn_unref(conn);
   2af64:	f7fd fc4c 	bl	28800 <bt_conn_unref>
   2af68:	e7dd      	b.n	2af26 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   2af6a:	f8da 3020 	ldr.w	r3, [sl, #32]
   2af6e:	b123      	cbz	r3, 2af7a <notify_cb+0x9e>
   2af70:	4641      	mov	r1, r8
   2af72:	4798      	blx	r3
   2af74:	b908      	cbnz	r0, 2af7a <notify_cb+0x9e>
			bt_conn_unref(conn);
   2af76:	4620      	mov	r0, r4
   2af78:	e7ea      	b.n	2af50 <notify_cb+0x74>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2af7a:	2294      	movs	r2, #148	; 0x94
   2af7c:	4641      	mov	r1, r8
   2af7e:	4620      	mov	r0, r4
   2af80:	f00e ff0a 	bl	39d98 <bt_gatt_check_perm>
   2af84:	4681      	mov	r9, r0
   2af86:	2800      	cmp	r0, #0
   2af88:	d1f5      	bne.n	2af76 <notify_cb+0x9a>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   2af8a:	89ab      	ldrh	r3, [r5, #12]
   2af8c:	2b02      	cmp	r3, #2
   2af8e:	d115      	bne.n	2afbc <notify_cb+0xe0>
   2af90:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   2af94:	079a      	lsls	r2, r3, #30
   2af96:	d405      	bmi.n	2afa4 <notify_cb+0xc8>
		bt_conn_unref(conn);
   2af98:	4620      	mov	r0, r4
   2af9a:	f7fd fc31 	bl	28800 <bt_conn_unref>
		data->err = 0;
   2af9e:	2300      	movs	r3, #0
   2afa0:	60ab      	str	r3, [r5, #8]
   2afa2:	e7d7      	b.n	2af54 <notify_cb+0x78>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   2afa4:	692a      	ldr	r2, [r5, #16]
   2afa6:	88a9      	ldrh	r1, [r5, #4]
   2afa8:	4620      	mov	r0, r4
   2afaa:	f7ff fd59 	bl	2aa60 <gatt_indicate>
			if (err == 0) {
   2afae:	4607      	mov	r7, r0
   2afb0:	b980      	cbnz	r0, 2afd4 <notify_cb+0xf8>
				data->ind_params->_ref++;
   2afb2:	692a      	ldr	r2, [r5, #16]
   2afb4:	7d93      	ldrb	r3, [r2, #22]
   2afb6:	3301      	adds	r3, #1
   2afb8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2afba:	e7ed      	b.n	2af98 <notify_cb+0xbc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   2afbc:	2b01      	cmp	r3, #1
   2afbe:	d1eb      	bne.n	2af98 <notify_cb+0xbc>
   2afc0:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   2afc4:	07db      	lsls	r3, r3, #31
   2afc6:	d5e7      	bpl.n	2af98 <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2afc8:	692a      	ldr	r2, [r5, #16]
   2afca:	88a9      	ldrh	r1, [r5, #4]
   2afcc:	4620      	mov	r0, r4
   2afce:	f00e ff0c 	bl	39dea <gatt_notify>
   2afd2:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   2afd4:	4620      	mov	r0, r4
   2afd6:	f7fd fc13 	bl	28800 <bt_conn_unref>
		if (err < 0) {
   2afda:	2f00      	cmp	r7, #0
   2afdc:	dadf      	bge.n	2af9e <notify_cb+0xc2>
}
   2afde:	4648      	mov	r0, r9
   2afe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afe4:	0002a455 	.word	0x0002a455
   2afe8:	2000070c 	.word	0x2000070c
   2afec:	20004c6d 	.word	0x20004c6d
   2aff0:	0003d520 	.word	0x0003d520

0002aff4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   2aff4:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2aff6:	4a06      	ldr	r2, [pc, #24]	; (2b010 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   2aff8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2affa:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   2affc:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2affe:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   2b002:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2b006:	f00e feba 	bl	39d7e <bt_gatt_foreach_attr>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   2b00a:	b003      	add	sp, #12
   2b00c:	f85d fb04 	ldr.w	pc, [sp], #4
   2b010:	0002acd9 	.word	0x0002acd9

0002b014 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   2b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   2b016:	4b08      	ldr	r3, [pc, #32]	; (2b038 <bt_gatt_att_max_mtu_changed+0x24>)
   2b018:	681c      	ldr	r4, [r3, #0]
   2b01a:	4605      	mov	r5, r0
   2b01c:	460e      	mov	r6, r1
   2b01e:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2b020:	b14c      	cbz	r4, 2b036 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   2b022:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2b026:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   2b028:	b11b      	cbz	r3, 2b032 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   2b02a:	463a      	mov	r2, r7
   2b02c:	4631      	mov	r1, r6
   2b02e:	4628      	mov	r0, r5
   2b030:	4798      	blx	r3
	return node->next;
   2b032:	6864      	ldr	r4, [r4, #4]
   2b034:	e7f4      	b.n	2b020 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   2b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b038:	20003b14 	.word	0x20003b14

0002b03c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   2b03c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2b03e:	4603      	mov	r3, r0
   2b040:	4a0f      	ldr	r2, [pc, #60]	; (2b080 <bt_gatt_disconnected+0x44>)
{
   2b042:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2b044:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2b048:	2001      	movs	r0, #1
   2b04a:	f00e fe98 	bl	39d7e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   2b04e:	4620      	mov	r0, r4
   2b050:	f7ff f8ea 	bl	2a228 <find_cf_cfg>
	if (!cfg) {
   2b054:	4605      	mov	r5, r0
   2b056:	b188      	cbz	r0, 2b07c <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b058:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2b05c:	7a20      	ldrb	r0, [r4, #8]
   2b05e:	4631      	mov	r1, r6
   2b060:	f00d fcf1 	bl	38a46 <bt_addr_le_is_bonded>
   2b064:	b920      	cbnz	r0, 2b070 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   2b066:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   2b068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   2b06c:	f7ff b950 	b.w	2a310 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2b070:	4631      	mov	r1, r6
   2b072:	1c68      	adds	r0, r5, #1
}
   2b074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2b078:	f00e bcf3 	b.w	39a62 <bt_addr_le_copy>
}
   2b07c:	bd70      	pop	{r4, r5, r6, pc}
   2b07e:	bf00      	nop
   2b080:	0002a3a1 	.word	0x0002a3a1

0002b084 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   2b084:	b510      	push	{r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   2b086:	4b0b      	ldr	r3, [pc, #44]	; (2b0b4 <bt_smp_accept+0x30>)
   2b088:	681c      	ldr	r4, [r3, #0]
{
   2b08a:	4602      	mov	r2, r0
		if (smp->chan.conn) {
   2b08c:	b154      	cbz	r4, 2b0a4 <bt_smp_accept+0x20>
   2b08e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
   2b092:	b130      	cbz	r0, 2b0a2 <bt_smp_accept+0x1e>
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   2b094:	4808      	ldr	r0, [pc, #32]	; (2b0b8 <bt_smp_accept+0x34>)
   2b096:	2145      	movs	r1, #69	; 0x45
   2b098:	f00c ffa4 	bl	37fe4 <z_log_minimal_printk>
   2b09c:	f06f 000b 	mvn.w	r0, #11

	return -ENOMEM;
}
   2b0a0:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   2b0a2:	2401      	movs	r4, #1
		smp->chan.ops = &ops;
   2b0a4:	2294      	movs	r2, #148	; 0x94
   2b0a6:	fb02 3304 	mla	r3, r2, r4, r3
   2b0aa:	4a04      	ldr	r2, [pc, #16]	; (2b0bc <bt_smp_accept+0x38>)
   2b0ac:	605a      	str	r2, [r3, #4]
		return 0;
   2b0ae:	2000      	movs	r0, #0
		*chan = &smp->chan;
   2b0b0:	600b      	str	r3, [r1, #0]
		return 0;
   2b0b2:	e7f5      	b.n	2b0a0 <bt_smp_accept+0x1c>
   2b0b4:	20003b1c 	.word	0x20003b1c
   2b0b8:	0003de7c 	.word	0x0003de7c
   2b0bc:	0003c208 	.word	0x0003c208

0002b0c0 <mcumgr_handlers_init>:
}
#endif

/* Processes all registered MCUmgr handlers at start up and registers them */
static int mcumgr_handlers_init(const struct device *dev)
{
   2b0c0:	b538      	push	{r3, r4, r5, lr}
   2b0c2:	4c0b      	ldr	r4, [pc, #44]	; (2b0f0 <mcumgr_handlers_init+0x30>)
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(mcumgr_handler, handler) {
   2b0c4:	4d0b      	ldr	r5, [pc, #44]	; (2b0f4 <mcumgr_handlers_init+0x34>)
   2b0c6:	42ac      	cmp	r4, r5
   2b0c8:	d90e      	bls.n	2b0e8 <mcumgr_handlers_init+0x28>
   2b0ca:	490b      	ldr	r1, [pc, #44]	; (2b0f8 <mcumgr_handlers_init+0x38>)
   2b0cc:	480b      	ldr	r0, [pc, #44]	; (2b0fc <mcumgr_handlers_init+0x3c>)
   2b0ce:	2289      	movs	r2, #137	; 0x89
   2b0d0:	f00c ff7a 	bl	37fc8 <assert_print>
   2b0d4:	4808      	ldr	r0, [pc, #32]	; (2b0f8 <mcumgr_handlers_init+0x38>)
   2b0d6:	2189      	movs	r1, #137	; 0x89
   2b0d8:	f00c ff6f 	bl	37fba <assert_post_action>
		if (handler->init) {
   2b0dc:	f854 3b04 	ldr.w	r3, [r4], #4
   2b0e0:	2b00      	cmp	r3, #0
   2b0e2:	d0f0      	beq.n	2b0c6 <mcumgr_handlers_init+0x6>
			handler->init();
   2b0e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(mcumgr_handler, handler) {
   2b0e6:	e7ee      	b.n	2b0c6 <mcumgr_handlers_init+0x6>
   2b0e8:	d3f8      	bcc.n	2b0dc <mcumgr_handlers_init+0x1c>
		}
	}

	return 0;
}
   2b0ea:	2000      	movs	r0, #0
   2b0ec:	bd38      	pop	{r3, r4, r5, pc}
   2b0ee:	bf00      	nop
   2b0f0:	0003bd7c 	.word	0x0003bd7c
   2b0f4:	0003bd88 	.word	0x0003bd88
   2b0f8:	0003dead 	.word	0x0003dead
   2b0fc:	0003c7f8 	.word	0x0003c7f8

0002b100 <mgmt_register_group>:
	parent->next = child;
   2b100:	2300      	movs	r3, #0
   2b102:	6003      	str	r3, [r0, #0]
	return list->tail;
   2b104:	4b04      	ldr	r3, [pc, #16]	; (2b118 <mgmt_register_group+0x18>)
   2b106:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2b108:	b912      	cbnz	r2, 2b110 <mgmt_register_group+0x10>
	list->head = node;
   2b10a:	e9c3 0000 	strd	r0, r0, [r3]
}
   2b10e:	4770      	bx	lr
	parent->next = child;
   2b110:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2b112:	6058      	str	r0, [r3, #4]
}
   2b114:	4770      	bx	lr
   2b116:	bf00      	nop
   2b118:	20003c44 	.word	0x20003c44

0002b11c <img_mgmt_flash_check_empty_inner>:
 * @param	fa	pointer to flash area to scan
 *
 * @return	0 when not empty, 1 when empty, negative errno code on error.
 */
static int img_mgmt_flash_check_empty_inner(const struct flash_area *fa)
{
   2b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	int i;
	uint8_t erased_val;
	uint32_t erased_val_32;

	assert(fa->fa_size % 4 == 0);
   2b120:	6884      	ldr	r4, [r0, #8]
   2b122:	f014 0403 	ands.w	r4, r4, #3
{
   2b126:	b090      	sub	sp, #64	; 0x40
   2b128:	4606      	mov	r6, r0
	assert(fa->fa_size % 4 == 0);
   2b12a:	d008      	beq.n	2b13e <img_mgmt_flash_check_empty_inner+0x22>
   2b12c:	4919      	ldr	r1, [pc, #100]	; (2b194 <img_mgmt_flash_check_empty_inner+0x78>)
   2b12e:	481a      	ldr	r0, [pc, #104]	; (2b198 <img_mgmt_flash_check_empty_inner+0x7c>)
   2b130:	2249      	movs	r2, #73	; 0x49
   2b132:	f00c ff49 	bl	37fc8 <assert_print>
   2b136:	4817      	ldr	r0, [pc, #92]	; (2b194 <img_mgmt_flash_check_empty_inner+0x78>)
   2b138:	2149      	movs	r1, #73	; 0x49
   2b13a:	f00c ff3e 	bl	37fba <assert_post_action>

	erased_val = flash_area_erased_val(fa);
   2b13e:	f00c ffd9 	bl	380f4 <flash_area_erased_val>
	erased_val_32 = ERASED_VAL_32(erased_val);
   2b142:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101

	end = fa->fa_size;
   2b146:	f8d6 8008 	ldr.w	r8, [r6, #8]
   2b14a:	fb03 f700 	mul.w	r7, r3, r0
	for (addr = 0; addr < end; addr += sizeof(data)) {
   2b14e:	4544      	cmp	r4, r8
   2b150:	db03      	blt.n	2b15a <img_mgmt_flash_check_empty_inner+0x3e>
				return 0;
			}
		}
	}

	return 1;
   2b152:	2001      	movs	r0, #1
}
   2b154:	b010      	add	sp, #64	; 0x40
   2b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (end - addr < sizeof(data)) {
   2b15a:	eba8 0504 	sub.w	r5, r8, r4
   2b15e:	2d40      	cmp	r5, #64	; 0x40
   2b160:	bfa8      	it	ge
   2b162:	2540      	movge	r5, #64	; 0x40
		rc = flash_area_read(fa, addr, data, bytes_to_read);
   2b164:	462b      	mov	r3, r5
   2b166:	466a      	mov	r2, sp
   2b168:	4621      	mov	r1, r4
   2b16a:	4630      	mov	r0, r6
   2b16c:	f00c ff7b 	bl	38066 <flash_area_read>
		if (rc < 0) {
   2b170:	2800      	cmp	r0, #0
   2b172:	dbef      	blt.n	2b154 <img_mgmt_flash_check_empty_inner+0x38>
		for (i = 0; i < bytes_to_read / 4; i++) {
   2b174:	10ad      	asrs	r5, r5, #2
   2b176:	466a      	mov	r2, sp
   2b178:	2300      	movs	r3, #0
   2b17a:	429d      	cmp	r5, r3
   2b17c:	d101      	bne.n	2b182 <img_mgmt_flash_check_empty_inner+0x66>
	for (addr = 0; addr < end; addr += sizeof(data)) {
   2b17e:	3440      	adds	r4, #64	; 0x40
   2b180:	e7e5      	b.n	2b14e <img_mgmt_flash_check_empty_inner+0x32>
			if (data[i] != erased_val_32) {
   2b182:	f852 1b04 	ldr.w	r1, [r2], #4
   2b186:	42b9      	cmp	r1, r7
   2b188:	d101      	bne.n	2b18e <img_mgmt_flash_check_empty_inner+0x72>
		for (i = 0; i < bytes_to_read / 4; i++) {
   2b18a:	3301      	adds	r3, #1
   2b18c:	e7f5      	b.n	2b17a <img_mgmt_flash_check_empty_inner+0x5e>
				return 0;
   2b18e:	2000      	movs	r0, #0
   2b190:	e7e0      	b.n	2b154 <img_mgmt_flash_check_empty_inner+0x38>
   2b192:	bf00      	nop
   2b194:	0003dee3 	.word	0x0003dee3
   2b198:	0003c7f8 	.word	0x0003c7f8

0002b19c <img_mgmt_write_image_data>:
}

#else
int
img_mgmt_write_image_data(unsigned int offset, const void *data, unsigned int num_bytes, bool last)
{
   2b19c:	b570      	push	{r4, r5, r6, lr}
   2b19e:	460c      	mov	r4, r1
   2b1a0:	4615      	mov	r5, r2
   2b1a2:	461e      	mov	r6, r3
	static struct flash_img_context ctx;

	if (offset == 0) {
   2b1a4:	b148      	cbz	r0, 2b1ba <img_mgmt_write_image_data+0x1e>
		if (flash_img_init_id(&ctx, g_img_mgmt_state.area_id) != 0) {
			return MGMT_ERR_EUNKNOWN;
		}
	}

	if (flash_img_buffered_write(&ctx, data, num_bytes, last) != 0) {
   2b1a6:	4809      	ldr	r0, [pc, #36]	; (2b1cc <img_mgmt_write_image_data+0x30>)
   2b1a8:	4633      	mov	r3, r6
   2b1aa:	462a      	mov	r2, r5
   2b1ac:	4621      	mov	r1, r4
   2b1ae:	f00c ff26 	bl	37ffe <flash_img_buffered_write>
   2b1b2:	3800      	subs	r0, #0
   2b1b4:	bf18      	it	ne
   2b1b6:	2001      	movne	r0, #1
		return MGMT_ERR_EUNKNOWN;
	}

	return MGMT_ERR_EOK;
}
   2b1b8:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_img_init_id(&ctx, g_img_mgmt_state.area_id) != 0) {
   2b1ba:	4b05      	ldr	r3, [pc, #20]	; (2b1d0 <img_mgmt_write_image_data+0x34>)
   2b1bc:	4803      	ldr	r0, [pc, #12]	; (2b1cc <img_mgmt_write_image_data+0x30>)
   2b1be:	7819      	ldrb	r1, [r3, #0]
   2b1c0:	f00c ff2f 	bl	38022 <flash_img_init_id>
   2b1c4:	2800      	cmp	r0, #0
   2b1c6:	d0ee      	beq.n	2b1a6 <img_mgmt_write_image_data+0xa>
			return MGMT_ERR_EUNKNOWN;
   2b1c8:	2001      	movs	r0, #1
   2b1ca:	e7f5      	b.n	2b1b8 <img_mgmt_write_image_data+0x1c>
   2b1cc:	20003c4c 	.word	0x20003c4c
   2b1d0:	20003e70 	.word	0x20003e70

0002b1d4 <img_mgmt_erase_image_data>:
#endif

int
img_mgmt_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   2b1d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b1d6:	460d      	mov	r5, r1
	const struct flash_area *fa;
	int rc;

	if (off != 0) {
   2b1d8:	2800      	cmp	r0, #0
   2b1da:	d15d      	bne.n	2b298 <img_mgmt_erase_image_data+0xc4>
		rc = MGMT_ERR_EINVAL;
		goto end;
	}

	rc = flash_area_open(g_img_mgmt_state.area_id, &fa);
   2b1dc:	4b2f      	ldr	r3, [pc, #188]	; (2b29c <img_mgmt_erase_image_data+0xc8>)
   2b1de:	4669      	mov	r1, sp
   2b1e0:	7818      	ldrb	r0, [r3, #0]
   2b1e2:	f7f9 fbf9 	bl	249d8 <flash_area_open>
	if (rc != 0) {
   2b1e6:	4602      	mov	r2, r0
   2b1e8:	b138      	cbz	r0, 2b1fa <img_mgmt_erase_image_data+0x26>
		LOG_ERR("Can't bind to the flash area (err %d)", rc);
   2b1ea:	482d      	ldr	r0, [pc, #180]	; (2b2a0 <img_mgmt_erase_image_data+0xcc>)
   2b1ec:	2145      	movs	r1, #69	; 0x45
   2b1ee:	f00c fef9 	bl	37fe4 <z_log_minimal_printk>
		rc = MGMT_ERR_EUNKNOWN;
   2b1f2:	2401      	movs	r4, #1

end_fa:
	flash_area_close(fa);
end:
	return rc;
}
   2b1f4:	4620      	mov	r0, r4
   2b1f6:	b004      	add	sp, #16
   2b1f8:	bd70      	pop	{r4, r5, r6, pc}
	const struct device *dev = flash_area_get_device(fa);
   2b1fa:	9800      	ldr	r0, [sp, #0]
   2b1fc:	f00c ff78 	bl	380f0 <flash_area_get_device>
	if (dev == NULL) {
   2b200:	4606      	mov	r6, r0
   2b202:	b170      	cbz	r0, 2b222 <img_mgmt_erase_image_data+0x4e>
	off_t page_offset = fa->fa_off + num_bytes - 1;
   2b204:	9b00      	ldr	r3, [sp, #0]
   2b206:	685c      	ldr	r4, [r3, #4]
   2b208:	3c01      	subs	r4, #1
   2b20a:	442c      	add	r4, r5
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   2b20c:	4621      	mov	r1, r4
   2b20e:	aa01      	add	r2, sp, #4
   2b210:	f00f fa18 	bl	3a644 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   2b214:	4601      	mov	r1, r0
   2b216:	b130      	cbz	r0, 2b226 <img_mgmt_erase_image_data+0x52>
		LOG_ERR("bad offset (0x%lx)", (long)page_offset);
   2b218:	4822      	ldr	r0, [pc, #136]	; (2b2a4 <img_mgmt_erase_image_data+0xd0>)
   2b21a:	4622      	mov	r2, r4
   2b21c:	2145      	movs	r1, #69	; 0x45
   2b21e:	f00c fee1 	bl	37fe4 <z_log_minimal_printk>
		rc = MGMT_ERR_EUNKNOWN;
   2b222:	2401      	movs	r4, #1
   2b224:	e034      	b.n	2b290 <img_mgmt_erase_image_data+0xbc>
	size_t erase_size = page.start_offset + page.size - fa->fa_off;
   2b226:	e9dd 0500 	ldrd	r0, r5, [sp]
   2b22a:	9b02      	ldr	r3, [sp, #8]
   2b22c:	441d      	add	r5, r3
   2b22e:	6843      	ldr	r3, [r0, #4]
   2b230:	1aed      	subs	r5, r5, r3
	rc = flash_area_erase(fa, 0, erase_size);
   2b232:	462a      	mov	r2, r5
   2b234:	f00c ff41 	bl	380ba <flash_area_erase>
	if (rc != 0) {
   2b238:	4604      	mov	r4, r0
   2b23a:	b130      	cbz	r0, 2b24a <img_mgmt_erase_image_data+0x76>
		LOG_ERR("image slot erase of 0x%zx bytes failed (err %d)", erase_size,
   2b23c:	4603      	mov	r3, r0
   2b23e:	481a      	ldr	r0, [pc, #104]	; (2b2a8 <img_mgmt_erase_image_data+0xd4>)
   2b240:	462a      	mov	r2, r5
   2b242:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("image slot trailer erase of 0x%zx bytes failed (err %d)",
   2b244:	f00c fece 	bl	37fe4 <z_log_minimal_printk>
			goto end_fa;
   2b248:	e7eb      	b.n	2b222 <img_mgmt_erase_image_data+0x4e>
	LOG_INF("Erased 0x%zx bytes of image slot", erase_size);
   2b24a:	2149      	movs	r1, #73	; 0x49
   2b24c:	4817      	ldr	r0, [pc, #92]	; (2b2ac <img_mgmt_erase_image_data+0xd8>)
   2b24e:	462a      	mov	r2, r5
   2b250:	f00c fec8 	bl	37fe4 <z_log_minimal_printk>
	off = BOOT_TRAILER_IMG_STATUS_OFFS(fa);
   2b254:	9b00      	ldr	r3, [sp, #0]
   2b256:	6899      	ldr	r1, [r3, #8]
   2b258:	3920      	subs	r1, #32
	if (off >= erase_size) {
   2b25a:	42a9      	cmp	r1, r5
   2b25c:	d318      	bcc.n	2b290 <img_mgmt_erase_image_data+0xbc>
		rc = flash_get_page_info_by_offs(dev, fa->fa_off + off, &page);
   2b25e:	685b      	ldr	r3, [r3, #4]
   2b260:	4419      	add	r1, r3
   2b262:	aa01      	add	r2, sp, #4
   2b264:	4630      	mov	r0, r6
   2b266:	f00f f9ed 	bl	3a644 <z_impl_flash_get_page_info_by_offs>
		off = page.start_offset - fa->fa_off;
   2b26a:	9800      	ldr	r0, [sp, #0]
   2b26c:	9901      	ldr	r1, [sp, #4]
   2b26e:	6843      	ldr	r3, [r0, #4]
		erase_size = fa->fa_size - off;
   2b270:	6885      	ldr	r5, [r0, #8]
		off = page.start_offset - fa->fa_off;
   2b272:	1ac9      	subs	r1, r1, r3
		erase_size = fa->fa_size - off;
   2b274:	1a6d      	subs	r5, r5, r1
		rc = flash_area_erase(fa, off, erase_size);
   2b276:	462a      	mov	r2, r5
   2b278:	f00c ff1f 	bl	380ba <flash_area_erase>
			LOG_ERR("image slot trailer erase of 0x%zx bytes failed (err %d)",
   2b27c:	462a      	mov	r2, r5
		if (rc != 0) {
   2b27e:	4603      	mov	r3, r0
   2b280:	b110      	cbz	r0, 2b288 <img_mgmt_erase_image_data+0xb4>
			LOG_ERR("image slot trailer erase of 0x%zx bytes failed (err %d)",
   2b282:	480b      	ldr	r0, [pc, #44]	; (2b2b0 <img_mgmt_erase_image_data+0xdc>)
   2b284:	2145      	movs	r1, #69	; 0x45
   2b286:	e7dd      	b.n	2b244 <img_mgmt_erase_image_data+0x70>
		LOG_INF("Erased 0x%zx bytes of image slot trailer", erase_size);
   2b288:	480a      	ldr	r0, [pc, #40]	; (2b2b4 <img_mgmt_erase_image_data+0xe0>)
   2b28a:	2149      	movs	r1, #73	; 0x49
   2b28c:	f00c feaa 	bl	37fe4 <z_log_minimal_printk>
	flash_area_close(fa);
   2b290:	9800      	ldr	r0, [sp, #0]
   2b292:	f00c fee7 	bl	38064 <flash_area_close>
   2b296:	e7ad      	b.n	2b1f4 <img_mgmt_erase_image_data+0x20>
		rc = MGMT_ERR_EINVAL;
   2b298:	2403      	movs	r4, #3
	return rc;
   2b29a:	e7ab      	b.n	2b1f4 <img_mgmt_erase_image_data+0x20>
   2b29c:	20003e70 	.word	0x20003e70
   2b2a0:	0003df2c 	.word	0x0003df2c
   2b2a4:	0003df57 	.word	0x0003df57
   2b2a8:	0003df6f 	.word	0x0003df6f
   2b2ac:	0003dfa4 	.word	0x0003dfa4
   2b2b0:	0003dfca 	.word	0x0003dfca
   2b2b4:	0003e007 	.word	0x0003e007

0002b2b8 <img_mgmt_swap_type>:
	switch (slot) {
   2b2b8:	2801      	cmp	r0, #1

int
img_mgmt_swap_type(int slot)
{
   2b2ba:	b508      	push	{r3, lr}
	switch (slot) {
   2b2bc:	d908      	bls.n	2b2d0 <img_mgmt_swap_type+0x18>
		assert(0);
   2b2be:	4908      	ldr	r1, [pc, #32]	; (2b2e0 <img_mgmt_swap_type+0x28>)
   2b2c0:	4808      	ldr	r0, [pc, #32]	; (2b2e4 <img_mgmt_swap_type+0x2c>)
   2b2c2:	2232      	movs	r2, #50	; 0x32
   2b2c4:	f00c fe80 	bl	37fc8 <assert_print>
   2b2c8:	4805      	ldr	r0, [pc, #20]	; (2b2e0 <img_mgmt_swap_type+0x28>)
   2b2ca:	2132      	movs	r1, #50	; 0x32
   2b2cc:	f00c fe75 	bl	37fba <assert_post_action>
	int image = img_mgmt_slot_to_image(slot);

	switch (mcuboot_swap_type_multi(image)) {
   2b2d0:	2000      	movs	r0, #0
   2b2d2:	f00e ffdc 	bl	3a28e <mcuboot_swap_type_multi>
   2b2d6:	3801      	subs	r0, #1
   2b2d8:	2804      	cmp	r0, #4
   2b2da:	bf28      	it	cs
   2b2dc:	20ff      	movcs	r0, #255	; 0xff
	case BOOT_SWAP_TYPE_REVERT:
		return IMG_MGMT_SWAP_TYPE_REVERT;
	default:
		return IMG_MGMT_SWAP_TYPE_UNKNOWN;
	}
}
   2b2de:	bd08      	pop	{r3, pc}
   2b2e0:	0003dee3 	.word	0x0003dee3
   2b2e4:	0003c7f8 	.word	0x0003c7f8

0002b2e8 <img_mgmt_upload_inspect>:
 *	   instead.
 */
int
img_mgmt_upload_inspect(const struct img_mgmt_upload_req *req,
			struct img_mgmt_upload_action *action)
{
   2b2e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b2ea:	4605      	mov	r5, r0
   2b2ec:	460c      	mov	r4, r1
	const struct image_header *hdr;
	struct image_version cur_ver;
	int rc;

	memset(action, 0, sizeof(*action));
   2b2ee:	2218      	movs	r2, #24
   2b2f0:	2100      	movs	r1, #0
   2b2f2:	4620      	mov	r0, r4
   2b2f4:	f00d fa6c 	bl	387d0 <memset>

	if (req->off == SIZE_MAX) {
   2b2f8:	686b      	ldr	r3, [r5, #4]
   2b2fa:	1c58      	adds	r0, r3, #1
   2b2fc:	d102      	bne.n	2b304 <img_mgmt_upload_inspect+0x1c>
		/* Request did not include an `off` field. */
		IMG_MGMT_UPLOAD_ACTION_SET_RC_RSN(action, img_mgmt_err_str_hdr_malformed);
		return MGMT_ERR_EINVAL;
   2b2fe:	2003      	movs	r0, #3
	action->write_bytes = req->img_data.len;
	action->proceed = true;
	IMG_MGMT_UPLOAD_ACTION_SET_RC_RSN(action, NULL);

	return 0;
}
   2b300:	b004      	add	sp, #16
   2b302:	bd70      	pop	{r4, r5, r6, pc}
	if (req->off == 0) {
   2b304:	2b00      	cmp	r3, #0
   2b306:	d15f      	bne.n	2b3c8 <img_mgmt_upload_inspect+0xe0>
		if (req->img_data.len < sizeof(struct image_header)) {
   2b308:	692a      	ldr	r2, [r5, #16]
   2b30a:	2a1f      	cmp	r2, #31
   2b30c:	d9f7      	bls.n	2b2fe <img_mgmt_upload_inspect+0x16>
		if (req->size == SIZE_MAX) {
   2b30e:	68aa      	ldr	r2, [r5, #8]
   2b310:	1c51      	adds	r1, r2, #1
   2b312:	d0f4      	beq.n	2b2fe <img_mgmt_upload_inspect+0x16>
		action->size = req->size;
   2b314:	e9c4 2300 	strd	r2, r3, [r4]
		hdr = (struct image_header *)req->img_data.value;
   2b318:	68ee      	ldr	r6, [r5, #12]
		if (hdr->ih_magic != IMAGE_MAGIC) {
   2b31a:	4b31      	ldr	r3, [pc, #196]	; (2b3e0 <img_mgmt_upload_inspect+0xf8>)
   2b31c:	6832      	ldr	r2, [r6, #0]
   2b31e:	429a      	cmp	r2, r3
   2b320:	d1ed      	bne.n	2b2fe <img_mgmt_upload_inspect+0x16>
		if (req->data_sha.len > IMG_MGMT_DATA_SHA_LEN) {
   2b322:	69aa      	ldr	r2, [r5, #24]
   2b324:	2a20      	cmp	r2, #32
   2b326:	d8ea      	bhi.n	2b2fe <img_mgmt_upload_inspect+0x16>
		if ((req->data_sha.len > 0) && (g_img_mgmt_state.area_id != -1)) {
   2b328:	b98a      	cbnz	r2, 2b34e <img_mgmt_upload_inspect+0x66>
			if (img_mgmt_slot_in_use(slot) == 0) {
   2b32a:	2000      	movs	r0, #0
   2b32c:	f00e ff21 	bl	3a172 <img_mgmt_slot_in_use>
   2b330:	b1e0      	cbz	r0, 2b36c <img_mgmt_upload_inspect+0x84>
   2b332:	2001      	movs	r0, #1
   2b334:	f00e ff1d 	bl	3a172 <img_mgmt_slot_in_use>
   2b338:	b920      	cbnz	r0, 2b344 <img_mgmt_upload_inspect+0x5c>
				int area_id = img_mgmt_flash_area_id(slot);
   2b33a:	2001      	movs	r0, #1
   2b33c:	f00e fe59 	bl	39ff2 <img_mgmt_flash_area_id>
				if (area_id >= 0) {
   2b340:	2800      	cmp	r0, #0
   2b342:	da17      	bge.n	2b374 <img_mgmt_upload_inspect+0x8c>
		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
   2b344:	f04f 33ff 	mov.w	r3, #4294967295
   2b348:	60e3      	str	r3, [r4, #12]
			return MGMT_ERR_ENOENT;
   2b34a:	2005      	movs	r0, #5
   2b34c:	e7d8      	b.n	2b300 <img_mgmt_upload_inspect+0x18>
		if ((req->data_sha.len > 0) && (g_img_mgmt_state.area_id != -1)) {
   2b34e:	4825      	ldr	r0, [pc, #148]	; (2b3e4 <img_mgmt_upload_inspect+0xfc>)
   2b350:	6803      	ldr	r3, [r0, #0]
   2b352:	3301      	adds	r3, #1
   2b354:	d0e9      	beq.n	2b32a <img_mgmt_upload_inspect+0x42>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha.len) &&
   2b356:	7b03      	ldrb	r3, [r0, #12]
   2b358:	429a      	cmp	r2, r3
   2b35a:	d1e6      	bne.n	2b32a <img_mgmt_upload_inspect+0x42>
			    !memcmp(g_img_mgmt_state.data_sha, req->data_sha.value,
   2b35c:	6969      	ldr	r1, [r5, #20]
   2b35e:	300d      	adds	r0, #13
   2b360:	f00d fa04 	bl	3876c <memcmp>
			if ((g_img_mgmt_state.data_sha_len == req->data_sha.len) &&
   2b364:	2800      	cmp	r0, #0
   2b366:	d1e0      	bne.n	2b32a <img_mgmt_upload_inspect+0x42>
				return 0;
   2b368:	2000      	movs	r0, #0
   2b36a:	e7c9      	b.n	2b300 <img_mgmt_upload_inspect+0x18>
				int area_id = img_mgmt_flash_area_id(slot);
   2b36c:	f00e fe41 	bl	39ff2 <img_mgmt_flash_area_id>
				if (area_id >= 0) {
   2b370:	2800      	cmp	r0, #0
   2b372:	dbde      	blt.n	2b332 <img_mgmt_upload_inspect+0x4a>
		action->area_id = img_mgmt_get_unused_slot_area_id(req->image);
   2b374:	60e0      	str	r0, [r4, #12]
		if (req->upgrade) {
   2b376:	7f2b      	ldrb	r3, [r5, #28]
   2b378:	b9bb      	cbnz	r3, 2b3aa <img_mgmt_upload_inspect+0xc2>
	rc = flash_area_open(fa_id, &fa);
   2b37a:	7b20      	ldrb	r0, [r4, #12]
   2b37c:	a901      	add	r1, sp, #4
   2b37e:	f7f9 fb2b 	bl	249d8 <flash_area_open>
	if (rc == 0) {
   2b382:	4606      	mov	r6, r0
   2b384:	b930      	cbnz	r0, 2b394 <img_mgmt_upload_inspect+0xac>
		rc = img_mgmt_flash_check_empty_inner(fa);
   2b386:	9801      	ldr	r0, [sp, #4]
   2b388:	f7ff fec8 	bl	2b11c <img_mgmt_flash_check_empty_inner>
   2b38c:	4606      	mov	r6, r0
		flash_area_close(fa);
   2b38e:	9801      	ldr	r0, [sp, #4]
   2b390:	f00c fe68 	bl	38064 <flash_area_close>
		if (rc < 0) {
   2b394:	2e00      	cmp	r6, #0
   2b396:	db0c      	blt.n	2b3b2 <img_mgmt_upload_inspect+0xca>
		action->erase = (rc == 0);
   2b398:	bf0c      	ite	eq
   2b39a:	2301      	moveq	r3, #1
   2b39c:	2300      	movne	r3, #0
   2b39e:	7463      	strb	r3, [r4, #17]
	action->write_bytes = req->img_data.len;
   2b3a0:	692b      	ldr	r3, [r5, #16]
   2b3a2:	60a3      	str	r3, [r4, #8]
	action->proceed = true;
   2b3a4:	2301      	movs	r3, #1
   2b3a6:	7423      	strb	r3, [r4, #16]
	return 0;
   2b3a8:	e7de      	b.n	2b368 <img_mgmt_upload_inspect+0x80>
			rc = img_mgmt_my_version(&cur_ver);
   2b3aa:	a802      	add	r0, sp, #8
   2b3ac:	f00e ff2a 	bl	3a204 <img_mgmt_my_version>
			if (rc != 0) {
   2b3b0:	b108      	cbz	r0, 2b3b6 <img_mgmt_upload_inspect+0xce>
				return MGMT_ERR_EUNKNOWN;
   2b3b2:	2001      	movs	r0, #1
   2b3b4:	e7a4      	b.n	2b300 <img_mgmt_upload_inspect+0x18>
			if (img_mgmt_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   2b3b6:	f106 0114 	add.w	r1, r6, #20
   2b3ba:	a802      	add	r0, sp, #8
   2b3bc:	f00e fe21 	bl	3a002 <img_mgmt_vercmp>
   2b3c0:	2800      	cmp	r0, #0
   2b3c2:	dbda      	blt.n	2b37a <img_mgmt_upload_inspect+0x92>
				return MGMT_ERR_EBADSTATE;
   2b3c4:	2006      	movs	r0, #6
   2b3c6:	e79b      	b.n	2b300 <img_mgmt_upload_inspect+0x18>
		action->area_id = g_img_mgmt_state.area_id;
   2b3c8:	4b06      	ldr	r3, [pc, #24]	; (2b3e4 <img_mgmt_upload_inspect+0xfc>)
   2b3ca:	681a      	ldr	r2, [r3, #0]
   2b3cc:	60e2      	str	r2, [r4, #12]
		action->size = g_img_mgmt_state.size;
   2b3ce:	689a      	ldr	r2, [r3, #8]
   2b3d0:	6022      	str	r2, [r4, #0]
   2b3d2:	2200      	movs	r2, #0
   2b3d4:	6062      	str	r2, [r4, #4]
		if (req->off != g_img_mgmt_state.off) {
   2b3d6:	686a      	ldr	r2, [r5, #4]
   2b3d8:	685b      	ldr	r3, [r3, #4]
   2b3da:	429a      	cmp	r2, r3
   2b3dc:	d1c4      	bne.n	2b368 <img_mgmt_upload_inspect+0x80>
   2b3de:	e7df      	b.n	2b3a0 <img_mgmt_upload_inspect+0xb8>
   2b3e0:	96f3b83d 	.word	0x96f3b83d
   2b3e4:	20003e70 	.word	0x20003e70

0002b3e8 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct smp_streamer *ctxt)
{
   2b3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t hash[IMAGE_HASH_LEN]; /* SHA256 hash */
	struct image_version ver;
	uint32_t flags;
	uint8_t state_flags;
	int i;
	zcbor_state_t *zse = ctxt->writer->zs;
   2b3ec:	6884      	ldr	r4, [r0, #8]
	bool ok;
	struct zcbor_string zhash = { .value = hash, .len = IMAGE_HASH_LEN };

	ok = zcbor_tstr_put_lit(zse, "images") &&
   2b3ee:	4964      	ldr	r1, [pc, #400]	; (2b580 <img_mgmt_state_read+0x198>)
{
   2b3f0:	b094      	sub	sp, #80	; 0x50
	zcbor_state_t *zse = ctxt->writer->zs;
   2b3f2:	3404      	adds	r4, #4
	struct zcbor_string zhash = { .value = hash, .len = IMAGE_HASH_LEN };
   2b3f4:	ad0c      	add	r5, sp, #48	; 0x30
   2b3f6:	2320      	movs	r3, #32
	ok = zcbor_tstr_put_lit(zse, "images") &&
   2b3f8:	2206      	movs	r2, #6
   2b3fa:	4620      	mov	r0, r4
	struct zcbor_string zhash = { .value = hash, .len = IMAGE_HASH_LEN };
   2b3fc:	9503      	str	r5, [sp, #12]
   2b3fe:	9304      	str	r3, [sp, #16]
	ok = zcbor_tstr_put_lit(zse, "images") &&
   2b400:	f00e fe7f 	bl	3a102 <zcbor_tstr_encode_ptr>
   2b404:	b118      	cbz	r0, 2b40e <img_mgmt_state_read+0x26>
	     zcbor_list_start_encode(zse, 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER);
   2b406:	2102      	movs	r1, #2
   2b408:	4620      	mov	r0, r4
   2b40a:	f00f ffec 	bl	3b3e6 <zcbor_list_start_encode>
	ok = zcbor_tstr_put_lit(zse, "images") &&
   2b40e:	f000 0001 	and.w	r0, r0, #1

	for (i = 0; ok && i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2b412:	2600      	movs	r6, #0
   2b414:	b960      	cbnz	r0, 2b430 <img_mgmt_state_read+0x48>
	if (!IS_ENABLED(CONFIG_IMG_MGMT_FRUGAL_LIST) && ok) {
		ok = zcbor_tstr_put_lit(zse, "splitStatus") &&
		     zcbor_int32_put(zse, 0);
	}

	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   2b416:	2007      	movs	r0, #7
}
   2b418:	b014      	add	sp, #80	; 0x50
   2b41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int rc = img_mgmt_read_info(i, &ver, hash, &flags);
   2b41e:	466b      	mov	r3, sp
   2b420:	462a      	mov	r2, r5
   2b422:	a901      	add	r1, sp, #4
   2b424:	4630      	mov	r0, r6
   2b426:	f000 f967 	bl	2b6f8 <img_mgmt_read_info>
		if (rc != 0) {
   2b42a:	4680      	mov	r8, r0
   2b42c:	b1b8      	cbz	r0, 2b45e <img_mgmt_state_read+0x76>
	for (i = 0; ok && i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2b42e:	3601      	adds	r6, #1
   2b430:	2e02      	cmp	r6, #2
   2b432:	d1f4      	bne.n	2b41e <img_mgmt_state_read+0x36>
	ok = ok && zcbor_list_end_encode(zse, 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER);
   2b434:	4631      	mov	r1, r6
   2b436:	4620      	mov	r0, r4
   2b438:	f00f ffdd 	bl	3b3f6 <zcbor_list_end_encode>
   2b43c:	2800      	cmp	r0, #0
   2b43e:	d0ea      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		ok = zcbor_tstr_put_lit(zse, "splitStatus") &&
   2b440:	4950      	ldr	r1, [pc, #320]	; (2b584 <img_mgmt_state_read+0x19c>)
   2b442:	220b      	movs	r2, #11
   2b444:	4620      	mov	r0, r4
   2b446:	f00e fe5c 	bl	3a102 <zcbor_tstr_encode_ptr>
   2b44a:	2800      	cmp	r0, #0
   2b44c:	d0e3      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     zcbor_int32_put(zse, 0);
   2b44e:	2100      	movs	r1, #0
   2b450:	4620      	mov	r0, r4
   2b452:	f00f ffaa 	bl	3b3aa <zcbor_int32_put>
		ok = zcbor_tstr_put_lit(zse, "splitStatus") &&
   2b456:	2800      	cmp	r0, #0
   2b458:	d0dd      	beq.n	2b416 <img_mgmt_state_read+0x2e>
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   2b45a:	2000      	movs	r0, #0
   2b45c:	e7dc      	b.n	2b418 <img_mgmt_state_read+0x30>
		state_flags = img_mgmt_state_flags(i);
   2b45e:	4630      	mov	r0, r6
   2b460:	f00e fe58 	bl	3a114 <img_mgmt_state_flags>
		ok = zcbor_map_start_encode(zse, MAX_IMG_CHARACTERISTICS)	&&
   2b464:	210f      	movs	r1, #15
		state_flags = img_mgmt_state_flags(i);
   2b466:	4607      	mov	r7, r0
		ok = zcbor_map_start_encode(zse, MAX_IMG_CHARACTERISTICS)	&&
   2b468:	4620      	mov	r0, r4
   2b46a:	f00f ffc0 	bl	3b3ee <zcbor_map_start_encode>
		     zcbor_int32_put(zse, i % 2)				&&
   2b46e:	b1d8      	cbz	r0, 2b4a8 <img_mgmt_state_read+0xc0>
		     zcbor_tstr_put_lit(zse, "slot")				&&
   2b470:	4945      	ldr	r1, [pc, #276]	; (2b588 <img_mgmt_state_read+0x1a0>)
   2b472:	2204      	movs	r2, #4
   2b474:	4620      	mov	r0, r4
   2b476:	f00e fe44 	bl	3a102 <zcbor_tstr_encode_ptr>
		       zcbor_int32_put(zse, i >> 1)))				&&
   2b47a:	b1a8      	cbz	r0, 2b4a8 <img_mgmt_state_read+0xc0>
		     zcbor_int32_put(zse, i % 2)				&&
   2b47c:	4631      	mov	r1, r6
   2b47e:	4620      	mov	r0, r4
   2b480:	f00f ff93 	bl	3b3aa <zcbor_int32_put>
		     zcbor_tstr_put_lit(zse, "slot")				&&
   2b484:	b180      	cbz	r0, 2b4a8 <img_mgmt_state_read+0xc0>
		     zcbor_tstr_put_lit(zse, "version");
   2b486:	4941      	ldr	r1, [pc, #260]	; (2b58c <img_mgmt_state_read+0x1a4>)
   2b488:	2207      	movs	r2, #7
   2b48a:	4620      	mov	r0, r4
   2b48c:	f00e fe39 	bl	3a102 <zcbor_tstr_encode_ptr>
		     zcbor_int32_put(zse, i % 2)				&&
   2b490:	b150      	cbz	r0, 2b4a8 <img_mgmt_state_read+0xc0>
			if (img_mgmt_ver_str(&ver, vers_str) < 0) {
   2b492:	a905      	add	r1, sp, #20
   2b494:	a801      	add	r0, sp, #4
   2b496:	f000 f8db 	bl	2b650 <img_mgmt_ver_str>
   2b49a:	2800      	cmp	r0, #0
   2b49c:	da68      	bge.n	2b570 <img_mgmt_state_read+0x188>
				ok = zcbor_tstr_put_lit(zse, "<\?\?\?>");
   2b49e:	493c      	ldr	r1, [pc, #240]	; (2b590 <img_mgmt_state_read+0x1a8>)
   2b4a0:	2205      	movs	r2, #5
				ok = zcbor_tstr_put_term(zse, vers_str);
   2b4a2:	4620      	mov	r0, r4
   2b4a4:	f00e fe2d 	bl	3a102 <zcbor_tstr_encode_ptr>
		ok = zcbor_tstr_put_term(zse, "hash")						&&
   2b4a8:	483a      	ldr	r0, [pc, #232]	; (2b594 <img_mgmt_state_read+0x1ac>)
   2b4aa:	f00d f943 	bl	38734 <strlen>
   2b4ae:	4939      	ldr	r1, [pc, #228]	; (2b594 <img_mgmt_state_read+0x1ac>)
   2b4b0:	4602      	mov	r2, r0
   2b4b2:	4620      	mov	r0, r4
   2b4b4:	f00e fe25 	bl	3a102 <zcbor_tstr_encode_ptr>
				       state_flags & IMG_MGMT_STATE_F_PERMANENT)		&&
   2b4b8:	2800      	cmp	r0, #0
   2b4ba:	d0ac      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     zcbor_bstr_encode(zse, &zhash)						&&
   2b4bc:	a903      	add	r1, sp, #12
   2b4be:	4620      	mov	r0, r4
   2b4c0:	f00f ff8b 	bl	3b3da <zcbor_bstr_encode>
		ok = zcbor_tstr_put_term(zse, "hash")						&&
   2b4c4:	2800      	cmp	r0, #0
   2b4c6:	d0a6      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "bootable", !(flags & IMAGE_F_NON_BOOTABLE))	&&
   2b4c8:	4933      	ldr	r1, [pc, #204]	; (2b598 <img_mgmt_state_read+0x1b0>)
   2b4ca:	2208      	movs	r2, #8
   2b4cc:	4620      	mov	r0, r4
   2b4ce:	f00e fe18 	bl	3a102 <zcbor_tstr_encode_ptr>
		     zcbor_bstr_encode(zse, &zhash)						&&
   2b4d2:	2800      	cmp	r0, #0
   2b4d4:	d09f      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "bootable", !(flags & IMAGE_F_NON_BOOTABLE))	&&
   2b4d6:	9900      	ldr	r1, [sp, #0]
   2b4d8:	f081 0110 	eor.w	r1, r1, #16
   2b4dc:	f3c1 1100 	ubfx	r1, r1, #4, #1
   2b4e0:	4620      	mov	r0, r4
   2b4e2:	f00f ff8e 	bl	3b402 <zcbor_bool_put>
   2b4e6:	2800      	cmp	r0, #0
   2b4e8:	d095      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "pending",
   2b4ea:	492c      	ldr	r1, [pc, #176]	; (2b59c <img_mgmt_state_read+0x1b4>)
   2b4ec:	2207      	movs	r2, #7
   2b4ee:	4620      	mov	r0, r4
   2b4f0:	f00e fe07 	bl	3a102 <zcbor_tstr_encode_ptr>
		     ZCBOR_ENCODE_FLAG(zse, "bootable", !(flags & IMAGE_F_NON_BOOTABLE))	&&
   2b4f4:	2800      	cmp	r0, #0
   2b4f6:	d08e      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "pending",
   2b4f8:	f007 0101 	and.w	r1, r7, #1
   2b4fc:	4620      	mov	r0, r4
   2b4fe:	f00f ff80 	bl	3b402 <zcbor_bool_put>
   2b502:	2800      	cmp	r0, #0
   2b504:	d087      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "confirmed",
   2b506:	4926      	ldr	r1, [pc, #152]	; (2b5a0 <img_mgmt_state_read+0x1b8>)
   2b508:	2209      	movs	r2, #9
   2b50a:	4620      	mov	r0, r4
   2b50c:	f00e fdf9 	bl	3a102 <zcbor_tstr_encode_ptr>
				       state_flags & IMG_MGMT_STATE_F_PENDING)			&&
   2b510:	2800      	cmp	r0, #0
   2b512:	d080      	beq.n	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "confirmed",
   2b514:	f3c7 0140 	ubfx	r1, r7, #1, #1
   2b518:	4620      	mov	r0, r4
   2b51a:	f00f ff72 	bl	3b402 <zcbor_bool_put>
   2b51e:	2800      	cmp	r0, #0
   2b520:	f43f af79 	beq.w	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "active",
   2b524:	491f      	ldr	r1, [pc, #124]	; (2b5a4 <img_mgmt_state_read+0x1bc>)
   2b526:	2206      	movs	r2, #6
   2b528:	4620      	mov	r0, r4
   2b52a:	f00e fdea 	bl	3a102 <zcbor_tstr_encode_ptr>
				       state_flags & IMG_MGMT_STATE_F_CONFIRMED)		&&
   2b52e:	2800      	cmp	r0, #0
   2b530:	f43f af71 	beq.w	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "active",
   2b534:	f3c7 0180 	ubfx	r1, r7, #2, #1
   2b538:	4620      	mov	r0, r4
   2b53a:	f00f ff62 	bl	3b402 <zcbor_bool_put>
   2b53e:	2800      	cmp	r0, #0
   2b540:	f43f af69 	beq.w	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "permanent",
   2b544:	4918      	ldr	r1, [pc, #96]	; (2b5a8 <img_mgmt_state_read+0x1c0>)
   2b546:	2209      	movs	r2, #9
   2b548:	4620      	mov	r0, r4
   2b54a:	f00e fdda 	bl	3a102 <zcbor_tstr_encode_ptr>
				       state_flags & IMG_MGMT_STATE_F_ACTIVE)			&&
   2b54e:	2800      	cmp	r0, #0
   2b550:	f43f af61 	beq.w	2b416 <img_mgmt_state_read+0x2e>
		     ZCBOR_ENCODE_FLAG(zse, "permanent",
   2b554:	f3c7 01c0 	ubfx	r1, r7, #3, #1
   2b558:	4620      	mov	r0, r4
   2b55a:	f00f ff52 	bl	3b402 <zcbor_bool_put>
   2b55e:	2800      	cmp	r0, #0
   2b560:	f43f af59 	beq.w	2b416 <img_mgmt_state_read+0x2e>
		     zcbor_map_end_encode(zse, MAX_IMG_CHARACTERISTICS);
   2b564:	210f      	movs	r1, #15
   2b566:	4620      	mov	r0, r4
   2b568:	f00f ff49 	bl	3b3fe <zcbor_map_end_encode>
	for (i = 0; ok && i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   2b56c:	3601      	adds	r6, #1
   2b56e:	e751      	b.n	2b414 <img_mgmt_state_read+0x2c>
				ok = zcbor_tstr_put_term(zse, vers_str);
   2b570:	a805      	add	r0, sp, #20
				vers_str[sizeof(vers_str) - 1] = '\0';
   2b572:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
				ok = zcbor_tstr_put_term(zse, vers_str);
   2b576:	f00d f8dd 	bl	38734 <strlen>
   2b57a:	a905      	add	r1, sp, #20
   2b57c:	4602      	mov	r2, r0
   2b57e:	e790      	b.n	2b4a2 <img_mgmt_state_read+0xba>
   2b580:	0003e045 	.word	0x0003e045
   2b584:	0003e089 	.word	0x0003e089
   2b588:	0003e04c 	.word	0x0003e04c
   2b58c:	0003e051 	.word	0x0003e051
   2b590:	0003e059 	.word	0x0003e059
   2b594:	0003e05f 	.word	0x0003e05f
   2b598:	0003e064 	.word	0x0003e064
   2b59c:	0003e06d 	.word	0x0003e06d
   2b5a0:	0003e075 	.word	0x0003e075
   2b5a4:	0003ce15 	.word	0x0003ce15
   2b5a8:	0003e07f 	.word	0x0003e07f

0002b5ac <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct smp_streamer *ctxt)
{
   2b5ac:	b530      	push	{r4, r5, lr}
   2b5ae:	b097      	sub	sp, #92	; 0x5c
	bool confirm = false;
   2b5b0:	2100      	movs	r1, #0
{
   2b5b2:	4604      	mov	r4, r0
	int rc;
	size_t decoded = 0;
	bool ok;
	struct zcbor_string zhash = { 0 };

	struct zcbor_map_decode_key_val image_list_decode[] = {
   2b5b4:	2218      	movs	r2, #24
   2b5b6:	a810      	add	r0, sp, #64	; 0x40
	struct zcbor_string zhash = { 0 };
   2b5b8:	e9cd 1102 	strd	r1, r1, [sp, #8]
	bool confirm = false;
   2b5bc:	f88d 1003 	strb.w	r1, [sp, #3]
	size_t decoded = 0;
   2b5c0:	9101      	str	r1, [sp, #4]
	struct zcbor_map_decode_key_val image_list_decode[] = {
   2b5c2:	f00d f905 	bl	387d0 <memset>
   2b5c6:	4b1e      	ldr	r3, [pc, #120]	; (2b640 <img_mgmt_state_write+0x94>)
   2b5c8:	930c      	str	r3, [sp, #48]	; 0x30
   2b5ca:	2304      	movs	r3, #4
   2b5cc:	930d      	str	r3, [sp, #52]	; 0x34
   2b5ce:	4b1d      	ldr	r3, [pc, #116]	; (2b644 <img_mgmt_state_write+0x98>)
		ZCBOR_MAP_DECODE_KEY_VAL(hash, zcbor_bstr_decode, &zhash),
		ZCBOR_MAP_DECODE_KEY_VAL(confirm, zcbor_bool_decode, &confirm)
	};

	zcbor_state_t *zsd = ctxt->reader->zs;
   2b5d0:	6860      	ldr	r0, [r4, #4]
	struct zcbor_string zhash = { 0 };
   2b5d2:	ad02      	add	r5, sp, #8
	struct zcbor_map_decode_key_val image_list_decode[] = {
   2b5d4:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
   2b5d8:	4b1b      	ldr	r3, [pc, #108]	; (2b648 <img_mgmt_state_write+0x9c>)
   2b5da:	9311      	str	r3, [sp, #68]	; 0x44
   2b5dc:	2307      	movs	r3, #7
   2b5de:	9312      	str	r3, [sp, #72]	; 0x48
   2b5e0:	4b1a      	ldr	r3, [pc, #104]	; (2b64c <img_mgmt_state_write+0xa0>)
   2b5e2:	9313      	str	r3, [sp, #76]	; 0x4c
   2b5e4:	f10d 0303 	add.w	r3, sp, #3
   2b5e8:	9314      	str	r3, [sp, #80]	; 0x50

	ok = zcbor_map_decode_bulk(zsd, image_list_decode,
   2b5ea:	2202      	movs	r2, #2
   2b5ec:	ab01      	add	r3, sp, #4
   2b5ee:	a90c      	add	r1, sp, #48	; 0x30
   2b5f0:	3004      	adds	r0, #4
   2b5f2:	f00e fcac 	bl	39f4e <zcbor_map_decode_bulk>
		ARRAY_SIZE(image_list_decode), &decoded) == 0;

	if (!ok) {
   2b5f6:	4605      	mov	r5, r0
   2b5f8:	b9b8      	cbnz	r0, 2b62a <img_mgmt_state_write+0x7e>
		return MGMT_ERR_EINVAL;
	}

	/* Determine which slot is being operated on. */
	if (zhash.len == 0) {
   2b5fa:	9a03      	ldr	r2, [sp, #12]
   2b5fc:	b94a      	cbnz	r2, 2b612 <img_mgmt_state_write+0x66>
		if (confirm) {
   2b5fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2b602:	b193      	cbz	r3, 2b62a <img_mgmt_state_write+0x7e>
		}
	}

	if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
		/* Confirm current setup. */
		rc = img_mgmt_state_confirm();
   2b604:	f00e fdda 	bl	3a1bc <img_mgmt_state_confirm>
	} else {
		rc = img_mgmt_state_set_pending(slot, confirm);
	}
	if (rc != 0) {
   2b608:	b980      	cbnz	r0, 2b62c <img_mgmt_state_write+0x80>
		return rc;
	}

	/* Send the current image state in the response. */
	rc = img_mgmt_state_read(ctxt);
   2b60a:	4620      	mov	r0, r4
   2b60c:	f7ff feec 	bl	2b3e8 <img_mgmt_state_read>
	if (rc != 0) {
   2b610:	e00c      	b.n	2b62c <img_mgmt_state_write+0x80>
	} else if (zhash.len != IMAGE_HASH_LEN) {
   2b612:	2a20      	cmp	r2, #32
   2b614:	d109      	bne.n	2b62a <img_mgmt_state_write+0x7e>
		memcpy(hash, zhash.value, zhash.len);
   2b616:	9902      	ldr	r1, [sp, #8]
   2b618:	a804      	add	r0, sp, #16
   2b61a:	f00d f8ce 	bl	387ba <memcpy>
		slot = img_mgmt_find_by_hash(hash, NULL);
   2b61e:	4629      	mov	r1, r5
   2b620:	a804      	add	r0, sp, #16
   2b622:	f00e fdd3 	bl	3a1cc <img_mgmt_find_by_hash>
		if (slot < 0) {
   2b626:	2800      	cmp	r0, #0
   2b628:	da02      	bge.n	2b630 <img_mgmt_state_write+0x84>
		return MGMT_ERR_EINVAL;
   2b62a:	2003      	movs	r0, #3
		return rc;
	}

	return 0;
}
   2b62c:	b017      	add	sp, #92	; 0x5c
   2b62e:	bd30      	pop	{r4, r5, pc}
	if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
   2b630:	f89d 1003 	ldrb.w	r1, [sp, #3]
   2b634:	d101      	bne.n	2b63a <img_mgmt_state_write+0x8e>
   2b636:	2900      	cmp	r1, #0
   2b638:	d1e4      	bne.n	2b604 <img_mgmt_state_write+0x58>
		rc = img_mgmt_state_set_pending(slot, confirm);
   2b63a:	f00e fda2 	bl	3a182 <img_mgmt_state_set_pending>
   2b63e:	e7e3      	b.n	2b608 <img_mgmt_state_write+0x5c>
   2b640:	0003e05f 	.word	0x0003e05f
   2b644:	0003b1dd 	.word	0x0003b1dd
   2b648:	0003e095 	.word	0x0003e095
   2b64c:	0003b221 	.word	0x0003b221

0002b650 <img_mgmt_ver_str>:
#include <zephyr/mgmt/mcumgr/grp/img_mgmt/img_mgmt.h>
#include <zephyr/mgmt/mcumgr/grp/img_mgmt/image.h>

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   2b650:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int rc = 0;
	int rc1 = 0;

	rc = snprintf(dst, IMG_MGMT_VER_MAX_STR_LEN, "%hu.%hu.%hu",
   2b652:	8843      	ldrh	r3, [r0, #2]
   2b654:	9301      	str	r3, [sp, #4]
   2b656:	7843      	ldrb	r3, [r0, #1]
   2b658:	9300      	str	r3, [sp, #0]
{
   2b65a:	460e      	mov	r6, r1
	rc = snprintf(dst, IMG_MGMT_VER_MAX_STR_LEN, "%hu.%hu.%hu",
   2b65c:	7803      	ldrb	r3, [r0, #0]
   2b65e:	4a0c      	ldr	r2, [pc, #48]	; (2b690 <img_mgmt_ver_str+0x40>)
{
   2b660:	4605      	mov	r5, r0
	rc = snprintf(dst, IMG_MGMT_VER_MAX_STR_LEN, "%hu.%hu.%hu",
   2b662:	2119      	movs	r1, #25
   2b664:	4630      	mov	r0, r6
   2b666:	f7fa fbed 	bl	25e44 <snprintf>
		(uint16_t)ver->iv_major, (uint16_t)ver->iv_minor,
		ver->iv_revision);

	if (rc >= 0 && ver->iv_build_num != 0) {
   2b66a:	1e04      	subs	r4, r0, #0
   2b66c:	da03      	bge.n	2b676 <img_mgmt_ver_str+0x26>

	if (rc1 >= 0 && rc >= 0) {
		rc = rc + rc1;
	} else {
		/* If any failed then all failed */
		rc = -1;
   2b66e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return rc;
}
   2b672:	b002      	add	sp, #8
   2b674:	bd70      	pop	{r4, r5, r6, pc}
	if (rc >= 0 && ver->iv_build_num != 0) {
   2b676:	686b      	ldr	r3, [r5, #4]
   2b678:	b13b      	cbz	r3, 2b68a <img_mgmt_ver_str+0x3a>
		rc1 = snprintf(&dst[rc], IMG_MGMT_VER_MAX_STR_LEN - rc, ".%u",
   2b67a:	4a06      	ldr	r2, [pc, #24]	; (2b694 <img_mgmt_ver_str+0x44>)
   2b67c:	f1c4 0119 	rsb	r1, r4, #25
   2b680:	1930      	adds	r0, r6, r4
   2b682:	f7fa fbdf 	bl	25e44 <snprintf>
	if (rc1 >= 0 && rc >= 0) {
   2b686:	1e03      	subs	r3, r0, #0
   2b688:	dbf1      	blt.n	2b66e <img_mgmt_ver_str+0x1e>
		rc = rc + rc1;
   2b68a:	18e0      	adds	r0, r4, r3
	return rc;
   2b68c:	e7f1      	b.n	2b672 <img_mgmt_ver_str+0x22>
   2b68e:	bf00      	nop
   2b690:	0003e09d 	.word	0x0003e09d
   2b694:	0003e0a9 	.word	0x0003e0a9

0002b698 <img_mgmt_register_group>:
	.mg_group_id = MGMT_GROUP_ID_IMAGE,
};

static void img_mgmt_register_group(void)
{
	mgmt_register_group(&img_mgmt_group);
   2b698:	4801      	ldr	r0, [pc, #4]	; (2b6a0 <img_mgmt_register_group+0x8>)
   2b69a:	f7ff bd31 	b.w	2b100 <mgmt_register_group>
   2b69e:	bf00      	nop
   2b6a0:	20000748 	.word	0x20000748

0002b6a4 <img_mgmt_upload_good_rsp.isra.0>:
img_mgmt_upload_good_rsp(struct smp_streamer *ctxt)
   2b6a4:	b513      	push	{r0, r1, r4, lr}

	return zcbor_bstr_encode(state, &zs);
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, const char *ptr, size_t len)
{
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2b6a6:	4b11      	ldr	r3, [pc, #68]	; (2b6ec <img_mgmt_upload_good_rsp.isra.0+0x48>)
   2b6a8:	9300      	str	r3, [sp, #0]
	zcbor_state_t *zse = ctxt->writer->zs;
   2b6aa:	1d04      	adds	r4, r0, #4
   2b6ac:	2302      	movs	r3, #2

	return zcbor_tstr_encode(state, &zs);
   2b6ae:	4669      	mov	r1, sp
   2b6b0:	4620      	mov	r0, r4
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2b6b2:	9301      	str	r3, [sp, #4]
	return zcbor_tstr_encode(state, &zs);
   2b6b4:	f00f fe94 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_tstr_put_lit(zse, "off")			&&
   2b6b8:	b198      	cbz	r0, 2b6e2 <img_mgmt_upload_good_rsp.isra.0+0x3e>
	     zcbor_int32_put(zse, MGMT_ERR_EOK)			&&
   2b6ba:	2100      	movs	r1, #0
   2b6bc:	4620      	mov	r0, r4
   2b6be:	f00f fe74 	bl	3b3aa <zcbor_int32_put>
	ok = zcbor_tstr_put_lit(zse, "rc")			&&
   2b6c2:	b170      	cbz	r0, 2b6e2 <img_mgmt_upload_good_rsp.isra.0+0x3e>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2b6c4:	4b0a      	ldr	r3, [pc, #40]	; (2b6f0 <img_mgmt_upload_good_rsp.isra.0+0x4c>)
   2b6c6:	9300      	str	r3, [sp, #0]
	return zcbor_tstr_encode(state, &zs);
   2b6c8:	4669      	mov	r1, sp
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2b6ca:	2303      	movs	r3, #3
	return zcbor_tstr_encode(state, &zs);
   2b6cc:	4620      	mov	r0, r4
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2b6ce:	9301      	str	r3, [sp, #4]
	return zcbor_tstr_encode(state, &zs);
   2b6d0:	f00f fe86 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_int32_put(zse, MGMT_ERR_EOK)			&&
   2b6d4:	b128      	cbz	r0, 2b6e2 <img_mgmt_upload_good_rsp.isra.0+0x3e>
	     zcbor_size_put(zse, g_img_mgmt_state.off);
   2b6d6:	4b07      	ldr	r3, [pc, #28]	; (2b6f4 <img_mgmt_upload_good_rsp.isra.0+0x50>)
   2b6d8:	4620      	mov	r0, r4
   2b6da:	6859      	ldr	r1, [r3, #4]
   2b6dc:	f00f fe7b 	bl	3b3d6 <zcbor_size_put>
	     zcbor_tstr_put_lit(zse, "off")			&&
   2b6e0:	b910      	cbnz	r0, 2b6e8 <img_mgmt_upload_good_rsp.isra.0+0x44>
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   2b6e2:	2007      	movs	r0, #7
}
   2b6e4:	b002      	add	sp, #8
   2b6e6:	bd10      	pop	{r4, pc}
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   2b6e8:	2000      	movs	r0, #0
   2b6ea:	e7fb      	b.n	2b6e4 <img_mgmt_upload_good_rsp.isra.0+0x40>
   2b6ec:	0003e0ad 	.word	0x0003e0ad
   2b6f0:	0003ce26 	.word	0x0003ce26
   2b6f4:	20003e70 	.word	0x20003e70

0002b6f8 <img_mgmt_read_info>:
{
   2b6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b6fc:	b08b      	sub	sp, #44	; 0x2c
   2b6fe:	460c      	mov	r4, r1
	rc = img_mgmt_erased_val(image_slot, &erased_val);
   2b700:	f10d 0103 	add.w	r1, sp, #3
{
   2b704:	4606      	mov	r6, r0
   2b706:	4617      	mov	r7, r2
   2b708:	461d      	mov	r5, r3
	rc = img_mgmt_erased_val(image_slot, &erased_val);
   2b70a:	f00e fce1 	bl	3a0d0 <img_mgmt_erased_val>
	if (rc != 0) {
   2b70e:	4601      	mov	r1, r0
   2b710:	2800      	cmp	r0, #0
   2b712:	d168      	bne.n	2b7e6 <img_mgmt_read_info+0xee>
	rc = img_mgmt_read(image_slot, 0, &hdr, sizeof(hdr));
   2b714:	2320      	movs	r3, #32
   2b716:	aa02      	add	r2, sp, #8
   2b718:	4630      	mov	r0, r6
   2b71a:	f00e fcba 	bl	3a092 <img_mgmt_read>
	if (rc != 0) {
   2b71e:	2800      	cmp	r0, #0
   2b720:	d161      	bne.n	2b7e6 <img_mgmt_read_info+0xee>
	if (ver != NULL) {
   2b722:	f89d 1003 	ldrb.w	r1, [sp, #3]
   2b726:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 2b820 <img_mgmt_read_info+0x128>
   2b72a:	bba4      	cbnz	r4, 2b796 <img_mgmt_read_info+0x9e>
	if (hdr.ih_magic == IMAGE_MAGIC) {
   2b72c:	9b02      	ldr	r3, [sp, #8]
   2b72e:	4543      	cmp	r3, r8
   2b730:	d140      	bne.n	2b7b4 <img_mgmt_read_info+0xbc>
	if (flags != NULL) {
   2b732:	b10d      	cbz	r5, 2b738 <img_mgmt_read_info+0x40>
		*flags = hdr.ih_flags;
   2b734:	9b06      	ldr	r3, [sp, #24]
   2b736:	602b      	str	r3, [r5, #0]
	data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   2b738:	9b05      	ldr	r3, [sp, #20]
   2b73a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2b73e:	441c      	add	r4, r3
	rc = img_mgmt_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   2b740:	2304      	movs	r3, #4
   2b742:	eb0d 0203 	add.w	r2, sp, r3
   2b746:	4621      	mov	r1, r4
   2b748:	4630      	mov	r0, r6
   2b74a:	f00e fca2 	bl	3a092 <img_mgmt_read>
	if (rc != 0) {
   2b74e:	b940      	cbnz	r0, 2b762 <img_mgmt_read_info+0x6a>
	if (tlv_info.it_magic != magic) {
   2b750:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   2b754:	f646 1308 	movw	r3, #26888	; 0x6908
   2b758:	429a      	cmp	r2, r3
	*end_off = *start_off + tlv_info.it_tlv_tot;
   2b75a:	bf04      	itt	eq
   2b75c:	f8bd 3006 	ldrheq.w	r3, [sp, #6]
		data_off = data_end - sizeof(struct image_tlv_info);
   2b760:	18e4      	addeq	r4, r4, r3
	rc = img_mgmt_read(slot, *start_off, &tlv_info, sizeof(tlv_info));
   2b762:	2304      	movs	r3, #4
   2b764:	eb0d 0203 	add.w	r2, sp, r3
   2b768:	4621      	mov	r1, r4
   2b76a:	4630      	mov	r0, r6
   2b76c:	f00e fc91 	bl	3a092 <img_mgmt_read>
	if (rc != 0) {
   2b770:	4605      	mov	r5, r0
   2b772:	bbc0      	cbnz	r0, 2b7e6 <img_mgmt_read_info+0xee>
	if (tlv_info.it_magic != magic) {
   2b774:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   2b778:	f646 1307 	movw	r3, #26887	; 0x6907
   2b77c:	429a      	cmp	r2, r3
   2b77e:	d132      	bne.n	2b7e6 <img_mgmt_read_info+0xee>
	*end_off = *start_off + tlv_info.it_tlv_tot;
   2b780:	f8bd 8006 	ldrh.w	r8, [sp, #6]
	*start_off += sizeof(tlv_info);
   2b784:	3404      	adds	r4, #4
	*end_off = *start_off + tlv_info.it_tlv_tot;
   2b786:	44a0      	add	r8, r4
	while (data_off + sizeof(tlv) <= data_end) {
   2b788:	f104 0904 	add.w	r9, r4, #4
   2b78c:	45c1      	cmp	r9, r8
   2b78e:	d918      	bls.n	2b7c2 <img_mgmt_read_info+0xca>
	if (!hash_found) {
   2b790:	f085 0001 	eor.w	r0, r5, #1
   2b794:	e028      	b.n	2b7e8 <img_mgmt_read_info+0xf0>
		memset(ver, erased_val, sizeof(*ver));
   2b796:	2208      	movs	r2, #8
   2b798:	4620      	mov	r0, r4
   2b79a:	f00d f819 	bl	387d0 <memset>
	if (hdr.ih_magic == IMAGE_MAGIC) {
   2b79e:	9b02      	ldr	r3, [sp, #8]
	erased_val_32 = ERASED_VAL_32(erased_val);
   2b7a0:	f89d 1003 	ldrb.w	r1, [sp, #3]
	if (hdr.ih_magic == IMAGE_MAGIC) {
   2b7a4:	4543      	cmp	r3, r8
   2b7a6:	d105      	bne.n	2b7b4 <img_mgmt_read_info+0xbc>
			memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   2b7a8:	2208      	movs	r2, #8
   2b7aa:	a907      	add	r1, sp, #28
   2b7ac:	4620      	mov	r0, r4
   2b7ae:	f00d f804 	bl	387ba <memcpy>
   2b7b2:	e7be      	b.n	2b732 <img_mgmt_read_info+0x3a>
	} else if (hdr.ih_magic == erased_val_32) {
   2b7b4:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
   2b7b8:	4351      	muls	r1, r2
   2b7ba:	4299      	cmp	r1, r3
   2b7bc:	d113      	bne.n	2b7e6 <img_mgmt_read_info+0xee>
		return MGMT_ERR_ENOENT;
   2b7be:	2005      	movs	r0, #5
   2b7c0:	e012      	b.n	2b7e8 <img_mgmt_read_info+0xf0>
		rc = img_mgmt_read(image_slot, data_off, &tlv, sizeof(tlv));
   2b7c2:	2304      	movs	r3, #4
   2b7c4:	eb0d 0203 	add.w	r2, sp, r3
   2b7c8:	4621      	mov	r1, r4
   2b7ca:	4630      	mov	r0, r6
   2b7cc:	f00e fc61 	bl	3a092 <img_mgmt_read>
		if (rc != 0) {
   2b7d0:	b948      	cbnz	r0, 2b7e6 <img_mgmt_read_info+0xee>
		if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   2b7d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2b7d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2b7da:	2aff      	cmp	r2, #255	; 0xff
   2b7dc:	d107      	bne.n	2b7ee <img_mgmt_read_info+0xf6>
   2b7de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b7e2:	4293      	cmp	r3, r2
   2b7e4:	d107      	bne.n	2b7f6 <img_mgmt_read_info+0xfe>
		return MGMT_ERR_EUNKNOWN;
   2b7e6:	2001      	movs	r0, #1
}
   2b7e8:	b00b      	add	sp, #44	; 0x2c
   2b7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   2b7ee:	2a10      	cmp	r2, #16
   2b7f0:	d101      	bne.n	2b7f6 <img_mgmt_read_info+0xfe>
   2b7f2:	2b20      	cmp	r3, #32
   2b7f4:	d004      	beq.n	2b800 <img_mgmt_read_info+0x108>
			data_off += sizeof(tlv) + tlv.it_len;
   2b7f6:	3304      	adds	r3, #4
   2b7f8:	eb03 0904 	add.w	r9, r3, r4
		hash_found = true;
   2b7fc:	464c      	mov	r4, r9
   2b7fe:	e7c3      	b.n	2b788 <img_mgmt_read_info+0x90>
		if (hash_found) {
   2b800:	2d00      	cmp	r5, #0
   2b802:	d1f0      	bne.n	2b7e6 <img_mgmt_read_info+0xee>
		if (hash != NULL) {
   2b804:	b90f      	cbnz	r7, 2b80a <img_mgmt_read_info+0x112>
		hash_found = true;
   2b806:	2501      	movs	r5, #1
   2b808:	e7f8      	b.n	2b7fc <img_mgmt_read_info+0x104>
			if (data_off + IMAGE_HASH_LEN > data_end) {
   2b80a:	3424      	adds	r4, #36	; 0x24
   2b80c:	4544      	cmp	r4, r8
   2b80e:	d8ea      	bhi.n	2b7e6 <img_mgmt_read_info+0xee>
			rc = img_mgmt_read(image_slot, data_off, hash,
   2b810:	463a      	mov	r2, r7
   2b812:	4649      	mov	r1, r9
   2b814:	4630      	mov	r0, r6
   2b816:	f00e fc3c 	bl	3a092 <img_mgmt_read>
			if (rc != 0) {
   2b81a:	2800      	cmp	r0, #0
   2b81c:	d0f3      	beq.n	2b806 <img_mgmt_read_info+0x10e>
   2b81e:	e7e2      	b.n	2b7e6 <img_mgmt_read_info+0xee>
   2b820:	96f3b83d 	.word	0x96f3b83d

0002b824 <img_mgmt_reset_upload>:
{
   2b824:	b510      	push	{r4, lr}
	memset(&g_img_mgmt_state, 0, sizeof(g_img_mgmt_state));
   2b826:	4c05      	ldr	r4, [pc, #20]	; (2b83c <img_mgmt_reset_upload+0x18>)
   2b828:	2230      	movs	r2, #48	; 0x30
   2b82a:	2100      	movs	r1, #0
   2b82c:	4620      	mov	r0, r4
   2b82e:	f00c ffcf 	bl	387d0 <memset>
	g_img_mgmt_state.area_id = -1;
   2b832:	f04f 33ff 	mov.w	r3, #4294967295
   2b836:	6023      	str	r3, [r4, #0]
}
   2b838:	bd10      	pop	{r4, pc}
   2b83a:	bf00      	nop
   2b83c:	20003e70 	.word	0x20003e70

0002b840 <img_mgmt_erase>:
{
   2b840:	b530      	push	{r4, r5, lr}
   2b842:	b08d      	sub	sp, #52	; 0x34
	size_t decoded = 0;
   2b844:	2300      	movs	r3, #0
   2b846:	2201      	movs	r2, #1
   2b848:	e9cd 2301 	strd	r2, r3, [sp, #4]
	struct zcbor_map_decode_key_val image_erase_decode[] = {
   2b84c:	930b      	str	r3, [sp, #44]	; 0x2c
   2b84e:	4b1d      	ldr	r3, [pc, #116]	; (2b8c4 <img_mgmt_erase+0x84>)
   2b850:	9307      	str	r3, [sp, #28]
	zcbor_state_t *zse = ctxt->writer->zs;
   2b852:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
	struct zcbor_map_decode_key_val image_erase_decode[] = {
   2b856:	2304      	movs	r3, #4
   2b858:	9308      	str	r3, [sp, #32]
   2b85a:	4b1b      	ldr	r3, [pc, #108]	; (2b8c8 <img_mgmt_erase+0x88>)
   2b85c:	9309      	str	r3, [sp, #36]	; 0x24
   2b85e:	ab01      	add	r3, sp, #4
   2b860:	930a      	str	r3, [sp, #40]	; 0x28
	ok = zcbor_map_decode_bulk(zsd, image_erase_decode,
   2b862:	a907      	add	r1, sp, #28
   2b864:	ab02      	add	r3, sp, #8
   2b866:	1d20      	adds	r0, r4, #4
   2b868:	f00e fb71 	bl	39f4e <zcbor_map_decode_bulk>
	if (!ok) {
   2b86c:	4603      	mov	r3, r0
   2b86e:	bb30      	cbnz	r0, 2b8be <img_mgmt_erase+0x7e>
	rc = img_mgmt_read_info(slot, &ver, NULL, NULL);
   2b870:	4602      	mov	r2, r0
   2b872:	a903      	add	r1, sp, #12
   2b874:	9801      	ldr	r0, [sp, #4]
   2b876:	f7ff ff3f 	bl	2b6f8 <img_mgmt_read_info>
	if (rc == 0) {
   2b87a:	b1c8      	cbz	r0, 2b8b0 <img_mgmt_erase+0x70>
	rc = img_mgmt_erase_slot(slot);
   2b87c:	9801      	ldr	r0, [sp, #4]
   2b87e:	f00e fbd7 	bl	3a030 <img_mgmt_erase_slot>
   2b882:	4604      	mov	r4, r0
	img_mgmt_reset_upload();
   2b884:	f7ff ffce 	bl	2b824 <img_mgmt_reset_upload>
	if (rc != 0) {
   2b888:	b97c      	cbnz	r4, 2b8aa <img_mgmt_erase+0x6a>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2b88a:	4b10      	ldr	r3, [pc, #64]	; (2b8cc <img_mgmt_erase+0x8c>)
   2b88c:	9305      	str	r3, [sp, #20]
	zcbor_state_t *zse = ctxt->writer->zs;
   2b88e:	3504      	adds	r5, #4
   2b890:	2302      	movs	r3, #2
	return zcbor_tstr_encode(state, &zs);
   2b892:	a905      	add	r1, sp, #20
   2b894:	4628      	mov	r0, r5
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2b896:	9306      	str	r3, [sp, #24]
	return zcbor_tstr_encode(state, &zs);
   2b898:	f00f fda2 	bl	3b3e0 <zcbor_tstr_encode>
	if (zcbor_tstr_put_lit(zse, "rc") && zcbor_int32_put(zse, 0)) {
   2b89c:	b120      	cbz	r0, 2b8a8 <img_mgmt_erase+0x68>
   2b89e:	4621      	mov	r1, r4
   2b8a0:	4628      	mov	r0, r5
   2b8a2:	f00f fd82 	bl	3b3aa <zcbor_int32_put>
   2b8a6:	b900      	cbnz	r0, 2b8aa <img_mgmt_erase+0x6a>
	return MGMT_ERR_EMSGSIZE;
   2b8a8:	2407      	movs	r4, #7
}
   2b8aa:	4620      	mov	r0, r4
   2b8ac:	b00d      	add	sp, #52	; 0x34
   2b8ae:	bd30      	pop	{r4, r5, pc}
		if (img_mgmt_slot_in_use(slot)) {
   2b8b0:	9801      	ldr	r0, [sp, #4]
   2b8b2:	f00e fc5e 	bl	3a172 <img_mgmt_slot_in_use>
   2b8b6:	2800      	cmp	r0, #0
   2b8b8:	d0e0      	beq.n	2b87c <img_mgmt_erase+0x3c>
			return MGMT_ERR_EBADSTATE;
   2b8ba:	2406      	movs	r4, #6
   2b8bc:	e7f5      	b.n	2b8aa <img_mgmt_erase+0x6a>
		return MGMT_ERR_EINVAL;
   2b8be:	2403      	movs	r4, #3
   2b8c0:	e7f3      	b.n	2b8aa <img_mgmt_erase+0x6a>
   2b8c2:	bf00      	nop
   2b8c4:	0003e04c 	.word	0x0003e04c
   2b8c8:	0003b1b9 	.word	0x0003b1b9
   2b8cc:	0003e0ad 	.word	0x0003e0ad

0002b8d0 <img_mgmt_upload>:
{
   2b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b8d2:	b0b7      	sub	sp, #220	; 0xdc
	size_t decoded = 0;
   2b8d4:	2400      	movs	r4, #0
	struct img_mgmt_upload_req req = {
   2b8d6:	ad08      	add	r5, sp, #32
	zcbor_state_t *zsd = ctxt->reader->zs;
   2b8d8:	6847      	ldr	r7, [r0, #4]
	size_t decoded = 0;
   2b8da:	9401      	str	r4, [sp, #4]
	struct img_mgmt_upload_req req = {
   2b8dc:	4621      	mov	r1, r4
   2b8de:	2220      	movs	r2, #32
{
   2b8e0:	4606      	mov	r6, r0
	struct img_mgmt_upload_req req = {
   2b8e2:	4628      	mov	r0, r5
   2b8e4:	f00c ff74 	bl	387d0 <memset>
   2b8e8:	f04f 33ff 	mov.w	r3, #4294967295
	struct zcbor_map_decode_key_val image_upload_decode[] = {
   2b8ec:	4621      	mov	r1, r4
   2b8ee:	2268      	movs	r2, #104	; 0x68
   2b8f0:	a81c      	add	r0, sp, #112	; 0x70
	struct img_mgmt_upload_req req = {
   2b8f2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	struct zcbor_map_decode_key_val image_upload_decode[] = {
   2b8f6:	f00c ff6b 	bl	387d0 <memset>
   2b8fa:	4b4d      	ldr	r3, [pc, #308]	; (2ba30 <img_mgmt_upload+0x160>)
   2b8fc:	9318      	str	r3, [sp, #96]	; 0x60
   2b8fe:	2305      	movs	r3, #5
   2b900:	9319      	str	r3, [sp, #100]	; 0x64
   2b902:	4b4c      	ldr	r3, [pc, #304]	; (2ba34 <img_mgmt_upload+0x164>)
   2b904:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
   2b908:	4b4b      	ldr	r3, [pc, #300]	; (2ba38 <img_mgmt_upload+0x168>)
   2b90a:	931d      	str	r3, [sp, #116]	; 0x74
   2b90c:	2304      	movs	r3, #4
   2b90e:	aa0b      	add	r2, sp, #44	; 0x2c
   2b910:	931e      	str	r3, [sp, #120]	; 0x78
   2b912:	4b4a      	ldr	r3, [pc, #296]	; (2ba3c <img_mgmt_upload+0x16c>)
   2b914:	931f      	str	r3, [sp, #124]	; 0x7c
   2b916:	9220      	str	r2, [sp, #128]	; 0x80
   2b918:	932e      	str	r3, [sp, #184]	; 0xb8
   2b91a:	4a49      	ldr	r2, [pc, #292]	; (2ba40 <img_mgmt_upload+0x170>)
   2b91c:	9222      	str	r2, [sp, #136]	; 0x88
   2b91e:	ab0d      	add	r3, sp, #52	; 0x34
   2b920:	4a48      	ldr	r2, [pc, #288]	; (2ba44 <img_mgmt_upload+0x174>)
   2b922:	932f      	str	r3, [sp, #188]	; 0xbc
   2b924:	4b48      	ldr	r3, [pc, #288]	; (2ba48 <img_mgmt_upload+0x178>)
   2b926:	9224      	str	r2, [sp, #144]	; 0x90
   2b928:	a90a      	add	r1, sp, #40	; 0x28
   2b92a:	9229      	str	r2, [sp, #164]	; 0xa4
   2b92c:	9331      	str	r3, [sp, #196]	; 0xc4
   2b92e:	aa09      	add	r2, sp, #36	; 0x24
   2b930:	2307      	movs	r3, #7
   2b932:	9125      	str	r1, [sp, #148]	; 0x94
   2b934:	922a      	str	r2, [sp, #168]	; 0xa8
   2b936:	4945      	ldr	r1, [pc, #276]	; (2ba4c <img_mgmt_upload+0x17c>)
   2b938:	4a45      	ldr	r2, [pc, #276]	; (2ba50 <img_mgmt_upload+0x180>)
   2b93a:	9332      	str	r3, [sp, #200]	; 0xc8
   2b93c:	4b45      	ldr	r3, [pc, #276]	; (2ba54 <img_mgmt_upload+0x184>)
   2b93e:	9333      	str	r3, [sp, #204]	; 0xcc
   2b940:	2403      	movs	r4, #3
   2b942:	ab0f      	add	r3, sp, #60	; 0x3c
	zcbor_state_t *zsd = ctxt->reader->zs;
   2b944:	3704      	adds	r7, #4
	struct zcbor_map_decode_key_val image_upload_decode[] = {
   2b946:	e9cd 1427 	strd	r1, r4, [sp, #156]	; 0x9c
   2b94a:	e9cd 242c 	strd	r2, r4, [sp, #176]	; 0xb0
   2b94e:	9334      	str	r3, [sp, #208]	; 0xd0
	ok = zcbor_map_decode_bulk(zsd, image_upload_decode,
   2b950:	2206      	movs	r2, #6
   2b952:	ab01      	add	r3, sp, #4
   2b954:	a918      	add	r1, sp, #96	; 0x60
   2b956:	4638      	mov	r0, r7
	struct zcbor_map_decode_key_val image_upload_decode[] = {
   2b958:	9423      	str	r4, [sp, #140]	; 0x8c
	ok = zcbor_map_decode_bulk(zsd, image_upload_decode,
   2b95a:	f00e faf8 	bl	39f4e <zcbor_map_decode_bulk>
	if (!ok) {
   2b95e:	2800      	cmp	r0, #0
   2b960:	d163      	bne.n	2ba2a <img_mgmt_upload+0x15a>
	rc = img_mgmt_upload_inspect(&req, &action);
   2b962:	a902      	add	r1, sp, #8
   2b964:	4628      	mov	r0, r5
   2b966:	f7ff fcbf 	bl	2b2e8 <img_mgmt_upload_inspect>
	if (rc != 0) {
   2b96a:	4604      	mov	r4, r0
   2b96c:	2800      	cmp	r0, #0
   2b96e:	d15c      	bne.n	2ba2a <img_mgmt_upload+0x15a>
	if (!action.proceed) {
   2b970:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2b974:	b923      	cbnz	r3, 2b980 <img_mgmt_upload+0xb0>
	rc = img_mgmt_upload_good_rsp(ctxt);
   2b976:	68b0      	ldr	r0, [r6, #8]
   2b978:	f7ff fe94 	bl	2b6a4 <img_mgmt_upload_good_rsp.isra.0>
   2b97c:	4604      	mov	r4, r0
	if (reset) {
   2b97e:	e054      	b.n	2ba2a <img_mgmt_upload+0x15a>
	g_img_mgmt_state.area_id = action.area_id;
   2b980:	4d35      	ldr	r5, [pc, #212]	; (2ba58 <img_mgmt_upload+0x188>)
   2b982:	9b05      	ldr	r3, [sp, #20]
	if (req.off == 0) {
   2b984:	9f09      	ldr	r7, [sp, #36]	; 0x24
	g_img_mgmt_state.area_id = action.area_id;
   2b986:	602b      	str	r3, [r5, #0]
	g_img_mgmt_state.size = action.size;
   2b988:	9b02      	ldr	r3, [sp, #8]
   2b98a:	60ab      	str	r3, [r5, #8]
	if (req.off == 0) {
   2b98c:	b15f      	cbz	r7, 2b9a6 <img_mgmt_upload+0xd6>
	if (req.img_data.len != 0) {
   2b98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   2b990:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	if (req.img_data.len != 0) {
   2b994:	bb53      	cbnz	r3, 2b9ec <img_mgmt_upload+0x11c>
	if (is_last || status != 0) {
   2b996:	428a      	cmp	r2, r1
   2b998:	d1ed      	bne.n	2b976 <img_mgmt_upload+0xa6>
		rc = img_mgmt_read_info(1, NULL, hash, NULL);
   2b99a:	aa10      	add	r2, sp, #64	; 0x40
   2b99c:	4619      	mov	r1, r3
   2b99e:	2001      	movs	r0, #1
   2b9a0:	f7ff feaa 	bl	2b6f8 <img_mgmt_read_info>
   2b9a4:	e7e7      	b.n	2b976 <img_mgmt_upload+0xa6>
		g_img_mgmt_state.data_sha_len = req.data_sha.len;
   2b9a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		memcpy(g_img_mgmt_state.data_sha, req.data_sha.value, req.data_sha.len);
   2b9a8:	990d      	ldr	r1, [sp, #52]	; 0x34
		g_img_mgmt_state.off = 0;
   2b9aa:	6068      	str	r0, [r5, #4]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha.value, req.data_sha.len);
   2b9ac:	f105 000d 	add.w	r0, r5, #13
		g_img_mgmt_state.data_sha_len = req.data_sha.len;
   2b9b0:	732a      	strb	r2, [r5, #12]
		memcpy(g_img_mgmt_state.data_sha, req.data_sha.value, req.data_sha.len);
   2b9b2:	f00c ff02 	bl	387ba <memcpy>
		memset(&g_img_mgmt_state.data_sha[req.data_sha.len], 0,
   2b9b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b9b8:	f102 000d 	add.w	r0, r2, #13
   2b9bc:	4621      	mov	r1, r4
   2b9be:	f1c2 0220 	rsb	r2, r2, #32
   2b9c2:	4428      	add	r0, r5
   2b9c4:	f00c ff04 	bl	387d0 <memset>
		if (action.erase) {
   2b9c8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2b9cc:	2b00      	cmp	r3, #0
   2b9ce:	d0de      	beq.n	2b98e <img_mgmt_upload+0xbe>
			rc = img_mgmt_erase_image_data(0, req.size);
   2b9d0:	4620      	mov	r0, r4
   2b9d2:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b9d4:	f7ff fbfe 	bl	2b1d4 <img_mgmt_erase_image_data>
			if (rc != 0) {
   2b9d8:	4604      	mov	r4, r0
   2b9da:	2800      	cmp	r0, #0
   2b9dc:	d0d7      	beq.n	2b98e <img_mgmt_upload+0xbe>
		rc = img_mgmt_read_info(1, NULL, hash, NULL);
   2b9de:	2300      	movs	r3, #0
   2b9e0:	aa10      	add	r2, sp, #64	; 0x40
   2b9e2:	4619      	mov	r1, r3
   2b9e4:	2001      	movs	r0, #1
   2b9e6:	f7ff fe87 	bl	2b6f8 <img_mgmt_read_info>
	if (rc != 0) {
   2b9ea:	e01e      	b.n	2ba2a <img_mgmt_upload+0x15a>
		if (g_img_mgmt_state.off + req.img_data.len == g_img_mgmt_state.size) {
   2b9ec:	440b      	add	r3, r1
		rc = img_mgmt_write_image_data(req.off, req.img_data.value, action.write_bytes,
   2b9ee:	1a9a      	subs	r2, r3, r2
   2b9f0:	4253      	negs	r3, r2
   2b9f2:	4153      	adcs	r3, r2
   2b9f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b9f6:	9a04      	ldr	r2, [sp, #16]
   2b9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b9fa:	f7ff fbcf 	bl	2b19c <img_mgmt_write_image_data>
		if (rc == 0) {
   2b9fe:	4604      	mov	r4, r0
   2ba00:	2800      	cmp	r0, #0
   2ba02:	d1ec      	bne.n	2b9de <img_mgmt_upload+0x10e>
			g_img_mgmt_state.off += action.write_bytes;
   2ba04:	686b      	ldr	r3, [r5, #4]
   2ba06:	9a04      	ldr	r2, [sp, #16]
   2ba08:	4413      	add	r3, r2
		if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   2ba0a:	68aa      	ldr	r2, [r5, #8]
			g_img_mgmt_state.off += action.write_bytes;
   2ba0c:	606b      	str	r3, [r5, #4]
		if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   2ba0e:	4293      	cmp	r3, r2
   2ba10:	d1b1      	bne.n	2b976 <img_mgmt_upload+0xa6>
		rc = img_mgmt_read_info(1, NULL, hash, NULL);
   2ba12:	4603      	mov	r3, r0
   2ba14:	4601      	mov	r1, r0
   2ba16:	aa10      	add	r2, sp, #64	; 0x40
   2ba18:	2001      	movs	r0, #1
   2ba1a:	f7ff fe6d 	bl	2b6f8 <img_mgmt_read_info>
	rc = img_mgmt_upload_good_rsp(ctxt);
   2ba1e:	68b0      	ldr	r0, [r6, #8]
   2ba20:	f7ff fe40 	bl	2b6a4 <img_mgmt_upload_good_rsp.isra.0>
   2ba24:	4604      	mov	r4, r0
		img_mgmt_reset_upload();
   2ba26:	f7ff fefd 	bl	2b824 <img_mgmt_reset_upload>
}
   2ba2a:	4620      	mov	r0, r4
   2ba2c:	b037      	add	sp, #220	; 0xdc
   2ba2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ba30:	0003e0b0 	.word	0x0003e0b0
   2ba34:	0003b1b9 	.word	0x0003b1b9
   2ba38:	0003e0b6 	.word	0x0003e0b6
   2ba3c:	0003b1dd 	.word	0x0003b1dd
   2ba40:	0003e0bb 	.word	0x0003e0bb
   2ba44:	0003b1d7 	.word	0x0003b1d7
   2ba48:	0003e0c3 	.word	0x0003e0c3
   2ba4c:	0003ce26 	.word	0x0003ce26
   2ba50:	0003e0bf 	.word	0x0003e0bf
   2ba54:	0003b221 	.word	0x0003b221
   2ba58:	20003e70 	.word	0x20003e70

0002ba5c <os_mgmt_reset_cb>:
}

static void os_mgmt_reset_cb(struct k_timer *timer)
{
	/* Reboot the system from the system workqueue thread. */
	k_work_submit(&os_mgmt_reset_work);
   2ba5c:	4801      	ldr	r0, [pc, #4]	; (2ba64 <os_mgmt_reset_cb+0x8>)
   2ba5e:	f006 bfb9 	b.w	329d4 <k_work_submit>
   2ba62:	bf00      	nop
   2ba64:	20000760 	.word	0x20000760

0002ba68 <os_mgmt_register_group>:
	.mg_group_id = MGMT_GROUP_ID_OS,
};

static void os_mgmt_register_group(void)
{
	mgmt_register_group(&os_mgmt_group);
   2ba68:	4801      	ldr	r0, [pc, #4]	; (2ba70 <os_mgmt_register_group+0x8>)
   2ba6a:	f7ff bb49 	b.w	2b100 <mgmt_register_group>
   2ba6e:	bf00      	nop
   2ba70:	20000754 	.word	0x20000754

0002ba74 <os_mgmt_taskstat_read>:
{
   2ba74:	b530      	push	{r4, r5, lr}
   2ba76:	b087      	sub	sp, #28
	zcbor_state_t *zse = ctxt->writer->zs;
   2ba78:	6884      	ldr	r4, [r0, #8]
	struct thread_iterator_info iterator_ctx = {
   2ba7a:	2301      	movs	r3, #1
	zcbor_state_t *zse = ctxt->writer->zs;
   2ba7c:	3404      	adds	r4, #4
	struct thread_iterator_info iterator_ctx = {
   2ba7e:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2ba82:	4b10      	ldr	r3, [pc, #64]	; (2bac4 <os_mgmt_taskstat_read+0x50>)
   2ba84:	9301      	str	r3, [sp, #4]
	return zcbor_tstr_encode(state, &zs);
   2ba86:	a901      	add	r1, sp, #4
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2ba88:	2305      	movs	r3, #5
   2ba8a:	2500      	movs	r5, #0
	return zcbor_tstr_encode(state, &zs);
   2ba8c:	4620      	mov	r0, r4
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2ba8e:	9302      	str	r3, [sp, #8]
   2ba90:	9403      	str	r4, [sp, #12]
   2ba92:	9504      	str	r5, [sp, #16]
	return zcbor_tstr_encode(state, &zs);
   2ba94:	f00f fca4 	bl	3b3e0 <zcbor_tstr_encode>
	zcbor_map_start_encode(zse, CONFIG_OS_MGMT_TASKSTAT_MAX_NUM_THREADS);
   2ba98:	2132      	movs	r1, #50	; 0x32
   2ba9a:	4620      	mov	r0, r4
   2ba9c:	f00f fca7 	bl	3b3ee <zcbor_map_start_encode>
	k_thread_foreach(os_mgmt_taskstat_encode_one, (void *)&iterator_ctx);
   2baa0:	4809      	ldr	r0, [pc, #36]	; (2bac8 <os_mgmt_taskstat_read+0x54>)
   2baa2:	a903      	add	r1, sp, #12
   2baa4:	f006 f86e 	bl	31b84 <k_thread_foreach>
	if (!iterator_ctx.ok ||
   2baa8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2baac:	b123      	cbz	r3, 2bab8 <os_mgmt_taskstat_read+0x44>
	    !zcbor_map_end_encode(zse, CONFIG_OS_MGMT_TASKSTAT_MAX_NUM_THREADS)) {
   2baae:	2132      	movs	r1, #50	; 0x32
   2bab0:	4620      	mov	r0, r4
   2bab2:	f00f fca4 	bl	3b3fe <zcbor_map_end_encode>
	if (!iterator_ctx.ok ||
   2bab6:	b910      	cbnz	r0, 2babe <os_mgmt_taskstat_read+0x4a>
		return MGMT_ERR_EMSGSIZE;
   2bab8:	2007      	movs	r0, #7
}
   2baba:	b007      	add	sp, #28
   2babc:	bd30      	pop	{r4, r5, pc}
	return 0;
   2babe:	4628      	mov	r0, r5
   2bac0:	e7fb      	b.n	2baba <os_mgmt_taskstat_read+0x46>
   2bac2:	bf00      	nop
   2bac4:	0003e0cb 	.word	0x0003e0cb
   2bac8:	0002bb71 	.word	0x0002bb71

0002bacc <os_mgmt_reset>:
{
   2bacc:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
   2bace:	2200      	movs	r2, #0
   2bad0:	2300      	movs	r3, #0
   2bad2:	e9cd 2300 	strd	r2, r3, [sp]
   2bad6:	4805      	ldr	r0, [pc, #20]	; (2baec <os_mgmt_reset+0x20>)
   2bad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2badc:	2300      	movs	r3, #0
   2bade:	f008 fcdd 	bl	3449c <z_impl_k_timer_start>
}
   2bae2:	2000      	movs	r0, #0
   2bae4:	b003      	add	sp, #12
   2bae6:	f85d fb04 	ldr.w	pc, [sp], #4
   2baea:	bf00      	nop
   2baec:	20000a30 	.word	0x20000a30

0002baf0 <os_mgmt_echo>:
{
   2baf0:	b570      	push	{r4, r5, r6, lr}
	zcbor_state_t *zsd = ctxt->reader->zs;
   2baf2:	6844      	ldr	r4, [r0, #4]
	zcbor_state_t *zse = ctxt->writer->zs;
   2baf4:	6885      	ldr	r5, [r0, #8]
	zcbor_state_t *zsd = ctxt->reader->zs;
   2baf6:	3404      	adds	r4, #4
{
   2baf8:	b086      	sub	sp, #24
	struct zcbor_string value = { 0 };
   2bafa:	2300      	movs	r3, #0
	if (!zcbor_map_start_decode(zsd)) {
   2bafc:	4620      	mov	r0, r4
	struct zcbor_string value = { 0 };
   2bafe:	e9cd 3300 	strd	r3, r3, [sp]
	if (!zcbor_map_start_decode(zsd)) {
   2bb02:	f00f fb71 	bl	3b1e8 <zcbor_map_start_decode>
   2bb06:	b910      	cbnz	r0, 2bb0e <os_mgmt_echo+0x1e>
		return MGMT_ERR_EUNKNOWN;
   2bb08:	2001      	movs	r0, #1
}
   2bb0a:	b006      	add	sp, #24
   2bb0c:	bd70      	pop	{r4, r5, r6, pc}
		ok = zcbor_tstr_decode(zsd, &key);
   2bb0e:	a902      	add	r1, sp, #8
   2bb10:	4620      	mov	r0, r4
   2bb12:	f00f fb66 	bl	3b1e2 <zcbor_tstr_decode>
		if (ok) {
   2bb16:	2800      	cmp	r0, #0
   2bb18:	d0f6      	beq.n	2bb08 <os_mgmt_echo+0x18>
			if (key.len == 1 && *key.value == 'd') {
   2bb1a:	9e03      	ldr	r6, [sp, #12]
   2bb1c:	2e01      	cmp	r6, #1
   2bb1e:	d11e      	bne.n	2bb5e <os_mgmt_echo+0x6e>
   2bb20:	9b02      	ldr	r3, [sp, #8]
   2bb22:	781b      	ldrb	r3, [r3, #0]
   2bb24:	2b64      	cmp	r3, #100	; 0x64
   2bb26:	d11a      	bne.n	2bb5e <os_mgmt_echo+0x6e>
				ok = zcbor_tstr_decode(zsd, &value);
   2bb28:	4669      	mov	r1, sp
   2bb2a:	4620      	mov	r0, r4
   2bb2c:	f00f fb59 	bl	3b1e2 <zcbor_tstr_decode>
	if (!ok || !zcbor_map_end_decode(zsd)) {
   2bb30:	2800      	cmp	r0, #0
   2bb32:	d0e9      	beq.n	2bb08 <os_mgmt_echo+0x18>
   2bb34:	4620      	mov	r0, r4
   2bb36:	f00f fb71 	bl	3b21c <zcbor_map_end_decode>
   2bb3a:	2800      	cmp	r0, #0
   2bb3c:	d0e4      	beq.n	2bb08 <os_mgmt_echo+0x18>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bb3e:	4b0b      	ldr	r3, [pc, #44]	; (2bb6c <os_mgmt_echo+0x7c>)
	zcbor_state_t *zse = ctxt->writer->zs;
   2bb40:	3504      	adds	r5, #4
	return zcbor_tstr_encode(state, &zs);
   2bb42:	a904      	add	r1, sp, #16
   2bb44:	4628      	mov	r0, r5
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bb46:	e9cd 3604 	strd	r3, r6, [sp, #16]
	return zcbor_tstr_encode(state, &zs);
   2bb4a:	f00f fc49 	bl	3b3e0 <zcbor_tstr_encode>
	ok = zcbor_tstr_put_lit(zse, "r")		&&
   2bb4e:	b120      	cbz	r0, 2bb5a <os_mgmt_echo+0x6a>
	     zcbor_tstr_encode(zse, &value);
   2bb50:	4669      	mov	r1, sp
   2bb52:	4628      	mov	r0, r5
   2bb54:	f00f fc44 	bl	3b3e0 <zcbor_tstr_encode>
	ok = zcbor_tstr_put_lit(zse, "r")		&&
   2bb58:	b930      	cbnz	r0, 2bb68 <os_mgmt_echo+0x78>
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   2bb5a:	2007      	movs	r0, #7
   2bb5c:	e7d5      	b.n	2bb0a <os_mgmt_echo+0x1a>
			ok = zcbor_any_skip(zsd, NULL);
   2bb5e:	2100      	movs	r1, #0
   2bb60:	4620      	mov	r0, r4
   2bb62:	f005 fbfd 	bl	31360 <zcbor_any_skip>
   2bb66:	e7ce      	b.n	2bb06 <os_mgmt_echo+0x16>
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   2bb68:	2000      	movs	r0, #0
   2bb6a:	e7ce      	b.n	2bb0a <os_mgmt_echo+0x1a>
   2bb6c:	0003e4d4 	.word	0x0003e4d4

0002bb70 <os_mgmt_taskstat_encode_one>:
{
   2bb70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (iterator_ctx->ok == true) {
   2bb72:	7a0b      	ldrb	r3, [r1, #8]
{
   2bb74:	4605      	mov	r5, r0
   2bb76:	460c      	mov	r4, r1
	if (iterator_ctx->ok == true) {
   2bb78:	b1e3      	cbz	r3, 2bbb4 <os_mgmt_taskstat_encode_one+0x44>
			os_mgmt_taskstat_encode_thread_name(iterator_ctx->zse,
   2bb7a:	680e      	ldr	r6, [r1, #0]
	snprintf(thread_name, sizeof(thread_name) - 1, "%d", idx);
   2bb7c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2bb80:	4a2e      	ldr	r2, [pc, #184]	; (2bc3c <os_mgmt_taskstat_encode_one+0xcc>)
   2bb82:	2105      	movs	r1, #5
   2bb84:	4668      	mov	r0, sp
   2bb86:	f7fa f95d 	bl	25e44 <snprintf>
	thread_name[sizeof(thread_name) - 1] = 0;
   2bb8a:	2300      	movs	r3, #0
	return zcbor_tstr_put_term(zse, thread_name);
   2bb8c:	4668      	mov	r0, sp
	thread_name[sizeof(thread_name) - 1] = 0;
   2bb8e:	f88d 3005 	strb.w	r3, [sp, #5]
	return zcbor_tstr_put_term(zse, thread_name);
   2bb92:	f00c fdcf 	bl	38734 <strlen>
   2bb96:	a902      	add	r1, sp, #8
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bb98:	9003      	str	r0, [sp, #12]
	return zcbor_tstr_encode(state, &zs);
   2bb9a:	4630      	mov	r0, r6
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bb9c:	f8cd d008 	str.w	sp, [sp, #8]
	return zcbor_tstr_encode(state, &zs);
   2bba0:	f00f fc1e 	bl	3b3e0 <zcbor_tstr_encode>
			os_mgmt_taskstat_encode_unsupported(iterator_ctx->zse)			&&
   2bba4:	b940      	cbnz	r0, 2bbb8 <os_mgmt_taskstat_encode_one+0x48>
   2bba6:	2000      	movs	r0, #0
		++iterator_ctx->thread_idx;
   2bba8:	6863      	ldr	r3, [r4, #4]
			os_mgmt_taskstat_encode_unsupported(iterator_ctx->zse)			&&
   2bbaa:	f000 0001 	and.w	r0, r0, #1
		++iterator_ctx->thread_idx;
   2bbae:	3301      	adds	r3, #1
			os_mgmt_taskstat_encode_unsupported(iterator_ctx->zse)			&&
   2bbb0:	7220      	strb	r0, [r4, #8]
		++iterator_ctx->thread_idx;
   2bbb2:	6063      	str	r3, [r4, #4]
}
   2bbb4:	b004      	add	sp, #16
   2bbb6:	bd70      	pop	{r4, r5, r6, pc}
			zcbor_map_start_encode(iterator_ctx->zse, TASKSTAT_COLUMNS_MAX)		&&
   2bbb8:	6820      	ldr	r0, [r4, #0]
   2bbba:	2114      	movs	r1, #20
   2bbbc:	f00f fc17 	bl	3b3ee <zcbor_map_start_encode>
							    iterator_ctx->thread_idx, thread)	&&
   2bbc0:	2800      	cmp	r0, #0
   2bbc2:	d0f0      	beq.n	2bba6 <os_mgmt_taskstat_encode_one+0x36>
			os_mgmt_taskstat_encode_priority(iterator_ctx->zse, thread)		&&
   2bbc4:	6826      	ldr	r6, [r4, #0]
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bbc6:	4b1e      	ldr	r3, [pc, #120]	; (2bc40 <os_mgmt_taskstat_encode_one+0xd0>)
   2bbc8:	9302      	str	r3, [sp, #8]
	return zcbor_tstr_encode(state, &zs);
   2bbca:	a902      	add	r1, sp, #8
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bbcc:	2304      	movs	r3, #4
	return zcbor_tstr_encode(state, &zs);
   2bbce:	4630      	mov	r0, r6
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bbd0:	9303      	str	r3, [sp, #12]
	return zcbor_tstr_encode(state, &zs);
   2bbd2:	f00f fc05 	bl	3b3e0 <zcbor_tstr_encode>
   2bbd6:	f995 100e 	ldrsb.w	r1, [r5, #14]
		zcbor_int32_put(zse, (int)thread->base.prio) :
   2bbda:	2800      	cmp	r0, #0
   2bbdc:	d029      	beq.n	2bc32 <os_mgmt_taskstat_encode_one+0xc2>
   2bbde:	4630      	mov	r0, r6
   2bbe0:	f00f fbe3 	bl	3b3aa <zcbor_int32_put>
			zcbor_map_start_encode(iterator_ctx->zse, TASKSTAT_COLUMNS_MAX)		&&
   2bbe4:	2800      	cmp	r0, #0
   2bbe6:	d0de      	beq.n	2bba6 <os_mgmt_taskstat_encode_one+0x36>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bbe8:	4b16      	ldr	r3, [pc, #88]	; (2bc44 <os_mgmt_taskstat_encode_one+0xd4>)
   2bbea:	9302      	str	r3, [sp, #8]
	return zcbor_tstr_encode(state, &zs);
   2bbec:	6820      	ldr	r0, [r4, #0]
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bbee:	2303      	movs	r3, #3
	return zcbor_tstr_encode(state, &zs);
   2bbf0:	a902      	add	r1, sp, #8
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bbf2:	9303      	str	r3, [sp, #12]
	return zcbor_tstr_encode(state, &zs);
   2bbf4:	f00f fbf4 	bl	3b3e0 <zcbor_tstr_encode>
			os_mgmt_taskstat_encode_priority(iterator_ctx->zse, thread)		&&
   2bbf8:	2800      	cmp	r0, #0
   2bbfa:	d0d4      	beq.n	2bba6 <os_mgmt_taskstat_encode_one+0x36>
			zcbor_uint32_put(iterator_ctx->zse, iterator_ctx->thread_idx)		&&
   2bbfc:	e9d4 0100 	ldrd	r0, r1, [r4]
   2bc00:	f00f fbdd 	bl	3b3be <zcbor_uint32_put>
			zcbor_tstr_put_lit(iterator_ctx->zse, "tid")				&&
   2bc04:	2800      	cmp	r0, #0
   2bc06:	d0ce      	beq.n	2bba6 <os_mgmt_taskstat_encode_one+0x36>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bc08:	4b0f      	ldr	r3, [pc, #60]	; (2bc48 <os_mgmt_taskstat_encode_one+0xd8>)
   2bc0a:	9302      	str	r3, [sp, #8]
	return zcbor_tstr_encode(state, &zs);
   2bc0c:	6820      	ldr	r0, [r4, #0]
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bc0e:	2305      	movs	r3, #5
	return zcbor_tstr_encode(state, &zs);
   2bc10:	a902      	add	r1, sp, #8
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bc12:	9303      	str	r3, [sp, #12]
	return zcbor_tstr_encode(state, &zs);
   2bc14:	f00f fbe4 	bl	3b3e0 <zcbor_tstr_encode>
			zcbor_uint32_put(iterator_ctx->zse, iterator_ctx->thread_idx)		&&
   2bc18:	2800      	cmp	r0, #0
   2bc1a:	d0c4      	beq.n	2bba6 <os_mgmt_taskstat_encode_one+0x36>
			zcbor_uint32_put(iterator_ctx->zse, thread->base.thread_state)		&&
   2bc1c:	7b69      	ldrb	r1, [r5, #13]
   2bc1e:	6820      	ldr	r0, [r4, #0]
   2bc20:	f00f fbcd 	bl	3b3be <zcbor_uint32_put>
			zcbor_tstr_put_lit(iterator_ctx->zse, "state")				&&
   2bc24:	2800      	cmp	r0, #0
   2bc26:	d0be      	beq.n	2bba6 <os_mgmt_taskstat_encode_one+0x36>
			zcbor_map_end_encode(iterator_ctx->zse, TASKSTAT_COLUMNS_MAX);
   2bc28:	6820      	ldr	r0, [r4, #0]
   2bc2a:	2114      	movs	r1, #20
   2bc2c:	f00f fbe7 	bl	3b3fe <zcbor_map_end_encode>
   2bc30:	e7ba      	b.n	2bba8 <os_mgmt_taskstat_encode_one+0x38>
		zcbor_uint32_put(zse, (unsigned int)thread->base.prio) & 0xff);
   2bc32:	4630      	mov	r0, r6
   2bc34:	f00f fbc3 	bl	3b3be <zcbor_uint32_put>
   2bc38:	e7d4      	b.n	2bbe4 <os_mgmt_taskstat_encode_one+0x74>
   2bc3a:	bf00      	nop
   2bc3c:	0003e0d1 	.word	0x0003e0d1
   2bc40:	0003e0d4 	.word	0x0003e0d4
   2bc44:	0003e0d9 	.word	0x0003e0d9
   2bc48:	0003e0dd 	.word	0x0003e0dd

0002bc4c <stat_mgmt_register_group>:
	.mg_group_id = MGMT_GROUP_ID_STAT,
};

static void stat_mgmt_register_group(void)
{
	mgmt_register_group(&stat_mgmt_group);
   2bc4c:	4801      	ldr	r0, [pc, #4]	; (2bc54 <stat_mgmt_register_group+0x8>)
   2bc4e:	f7ff ba57 	b.w	2b100 <mgmt_register_group>
   2bc52:	bf00      	nop
   2bc54:	20000770 	.word	0x20000770

0002bc58 <stat_mgmt_show>:
{
   2bc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	zcbor_state_t *zsd = ctxt->reader->zs;
   2bc5c:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
{
   2bc60:	b08e      	sub	sp, #56	; 0x38
	zcbor_state_t *zsd = ctxt->reader->zs;
   2bc62:	3404      	adds	r4, #4
	struct zcbor_string value = { 0 };
   2bc64:	2300      	movs	r3, #0
	if (!zcbor_map_start_decode(zsd)) {
   2bc66:	4620      	mov	r0, r4
	struct zcbor_string value = { 0 };
   2bc68:	e9cd 3302 	strd	r3, r3, [sp, #8]
	size_t counter = 0;
   2bc6c:	9301      	str	r3, [sp, #4]
	if (!zcbor_map_start_decode(zsd)) {
   2bc6e:	f00f fabb 	bl	3b1e8 <zcbor_map_start_decode>
   2bc72:	2800      	cmp	r0, #0
   2bc74:	d034      	beq.n	2bce0 <stat_mgmt_show+0x88>
			    memcmp(key.value, name_key, ARRAY_SIZE(name_key) - 1) == 0) {
   2bc76:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2bd80 <stat_mgmt_show+0x128>
		ok = zcbor_tstr_decode(zsd, &key);
   2bc7a:	a906      	add	r1, sp, #24
   2bc7c:	4620      	mov	r0, r4
   2bc7e:	f00f fab0 	bl	3b1e2 <zcbor_tstr_decode>
		if (ok) {
   2bc82:	b170      	cbz	r0, 2bca2 <stat_mgmt_show+0x4a>
			if (key.len == (ARRAY_SIZE(name_key) - 1) &&
   2bc84:	9f07      	ldr	r7, [sp, #28]
   2bc86:	2f04      	cmp	r7, #4
   2bc88:	d110      	bne.n	2bcac <stat_mgmt_show+0x54>
			    memcmp(key.value, name_key, ARRAY_SIZE(name_key) - 1) == 0) {
   2bc8a:	9806      	ldr	r0, [sp, #24]
   2bc8c:	463a      	mov	r2, r7
   2bc8e:	4641      	mov	r1, r8
   2bc90:	f00c fd6c 	bl	3876c <memcmp>
			if (key.len == (ARRAY_SIZE(name_key) - 1) &&
   2bc94:	4606      	mov	r6, r0
   2bc96:	b948      	cbnz	r0, 2bcac <stat_mgmt_show+0x54>
				ok = zcbor_tstr_decode(zsd, &value);
   2bc98:	a902      	add	r1, sp, #8
   2bc9a:	4620      	mov	r0, r4
   2bc9c:	f00f faa1 	bl	3b1e2 <zcbor_tstr_decode>
	if (!ok || value.len == 0 || value.len >= ARRAY_SIZE(stat_name)) {
   2bca0:	b958      	cbnz	r0, 2bcba <stat_mgmt_show+0x62>
		return MGMT_ERR_EINVAL;
   2bca2:	2403      	movs	r4, #3
}
   2bca4:	4620      	mov	r0, r4
   2bca6:	b00e      	add	sp, #56	; 0x38
   2bca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ok = zcbor_any_skip(zsd, NULL);
   2bcac:	2100      	movs	r1, #0
   2bcae:	4620      	mov	r0, r4
   2bcb0:	f005 fb56 	bl	31360 <zcbor_any_skip>
	} while (ok);
   2bcb4:	2800      	cmp	r0, #0
   2bcb6:	d1e0      	bne.n	2bc7a <stat_mgmt_show+0x22>
   2bcb8:	e7f3      	b.n	2bca2 <stat_mgmt_show+0x4a>
	if (!ok || value.len == 0 || value.len >= ARRAY_SIZE(stat_name)) {
   2bcba:	9a03      	ldr	r2, [sp, #12]
   2bcbc:	1e53      	subs	r3, r2, #1
   2bcbe:	2b1e      	cmp	r3, #30
   2bcc0:	d8ef      	bhi.n	2bca2 <stat_mgmt_show+0x4a>
	memcpy(stat_name, value.value, value.len);
   2bcc2:	9902      	ldr	r1, [sp, #8]
   2bcc4:	a806      	add	r0, sp, #24
   2bcc6:	f00c fd78 	bl	387ba <memcpy>
	stat_name[value.len] = '\0';
   2bcca:	9b03      	ldr	r3, [sp, #12]
   2bccc:	3338      	adds	r3, #56	; 0x38
   2bcce:	446b      	add	r3, sp
	struct stats_hdr *hdr = stats_group_find(group_name);
   2bcd0:	a806      	add	r0, sp, #24
	stat_name[value.len] = '\0';
   2bcd2:	f803 6c20 	strb.w	r6, [r3, #-32]
	if (stat_mgmt_count(stat_name, &counter) != 0) {
   2bcd6:	ab01      	add	r3, sp, #4
   2bcd8:	9304      	str	r3, [sp, #16]
	struct stats_hdr *hdr = stats_group_find(group_name);
   2bcda:	f7f9 f9db 	bl	25094 <stats_group_find>
	if (hdr == NULL) {
   2bcde:	b908      	cbnz	r0, 2bce4 <stat_mgmt_show+0x8c>
		return MGMT_ERR_EUNKNOWN;
   2bce0:	2401      	movs	r4, #1
   2bce2:	e7df      	b.n	2bca4 <stat_mgmt_show+0x4c>
	*counter = 0;
   2bce4:	9b04      	ldr	r3, [sp, #16]
	return stats_walk(hdr, stats_mgmt_count_plus_one, &counter);
   2bce6:	4927      	ldr	r1, [pc, #156]	; (2bd84 <stat_mgmt_show+0x12c>)
	*counter = 0;
   2bce8:	601e      	str	r6, [r3, #0]
	return stats_walk(hdr, stats_mgmt_count_plus_one, &counter);
   2bcea:	aa04      	add	r2, sp, #16
   2bcec:	f00c fa7a 	bl	381e4 <stats_walk>
	if (stat_mgmt_count(stat_name, &counter) != 0) {
   2bcf0:	4604      	mov	r4, r0
   2bcf2:	2800      	cmp	r0, #0
   2bcf4:	d1f4      	bne.n	2bce0 <stat_mgmt_show+0x88>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bcf6:	4b24      	ldr	r3, [pc, #144]	; (2bd88 <stat_mgmt_show+0x130>)
   2bcf8:	9304      	str	r3, [sp, #16]
	zcbor_state_t *zse = ctxt->writer->zs;
   2bcfa:	3504      	adds	r5, #4
   2bcfc:	2302      	movs	r3, #2
	return zcbor_tstr_encode(state, &zs);
   2bcfe:	a904      	add	r1, sp, #16
   2bd00:	4628      	mov	r0, r5
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bd02:	9305      	str	r3, [sp, #20]
	return zcbor_tstr_encode(state, &zs);
   2bd04:	f00f fb6c 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_tstr_put_lit(zse, "fields")		&&
   2bd08:	2800      	cmp	r0, #0
   2bd0a:	d036      	beq.n	2bd7a <stat_mgmt_show+0x122>
	     zcbor_int32_put(zse, MGMT_ERR_EOK)		&&
   2bd0c:	4621      	mov	r1, r4
   2bd0e:	4628      	mov	r0, r5
   2bd10:	f00f fb4b 	bl	3b3aa <zcbor_int32_put>
	ok = zcbor_tstr_put_lit(zse, "rc")		&&
   2bd14:	2800      	cmp	r0, #0
   2bd16:	d030      	beq.n	2bd7a <stat_mgmt_show+0x122>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bd18:	4b1c      	ldr	r3, [pc, #112]	; (2bd8c <stat_mgmt_show+0x134>)
	return zcbor_tstr_encode(state, &zs);
   2bd1a:	a904      	add	r1, sp, #16
   2bd1c:	4628      	mov	r0, r5
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bd1e:	e9cd 3704 	strd	r3, r7, [sp, #16]
	return zcbor_tstr_encode(state, &zs);
   2bd22:	f00f fb5d 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_int32_put(zse, MGMT_ERR_EOK)		&&
   2bd26:	b340      	cbz	r0, 2bd7a <stat_mgmt_show+0x122>
	     zcbor_tstr_encode(zse, &value)		&&
   2bd28:	a902      	add	r1, sp, #8
   2bd2a:	4628      	mov	r0, r5
   2bd2c:	f00f fb58 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_tstr_put_lit(zse, "name")		&&
   2bd30:	b318      	cbz	r0, 2bd7a <stat_mgmt_show+0x122>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bd32:	4b17      	ldr	r3, [pc, #92]	; (2bd90 <stat_mgmt_show+0x138>)
   2bd34:	9304      	str	r3, [sp, #16]
	return zcbor_tstr_encode(state, &zs);
   2bd36:	a904      	add	r1, sp, #16
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bd38:	2306      	movs	r3, #6
	return zcbor_tstr_encode(state, &zs);
   2bd3a:	4628      	mov	r0, r5
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bd3c:	9305      	str	r3, [sp, #20]
	return zcbor_tstr_encode(state, &zs);
   2bd3e:	f00f fb4f 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_tstr_encode(zse, &value)		&&
   2bd42:	b1d0      	cbz	r0, 2bd7a <stat_mgmt_show+0x122>
	     zcbor_map_start_encode(zse, counter);
   2bd44:	9901      	ldr	r1, [sp, #4]
   2bd46:	4628      	mov	r0, r5
   2bd48:	f00f fb51 	bl	3b3ee <zcbor_map_start_encode>
	     zcbor_tstr_put_lit(zse, "fields")		&&
   2bd4c:	b1a8      	cbz	r0, 2bd7a <stat_mgmt_show+0x122>
	hdr = stats_group_find(group_name);
   2bd4e:	a806      	add	r0, sp, #24
   2bd50:	f7f9 f9a0 	bl	25094 <stats_group_find>
	if (hdr == NULL) {
   2bd54:	b908      	cbnz	r0, 2bd5a <stat_mgmt_show+0x102>
		return MGMT_ERR_ENOENT;
   2bd56:	2405      	movs	r4, #5
   2bd58:	e7a4      	b.n	2bca4 <stat_mgmt_show+0x4c>
	walk_arg = (struct stat_mgmt_walk_arg) {
   2bd5a:	4b0e      	ldr	r3, [pc, #56]	; (2bd94 <stat_mgmt_show+0x13c>)
	return stats_walk(hdr, stat_mgmt_walk_cb, &walk_arg);
   2bd5c:	490e      	ldr	r1, [pc, #56]	; (2bd98 <stat_mgmt_show+0x140>)
   2bd5e:	aa04      	add	r2, sp, #16
	walk_arg = (struct stat_mgmt_walk_arg) {
   2bd60:	e9cd 3504 	strd	r3, r5, [sp, #16]
	return stats_walk(hdr, stat_mgmt_walk_cb, &walk_arg);
   2bd64:	f00c fa3e 	bl	381e4 <stats_walk>
		if (rc != MGMT_ERR_EOK) {
   2bd68:	4604      	mov	r4, r0
   2bd6a:	2800      	cmp	r0, #0
   2bd6c:	d19a      	bne.n	2bca4 <stat_mgmt_show+0x4c>
	ok = ok && zcbor_map_end_encode(zse, counter);
   2bd6e:	9901      	ldr	r1, [sp, #4]
   2bd70:	4628      	mov	r0, r5
   2bd72:	f00f fb44 	bl	3b3fe <zcbor_map_end_encode>
   2bd76:	2800      	cmp	r0, #0
   2bd78:	d194      	bne.n	2bca4 <stat_mgmt_show+0x4c>
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   2bd7a:	2407      	movs	r4, #7
   2bd7c:	e792      	b.n	2bca4 <stat_mgmt_show+0x4c>
   2bd7e:	bf00      	nop
   2bd80:	0003e0f9 	.word	0x0003e0f9
   2bd84:	0003a219 	.word	0x0003a219
   2bd88:	0003e0ad 	.word	0x0003e0ad
   2bd8c:	0003e0e3 	.word	0x0003e0e3
   2bd90:	0003e0e8 	.word	0x0003e0e8
   2bd94:	0003a25f 	.word	0x0003a25f
   2bd98:	0003a223 	.word	0x0003a223

0002bd9c <stat_mgmt_list>:
{
   2bd9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	zcbor_state_t *zse = ctxt->writer->zs;
   2bd9e:	6886      	ldr	r6, [r0, #8]
	size_t counter = 0;
   2bda0:	2700      	movs	r7, #0
	zcbor_state_t *zse = ctxt->writer->zs;
   2bda2:	3604      	adds	r6, #4
	const struct stats_hdr *cur = NULL;
   2bda4:	463c      	mov	r4, r7
		cur = stats_group_get_next(cur);
   2bda6:	4620      	mov	r0, r4
   2bda8:	f7f9 f96c 	bl	25084 <stats_group_get_next>
		if (cur != NULL) {
   2bdac:	4604      	mov	r4, r0
   2bdae:	b9f0      	cbnz	r0, 2bdee <stat_mgmt_list+0x52>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bdb0:	4b1c      	ldr	r3, [pc, #112]	; (2be24 <stat_mgmt_list+0x88>)
   2bdb2:	9300      	str	r3, [sp, #0]
	return zcbor_tstr_encode(state, &zs);
   2bdb4:	4669      	mov	r1, sp
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bdb6:	2302      	movs	r3, #2
	return zcbor_tstr_encode(state, &zs);
   2bdb8:	4630      	mov	r0, r6
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bdba:	9301      	str	r3, [sp, #4]
	return zcbor_tstr_encode(state, &zs);
   2bdbc:	f00f fb10 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_tstr_put_lit(zse, "stat_list")	&&
   2bdc0:	b190      	cbz	r0, 2bde8 <stat_mgmt_list+0x4c>
	     zcbor_int32_put(zse, MGMT_ERR_EOK)		&&
   2bdc2:	4621      	mov	r1, r4
   2bdc4:	4630      	mov	r0, r6
   2bdc6:	f00f faf0 	bl	3b3aa <zcbor_int32_put>
	ok = zcbor_tstr_put_lit(zse, "rc")		&&
   2bdca:	b168      	cbz	r0, 2bde8 <stat_mgmt_list+0x4c>
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bdcc:	4b16      	ldr	r3, [pc, #88]	; (2be28 <stat_mgmt_list+0x8c>)
   2bdce:	9300      	str	r3, [sp, #0]
	return zcbor_tstr_encode(state, &zs);
   2bdd0:	4669      	mov	r1, sp
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bdd2:	2309      	movs	r3, #9
	return zcbor_tstr_encode(state, &zs);
   2bdd4:	4630      	mov	r0, r6
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2bdd6:	9301      	str	r3, [sp, #4]
	return zcbor_tstr_encode(state, &zs);
   2bdd8:	f00f fb02 	bl	3b3e0 <zcbor_tstr_encode>
	     zcbor_int32_put(zse, MGMT_ERR_EOK)		&&
   2bddc:	b120      	cbz	r0, 2bde8 <stat_mgmt_list+0x4c>
	     zcbor_list_start_encode(zse, counter);
   2bdde:	4639      	mov	r1, r7
   2bde0:	4630      	mov	r0, r6
   2bde2:	f00f fb00 	bl	3b3e6 <zcbor_list_start_encode>
	     zcbor_tstr_put_lit(zse, "stat_list")	&&
   2bde6:	b920      	cbnz	r0, 2bdf2 <stat_mgmt_list+0x56>
		return MGMT_ERR_EMSGSIZE;
   2bde8:	2007      	movs	r0, #7
}
   2bdea:	b003      	add	sp, #12
   2bdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			counter++;
   2bdee:	3701      	adds	r7, #1
	} while (cur != NULL);
   2bdf0:	e7d9      	b.n	2bda6 <stat_mgmt_list+0xa>
		cur = stats_group_get_next(cur);
   2bdf2:	4620      	mov	r0, r4
   2bdf4:	f7f9 f946 	bl	25084 <stats_group_get_next>
		if (cur != NULL) {
   2bdf8:	4604      	mov	r4, r0
   2bdfa:	b150      	cbz	r0, 2be12 <stat_mgmt_list+0x76>
			ok = zcbor_tstr_put_term(zse, cur->s_name);
   2bdfc:	6805      	ldr	r5, [r0, #0]
   2bdfe:	4628      	mov	r0, r5
   2be00:	f00c fc98 	bl	38734 <strlen>
   2be04:	4669      	mov	r1, sp
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   2be06:	e9cd 5000 	strd	r5, r0, [sp]
	return zcbor_tstr_encode(state, &zs);
   2be0a:	4630      	mov	r0, r6
   2be0c:	f00f fae8 	bl	3b3e0 <zcbor_tstr_encode>
   2be10:	e7e9      	b.n	2bde6 <stat_mgmt_list+0x4a>
	if (!ok || !zcbor_list_end_encode(zse, counter)) {
   2be12:	4639      	mov	r1, r7
   2be14:	4630      	mov	r0, r6
   2be16:	f00f faee 	bl	3b3f6 <zcbor_list_end_encode>
   2be1a:	2800      	cmp	r0, #0
   2be1c:	d0e4      	beq.n	2bde8 <stat_mgmt_list+0x4c>
	return 0;
   2be1e:	4620      	mov	r0, r4
   2be20:	e7e3      	b.n	2bdea <stat_mgmt_list+0x4e>
   2be22:	bf00      	nop
   2be24:	0003e0ad 	.word	0x0003e0ad
   2be28:	0003e0ef 	.word	0x0003e0ef

0002be2c <smp_init>:
		smp_free_buf(nb, zst);
	}
}

static int smp_init(const struct device *dev)
{
   2be2c:	b513      	push	{r0, r1, r4, lr}
	k_work_queue_init(&smp_work_queue);
   2be2e:	4c08      	ldr	r4, [pc, #32]	; (2be50 <smp_init+0x24>)
   2be30:	4620      	mov	r0, r4
   2be32:	f006 fdd5 	bl	329e0 <k_work_queue_init>

	k_work_queue_start(&smp_work_queue, smp_work_queue_stack,
   2be36:	4b07      	ldr	r3, [pc, #28]	; (2be54 <smp_init+0x28>)
   2be38:	9300      	str	r3, [sp, #0]
   2be3a:	4620      	mov	r0, r4
   2be3c:	4906      	ldr	r1, [pc, #24]	; (2be58 <smp_init+0x2c>)
   2be3e:	2303      	movs	r3, #3
   2be40:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2be44:	f006 fde2 	bl	32a0c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(smp_work_queue_stack),
			   CONFIG_MCUMGR_SMP_WORKQUEUE_THREAD_PRIO, &smp_work_queue_config);

	return 0;
}
   2be48:	2000      	movs	r0, #0
   2be4a:	b002      	add	sp, #8
   2be4c:	bd10      	pop	{r4, pc}
   2be4e:	bf00      	nop
   2be50:	20002150 	.word	0x20002150
   2be54:	0003c2a0 	.word	0x0003c2a0
   2be58:	20007300 	.word	0x20007300

0002be5c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   2be5c:	4b02      	ldr	r3, [pc, #8]	; (2be68 <net_buf_pool_get+0xc>)
   2be5e:	2234      	movs	r2, #52	; 0x34
   2be60:	fb02 3000 	mla	r0, r2, r0, r3
   2be64:	4770      	bx	lr
   2be66:	bf00      	nop
   2be68:	20000b64 	.word	0x20000b64

0002be6c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2be6c:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2be6e:	4b07      	ldr	r3, [pc, #28]	; (2be8c <net_buf_id+0x20>)
   2be70:	2134      	movs	r1, #52	; 0x34
   2be72:	fb01 3302 	mla	r3, r1, r2, r3
   2be76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2be78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2be7c:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2be7e:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2be80:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   2be84:	fbb0 f0f3 	udiv	r0, r0, r3
   2be88:	4770      	bx	lr
   2be8a:	bf00      	nop
   2be8c:	20000b64 	.word	0x20000b64

0002be90 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   2be90:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2be92:	4b0a      	ldr	r3, [pc, #40]	; (2bebc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2be94:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2be96:	2434      	movs	r4, #52	; 0x34
   2be98:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   2be9c:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2bea0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2bea2:	681a      	ldr	r2, [r3, #0]
   2bea4:	4294      	cmp	r4, r2
   2bea6:	bf94      	ite	ls
   2bea8:	600c      	strls	r4, [r1, #0]
   2beaa:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2beac:	e9d3 5400 	ldrd	r5, r4, [r3]
   2beb0:	f7ff ffdc 	bl	2be6c <net_buf_id>
}
   2beb4:	fb05 4000 	mla	r0, r5, r0, r4
   2beb8:	bd38      	pop	{r3, r4, r5, pc}
   2beba:	bf00      	nop
   2bebc:	20000b64 	.word	0x20000b64

0002bec0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bec4:	b085      	sub	sp, #20
   2bec6:	4605      	mov	r5, r0
   2bec8:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2beca:	4610      	mov	r0, r2
   2becc:	4619      	mov	r1, r3
{
   2bece:	4691      	mov	r9, r2
   2bed0:	4698      	mov	r8, r3
   2bed2:	4617      	mov	r7, r2
   2bed4:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2bed6:	f00f fbdd 	bl	3b694 <sys_clock_timeout_end_calc>
   2beda:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   2bede:	b93d      	cbnz	r5, 2bef0 <net_buf_alloc_len+0x30>
   2bee0:	495e      	ldr	r1, [pc, #376]	; (2c05c <net_buf_alloc_len+0x19c>)
   2bee2:	485f      	ldr	r0, [pc, #380]	; (2c060 <net_buf_alloc_len+0x1a0>)
   2bee4:	22f4      	movs	r2, #244	; 0xf4
   2bee6:	f00c f86f 	bl	37fc8 <assert_print>
   2beea:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   2beec:	485b      	ldr	r0, [pc, #364]	; (2c05c <net_buf_alloc_len+0x19c>)
   2beee:	e014      	b.n	2bf1a <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   2bef0:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   2bef4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bef8:	f3ef 8b11 	mrs	fp, BASEPRI
   2befc:	f383 8812 	msr	BASEPRI_MAX, r3
   2bf00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bf04:	4650      	mov	r0, sl
   2bf06:	f005 fe17 	bl	31b38 <z_spin_lock_valid>
   2bf0a:	b940      	cbnz	r0, 2bf1e <net_buf_alloc_len+0x5e>
   2bf0c:	4955      	ldr	r1, [pc, #340]	; (2c064 <net_buf_alloc_len+0x1a4>)
   2bf0e:	4854      	ldr	r0, [pc, #336]	; (2c060 <net_buf_alloc_len+0x1a0>)
   2bf10:	2294      	movs	r2, #148	; 0x94
   2bf12:	f00c f859 	bl	37fc8 <assert_print>
   2bf16:	2194      	movs	r1, #148	; 0x94
   2bf18:	4852      	ldr	r0, [pc, #328]	; (2c064 <net_buf_alloc_len+0x1a4>)
   2bf1a:	f00c f84e 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   2bf1e:	4650      	mov	r0, sl
   2bf20:	f005 fe28 	bl	31b74 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   2bf24:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   2bf26:	2b00      	cmp	r3, #0
   2bf28:	d06a      	beq.n	2c000 <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   2bf2a:	8c2a      	ldrh	r2, [r5, #32]
   2bf2c:	429a      	cmp	r2, r3
   2bf2e:	d947      	bls.n	2bfc0 <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   2bf30:	2200      	movs	r2, #0
   2bf32:	2300      	movs	r3, #0
   2bf34:	4628      	mov	r0, r5
   2bf36:	f006 f9c7 	bl	322c8 <z_impl_k_queue_get>
			if (buf) {
   2bf3a:	4604      	mov	r4, r0
   2bf3c:	2800      	cmp	r0, #0
   2bf3e:	d03f      	beq.n	2bfc0 <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bf40:	4650      	mov	r0, sl
   2bf42:	f005 fe07 	bl	31b54 <z_spin_unlock_valid>
   2bf46:	b930      	cbnz	r0, 2bf56 <net_buf_alloc_len+0x96>
   2bf48:	4946      	ldr	r1, [pc, #280]	; (2c064 <net_buf_alloc_len+0x1a4>)
   2bf4a:	4845      	ldr	r0, [pc, #276]	; (2c060 <net_buf_alloc_len+0x1a0>)
   2bf4c:	22c2      	movs	r2, #194	; 0xc2
   2bf4e:	f00c f83b 	bl	37fc8 <assert_print>
   2bf52:	21c2      	movs	r1, #194	; 0xc2
   2bf54:	e7e0      	b.n	2bf18 <net_buf_alloc_len+0x58>
	__asm__ volatile(
   2bf56:	f38b 8811 	msr	BASEPRI, fp
   2bf5a:	f3bf 8f6f 	isb	sy
	if (size) {
   2bf5e:	9d03      	ldr	r5, [sp, #12]
   2bf60:	2d00      	cmp	r5, #0
   2bf62:	d06f      	beq.n	2c044 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2bf64:	ea58 0309 	orrs.w	r3, r8, r9
   2bf68:	d010      	beq.n	2bf8c <net_buf_alloc_len+0xcc>
   2bf6a:	f1b8 3fff 	cmp.w	r8, #4294967295
   2bf6e:	bf08      	it	eq
   2bf70:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   2bf74:	d00a      	beq.n	2bf8c <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   2bf76:	f008 f9b7 	bl	342e8 <sys_clock_tick_get>
   2bf7a:	9b01      	ldr	r3, [sp, #4]
   2bf7c:	1a1f      	subs	r7, r3, r0
   2bf7e:	9b02      	ldr	r3, [sp, #8]
   2bf80:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   2bf84:	2e00      	cmp	r6, #0
   2bf86:	bfbc      	itt	lt
   2bf88:	2700      	movlt	r7, #0
   2bf8a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2bf8c:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   2bf8e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2c068 <net_buf_alloc_len+0x1a8>
   2bf92:	f04f 0934 	mov.w	r9, #52	; 0x34
   2bf96:	fb09 8303 	mla	r3, r9, r3, r8
   2bf9a:	463a      	mov	r2, r7
   2bf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2bf9e:	681b      	ldr	r3, [r3, #0]
   2bfa0:	a903      	add	r1, sp, #12
   2bfa2:	f8d3 a000 	ldr.w	sl, [r3]
   2bfa6:	4620      	mov	r0, r4
   2bfa8:	4633      	mov	r3, r6
   2bfaa:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   2bfac:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2bfae:	2800      	cmp	r0, #0
   2bfb0:	d13c      	bne.n	2c02c <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   2bfb2:	7aa0      	ldrb	r0, [r4, #10]
   2bfb4:	4621      	mov	r1, r4
   2bfb6:	fb00 8009 	mla	r0, r0, r9, r8
   2bfba:	f00f fab2 	bl	3b522 <k_queue_prepend>
}
   2bfbe:	e030      	b.n	2c022 <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   2bfc0:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   2bfc2:	1e63      	subs	r3, r4, #1
   2bfc4:	846b      	strh	r3, [r5, #34]	; 0x22
   2bfc6:	4650      	mov	r0, sl
   2bfc8:	f005 fdc4 	bl	31b54 <z_spin_unlock_valid>
   2bfcc:	2800      	cmp	r0, #0
   2bfce:	d0bb      	beq.n	2bf48 <net_buf_alloc_len+0x88>
   2bfd0:	f38b 8811 	msr	BASEPRI, fp
   2bfd4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2bfd8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2bfdc:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2bfde:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2bfe0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2bfe2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2bfe4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2bfe8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   2bfec:	4b1e      	ldr	r3, [pc, #120]	; (2c068 <net_buf_alloc_len+0x1a8>)
   2bfee:	4a1f      	ldr	r2, [pc, #124]	; (2c06c <net_buf_alloc_len+0x1ac>)
   2bff0:	1aeb      	subs	r3, r5, r3
   2bff2:	109b      	asrs	r3, r3, #2
   2bff4:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   2bff6:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   2bff8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   2bffc:	72e3      	strb	r3, [r4, #11]
		goto success;
   2bffe:	e7ae      	b.n	2bf5e <net_buf_alloc_len+0x9e>
   2c000:	4650      	mov	r0, sl
   2c002:	f005 fda7 	bl	31b54 <z_spin_unlock_valid>
   2c006:	2800      	cmp	r0, #0
   2c008:	d09e      	beq.n	2bf48 <net_buf_alloc_len+0x88>
   2c00a:	f38b 8811 	msr	BASEPRI, fp
   2c00e:	f3bf 8f6f 	isb	sy
   2c012:	464a      	mov	r2, r9
   2c014:	4643      	mov	r3, r8
   2c016:	4628      	mov	r0, r5
   2c018:	f006 f956 	bl	322c8 <z_impl_k_queue_get>
	if (!buf) {
   2c01c:	4604      	mov	r4, r0
   2c01e:	2800      	cmp	r0, #0
   2c020:	d19d      	bne.n	2bf5e <net_buf_alloc_len+0x9e>
		return NULL;
   2c022:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2c024:	4620      	mov	r0, r4
   2c026:	b005      	add	sp, #20
   2c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   2c02c:	9b03      	ldr	r3, [sp, #12]
   2c02e:	429d      	cmp	r5, r3
   2c030:	d909      	bls.n	2c046 <net_buf_alloc_len+0x186>
   2c032:	490a      	ldr	r1, [pc, #40]	; (2c05c <net_buf_alloc_len+0x19c>)
   2c034:	480a      	ldr	r0, [pc, #40]	; (2c060 <net_buf_alloc_len+0x1a0>)
   2c036:	f240 1255 	movw	r2, #341	; 0x155
   2c03a:	f00b ffc5 	bl	37fc8 <assert_print>
   2c03e:	f240 1155 	movw	r1, #341	; 0x155
   2c042:	e753      	b.n	2beec <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   2c044:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   2c046:	2300      	movs	r3, #0
	buf->ref   = 1U;
   2c048:	2201      	movs	r2, #1
	buf->frags = NULL;
   2c04a:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   2c04c:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   2c04e:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   2c050:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   2c052:	6963      	ldr	r3, [r4, #20]
   2c054:	8262      	strh	r2, [r4, #18]
   2c056:	60e3      	str	r3, [r4, #12]
}
   2c058:	e7e4      	b.n	2c024 <net_buf_alloc_len+0x164>
   2c05a:	bf00      	nop
   2c05c:	0003e114 	.word	0x0003e114
   2c060:	0003c7f8 	.word	0x0003c7f8
   2c064:	0003cc84 	.word	0x0003cc84
   2c068:	20000b64 	.word	0x20000b64
   2c06c:	c4ec4ec5 	.word	0xc4ec4ec5

0002c070 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   2c070:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   2c072:	b950      	cbnz	r0, 2c08a <net_buf_simple_reserve+0x1a>
   2c074:	490c      	ldr	r1, [pc, #48]	; (2c0a8 <net_buf_simple_reserve+0x38>)
   2c076:	480d      	ldr	r0, [pc, #52]	; (2c0ac <net_buf_simple_reserve+0x3c>)
   2c078:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2c07c:	f00b ffa4 	bl	37fc8 <assert_print>
   2c080:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   2c084:	4808      	ldr	r0, [pc, #32]	; (2c0a8 <net_buf_simple_reserve+0x38>)
   2c086:	f00b ff98 	bl	37fba <assert_post_action>
   2c08a:	8883      	ldrh	r3, [r0, #4]
   2c08c:	b143      	cbz	r3, 2c0a0 <net_buf_simple_reserve+0x30>
   2c08e:	4906      	ldr	r1, [pc, #24]	; (2c0a8 <net_buf_simple_reserve+0x38>)
   2c090:	4806      	ldr	r0, [pc, #24]	; (2c0ac <net_buf_simple_reserve+0x3c>)
   2c092:	f240 12b9 	movw	r2, #441	; 0x1b9
   2c096:	f00b ff97 	bl	37fc8 <assert_print>
   2c09a:	f240 11b9 	movw	r1, #441	; 0x1b9
   2c09e:	e7f1      	b.n	2c084 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2c0a0:	6883      	ldr	r3, [r0, #8]
   2c0a2:	440b      	add	r3, r1
   2c0a4:	6003      	str	r3, [r0, #0]
}
   2c0a6:	bd08      	pop	{r3, pc}
   2c0a8:	0003e114 	.word	0x0003e114
   2c0ac:	0003c7f8 	.word	0x0003c7f8

0002c0b0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   2c0b0:	b570      	push	{r4, r5, r6, lr}
   2c0b2:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   2c0b4:	4605      	mov	r5, r0
   2c0b6:	b950      	cbnz	r0, 2c0ce <net_buf_slist_put+0x1e>
   2c0b8:	4922      	ldr	r1, [pc, #136]	; (2c144 <net_buf_slist_put+0x94>)
   2c0ba:	4823      	ldr	r0, [pc, #140]	; (2c148 <net_buf_slist_put+0x98>)
   2c0bc:	f240 12c5 	movw	r2, #453	; 0x1c5
   2c0c0:	f00b ff82 	bl	37fc8 <assert_print>
   2c0c4:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   2c0c8:	481e      	ldr	r0, [pc, #120]	; (2c144 <net_buf_slist_put+0x94>)
   2c0ca:	f00b ff76 	bl	37fba <assert_post_action>
   2c0ce:	b941      	cbnz	r1, 2c0e2 <net_buf_slist_put+0x32>
   2c0d0:	491c      	ldr	r1, [pc, #112]	; (2c144 <net_buf_slist_put+0x94>)
   2c0d2:	481d      	ldr	r0, [pc, #116]	; (2c148 <net_buf_slist_put+0x98>)
   2c0d4:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   2c0d8:	f00b ff76 	bl	37fc8 <assert_print>
   2c0dc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   2c0e0:	e7f2      	b.n	2c0c8 <net_buf_slist_put+0x18>
	__asm__ volatile(
   2c0e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c0e6:	f3ef 8611 	mrs	r6, BASEPRI
   2c0ea:	f383 8812 	msr	BASEPRI_MAX, r3
   2c0ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c0f2:	4816      	ldr	r0, [pc, #88]	; (2c14c <net_buf_slist_put+0x9c>)
   2c0f4:	f005 fd20 	bl	31b38 <z_spin_lock_valid>
   2c0f8:	b938      	cbnz	r0, 2c10a <net_buf_slist_put+0x5a>
   2c0fa:	4915      	ldr	r1, [pc, #84]	; (2c150 <net_buf_slist_put+0xa0>)
   2c0fc:	4812      	ldr	r0, [pc, #72]	; (2c148 <net_buf_slist_put+0x98>)
   2c0fe:	2294      	movs	r2, #148	; 0x94
   2c100:	f00b ff62 	bl	37fc8 <assert_print>
   2c104:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c106:	4812      	ldr	r0, [pc, #72]	; (2c150 <net_buf_slist_put+0xa0>)
   2c108:	e7df      	b.n	2c0ca <net_buf_slist_put+0x1a>
	z_spin_lock_set_owner(l);
   2c10a:	4810      	ldr	r0, [pc, #64]	; (2c14c <net_buf_slist_put+0x9c>)
   2c10c:	f005 fd32 	bl	31b74 <z_spin_lock_set_owner>
	parent->next = child;
   2c110:	2300      	movs	r3, #0
   2c112:	6023      	str	r3, [r4, #0]
	return list->tail;
   2c114:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2c116:	b963      	cbnz	r3, 2c132 <net_buf_slist_put+0x82>
	list->head = node;
   2c118:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c11c:	480b      	ldr	r0, [pc, #44]	; (2c14c <net_buf_slist_put+0x9c>)
   2c11e:	f005 fd19 	bl	31b54 <z_spin_unlock_valid>
   2c122:	b948      	cbnz	r0, 2c138 <net_buf_slist_put+0x88>
   2c124:	490a      	ldr	r1, [pc, #40]	; (2c150 <net_buf_slist_put+0xa0>)
   2c126:	4808      	ldr	r0, [pc, #32]	; (2c148 <net_buf_slist_put+0x98>)
   2c128:	22c2      	movs	r2, #194	; 0xc2
   2c12a:	f00b ff4d 	bl	37fc8 <assert_print>
   2c12e:	21c2      	movs	r1, #194	; 0xc2
   2c130:	e7e9      	b.n	2c106 <net_buf_slist_put+0x56>
	parent->next = child;
   2c132:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2c134:	606c      	str	r4, [r5, #4]
}
   2c136:	e7f1      	b.n	2c11c <net_buf_slist_put+0x6c>
	__asm__ volatile(
   2c138:	f386 8811 	msr	BASEPRI, r6
   2c13c:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   2c140:	bd70      	pop	{r4, r5, r6, pc}
   2c142:	bf00      	nop
   2c144:	0003e114 	.word	0x0003e114
   2c148:	0003c7f8 	.word	0x0003c7f8
   2c14c:	20003ea0 	.word	0x20003ea0
   2c150:	0003cc84 	.word	0x0003cc84

0002c154 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   2c154:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   2c156:	4604      	mov	r4, r0
   2c158:	b950      	cbnz	r0, 2c170 <net_buf_slist_get+0x1c>
   2c15a:	491d      	ldr	r1, [pc, #116]	; (2c1d0 <net_buf_slist_get+0x7c>)
   2c15c:	481d      	ldr	r0, [pc, #116]	; (2c1d4 <net_buf_slist_get+0x80>)
   2c15e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   2c162:	f00b ff31 	bl	37fc8 <assert_print>
   2c166:	481a      	ldr	r0, [pc, #104]	; (2c1d0 <net_buf_slist_get+0x7c>)
   2c168:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c16c:	f00b ff25 	bl	37fba <assert_post_action>
	__asm__ volatile(
   2c170:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c174:	f3ef 8611 	mrs	r6, BASEPRI
   2c178:	f383 8812 	msr	BASEPRI_MAX, r3
   2c17c:	f3bf 8f6f 	isb	sy
   2c180:	4815      	ldr	r0, [pc, #84]	; (2c1d8 <net_buf_slist_get+0x84>)
   2c182:	f005 fcd9 	bl	31b38 <z_spin_lock_valid>
   2c186:	b938      	cbnz	r0, 2c198 <net_buf_slist_get+0x44>
   2c188:	4914      	ldr	r1, [pc, #80]	; (2c1dc <net_buf_slist_get+0x88>)
   2c18a:	4812      	ldr	r0, [pc, #72]	; (2c1d4 <net_buf_slist_get+0x80>)
   2c18c:	2294      	movs	r2, #148	; 0x94
   2c18e:	f00b ff1b 	bl	37fc8 <assert_print>
   2c192:	2194      	movs	r1, #148	; 0x94
   2c194:	4811      	ldr	r0, [pc, #68]	; (2c1dc <net_buf_slist_get+0x88>)
   2c196:	e7e9      	b.n	2c16c <net_buf_slist_get+0x18>
	z_spin_lock_set_owner(l);
   2c198:	480f      	ldr	r0, [pc, #60]	; (2c1d8 <net_buf_slist_get+0x84>)
   2c19a:	f005 fceb 	bl	31b74 <z_spin_lock_set_owner>
	return list->head;
   2c19e:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   2c1a0:	b12d      	cbz	r5, 2c1ae <net_buf_slist_get+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c1a2:	6862      	ldr	r2, [r4, #4]
	return node->next;
   2c1a4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2c1a6:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c1a8:	4295      	cmp	r5, r2
	list->tail = node;
   2c1aa:	bf08      	it	eq
   2c1ac:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c1ae:	480a      	ldr	r0, [pc, #40]	; (2c1d8 <net_buf_slist_get+0x84>)
   2c1b0:	f005 fcd0 	bl	31b54 <z_spin_unlock_valid>
   2c1b4:	b930      	cbnz	r0, 2c1c4 <net_buf_slist_get+0x70>
   2c1b6:	4909      	ldr	r1, [pc, #36]	; (2c1dc <net_buf_slist_get+0x88>)
   2c1b8:	4806      	ldr	r0, [pc, #24]	; (2c1d4 <net_buf_slist_get+0x80>)
   2c1ba:	22c2      	movs	r2, #194	; 0xc2
   2c1bc:	f00b ff04 	bl	37fc8 <assert_print>
   2c1c0:	21c2      	movs	r1, #194	; 0xc2
   2c1c2:	e7e7      	b.n	2c194 <net_buf_slist_get+0x40>
	__asm__ volatile(
   2c1c4:	f386 8811 	msr	BASEPRI, r6
   2c1c8:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   2c1cc:	4628      	mov	r0, r5
   2c1ce:	bd70      	pop	{r4, r5, r6, pc}
   2c1d0:	0003e114 	.word	0x0003e114
   2c1d4:	0003c7f8 	.word	0x0003c7f8
   2c1d8:	20003ea0 	.word	0x20003ea0
   2c1dc:	0003cc84 	.word	0x0003cc84

0002c1e0 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2c1e0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   2c1e2:	b950      	cbnz	r0, 2c1fa <net_buf_put+0x1a>
   2c1e4:	490c      	ldr	r1, [pc, #48]	; (2c218 <net_buf_put+0x38>)
   2c1e6:	480d      	ldr	r0, [pc, #52]	; (2c21c <net_buf_put+0x3c>)
   2c1e8:	f240 12df 	movw	r2, #479	; 0x1df
   2c1ec:	f00b feec 	bl	37fc8 <assert_print>
   2c1f0:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   2c1f4:	4808      	ldr	r0, [pc, #32]	; (2c218 <net_buf_put+0x38>)
   2c1f6:	f00b fee0 	bl	37fba <assert_post_action>
   2c1fa:	b941      	cbnz	r1, 2c20e <net_buf_put+0x2e>
   2c1fc:	4906      	ldr	r1, [pc, #24]	; (2c218 <net_buf_put+0x38>)
   2c1fe:	4807      	ldr	r0, [pc, #28]	; (2c21c <net_buf_put+0x3c>)
   2c200:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   2c204:	f00b fee0 	bl	37fc8 <assert_print>
   2c208:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   2c20c:	e7f2      	b.n	2c1f4 <net_buf_put+0x14>

	k_fifo_put(fifo, buf);
}
   2c20e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   2c212:	f00f b97b 	b.w	3b50c <k_queue_append>
   2c216:	bf00      	nop
   2c218:	0003e114 	.word	0x0003e114
   2c21c:	0003c7f8 	.word	0x0003c7f8

0002c220 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2c220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   2c224:	4605      	mov	r5, r0
   2c226:	b328      	cbz	r0, 2c274 <net_buf_unref+0x54>
   2c228:	4e1b      	ldr	r6, [pc, #108]	; (2c298 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   2c22a:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   2c22c:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   2c230:	462c      	mov	r4, r5
   2c232:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   2c234:	7a23      	ldrb	r3, [r4, #8]
   2c236:	3b01      	subs	r3, #1
   2c238:	b2db      	uxtb	r3, r3
   2c23a:	7223      	strb	r3, [r4, #8]
   2c23c:	b9c3      	cbnz	r3, 2c270 <net_buf_unref+0x50>
		if (buf->__buf) {
   2c23e:	6961      	ldr	r1, [r4, #20]
   2c240:	b159      	cbz	r1, 2c25a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2c242:	7a63      	ldrb	r3, [r4, #9]
   2c244:	07db      	lsls	r3, r3, #31
   2c246:	d407      	bmi.n	2c258 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2c248:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   2c24a:	fb08 6303 	mla	r3, r8, r3, r6
   2c24e:	4620      	mov	r0, r4
   2c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c252:	681b      	ldr	r3, [r3, #0]
   2c254:	689b      	ldr	r3, [r3, #8]
   2c256:	4798      	blx	r3
			buf->__buf = NULL;
   2c258:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   2c25a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   2c25c:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2c25e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   2c262:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   2c264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c266:	b183      	cbz	r3, 2c28a <net_buf_unref+0x6a>
			pool->destroy(buf);
   2c268:	4620      	mov	r0, r4
   2c26a:	4798      	blx	r3
	while (buf) {
   2c26c:	2d00      	cmp	r5, #0
   2c26e:	d1df      	bne.n	2c230 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   2c274:	4909      	ldr	r1, [pc, #36]	; (2c29c <net_buf_unref+0x7c>)
   2c276:	480a      	ldr	r0, [pc, #40]	; (2c2a0 <net_buf_unref+0x80>)
   2c278:	f240 12eb 	movw	r2, #491	; 0x1eb
   2c27c:	f00b fea4 	bl	37fc8 <assert_print>
   2c280:	4806      	ldr	r0, [pc, #24]	; (2c29c <net_buf_unref+0x7c>)
   2c282:	f240 11eb 	movw	r1, #491	; 0x1eb
   2c286:	f00b fe98 	bl	37fba <assert_post_action>
	k_lifo_put(&pool->free, buf);
   2c28a:	4621      	mov	r1, r4
   2c28c:	fb00 6008 	mla	r0, r0, r8, r6
   2c290:	f00f f947 	bl	3b522 <k_queue_prepend>
}
   2c294:	e7ea      	b.n	2c26c <net_buf_unref+0x4c>
   2c296:	bf00      	nop
   2c298:	20000b64 	.word	0x20000b64
   2c29c:	0003e114 	.word	0x0003e114
   2c2a0:	0003c7f8 	.word	0x0003c7f8

0002c2a4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   2c2a4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   2c2a6:	b950      	cbnz	r0, 2c2be <net_buf_ref+0x1a>
   2c2a8:	4907      	ldr	r1, [pc, #28]	; (2c2c8 <net_buf_ref+0x24>)
   2c2aa:	4808      	ldr	r0, [pc, #32]	; (2c2cc <net_buf_ref+0x28>)
   2c2ac:	f240 221a 	movw	r2, #538	; 0x21a
   2c2b0:	f00b fe8a 	bl	37fc8 <assert_print>
   2c2b4:	4804      	ldr	r0, [pc, #16]	; (2c2c8 <net_buf_ref+0x24>)
   2c2b6:	f240 211a 	movw	r1, #538	; 0x21a
   2c2ba:	f00b fe7e 	bl	37fba <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2c2be:	7a02      	ldrb	r2, [r0, #8]
   2c2c0:	3201      	adds	r2, #1
   2c2c2:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2c2c4:	bd08      	pop	{r3, pc}
   2c2c6:	bf00      	nop
   2c2c8:	0003e114 	.word	0x0003e114
   2c2cc:	0003c7f8 	.word	0x0003c7f8

0002c2d0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2c2d0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   2c2d2:	4603      	mov	r3, r0
   2c2d4:	b950      	cbnz	r0, 2c2ec <net_buf_frag_last+0x1c>
   2c2d6:	4908      	ldr	r1, [pc, #32]	; (2c2f8 <net_buf_frag_last+0x28>)
   2c2d8:	4808      	ldr	r0, [pc, #32]	; (2c2fc <net_buf_frag_last+0x2c>)
   2c2da:	f240 2257 	movw	r2, #599	; 0x257
   2c2de:	f00b fe73 	bl	37fc8 <assert_print>
   2c2e2:	4805      	ldr	r0, [pc, #20]	; (2c2f8 <net_buf_frag_last+0x28>)
   2c2e4:	f240 2157 	movw	r1, #599	; 0x257
   2c2e8:	f00b fe67 	bl	37fba <assert_post_action>

	while (buf->frags) {
   2c2ec:	4618      	mov	r0, r3
   2c2ee:	685b      	ldr	r3, [r3, #4]
   2c2f0:	2b00      	cmp	r3, #0
   2c2f2:	d1fb      	bne.n	2c2ec <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   2c2f4:	bd08      	pop	{r3, pc}
   2c2f6:	bf00      	nop
   2c2f8:	0003e114 	.word	0x0003e114
   2c2fc:	0003c7f8 	.word	0x0003c7f8

0002c300 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2c300:	b570      	push	{r4, r5, r6, lr}
   2c302:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   2c304:	4604      	mov	r4, r0
   2c306:	b950      	cbnz	r0, 2c31e <net_buf_frag_insert+0x1e>
   2c308:	490e      	ldr	r1, [pc, #56]	; (2c344 <net_buf_frag_insert+0x44>)
   2c30a:	480f      	ldr	r0, [pc, #60]	; (2c348 <net_buf_frag_insert+0x48>)
   2c30c:	f240 2262 	movw	r2, #610	; 0x262
   2c310:	f00b fe5a 	bl	37fc8 <assert_print>
   2c314:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   2c318:	480a      	ldr	r0, [pc, #40]	; (2c344 <net_buf_frag_insert+0x44>)
   2c31a:	f00b fe4e 	bl	37fba <assert_post_action>
   2c31e:	b941      	cbnz	r1, 2c332 <net_buf_frag_insert+0x32>
   2c320:	4908      	ldr	r1, [pc, #32]	; (2c344 <net_buf_frag_insert+0x44>)
   2c322:	4809      	ldr	r0, [pc, #36]	; (2c348 <net_buf_frag_insert+0x48>)
   2c324:	f240 2263 	movw	r2, #611	; 0x263
   2c328:	f00b fe4e 	bl	37fc8 <assert_print>
   2c32c:	f240 2163 	movw	r1, #611	; 0x263
   2c330:	e7f2      	b.n	2c318 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   2c332:	6846      	ldr	r6, [r0, #4]
   2c334:	b11e      	cbz	r6, 2c33e <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   2c336:	4608      	mov	r0, r1
   2c338:	f7ff ffca 	bl	2c2d0 <net_buf_frag_last>
   2c33c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2c33e:	6065      	str	r5, [r4, #4]
}
   2c340:	bd70      	pop	{r4, r5, r6, pc}
   2c342:	bf00      	nop
   2c344:	0003e114 	.word	0x0003e114
   2c348:	0003c7f8 	.word	0x0003c7f8

0002c34c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2c34c:	b538      	push	{r3, r4, r5, lr}
   2c34e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   2c350:	460c      	mov	r4, r1
   2c352:	b951      	cbnz	r1, 2c36a <net_buf_frag_add+0x1e>
   2c354:	490b      	ldr	r1, [pc, #44]	; (2c384 <net_buf_frag_add+0x38>)
   2c356:	480c      	ldr	r0, [pc, #48]	; (2c388 <net_buf_frag_add+0x3c>)
   2c358:	f240 226e 	movw	r2, #622	; 0x26e
   2c35c:	f00b fe34 	bl	37fc8 <assert_print>
   2c360:	4808      	ldr	r0, [pc, #32]	; (2c384 <net_buf_frag_add+0x38>)
   2c362:	f240 216e 	movw	r1, #622	; 0x26e
   2c366:	f00b fe28 	bl	37fba <assert_post_action>

	if (!head) {
   2c36a:	b920      	cbnz	r0, 2c376 <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2c36c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   2c370:	4608      	mov	r0, r1
   2c372:	f7ff bf97 	b.w	2c2a4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2c376:	f7ff ffab 	bl	2c2d0 <net_buf_frag_last>
   2c37a:	4621      	mov	r1, r4
   2c37c:	f7ff ffc0 	bl	2c300 <net_buf_frag_insert>
}
   2c380:	4628      	mov	r0, r5
   2c382:	bd38      	pop	{r3, r4, r5, pc}
   2c384:	0003e114 	.word	0x0003e114
   2c388:	0003c7f8 	.word	0x0003c7f8

0002c38c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2c38c:	b508      	push	{r3, lr}
   2c38e:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2c390:	6800      	ldr	r0, [r0, #0]
   2c392:	689a      	ldr	r2, [r3, #8]
   2c394:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   2c396:	4291      	cmp	r1, r2
   2c398:	d90a      	bls.n	2c3b0 <net_buf_simple_push+0x24>
   2c39a:	4908      	ldr	r1, [pc, #32]	; (2c3bc <net_buf_simple_push+0x30>)
   2c39c:	4808      	ldr	r0, [pc, #32]	; (2c3c0 <net_buf_simple_push+0x34>)
   2c39e:	f240 32f2 	movw	r2, #1010	; 0x3f2
   2c3a2:	f00b fe11 	bl	37fc8 <assert_print>
   2c3a6:	4805      	ldr	r0, [pc, #20]	; (2c3bc <net_buf_simple_push+0x30>)
   2c3a8:	f240 31f2 	movw	r1, #1010	; 0x3f2
   2c3ac:	f00b fe05 	bl	37fba <assert_post_action>
	buf->len += len;
   2c3b0:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2c3b2:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2c3b4:	4411      	add	r1, r2
	buf->data -= len;
   2c3b6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2c3b8:	8099      	strh	r1, [r3, #4]
}
   2c3ba:	bd08      	pop	{r3, pc}
   2c3bc:	0003e114 	.word	0x0003e114
   2c3c0:	0003c7f8 	.word	0x0003c7f8

0002c3c4 <net_buf_simple_pull>:
{
   2c3c4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   2c3c6:	8882      	ldrh	r2, [r0, #4]
   2c3c8:	428a      	cmp	r2, r1
{
   2c3ca:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   2c3cc:	d20a      	bcs.n	2c3e4 <net_buf_simple_pull+0x20>
   2c3ce:	4908      	ldr	r1, [pc, #32]	; (2c3f0 <net_buf_simple_pull+0x2c>)
   2c3d0:	4808      	ldr	r0, [pc, #32]	; (2c3f4 <net_buf_simple_pull+0x30>)
   2c3d2:	f240 4252 	movw	r2, #1106	; 0x452
   2c3d6:	f00b fdf7 	bl	37fc8 <assert_print>
   2c3da:	4805      	ldr	r0, [pc, #20]	; (2c3f0 <net_buf_simple_pull+0x2c>)
   2c3dc:	f240 4152 	movw	r1, #1106	; 0x452
   2c3e0:	f00b fdeb 	bl	37fba <assert_post_action>
	buf->len -= len;
   2c3e4:	1a52      	subs	r2, r2, r1
   2c3e6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2c3e8:	6800      	ldr	r0, [r0, #0]
   2c3ea:	4408      	add	r0, r1
   2c3ec:	6018      	str	r0, [r3, #0]
}
   2c3ee:	bd08      	pop	{r3, pc}
   2c3f0:	0003e114 	.word	0x0003e114
   2c3f4:	0003c7f8 	.word	0x0003c7f8

0002c3f8 <net_buf_simple_pull_mem>:
{
   2c3f8:	b508      	push	{r3, lr}
   2c3fa:	4603      	mov	r3, r0
	void *data = buf->data;
   2c3fc:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   2c3fe:	889a      	ldrh	r2, [r3, #4]
   2c400:	428a      	cmp	r2, r1
   2c402:	d20a      	bcs.n	2c41a <net_buf_simple_pull_mem+0x22>
   2c404:	4907      	ldr	r1, [pc, #28]	; (2c424 <net_buf_simple_pull_mem+0x2c>)
   2c406:	4808      	ldr	r0, [pc, #32]	; (2c428 <net_buf_simple_pull_mem+0x30>)
   2c408:	f240 425e 	movw	r2, #1118	; 0x45e
   2c40c:	f00b fddc 	bl	37fc8 <assert_print>
   2c410:	4804      	ldr	r0, [pc, #16]	; (2c424 <net_buf_simple_pull_mem+0x2c>)
   2c412:	f240 415e 	movw	r1, #1118	; 0x45e
   2c416:	f00b fdd0 	bl	37fba <assert_post_action>
	buf->len -= len;
   2c41a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2c41c:	4401      	add	r1, r0
	buf->len -= len;
   2c41e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2c420:	6019      	str	r1, [r3, #0]
}
   2c422:	bd08      	pop	{r3, pc}
   2c424:	0003e114 	.word	0x0003e114
   2c428:	0003c7f8 	.word	0x0003c7f8

0002c42c <net_buf_simple_add>:
{
   2c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   2c42e:	8885      	ldrh	r5, [r0, #4]
   2c430:	6803      	ldr	r3, [r0, #0]
   2c432:	460e      	mov	r6, r1
   2c434:	4604      	mov	r4, r0
   2c436:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   2c438:	f00d ff4f 	bl	3a2da <net_buf_simple_tailroom>
   2c43c:	42b0      	cmp	r0, r6
   2c43e:	d20a      	bcs.n	2c456 <net_buf_simple_add+0x2a>
   2c440:	4907      	ldr	r1, [pc, #28]	; (2c460 <net_buf_simple_add+0x34>)
   2c442:	4808      	ldr	r0, [pc, #32]	; (2c464 <net_buf_simple_add+0x38>)
   2c444:	f240 3203 	movw	r2, #771	; 0x303
   2c448:	f00b fdbe 	bl	37fc8 <assert_print>
   2c44c:	4804      	ldr	r0, [pc, #16]	; (2c460 <net_buf_simple_add+0x34>)
   2c44e:	f240 3103 	movw	r1, #771	; 0x303
   2c452:	f00b fdb2 	bl	37fba <assert_post_action>
	buf->len += len;
   2c456:	4435      	add	r5, r6
   2c458:	80a5      	strh	r5, [r4, #4]
}
   2c45a:	4638      	mov	r0, r7
   2c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c45e:	bf00      	nop
   2c460:	0003e114 	.word	0x0003e114
   2c464:	0003c7f8 	.word	0x0003c7f8

0002c468 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   2c468:	b508      	push	{r3, lr}
   2c46a:	4804      	ldr	r0, [pc, #16]	; (2c47c <xoshiro128_initialize+0x14>)
   2c46c:	f00e ffd6 	bl	3b41c <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   2c470:	2800      	cmp	r0, #0
}
   2c472:	bf0c      	ite	eq
   2c474:	f06f 0012 	mvneq.w	r0, #18
   2c478:	2000      	movne	r0, #0
   2c47a:	bd08      	pop	{r3, pc}
   2c47c:	0003b9a8 	.word	0x0003b9a8

0002c480 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   2c480:	4b05      	ldr	r3, [pc, #20]	; (2c498 <adc_context_start_sampling+0x18>)
   2c482:	2201      	movs	r2, #1
   2c484:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   2c488:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   2c48c:	b109      	cbz	r1, 2c492 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c48e:	60da      	str	r2, [r3, #12]
}
   2c490:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c492:	601a      	str	r2, [r3, #0]
   2c494:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   2c496:	4770      	bx	lr
   2c498:	40007000 	.word	0x40007000

0002c49c <adc_nrfx_channel_setup>:
{
   2c49c:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   2c49e:	7908      	ldrb	r0, [r1, #4]
   2c4a0:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   2c4a4:	2c07      	cmp	r4, #7
   2c4a6:	d81d      	bhi.n	2c4e4 <adc_nrfx_channel_setup+0x48>
	switch (channel_cfg->gain) {
   2c4a8:	780b      	ldrb	r3, [r1, #0]
   2c4aa:	2b0b      	cmp	r3, #11
   2c4ac:	d816      	bhi.n	2c4dc <adc_nrfx_channel_setup+0x40>
   2c4ae:	e8df f003 	tbb	[pc, r3]
   2c4b2:	0707      	.short	0x0707
   2c4b4:	06150707 	.word	0x06150707
   2c4b8:	110f1515 	.word	0x110f1515
   2c4bc:	1315      	.short	0x1315
		config.gain = NRF_SAADC_GAIN1_2;
   2c4be:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   2c4c0:	784a      	ldrb	r2, [r1, #1]
   2c4c2:	2a03      	cmp	r2, #3
   2c4c4:	d011      	beq.n	2c4ea <adc_nrfx_channel_setup+0x4e>
   2c4c6:	2a04      	cmp	r2, #4
   2c4c8:	d022      	beq.n	2c510 <adc_nrfx_channel_setup+0x74>
		LOG_ERR("Selected ADC reference is not valid");
   2c4ca:	482e      	ldr	r0, [pc, #184]	; (2c584 <adc_nrfx_channel_setup+0xe8>)
   2c4cc:	2145      	movs	r1, #69	; 0x45
   2c4ce:	e007      	b.n	2c4e0 <adc_nrfx_channel_setup+0x44>
		config.gain = NRF_SAADC_GAIN1;
   2c4d0:	2305      	movs	r3, #5
		break;
   2c4d2:	e7f5      	b.n	2c4c0 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   2c4d4:	2306      	movs	r3, #6
		break;
   2c4d6:	e7f3      	b.n	2c4c0 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   2c4d8:	2307      	movs	r3, #7
		break;
   2c4da:	e7f1      	b.n	2c4c0 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   2c4dc:	482a      	ldr	r0, [pc, #168]	; (2c588 <adc_nrfx_channel_setup+0xec>)
   2c4de:	2145      	movs	r1, #69	; 0x45
   2c4e0:	f00b fd80 	bl	37fe4 <z_log_minimal_printk>
		return -EINVAL;
   2c4e4:	f06f 0015 	mvn.w	r0, #21
}
   2c4e8:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   2c4ea:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   2c4ec:	884a      	ldrh	r2, [r1, #2]
   2c4ee:	f244 060a 	movw	r6, #16394	; 0x400a
   2c4f2:	42b2      	cmp	r2, r6
   2c4f4:	d040      	beq.n	2c578 <adc_nrfx_channel_setup+0xdc>
   2c4f6:	d80d      	bhi.n	2c514 <adc_nrfx_channel_setup+0x78>
   2c4f8:	f244 0603 	movw	r6, #16387	; 0x4003
   2c4fc:	42b2      	cmp	r2, r6
   2c4fe:	d017      	beq.n	2c530 <adc_nrfx_channel_setup+0x94>
   2c500:	f244 0605 	movw	r6, #16389	; 0x4005
   2c504:	42b2      	cmp	r2, r6
   2c506:	d035      	beq.n	2c574 <adc_nrfx_channel_setup+0xd8>
   2c508:	b3b2      	cbz	r2, 2c578 <adc_nrfx_channel_setup+0xdc>
		LOG_ERR("Selected ADC acquisition time is not valid");
   2c50a:	4820      	ldr	r0, [pc, #128]	; (2c58c <adc_nrfx_channel_setup+0xf0>)
   2c50c:	2145      	movs	r1, #69	; 0x45
   2c50e:	e7e7      	b.n	2c4e0 <adc_nrfx_channel_setup+0x44>
	nrf_saadc_channel_config_t config = {
   2c510:	2500      	movs	r5, #0
   2c512:	e7eb      	b.n	2c4ec <adc_nrfx_channel_setup+0x50>
	switch (channel_cfg->acquisition_time) {
   2c514:	f244 0614 	movw	r6, #16404	; 0x4014
   2c518:	42b2      	cmp	r2, r6
   2c51a:	d02f      	beq.n	2c57c <adc_nrfx_channel_setup+0xe0>
   2c51c:	f244 0628 	movw	r6, #16424	; 0x4028
   2c520:	42b2      	cmp	r2, r6
   2c522:	d02d      	beq.n	2c580 <adc_nrfx_channel_setup+0xe4>
   2c524:	f244 060f 	movw	r6, #16399	; 0x400f
   2c528:	42b2      	cmp	r2, r6
   2c52a:	d1ee      	bne.n	2c50a <adc_nrfx_channel_setup+0x6e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   2c52c:	2203      	movs	r2, #3
   2c52e:	e000      	b.n	2c532 <adc_nrfx_channel_setup+0x96>
	nrf_saadc_channel_config_t config = {
   2c530:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2c532:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   2c536:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2c538:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   2c53c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   2c540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   2c544:	0122      	lsls	r2, r4, #4
   2c546:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2c54a:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   2c54e:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   2c550:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   2c554:	0123      	lsls	r3, r4, #4
   2c556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2c55a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   2c55e:	798a      	ldrb	r2, [r1, #6]
   2c560:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   2c564:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   2c568:	4b09      	ldr	r3, [pc, #36]	; (2c590 <adc_nrfx_channel_setup+0xf4>)
   2c56a:	794a      	ldrb	r2, [r1, #5]
   2c56c:	4423      	add	r3, r4
   2c56e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   2c572:	e7b9      	b.n	2c4e8 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->acquisition_time) {
   2c574:	2201      	movs	r2, #1
   2c576:	e7dc      	b.n	2c532 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   2c578:	2202      	movs	r2, #2
   2c57a:	e7da      	b.n	2c532 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   2c57c:	2204      	movs	r2, #4
   2c57e:	e7d8      	b.n	2c532 <adc_nrfx_channel_setup+0x96>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   2c580:	2205      	movs	r2, #5
   2c582:	e7d6      	b.n	2c532 <adc_nrfx_channel_setup+0x96>
   2c584:	0003e164 	.word	0x0003e164
   2c588:	0003e140 	.word	0x0003e140
   2c58c:	0003e18d 	.word	0x0003e18d
   2c590:	20000560 	.word	0x20000560

0002c594 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   2c594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c596:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   2c598:	f04f 33ff 	mov.w	r3, #4294967295
   2c59c:	4862      	ldr	r0, [pc, #392]	; (2c728 <adc_nrfx_read+0x194>)
   2c59e:	f04f 32ff 	mov.w	r2, #4294967295
   2c5a2:	f005 ff25 	bl	323f0 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   2c5a6:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   2c5a8:	1e73      	subs	r3, r6, #1
   2c5aa:	2bfe      	cmp	r3, #254	; 0xfe
   2c5ac:	d904      	bls.n	2c5b8 <adc_nrfx_read+0x24>
		LOG_ERR("Invalid selection of channels");
   2c5ae:	485f      	ldr	r0, [pc, #380]	; (2c72c <adc_nrfx_read+0x198>)
   2c5b0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR(
   2c5b2:	f00b fd17 	bl	37fe4 <z_log_minimal_printk>
	if (error) {
   2c5b6:	e011      	b.n	2c5dc <adc_nrfx_read+0x48>
   2c5b8:	2200      	movs	r2, #0
    p_reg->CH[channel].PSELP = pselp;
   2c5ba:	485d      	ldr	r0, [pc, #372]	; (2c730 <adc_nrfx_read+0x19c>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   2c5bc:	4f5d      	ldr	r7, [pc, #372]	; (2c734 <adc_nrfx_read+0x1a0>)
	active_channels = 0U;
   2c5be:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   2c5c0:	fa26 f302 	lsr.w	r3, r6, r2
   2c5c4:	f013 0301 	ands.w	r3, r3, #1
   2c5c8:	d033      	beq.n	2c632 <adc_nrfx_read+0x9e>
			if (m_data.positive_inputs[channel_id] == 0U) {
   2c5ca:	f817 c002 	ldrb.w	ip, [r7, r2]
   2c5ce:	f1bc 0f00 	cmp.w	ip, #0
   2c5d2:	d10b      	bne.n	2c5ec <adc_nrfx_read+0x58>
				LOG_ERR("Channel %u not configured",
   2c5d4:	4858      	ldr	r0, [pc, #352]	; (2c738 <adc_nrfx_read+0x1a4>)
   2c5d6:	2145      	movs	r1, #69	; 0x45
   2c5d8:	f00b fd04 	bl	37fe4 <z_log_minimal_printk>
		return -EINVAL;
   2c5dc:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   2c5e0:	4851      	ldr	r0, [pc, #324]	; (2c728 <adc_nrfx_read+0x194>)
   2c5e2:	f005 fec9 	bl	32378 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   2c5e6:	4620      	mov	r0, r4
   2c5e8:	b003      	add	sp, #12
   2c5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   2c5ec:	eb00 1e02 	add.w	lr, r0, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   2c5f0:	7c65      	ldrb	r5, [r4, #17]
   2c5f2:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   2c5f6:	3d00      	subs	r5, #0
   2c5f8:	bf18      	it	ne
   2c5fa:	2501      	movne	r5, #1
   2c5fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2c600:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2c604:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   2c608:	f102 0351 	add.w	r3, r2, #81	; 0x51
   2c60c:	011b      	lsls	r3, r3, #4
			++active_channels;
   2c60e:	3101      	adds	r1, #1
   2c610:	f840 c003 	str.w	ip, [r0, r3]
   2c614:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   2c616:	3201      	adds	r2, #1
   2c618:	2a08      	cmp	r2, #8
   2c61a:	d1d1      	bne.n	2c5c0 <adc_nrfx_read+0x2c>
	error = set_resolution(sequence);
   2c61c:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   2c61e:	f1a2 0308 	sub.w	r3, r2, #8
   2c622:	2b06      	cmp	r3, #6
   2c624:	d817      	bhi.n	2c656 <adc_nrfx_read+0xc2>
   2c626:	e8df f003 	tbb	[pc, r3]
   2c62a:	1619      	.short	0x1619
   2c62c:	1609161b 	.word	0x1609161b
   2c630:	14          	.byte	0x14
   2c631:	00          	.byte	0x00
   2c632:	f102 0551 	add.w	r5, r2, #81	; 0x51
   2c636:	012d      	lsls	r5, r5, #4
   2c638:	5143      	str	r3, [r0, r5]
}
   2c63a:	e7ec      	b.n	2c616 <adc_nrfx_read+0x82>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   2c63c:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   2c63e:	483c      	ldr	r0, [pc, #240]	; (2c730 <adc_nrfx_read+0x19c>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2c640:	2901      	cmp	r1, #1
   2c642:	f8c0 35f0 	str.w	r3, [r0, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   2c646:	7c62      	ldrb	r2, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2c648:	d90c      	bls.n	2c664 <adc_nrfx_read+0xd0>
   2c64a:	b16a      	cbz	r2, 2c668 <adc_nrfx_read+0xd4>
		LOG_ERR(
   2c64c:	483b      	ldr	r0, [pc, #236]	; (2c73c <adc_nrfx_read+0x1a8>)
   2c64e:	2145      	movs	r1, #69	; 0x45
   2c650:	e7af      	b.n	2c5b2 <adc_nrfx_read+0x1e>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   2c652:	2303      	movs	r3, #3
		break;
   2c654:	e7f3      	b.n	2c63e <adc_nrfx_read+0xaa>
		LOG_ERR("ADC resolution value %d is not valid",
   2c656:	483a      	ldr	r0, [pc, #232]	; (2c740 <adc_nrfx_read+0x1ac>)
   2c658:	2145      	movs	r1, #69	; 0x45
   2c65a:	e7bd      	b.n	2c5d8 <adc_nrfx_read+0x44>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   2c65c:	2300      	movs	r3, #0
   2c65e:	e7ee      	b.n	2c63e <adc_nrfx_read+0xaa>
	switch (sequence->resolution) {
   2c660:	2301      	movs	r3, #1
   2c662:	e7ec      	b.n	2c63e <adc_nrfx_read+0xaa>
	switch (sequence->oversampling) {
   2c664:	2a08      	cmp	r2, #8
   2c666:	d80e      	bhi.n	2c686 <adc_nrfx_read+0xf2>
    p_reg->OVERSAMPLE = oversample;
   2c668:	f8c0 25f4 	str.w	r2, [r0, #1524]	; 0x5f4
	if (sequence->options) {
   2c66c:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   2c66e:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   2c670:	b962      	cbnz	r2, 2c68c <adc_nrfx_read+0xf8>
	if (sequence->buffer_size < needed_buffer_size) {
   2c672:	68e2      	ldr	r2, [r4, #12]
   2c674:	429a      	cmp	r2, r3
   2c676:	d20d      	bcs.n	2c694 <adc_nrfx_read+0x100>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   2c678:	4832      	ldr	r0, [pc, #200]	; (2c744 <adc_nrfx_read+0x1b0>)
   2c67a:	2145      	movs	r1, #69	; 0x45
   2c67c:	f00b fcb2 	bl	37fe4 <z_log_minimal_printk>
		return -ENOMEM;
   2c680:	f06f 040b 	mvn.w	r4, #11
   2c684:	e7ac      	b.n	2c5e0 <adc_nrfx_read+0x4c>
		LOG_ERR("Oversampling value %d is not valid",
   2c686:	4830      	ldr	r0, [pc, #192]	; (2c748 <adc_nrfx_read+0x1b4>)
   2c688:	2145      	movs	r1, #69	; 0x45
   2c68a:	e7a5      	b.n	2c5d8 <adc_nrfx_read+0x44>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   2c68c:	8992      	ldrh	r2, [r2, #12]
   2c68e:	fb02 3303 	mla	r3, r2, r3, r3
   2c692:	e7ee      	b.n	2c672 <adc_nrfx_read+0xde>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2c694:	4b26      	ldr	r3, [pc, #152]	; (2c730 <adc_nrfx_read+0x19c>)
   2c696:	68a2      	ldr	r2, [r4, #8]
   2c698:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   2c69c:	4627      	mov	r7, r4
    p_reg->RESULT.MAXCNT = size;
   2c69e:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   2c6a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2c6a4:	4d29      	ldr	r5, [pc, #164]	; (2c74c <adc_nrfx_read+0x1b8>)
   2c6a6:	f105 0674 	add.w	r6, r5, #116	; 0x74
   2c6aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2c6ac:	683b      	ldr	r3, [r7, #0]
   2c6ae:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   2c6b0:	2600      	movs	r6, #0
   2c6b2:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   2c6b4:	6823      	ldr	r3, [r4, #0]
   2c6b6:	462f      	mov	r7, r5
   2c6b8:	b38b      	cbz	r3, 2c71e <adc_nrfx_read+0x18a>
		ctx->options = *sequence->options;
   2c6ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2c6bc:	f105 0488 	add.w	r4, r5, #136	; 0x88
   2c6c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   2c6c4:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   2c6c6:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   2c6ca:	b340      	cbz	r0, 2c71e <adc_nrfx_read+0x18a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c6cc:	f3bf 8f5b 	dmb	ish
   2c6d0:	e857 3f00 	ldrex	r3, [r7]
   2c6d4:	e847 6200 	strex	r2, r6, [r7]
   2c6d8:	2a00      	cmp	r2, #0
   2c6da:	d1f9      	bne.n	2c6d0 <adc_nrfx_read+0x13c>
   2c6dc:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   2c6e0:	491b      	ldr	r1, [pc, #108]	; (2c750 <adc_nrfx_read+0x1bc>)
   2c6e2:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
   2c6e6:	4a1b      	ldr	r2, [pc, #108]	; (2c754 <adc_nrfx_read+0x1c0>)
   2c6e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2c6ec:	460f      	mov	r7, r1
   2c6ee:	4631      	mov	r1, r6
   2c6f0:	fbe4 7100 	umlal	r7, r1, r4, r0
   2c6f4:	2300      	movs	r3, #0
   2c6f6:	4638      	mov	r0, r7
   2c6f8:	f7df fe02 	bl	c300 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   2c6fc:	2200      	movs	r2, #0
   2c6fe:	e9cd 0100 	strd	r0, r1, [sp]
   2c702:	2300      	movs	r3, #0
   2c704:	f105 0008 	add.w	r0, r5, #8
   2c708:	f007 fec8 	bl	3449c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   2c70c:	4812      	ldr	r0, [pc, #72]	; (2c758 <adc_nrfx_read+0x1c4>)
   2c70e:	f04f 32ff 	mov.w	r2, #4294967295
   2c712:	f04f 33ff 	mov.w	r3, #4294967295
   2c716:	f005 fe6b 	bl	323f0 <z_impl_k_sem_take>
	return ctx->status;
   2c71a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   2c71c:	e760      	b.n	2c5e0 <adc_nrfx_read+0x4c>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   2c71e:	480b      	ldr	r0, [pc, #44]	; (2c74c <adc_nrfx_read+0x1b8>)
   2c720:	f7ff feae 	bl	2c480 <adc_context_start_sampling>
   2c724:	e7f2      	b.n	2c70c <adc_nrfx_read+0x178>
   2c726:	bf00      	nop
   2c728:	200005a0 	.word	0x200005a0
   2c72c:	0003e1bd 	.word	0x0003e1bd
   2c730:	40007000 	.word	0x40007000
   2c734:	20000600 	.word	0x20000600
   2c738:	0003e1e0 	.word	0x0003e1e0
   2c73c:	0003e229 	.word	0x0003e229
   2c740:	0003e1ff 	.word	0x0003e1ff
   2c744:	0003e288 	.word	0x0003e288
   2c748:	0003e260 	.word	0x0003e260
   2c74c:	20000560 	.word	0x20000560
   2c750:	000f423f 	.word	0x000f423f
   2c754:	000f4240 	.word	0x000f4240
   2c758:	200005b8 	.word	0x200005b8

0002c75c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   2c75c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c75e:	4b0e      	ldr	r3, [pc, #56]	; (2c798 <init_saadc+0x3c>)
   2c760:	2400      	movs	r4, #0
   2c762:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2c766:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2c76a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   2c76e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   2c772:	2212      	movs	r2, #18
   2c774:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   2c778:	2007      	movs	r0, #7
   2c77a:	f7f8 fe35 	bl	253e8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2c77e:	4622      	mov	r2, r4
   2c780:	2101      	movs	r1, #1
   2c782:	2007      	movs	r0, #7
   2c784:	f7f8 fe60 	bl	25448 <z_arm_irq_priority_set>
	return sem->count;
   2c788:	4804      	ldr	r0, [pc, #16]	; (2c79c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   2c78a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   2c78c:	b913      	cbnz	r3, 2c794 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   2c78e:	3040      	adds	r0, #64	; 0x40
   2c790:	f005 fdf2 	bl	32378 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   2c794:	2000      	movs	r0, #0
   2c796:	bd10      	pop	{r4, pc}
   2c798:	40007000 	.word	0x40007000
   2c79c:	20000560 	.word	0x20000560

0002c7a0 <saadc_irq_handler>:
{
   2c7a0:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c7a2:	4b2f      	ldr	r3, [pc, #188]	; (2c860 <saadc_irq_handler+0xc0>)
   2c7a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   2c7a8:	2a00      	cmp	r2, #0
   2c7aa:	d04c      	beq.n	2c846 <saadc_irq_handler+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c7ac:	2200      	movs	r2, #0
   2c7ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2c7b2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   2c7b6:	4c2b      	ldr	r4, [pc, #172]	; (2c864 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c7b8:	2101      	movs	r1, #1
   2c7ba:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   2c7bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   2c7c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2c7c2:	4625      	mov	r5, r4
   2c7c4:	b3d3      	cbz	r3, 2c83c <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
   2c7c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   2c7ca:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   2c7ce:	b133      	cbz	r3, 2c7de <saadc_irq_handler+0x3e>
			action = callback(dev,
   2c7d0:	f104 0174 	add.w	r1, r4, #116	; 0x74
   2c7d4:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   2c7d6:	2801      	cmp	r0, #1
   2c7d8:	d014      	beq.n	2c804 <saadc_irq_handler+0x64>
   2c7da:	2802      	cmp	r0, #2
   2c7dc:	d028      	beq.n	2c830 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   2c7de:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   2c7e2:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   2c7e6:	429a      	cmp	r2, r3
   2c7e8:	d922      	bls.n	2c830 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   2c7ea:	3301      	adds	r3, #1
   2c7ec:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   2c7f0:	4b1b      	ldr	r3, [pc, #108]	; (2c860 <saadc_irq_handler+0xc0>)
   2c7f2:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   2c7f6:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   2c7fa:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   2c7fc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2c800:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   2c804:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   2c808:	b923      	cbnz	r3, 2c814 <saadc_irq_handler+0x74>
}
   2c80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   2c80e:	4815      	ldr	r0, [pc, #84]	; (2c864 <saadc_irq_handler+0xc4>)
   2c810:	f7ff be36 	b.w	2c480 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2c814:	f3bf 8f5b 	dmb	ish
   2c818:	e855 3f00 	ldrex	r3, [r5]
   2c81c:	1e5a      	subs	r2, r3, #1
   2c81e:	e845 2100 	strex	r1, r2, [r5]
   2c822:	2900      	cmp	r1, #0
   2c824:	d1f8      	bne.n	2c818 <saadc_irq_handler+0x78>
   2c826:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   2c82a:	2b01      	cmp	r3, #1
   2c82c:	dced      	bgt.n	2c80a <saadc_irq_handler+0x6a>
   2c82e:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   2c830:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   2c834:	b113      	cbz	r3, 2c83c <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   2c836:	480c      	ldr	r0, [pc, #48]	; (2c868 <saadc_irq_handler+0xc8>)
   2c838:	f00e ff4e 	bl	3b6d8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   2c83c:	480b      	ldr	r0, [pc, #44]	; (2c86c <saadc_irq_handler+0xcc>)
   2c83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c842:	f005 bd99 	b.w	32378 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c846:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   2c84a:	2900      	cmp	r1, #0
   2c84c:	d0ef      	beq.n	2c82e <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c84e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2c852:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c856:	2201      	movs	r2, #1
   2c858:	609a      	str	r2, [r3, #8]
   2c85a:	601a      	str	r2, [r3, #0]
   2c85c:	605a      	str	r2, [r3, #4]
}
   2c85e:	e7e6      	b.n	2c82e <saadc_irq_handler+0x8e>
   2c860:	40007000 	.word	0x40007000
   2c864:	20000560 	.word	0x20000560
   2c868:	20000568 	.word	0x20000568
   2c86c:	200005b8 	.word	0x200005b8

0002c870 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2c870:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c872:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2c874:	490a      	ldr	r1, [pc, #40]	; (2c8a0 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2c876:	4a0b      	ldr	r2, [pc, #44]	; (2c8a4 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   2c878:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2c87a:	2340      	movs	r3, #64	; 0x40
   2c87c:	9300      	str	r3, [sp, #0]
   2c87e:	1149      	asrs	r1, r1, #5
{
   2c880:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2c882:	4623      	mov	r3, r4
   2c884:	4808      	ldr	r0, [pc, #32]	; (2c8a8 <onoff_start+0x38>)
   2c886:	f00d fd76 	bl	3a376 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2c88a:	1e01      	subs	r1, r0, #0
   2c88c:	da05      	bge.n	2c89a <onoff_start+0x2a>
		notify(mgr, err);
   2c88e:	4628      	mov	r0, r5
   2c890:	4623      	mov	r3, r4
	}
}
   2c892:	b003      	add	sp, #12
   2c894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   2c898:	4718      	bx	r3
}
   2c89a:	b003      	add	sp, #12
   2c89c:	bd30      	pop	{r4, r5, pc}
   2c89e:	bf00      	nop
   2c8a0:	20003eb8 	.word	0x20003eb8
   2c8a4:	0003a3e1 	.word	0x0003a3e1
   2c8a8:	0003b954 	.word	0x0003b954

0002c8ac <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2c8ac:	b2c9      	uxtb	r1, r1
   2c8ae:	2901      	cmp	r1, #1
{
   2c8b0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2c8b2:	d908      	bls.n	2c8c6 <get_status+0x1a>
   2c8b4:	4908      	ldr	r1, [pc, #32]	; (2c8d8 <get_status+0x2c>)
   2c8b6:	4809      	ldr	r0, [pc, #36]	; (2c8dc <get_status+0x30>)
   2c8b8:	227a      	movs	r2, #122	; 0x7a
   2c8ba:	f00b fb85 	bl	37fc8 <assert_print>
   2c8be:	4806      	ldr	r0, [pc, #24]	; (2c8d8 <get_status+0x2c>)
   2c8c0:	217a      	movs	r1, #122	; 0x7a
   2c8c2:	f00b fb7a 	bl	37fba <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2c8c6:	6903      	ldr	r3, [r0, #16]
   2c8c8:	220c      	movs	r2, #12
   2c8ca:	fb01 3302 	mla	r3, r1, r2, r3
   2c8ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   2c8d0:	f000 0007 	and.w	r0, r0, #7
   2c8d4:	bd08      	pop	{r3, pc}
   2c8d6:	bf00      	nop
   2c8d8:	0003e2ce 	.word	0x0003e2ce
   2c8dc:	0003c7f8 	.word	0x0003c7f8

0002c8e0 <stop>:
{
   2c8e0:	b570      	push	{r4, r5, r6, lr}
   2c8e2:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2c8e4:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   2c8e6:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2c8e8:	d90a      	bls.n	2c900 <stop+0x20>
   2c8ea:	4918      	ldr	r1, [pc, #96]	; (2c94c <stop+0x6c>)
   2c8ec:	4818      	ldr	r0, [pc, #96]	; (2c950 <stop+0x70>)
   2c8ee:	f240 125d 	movw	r2, #349	; 0x15d
   2c8f2:	f00b fb69 	bl	37fc8 <assert_print>
   2c8f6:	4815      	ldr	r0, [pc, #84]	; (2c94c <stop+0x6c>)
   2c8f8:	f240 115d 	movw	r1, #349	; 0x15d
   2c8fc:	f00b fb5d 	bl	37fba <assert_post_action>
	__asm__ volatile(
   2c900:	f04f 0440 	mov.w	r4, #64	; 0x40
   2c904:	f3ef 8511 	mrs	r5, BASEPRI
   2c908:	f384 8812 	msr	BASEPRI_MAX, r4
   2c90c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2c910:	260c      	movs	r6, #12
   2c912:	fb06 3401 	mla	r4, r6, r1, r3
   2c916:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2c918:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2c91c:	d008      	beq.n	2c930 <stop+0x50>
   2c91e:	42a2      	cmp	r2, r4
   2c920:	d006      	beq.n	2c930 <stop+0x50>
	__asm__ volatile(
   2c922:	f385 8811 	msr	BASEPRI, r5
   2c926:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2c92a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2c92e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2c930:	4371      	muls	r1, r6
   2c932:	440b      	add	r3, r1
   2c934:	2201      	movs	r2, #1
   2c936:	649a      	str	r2, [r3, #72]	; 0x48
   2c938:	f385 8811 	msr	BASEPRI, r5
   2c93c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2c940:	6843      	ldr	r3, [r0, #4]
   2c942:	440b      	add	r3, r1
   2c944:	685b      	ldr	r3, [r3, #4]
   2c946:	4798      	blx	r3
	return 0;
   2c948:	2000      	movs	r0, #0
   2c94a:	e7f0      	b.n	2c92e <stop+0x4e>
   2c94c:	0003e2ce 	.word	0x0003e2ce
   2c950:	0003c7f8 	.word	0x0003c7f8

0002c954 <onoff_stop>:
{
   2c954:	b570      	push	{r4, r5, r6, lr}
   2c956:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2c958:	4906      	ldr	r1, [pc, #24]	; (2c974 <onoff_stop+0x20>)
   2c95a:	1a41      	subs	r1, r0, r1
{
   2c95c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2c95e:	1149      	asrs	r1, r1, #5
   2c960:	4805      	ldr	r0, [pc, #20]	; (2c978 <onoff_stop+0x24>)
   2c962:	2240      	movs	r2, #64	; 0x40
   2c964:	f7ff ffbc 	bl	2c8e0 <stop>
	notify(mgr, res);
   2c968:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2c96a:	4601      	mov	r1, r0
	notify(mgr, res);
   2c96c:	4620      	mov	r0, r4
}
   2c96e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2c972:	4718      	bx	r3
   2c974:	20003eb8 	.word	0x20003eb8
   2c978:	0003b954 	.word	0x0003b954

0002c97c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2c97c:	2200      	movs	r2, #0
{
   2c97e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2c980:	2101      	movs	r1, #1
{
   2c982:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2c984:	4610      	mov	r0, r2
   2c986:	f7f8 fd5f 	bl	25448 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2c98a:	480f      	ldr	r0, [pc, #60]	; (2c9c8 <clk_init+0x4c>)
   2c98c:	f002 fe5c 	bl	2f648 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2c990:	4b0e      	ldr	r3, [pc, #56]	; (2c9cc <clk_init+0x50>)
   2c992:	4298      	cmp	r0, r3
   2c994:	d115      	bne.n	2c9c2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2c996:	f00e f8de 	bl	3ab56 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2c99a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2c99c:	490c      	ldr	r1, [pc, #48]	; (2c9d0 <clk_init+0x54>)
   2c99e:	4630      	mov	r0, r6
   2c9a0:	f00b fa87 	bl	37eb2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2c9a4:	2800      	cmp	r0, #0
   2c9a6:	db0b      	blt.n	2c9c0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2c9a8:	2501      	movs	r5, #1
   2c9aa:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   2c9ac:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2c9ae:	4908      	ldr	r1, [pc, #32]	; (2c9d0 <clk_init+0x54>)
   2c9b0:	f104 0020 	add.w	r0, r4, #32
   2c9b4:	f00b fa7d 	bl	37eb2 <onoff_manager_init>
		if (err < 0) {
   2c9b8:	2800      	cmp	r0, #0
   2c9ba:	db01      	blt.n	2c9c0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2c9bc:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   2c9be:	2000      	movs	r0, #0
}
   2c9c0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2c9c2:	f06f 0004 	mvn.w	r0, #4
   2c9c6:	e7fb      	b.n	2c9c0 <clk_init+0x44>
   2c9c8:	0002ca09 	.word	0x0002ca09
   2c9cc:	0bad0000 	.word	0x0bad0000
   2c9d0:	0003c2c0 	.word	0x0003c2c0

0002c9d4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2c9d4:	b570      	push	{r4, r5, r6, lr}
   2c9d6:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2c9d8:	230c      	movs	r3, #12
   2c9da:	4809      	ldr	r0, [pc, #36]	; (2ca00 <clkstarted_handle.constprop.0+0x2c>)
   2c9dc:	434b      	muls	r3, r1
   2c9de:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   2c9e0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   2c9e4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2c9e6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   2c9e8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   2c9ea:	4418      	add	r0, r3
   2c9ec:	f00d fcb0 	bl	3a350 <set_on_state>
	if (callback) {
   2c9f0:	b12d      	cbz	r5, 2c9fe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2c9f2:	4632      	mov	r2, r6
   2c9f4:	462b      	mov	r3, r5
   2c9f6:	4803      	ldr	r0, [pc, #12]	; (2ca04 <clkstarted_handle.constprop.0+0x30>)
}
   2c9f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2c9fc:	4718      	bx	r3
}
   2c9fe:	bd70      	pop	{r4, r5, r6, pc}
   2ca00:	20003eb8 	.word	0x20003eb8
   2ca04:	0003b954 	.word	0x0003b954

0002ca08 <clock_event_handler>:
	switch (event) {
   2ca08:	2801      	cmp	r0, #1
{
   2ca0a:	b508      	push	{r3, lr}
	switch (event) {
   2ca0c:	d006      	beq.n	2ca1c <clock_event_handler+0x14>
   2ca0e:	2803      	cmp	r0, #3
   2ca10:	d008      	beq.n	2ca24 <clock_event_handler+0x1c>
   2ca12:	b990      	cbnz	r0, 2ca3a <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2ca14:	4b0e      	ldr	r3, [pc, #56]	; (2ca50 <clock_event_handler+0x48>)
   2ca16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ca18:	075b      	lsls	r3, r3, #29
   2ca1a:	d117      	bne.n	2ca4c <clock_event_handler+0x44>
}
   2ca1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2ca20:	f7ff bfd8 	b.w	2c9d4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   2ca24:	490b      	ldr	r1, [pc, #44]	; (2ca54 <clock_event_handler+0x4c>)
   2ca26:	480c      	ldr	r0, [pc, #48]	; (2ca58 <clock_event_handler+0x50>)
   2ca28:	f240 226e 	movw	r2, #622	; 0x26e
   2ca2c:	f00b facc 	bl	37fc8 <assert_print>
   2ca30:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   2ca34:	4807      	ldr	r0, [pc, #28]	; (2ca54 <clock_event_handler+0x4c>)
   2ca36:	f00b fac0 	bl	37fba <assert_post_action>
   2ca3a:	4906      	ldr	r1, [pc, #24]	; (2ca54 <clock_event_handler+0x4c>)
   2ca3c:	4806      	ldr	r0, [pc, #24]	; (2ca58 <clock_event_handler+0x50>)
   2ca3e:	f240 2272 	movw	r2, #626	; 0x272
   2ca42:	f00b fac1 	bl	37fc8 <assert_print>
   2ca46:	f240 2172 	movw	r1, #626	; 0x272
   2ca4a:	e7f3      	b.n	2ca34 <clock_event_handler+0x2c>
}
   2ca4c:	bd08      	pop	{r3, pc}
   2ca4e:	bf00      	nop
   2ca50:	20003eb8 	.word	0x20003eb8
   2ca54:	0003e2ce 	.word	0x0003e2ce
   2ca58:	0003c7f8 	.word	0x0003c7f8

0002ca5c <generic_hfclk_start>:
{
   2ca5c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2ca5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ca62:	f3ef 8111 	mrs	r1, BASEPRI
   2ca66:	f383 8812 	msr	BASEPRI_MAX, r3
   2ca6a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2ca6e:	4a12      	ldr	r2, [pc, #72]	; (2cab8 <generic_hfclk_start+0x5c>)
   2ca70:	6813      	ldr	r3, [r2, #0]
   2ca72:	f043 0002 	orr.w	r0, r3, #2
   2ca76:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2ca78:	07da      	lsls	r2, r3, #31
   2ca7a:	d408      	bmi.n	2ca8e <generic_hfclk_start+0x32>
	__asm__ volatile(
   2ca7c:	f381 8811 	msr	BASEPRI, r1
   2ca80:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2ca84:	2001      	movs	r0, #1
}
   2ca86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2ca8a:	f002 bda7 	b.w	2f5dc <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2ca8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ca92:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2ca96:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2ca9a:	07d3      	lsls	r3, r2, #31
   2ca9c:	d5ee      	bpl.n	2ca7c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   2ca9e:	4807      	ldr	r0, [pc, #28]	; (2cabc <generic_hfclk_start+0x60>)
   2caa0:	f00d fc56 	bl	3a350 <set_on_state>
   2caa4:	f381 8811 	msr	BASEPRI, r1
   2caa8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   2caac:	2000      	movs	r0, #0
}
   2caae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2cab2:	f7ff bf8f 	b.w	2c9d4 <clkstarted_handle.constprop.0>
   2cab6:	bf00      	nop
   2cab8:	20003f10 	.word	0x20003f10
   2cabc:	20003f00 	.word	0x20003f00

0002cac0 <api_blocking_start>:
{
   2cac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2cac2:	2200      	movs	r2, #0
   2cac4:	2301      	movs	r3, #1
   2cac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2caca:	ab04      	add	r3, sp, #16
   2cacc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2cad0:	4a09      	ldr	r2, [pc, #36]	; (2caf8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2cad2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2cad6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2cad8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2cadc:	f00d fc79 	bl	3a3d2 <api_start>
	if (err < 0) {
   2cae0:	2800      	cmp	r0, #0
   2cae2:	db05      	blt.n	2caf0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   2cae4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2cae8:	2300      	movs	r3, #0
   2caea:	4668      	mov	r0, sp
   2caec:	f005 fc80 	bl	323f0 <z_impl_k_sem_take>
}
   2caf0:	b007      	add	sp, #28
   2caf2:	f85d fb04 	ldr.w	pc, [sp], #4
   2caf6:	bf00      	nop
   2caf8:	0003a3f9 	.word	0x0003a3f9

0002cafc <generic_hfclk_stop>:
{
   2cafc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2cafe:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cb02:	f3ef 8411 	mrs	r4, BASEPRI
   2cb06:	f383 8812 	msr	BASEPRI_MAX, r3
   2cb0a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   2cb0e:	4a07      	ldr	r2, [pc, #28]	; (2cb2c <generic_hfclk_stop+0x30>)
   2cb10:	6813      	ldr	r3, [r2, #0]
   2cb12:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   2cb16:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   2cb18:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   2cb1a:	d402      	bmi.n	2cb22 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2cb1c:	2001      	movs	r0, #1
   2cb1e:	f002 fd7d 	bl	2f61c <nrfx_clock_stop>
	__asm__ volatile(
   2cb22:	f384 8811 	msr	BASEPRI, r4
   2cb26:	f3bf 8f6f 	isb	sy
}
   2cb2a:	bd10      	pop	{r4, pc}
   2cb2c:	20003f10 	.word	0x20003f10

0002cb30 <z_nrf_clock_control_lf_on>:
{
   2cb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cb34:	4944      	ldr	r1, [pc, #272]	; (2cc48 <z_nrf_clock_control_lf_on+0x118>)
   2cb36:	f3bf 8f5b 	dmb	ish
   2cb3a:	4606      	mov	r6, r0
   2cb3c:	2201      	movs	r2, #1
   2cb3e:	e851 3f00 	ldrex	r3, [r1]
   2cb42:	e841 2000 	strex	r0, r2, [r1]
   2cb46:	2800      	cmp	r0, #0
   2cb48:	d1f9      	bne.n	2cb3e <z_nrf_clock_control_lf_on+0xe>
   2cb4a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2cb4e:	b99b      	cbnz	r3, 2cb78 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2cb50:	493e      	ldr	r1, [pc, #248]	; (2cc4c <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   2cb52:	483f      	ldr	r0, [pc, #252]	; (2cc50 <z_nrf_clock_control_lf_on+0x120>)
   2cb54:	604b      	str	r3, [r1, #4]
   2cb56:	60cb      	str	r3, [r1, #12]
   2cb58:	608a      	str	r2, [r1, #8]
   2cb5a:	f7f7 fac9 	bl	240f0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   2cb5e:	2800      	cmp	r0, #0
   2cb60:	da0a      	bge.n	2cb78 <z_nrf_clock_control_lf_on+0x48>
   2cb62:	493c      	ldr	r1, [pc, #240]	; (2cc54 <z_nrf_clock_control_lf_on+0x124>)
   2cb64:	483c      	ldr	r0, [pc, #240]	; (2cc58 <z_nrf_clock_control_lf_on+0x128>)
   2cb66:	f44f 720c 	mov.w	r2, #560	; 0x230
   2cb6a:	f00b fa2d 	bl	37fc8 <assert_print>
   2cb6e:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   2cb72:	4838      	ldr	r0, [pc, #224]	; (2cc54 <z_nrf_clock_control_lf_on+0x124>)
   2cb74:	f00b fa21 	bl	37fba <assert_post_action>
	switch (start_mode) {
   2cb78:	b376      	cbz	r6, 2cbd8 <z_nrf_clock_control_lf_on+0xa8>
   2cb7a:	1e73      	subs	r3, r6, #1
   2cb7c:	2b01      	cmp	r3, #1
   2cb7e:	d859      	bhi.n	2cc34 <z_nrf_clock_control_lf_on+0x104>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2cb80:	2e01      	cmp	r6, #1
   2cb82:	d107      	bne.n	2cb94 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2cb84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cb88:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2cb8c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2cb90:	2b01      	cmp	r3, #1
   2cb92:	d021      	beq.n	2cbd8 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2cb94:	f00e fc7e 	bl	3b494 <k_is_in_isr>
   2cb98:	4605      	mov	r5, r0
   2cb9a:	b9f8      	cbnz	r0, 2cbdc <z_nrf_clock_control_lf_on+0xac>
	return !z_sys_post_kernel;
   2cb9c:	4b2f      	ldr	r3, [pc, #188]	; (2cc5c <z_nrf_clock_control_lf_on+0x12c>)
   2cb9e:	781b      	ldrb	r3, [r3, #0]
   2cba0:	b1e3      	cbz	r3, 2cbdc <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENCLR = mask;
   2cba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cba6:	2202      	movs	r2, #2
   2cba8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2cbac:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cbae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2cc60 <z_nrf_clock_control_lf_on+0x130>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2cbb2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2cbb6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2cbba:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   2cbbe:	03d2      	lsls	r2, r2, #15
   2cbc0:	d516      	bpl.n	2cbf0 <z_nrf_clock_control_lf_on+0xc0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2cbc2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2cbc6:	2b01      	cmp	r3, #1
   2cbc8:	d001      	beq.n	2cbce <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2cbca:	2e01      	cmp	r6, #1
   2cbcc:	d110      	bne.n	2cbf0 <z_nrf_clock_control_lf_on+0xc0>
	if (isr_mode) {
   2cbce:	b35d      	cbz	r5, 2cc28 <z_nrf_clock_control_lf_on+0xf8>
   2cbd0:	f387 8811 	msr	BASEPRI, r7
   2cbd4:	f3bf 8f6f 	isb	sy
}
   2cbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   2cbdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cbe0:	f3ef 8711 	mrs	r7, BASEPRI
   2cbe4:	f383 8812 	msr	BASEPRI_MAX, r3
   2cbe8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2cbec:	2501      	movs	r5, #1
   2cbee:	e7de      	b.n	2cbae <z_nrf_clock_control_lf_on+0x7e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2cbf0:	b1ad      	cbz	r5, 2cc1e <z_nrf_clock_control_lf_on+0xee>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2cbf2:	4638      	mov	r0, r7
   2cbf4:	f7f8 fbbe 	bl	25374 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   2cbf8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2cbfc:	2b00      	cmp	r3, #0
   2cbfe:	d1da      	bne.n	2cbb6 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2cc00:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   2cc04:	2a00      	cmp	r2, #0
   2cc06:	d0d6      	beq.n	2cbb6 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cc08:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2cc0c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   2cc10:	2301      	movs	r3, #1
   2cc12:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   2cc16:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cc1a:	60a3      	str	r3, [r4, #8]
}
   2cc1c:	e7cb      	b.n	2cbb6 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   2cc1e:	2100      	movs	r1, #0
   2cc20:	2021      	movs	r0, #33	; 0x21
   2cc22:	f006 ffdd 	bl	33be0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2cc26:	e7e7      	b.n	2cbf8 <z_nrf_clock_control_lf_on+0xc8>
    p_reg->INTENSET = mask;
   2cc28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cc2c:	2202      	movs	r2, #2
   2cc2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2cc32:	e7d1      	b.n	2cbd8 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   2cc34:	4907      	ldr	r1, [pc, #28]	; (2cc54 <z_nrf_clock_control_lf_on+0x124>)
   2cc36:	4808      	ldr	r0, [pc, #32]	; (2cc58 <z_nrf_clock_control_lf_on+0x128>)
   2cc38:	f240 2242 	movw	r2, #578	; 0x242
   2cc3c:	f00b f9c4 	bl	37fc8 <assert_print>
   2cc40:	f240 2142 	movw	r1, #578	; 0x242
   2cc44:	e795      	b.n	2cb72 <z_nrf_clock_control_lf_on+0x42>
   2cc46:	bf00      	nop
   2cc48:	20003eb4 	.word	0x20003eb4
   2cc4c:	20003ea4 	.word	0x20003ea4
   2cc50:	20003ed8 	.word	0x20003ed8
   2cc54:	0003e2ce 	.word	0x0003e2ce
   2cc58:	0003c7f8 	.word	0x0003c7f8
   2cc5c:	20005298 	.word	0x20005298
   2cc60:	e000e100 	.word	0xe000e100

0002cc64 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   2cc64:	b508      	push	{r3, lr}
   2cc66:	4807      	ldr	r0, [pc, #28]	; (2cc84 <uart_console_init+0x20>)
   2cc68:	f00e fbd8 	bl	3b41c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   2cc6c:	b138      	cbz	r0, 2cc7e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   2cc6e:	4806      	ldr	r0, [pc, #24]	; (2cc88 <uart_console_init+0x24>)
   2cc70:	f7f9 f8e2 	bl	25e38 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2cc74:	4804      	ldr	r0, [pc, #16]	; (2cc88 <uart_console_init+0x24>)
   2cc76:	f7f6 ff31 	bl	23adc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2cc7a:	2000      	movs	r0, #0
}
   2cc7c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2cc7e:	f06f 0012 	mvn.w	r0, #18
   2cc82:	e7fb      	b.n	2cc7c <uart_console_init+0x18>
   2cc84:	0003b9c4 	.word	0x0003b9c4
   2cc88:	0002cc8d 	.word	0x0002cc8d

0002cc8c <console_out>:
	if ('\n' == c) {
   2cc8c:	280a      	cmp	r0, #10
{
   2cc8e:	b538      	push	{r3, r4, r5, lr}
   2cc90:	4d07      	ldr	r5, [pc, #28]	; (2ccb0 <console_out+0x24>)
   2cc92:	4604      	mov	r4, r0
	if ('\n' == c) {
   2cc94:	d104      	bne.n	2cca0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   2cc96:	68ab      	ldr	r3, [r5, #8]
   2cc98:	210d      	movs	r1, #13
   2cc9a:	685b      	ldr	r3, [r3, #4]
   2cc9c:	4628      	mov	r0, r5
   2cc9e:	4798      	blx	r3
   2cca0:	68ab      	ldr	r3, [r5, #8]
   2cca2:	4803      	ldr	r0, [pc, #12]	; (2ccb0 <console_out+0x24>)
   2cca4:	685b      	ldr	r3, [r3, #4]
   2cca6:	b2e1      	uxtb	r1, r4
   2cca8:	4798      	blx	r3
}
   2ccaa:	4620      	mov	r0, r4
   2ccac:	bd38      	pop	{r3, r4, r5, pc}
   2ccae:	bf00      	nop
   2ccb0:	0003b9c4 	.word	0x0003b9c4

0002ccb4 <led_pwm_pm_action>:
}

#ifdef CONFIG_PM_DEVICE
static int led_pwm_pm_action(const struct device *dev,
			     enum pm_device_action action)
{
   2ccb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

		LOG_DBG("PWM %p running pm action %" PRIu32, led->dev, action);

		err = pm_device_action_run(led->dev, action);
		if (err && (err != -EALREADY)) {
			LOG_ERR("Cannot switch PWM %p power state", led->dev);
   2ccb8:	f8df 9038 	ldr.w	r9, [pc, #56]	; 2ccf4 <led_pwm_pm_action+0x40>
	const struct led_pwm_config *config = dev->config;
   2ccbc:	6846      	ldr	r6, [r0, #4]
{
   2ccbe:	460d      	mov	r5, r1
	for (size_t i = 0; i < config->num_leds; i++) {
   2ccc0:	2400      	movs	r4, #0
   2ccc2:	6833      	ldr	r3, [r6, #0]
   2ccc4:	429c      	cmp	r4, r3
   2ccc6:	d302      	bcc.n	2ccce <led_pwm_pm_action+0x1a>
		}
	}

	return 0;
}
   2ccc8:	2000      	movs	r0, #0
   2ccca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		const struct pwm_dt_spec *led = &config->led[i];
   2ccce:	f8d6 8004 	ldr.w	r8, [r6, #4]
   2ccd2:	0127      	lsls	r7, r4, #4
		err = pm_device_action_run(led->dev, action);
   2ccd4:	4629      	mov	r1, r5
   2ccd6:	f858 0007 	ldr.w	r0, [r8, r7]
   2ccda:	f7f8 f981 	bl	24fe0 <pm_device_action_run>
		if (err && (err != -EALREADY)) {
   2ccde:	b138      	cbz	r0, 2ccf0 <led_pwm_pm_action+0x3c>
   2cce0:	3078      	adds	r0, #120	; 0x78
   2cce2:	d005      	beq.n	2ccf0 <led_pwm_pm_action+0x3c>
			LOG_ERR("Cannot switch PWM %p power state", led->dev);
   2cce4:	f858 2007 	ldr.w	r2, [r8, r7]
   2cce8:	2145      	movs	r1, #69	; 0x45
   2ccea:	4648      	mov	r0, r9
   2ccec:	f00b f97a 	bl	37fe4 <z_log_minimal_printk>
	for (size_t i = 0; i < config->num_leds; i++) {
   2ccf0:	3401      	adds	r4, #1
   2ccf2:	e7e6      	b.n	2ccc2 <led_pwm_pm_action+0xe>
   2ccf4:	0003e334 	.word	0x0003e334

0002ccf8 <led_pwm_init>:
{
   2ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct led_pwm_config *config = dev->config;
   2ccfa:	6845      	ldr	r5, [r0, #4]
	if (!config->num_leds) {
   2ccfc:	682b      	ldr	r3, [r5, #0]
   2ccfe:	b9c3      	cbnz	r3, 2cd32 <led_pwm_init+0x3a>
		LOG_ERR("%s: no LEDs found (DT child nodes missing)",
   2cd00:	6802      	ldr	r2, [r0, #0]
   2cd02:	480d      	ldr	r0, [pc, #52]	; (2cd38 <led_pwm_init+0x40>)
   2cd04:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("%s: pwm device not ready", led->dev->name);
   2cd06:	f00b f96d 	bl	37fe4 <z_log_minimal_printk>
		return -ENODEV;
   2cd0a:	f06f 0012 	mvn.w	r0, #18
}
   2cd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const struct pwm_dt_spec *led = &config->led[i];
   2cd10:	686f      	ldr	r7, [r5, #4]
   2cd12:	0126      	lsls	r6, r4, #4
		if (!device_is_ready(led->dev)) {
   2cd14:	59b8      	ldr	r0, [r7, r6]
   2cd16:	f00e fb81 	bl	3b41c <z_device_is_ready>
   2cd1a:	b920      	cbnz	r0, 2cd26 <led_pwm_init+0x2e>
			LOG_ERR("%s: pwm device not ready", led->dev->name);
   2cd1c:	59bb      	ldr	r3, [r7, r6]
   2cd1e:	4807      	ldr	r0, [pc, #28]	; (2cd3c <led_pwm_init+0x44>)
   2cd20:	681a      	ldr	r2, [r3, #0]
   2cd22:	2145      	movs	r1, #69	; 0x45
   2cd24:	e7ef      	b.n	2cd06 <led_pwm_init+0xe>
	for (i = 0; i < config->num_leds; i++) {
   2cd26:	3401      	adds	r4, #1
   2cd28:	682b      	ldr	r3, [r5, #0]
   2cd2a:	429c      	cmp	r4, r3
   2cd2c:	dbf0      	blt.n	2cd10 <led_pwm_init+0x18>
	return 0;
   2cd2e:	2000      	movs	r0, #0
   2cd30:	e7ed      	b.n	2cd0e <led_pwm_init+0x16>
	for (i = 0; i < config->num_leds; i++) {
   2cd32:	2400      	movs	r4, #0
   2cd34:	e7f8      	b.n	2cd28 <led_pwm_init+0x30>
   2cd36:	bf00      	nop
   2cd38:	0003e35a 	.word	0x0003e35a
   2cd3c:	0003e38a 	.word	0x0003e38a

0002cd40 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   2cd40:	4802      	ldr	r0, [pc, #8]	; (2cd4c <pwm_nrfx_get_cycles_per_sec+0xc>)
   2cd42:	2100      	movs	r1, #0
   2cd44:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   2cd48:	2000      	movs	r0, #0
   2cd4a:	4770      	bx	lr
   2cd4c:	00f42400 	.word	0x00f42400

0002cd50 <nrf_gpio_pin_port_decode>:
{
   2cd50:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2cd52:	6803      	ldr	r3, [r0, #0]
    switch (port)
   2cd54:	095a      	lsrs	r2, r3, #5
   2cd56:	d00c      	beq.n	2cd72 <nrf_gpio_pin_port_decode+0x22>
   2cd58:	2a01      	cmp	r2, #1
   2cd5a:	d013      	beq.n	2cd84 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2cd5c:	490e      	ldr	r1, [pc, #56]	; (2cd98 <nrf_gpio_pin_port_decode+0x48>)
   2cd5e:	480f      	ldr	r0, [pc, #60]	; (2cd9c <nrf_gpio_pin_port_decode+0x4c>)
   2cd60:	f240 2247 	movw	r2, #583	; 0x247
   2cd64:	f00b f930 	bl	37fc8 <assert_print>
   2cd68:	480b      	ldr	r0, [pc, #44]	; (2cd98 <nrf_gpio_pin_port_decode+0x48>)
   2cd6a:	f240 2147 	movw	r1, #583	; 0x247
   2cd6e:	f00b f924 	bl	37fba <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   2cd72:	f04f 32ff 	mov.w	r2, #4294967295
   2cd76:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2cd7a:	07d9      	lsls	r1, r3, #31
   2cd7c:	d5ee      	bpl.n	2cd5c <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   2cd7e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   2cd82:	e008      	b.n	2cd96 <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   2cd84:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2cd88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2cd8c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2cd8e:	07d2      	lsls	r2, r2, #31
   2cd90:	d5e4      	bpl.n	2cd5c <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   2cd92:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   2cd94:	4802      	ldr	r0, [pc, #8]	; (2cda0 <nrf_gpio_pin_port_decode+0x50>)
}
   2cd96:	bd08      	pop	{r3, pc}
   2cd98:	0003c7c5 	.word	0x0003c7c5
   2cd9c:	0003c7f8 	.word	0x0003c7f8
   2cda0:	50000300 	.word	0x50000300

0002cda4 <pwm_nrfx_set_cycles>:
{
   2cda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2cda6:	f8bd c020 	ldrh.w	ip, [sp, #32]
	const struct pwm_nrfx_config *config = dev->config;
   2cdaa:	6845      	ldr	r5, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   2cdac:	6904      	ldr	r4, [r0, #16]
	if (channel >= NRF_PWM_CHANNEL_COUNT) {
   2cdae:	2903      	cmp	r1, #3
   2cdb0:	f00c 0c01 	and.w	ip, ip, #1
   2cdb4:	d905      	bls.n	2cdc2 <pwm_nrfx_set_cycles+0x1e>
		LOG_ERR("Invalid channel: %u.", channel);
   2cdb6:	484e      	ldr	r0, [pc, #312]	; (2cef0 <pwm_nrfx_set_cycles+0x14c>)
   2cdb8:	460a      	mov	r2, r1
   2cdba:	2145      	movs	r1, #69	; 0x45
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   2cdbc:	f00b f912 	bl	37fe4 <z_log_minimal_printk>
	return false;
   2cdc0:	e015      	b.n	2cdee <pwm_nrfx_set_cycles+0x4a>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   2cdc2:	7ba8      	ldrb	r0, [r5, #14]
   2cdc4:	2801      	cmp	r0, #1
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   2cdc6:	f04f 0601 	mov.w	r6, #1
		pulse_cycles /= 2;
   2cdca:	bf04      	itt	eq
   2cdcc:	085b      	lsreq	r3, r3, #1
		period_cycles /= 2;
   2cdce:	0852      	lsreq	r2, r2, #1
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   2cdd0:	408e      	lsls	r6, r1
	if (pulse_cycles == 0) {
   2cdd2:	2b00      	cmp	r3, #0
   2cdd4:	d065      	beq.n	2cea2 <pwm_nrfx_set_cycles+0xfe>
	} else if (pulse_cycles >= period_cycles) {
   2cdd6:	429a      	cmp	r2, r3
   2cdd8:	d933      	bls.n	2ce42 <pwm_nrfx_set_cycles+0x9e>
	if (period_cycles == data->period_cycles) {
   2cdda:	6827      	ldr	r7, [r4, #0]
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   2cddc:	7b20      	ldrb	r0, [r4, #12]
	if (period_cycles == data->period_cycles) {
   2cdde:	42ba      	cmp	r2, r7
   2cde0:	d018      	beq.n	2ce14 <pwm_nrfx_set_cycles+0x70>
	if ((data->pwm_needed & ~BIT(channel)) != 0) {
   2cde2:	43b0      	bics	r0, r6
   2cde4:	d007      	beq.n	2cdf6 <pwm_nrfx_set_cycles+0x52>
		LOG_ERR("Incompatible period.");
   2cde6:	4843      	ldr	r0, [pc, #268]	; (2cef4 <pwm_nrfx_set_cycles+0x150>)
   2cde8:	2145      	movs	r1, #69	; 0x45
   2cdea:	f00b f8fb 	bl	37fe4 <z_log_minimal_printk>
		return -EINVAL;
   2cdee:	f06f 0015 	mvn.w	r0, #21
}
   2cdf2:	b003      	add	sp, #12
   2cdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cdf6:	4617      	mov	r7, r2
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   2cdf8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2cdfc:	d219      	bcs.n	2ce32 <pwm_nrfx_set_cycles+0x8e>
			data->period_cycles = period_cycles;
   2cdfe:	6022      	str	r2, [r4, #0]
			data->prescaler     = prescaler;
   2ce00:	7360      	strb	r0, [r4, #13]
			nrf_pwm_configure(config->pwm.p_registers,
   2ce02:	682a      	ldr	r2, [r5, #0]
					  config->initial_config.count_mode,
   2ce04:	f895 e00e 	ldrb.w	lr, [r5, #14]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   2ce08:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->MODE       = mode;
   2ce0c:	f8c2 e504 	str.w	lr, [r2, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   2ce10:	f8c2 7508 	str.w	r7, [r2, #1288]	; 0x508
		compare_value = (uint16_t)(pulse_cycles >> data->prescaler);
   2ce14:	7b62      	ldrb	r2, [r4, #13]
   2ce16:	40d3      	lsrs	r3, r2
   2ce18:	b29b      	uxth	r3, r3
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   2ce1a:	f1bc 0f00 	cmp.w	ip, #0
   2ce1e:	d101      	bne.n	2ce24 <pwm_nrfx_set_cycles+0x80>
   2ce20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	if (!needs_pwm) {
   2ce24:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   2ce28:	808b      	strh	r3, [r1, #4]
		data->pwm_needed |= BIT(channel);
   2ce2a:	7b23      	ldrb	r3, [r4, #12]
   2ce2c:	4333      	orrs	r3, r6
   2ce2e:	7323      	strb	r3, [r4, #12]
	if (data->pwm_needed == 0) {
   2ce30:	e02d      	b.n	2ce8e <pwm_nrfx_set_cycles+0xea>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   2ce32:	3001      	adds	r0, #1
   2ce34:	2808      	cmp	r0, #8
		countertop >>= 1;
   2ce36:	ea4f 0757 	mov.w	r7, r7, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   2ce3a:	d1dd      	bne.n	2cdf8 <pwm_nrfx_set_cycles+0x54>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   2ce3c:	482e      	ldr	r0, [pc, #184]	; (2cef8 <pwm_nrfx_set_cycles+0x154>)
   2ce3e:	2145      	movs	r1, #69	; 0x45
   2ce40:	e7bc      	b.n	2cdbc <pwm_nrfx_set_cycles+0x18>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   2ce42:	004b      	lsls	r3, r1, #1
   2ce44:	4423      	add	r3, r4
   2ce46:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   2ce4a:	f1bc 0f00 	cmp.w	ip, #0
   2ce4e:	d011      	beq.n	2ce74 <pwm_nrfx_set_cycles+0xd0>
   2ce50:	f647 72ff 	movw	r2, #32767	; 0x7fff
   2ce54:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   2ce56:	682b      	ldr	r3, [r5, #0]
    return p_reg->PSEL.OUT[channel];
   2ce58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2ce5c:	2b00      	cmp	r3, #0
   2ce5e:	db11      	blt.n	2ce84 <pwm_nrfx_set_cycles+0xe0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ce60:	a801      	add	r0, sp, #4
   2ce62:	9301      	str	r3, [sp, #4]
   2ce64:	f7ff ff74 	bl	2cd50 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2ce68:	9a01      	ldr	r2, [sp, #4]
   2ce6a:	2301      	movs	r3, #1
   2ce6c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2ce6e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   2ce72:	e007      	b.n	2ce84 <pwm_nrfx_set_cycles+0xe0>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   2ce74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ce78:	809a      	strh	r2, [r3, #4]
		if (channel_psel_get(channel, &psel, config)) {
   2ce7a:	682b      	ldr	r3, [r5, #0]
   2ce7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2ce80:	2b00      	cmp	r3, #0
   2ce82:	da1b      	bge.n	2cebc <pwm_nrfx_set_cycles+0x118>
		data->pwm_needed &= ~BIT(channel);
   2ce84:	7b21      	ldrb	r1, [r4, #12]
   2ce86:	ea21 0106 	bic.w	r1, r1, r6
   2ce8a:	7321      	strb	r1, [r4, #12]
	if (data->pwm_needed == 0) {
   2ce8c:	b301      	cbz	r1, 2ced0 <pwm_nrfx_set_cycles+0x12c>
		if (data->stop_requested) {
   2ce8e:	7be3      	ldrb	r3, [r4, #15]
   2ce90:	bb2b      	cbnz	r3, 2cede <pwm_nrfx_set_cycles+0x13a>
		nrfx_pwm_simple_playback(&config->pwm, &config->seq, 1, 0);
   2ce92:	2300      	movs	r3, #0
   2ce94:	2201      	movs	r2, #1
   2ce96:	f105 0118 	add.w	r1, r5, #24
   2ce9a:	4628      	mov	r0, r5
   2ce9c:	f003 fdde 	bl	30a5c <nrfx_pwm_simple_playback>
   2cea0:	e01b      	b.n	2ceda <pwm_nrfx_set_cycles+0x136>
	data->seq_values[channel] = PWM_NRFX_CH_VALUE(compare_value, inverted);
   2cea2:	004a      	lsls	r2, r1, #1
   2cea4:	4422      	add	r2, r4
   2cea6:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   2ceaa:	f1bc 0f00 	cmp.w	ip, #0
   2ceae:	d001      	beq.n	2ceb4 <pwm_nrfx_set_cycles+0x110>
   2ceb0:	8093      	strh	r3, [r2, #4]
   2ceb2:	e7e2      	b.n	2ce7a <pwm_nrfx_set_cycles+0xd6>
   2ceb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2ceb8:	8093      	strh	r3, [r2, #4]
   2ceba:	e7cc      	b.n	2ce56 <pwm_nrfx_set_cycles+0xb2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cebc:	a801      	add	r0, sp, #4
   2cebe:	9301      	str	r3, [sp, #4]
   2cec0:	f7ff ff46 	bl	2cd50 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2cec4:	9a01      	ldr	r2, [sp, #4]
   2cec6:	2301      	movs	r3, #1
   2cec8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2ceca:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   2cece:	e7d9      	b.n	2ce84 <pwm_nrfx_set_cycles+0xe0>
		nrfx_pwm_stop(&config->pwm, false);
   2ced0:	4628      	mov	r0, r5
   2ced2:	f003 fe55 	bl	30b80 <nrfx_pwm_stop>
		data->stop_requested = true;
   2ced6:	2301      	movs	r3, #1
   2ced8:	73e3      	strb	r3, [r4, #15]
	return 0;
   2ceda:	2000      	movs	r0, #0
   2cedc:	e789      	b.n	2cdf2 <pwm_nrfx_set_cycles+0x4e>
			data->stop_requested = false;
   2cede:	2300      	movs	r3, #0
   2cee0:	73e3      	strb	r3, [r4, #15]
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   2cee2:	4628      	mov	r0, r5
   2cee4:	f003 fe26 	bl	30b34 <nrfx_pwm_is_stopped>
   2cee8:	2800      	cmp	r0, #0
   2ceea:	d0fa      	beq.n	2cee2 <pwm_nrfx_set_cycles+0x13e>
   2ceec:	e7d1      	b.n	2ce92 <pwm_nrfx_set_cycles+0xee>
   2ceee:	bf00      	nop
   2cef0:	0003e3b8 	.word	0x0003e3b8
   2cef4:	0003e3d2 	.word	0x0003e3d2
   2cef8:	0003e3ec 	.word	0x0003e3ec

0002cefc <pwm_nrfx_init>:
	.set_cycles = pwm_nrfx_set_cycles,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   2cefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct pwm_nrfx_config *config = dev->config;
   2cefe:	6846      	ldr	r6, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   2cf00:	6904      	ldr	r4, [r0, #16]
{
   2cf02:	4605      	mov	r5, r0

#ifdef CONFIG_PINCTRL
	int ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   2cf04:	2100      	movs	r1, #0
   2cf06:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2cf08:	f00d fac0 	bl	3a48c <pinctrl_apply_state>

	if (ret < 0) {
   2cf0c:	2800      	cmp	r0, #0
   2cf0e:	db3c      	blt.n	2cf8a <pwm_nrfx_init+0x8e>
		return ret;
	}

	data->initially_inverted = 0;
   2cf10:	2700      	movs	r7, #0
   2cf12:	73a7      	strb	r7, [r4, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		uint32_t psel;

		if (channel_psel_get(i, &psel, config)) {
   2cf14:	6833      	ldr	r3, [r6, #0]
   2cf16:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   2cf1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2cf1e:	2b00      	cmp	r3, #0
   2cf20:	db0f      	blt.n	2cf42 <pwm_nrfx_init+0x46>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cf22:	a801      	add	r0, sp, #4
   2cf24:	9301      	str	r3, [sp, #4]
   2cf26:	f7ff ff13 	bl	2cd50 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   2cf2a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->OUT;
   2cf2c:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
   2cf30:	40d3      	lsrs	r3, r2
			/* Mark channels as inverted according to what initial
			 * state of their outputs has been set by pinctrl (high
			 * idle state means that the channel is inverted).
			 */
			data->initially_inverted |=
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   2cf32:	f013 0301 	ands.w	r3, r3, #1
			data->initially_inverted |=
   2cf36:	7ba2      	ldrb	r2, [r4, #14]
				nrf_gpio_pin_out_read(psel) ? BIT(i) : 0;
   2cf38:	bf1c      	itt	ne
   2cf3a:	2301      	movne	r3, #1
   2cf3c:	40bb      	lslne	r3, r7
			data->initially_inverted |=
   2cf3e:	4313      	orrs	r3, r2
   2cf40:	73a3      	strb	r3, [r4, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   2cf42:	3701      	adds	r7, #1
   2cf44:	2f04      	cmp	r7, #4
   2cf46:	d1e5      	bne.n	2cf14 <pwm_nrfx_init+0x18>
		}
	}
#endif

	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
		bool inverted = data->initially_inverted & BIT(i);
   2cf48:	7ba1      	ldrb	r1, [r4, #14]
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   2cf4a:	2300      	movs	r3, #0
   2cf4c:	3402      	adds	r4, #2
		bool inverted = data->initially_inverted & BIT(i);
   2cf4e:	2001      	movs	r0, #1
   2cf50:	fa00 f203 	lsl.w	r2, r0, r3

		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   2cf54:	420a      	tst	r2, r1
   2cf56:	bf0c      	ite	eq
   2cf58:	2201      	moveq	r2, #1
   2cf5a:	2200      	movne	r2, #0
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   2cf5c:	3301      	adds	r3, #1
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   2cf5e:	03d2      	lsls	r2, r2, #15
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   2cf60:	2b04      	cmp	r3, #4
		data->seq_values[i] = PWM_NRFX_CH_VALUE(0, inverted);
   2cf62:	f824 2f02 	strh.w	r2, [r4, #2]!
	for (size_t i = 0; i < ARRAY_SIZE(data->seq_values); i++) {
   2cf66:	d1f3      	bne.n	2cf50 <pwm_nrfx_init+0x54>
	}

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   2cf68:	2300      	movs	r3, #0
   2cf6a:	461a      	mov	r2, r3
   2cf6c:	f106 0108 	add.w	r1, r6, #8
   2cf70:	4630      	mov	r0, r6
   2cf72:	f003 fc6d 	bl	30850 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   2cf76:	4b07      	ldr	r3, [pc, #28]	; (2cf94 <pwm_nrfx_init+0x98>)
   2cf78:	4298      	cmp	r0, r3
   2cf7a:	d008      	beq.n	2cf8e <pwm_nrfx_init+0x92>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2cf7c:	4806      	ldr	r0, [pc, #24]	; (2cf98 <pwm_nrfx_init+0x9c>)
   2cf7e:	682a      	ldr	r2, [r5, #0]
   2cf80:	2145      	movs	r1, #69	; 0x45
   2cf82:	f00b f82f 	bl	37fe4 <z_log_minimal_printk>
		return -EBUSY;
   2cf86:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
   2cf8a:	b003      	add	sp, #12
   2cf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   2cf8e:	2000      	movs	r0, #0
   2cf90:	e7fb      	b.n	2cf8a <pwm_nrfx_init+0x8e>
   2cf92:	bf00      	nop
   2cf94:	0bad0000 	.word	0x0bad0000
   2cf98:	0003e41b 	.word	0x0003e41b

0002cf9c <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   2cf9c:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   2cfa0:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   2cfa4:	280a      	cmp	r0, #10
   2cfa6:	bf9a      	itte	ls
   2cfa8:	4b02      	ldrls	r3, [pc, #8]	; (2cfb4 <qspi_get_zephyr_ret_code+0x18>)
   2cfaa:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   2cfae:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   2cfb2:	4770      	bx	lr
   2cfb4:	0003c784 	.word	0x0003c784

0002cfb8 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   2cfb8:	4b02      	ldr	r3, [pc, #8]	; (2cfc4 <qspi_nor_pages_layout+0xc>)
   2cfba:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2cfbc:	2301      	movs	r3, #1
   2cfbe:	6013      	str	r3, [r2, #0]
}
   2cfc0:	4770      	bx	lr
   2cfc2:	bf00      	nop
   2cfc4:	0003c418 	.word	0x0003c418

0002cfc8 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   2cfc8:	4800      	ldr	r0, [pc, #0]	; (2cfcc <qspi_flash_get_parameters+0x4>)
   2cfca:	4770      	bx	lr
   2cfcc:	0003c38c 	.word	0x0003c38c

0002cfd0 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   2cfd0:	4b05      	ldr	r3, [pc, #20]	; (2cfe8 <qspi_wait_for_completion.isra.0+0x18>)
   2cfd2:	4299      	cmp	r1, r3
   2cfd4:	d106      	bne.n	2cfe4 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
   2cfd6:	f04f 32ff 	mov.w	r2, #4294967295
   2cfda:	f04f 33ff 	mov.w	r3, #4294967295
   2cfde:	3030      	adds	r0, #48	; 0x30
   2cfe0:	f005 ba06 	b.w	323f0 <z_impl_k_sem_take>
}
   2cfe4:	4770      	bx	lr
   2cfe6:	bf00      	nop
   2cfe8:	0bad0000 	.word	0x0bad0000

0002cfec <qspi_device_init>:
{
   2cfec:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   2cfee:	6905      	ldr	r5, [r0, #16]
	if (!qspi_initialized) {
   2cff0:	4e0f      	ldr	r6, [pc, #60]	; (2d030 <qspi_device_init+0x44>)
{
   2cff2:	4604      	mov	r4, r0
	qspi_lock(dev);
   2cff4:	4628      	mov	r0, r5
   2cff6:	f00d fa92 	bl	3a51e <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   2cffa:	f105 0048 	add.w	r0, r5, #72	; 0x48
   2cffe:	f00d fa77 	bl	3a4f0 <k_sem_give>
	if (!qspi_initialized) {
   2d002:	7833      	ldrb	r3, [r6, #0]
   2d004:	b98b      	cbnz	r3, 2d02a <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2d006:	462a      	mov	r2, r5
   2d008:	490a      	ldr	r1, [pc, #40]	; (2d034 <qspi_device_init+0x48>)
   2d00a:	6860      	ldr	r0, [r4, #4]
   2d00c:	f003 ff20 	bl	30e50 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   2d010:	f7ff ffc4 	bl	2cf9c <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   2d014:	fab0 f380 	clz	r3, r0
   2d018:	095b      	lsrs	r3, r3, #5
   2d01a:	4605      	mov	r5, r0
   2d01c:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   2d01e:	6920      	ldr	r0, [r4, #16]
   2d020:	3018      	adds	r0, #24
   2d022:	f00d fa65 	bl	3a4f0 <k_sem_give>
}
   2d026:	4628      	mov	r0, r5
   2d028:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   2d02a:	2500      	movs	r5, #0
   2d02c:	e7f7      	b.n	2d01e <qspi_device_init+0x32>
   2d02e:	bf00      	nop
   2d030:	20004d97 	.word	0x20004d97
   2d034:	0003a4f5 	.word	0x0003a4f5

0002d038 <qspi_send_cmd>:
{
   2d038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (cmd->tx_buf) {
   2d03a:	684c      	ldr	r4, [r1, #4]
{
   2d03c:	4605      	mov	r5, r0
   2d03e:	4617      	mov	r7, r2
	if (cmd->tx_buf) {
   2d040:	b1ac      	cbz	r4, 2d06e <qspi_send_cmd+0x36>
		tx_buf = cmd->tx_buf->buf;
   2d042:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   2d046:	6888      	ldr	r0, [r1, #8]
   2d048:	b198      	cbz	r0, 2d072 <qspi_send_cmd+0x3a>
		rx_len = cmd->rx_buf->len;
   2d04a:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   2d04e:	b188      	cbz	r0, 2d074 <qspi_send_cmd+0x3c>
   2d050:	b183      	cbz	r3, 2d074 <qspi_send_cmd+0x3c>
		if (rx_len != tx_len) {
   2d052:	4298      	cmp	r0, r3
   2d054:	d107      	bne.n	2d066 <qspi_send_cmd+0x2e>
		xfer_len += tx_len;
   2d056:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   2d058:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   2d05a:	780a      	ldrb	r2, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   2d05c:	d90d      	bls.n	2d07a <qspi_send_cmd+0x42>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   2d05e:	4817      	ldr	r0, [pc, #92]	; (2d0bc <qspi_send_cmd+0x84>)
   2d060:	2157      	movs	r1, #87	; 0x57
   2d062:	f00a ffbf 	bl	37fe4 <z_log_minimal_printk>
}
   2d066:	f06f 0015 	mvn.w	r0, #21
   2d06a:	b003      	add	sp, #12
   2d06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   2d06e:	4623      	mov	r3, r4
   2d070:	e7e9      	b.n	2d046 <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   2d072:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   2d074:	3301      	adds	r3, #1
   2d076:	4403      	add	r3, r0
   2d078:	e7ee      	b.n	2d058 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   2d07a:	f88d 3001 	strb.w	r3, [sp, #1]
   2d07e:	f240 1301 	movw	r3, #257	; 0x101
	qspi_lock(dev);
   2d082:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   2d084:	f8ad 3002 	strh.w	r3, [sp, #2]
   2d088:	2300      	movs	r3, #0
   2d08a:	f88d 3004 	strb.w	r3, [sp, #4]
   2d08e:	f88d 2000 	strb.w	r2, [sp]
   2d092:	f88d 7005 	strb.w	r7, [sp, #5]
	qspi_lock(dev);
   2d096:	f00d fa42 	bl	3a51e <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   2d09a:	4621      	mov	r1, r4
   2d09c:	4632      	mov	r2, r6
   2d09e:	4668      	mov	r0, sp
   2d0a0:	f003 ffca 	bl	31038 <nrfx_qspi_cinstr_xfer>
   2d0a4:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   2d0a6:	6928      	ldr	r0, [r5, #16]
   2d0a8:	3018      	adds	r0, #24
   2d0aa:	f00d fa21 	bl	3a4f0 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   2d0ae:	4620      	mov	r0, r4
}
   2d0b0:	b003      	add	sp, #12
   2d0b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return qspi_get_zephyr_ret_code(res);
   2d0b6:	f7ff bf71 	b.w	2cf9c <qspi_get_zephyr_ret_code>
   2d0ba:	bf00      	nop
   2d0bc:	0003e456 	.word	0x0003e456

0002d0c0 <qspi_device_uninit>:
{
   2d0c0:	b538      	push	{r3, r4, r5, lr}
   2d0c2:	4604      	mov	r4, r0
	qspi_lock(dev);
   2d0c4:	6900      	ldr	r0, [r0, #16]
   2d0c6:	f00d fa2a 	bl	3a51e <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   2d0ca:	6925      	ldr	r5, [r4, #16]
   2d0cc:	2200      	movs	r2, #0
   2d0ce:	2300      	movs	r3, #0
   2d0d0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   2d0d4:	f005 f98c 	bl	323f0 <z_impl_k_sem_take>
	if (last) {
   2d0d8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2d0da:	b94b      	cbnz	r3, 2d0f0 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   2d0dc:	4d0a      	ldr	r5, [pc, #40]	; (2d108 <qspi_device_uninit+0x48>)
   2d0de:	f004 f807 	bl	310f0 <nrfx_qspi_mem_busy_check>
   2d0e2:	42a8      	cmp	r0, r5
   2d0e4:	d10a      	bne.n	2d0fc <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   2d0e6:	f004 f825 	bl	31134 <nrfx_qspi_uninit>
		qspi_initialized = false;
   2d0ea:	4b08      	ldr	r3, [pc, #32]	; (2d10c <qspi_device_uninit+0x4c>)
   2d0ec:	2200      	movs	r2, #0
   2d0ee:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   2d0f0:	6920      	ldr	r0, [r4, #16]
}
   2d0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   2d0f6:	3018      	adds	r0, #24
   2d0f8:	f00d b9fa 	b.w	3a4f0 <k_sem_give>
	return z_impl_k_sleep(timeout);
   2d0fc:	2100      	movs	r1, #0
   2d0fe:	f240 6067 	movw	r0, #1639	; 0x667
   2d102:	f006 fd6d 	bl	33be0 <z_impl_k_sleep>
   2d106:	e7ea      	b.n	2d0de <qspi_device_uninit+0x1e>
   2d108:	0bad0000 	.word	0x0bad0000
   2d10c:	20004d97 	.word	0x20004d97

0002d110 <qspi_nor_pm_action>:
	return 0;
}

static int qspi_nor_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   2d110:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d112:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   2d114:	6907      	ldr	r7, [r0, #16]
	const struct qspi_nor_config *dev_config = dev->config;
   2d116:	6846      	ldr	r6, [r0, #4]
{
   2d118:	b085      	sub	sp, #20
	int ret;
	nrfx_err_t err;

	switch (action) {
   2d11a:	460c      	mov	r4, r1
   2d11c:	b129      	cbz	r1, 2d12a <qspi_nor_pm_action+0x1a>
   2d11e:	2901      	cmp	r1, #1
   2d120:	d025      	beq.n	2d16e <qspi_nor_pm_action+0x5e>
   2d122:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
   2d126:	b005      	add	sp, #20
   2d128:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = qspi_device_init(dev);
   2d12a:	f7ff ff5f 	bl	2cfec <qspi_device_init>
		if (ret < 0) {
   2d12e:	2800      	cmp	r0, #0
   2d130:	dbf9      	blt.n	2d126 <qspi_nor_pm_action+0x16>
		if (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   2d132:	f003 ffdd 	bl	310f0 <nrfx_qspi_mem_busy_check>
   2d136:	4b1d      	ldr	r3, [pc, #116]	; (2d1ac <qspi_nor_pm_action+0x9c>)
   2d138:	4298      	cmp	r0, r3
   2d13a:	d130      	bne.n	2d19e <qspi_nor_pm_action+0x8e>
		struct qspi_cmd cmd = {
   2d13c:	23b9      	movs	r3, #185	; 0xb9
		ret = qspi_send_cmd(dev, &cmd, false);
   2d13e:	4622      	mov	r2, r4
   2d140:	a901      	add	r1, sp, #4
   2d142:	4628      	mov	r0, r5
		struct qspi_cmd cmd = {
   2d144:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2d148:	9403      	str	r4, [sp, #12]
   2d14a:	f88d 3004 	strb.w	r3, [sp, #4]
		ret = qspi_send_cmd(dev, &cmd, false);
   2d14e:	f7ff ff73 	bl	2d038 <qspi_send_cmd>
		if (ret < 0) {
   2d152:	2800      	cmp	r0, #0
   2d154:	dbe7      	blt.n	2d126 <qspi_nor_pm_action+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   2d156:	200a      	movs	r0, #10
   2d158:	f00e fa98 	bl	3b68c <z_impl_k_busy_wait>
		nrfx_qspi_uninit();
   2d15c:	f003 ffea 	bl	31134 <nrfx_qspi_uninit>
		ret = pinctrl_apply_state(dev_config->pcfg,
   2d160:	6a30      	ldr	r0, [r6, #32]
   2d162:	2101      	movs	r1, #1
   2d164:	f00d f9cc 	bl	3a500 <pinctrl_apply_state>
		if (ret < 0) {
   2d168:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2d16c:	e7db      	b.n	2d126 <qspi_nor_pm_action+0x16>
		ret = pinctrl_apply_state(dev_config->pcfg,
   2d16e:	6a30      	ldr	r0, [r6, #32]
   2d170:	2100      	movs	r1, #0
   2d172:	f00d f9c5 	bl	3a500 <pinctrl_apply_state>
		if (ret < 0) {
   2d176:	2800      	cmp	r0, #0
   2d178:	dbd5      	blt.n	2d126 <qspi_nor_pm_action+0x16>
		err = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2d17a:	490d      	ldr	r1, [pc, #52]	; (2d1b0 <qspi_nor_pm_action+0xa0>)
   2d17c:	463a      	mov	r2, r7
   2d17e:	4630      	mov	r0, r6
   2d180:	f003 fe66 	bl	30e50 <nrfx_qspi_init>
		if (err != NRFX_SUCCESS) {
   2d184:	4b09      	ldr	r3, [pc, #36]	; (2d1ac <qspi_nor_pm_action+0x9c>)
   2d186:	4298      	cmp	r0, r3
   2d188:	d10c      	bne.n	2d1a4 <qspi_nor_pm_action+0x94>
		ret = exit_dpd(dev);
   2d18a:	4628      	mov	r0, r5
   2d18c:	f00d f9e9 	bl	3a562 <exit_dpd>
		if (ret < 0) {
   2d190:	2800      	cmp	r0, #0
   2d192:	dbc8      	blt.n	2d126 <qspi_nor_pm_action+0x16>
		qspi_device_uninit(dev);
   2d194:	4628      	mov	r0, r5
   2d196:	f7ff ff93 	bl	2d0c0 <qspi_device_uninit>
	return 0;
   2d19a:	2000      	movs	r0, #0
		break;
   2d19c:	e7c3      	b.n	2d126 <qspi_nor_pm_action+0x16>
			return -EBUSY;
   2d19e:	f06f 000f 	mvn.w	r0, #15
   2d1a2:	e7c0      	b.n	2d126 <qspi_nor_pm_action+0x16>
			return -EIO;
   2d1a4:	f06f 0004 	mvn.w	r0, #4
   2d1a8:	e7bd      	b.n	2d126 <qspi_nor_pm_action+0x16>
   2d1aa:	bf00      	nop
   2d1ac:	0bad0000 	.word	0x0bad0000
   2d1b0:	0003a4f5 	.word	0x0003a4f5

0002d1b4 <qspi_nor_read>:
{
   2d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d1b8:	4681      	mov	r9, r0
   2d1ba:	b085      	sub	sp, #20
   2d1bc:	460e      	mov	r6, r1
   2d1be:	461c      	mov	r4, r3
	if (!dest) {
   2d1c0:	4690      	mov	r8, r2
   2d1c2:	b17a      	cbz	r2, 2d1e4 <qspi_nor_read+0x30>
	if (!size) {
   2d1c4:	2b00      	cmp	r3, #0
   2d1c6:	f000 809c 	beq.w	2d302 <qspi_nor_read+0x14e>
	if (addr < 0 ||
   2d1ca:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   2d1cc:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   2d1ce:	db03      	blt.n	2d1d8 <qspi_nor_read+0x24>
   2d1d0:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   2d1d2:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   2d1d4:	4293      	cmp	r3, r2
   2d1d6:	d90b      	bls.n	2d1f0 <qspi_nor_read+0x3c>
		LOG_ERR("read error: address or size "
   2d1d8:	484b      	ldr	r0, [pc, #300]	; (2d308 <qspi_nor_read+0x154>)
   2d1da:	4623      	mov	r3, r4
   2d1dc:	4632      	mov	r2, r6
   2d1de:	2145      	movs	r1, #69	; 0x45
   2d1e0:	f00a ff00 	bl	37fe4 <z_log_minimal_printk>
		return -EINVAL;
   2d1e4:	f06f 0515 	mvn.w	r5, #21
}
   2d1e8:	4628      	mov	r0, r5
   2d1ea:	b005      	add	sp, #20
   2d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   2d1f0:	f7ff fefc 	bl	2cfec <qspi_device_init>
	if (rc != 0) {
   2d1f4:	4605      	mov	r5, r0
   2d1f6:	2800      	cmp	r0, #0
   2d1f8:	d17f      	bne.n	2d2fa <qspi_nor_read+0x146>
	qspi_lock(dev);
   2d1fa:	4275      	negs	r5, r6
   2d1fc:	f005 0503 	and.w	r5, r5, #3
   2d200:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2d204:	f00d f98b 	bl	3a51e <qspi_lock.isra.0>
	if (flash_prefix > size) {
   2d208:	42a5      	cmp	r5, r4
   2d20a:	bf28      	it	cs
   2d20c:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   2d20e:	f1d8 0300 	rsbs	r3, r8, #0
   2d212:	f003 0303 	and.w	r3, r3, #3
   2d216:	f008 0703 	and.w	r7, r8, #3
   2d21a:	bf58      	it	pl
   2d21c:	425f      	negpl	r7, r3
   2d21e:	427f      	negs	r7, r7
   2d220:	f007 0703 	and.w	r7, r7, #3
   2d224:	42a7      	cmp	r7, r4
   2d226:	bf28      	it	cs
   2d228:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   2d22a:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   2d22c:	1be4      	subs	r4, r4, r7
   2d22e:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   2d232:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   2d236:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   2d238:	bfc8      	it	gt
   2d23a:	46a2      	movgt	sl, r4
   2d23c:	f003 0b03 	and.w	fp, r3, #3
   2d240:	bfc8      	it	gt
   2d242:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   2d246:	f1ba 0f00 	cmp.w	sl, #0
   2d24a:	d019      	beq.n	2d280 <qspi_nor_read+0xcc>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   2d24c:	eb08 0307 	add.w	r3, r8, r7
   2d250:	1972      	adds	r2, r6, r5
   2d252:	4651      	mov	r1, sl
   2d254:	4618      	mov	r0, r3
   2d256:	9301      	str	r3, [sp, #4]
   2d258:	f00d fe2d 	bl	3aeb6 <nrfx_qspi_read>
   2d25c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   2d25e:	4601      	mov	r1, r0
   2d260:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2d264:	f7ff feb4 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   2d268:	4a28      	ldr	r2, [pc, #160]	; (2d30c <qspi_nor_read+0x158>)
   2d26a:	4294      	cmp	r4, r2
   2d26c:	d13c      	bne.n	2d2e8 <qspi_nor_read+0x134>
		if (flash_prefix != dest_prefix) {
   2d26e:	42bd      	cmp	r5, r7
   2d270:	d006      	beq.n	2d280 <qspi_nor_read+0xcc>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   2d272:	9b01      	ldr	r3, [sp, #4]
   2d274:	4652      	mov	r2, sl
   2d276:	4619      	mov	r1, r3
   2d278:	eb08 0005 	add.w	r0, r8, r5
   2d27c:	f00b fa86 	bl	3878c <memmove>
	if (flash_prefix != 0) {
   2d280:	b1bd      	cbz	r5, 2d2b2 <qspi_nor_read+0xfe>
				     (WORD_SIZE - flash_prefix));
   2d282:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   2d286:	1bf2      	subs	r2, r6, r7
   2d288:	2104      	movs	r1, #4
   2d28a:	a802      	add	r0, sp, #8
   2d28c:	f00d fe13 	bl	3aeb6 <nrfx_qspi_read>
   2d290:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   2d292:	4601      	mov	r1, r0
   2d294:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2d298:	f7ff fe9a 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   2d29c:	4b1b      	ldr	r3, [pc, #108]	; (2d30c <qspi_nor_read+0x158>)
   2d29e:	429c      	cmp	r4, r3
   2d2a0:	d122      	bne.n	2d2e8 <qspi_nor_read+0x134>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   2d2a2:	f107 0308 	add.w	r3, r7, #8
   2d2a6:	462a      	mov	r2, r5
   2d2a8:	eb0d 0103 	add.w	r1, sp, r3
   2d2ac:	4640      	mov	r0, r8
   2d2ae:	f00b fa84 	bl	387ba <memcpy>
	if (flash_suffix != 0) {
   2d2b2:	f1bb 0f00 	cmp.w	fp, #0
   2d2b6:	d016      	beq.n	2d2e6 <qspi_nor_read+0x132>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   2d2b8:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   2d2ba:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   2d2bc:	4452      	add	r2, sl
   2d2be:	eb0d 0001 	add.w	r0, sp, r1
   2d2c2:	f00d fdf8 	bl	3aeb6 <nrfx_qspi_read>
   2d2c6:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   2d2c8:	4601      	mov	r1, r0
   2d2ca:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2d2ce:	f7ff fe7f 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   2d2d2:	4b0e      	ldr	r3, [pc, #56]	; (2d30c <qspi_nor_read+0x158>)
   2d2d4:	429c      	cmp	r4, r3
   2d2d6:	d107      	bne.n	2d2e8 <qspi_nor_read+0x134>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   2d2d8:	eb0a 0005 	add.w	r0, sl, r5
   2d2dc:	465a      	mov	r2, fp
   2d2de:	a902      	add	r1, sp, #8
   2d2e0:	4440      	add	r0, r8
   2d2e2:	f00b fa6a 	bl	387ba <memcpy>
	return res;
   2d2e6:	4c09      	ldr	r4, [pc, #36]	; (2d30c <qspi_nor_read+0x158>)
	k_sem_give(&dev_data->sem);
   2d2e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2d2ec:	3018      	adds	r0, #24
   2d2ee:	f00d f8ff 	bl	3a4f0 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   2d2f2:	4620      	mov	r0, r4
   2d2f4:	f7ff fe52 	bl	2cf9c <qspi_get_zephyr_ret_code>
   2d2f8:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   2d2fa:	4648      	mov	r0, r9
   2d2fc:	f7ff fee0 	bl	2d0c0 <qspi_device_uninit>
	return rc;
   2d300:	e772      	b.n	2d1e8 <qspi_nor_read+0x34>
		return 0;
   2d302:	461d      	mov	r5, r3
   2d304:	e770      	b.n	2d1e8 <qspi_nor_read+0x34>
   2d306:	bf00      	nop
   2d308:	0003e47e 	.word	0x0003e47e
   2d30c:	0bad0000 	.word	0x0bad0000

0002d310 <qspi_nor_init>:
{
   2d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2d314:	6843      	ldr	r3, [r0, #4]
{
   2d316:	b08a      	sub	sp, #40	; 0x28
   2d318:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2d31a:	2100      	movs	r1, #0
   2d31c:	6a18      	ldr	r0, [r3, #32]
   2d31e:	f00d f8ef 	bl	3a500 <pinctrl_apply_state>
	if (ret < 0) {
   2d322:	1e04      	subs	r4, r0, #0
   2d324:	db2c      	blt.n	2d380 <qspi_nor_init+0x70>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   2d326:	2200      	movs	r2, #0
   2d328:	2101      	movs	r1, #1
   2d32a:	2029      	movs	r0, #41	; 0x29
   2d32c:	f7f8 f88c 	bl	25448 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   2d330:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2d332:	692a      	ldr	r2, [r5, #16]
   2d334:	494d      	ldr	r1, [pc, #308]	; (2d46c <qspi_nor_init+0x15c>)
   2d336:	4630      	mov	r0, r6
   2d338:	f003 fd8a 	bl	30e50 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   2d33c:	f7ff fe2e 	bl	2cf9c <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   2d340:	1e04      	subs	r4, r0, #0
   2d342:	db1d      	blt.n	2d380 <qspi_nor_init+0x70>
	ret = exit_dpd(dev);
   2d344:	4628      	mov	r0, r5
   2d346:	f00d f90c 	bl	3a562 <exit_dpd>
	if (ret < 0) {
   2d34a:	1e04      	subs	r4, r0, #0
   2d34c:	db18      	blt.n	2d380 <qspi_nor_init+0x70>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   2d34e:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   2d350:	3b02      	subs	r3, #2
   2d352:	2b01      	cmp	r3, #1
   2d354:	d918      	bls.n	2d388 <qspi_nor_init+0x78>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   2d356:	f896 800a 	ldrb.w	r8, [r6, #10]
   2d35a:	f1a8 0803 	sub.w	r8, r8, #3
   2d35e:	f1b8 0f01 	cmp.w	r8, #1
   2d362:	bf8c      	ite	hi
   2d364:	f04f 0800 	movhi.w	r8, #0
   2d368:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   2d36c:	4628      	mov	r0, r5
   2d36e:	f00d f90c 	bl	3a58a <qspi_rdsr.constprop.0>
		if (ret < 0) {
   2d372:	1e04      	subs	r4, r0, #0
   2d374:	da0b      	bge.n	2d38e <qspi_nor_init+0x7e>
			LOG_ERR("RDSR failed: %d", ret);
   2d376:	483e      	ldr	r0, [pc, #248]	; (2d470 <qspi_nor_init+0x160>)
   2d378:	4622      	mov	r2, r4
   2d37a:	2145      	movs	r1, #69	; 0x45
   2d37c:	f00a fe32 	bl	37fe4 <z_log_minimal_printk>
}
   2d380:	4620      	mov	r0, r4
   2d382:	b00a      	add	sp, #40	; 0x28
   2d384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   2d388:	f04f 0801 	mov.w	r8, #1
   2d38c:	e7ee      	b.n	2d36c <qspi_nor_init+0x5c>
		uint8_t sr = (uint8_t)ret;
   2d38e:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   2d390:	f3c4 1480 	ubfx	r4, r4, #6, #1
   2d394:	45a0      	cmp	r8, r4
   2d396:	ae04      	add	r6, sp, #16
   2d398:	af05      	add	r7, sp, #20
   2d39a:	d028      	beq.n	2d3ee <qspi_nor_init+0xde>
	uint8_t sr_array[2] = {0};
   2d39c:	2300      	movs	r3, #0
			sr ^= qe_mask;
   2d39e:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   2d3a2:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   2d3a6:	a907      	add	r1, sp, #28
		sr_array[0] = sr_val;
   2d3a8:	f88d 2010 	strb.w	r2, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   2d3ac:	4628      	mov	r0, r5
	const struct qspi_buf sr_buf = {
   2d3ae:	2201      	movs	r2, #1
	struct qspi_cmd cmd = {
   2d3b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct qspi_buf sr_buf = {
   2d3b4:	9605      	str	r6, [sp, #20]
	struct qspi_cmd cmd = {
   2d3b6:	9309      	str	r3, [sp, #36]	; 0x24
   2d3b8:	f88d 201c 	strb.w	r2, [sp, #28]
   2d3bc:	9708      	str	r7, [sp, #32]
	ret = qspi_send_cmd(dev, &cmd, true);
   2d3be:	f7ff fe3b 	bl	2d038 <qspi_send_cmd>
	if (ret == 0) {
   2d3c2:	1e04      	subs	r4, r0, #0
   2d3c4:	d00c      	beq.n	2d3e0 <qspi_nor_init+0xd0>
		if (ret < 0) {
   2d3c6:	dadb      	bge.n	2d380 <qspi_nor_init+0x70>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   2d3c8:	492a      	ldr	r1, [pc, #168]	; (2d474 <qspi_nor_init+0x164>)
   2d3ca:	4a2b      	ldr	r2, [pc, #172]	; (2d478 <qspi_nor_init+0x168>)
   2d3cc:	482b      	ldr	r0, [pc, #172]	; (2d47c <qspi_nor_init+0x16c>)
   2d3ce:	f1b8 0f00 	cmp.w	r8, #0
   2d3d2:	bf08      	it	eq
   2d3d4:	460a      	moveq	r2, r1
   2d3d6:	4623      	mov	r3, r4
   2d3d8:	2145      	movs	r1, #69	; 0x45
   2d3da:	f00a fe03 	bl	37fe4 <z_log_minimal_printk>
	if (ret != 0) {
   2d3de:	e7cf      	b.n	2d380 <qspi_nor_init+0x70>
		ret = qspi_rdsr(dev, 1);
   2d3e0:	4628      	mov	r0, r5
   2d3e2:	f00d f8d2 	bl	3a58a <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   2d3e6:	1e04      	subs	r4, r0, #0
   2d3e8:	dbee      	blt.n	2d3c8 <qspi_nor_init+0xb8>
   2d3ea:	07e3      	lsls	r3, r4, #31
   2d3ec:	d4f8      	bmi.n	2d3e0 <qspi_nor_init+0xd0>
	qspi_device_uninit(dev);
   2d3ee:	4628      	mov	r0, r5
   2d3f0:	f7ff fe66 	bl	2d0c0 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   2d3f4:	f04f 0803 	mov.w	r8, #3
   2d3f8:	2300      	movs	r3, #0
   2d3fa:	e9cd 8306 	strd	r8, r3, [sp, #24]
   2d3fe:	9308      	str	r3, [sp, #32]
	int ret = qspi_device_init(dev);
   2d400:	4628      	mov	r0, r5
	const struct qspi_cmd cmd = {
   2d402:	239f      	movs	r3, #159	; 0x9f
	const struct qspi_buf rx_buf = {
   2d404:	9605      	str	r6, [sp, #20]
	const struct qspi_cmd cmd = {
   2d406:	f88d 301c 	strb.w	r3, [sp, #28]
   2d40a:	9709      	str	r7, [sp, #36]	; 0x24
	int ret = qspi_device_init(dev);
   2d40c:	f7ff fdee 	bl	2cfec <qspi_device_init>
	if (ret == 0) {
   2d410:	4602      	mov	r2, r0
   2d412:	b128      	cbz	r0, 2d420 <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
   2d414:	4628      	mov	r0, r5
   2d416:	f7ff fe53 	bl	2d0c0 <qspi_device_uninit>
		return -ENODEV;
   2d41a:	f06f 0412 	mvn.w	r4, #18
   2d41e:	e7af      	b.n	2d380 <qspi_nor_init+0x70>
		ret = qspi_send_cmd(dev, &cmd, false);
   2d420:	a907      	add	r1, sp, #28
   2d422:	4628      	mov	r0, r5
   2d424:	f7ff fe08 	bl	2d038 <qspi_send_cmd>
   2d428:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   2d42a:	4628      	mov	r0, r5
   2d42c:	f7ff fe48 	bl	2d0c0 <qspi_device_uninit>
	if (ret != 0) {
   2d430:	2c00      	cmp	r4, #0
   2d432:	d1f2      	bne.n	2d41a <qspi_nor_init+0x10a>
	const struct qspi_nor_config *qnc = dev->config;
   2d434:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   2d436:	4642      	mov	r2, r8
   2d438:	4631      	mov	r1, r6
   2d43a:	f105 001c 	add.w	r0, r5, #28
   2d43e:	f00b f995 	bl	3876c <memcmp>
   2d442:	4604      	mov	r4, r0
   2d444:	2800      	cmp	r0, #0
   2d446:	d09b      	beq.n	2d380 <qspi_nor_init+0x70>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   2d448:	7fab      	ldrb	r3, [r5, #30]
   2d44a:	9303      	str	r3, [sp, #12]
   2d44c:	7f6b      	ldrb	r3, [r5, #29]
   2d44e:	9302      	str	r3, [sp, #8]
   2d450:	7f2b      	ldrb	r3, [r5, #28]
   2d452:	9301      	str	r3, [sp, #4]
   2d454:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2d458:	9300      	str	r3, [sp, #0]
   2d45a:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2d45e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2d462:	4807      	ldr	r0, [pc, #28]	; (2d480 <qspi_nor_init+0x170>)
   2d464:	2145      	movs	r1, #69	; 0x45
   2d466:	f00a fdbd 	bl	37fe4 <z_log_minimal_printk>
		return -ENODEV;
   2d46a:	e7d6      	b.n	2d41a <qspi_nor_init+0x10a>
   2d46c:	0003a4f5 	.word	0x0003a4f5
   2d470:	0003e4d6 	.word	0x0003e4d6
   2d474:	0003e4d0 	.word	0x0003e4d0
   2d478:	0003e4cc 	.word	0x0003e4cc
   2d47c:	0003e4eb 	.word	0x0003e4eb
   2d480:	0003e501 	.word	0x0003e501

0002d484 <qspi_nor_erase>:
{
   2d484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d488:	4615      	mov	r5, r2
	if (addr < 0 ||
   2d48a:	1e0a      	subs	r2, r1, #0
	const struct qspi_nor_config *params = dev->config;
   2d48c:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   2d490:	4606      	mov	r6, r0
	if (addr < 0 ||
   2d492:	db05      	blt.n	2d4a0 <qspi_nor_erase+0x1c>
   2d494:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
   2d498:	1951      	adds	r1, r2, r5
	if (addr < 0 ||
   2d49a:	4299      	cmp	r1, r3
	    (addr + size) > params->size) {
   2d49c:	4690      	mov	r8, r2
	if (addr < 0 ||
   2d49e:	d909      	bls.n	2d4b4 <qspi_nor_erase+0x30>
		LOG_ERR("erase error: address or size "
   2d4a0:	483c      	ldr	r0, [pc, #240]	; (2d594 <qspi_nor_erase+0x110>)
   2d4a2:	462b      	mov	r3, r5
   2d4a4:	2145      	movs	r1, #69	; 0x45
   2d4a6:	f00a fd9d 	bl	37fe4 <z_log_minimal_printk>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   2d4aa:	f06f 0415 	mvn.w	r4, #21
}
   2d4ae:	4620      	mov	r0, r4
   2d4b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   2d4b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   2d4b8:	2d00      	cmp	r5, #0
   2d4ba:	d0f6      	beq.n	2d4aa <qspi_nor_erase+0x26>
   2d4bc:	f3c5 030b 	ubfx	r3, r5, #0, #12
   2d4c0:	4313      	orrs	r3, r2
   2d4c2:	d1f2      	bne.n	2d4aa <qspi_nor_erase+0x26>
	rv = qspi_device_init(dev);
   2d4c4:	f7ff fd92 	bl	2cfec <qspi_device_init>
	if (rv != 0) {
   2d4c8:	4604      	mov	r4, r0
   2d4ca:	bb68      	cbnz	r0, 2d528 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   2d4cc:	6930      	ldr	r0, [r6, #16]
   2d4ce:	f00d f82d 	bl	3a52c <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   2d4d2:	4621      	mov	r1, r4
   2d4d4:	4630      	mov	r0, r6
   2d4d6:	f00d f82f 	bl	3a538 <qspi_nor_write_protection_set>
	if (rv != 0) {
   2d4da:	4604      	mov	r4, r0
   2d4dc:	bb08      	cbnz	r0, 2d522 <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   2d4de:	6930      	ldr	r0, [r6, #16]
		if (res == NRFX_SUCCESS) {
   2d4e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2d598 <qspi_nor_erase+0x114>
	qspi_lock(dev);
   2d4e4:	f00d f81b 	bl	3a51e <qspi_lock.isra.0>
		if (size == params->size) {
   2d4e8:	f8d9 3018 	ldr.w	r3, [r9, #24]
   2d4ec:	42ab      	cmp	r3, r5
   2d4ee:	d11f      	bne.n	2d530 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   2d4f0:	f00d fce4 	bl	3aebc <nrfx_qspi_chip_erase>
   2d4f4:	46ab      	mov	fp, r5
   2d4f6:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   2d4f8:	6930      	ldr	r0, [r6, #16]
   2d4fa:	4639      	mov	r1, r7
   2d4fc:	f7ff fd68 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   2d500:	4557      	cmp	r7, sl
   2d502:	d13b      	bne.n	2d57c <qspi_nor_erase+0xf8>
	while (size > 0) {
   2d504:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   2d508:	44d8      	add	r8, fp
	while (size > 0) {
   2d50a:	d1ed      	bne.n	2d4e8 <qspi_nor_erase+0x64>
	k_sem_give(&dev_data->sem);
   2d50c:	6930      	ldr	r0, [r6, #16]
   2d50e:	3018      	adds	r0, #24
   2d510:	f00c ffee 	bl	3a4f0 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   2d514:	2101      	movs	r1, #1
   2d516:	4630      	mov	r0, r6
   2d518:	f00d f80e 	bl	3a538 <qspi_nor_write_protection_set>
   2d51c:	2c00      	cmp	r4, #0
   2d51e:	bf08      	it	eq
   2d520:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   2d522:	6930      	ldr	r0, [r6, #16]
   2d524:	f00c ffe4 	bl	3a4f0 <k_sem_give>
	qspi_device_uninit(dev);
   2d528:	4630      	mov	r0, r6
   2d52a:	f7ff fdc9 	bl	2d0c0 <qspi_device_uninit>
	return rv;
   2d52e:	e7be      	b.n	2d4ae <qspi_nor_erase+0x2a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   2d530:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2d534:	d30a      	bcc.n	2d54c <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   2d536:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   2d53a:	b953      	cbnz	r3, 2d552 <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   2d53c:	4641      	mov	r1, r8
   2d53e:	2001      	movs	r0, #1
   2d540:	f003 fe60 	bl	31204 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   2d544:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   2d548:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   2d54a:	e7d5      	b.n	2d4f8 <qspi_nor_erase+0x74>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   2d54c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2d550:	d309      	bcc.n	2d566 <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   2d552:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   2d556:	b930      	cbnz	r0, 2d566 <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   2d558:	4641      	mov	r1, r8
   2d55a:	f003 fe53 	bl	31204 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   2d55e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   2d562:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   2d564:	e7c8      	b.n	2d4f8 <qspi_nor_erase+0x74>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   2d566:	480d      	ldr	r0, [pc, #52]	; (2d59c <qspi_nor_erase+0x118>)
			res = NRFX_ERROR_INVALID_PARAM;
   2d568:	4f0d      	ldr	r7, [pc, #52]	; (2d5a0 <qspi_nor_erase+0x11c>)
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   2d56a:	462b      	mov	r3, r5
   2d56c:	4642      	mov	r2, r8
   2d56e:	2145      	movs	r1, #69	; 0x45
   2d570:	f00a fd38 	bl	37fe4 <z_log_minimal_printk>
		qspi_wait_for_completion(dev, res);
   2d574:	490a      	ldr	r1, [pc, #40]	; (2d5a0 <qspi_nor_erase+0x11c>)
   2d576:	6930      	ldr	r0, [r6, #16]
   2d578:	f7ff fd2a 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   2d57c:	4809      	ldr	r0, [pc, #36]	; (2d5a4 <qspi_nor_erase+0x120>)
   2d57e:	462b      	mov	r3, r5
   2d580:	4642      	mov	r2, r8
   2d582:	2145      	movs	r1, #69	; 0x45
   2d584:	f00a fd2e 	bl	37fe4 <z_log_minimal_printk>
			rv = qspi_get_zephyr_ret_code(res);
   2d588:	4638      	mov	r0, r7
   2d58a:	f7ff fd07 	bl	2cf9c <qspi_get_zephyr_ret_code>
   2d58e:	4604      	mov	r4, r0
			break;
   2d590:	e7bc      	b.n	2d50c <qspi_nor_erase+0x88>
   2d592:	bf00      	nop
   2d594:	0003e538 	.word	0x0003e538
   2d598:	0bad0000 	.word	0x0bad0000
   2d59c:	0003e587 	.word	0x0003e587
   2d5a0:	0bad0004 	.word	0x0bad0004
   2d5a4:	0003e5aa 	.word	0x0003e5aa

0002d5a8 <qspi_nor_write>:
{
   2d5a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2d5ac:	4605      	mov	r5, r0
   2d5ae:	460f      	mov	r7, r1
   2d5b0:	461e      	mov	r6, r3
	if (!src) {
   2d5b2:	4690      	mov	r8, r2
   2d5b4:	b19a      	cbz	r2, 2d5de <qspi_nor_write+0x36>
	if ((size == 0)
   2d5b6:	b193      	cbz	r3, 2d5de <qspi_nor_write+0x36>
	    || ((size > 4) && ((size % 4U) != 0))) {
   2d5b8:	2b04      	cmp	r3, #4
   2d5ba:	d901      	bls.n	2d5c0 <qspi_nor_write+0x18>
   2d5bc:	079a      	lsls	r2, r3, #30
   2d5be:	d10e      	bne.n	2d5de <qspi_nor_write+0x36>
	if ((addr % 4U) != 0) {
   2d5c0:	07bb      	lsls	r3, r7, #30
   2d5c2:	d10c      	bne.n	2d5de <qspi_nor_write+0x36>
	if (addr < 0 ||
   2d5c4:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   2d5c6:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   2d5c8:	db03      	blt.n	2d5d2 <qspi_nor_write+0x2a>
   2d5ca:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   2d5cc:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   2d5ce:	4293      	cmp	r3, r2
   2d5d0:	d90b      	bls.n	2d5ea <qspi_nor_write+0x42>
		LOG_ERR("write error: address or size "
   2d5d2:	483f      	ldr	r0, [pc, #252]	; (2d6d0 <qspi_nor_write+0x128>)
   2d5d4:	4633      	mov	r3, r6
   2d5d6:	463a      	mov	r2, r7
   2d5d8:	2145      	movs	r1, #69	; 0x45
   2d5da:	f00a fd03 	bl	37fe4 <z_log_minimal_printk>
		return -EINVAL;
   2d5de:	f06f 0415 	mvn.w	r4, #21
}
   2d5e2:	4620      	mov	r0, r4
   2d5e4:	b002      	add	sp, #8
   2d5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   2d5ea:	4628      	mov	r0, r5
   2d5ec:	f7ff fcfe 	bl	2cfec <qspi_device_init>
	if (rc != 0) {
   2d5f0:	4604      	mov	r4, r0
   2d5f2:	2800      	cmp	r0, #0
   2d5f4:	d163      	bne.n	2d6be <qspi_nor_write+0x116>
	qspi_trans_lock(dev);
   2d5f6:	6928      	ldr	r0, [r5, #16]
   2d5f8:	f00c ff98 	bl	3a52c <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   2d5fc:	4621      	mov	r1, r4
   2d5fe:	4628      	mov	r0, r5
   2d600:	f00c ff9a 	bl	3a538 <qspi_nor_write_protection_set>
   2d604:	4604      	mov	r4, r0
	qspi_lock(dev);
   2d606:	6928      	ldr	r0, [r5, #16]
   2d608:	f00c ff89 	bl	3a51e <qspi_lock.isra.0>
	if (!res) {
   2d60c:	2c00      	cmp	r4, #0
   2d60e:	d143      	bne.n	2d698 <qspi_nor_write+0xf0>
		if (size < 4U) {
   2d610:	2e03      	cmp	r6, #3
   2d612:	d81e      	bhi.n	2d652 <qspi_nor_write+0xaa>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   2d614:	2104      	movs	r1, #4
   2d616:	463a      	mov	r2, r7
   2d618:	eb0d 0001 	add.w	r0, sp, r1
   2d61c:	f00d fc4b 	bl	3aeb6 <nrfx_qspi_read>
   2d620:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   2d622:	4601      	mov	r1, r0
   2d624:	6928      	ldr	r0, [r5, #16]
   2d626:	f7ff fcd3 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   2d62a:	4b2a      	ldr	r3, [pc, #168]	; (2d6d4 <qspi_nor_write+0x12c>)
   2d62c:	429c      	cmp	r4, r3
   2d62e:	d133      	bne.n	2d698 <qspi_nor_write+0xf0>
		memcpy(buf, sptr, slen);
   2d630:	4632      	mov	r2, r6
   2d632:	4641      	mov	r1, r8
   2d634:	a801      	add	r0, sp, #4
   2d636:	f00b f8c0 	bl	387ba <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   2d63a:	2104      	movs	r1, #4
   2d63c:	463a      	mov	r2, r7
   2d63e:	eb0d 0001 	add.w	r0, sp, r1
			res = nrfx_qspi_write(src, size, addr);
   2d642:	f00d fc35 	bl	3aeb0 <nrfx_qspi_write>
   2d646:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   2d648:	4601      	mov	r1, r0
   2d64a:	6928      	ldr	r0, [r5, #16]
   2d64c:	f7ff fcc0 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
   2d650:	e022      	b.n	2d698 <qspi_nor_write+0xf0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2d652:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   2d656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2d65a:	d034      	beq.n	2d6c6 <qspi_nor_write+0x11e>
			if (res == NRFX_SUCCESS) {
   2d65c:	f8df a074 	ldr.w	sl, [pc, #116]	; 2d6d4 <qspi_nor_write+0x12c>
			size_t len = MIN(slen, sizeof(buf));
   2d660:	2e04      	cmp	r6, #4
   2d662:	46b1      	mov	r9, r6
   2d664:	bf28      	it	cs
   2d666:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   2d66a:	464a      	mov	r2, r9
   2d66c:	4641      	mov	r1, r8
   2d66e:	a801      	add	r0, sp, #4
   2d670:	f00b f8a3 	bl	387ba <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   2d674:	2104      	movs	r1, #4
   2d676:	463a      	mov	r2, r7
   2d678:	eb0d 0001 	add.w	r0, sp, r1
   2d67c:	f00d fc18 	bl	3aeb0 <nrfx_qspi_write>
   2d680:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   2d682:	4601      	mov	r1, r0
   2d684:	6928      	ldr	r0, [r5, #16]
   2d686:	f7ff fca3 	bl	2cfd0 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   2d68a:	4554      	cmp	r4, sl
   2d68c:	d104      	bne.n	2d698 <qspi_nor_write+0xf0>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   2d68e:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   2d692:	44c8      	add	r8, r9
				addr += len;
   2d694:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   2d696:	d1e3      	bne.n	2d660 <qspi_nor_write+0xb8>
	k_sem_give(&dev_data->sem);
   2d698:	6928      	ldr	r0, [r5, #16]
   2d69a:	3018      	adds	r0, #24
   2d69c:	f00c ff28 	bl	3a4f0 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   2d6a0:	2101      	movs	r1, #1
   2d6a2:	4628      	mov	r0, r5
   2d6a4:	f00c ff48 	bl	3a538 <qspi_nor_write_protection_set>
   2d6a8:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   2d6aa:	6928      	ldr	r0, [r5, #16]
   2d6ac:	f00c ff20 	bl	3a4f0 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   2d6b0:	2c00      	cmp	r4, #0
   2d6b2:	bf14      	ite	ne
   2d6b4:	4620      	movne	r0, r4
   2d6b6:	4630      	moveq	r0, r6
   2d6b8:	f7ff fc70 	bl	2cf9c <qspi_get_zephyr_ret_code>
   2d6bc:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   2d6be:	4628      	mov	r0, r5
   2d6c0:	f7ff fcfe 	bl	2d0c0 <qspi_device_uninit>
	return rc;
   2d6c4:	e78d      	b.n	2d5e2 <qspi_nor_write+0x3a>
			res = nrfx_qspi_write(src, size, addr);
   2d6c6:	463a      	mov	r2, r7
   2d6c8:	4631      	mov	r1, r6
   2d6ca:	4640      	mov	r0, r8
   2d6cc:	e7b9      	b.n	2d642 <qspi_nor_write+0x9a>
   2d6ce:	bf00      	nop
   2d6d0:	0003e5cd 	.word	0x0003e5cd
   2d6d4:	0bad0000 	.word	0x0bad0000

0002d6d8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2d6d8:	4b02      	ldr	r3, [pc, #8]	; (2d6e4 <flash_nrf_pages_layout+0xc>)
   2d6da:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2d6dc:	2301      	movs	r3, #1
   2d6de:	6013      	str	r3, [r2, #0]
}
   2d6e0:	4770      	bx	lr
   2d6e2:	bf00      	nop
   2d6e4:	20003f24 	.word	0x20003f24

0002d6e8 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2d6e8:	4800      	ldr	r0, [pc, #0]	; (2d6ec <flash_nrf_get_parameters+0x4>)
   2d6ea:	4770      	bx	lr
   2d6ec:	0003c434 	.word	0x0003c434

0002d6f0 <flash_nrf_read>:
{
   2d6f0:	b570      	push	{r4, r5, r6, lr}
   2d6f2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2d6f4:	4628      	mov	r0, r5
   2d6f6:	4619      	mov	r1, r3
{
   2d6f8:	4616      	mov	r6, r2
   2d6fa:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2d6fc:	f00c ff60 	bl	3a5c0 <is_regular_addr_valid>
   2d700:	b940      	cbnz	r0, 2d714 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2d702:	4808      	ldr	r0, [pc, #32]	; (2d724 <flash_nrf_read+0x34>)
   2d704:	4623      	mov	r3, r4
   2d706:	462a      	mov	r2, r5
   2d708:	2145      	movs	r1, #69	; 0x45
   2d70a:	f00a fc6b 	bl	37fe4 <z_log_minimal_printk>
   2d70e:	f06f 0015 	mvn.w	r0, #21
}
   2d712:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   2d714:	b124      	cbz	r4, 2d720 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
   2d716:	4622      	mov	r2, r4
   2d718:	4629      	mov	r1, r5
   2d71a:	4630      	mov	r0, r6
   2d71c:	f00b f84d 	bl	387ba <memcpy>
		return 0;
   2d720:	2000      	movs	r0, #0
   2d722:	e7f6      	b.n	2d712 <flash_nrf_read+0x22>
   2d724:	0003e632 	.word	0x0003e632

0002d728 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   2d728:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2d72a:	2201      	movs	r2, #1
   2d72c:	4611      	mov	r1, r2
   2d72e:	4807      	ldr	r0, [pc, #28]	; (2d74c <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2d730:	4c07      	ldr	r4, [pc, #28]	; (2d750 <nrf_flash_init+0x28>)
   2d732:	f00d ff00 	bl	3b536 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   2d736:	f001 ffed 	bl	2f714 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2d73a:	f00d fb82 	bl	3ae42 <nrfx_nvmc_flash_page_count_get>
   2d73e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2d740:	f00d fb7b 	bl	3ae3a <nrfx_nvmc_flash_page_size_get>
   2d744:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   2d746:	2000      	movs	r0, #0
   2d748:	bd10      	pop	{r4, pc}
   2d74a:	bf00      	nop
   2d74c:	20003f2c 	.word	0x20003f2c
   2d750:	20003f24 	.word	0x20003f24

0002d754 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   2d754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2d758:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   2d75c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2d760:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2d764:	f023 031f 	bic.w	r3, r3, #31
   2d768:	430b      	orrs	r3, r1
    pofcon |=
   2d76a:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2d76e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   2d772:	4b02      	ldr	r3, [pc, #8]	; (2d77c <restore_pofwarn.part.0+0x28>)
   2d774:	2200      	movs	r2, #0
   2d776:	701a      	strb	r2, [r3, #0]
	}
}
   2d778:	4770      	bx	lr
   2d77a:	bf00      	nop
   2d77c:	20004d98 	.word	0x20004d98

0002d780 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d780:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2d784:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2d788:	2b08      	cmp	r3, #8
   2d78a:	d120      	bne.n	2d7ce <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   2d78c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2d790:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   2d794:	07cb      	lsls	r3, r1, #31
   2d796:	d51a      	bpl.n	2d7ce <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   2d798:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2d79c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2d7a0:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   2d7a4:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   2d7a6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7aa:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   2d7ae:	b15b      	cbz	r3, 2d7c8 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   2d7b0:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2d7b4:	f023 031f 	bic.w	r3, r3, #31
   2d7b8:	430b      	orrs	r3, r1
    pofcon |=
   2d7ba:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2d7be:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   2d7c2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   2d7c6:	4770      	bx	lr
		pofcon_enabled = enabled;
   2d7c8:	4b02      	ldr	r3, [pc, #8]	; (2d7d4 <suspend_pofwarn+0x54>)
   2d7ca:	2201      	movs	r2, #1
   2d7cc:	701a      	strb	r2, [r3, #0]
		return 0;
   2d7ce:	2000      	movs	r0, #0
}
   2d7d0:	4770      	bx	lr
   2d7d2:	bf00      	nop
   2d7d4:	20004d98 	.word	0x20004d98

0002d7d8 <erase_op>:
{
   2d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d7da:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2d7dc:	f00d fb2d 	bl	3ae3a <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   2d7e0:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2d7e2:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   2d7e4:	b10b      	cbz	r3, 2d7ea <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   2d7e6:	f00d f9bb 	bl	3ab60 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   2d7ea:	4f13      	ldr	r7, [pc, #76]	; (2d838 <erase_op+0x60>)
{
   2d7ec:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   2d7ee:	f7ff ffc7 	bl	2d780 <suspend_pofwarn>
   2d7f2:	b9e8      	cbnz	r0, 2d830 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2d7f4:	6860      	ldr	r0, [r4, #4]
   2d7f6:	f002 ff3d 	bl	30674 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2d7fa:	68a3      	ldr	r3, [r4, #8]
   2d7fc:	1b5b      	subs	r3, r3, r5
   2d7fe:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2d800:	6863      	ldr	r3, [r4, #4]
   2d802:	442b      	add	r3, r5
   2d804:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   2d806:	783b      	ldrb	r3, [r7, #0]
   2d808:	b10b      	cbz	r3, 2d80e <erase_op+0x36>
   2d80a:	f7ff ffa3 	bl	2d754 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   2d80e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2d810:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2d812:	b93b      	cbnz	r3, 2d824 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   2d814:	68a3      	ldr	r3, [r4, #8]
   2d816:	2b00      	cmp	r3, #0
   2d818:	d1e9      	bne.n	2d7ee <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2d81a:	68a0      	ldr	r0, [r4, #8]
   2d81c:	3800      	subs	r0, #0
   2d81e:	bf18      	it	ne
   2d820:	2001      	movne	r0, #1
}
   2d822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   2d824:	4630      	mov	r0, r6
   2d826:	f002 f82d 	bl	2f884 <nrf_flash_sync_check_time_limit>
   2d82a:	2800      	cmp	r0, #0
   2d82c:	d0f2      	beq.n	2d814 <erase_op+0x3c>
   2d82e:	e7f4      	b.n	2d81a <erase_op+0x42>
			return -ECANCELED;
   2d830:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2d834:	e7f5      	b.n	2d822 <erase_op+0x4a>
   2d836:	bf00      	nop
   2d838:	20004d98 	.word	0x20004d98

0002d83c <flash_nrf_erase>:
{
   2d83c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d83e:	b087      	sub	sp, #28
   2d840:	460e      	mov	r6, r1
   2d842:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2d844:	f00d faf9 	bl	3ae3a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2d848:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2d84a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   2d84c:	4630      	mov	r0, r6
   2d84e:	f00c feb7 	bl	3a5c0 <is_regular_addr_valid>
   2d852:	b358      	cbz	r0, 2d8ac <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2d854:	fbb6 f3f7 	udiv	r3, r6, r7
   2d858:	fb07 6313 	mls	r3, r7, r3, r6
   2d85c:	b923      	cbnz	r3, 2d868 <flash_nrf_erase+0x2c>
   2d85e:	fbb5 f4f7 	udiv	r4, r5, r7
   2d862:	fb07 5414 	mls	r4, r7, r4, r5
   2d866:	b154      	cbz	r4, 2d87e <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2d868:	481f      	ldr	r0, [pc, #124]	; (2d8e8 <flash_nrf_erase+0xac>)
   2d86a:	462b      	mov	r3, r5
   2d86c:	4632      	mov	r2, r6
   2d86e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2d870:	f00a fbb8 	bl	37fe4 <z_log_minimal_printk>
			return -EINVAL;
   2d874:	f06f 0415 	mvn.w	r4, #21
}
   2d878:	4620      	mov	r0, r4
   2d87a:	b007      	add	sp, #28
   2d87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   2d87e:	42bd      	cmp	r5, r7
   2d880:	d3fa      	bcc.n	2d878 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   2d882:	f04f 33ff 	mov.w	r3, #4294967295
   2d886:	f04f 32ff 	mov.w	r2, #4294967295
   2d88a:	4818      	ldr	r0, [pc, #96]	; (2d8ec <flash_nrf_erase+0xb0>)
   2d88c:	f004 fdb0 	bl	323f0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2d890:	f00d f964 	bl	3ab5c <nrf_flash_sync_is_required>
   2d894:	ab02      	add	r3, sp, #8
   2d896:	4601      	mov	r1, r0
   2d898:	b968      	cbnz	r0, 2d8b6 <flash_nrf_erase+0x7a>
	struct flash_context context = {
   2d89a:	2210      	movs	r2, #16
   2d89c:	4618      	mov	r0, r3
   2d89e:	f00a ff97 	bl	387d0 <memset>
   2d8a2:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   2d8a6:	f7ff ff97 	bl	2d7d8 <erase_op>
   2d8aa:	e017      	b.n	2d8dc <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2d8ac:	4810      	ldr	r0, [pc, #64]	; (2d8f0 <flash_nrf_erase+0xb4>)
   2d8ae:	462b      	mov	r3, r5
   2d8b0:	4632      	mov	r2, r6
   2d8b2:	2145      	movs	r1, #69	; 0x45
   2d8b4:	e7dc      	b.n	2d870 <flash_nrf_erase+0x34>
	struct flash_context context = {
   2d8b6:	2210      	movs	r2, #16
   2d8b8:	4621      	mov	r1, r4
   2d8ba:	4618      	mov	r0, r3
   2d8bc:	f00a ff88 	bl	387d0 <memset>
   2d8c0:	2201      	movs	r2, #1
   2d8c2:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   2d8c6:	4a0b      	ldr	r2, [pc, #44]	; (2d8f4 <flash_nrf_erase+0xb8>)
   2d8c8:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   2d8cc:	480a      	ldr	r0, [pc, #40]	; (2d8f8 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   2d8ce:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   2d8d2:	f001 ff27 	bl	2f724 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2d8d6:	4668      	mov	r0, sp
   2d8d8:	f001 ff2a 	bl	2f730 <nrf_flash_sync_exe>
	return	erase_op(&context);
   2d8dc:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2d8de:	4803      	ldr	r0, [pc, #12]	; (2d8ec <flash_nrf_erase+0xb0>)
   2d8e0:	f004 fd4a 	bl	32378 <z_impl_k_sem_give>
}
   2d8e4:	e7c8      	b.n	2d878 <flash_nrf_erase+0x3c>
   2d8e6:	bf00      	nop
   2d8e8:	0003e654 	.word	0x0003e654
   2d8ec:	20003f2c 	.word	0x20003f2c
   2d8f0:	0003e632 	.word	0x0003e632
   2d8f4:	0002d7d9 	.word	0x0002d7d9
   2d8f8:	00015e64 	.word	0x00015e64

0002d8fc <write_op>:
{
   2d8fc:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   2d8fe:	7b03      	ldrb	r3, [r0, #12]
{
   2d900:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2d902:	b10b      	cbz	r3, 2d908 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   2d904:	f00d f92c 	bl	3ab60 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   2d908:	4e19      	ldr	r6, [pc, #100]	; (2d970 <write_op+0x74>)
{
   2d90a:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2d90c:	68a3      	ldr	r3, [r4, #8]
   2d90e:	2b03      	cmp	r3, #3
   2d910:	d806      	bhi.n	2d920 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2d912:	4a18      	ldr	r2, [pc, #96]	; (2d974 <write_op+0x78>)
   2d914:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2d918:	07db      	lsls	r3, r3, #31
   2d91a:	d5fb      	bpl.n	2d914 <write_op+0x18>
	return FLASH_OP_DONE;
   2d91c:	2000      	movs	r0, #0
}
   2d91e:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   2d920:	f7ff ff2e 	bl	2d780 <suspend_pofwarn>
   2d924:	bb08      	cbnz	r0, 2d96a <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   2d926:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2d928:	6860      	ldr	r0, [r4, #4]
   2d92a:	6819      	ldr	r1, [r3, #0]
   2d92c:	f002 fed6 	bl	306dc <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   2d930:	7833      	ldrb	r3, [r6, #0]
   2d932:	b10b      	cbz	r3, 2d938 <write_op+0x3c>
   2d934:	f7ff ff0e 	bl	2d754 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   2d938:	6863      	ldr	r3, [r4, #4]
   2d93a:	3304      	adds	r3, #4
   2d93c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   2d93e:	6823      	ldr	r3, [r4, #0]
   2d940:	3304      	adds	r3, #4
   2d942:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   2d944:	68a3      	ldr	r3, [r4, #8]
   2d946:	3b04      	subs	r3, #4
   2d948:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   2d94a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2d94c:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2d94e:	2b00      	cmp	r3, #0
   2d950:	d0dc      	beq.n	2d90c <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   2d952:	4628      	mov	r0, r5
   2d954:	f001 ff96 	bl	2f884 <nrf_flash_sync_check_time_limit>
   2d958:	2800      	cmp	r0, #0
   2d95a:	d0d7      	beq.n	2d90c <write_op+0x10>
   2d95c:	4a05      	ldr	r2, [pc, #20]	; (2d974 <write_op+0x78>)
   2d95e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2d962:	07d9      	lsls	r1, r3, #31
   2d964:	d5fb      	bpl.n	2d95e <write_op+0x62>
				return FLASH_OP_ONGOING;
   2d966:	2001      	movs	r0, #1
   2d968:	e7d9      	b.n	2d91e <write_op+0x22>
			return -ECANCELED;
   2d96a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2d96e:	e7d6      	b.n	2d91e <write_op+0x22>
   2d970:	20004d98 	.word	0x20004d98
   2d974:	4001e000 	.word	0x4001e000

0002d978 <flash_nrf_write>:
{
   2d978:	b570      	push	{r4, r5, r6, lr}
   2d97a:	460d      	mov	r5, r1
   2d97c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   2d97e:	4619      	mov	r1, r3
   2d980:	4628      	mov	r0, r5
{
   2d982:	4616      	mov	r6, r2
   2d984:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2d986:	f00c fe1b 	bl	3a5c0 <is_regular_addr_valid>
   2d98a:	b950      	cbnz	r0, 2d9a2 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2d98c:	481d      	ldr	r0, [pc, #116]	; (2da04 <flash_nrf_write+0x8c>)
   2d98e:	4623      	mov	r3, r4
   2d990:	462a      	mov	r2, r5
   2d992:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2d994:	f00a fb26 	bl	37fe4 <z_log_minimal_printk>
		return -EINVAL;
   2d998:	f06f 0415 	mvn.w	r4, #21
}
   2d99c:	4620      	mov	r0, r4
   2d99e:	b006      	add	sp, #24
   2d9a0:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2d9a2:	ea45 0304 	orr.w	r3, r5, r4
   2d9a6:	079b      	lsls	r3, r3, #30
   2d9a8:	d004      	beq.n	2d9b4 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2d9aa:	4817      	ldr	r0, [pc, #92]	; (2da08 <flash_nrf_write+0x90>)
   2d9ac:	4623      	mov	r3, r4
   2d9ae:	462a      	mov	r2, r5
   2d9b0:	2145      	movs	r1, #69	; 0x45
   2d9b2:	e7ef      	b.n	2d994 <flash_nrf_write+0x1c>
	if (!len) {
   2d9b4:	2c00      	cmp	r4, #0
   2d9b6:	d0f1      	beq.n	2d99c <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   2d9b8:	f04f 33ff 	mov.w	r3, #4294967295
   2d9bc:	f04f 32ff 	mov.w	r2, #4294967295
   2d9c0:	4812      	ldr	r0, [pc, #72]	; (2da0c <flash_nrf_write+0x94>)
   2d9c2:	f004 fd15 	bl	323f0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2d9c6:	f00d f8c9 	bl	3ab5c <nrf_flash_sync_is_required>
   2d9ca:	4603      	mov	r3, r0
	struct flash_context context = {
   2d9cc:	e9cd 6502 	strd	r6, r5, [sp, #8]
   2d9d0:	a802      	add	r0, sp, #8
   2d9d2:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   2d9d4:	b18b      	cbz	r3, 2d9fa <flash_nrf_write+0x82>
	struct flash_context context = {
   2d9d6:	2301      	movs	r3, #1
   2d9d8:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   2d9dc:	4b0c      	ldr	r3, [pc, #48]	; (2da10 <flash_nrf_write+0x98>)
   2d9de:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   2d9e2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   2d9e6:	f001 fe9d 	bl	2f724 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2d9ea:	4668      	mov	r0, sp
   2d9ec:	f001 fea0 	bl	2f730 <nrf_flash_sync_exe>
	return write_op(&context);
   2d9f0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2d9f2:	4806      	ldr	r0, [pc, #24]	; (2da0c <flash_nrf_write+0x94>)
   2d9f4:	f004 fcc0 	bl	32378 <z_impl_k_sem_give>
}
   2d9f8:	e7d0      	b.n	2d99c <flash_nrf_write+0x24>
	struct flash_context context = {
   2d9fa:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   2d9fe:	f7ff ff7d 	bl	2d8fc <write_op>
   2da02:	e7f5      	b.n	2d9f0 <flash_nrf_write+0x78>
   2da04:	0003e632 	.word	0x0003e632
   2da08:	0003e678 	.word	0x0003e678
   2da0c:	20003f2c 	.word	0x20003f2c
   2da10:	0002d8fd 	.word	0x0002d8fd

0002da14 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2da14:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2da16:	794b      	ldrb	r3, [r1, #5]
   2da18:	2b01      	cmp	r3, #1
   2da1a:	d026      	beq.n	2da6a <uarte_nrfx_configure+0x56>
   2da1c:	2b03      	cmp	r3, #3
   2da1e:	d121      	bne.n	2da64 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2da20:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2da22:	798b      	ldrb	r3, [r1, #6]
   2da24:	2b03      	cmp	r3, #3
   2da26:	d11d      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2da28:	79ce      	ldrb	r6, [r1, #7]
   2da2a:	b10e      	cbz	r6, 2da30 <uarte_nrfx_configure+0x1c>
   2da2c:	2e01      	cmp	r6, #1
   2da2e:	d119      	bne.n	2da64 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2da30:	790a      	ldrb	r2, [r1, #4]
   2da32:	b112      	cbz	r2, 2da3a <uarte_nrfx_configure+0x26>
   2da34:	2a02      	cmp	r2, #2
   2da36:	d115      	bne.n	2da64 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2da38:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2da3a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2da3c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   2da3e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2da42:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   2da44:	d067      	beq.n	2db16 <uarte_nrfx_configure+0x102>
   2da46:	d82d      	bhi.n	2daa4 <uarte_nrfx_configure+0x90>
   2da48:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2da4c:	d066      	beq.n	2db1c <uarte_nrfx_configure+0x108>
   2da4e:	d816      	bhi.n	2da7e <uarte_nrfx_configure+0x6a>
   2da50:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2da54:	d064      	beq.n	2db20 <uarte_nrfx_configure+0x10c>
   2da56:	d80a      	bhi.n	2da6e <uarte_nrfx_configure+0x5a>
   2da58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2da5c:	d063      	beq.n	2db26 <uarte_nrfx_configure+0x112>
   2da5e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2da62:	d063      	beq.n	2db2c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   2da64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2da68:	e054      	b.n	2db14 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   2da6a:	2500      	movs	r5, #0
   2da6c:	e7d9      	b.n	2da22 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2da6e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2da72:	d05e      	beq.n	2db32 <uarte_nrfx_configure+0x11e>
   2da74:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2da78:	d1f4      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2da7a:	4b38      	ldr	r3, [pc, #224]	; (2db5c <uarte_nrfx_configure+0x148>)
   2da7c:	e03c      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2da7e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2da82:	d059      	beq.n	2db38 <uarte_nrfx_configure+0x124>
   2da84:	d807      	bhi.n	2da96 <uarte_nrfx_configure+0x82>
   2da86:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2da8a:	d057      	beq.n	2db3c <uarte_nrfx_configure+0x128>
   2da8c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2da90:	d1e8      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2da92:	4b33      	ldr	r3, [pc, #204]	; (2db60 <uarte_nrfx_configure+0x14c>)
   2da94:	e030      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2da96:	f647 2412 	movw	r4, #31250	; 0x7a12
   2da9a:	42a3      	cmp	r3, r4
   2da9c:	d1e2      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2da9e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2daa2:	e029      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2daa4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2daa8:	d04a      	beq.n	2db40 <uarte_nrfx_configure+0x12c>
   2daaa:	d813      	bhi.n	2dad4 <uarte_nrfx_configure+0xc0>
   2daac:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2dab0:	d049      	beq.n	2db46 <uarte_nrfx_configure+0x132>
   2dab2:	d809      	bhi.n	2dac8 <uarte_nrfx_configure+0xb4>
   2dab4:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   2dab8:	42a3      	cmp	r3, r4
   2daba:	d046      	beq.n	2db4a <uarte_nrfx_configure+0x136>
   2dabc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2dac0:	d1d0      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2dac2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2dac6:	e017      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2dac8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2dacc:	d1ca      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2dace:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2dad2:	e011      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2dad4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2dad8:	d03a      	beq.n	2db50 <uarte_nrfx_configure+0x13c>
   2dada:	d808      	bhi.n	2daee <uarte_nrfx_configure+0xda>
   2dadc:	4c21      	ldr	r4, [pc, #132]	; (2db64 <uarte_nrfx_configure+0x150>)
   2dade:	42a3      	cmp	r3, r4
   2dae0:	d039      	beq.n	2db56 <uarte_nrfx_configure+0x142>
   2dae2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2dae6:	d1bd      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2dae8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2daec:	e004      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2daee:	4c1e      	ldr	r4, [pc, #120]	; (2db68 <uarte_nrfx_configure+0x154>)
   2daf0:	42a3      	cmp	r3, r4
   2daf2:	d1b7      	bne.n	2da64 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2daf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   2daf8:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2dafa:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   2dafe:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   2db00:	4335      	orrs	r5, r6
   2db02:	681b      	ldr	r3, [r3, #0]
   2db04:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2db06:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   2db0a:	c903      	ldmia	r1, {r0, r1}
   2db0c:	1d23      	adds	r3, r4, #4
   2db0e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2db12:	2000      	movs	r0, #0
}
   2db14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2db16:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2db1a:	e7ed      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2db1c:	4b13      	ldr	r3, [pc, #76]	; (2db6c <uarte_nrfx_configure+0x158>)
   2db1e:	e7eb      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2db20:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2db24:	e7e8      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   2db26:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2db2a:	e7e5      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2db2c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2db30:	e7e2      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2db32:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2db36:	e7df      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2db38:	4b0d      	ldr	r3, [pc, #52]	; (2db70 <uarte_nrfx_configure+0x15c>)
   2db3a:	e7dd      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2db3c:	4b0d      	ldr	r3, [pc, #52]	; (2db74 <uarte_nrfx_configure+0x160>)
   2db3e:	e7db      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2db40:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2db44:	e7d8      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2db46:	4b0c      	ldr	r3, [pc, #48]	; (2db78 <uarte_nrfx_configure+0x164>)
   2db48:	e7d6      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2db4a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2db4e:	e7d3      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2db50:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2db54:	e7d0      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2db56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2db5a:	e7cd      	b.n	2daf8 <uarte_nrfx_configure+0xe4>
   2db5c:	0013b000 	.word	0x0013b000
   2db60:	004ea000 	.word	0x004ea000
   2db64:	0003d090 	.word	0x0003d090
   2db68:	000f4240 	.word	0x000f4240
   2db6c:	00275000 	.word	0x00275000
   2db70:	0075c000 	.word	0x0075c000
   2db74:	003af000 	.word	0x003af000
   2db78:	013a9000 	.word	0x013a9000

0002db7c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2db80:	2200      	movs	r2, #0
   2db82:	4680      	mov	r8, r0
   2db84:	2101      	movs	r1, #1
   2db86:	2002      	movs	r0, #2
   2db88:	f7f7 fc5e 	bl	25448 <z_arm_irq_priority_set>
   2db8c:	2002      	movs	r0, #2
   2db8e:	f7f7 fc2b 	bl	253e8 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   2db92:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   2db96:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   2db9a:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2db9c:	2100      	movs	r1, #0
   2db9e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   2dba2:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2dba6:	68f8      	ldr	r0, [r7, #12]
   2dba8:	f00c fde8 	bl	3a77c <pinctrl_apply_state>
	if (err < 0) {
   2dbac:	1e05      	subs	r5, r0, #0
   2dbae:	db15      	blt.n	2dbdc <uarte_0_init+0x60>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   2dbb0:	1d31      	adds	r1, r6, #4
   2dbb2:	4640      	mov	r0, r8
   2dbb4:	f7ff ff2e 	bl	2da14 <uarte_nrfx_configure>
	if (err) {
   2dbb8:	4605      	mov	r5, r0
   2dbba:	b978      	cbnz	r0, 2dbdc <uarte_0_init+0x60>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2dbbc:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2dbbe:	0799      	lsls	r1, r3, #30
   2dbc0:	d523      	bpl.n	2dc0a <uarte_0_init+0x8e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2dbc2:	f106 0018 	add.w	r0, r6, #24
   2dbc6:	f002 fdb9 	bl	3073c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2dbca:	4b24      	ldr	r3, [pc, #144]	; (2dc5c <uarte_0_init+0xe0>)
   2dbcc:	4298      	cmp	r0, r3
   2dbce:	d008      	beq.n	2dbe2 <uarte_0_init+0x66>
		LOG_ERR("Failed to allocate PPI Channel");
   2dbd0:	4823      	ldr	r0, [pc, #140]	; (2dc60 <uarte_0_init+0xe4>)
   2dbd2:	2145      	movs	r1, #69	; 0x45
   2dbd4:	f00a fa06 	bl	37fe4 <z_log_minimal_printk>
		return -EIO;
   2dbd8:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   2dbdc:	4628      	mov	r0, r5
   2dbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2dbe2:	7e33      	ldrb	r3, [r6, #24]
   2dbe4:	00db      	lsls	r3, r3, #3
   2dbe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2dbea:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   2dbee:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   2dbf2:	f504 7190 	add.w	r1, r4, #288	; 0x120
   2dbf6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2dbfa:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2dbfe:	7e32      	ldrb	r2, [r6, #24]
   2dc00:	2301      	movs	r3, #1
   2dc02:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   2dc04:	4a17      	ldr	r2, [pc, #92]	; (2dc64 <uarte_0_init+0xe8>)
   2dc06:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2dc0a:	2308      	movs	r3, #8
   2dc0c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2dc10:	7a3b      	ldrb	r3, [r7, #8]
   2dc12:	b953      	cbnz	r3, 2dc2a <uarte_0_init+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dc14:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2dc18:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2dc1c:	6973      	ldr	r3, [r6, #20]
   2dc1e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2dc22:	2301      	movs	r3, #1
   2dc24:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dc28:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2dc2a:	687b      	ldr	r3, [r7, #4]
   2dc2c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   2dc2e:	bf5c      	itt	pl
   2dc30:	f44f 7380 	movpl.w	r3, #256	; 0x100
   2dc34:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2dc38:	687b      	ldr	r3, [r7, #4]
   2dc3a:	06db      	lsls	r3, r3, #27
   2dc3c:	bf44      	itt	mi
   2dc3e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2dc42:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2dc46:	6933      	ldr	r3, [r6, #16]
   2dc48:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dc4c:	2300      	movs	r3, #0
   2dc4e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dc52:	2301      	movs	r3, #1
   2dc54:	60a3      	str	r3, [r4, #8]
   2dc56:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2dc58:	e7c0      	b.n	2dbdc <uarte_0_init+0x60>
   2dc5a:	bf00      	nop
   2dc5c:	0bad0000 	.word	0x0bad0000
   2dc60:	0003e6bf 	.word	0x0003e6bf
   2dc64:	4001f000 	.word	0x4001f000

0002dc68 <uarte_nrfx_poll_out>:
{
   2dc68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2dc6c:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2dc6e:	6907      	ldr	r7, [r0, #16]
{
   2dc70:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2dc72:	f00d fc0f 	bl	3b494 <k_is_in_isr>
   2dc76:	b9b0      	cbnz	r0, 2dca6 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   2dc78:	4b33      	ldr	r3, [pc, #204]	; (2dd48 <uarte_nrfx_poll_out+0xe0>)
   2dc7a:	781b      	ldrb	r3, [r3, #0]
   2dc7c:	b19b      	cbz	r3, 2dca6 <uarte_nrfx_poll_out+0x3e>
{
   2dc7e:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2dc80:	6860      	ldr	r0, [r4, #4]
   2dc82:	f00c fd32 	bl	3a6ea <is_tx_ready.isra.0>
   2dc86:	bb00      	cbnz	r0, 2dcca <uarte_nrfx_poll_out+0x62>
   2dc88:	2001      	movs	r0, #1
   2dc8a:	f00d f832 	bl	3acf2 <nrfx_busy_wait>
   2dc8e:	3e01      	subs	r6, #1
   2dc90:	d1f6      	bne.n	2dc80 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   2dc92:	2100      	movs	r1, #0
   2dc94:	2021      	movs	r0, #33	; 0x21
   2dc96:	f005 ffa3 	bl	33be0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2dc9a:	e7f0      	b.n	2dc7e <uarte_nrfx_poll_out+0x16>
	__asm__ volatile(
   2dc9c:	f381 8811 	msr	BASEPRI, r1
   2dca0:	f3bf 8f6f 	isb	sy
}
   2dca4:	e7f5      	b.n	2dc92 <uarte_nrfx_poll_out+0x2a>
	__asm__ volatile(
   2dca6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dcaa:	f3ef 8111 	mrs	r1, BASEPRI
   2dcae:	f383 8812 	msr	BASEPRI_MAX, r3
   2dcb2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2dcb6:	6860      	ldr	r0, [r4, #4]
   2dcb8:	460e      	mov	r6, r1
   2dcba:	f00c fd16 	bl	3a6ea <is_tx_ready.isra.0>
   2dcbe:	b990      	cbnz	r0, 2dce6 <uarte_nrfx_poll_out+0x7e>
	__asm__ volatile(
   2dcc0:	f381 8811 	msr	BASEPRI, r1
   2dcc4:	f3bf 8f6f 	isb	sy
}
   2dcc8:	e7ed      	b.n	2dca6 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
   2dcca:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dcce:	f3ef 8111 	mrs	r1, BASEPRI
   2dcd2:	f383 8812 	msr	BASEPRI_MAX, r3
   2dcd6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2dcda:	6860      	ldr	r0, [r4, #4]
   2dcdc:	460e      	mov	r6, r1
   2dcde:	f00c fd04 	bl	3a6ea <is_tx_ready.isra.0>
   2dce2:	2800      	cmp	r0, #0
   2dce4:	d0da      	beq.n	2dc9c <uarte_nrfx_poll_out+0x34>
	*data->char_out = c;
   2dce6:	693b      	ldr	r3, [r7, #16]
   2dce8:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   2dcea:	f8d7 8010 	ldr.w	r8, [r7, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2dcee:	6867      	ldr	r7, [r4, #4]
	(void)pm_device_state_get(dev, &state);
   2dcf0:	f10d 0107 	add.w	r1, sp, #7
   2dcf4:	4620      	mov	r0, r4
	return config->uarte_regs;
   2dcf6:	683d      	ldr	r5, [r7, #0]
	(void)pm_device_state_get(dev, &state);
   2dcf8:	f00a fa4d 	bl	38196 <pm_device_state_get>
	if (state != PM_DEVICE_STATE_ACTIVE) {
   2dcfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2dd00:	b9d3      	cbnz	r3, 2dd38 <uarte_nrfx_poll_out+0xd0>
    p_reg->TXD.MAXCNT = length;
   2dd02:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2dd04:	f8c5 8544 	str.w	r8, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2dd08:	f8c5 2548 	str.w	r2, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dd0c:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   2dd10:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   2dd14:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   2dd18:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2dd1c:	687b      	ldr	r3, [r7, #4]
   2dd1e:	06db      	lsls	r3, r3, #27
   2dd20:	d508      	bpl.n	2dd34 <uarte_nrfx_poll_out+0xcc>
	return config->uarte_regs;
   2dd22:	6863      	ldr	r3, [r4, #4]
   2dd24:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2dd26:	2208      	movs	r2, #8
   2dd28:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2dd2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2dd30:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dd34:	2301      	movs	r3, #1
   2dd36:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   2dd38:	f386 8811 	msr	BASEPRI, r6
   2dd3c:	f3bf 8f6f 	isb	sy
}
   2dd40:	b002      	add	sp, #8
   2dd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dd46:	bf00      	nop
   2dd48:	20005298 	.word	0x20005298

0002dd4c <random_byte_get>:
	__asm__ volatile(
   2dd4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dd50:	f3ef 8211 	mrs	r2, BASEPRI
   2dd54:	f383 8812 	msr	BASEPRI_MAX, r3
   2dd58:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2dd5c:	4b09      	ldr	r3, [pc, #36]	; (2dd84 <random_byte_get+0x38>)
   2dd5e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   2dd62:	b161      	cbz	r1, 2dd7e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2dd64:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2dd66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2dd6a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   2dd6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   2dd72:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   2dd74:	f382 8811 	msr	BASEPRI, r2
   2dd78:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   2dd7c:	4770      	bx	lr
	int retval = -EAGAIN;
   2dd7e:	f06f 000a 	mvn.w	r0, #10
   2dd82:	e7f7      	b.n	2dd74 <random_byte_get+0x28>
   2dd84:	4000d000 	.word	0x4000d000

0002dd88 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   2dd88:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd8a:	4603      	mov	r3, r0
   2dd8c:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   2dd8e:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   2dd90:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   2dd94:	f04f 0540 	mov.w	r5, #64	; 0x40
   2dd98:	f3ef 8211 	mrs	r2, BASEPRI
   2dd9c:	f385 8812 	msr	BASEPRI_MAX, r5
   2dda0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2dda4:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2dda6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   2ddaa:	1be4      	subs	r4, r4, r7
   2ddac:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   2ddb0:	42a0      	cmp	r0, r4
		len = available;
   2ddb2:	bf88      	it	hi
   2ddb4:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2ddb6:	183e      	adds	r6, r7, r0
   2ddb8:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   2ddbc:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   2ddbe:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   2ddc0:	f382 8811 	msr	BASEPRI, r2
   2ddc4:	f3bf 8f6f 	isb	sy
   2ddc8:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   2ddca:	428a      	cmp	r2, r1
   2ddcc:	d117      	bne.n	2ddfe <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2ddce:	4577      	cmp	r7, lr
   2ddd0:	d10d      	bne.n	2ddee <rng_pool_get+0x66>
	__asm__ volatile(
   2ddd2:	f04f 0140 	mov.w	r1, #64	; 0x40
   2ddd6:	f3ef 8211 	mrs	r2, BASEPRI
   2ddda:	f381 8812 	msr	BASEPRI_MAX, r1
   2ddde:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   2dde2:	7819      	ldrb	r1, [r3, #0]
   2dde4:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   2dde6:	f382 8811 	msr	BASEPRI, r2
   2ddea:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   2ddee:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   2ddf0:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   2ddf2:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2ddf4:	bf22      	ittt	cs
   2ddf6:	4b06      	ldrcs	r3, [pc, #24]	; (2de10 <rng_pool_get+0x88>)
   2ddf8:	2201      	movcs	r2, #1
   2ddfa:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   2ddfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   2ddfe:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   2de00:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2de02:	7976      	ldrb	r6, [r6, #5]
   2de04:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   2de08:	ea05 050c 	and.w	r5, r5, ip
   2de0c:	e7dd      	b.n	2ddca <rng_pool_get+0x42>
   2de0e:	bf00      	nop
   2de10:	4000d000 	.word	0x4000d000

0002de14 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   2de14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   2de18:	4d2e      	ldr	r5, [pc, #184]	; (2ded4 <entropy_nrf5_get_entropy_isr+0xc0>)
   2de1a:	6900      	ldr	r0, [r0, #16]
   2de1c:	42a8      	cmp	r0, r5
{
   2de1e:	460e      	mov	r6, r1
   2de20:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   2de22:	d00a      	beq.n	2de3a <entropy_nrf5_get_entropy_isr+0x26>
   2de24:	492c      	ldr	r1, [pc, #176]	; (2ded8 <entropy_nrf5_get_entropy_isr+0xc4>)
   2de26:	482d      	ldr	r0, [pc, #180]	; (2dedc <entropy_nrf5_get_entropy_isr+0xc8>)
   2de28:	f240 1207 	movw	r2, #263	; 0x107
   2de2c:	f00a f8cc 	bl	37fc8 <assert_print>
   2de30:	4829      	ldr	r0, [pc, #164]	; (2ded8 <entropy_nrf5_get_entropy_isr+0xc4>)
   2de32:	f240 1107 	movw	r1, #263	; 0x107
   2de36:	f00a f8c0 	bl	37fba <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2de3a:	43db      	mvns	r3, r3
   2de3c:	f013 0501 	ands.w	r5, r3, #1
   2de40:	d004      	beq.n	2de4c <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2de42:	3030      	adds	r0, #48	; 0x30
   2de44:	f7ff ffa0 	bl	2dd88 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2de48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   2de4c:	b3a2      	cbz	r2, 2deb8 <entropy_nrf5_get_entropy_isr+0xa4>
	__asm__ volatile(
   2de4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2de52:	f3ef 8811 	mrs	r8, BASEPRI
   2de56:	f383 8812 	msr	BASEPRI_MAX, r3
   2de5a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   2de5e:	200d      	movs	r0, #13
   2de60:	f7f7 fae4 	bl	2542c <arch_irq_is_enabled>
   2de64:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2de66:	200d      	movs	r0, #13
   2de68:	f7f7 facc 	bl	25404 <arch_irq_disable>
	__asm__ volatile(
   2de6c:	f388 8811 	msr	BASEPRI, r8
   2de70:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2de74:	f8df a068 	ldr.w	sl, [pc, #104]	; 2dee0 <entropy_nrf5_get_entropy_isr+0xcc>
   2de78:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2dee4 <entropy_nrf5_get_entropy_isr+0xd0>
   2de7c:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   2de80:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   2de84:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2de88:	2301      	movs	r3, #1
   2de8a:	f8ca 3000 	str.w	r3, [sl]
   2de8e:	4625      	mov	r5, r4
   2de90:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2de94:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   2de98:	b183      	cbz	r3, 2debc <entropy_nrf5_get_entropy_isr+0xa8>
			byte = random_byte_get();
   2de9a:	f7ff ff57 	bl	2dd4c <random_byte_get>
			if (byte < 0) {
   2de9e:	1e03      	subs	r3, r0, #0
   2dea0:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   2dea4:	dbf6      	blt.n	2de94 <entropy_nrf5_get_entropy_isr+0x80>
			buf[--len] = byte;
   2dea6:	3d01      	subs	r5, #1
   2dea8:	b2ad      	uxth	r5, r5
   2deaa:	5573      	strb	r3, [r6, r5]
		} while (len);
   2deac:	2d00      	cmp	r5, #0
   2deae:	d1f1      	bne.n	2de94 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   2deb0:	b117      	cbz	r7, 2deb8 <entropy_nrf5_get_entropy_isr+0xa4>
			irq_enable(IRQN);
   2deb2:	200d      	movs	r0, #13
   2deb4:	f7f7 fa98 	bl	253e8 <arch_irq_enable>
	return cnt;
   2deb8:	4620      	mov	r0, r4
   2deba:	e7c5      	b.n	2de48 <entropy_nrf5_get_entropy_isr+0x34>
	__asm__ volatile(
   2debc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2dec0:	f3ef 8011 	mrs	r0, BASEPRI
   2dec4:	f383 8812 	msr	BASEPRI_MAX, r3
   2dec8:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   2decc:	f7f7 fa52 	bl	25374 <arch_cpu_atomic_idle>
}
   2ded0:	e7e0      	b.n	2de94 <entropy_nrf5_get_entropy_isr+0x80>
   2ded2:	bf00      	nop
   2ded4:	20003f44 	.word	0x20003f44
   2ded8:	0003e701 	.word	0x0003e701
   2dedc:	0003c7f8 	.word	0x0003c7f8
   2dee0:	4000d000 	.word	0x4000d000
   2dee4:	e000e100 	.word	0xe000e100

0002dee8 <entropy_nrf5_get_entropy>:
{
   2dee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   2deec:	4b18      	ldr	r3, [pc, #96]	; (2df50 <entropy_nrf5_get_entropy+0x68>)
   2deee:	6907      	ldr	r7, [r0, #16]
   2def0:	429f      	cmp	r7, r3
{
   2def2:	460d      	mov	r5, r1
   2def4:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   2def6:	d105      	bne.n	2df04 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2def8:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   2defc:	b95c      	cbnz	r4, 2df16 <entropy_nrf5_get_entropy+0x2e>
}
   2defe:	4620      	mov	r0, r4
   2df00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   2df04:	4913      	ldr	r1, [pc, #76]	; (2df54 <entropy_nrf5_get_entropy+0x6c>)
   2df06:	4814      	ldr	r0, [pc, #80]	; (2df58 <entropy_nrf5_get_entropy+0x70>)
   2df08:	22e9      	movs	r2, #233	; 0xe9
   2df0a:	f00a f85d 	bl	37fc8 <assert_print>
   2df0e:	4811      	ldr	r0, [pc, #68]	; (2df54 <entropy_nrf5_get_entropy+0x6c>)
   2df10:	21e9      	movs	r1, #233	; 0xe9
   2df12:	f00a f852 	bl	37fba <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   2df16:	f04f 33ff 	mov.w	r3, #4294967295
   2df1a:	f04f 32ff 	mov.w	r2, #4294967295
   2df1e:	4638      	mov	r0, r7
   2df20:	f004 fa66 	bl	323f0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2df24:	4622      	mov	r2, r4
   2df26:	4629      	mov	r1, r5
   2df28:	4640      	mov	r0, r8
   2df2a:	f7ff ff2d 	bl	2dd88 <rng_pool_get>
   2df2e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   2df30:	4638      	mov	r0, r7
   2df32:	f004 fa21 	bl	32378 <z_impl_k_sem_give>
		if (bytes == 0U) {
   2df36:	b93e      	cbnz	r6, 2df48 <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   2df38:	f04f 32ff 	mov.w	r2, #4294967295
   2df3c:	f04f 33ff 	mov.w	r3, #4294967295
   2df40:	4806      	ldr	r0, [pc, #24]	; (2df5c <entropy_nrf5_get_entropy+0x74>)
   2df42:	f004 fa55 	bl	323f0 <z_impl_k_sem_take>
	while (len) {
   2df46:	e7e6      	b.n	2df16 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   2df48:	1ba4      	subs	r4, r4, r6
   2df4a:	b2a4      	uxth	r4, r4
		buf += bytes;
   2df4c:	4435      	add	r5, r6
   2df4e:	e7d5      	b.n	2defc <entropy_nrf5_get_entropy+0x14>
   2df50:	20003f44 	.word	0x20003f44
   2df54:	0003e701 	.word	0x0003e701
   2df58:	0003c7f8 	.word	0x0003c7f8
   2df5c:	20003f5c 	.word	0x20003f5c

0002df60 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   2df60:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   2df62:	4b20      	ldr	r3, [pc, #128]	; (2dfe4 <entropy_nrf5_init+0x84>)
   2df64:	6904      	ldr	r4, [r0, #16]
   2df66:	429c      	cmp	r4, r3
   2df68:	d00a      	beq.n	2df80 <entropy_nrf5_init+0x20>
   2df6a:	491f      	ldr	r1, [pc, #124]	; (2dfe8 <entropy_nrf5_init+0x88>)
   2df6c:	481f      	ldr	r0, [pc, #124]	; (2dfec <entropy_nrf5_init+0x8c>)
   2df6e:	f240 124b 	movw	r2, #331	; 0x14b
   2df72:	f00a f829 	bl	37fc8 <assert_print>
   2df76:	481c      	ldr	r0, [pc, #112]	; (2dfe8 <entropy_nrf5_init+0x88>)
   2df78:	f240 114b 	movw	r1, #331	; 0x14b
   2df7c:	f00a f81d 	bl	37fba <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2df80:	2201      	movs	r2, #1
   2df82:	4611      	mov	r1, r2
   2df84:	4620      	mov	r0, r4
   2df86:	f00d fad6 	bl	3b536 <z_impl_k_sem_init>
   2df8a:	2201      	movs	r2, #1
   2df8c:	2100      	movs	r1, #0
   2df8e:	f104 0018 	add.w	r0, r4, #24
   2df92:	f00d fad0 	bl	3b536 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2df96:	f240 4307 	movw	r3, #1031	; 0x407
   2df9a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   2df9e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2dfa2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   2dfa4:	230c      	movs	r3, #12
   2dfa6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   2dfaa:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   2dfac:	4b10      	ldr	r3, [pc, #64]	; (2dff0 <entropy_nrf5_init+0x90>)
   2dfae:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   2dfb2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   2dfb6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2dfba:	f022 0201 	bic.w	r2, r2, #1
   2dfbe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   2dfc2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2dfc4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   2dfc8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2dfcc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   2dfd0:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2dfd2:	6019      	str	r1, [r3, #0]
   2dfd4:	200d      	movs	r0, #13
   2dfd6:	f7f7 fa37 	bl	25448 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2dfda:	200d      	movs	r0, #13
   2dfdc:	f7f7 fa04 	bl	253e8 <arch_irq_enable>

	return 0;
}
   2dfe0:	4628      	mov	r0, r5
   2dfe2:	bd38      	pop	{r3, r4, r5, pc}
   2dfe4:	20003f44 	.word	0x20003f44
   2dfe8:	0003e701 	.word	0x0003e701
   2dfec:	0003c7f8 	.word	0x0003c7f8
   2dff0:	4000d000 	.word	0x4000d000

0002dff4 <isr>:
{
   2dff4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2dff6:	f7ff fea9 	bl	2dd4c <random_byte_get>
	if (byte < 0) {
   2dffa:	2800      	cmp	r0, #0
   2dffc:	db20      	blt.n	2e040 <isr+0x4c>
	uint8_t last  = rngp->last;
   2dffe:	4b17      	ldr	r3, [pc, #92]	; (2e05c <isr+0x68>)
   2e000:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   2e004:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   2e008:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   2e00c:	1b14      	subs	r4, r2, r4
   2e00e:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2e012:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   2e014:	d10d      	bne.n	2e032 <isr+0x3e>
	uint8_t last  = rngp->last;
   2e016:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2e01a:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   2e01e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   2e022:	1b14      	subs	r4, r2, r4
   2e024:	ea31 0404 	bics.w	r4, r1, r4
   2e028:	d10b      	bne.n	2e042 <isr+0x4e>
   2e02a:	4b0d      	ldr	r3, [pc, #52]	; (2e060 <isr+0x6c>)
   2e02c:	2201      	movs	r2, #1
   2e02e:	605a      	str	r2, [r3, #4]
}
   2e030:	e00e      	b.n	2e050 <isr+0x5c>
	rngp->buffer[last] = byte;
   2e032:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   2e034:	3201      	adds	r2, #1
   2e036:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   2e038:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   2e03c:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   2e040:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   2e042:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   2e044:	3201      	adds	r2, #1
   2e046:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   2e048:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   2e04c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   2e050:	4804      	ldr	r0, [pc, #16]	; (2e064 <isr+0x70>)
}
   2e052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e056:	f004 b98f 	b.w	32378 <z_impl_k_sem_give>
   2e05a:	bf00      	nop
   2e05c:	20003f44 	.word	0x20003f44
   2e060:	4000d000 	.word	0x4000d000
   2e064:	20003f5c 	.word	0x20003f5c

0002e068 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2e068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e06a:	460f      	mov	r7, r1
   2e06c:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   2e06e:	b940      	cbnz	r0, 2e082 <entropy_cc3xx_rng_get_entropy+0x1a>
   2e070:	4917      	ldr	r1, [pc, #92]	; (2e0d0 <entropy_cc3xx_rng_get_entropy+0x68>)
   2e072:	4818      	ldr	r0, [pc, #96]	; (2e0d4 <entropy_cc3xx_rng_get_entropy+0x6c>)
   2e074:	2218      	movs	r2, #24
   2e076:	f009 ffa7 	bl	37fc8 <assert_print>
   2e07a:	2118      	movs	r1, #24
	__ASSERT_NO_MSG(buffer != NULL);
   2e07c:	4814      	ldr	r0, [pc, #80]	; (2e0d0 <entropy_cc3xx_rng_get_entropy+0x68>)
   2e07e:	f009 ff9c 	bl	37fba <assert_post_action>
   2e082:	b9e1      	cbnz	r1, 2e0be <entropy_cc3xx_rng_get_entropy+0x56>
   2e084:	4912      	ldr	r1, [pc, #72]	; (2e0d0 <entropy_cc3xx_rng_get_entropy+0x68>)
   2e086:	4813      	ldr	r0, [pc, #76]	; (2e0d4 <entropy_cc3xx_rng_get_entropy+0x6c>)
   2e088:	2219      	movs	r2, #25
   2e08a:	f009 ff9d 	bl	37fc8 <assert_print>
   2e08e:	2119      	movs	r1, #25
   2e090:	e7f4      	b.n	2e07c <entropy_cc3xx_rng_get_entropy+0x14>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2e092:	1b33      	subs	r3, r6, r4
   2e094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2e098:	bf38      	it	cc
   2e09a:	461d      	movcc	r5, r3
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   2e09c:	462a      	mov	r2, r5
   2e09e:	ab01      	add	r3, sp, #4
   2e0a0:	1939      	adds	r1, r7, r4
   2e0a2:	2000      	movs	r0, #0
   2e0a4:	f007 f8ec 	bl	35280 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   2e0a8:	b968      	cbnz	r0, 2e0c6 <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		if (olen != chunk_size) {
   2e0aa:	9b01      	ldr	r3, [sp, #4]
   2e0ac:	429d      	cmp	r5, r3
   2e0ae:	d10a      	bne.n	2e0c6 <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		offset += chunk_size;
   2e0b0:	442c      	add	r4, r5
	while (offset < length) {
   2e0b2:	42a6      	cmp	r6, r4
   2e0b4:	d8ed      	bhi.n	2e092 <entropy_cc3xx_rng_get_entropy+0x2a>
	}

	if (offset == length) {
   2e0b6:	d009      	beq.n	2e0cc <entropy_cc3xx_rng_get_entropy+0x64>
	int err = EINVAL;
   2e0b8:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   2e0ba:	b003      	add	sp, #12
   2e0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2e0be:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2e0c2:	2400      	movs	r4, #0
   2e0c4:	e7f5      	b.n	2e0b2 <entropy_cc3xx_rng_get_entropy+0x4a>
			return -EINVAL;
   2e0c6:	f06f 0015 	mvn.w	r0, #21
   2e0ca:	e7f6      	b.n	2e0ba <entropy_cc3xx_rng_get_entropy+0x52>
		err = 0;
   2e0cc:	2000      	movs	r0, #0
   2e0ce:	e7f4      	b.n	2e0ba <entropy_cc3xx_rng_get_entropy+0x52>
   2e0d0:	0003e752 	.word	0x0003e752
   2e0d4:	0003c7f8 	.word	0x0003c7f8

0002e0d8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   2e0d8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   2e0da:	490e      	ldr	r1, [pc, #56]	; (2e114 <sys_clock_timeout_handler+0x3c>)
   2e0dc:	e9d1 3400 	ldrd	r3, r4, [r1]
   2e0e0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   2e0e2:	18c3      	adds	r3, r0, r3
   2e0e4:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   2e0e8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   2e0ec:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2e0f0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2e0f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2e0f8:	d209      	bcs.n	2e10e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2e0fa:	4b07      	ldr	r3, [pc, #28]	; (2e118 <sys_clock_timeout_handler+0x40>)
   2e0fc:	681b      	ldr	r3, [r3, #0]
   2e0fe:	0a1a      	lsrs	r2, r3, #8
   2e100:	061b      	lsls	r3, r3, #24
   2e102:	199c      	adds	r4, r3, r6
   2e104:	4b05      	ldr	r3, [pc, #20]	; (2e11c <sys_clock_timeout_handler+0x44>)
   2e106:	f142 0500 	adc.w	r5, r2, #0
   2e10a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   2e10e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   2e110:	f006 b85c 	b.w	341cc <sys_clock_announce>
   2e114:	20002218 	.word	0x20002218
   2e118:	20003fa0 	.word	0x20003fa0
   2e11c:	20002220 	.word	0x20002220

0002e120 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2e120:	4b0d      	ldr	r3, [pc, #52]	; (2e158 <z_nrf_rtc_timer_read+0x38>)
   2e122:	6818      	ldr	r0, [r3, #0]
   2e124:	0a01      	lsrs	r1, r0, #8
   2e126:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2e128:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   2e12c:	4b0b      	ldr	r3, [pc, #44]	; (2e15c <z_nrf_rtc_timer_read+0x3c>)
   2e12e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2e132:	1818      	adds	r0, r3, r0
   2e134:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2e138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2e13c:	d20a      	bcs.n	2e154 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2e13e:	4b08      	ldr	r3, [pc, #32]	; (2e160 <z_nrf_rtc_timer_read+0x40>)
   2e140:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e144:	4290      	cmp	r0, r2
   2e146:	eb71 0303 	sbcs.w	r3, r1, r3
   2e14a:	d203      	bcs.n	2e154 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2e14c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2e150:	f141 0100 	adc.w	r1, r1, #0
}
   2e154:	4770      	bx	lr
   2e156:	bf00      	nop
   2e158:	20003fa0 	.word	0x20003fa0
   2e15c:	40011000 	.word	0x40011000
   2e160:	20002220 	.word	0x20002220

0002e164 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   2e164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   2e168:	4c2b      	ldr	r4, [pc, #172]	; (2e218 <rtc_nrf_isr+0xb4>)
   2e16a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2e16e:	0799      	lsls	r1, r3, #30
   2e170:	d50b      	bpl.n	2e18a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e172:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2e176:	b143      	cbz	r3, 2e18a <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   2e178:	4a28      	ldr	r2, [pc, #160]	; (2e21c <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e17a:	2300      	movs	r3, #0
   2e17c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2e180:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2e184:	6813      	ldr	r3, [r2, #0]
   2e186:	3301      	adds	r3, #1
   2e188:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2e18a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2e18e:	03da      	lsls	r2, r3, #15
   2e190:	d523      	bpl.n	2e1da <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e192:	f3bf 8f5b 	dmb	ish
   2e196:	4b22      	ldr	r3, [pc, #136]	; (2e220 <rtc_nrf_isr+0xbc>)
   2e198:	e853 2f00 	ldrex	r2, [r3]
   2e19c:	f022 0101 	bic.w	r1, r2, #1
   2e1a0:	e843 1000 	strex	r0, r1, [r3]
   2e1a4:	2800      	cmp	r0, #0
   2e1a6:	d1f7      	bne.n	2e198 <rtc_nrf_isr+0x34>
   2e1a8:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2e1ac:	07d3      	lsls	r3, r2, #31
   2e1ae:	d402      	bmi.n	2e1b6 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e1b0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2e1b4:	b18b      	cbz	r3, 2e1da <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e1b6:	2500      	movs	r5, #0
   2e1b8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2e1bc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   2e1c0:	f7ff ffae 	bl	2e120 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2e1c4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e1c8:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   2e1ca:	4b16      	ldr	r3, [pc, #88]	; (2e224 <rtc_nrf_isr+0xc0>)
   2e1cc:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   2e1d0:	42b0      	cmp	r0, r6
   2e1d2:	41b9      	sbcs	r1, r7
   2e1d4:	d204      	bcs.n	2e1e0 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2e1d6:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   2e1da:	b003      	add	sp, #12
   2e1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2e1e0:	f04f 38ff 	mov.w	r8, #4294967295
   2e1e4:	f04f 39ff 	mov.w	r9, #4294967295
   2e1e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   2e1ec:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   2e1f0:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2e1f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2e1f6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e1fa:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2e1fe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2e202:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   2e206:	2900      	cmp	r1, #0
   2e208:	d0e7      	beq.n	2e1da <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   2e20a:	9000      	str	r0, [sp, #0]
   2e20c:	4632      	mov	r2, r6
   2e20e:	463b      	mov	r3, r7
   2e210:	4628      	mov	r0, r5
   2e212:	4788      	blx	r1
   2e214:	e7e1      	b.n	2e1da <rtc_nrf_isr+0x76>
   2e216:	bf00      	nop
   2e218:	40011000 	.word	0x40011000
   2e21c:	20003fa0 	.word	0x20003fa0
   2e220:	20003f98 	.word	0x20003f98
   2e224:	20002208 	.word	0x20002208

0002e228 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   2e228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e22c:	4d4b      	ldr	r5, [pc, #300]	; (2e35c <compare_set.constprop.0.isra.0+0x134>)
   2e22e:	f3bf 8f5b 	dmb	ish
   2e232:	4606      	mov	r6, r0
   2e234:	460f      	mov	r7, r1
   2e236:	e855 8f00 	ldrex	r8, [r5]
   2e23a:	f028 0301 	bic.w	r3, r8, #1
   2e23e:	e845 3200 	strex	r2, r3, [r5]
   2e242:	2a00      	cmp	r2, #0
   2e244:	d1f7      	bne.n	2e236 <compare_set.constprop.0.isra.0+0xe>
   2e246:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   2e24a:	4c45      	ldr	r4, [pc, #276]	; (2e360 <compare_set.constprop.0.isra.0+0x138>)
   2e24c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   2e250:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   2e254:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2e258:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2e25c:	f7ff ff60 	bl	2e120 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2e260:	42b0      	cmp	r0, r6
   2e262:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
   2e266:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   2e26a:	d240      	bcs.n	2e2ee <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   2e26c:	4b3d      	ldr	r3, [pc, #244]	; (2e364 <compare_set.constprop.0.isra.0+0x13c>)
   2e26e:	1a30      	subs	r0, r6, r0
   2e270:	eb67 0101 	sbc.w	r1, r7, r1
   2e274:	4298      	cmp	r0, r3
   2e276:	f171 0100 	sbcs.w	r1, r1, #0
   2e27a:	d24c      	bcs.n	2e316 <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
   2e27c:	4b3a      	ldr	r3, [pc, #232]	; (2e368 <compare_set.constprop.0.isra.0+0x140>)
   2e27e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2e282:	429f      	cmp	r7, r3
   2e284:	bf08      	it	eq
   2e286:	4296      	cmpeq	r6, r2
   2e288:	d03e      	beq.n	2e308 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e28a:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
   2e28e:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e292:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
   2e296:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   2e29a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2e29e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 2e36c <compare_set.constprop.0.isra.0+0x144>
	uint32_t cc_val = req_cc;
   2e2a2:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   2e2a4:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   2e2a6:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2e2aa:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   2e2ae:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   2e2b2:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
   2e2b6:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2e2ba:	ebae 0302 	sub.w	r3, lr, r2
   2e2be:	445b      	add	r3, fp
   2e2c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2e2c4:	4553      	cmp	r3, sl
   2e2c6:	d91f      	bls.n	2e308 <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e2c8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
   2e2cc:	b15b      	cbz	r3, 2e2e6 <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
   2e2ce:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2e2d2:	1a13      	subs	r3, r2, r0
   2e2d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   2e2d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2e2dc:	d914      	bls.n	2e308 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2e2de:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
   2e2e2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
   2e2e6:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   2e2ea:	3101      	adds	r1, #1
	for (;;) {
   2e2ec:	e7dd      	b.n	2e2aa <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e2ee:	4b20      	ldr	r3, [pc, #128]	; (2e370 <compare_set.constprop.0.isra.0+0x148>)
   2e2f0:	f3bf 8f5b 	dmb	ish
   2e2f4:	e853 1f00 	ldrex	r1, [r3]
   2e2f8:	f041 0101 	orr.w	r1, r1, #1
   2e2fc:	e843 1200 	strex	r2, r1, [r3]
   2e300:	2a00      	cmp	r2, #0
   2e302:	d1f7      	bne.n	2e2f4 <compare_set.constprop.0.isra.0+0xcc>
   2e304:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   2e308:	4b17      	ldr	r3, [pc, #92]	; (2e368 <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
   2e30a:	4a1a      	ldr	r2, [pc, #104]	; (2e374 <compare_set.constprop.0.isra.0+0x14c>)
   2e30c:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   2e30e:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
   2e312:	2200      	movs	r2, #0
   2e314:	605a      	str	r2, [r3, #4]
	if (key) {
   2e316:	f1b8 0f00 	cmp.w	r8, #0
   2e31a:	d01c      	beq.n	2e356 <compare_set.constprop.0.isra.0+0x12e>
   2e31c:	f3bf 8f5b 	dmb	ish
   2e320:	e855 3f00 	ldrex	r3, [r5]
   2e324:	f043 0301 	orr.w	r3, r3, #1
   2e328:	e845 3200 	strex	r2, r3, [r5]
   2e32c:	2a00      	cmp	r2, #0
   2e32e:	d1f7      	bne.n	2e320 <compare_set.constprop.0.isra.0+0xf8>
   2e330:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   2e334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2e338:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e33c:	4b0c      	ldr	r3, [pc, #48]	; (2e370 <compare_set.constprop.0.isra.0+0x148>)
   2e33e:	f3bf 8f5b 	dmb	ish
   2e342:	681b      	ldr	r3, [r3, #0]
   2e344:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2e348:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e34a:	bf42      	ittt	mi
   2e34c:	4b0a      	ldrmi	r3, [pc, #40]	; (2e378 <compare_set.constprop.0.isra.0+0x150>)
   2e34e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   2e352:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   2e356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e35a:	bf00      	nop
   2e35c:	20003f9c 	.word	0x20003f9c
   2e360:	40011000 	.word	0x40011000
   2e364:	00800001 	.word	0x00800001
   2e368:	20002208 	.word	0x20002208
   2e36c:	007ffffd 	.word	0x007ffffd
   2e370:	20003f98 	.word	0x20003f98
   2e374:	0002e0d9 	.word	0x0002e0d9
   2e378:	e000e100 	.word	0xe000e100

0002e37c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   2e37c:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2e37e:	4b16      	ldr	r3, [pc, #88]	; (2e3d8 <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   2e380:	4c16      	ldr	r4, [pc, #88]	; (2e3dc <sys_clock_driver_init+0x60>)
   2e382:	2500      	movs	r5, #0
   2e384:	f04f 30ff 	mov.w	r0, #4294967295
   2e388:	f04f 31ff 	mov.w	r1, #4294967295
   2e38c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   2e390:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2e394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2e398:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e39c:	4b10      	ldr	r3, [pc, #64]	; (2e3e0 <sys_clock_driver_init+0x64>)
   2e39e:	2602      	movs	r6, #2
   2e3a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2e3a4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2e3a8:	2101      	movs	r1, #1
   2e3aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2e3ae:	2011      	movs	r0, #17
   2e3b0:	462a      	mov	r2, r5
   2e3b2:	f7f7 f849 	bl	25448 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2e3b6:	2011      	movs	r0, #17
   2e3b8:	f7f7 f816 	bl	253e8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2e3bc:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2e3be:	4a09      	ldr	r2, [pc, #36]	; (2e3e4 <sys_clock_driver_init+0x68>)
   2e3c0:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2e3c2:	2100      	movs	r1, #0
   2e3c4:	6023      	str	r3, [r4, #0]
   2e3c6:	4808      	ldr	r0, [pc, #32]	; (2e3e8 <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   2e3c8:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2e3ca:	f7ff ff2d 	bl	2e228 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   2e3ce:	4630      	mov	r0, r6
   2e3d0:	f7fe fbae 	bl	2cb30 <z_nrf_clock_control_lf_on>

	return 0;
}
   2e3d4:	4628      	mov	r0, r5
   2e3d6:	bd70      	pop	{r4, r5, r6, pc}
   2e3d8:	20002208 	.word	0x20002208
   2e3dc:	40011000 	.word	0x40011000
   2e3e0:	e000e100 	.word	0xe000e100
   2e3e4:	20003f9c 	.word	0x20003f9c
   2e3e8:	007fffff 	.word	0x007fffff

0002e3ec <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   2e3ec:	1c43      	adds	r3, r0, #1
{
   2e3ee:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   2e3f0:	d01d      	beq.n	2e42e <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2e3f2:	2801      	cmp	r0, #1
   2e3f4:	dd1d      	ble.n	2e432 <sys_clock_set_timeout+0x46>
   2e3f6:	4a10      	ldr	r2, [pc, #64]	; (2e438 <sys_clock_set_timeout+0x4c>)
   2e3f8:	4b10      	ldr	r3, [pc, #64]	; (2e43c <sys_clock_set_timeout+0x50>)
   2e3fa:	4290      	cmp	r0, r2
   2e3fc:	bfd4      	ite	le
   2e3fe:	4604      	movle	r4, r0
   2e400:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2e402:	f7ff fe8d 	bl	2e120 <z_nrf_rtc_timer_read>
   2e406:	4a0e      	ldr	r2, [pc, #56]	; (2e440 <sys_clock_set_timeout+0x54>)
   2e408:	e9d2 3100 	ldrd	r3, r1, [r2]
   2e40c:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   2e40e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   2e412:	4a0a      	ldr	r2, [pc, #40]	; (2e43c <sys_clock_set_timeout+0x50>)
		cyc = 0;
   2e414:	bf28      	it	cs
   2e416:	2400      	movcs	r4, #0
	cyc += unannounced;
   2e418:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   2e41a:	4294      	cmp	r4, r2
   2e41c:	bf28      	it	cs
   2e41e:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   2e420:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2e422:	f141 0100 	adc.w	r1, r1, #0
}
   2e426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2e42a:	f7ff befd 	b.w	2e228 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   2e42e:	4c03      	ldr	r4, [pc, #12]	; (2e43c <sys_clock_set_timeout+0x50>)
   2e430:	e7e7      	b.n	2e402 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2e432:	2401      	movs	r4, #1
   2e434:	e7e5      	b.n	2e402 <sys_clock_set_timeout+0x16>
   2e436:	bf00      	nop
   2e438:	007ffffe 	.word	0x007ffffe
   2e43c:	007fffff 	.word	0x007fffff
   2e440:	20002218 	.word	0x20002218

0002e444 <sys_clock_elapsed>:
{
   2e444:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2e446:	f7ff fe6b 	bl	2e120 <z_nrf_rtc_timer_read>
   2e44a:	4b02      	ldr	r3, [pc, #8]	; (2e454 <sys_clock_elapsed+0x10>)
   2e44c:	681b      	ldr	r3, [r3, #0]
}
   2e44e:	1ac0      	subs	r0, r0, r3
   2e450:	bd08      	pop	{r3, pc}
   2e452:	bf00      	nop
   2e454:	20002218 	.word	0x20002218

0002e458 <nrf_gpio_pin_port_decode>:
{
   2e458:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e45a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   2e45c:	095a      	lsrs	r2, r3, #5
   2e45e:	d00c      	beq.n	2e47a <nrf_gpio_pin_port_decode+0x22>
   2e460:	2a01      	cmp	r2, #1
   2e462:	d013      	beq.n	2e48c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e464:	490e      	ldr	r1, [pc, #56]	; (2e4a0 <nrf_gpio_pin_port_decode+0x48>)
   2e466:	480f      	ldr	r0, [pc, #60]	; (2e4a4 <nrf_gpio_pin_port_decode+0x4c>)
   2e468:	f240 2247 	movw	r2, #583	; 0x247
   2e46c:	f009 fdac 	bl	37fc8 <assert_print>
   2e470:	480b      	ldr	r0, [pc, #44]	; (2e4a0 <nrf_gpio_pin_port_decode+0x48>)
   2e472:	f240 2147 	movw	r1, #583	; 0x247
   2e476:	f009 fda0 	bl	37fba <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   2e47a:	f04f 32ff 	mov.w	r2, #4294967295
   2e47e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e482:	07d9      	lsls	r1, r3, #31
   2e484:	d5ee      	bpl.n	2e464 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   2e486:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   2e48a:	e008      	b.n	2e49e <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   2e48c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2e490:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e494:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e496:	07d2      	lsls	r2, r2, #31
   2e498:	d5e4      	bpl.n	2e464 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   2e49a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   2e49c:	4802      	ldr	r0, [pc, #8]	; (2e4a8 <nrf_gpio_pin_port_decode+0x50>)
}
   2e49e:	bd08      	pop	{r3, pc}
   2e4a0:	0003c7c5 	.word	0x0003c7c5
   2e4a4:	0003c7f8 	.word	0x0003c7f8
   2e4a8:	50000300 	.word	0x50000300

0002e4ac <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   2e4ac:	4602      	mov	r2, r0
   2e4ae:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2e4b0:	4801      	ldr	r0, [pc, #4]	; (2e4b8 <multithreading_lock_acquire+0xc>)
   2e4b2:	f003 bd57 	b.w	31f64 <z_impl_k_mutex_lock>
   2e4b6:	bf00      	nop
   2e4b8:	20000adc 	.word	0x20000adc

0002e4bc <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   2e4bc:	4801      	ldr	r0, [pc, #4]	; (2e4c4 <multithreading_lock_release+0x8>)
   2e4be:	f003 be07 	b.w	320d0 <z_impl_k_mutex_unlock>
   2e4c2:	bf00      	nop
   2e4c4:	20000adc 	.word	0x20000adc

0002e4c8 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2e4c8:	4803      	ldr	r0, [pc, #12]	; (2e4d8 <k_sys_fatal_error_handler+0x10>)
{
   2e4ca:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   2e4cc:	2145      	movs	r1, #69	; 0x45
   2e4ce:	f009 fd89 	bl	37fe4 <z_log_minimal_printk>
		sys_arch_reboot(0);
   2e4d2:	2000      	movs	r0, #0
   2e4d4:	f7f7 fce4 	bl	25ea0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2e4d8:	0003e792 	.word	0x0003e792

0002e4dc <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   2e4dc:	b508      	push	{r3, lr}
   2e4de:	4602      	mov	r2, r0
   2e4e0:	460b      	mov	r3, r1
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   2e4e2:	4805      	ldr	r0, [pc, #20]	; (2e4f8 <sdc_assertion_handler+0x1c>)
   2e4e4:	2145      	movs	r1, #69	; 0x45
   2e4e6:	f009 fd7d 	bl	37fe4 <z_log_minimal_printk>
	k_oops();
   2e4ea:	4040      	eors	r0, r0
   2e4ec:	f380 8811 	msr	BASEPRI, r0
   2e4f0:	f04f 0003 	mov.w	r0, #3
   2e4f4:	df02      	svc	2
}
   2e4f6:	bd08      	pop	{r3, pc}
   2e4f8:	0003e7b4 	.word	0x0003e7b4

0002e4fc <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   2e4fc:	b510      	push	{r4, lr}
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   2e4fe:	491c      	ldr	r1, [pc, #112]	; (2e570 <hci_driver_open+0x74>)
   2e500:	481c      	ldr	r0, [pc, #112]	; (2e574 <hci_driver_open+0x78>)
{
   2e502:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   2e504:	f004 f9cc 	bl	328a0 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   2e508:	f000 fefa 	bl	2f300 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   2e50c:	a803      	add	r0, sp, #12
   2e50e:	f7de fba5 	bl	cc5c <sdc_build_revision_get>
   2e512:	4819      	ldr	r0, [pc, #100]	; (2e578 <hci_driver_open+0x7c>)
   2e514:	f00c ff82 	bl	3b41c <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   2e518:	b940      	cbnz	r0, 2e52c <hci_driver_open+0x30>
		LOG_ERR("Entropy source device not ready");
   2e51a:	4818      	ldr	r0, [pc, #96]	; (2e57c <hci_driver_open+0x80>)
   2e51c:	2145      	movs	r1, #69	; 0x45
   2e51e:	f009 fd61 	bl	37fe4 <z_log_minimal_printk>
		return -ENODEV;
   2e522:	f06f 0412 	mvn.w	r4, #18
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   2e526:	4620      	mov	r0, r4
   2e528:	b008      	add	sp, #32
   2e52a:	bd10      	pop	{r4, pc}
	sdc_rand_source_t rand_functions = {
   2e52c:	4a14      	ldr	r2, [pc, #80]	; (2e580 <hci_driver_open+0x84>)
   2e52e:	ca07      	ldmia	r2, {r0, r1, r2}
   2e530:	466b      	mov	r3, sp
   2e532:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   2e536:	4618      	mov	r0, r3
   2e538:	f7de fd80 	bl	d03c <sdc_rand_source_register>
	if (err) {
   2e53c:	4602      	mov	r2, r0
   2e53e:	b130      	cbz	r0, 2e54e <hci_driver_open+0x52>
		LOG_ERR("Failed to register rand source (%d)", err);
   2e540:	4810      	ldr	r0, [pc, #64]	; (2e584 <hci_driver_open+0x88>)
   2e542:	2145      	movs	r1, #69	; 0x45
   2e544:	f009 fd4e 	bl	37fe4 <z_log_minimal_printk>
		return -EINVAL;
   2e548:	f06f 0415 	mvn.w	r4, #21
   2e54c:	e7eb      	b.n	2e526 <hci_driver_open+0x2a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2e54e:	f04f 30ff 	mov.w	r0, #4294967295
   2e552:	f04f 31ff 	mov.w	r1, #4294967295
   2e556:	f7ff ffa9 	bl	2e4ac <multithreading_lock_acquire>
	if (err) {
   2e55a:	4604      	mov	r4, r0
   2e55c:	2800      	cmp	r0, #0
   2e55e:	d1e2      	bne.n	2e526 <hci_driver_open+0x2a>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   2e560:	4909      	ldr	r1, [pc, #36]	; (2e588 <hci_driver_open+0x8c>)
   2e562:	480a      	ldr	r0, [pc, #40]	; (2e58c <hci_driver_open+0x90>)
   2e564:	f7de fc1c 	bl	cda0 <sdc_enable>
	if (err) {
   2e568:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2e56a:	f7ff ffa7 	bl	2e4bc <multithreading_lock_release>
	return 0;
   2e56e:	e7da      	b.n	2e526 <hci_driver_open+0x2a>
   2e570:	0003aadd 	.word	0x0003aadd
   2e574:	20003fa4 	.word	0x20003fa4
   2e578:	0003b970 	.word	0x0003b970
   2e57c:	0003e7de 	.word	0x0003e7de
   2e580:	0003bdd0 	.word	0x0003bdd0
   2e584:	0003e803 	.word	0x0003e803
   2e588:	20002228 	.word	0x20002228
   2e58c:	0002e715 	.word	0x0002e715

0002e590 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   2e590:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   2e592:	4839      	ldr	r0, [pc, #228]	; (2e678 <hci_driver_init+0xe8>)
   2e594:	f7f8 fcee 	bl	26f74 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   2e598:	4838      	ldr	r0, [pc, #224]	; (2e67c <hci_driver_init+0xec>)
   2e59a:	f7de fc2b 	bl	cdf4 <sdc_init>
		err = sdc_support_ext_adv();
   2e59e:	f7de fcb7 	bl	cf10 <sdc_support_ext_adv>
		if (err) {
   2e5a2:	b118      	cbz	r0, 2e5ac <hci_driver_init+0x1c>
			return -ENOTSUP;
   2e5a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   2e5a8:	b002      	add	sp, #8
   2e5aa:	bd10      	pop	{r4, pc}
		err = sdc_support_peripheral();
   2e5ac:	f7de fce0 	bl	cf70 <sdc_support_peripheral>
		if (err) {
   2e5b0:	2800      	cmp	r0, #0
   2e5b2:	d1f7      	bne.n	2e5a4 <hci_driver_init+0x14>
			err = sdc_support_dle_peripheral();
   2e5b4:	f7de fc9c 	bl	cef0 <sdc_support_dle_peripheral>
			if (err) {
   2e5b8:	2800      	cmp	r0, #0
   2e5ba:	d1f3      	bne.n	2e5a4 <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   2e5bc:	f7de fcb8 	bl	cf30 <sdc_support_le_2m_phy>
		if (err) {
   2e5c0:	2800      	cmp	r0, #0
   2e5c2:	d1ef      	bne.n	2e5a4 <hci_driver_init+0x14>
			err = sdc_support_phy_update_peripheral();
   2e5c4:	f7de fce4 	bl	cf90 <sdc_support_phy_update_peripheral>
			if (err) {
   2e5c8:	2800      	cmp	r0, #0
   2e5ca:	d1eb      	bne.n	2e5a4 <hci_driver_init+0x14>
		err = sdc_support_le_coded_phy();
   2e5cc:	f7de fcc0 	bl	cf50 <sdc_support_le_coded_phy>
		if (err) {
   2e5d0:	2800      	cmp	r0, #0
   2e5d2:	d1e7      	bne.n	2e5a4 <hci_driver_init+0x14>
			err = sdc_support_phy_update_peripheral();
   2e5d4:	f7de fcdc 	bl	cf90 <sdc_support_phy_update_peripheral>
			if (err) {
   2e5d8:	4604      	mov	r4, r0
   2e5da:	2800      	cmp	r0, #0
   2e5dc:	d1e2      	bne.n	2e5a4 <hci_driver_init+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5de:	aa01      	add	r2, sp, #4
   2e5e0:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   2e5e2:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5e6:	f7de fb47 	bl	cc78 <sdc_cfg_set>
	if (required_memory < 0) {
   2e5ea:	2800      	cmp	r0, #0
   2e5ec:	dbdc      	blt.n	2e5a8 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2e5ee:	2102      	movs	r1, #2
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5f0:	aa01      	add	r2, sp, #4
   2e5f2:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2e5f4:	f88d 1004 	strb.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e5f8:	f7de fb3e 	bl	cc78 <sdc_cfg_set>
	if (required_memory < 0) {
   2e5fc:	2800      	cmp	r0, #0
   2e5fe:	dbd3      	blt.n	2e5a8 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   2e600:	4b1f      	ldr	r3, [pc, #124]	; (2e680 <hci_driver_init+0xf0>)
   2e602:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e604:	aa01      	add	r2, sp, #4
   2e606:	2103      	movs	r1, #3
   2e608:	4620      	mov	r0, r4
   2e60a:	f7de fb35 	bl	cc78 <sdc_cfg_set>
	if (required_memory < 0) {
   2e60e:	2800      	cmp	r0, #0
   2e610:	dbca      	blt.n	2e5a8 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   2e612:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e616:	aa01      	add	r2, sp, #4
   2e618:	2104      	movs	r1, #4
   2e61a:	2000      	movs	r0, #0
	cfg.event_length.event_length_us =
   2e61c:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e61e:	f7de fb2b 	bl	cc78 <sdc_cfg_set>
	if (required_memory < 0) {
   2e622:	2800      	cmp	r0, #0
   2e624:	dbc0      	blt.n	2e5a8 <hci_driver_init+0x18>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   2e626:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e628:	aa01      	add	r2, sp, #4
   2e62a:	2105      	movs	r1, #5
   2e62c:	2000      	movs	r0, #0
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   2e62e:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e632:	f7de fb21 	bl	cc78 <sdc_cfg_set>
	if (required_memory < 0) {
   2e636:	2800      	cmp	r0, #0
   2e638:	dbb6      	blt.n	2e5a8 <hci_driver_init+0x18>
	cfg.adv_buffer_cfg.max_adv_data = CONFIG_BT_CTLR_ADV_DATA_LEN_MAX;
   2e63a:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e63c:	aa01      	add	r2, sp, #4
   2e63e:	2107      	movs	r1, #7
   2e640:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = CONFIG_BT_CTLR_ADV_DATA_LEN_MAX;
   2e642:	f8ad 3004 	strh.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2e646:	f7de fb17 	bl	cc78 <sdc_cfg_set>
	if (required_memory < 0) {
   2e64a:	2800      	cmp	r0, #0
   2e64c:	dbac      	blt.n	2e5a8 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   2e64e:	f640 5288 	movw	r2, #3464	; 0xd88
   2e652:	4290      	cmp	r0, r2
   2e654:	dd0d      	ble.n	2e672 <hci_driver_init+0xe2>
		LOG_ERR("Allocated memory too low: %u < %u",
   2e656:	4603      	mov	r3, r0
   2e658:	2145      	movs	r1, #69	; 0x45
   2e65a:	480a      	ldr	r0, [pc, #40]	; (2e684 <hci_driver_init+0xf4>)
   2e65c:	f009 fcc2 	bl	37fe4 <z_log_minimal_printk>
		k_panic();
   2e660:	4040      	eors	r0, r0
   2e662:	f380 8811 	msr	BASEPRI, r0
   2e666:	f04f 0004 	mov.w	r0, #4
   2e66a:	df02      	svc	2
		return -ENOMEM;
   2e66c:	f06f 000b 	mvn.w	r0, #11
   2e670:	e79a      	b.n	2e5a8 <hci_driver_init+0x18>
	return 0;
   2e672:	2000      	movs	r0, #0
	if (err) {
   2e674:	e798      	b.n	2e5a8 <hci_driver_init+0x18>
   2e676:	bf00      	nop
   2e678:	0003c4b4 	.word	0x0003c4b4
   2e67c:	0002e4dd 	.word	0x0002e4dd
   2e680:	02031b1b 	.word	0x02031b1b
   2e684:	0003e82c 	.word	0x0003e82c

0002e688 <rand_prio_low_vector_get_blocking>:
{
   2e688:	b510      	push	{r4, lr}
   2e68a:	4603      	mov	r3, r0
   2e68c:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   2e68e:	480d      	ldr	r0, [pc, #52]	; (2e6c4 <rand_prio_low_vector_get_blocking+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   2e690:	6881      	ldr	r1, [r0, #8]
   2e692:	680c      	ldr	r4, [r1, #0]
   2e694:	b944      	cbnz	r4, 2e6a8 <rand_prio_low_vector_get_blocking+0x20>
   2e696:	490c      	ldr	r1, [pc, #48]	; (2e6c8 <rand_prio_low_vector_get_blocking+0x40>)
   2e698:	480c      	ldr	r0, [pc, #48]	; (2e6cc <rand_prio_low_vector_get_blocking+0x44>)
   2e69a:	224d      	movs	r2, #77	; 0x4d
   2e69c:	f009 fc94 	bl	37fc8 <assert_print>
   2e6a0:	4809      	ldr	r0, [pc, #36]	; (2e6c8 <rand_prio_low_vector_get_blocking+0x40>)
   2e6a2:	214d      	movs	r1, #77	; 0x4d
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   2e6a4:	f009 fc89 	bl	37fba <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2e6a8:	4619      	mov	r1, r3
   2e6aa:	47a0      	blx	r4
   2e6ac:	b148      	cbz	r0, 2e6c2 <rand_prio_low_vector_get_blocking+0x3a>
   2e6ae:	4908      	ldr	r1, [pc, #32]	; (2e6d0 <rand_prio_low_vector_get_blocking+0x48>)
   2e6b0:	4806      	ldr	r0, [pc, #24]	; (2e6cc <rand_prio_low_vector_get_blocking+0x44>)
   2e6b2:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
   2e6b6:	f009 fc87 	bl	37fc8 <assert_print>
   2e6ba:	4805      	ldr	r0, [pc, #20]	; (2e6d0 <rand_prio_low_vector_get_blocking+0x48>)
   2e6bc:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   2e6c0:	e7f0      	b.n	2e6a4 <rand_prio_low_vector_get_blocking+0x1c>
}
   2e6c2:	bd10      	pop	{r4, pc}
   2e6c4:	0003b970 	.word	0x0003b970
   2e6c8:	0003e853 	.word	0x0003e853
   2e6cc:	0003c7f8 	.word	0x0003c7f8
   2e6d0:	0003e887 	.word	0x0003e887

0002e6d4 <rand_prio_low_vector_get>:
{
   2e6d4:	b538      	push	{r3, r4, r5, lr}
   2e6d6:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   2e6d8:	480b      	ldr	r0, [pc, #44]	; (2e708 <rand_prio_low_vector_get+0x34>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   2e6da:	6883      	ldr	r3, [r0, #8]
   2e6dc:	685d      	ldr	r5, [r3, #4]
   2e6de:	460a      	mov	r2, r1
   2e6e0:	b955      	cbnz	r5, 2e6f8 <rand_prio_low_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   2e6e2:	490a      	ldr	r1, [pc, #40]	; (2e70c <rand_prio_low_vector_get+0x38>)
   2e6e4:	480a      	ldr	r0, [pc, #40]	; (2e710 <rand_prio_low_vector_get+0x3c>)
   2e6e6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   2e6ea:	f009 fc6d 	bl	37fc8 <assert_print>
   2e6ee:	4807      	ldr	r0, [pc, #28]	; (2e70c <rand_prio_low_vector_get+0x38>)
   2e6f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   2e6f4:	f009 fc61 	bl	37fba <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   2e6f8:	2300      	movs	r3, #0
   2e6fa:	4621      	mov	r1, r4
   2e6fc:	47a8      	blx	r5
   2e6fe:	2800      	cmp	r0, #0
   2e700:	dbef      	blt.n	2e6e2 <rand_prio_low_vector_get+0xe>
}
   2e702:	b2c0      	uxtb	r0, r0
   2e704:	bd38      	pop	{r3, r4, r5, pc}
   2e706:	bf00      	nop
   2e708:	0003b970 	.word	0x0003b970
   2e70c:	0003e887 	.word	0x0003e887
   2e710:	0003c7f8 	.word	0x0003c7f8

0002e714 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   2e714:	4901      	ldr	r1, [pc, #4]	; (2e71c <receive_signal_raise+0x8>)
   2e716:	4802      	ldr	r0, [pc, #8]	; (2e720 <receive_signal_raise+0xc>)
   2e718:	f00c bf70 	b.w	3b5fc <k_work_submit_to_queue>
   2e71c:	20003fa4 	.word	0x20003fa4
   2e720:	20003048 	.word	0x20003048

0002e724 <rand_prio_high_vector_get>:
{
   2e724:	b538      	push	{r3, r4, r5, lr}
   2e726:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   2e728:	480b      	ldr	r0, [pc, #44]	; (2e758 <rand_prio_high_vector_get+0x34>)
	if (unlikely(!api->get_entropy_isr)) {
   2e72a:	6883      	ldr	r3, [r0, #8]
   2e72c:	685d      	ldr	r5, [r3, #4]
   2e72e:	460a      	mov	r2, r1
   2e730:	b955      	cbnz	r5, 2e748 <rand_prio_high_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   2e732:	490a      	ldr	r1, [pc, #40]	; (2e75c <rand_prio_high_vector_get+0x38>)
   2e734:	480a      	ldr	r0, [pc, #40]	; (2e760 <rand_prio_high_vector_get+0x3c>)
   2e736:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
   2e73a:	f009 fc45 	bl	37fc8 <assert_print>
   2e73e:	4807      	ldr	r0, [pc, #28]	; (2e75c <rand_prio_high_vector_get+0x38>)
   2e740:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   2e744:	f009 fc39 	bl	37fba <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   2e748:	2300      	movs	r3, #0
   2e74a:	4621      	mov	r1, r4
   2e74c:	47a8      	blx	r5
   2e74e:	2800      	cmp	r0, #0
   2e750:	dbef      	blt.n	2e732 <rand_prio_high_vector_get+0xe>
}
   2e752:	b2c0      	uxtb	r0, r0
   2e754:	bd38      	pop	{r3, r4, r5, pc}
   2e756:	bf00      	nop
   2e758:	0003b970 	.word	0x0003b970
   2e75c:	0003e887 	.word	0x0003e887
   2e760:	0003c7f8 	.word	0x0003c7f8

0002e764 <hci_driver_receive_process>:
{
   2e764:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e766:	f04f 30ff 	mov.w	r0, #4294967295
   2e76a:	f04f 31ff 	mov.w	r1, #4294967295
   2e76e:	f7ff fe9d 	bl	2e4ac <multithreading_lock_acquire>
	if (!errcode) {
   2e772:	2800      	cmp	r0, #0
   2e774:	d15f      	bne.n	2e836 <hci_driver_receive_process+0xd2>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   2e776:	4d31      	ldr	r5, [pc, #196]	; (2e83c <hci_driver_receive_process+0xd8>)
   2e778:	f10d 0107 	add.w	r1, sp, #7
   2e77c:	4628      	mov	r0, r5
   2e77e:	f000 fc79 	bl	2f074 <hci_internal_msg_get>
   2e782:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2e784:	f7ff fe9a 	bl	2e4bc <multithreading_lock_release>
	if (errcode) {
   2e788:	2c00      	cmp	r4, #0
   2e78a:	d154      	bne.n	2e836 <hci_driver_receive_process+0xd2>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   2e78c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2e790:	2a04      	cmp	r2, #4
   2e792:	d135      	bne.n	2e800 <hci_driver_receive_process+0x9c>
	switch (hdr->evt) {
   2e794:	7828      	ldrb	r0, [r5, #0]
   2e796:	283e      	cmp	r0, #62	; 0x3e
   2e798:	d014      	beq.n	2e7c4 <hci_driver_receive_process+0x60>
   2e79a:	28ff      	cmp	r0, #255	; 0xff
   2e79c:	d022      	beq.n	2e7e4 <hci_driver_receive_process+0x80>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2e79e:	f04f 32ff 	mov.w	r2, #4294967295
   2e7a2:	f04f 33ff 	mov.w	r3, #4294967295
   2e7a6:	4621      	mov	r1, r4
   2e7a8:	f7f7 fc98 	bl	260dc <bt_buf_get_evt>
	if (!evt_buf) {
   2e7ac:	4606      	mov	r6, r0
   2e7ae:	b9e8      	cbnz	r0, 2e7ec <hci_driver_receive_process+0x88>
		if (discardable) {
   2e7b0:	b91c      	cbnz	r4, 2e7ba <hci_driver_receive_process+0x56>
		LOG_ERR("No event buffer available");
   2e7b2:	4823      	ldr	r0, [pc, #140]	; (2e840 <hci_driver_receive_process+0xdc>)
   2e7b4:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No data buffer available");
   2e7b6:	f009 fc15 	bl	37fe4 <z_log_minimal_printk>
}
   2e7ba:	b002      	add	sp, #8
   2e7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   2e7c0:	f7ff bfa8 	b.w	2e714 <receive_signal_raise>
		switch (me->subevent) {
   2e7c4:	78ab      	ldrb	r3, [r5, #2]
   2e7c6:	2b02      	cmp	r3, #2
   2e7c8:	d008      	beq.n	2e7dc <hci_driver_receive_process+0x78>
   2e7ca:	2b0d      	cmp	r3, #13
   2e7cc:	d1e7      	bne.n	2e79e <hci_driver_receive_process+0x3a>
			return (ext_adv->num_reports == 1) &&
   2e7ce:	78e9      	ldrb	r1, [r5, #3]
   2e7d0:	2901      	cmp	r1, #1
   2e7d2:	d1e4      	bne.n	2e79e <hci_driver_receive_process+0x3a>
				   ((ext_adv->adv_info->evt_type &
   2e7d4:	88ac      	ldrh	r4, [r5, #4]
			return (ext_adv->num_reports == 1) &&
   2e7d6:	f014 0410 	ands.w	r4, r4, #16
   2e7da:	d0e0      	beq.n	2e79e <hci_driver_receive_process+0x3a>
		switch (subevent) {
   2e7dc:	2200      	movs	r2, #0
   2e7de:	2300      	movs	r3, #0
   2e7e0:	2401      	movs	r4, #1
   2e7e2:	e7e0      	b.n	2e7a6 <hci_driver_receive_process+0x42>
   2e7e4:	78ab      	ldrb	r3, [r5, #2]
   2e7e6:	2b80      	cmp	r3, #128	; 0x80
   2e7e8:	d1d9      	bne.n	2e79e <hci_driver_receive_process+0x3a>
   2e7ea:	e7f7      	b.n	2e7dc <hci_driver_receive_process+0x78>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   2e7ec:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e7ee:	4913      	ldr	r1, [pc, #76]	; (2e83c <hci_driver_receive_process+0xd8>)
   2e7f0:	3202      	adds	r2, #2
   2e7f2:	300c      	adds	r0, #12
   2e7f4:	f00b fd79 	bl	3a2ea <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2e7f8:	4630      	mov	r0, r6
	bt_recv(data_buf);
   2e7fa:	f7f8 fb95 	bl	26f28 <bt_recv>
   2e7fe:	e7dc      	b.n	2e7ba <hci_driver_receive_process+0x56>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   2e800:	2a02      	cmp	r2, #2
   2e802:	d113      	bne.n	2e82c <hci_driver_receive_process+0xc8>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   2e804:	f04f 32ff 	mov.w	r2, #4294967295
   2e808:	f04f 33ff 	mov.w	r3, #4294967295
   2e80c:	2003      	movs	r0, #3
   2e80e:	f7f7 fc27 	bl	26060 <bt_buf_get_rx>
	if (!data_buf) {
   2e812:	4604      	mov	r4, r0
   2e814:	b910      	cbnz	r0, 2e81c <hci_driver_receive_process+0xb8>
		LOG_ERR("No data buffer available");
   2e816:	480b      	ldr	r0, [pc, #44]	; (2e844 <hci_driver_receive_process+0xe0>)
   2e818:	2145      	movs	r1, #69	; 0x45
   2e81a:	e7cc      	b.n	2e7b6 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   2e81c:	886a      	ldrh	r2, [r5, #2]
   2e81e:	4629      	mov	r1, r5
   2e820:	3204      	adds	r2, #4
   2e822:	300c      	adds	r0, #12
   2e824:	f00b fd61 	bl	3a2ea <net_buf_simple_add_mem>
	bt_recv(data_buf);
   2e828:	4620      	mov	r0, r4
   2e82a:	e7e6      	b.n	2e7fa <hci_driver_receive_process+0x96>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   2e82c:	4806      	ldr	r0, [pc, #24]	; (2e848 <hci_driver_receive_process+0xe4>)
   2e82e:	2145      	movs	r1, #69	; 0x45
   2e830:	f009 fbd8 	bl	37fe4 <z_log_minimal_printk>
   2e834:	e7c1      	b.n	2e7ba <hci_driver_receive_process+0x56>
}
   2e836:	b002      	add	sp, #8
   2e838:	bd70      	pop	{r4, r5, r6, pc}
   2e83a:	bf00      	nop
   2e83c:	20004d9b 	.word	0x20004d9b
   2e840:	0003e8c0 	.word	0x0003e8c0
   2e844:	0003e8df 	.word	0x0003e8df
   2e848:	0003e8fd 	.word	0x0003e8fd

0002e84c <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   2e84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   2e84e:	4cb7      	ldr	r4, [pc, #732]	; (2eb2c <hci_internal_cmd_put+0x2e0>)
   2e850:	7823      	ldrb	r3, [r4, #0]
{
   2e852:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   2e854:	2b00      	cmp	r3, #0
   2e856:	f040 8405 	bne.w	2f064 <hci_internal_cmd_put+0x818>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   2e85a:	2304      	movs	r3, #4
   2e85c:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   2e860:	4bb3      	ldr	r3, [pc, #716]	; (2eb30 <hci_internal_cmd_put+0x2e4>)
   2e862:	8806      	ldrh	r6, [r0, #0]
   2e864:	681f      	ldr	r7, [r3, #0]
   2e866:	b1b7      	cbz	r7, 2e896 <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   2e868:	f10d 0306 	add.w	r3, sp, #6
   2e86c:	f10d 0207 	add.w	r2, sp, #7
   2e870:	1c61      	adds	r1, r4, #1
   2e872:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   2e874:	2801      	cmp	r0, #1
   2e876:	d00e      	beq.n	2e896 <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   2e878:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2e87c:	2b00      	cmp	r3, #0
   2e87e:	f040 822e 	bne.w	2ecde <hci_internal_cmd_put+0x492>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   2e882:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   2e886:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2e888:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   2e88a:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2e88c:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   2e88e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   2e890:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2e892:	71a0      	strb	r0, [r4, #6]
}
   2e894:	e22c      	b.n	2ecf0 <hci_internal_cmd_put+0x4a4>
		switch (BT_OGF(opcode)) {
   2e896:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   2e89a:	ea4f 2396 	mov.w	r3, r6, lsr #10
   2e89e:	d20f      	bcs.n	2e8c0 <hci_internal_cmd_put+0x74>
   2e8a0:	2b00      	cmp	r3, #0
   2e8a2:	d057      	beq.n	2e954 <hci_internal_cmd_put+0x108>
   2e8a4:	3b01      	subs	r3, #1
   2e8a6:	2b07      	cmp	r3, #7
   2e8a8:	f200 83c5 	bhi.w	2f036 <hci_internal_cmd_put+0x7ea>
   2e8ac:	e8df f013 	tbh	[pc, r3, lsl #1]
   2e8b0:	03c3000d 	.word	0x03c3000d
   2e8b4:	0082003e 	.word	0x0082003e
   2e8b8:	03c303c3 	.word	0x03c303c3
   2e8bc:	014403c3 	.word	0x014403c3
   2e8c0:	2b3f      	cmp	r3, #63	; 0x3f
   2e8c2:	f000 82f0 	beq.w	2eea6 <hci_internal_cmd_put+0x65a>
	switch (opcode)	{
   2e8c6:	2001      	movs	r0, #1
   2e8c8:	e348      	b.n	2ef5c <hci_internal_cmd_put+0x710>
	return ((uint16_t)src[1] << 8) | src[0];
   2e8ca:	4628      	mov	r0, r5
	switch (opcode)	{
   2e8cc:	f240 4206 	movw	r2, #1030	; 0x406
   2e8d0:	f930 3b03 	ldrsh.w	r3, [r0], #3
   2e8d4:	4293      	cmp	r3, r2
   2e8d6:	d00f      	beq.n	2e8f8 <hci_internal_cmd_put+0xac>
   2e8d8:	f240 421d 	movw	r2, #1053	; 0x41d
   2e8dc:	4293      	cmp	r3, r2
   2e8de:	d022      	beq.n	2e926 <hci_internal_cmd_put+0xda>
   2e8e0:	2001      	movs	r0, #1
	switch (hci_opcode) {
   2e8e2:	f240 4306 	movw	r3, #1030	; 0x406
   2e8e6:	429e      	cmp	r6, r3
   2e8e8:	f000 81f9 	beq.w	2ecde <hci_internal_cmd_put+0x492>
   2e8ec:	f240 431d 	movw	r3, #1053	; 0x41d
   2e8f0:	429e      	cmp	r6, r3
   2e8f2:	f000 81f4 	beq.w	2ecde <hci_internal_cmd_put+0x492>
   2e8f6:	e042      	b.n	2e97e <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2e8f8:	f7f0 f957 	bl	1ebaa <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   2e8fc:	f242 0332 	movw	r3, #8242	; 0x2032
   2e900:	429e      	cmp	r6, r3
   2e902:	f240 8392 	bls.w	2f02a <hci_internal_cmd_put+0x7de>
   2e906:	f242 0385 	movw	r3, #8325	; 0x2085
   2e90a:	429e      	cmp	r6, r3
   2e90c:	d837      	bhi.n	2e97e <hci_internal_cmd_put+0x132>
   2e90e:	f242 036c 	movw	r3, #8300	; 0x206c
   2e912:	429e      	cmp	r6, r3
   2e914:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   2e918:	f200 838f 	bhi.w	2f03a <hci_internal_cmd_put+0x7ee>
   2e91c:	3b03      	subs	r3, #3
   2e91e:	b29b      	uxth	r3, r3
   2e920:	2b01      	cmp	r3, #1
   2e922:	d82c      	bhi.n	2e97e <hci_internal_cmd_put+0x132>
   2e924:	e1db      	b.n	2ecde <hci_internal_cmd_put+0x492>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2e926:	f7f0 f942 	bl	1ebae <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   2e92a:	e7e7      	b.n	2e8fc <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2e92c:	4628      	mov	r0, r5
	switch (opcode)	{
   2e92e:	f640 4263 	movw	r2, #3171	; 0xc63
   2e932:	f930 3b03 	ldrsh.w	r3, [r0], #3
   2e936:	4293      	cmp	r3, r2
   2e938:	d030      	beq.n	2e99c <hci_internal_cmd_put+0x150>
   2e93a:	dc0d      	bgt.n	2e958 <hci_internal_cmd_put+0x10c>
   2e93c:	f640 4203 	movw	r2, #3075	; 0xc03
   2e940:	4293      	cmp	r3, r2
   2e942:	d01f      	beq.n	2e984 <hci_internal_cmd_put+0x138>
   2e944:	f640 422d 	movw	r2, #3117	; 0xc2d
   2e948:	4293      	cmp	r3, r2
   2e94a:	d01e      	beq.n	2e98a <hci_internal_cmd_put+0x13e>
   2e94c:	f640 4201 	movw	r2, #3073	; 0xc01
   2e950:	4293      	cmp	r3, r2
   2e952:	d012      	beq.n	2e97a <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   2e954:	2001      	movs	r0, #1
   2e956:	e1c2      	b.n	2ecde <hci_internal_cmd_put+0x492>
	switch (opcode)	{
   2e958:	f640 427b 	movw	r2, #3195	; 0xc7b
   2e95c:	4293      	cmp	r3, r2
   2e95e:	d020      	beq.n	2e9a2 <hci_internal_cmd_put+0x156>
   2e960:	f640 427c 	movw	r2, #3196	; 0xc7c
   2e964:	4293      	cmp	r3, r2
   2e966:	d1f5      	bne.n	2e954 <hci_internal_cmd_put+0x108>
		*param_length_out +=
   2e968:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2e96c:	4971      	ldr	r1, [pc, #452]	; (2eb34 <hci_internal_cmd_put+0x2e8>)
		*param_length_out +=
   2e96e:	3302      	adds	r3, #2
   2e970:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2e974:	f7ef ffc1 	bl	1e8fa <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   2e978:	e001      	b.n	2e97e <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2e97a:	f7ef ffb4 	bl	1e8e6 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   2e97e:	2801      	cmp	r0, #1
   2e980:	d0e8      	beq.n	2e954 <hci_internal_cmd_put+0x108>
   2e982:	e77e      	b.n	2e882 <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   2e984:	f7de fc82 	bl	d28c <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   2e988:	e7f9      	b.n	2e97e <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2e98a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2e98e:	4969      	ldr	r1, [pc, #420]	; (2eb34 <hci_internal_cmd_put+0x2e8>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2e990:	3303      	adds	r3, #3
   2e992:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2e996:	f7ef ffa4 	bl	1e8e2 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   2e99a:	e7f0      	b.n	2e97e <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2e99c:	f7ef ffa8 	bl	1e8f0 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   2e9a0:	e7ed      	b.n	2e97e <hci_internal_cmd_put+0x132>
		*param_length_out +=
   2e9a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2e9a6:	4963      	ldr	r1, [pc, #396]	; (2eb34 <hci_internal_cmd_put+0x2e8>)
		*param_length_out +=
   2e9a8:	3304      	adds	r3, #4
   2e9aa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2e9ae:	f7ef ff96 	bl	1e8de <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   2e9b2:	e7e4      	b.n	2e97e <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   2e9b4:	882b      	ldrh	r3, [r5, #0]
   2e9b6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2e9ba:	3b01      	subs	r3, #1
   2e9bc:	2b08      	cmp	r3, #8
   2e9be:	d8c9      	bhi.n	2e954 <hci_internal_cmd_put+0x108>
   2e9c0:	a201      	add	r2, pc, #4	; (adr r2, 2e9c8 <hci_internal_cmd_put+0x17c>)
   2e9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2e9c6:	bf00      	nop
   2e9c8:	0002e9ed 	.word	0x0002e9ed
   2e9cc:	0002e9ff 	.word	0x0002e9ff
   2e9d0:	0002eaf9 	.word	0x0002eaf9
   2e9d4:	0002e955 	.word	0x0002e955
   2e9d8:	0002e955 	.word	0x0002e955
   2e9dc:	0002e955 	.word	0x0002e955
   2e9e0:	0002e955 	.word	0x0002e955
   2e9e4:	0002e955 	.word	0x0002e955
   2e9e8:	0002eb1b 	.word	0x0002eb1b
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2e9ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2e9f0:	4850      	ldr	r0, [pc, #320]	; (2eb34 <hci_internal_cmd_put+0x2e8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2e9f2:	3308      	adds	r3, #8
   2e9f4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2e9f8:	f7f0 f87c 	bl	1eaf4 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   2e9fc:	e7bf      	b.n	2e97e <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2e9fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2ea02:	484c      	ldr	r0, [pc, #304]	; (2eb34 <hci_internal_cmd_put+0x2e8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2ea04:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   2ea06:	2230      	movs	r2, #48	; 0x30
   2ea08:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2ea0a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2ea0e:	f009 fedf 	bl	387d0 <memset>
	cmds->hci_disconnect = 1;
   2ea12:	79e3      	ldrb	r3, [r4, #7]
   2ea14:	f043 0320 	orr.w	r3, r3, #32
   2ea18:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   2ea1a:	7a63      	ldrb	r3, [r4, #9]
   2ea1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ea20:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   2ea22:	7b23      	ldrb	r3, [r4, #12]
   2ea24:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2ea28:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   2ea2a:	7c63      	ldrb	r3, [r4, #17]
   2ea2c:	f043 0304 	orr.w	r3, r3, #4
   2ea30:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   2ea32:	7d63      	ldrb	r3, [r4, #21]
   2ea34:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   2ea38:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   2ea3c:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   2ea3e:	7da3      	ldrb	r3, [r4, #22]
   2ea40:	f043 0302 	orr.w	r3, r3, #2
   2ea44:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   2ea46:	7f63      	ldrb	r3, [r4, #29]
   2ea48:	f043 0304 	orr.w	r3, r3, #4
   2ea4c:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   2ea4e:	f894 3020 	ldrb.w	r3, [r4, #32]
   2ea52:	f063 0308 	orn	r3, r3, #8
   2ea56:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   2ea5a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2ea5e:	f063 033c 	orn	r3, r3, #60	; 0x3c
   2ea62:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2ea66:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   2ea6a:	f063 0304 	orn	r3, r3, #4
   2ea6e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   2ea72:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2ea76:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   2ea7a:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   2ea7e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   2ea82:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   2ea86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   2ea8a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   2ea8e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   2ea92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2ea96:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2ea9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   2ea9e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   2eaa2:	f023 0307 	bic.w	r3, r3, #7
   2eaa6:	f043 0307 	orr.w	r3, r3, #7
   2eaaa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   2eaae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   2eab2:	f063 0307 	orn	r3, r3, #7
   2eab6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   2eaba:	23ff      	movs	r3, #255	; 0xff
   2eabc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_remove_advertising_set = 1;
   2eac0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2eac4:	f023 0303 	bic.w	r3, r3, #3
   2eac8:	f043 0303 	orr.w	r3, r3, #3
   2eacc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	cmds->hci_le_read_transmit_power = 1;
   2ead0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2ead4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2ead8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   2eadc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2eae0:	f043 0304 	orr.w	r3, r3, #4
   2eae4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   2eae8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   2eaec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2eaf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return 0;
   2eaf4:	2000      	movs	r0, #0
   2eaf6:	e6c4      	b.n	2e882 <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2eaf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2eafc:	480d      	ldr	r0, [pc, #52]	; (2eb34 <hci_internal_cmd_put+0x2e8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2eafe:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   2eb00:	2208      	movs	r2, #8
   2eb02:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2eb04:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2eb08:	f009 fe62 	bl	387d0 <memset>
	features->bdedr_not_supported = 1;
   2eb0c:	7ae3      	ldrb	r3, [r4, #11]
   2eb0e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   2eb12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2eb16:	72e3      	strb	r3, [r4, #11]
	if (generate_command_status_event ||
   2eb18:	e7ec      	b.n	2eaf4 <hci_internal_cmd_put+0x2a8>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2eb1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2eb1e:	4805      	ldr	r0, [pc, #20]	; (2eb34 <hci_internal_cmd_put+0x2e8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2eb20:	3306      	adds	r3, #6
   2eb22:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2eb26:	f7ef ffe3 	bl	1eaf0 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   2eb2a:	e728      	b.n	2e97e <hci_internal_cmd_put+0x132>
   2eb2c:	20004de1 	.word	0x20004de1
   2eb30:	20003fb4 	.word	0x20003fb4
   2eb34:	20004de8 	.word	0x20004de8
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2eb38:	4628      	mov	r0, r5
	switch (opcode)	{
   2eb3a:	f830 3b03 	ldrh.w	r3, [r0], #3
   2eb3e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2eb42:	3b01      	subs	r3, #1
   2eb44:	2b7b      	cmp	r3, #123	; 0x7b
   2eb46:	d87d      	bhi.n	2ec44 <hci_internal_cmd_put+0x3f8>
   2eb48:	e8df f013 	tbh	[pc, r3, lsl #1]
   2eb4c:	009c0094 	.word	0x009c0094
   2eb50:	007c00a5 	.word	0x007c00a5
   2eb54:	00da00d7 	.word	0x00da00d7
   2eb58:	00e600dd 	.word	0x00e600dd
   2eb5c:	00ec00e9 	.word	0x00ec00e9
   2eb60:	007c007c 	.word	0x007c007c
   2eb64:	007c007c 	.word	0x007c007c
   2eb68:	00fb00f2 	.word	0x00fb00f2
   2eb6c:	010100fe 	.word	0x010100fe
   2eb70:	0104007c 	.word	0x0104007c
   2eb74:	01100107 	.word	0x01100107
   2eb78:	011c0113 	.word	0x011c0113
   2eb7c:	0125007c 	.word	0x0125007c
   2eb80:	0137012e 	.word	0x0137012e
   2eb84:	007c007c 	.word	0x007c007c
   2eb88:	007c007c 	.word	0x007c007c
   2eb8c:	0141007c 	.word	0x0141007c
   2eb90:	0153014a 	.word	0x0153014a
   2eb94:	01590156 	.word	0x01590156
   2eb98:	007c007c 	.word	0x007c007c
   2eb9c:	007c007c 	.word	0x007c007c
   2eba0:	007c007c 	.word	0x007c007c
   2eba4:	007c007c 	.word	0x007c007c
   2eba8:	0168015f 	.word	0x0168015f
   2ebac:	01740171 	.word	0x01740171
   2ebb0:	007c007c 	.word	0x007c007c
   2ebb4:	017a0177 	.word	0x017a0177
   2ebb8:	01860183 	.word	0x01860183
   2ebbc:	018c0189 	.word	0x018c0189
   2ebc0:	019e0195 	.word	0x019e0195
   2ebc4:	007c01a1 	.word	0x007c01a1
   2ebc8:	007c007c 	.word	0x007c007c
   2ebcc:	007c007c 	.word	0x007c007c
   2ebd0:	007c007c 	.word	0x007c007c
   2ebd4:	007c007c 	.word	0x007c007c
   2ebd8:	007c007c 	.word	0x007c007c
   2ebdc:	007c007c 	.word	0x007c007c
   2ebe0:	007c01a4 	.word	0x007c01a4
   2ebe4:	007c007c 	.word	0x007c007c
   2ebe8:	007c007c 	.word	0x007c007c
   2ebec:	007c007c 	.word	0x007c007c
   2ebf0:	007c007c 	.word	0x007c007c
   2ebf4:	007c007c 	.word	0x007c007c
   2ebf8:	007c007c 	.word	0x007c007c
   2ebfc:	007c007c 	.word	0x007c007c
   2ec00:	007c007c 	.word	0x007c007c
   2ec04:	015c007c 	.word	0x015c007c
   2ec08:	007c007c 	.word	0x007c007c
   2ec0c:	007c007c 	.word	0x007c007c
   2ec10:	007c007c 	.word	0x007c007c
   2ec14:	007c007c 	.word	0x007c007c
   2ec18:	007c007c 	.word	0x007c007c
   2ec1c:	007c007c 	.word	0x007c007c
   2ec20:	007c007c 	.word	0x007c007c
   2ec24:	007c007c 	.word	0x007c007c
   2ec28:	007c007c 	.word	0x007c007c
   2ec2c:	007c007c 	.word	0x007c007c
   2ec30:	007c007c 	.word	0x007c007c
   2ec34:	007c007c 	.word	0x007c007c
   2ec38:	007c007c 	.word	0x007c007c
   2ec3c:	007c007c 	.word	0x007c007c
   2ec40:	00ef007c 	.word	0x00ef007c
	switch (hci_opcode) {
   2ec44:	f242 0332 	movw	r3, #8242	; 0x2032
   2ec48:	429e      	cmp	r6, r3
   2ec4a:	f43f ae83 	beq.w	2e954 <hci_internal_cmd_put+0x108>
   2ec4e:	f200 8203 	bhi.w	2f058 <hci_internal_cmd_put+0x80c>
   2ec52:	f242 0326 	movw	r3, #8230	; 0x2026
   2ec56:	429e      	cmp	r6, r3
   2ec58:	f63f ae7c 	bhi.w	2e954 <hci_internal_cmd_put+0x108>
   2ec5c:	2001      	movs	r0, #1
   2ec5e:	f242 030c 	movw	r3, #8204	; 0x200c
   2ec62:	429e      	cmp	r6, r3
   2ec64:	f67f ae3d 	bls.w	2e8e2 <hci_internal_cmd_put+0x96>
   2ec68:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   2ec6c:	3b0d      	subs	r3, #13
   2ec6e:	4acf      	ldr	r2, [pc, #828]	; (2efac <hci_internal_cmd_put+0x760>)
   2ec70:	b29b      	uxth	r3, r3
   2ec72:	e1e5      	b.n	2f040 <hci_internal_cmd_put+0x7f4>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2ec74:	f7ef ff7a 	bl	1eb6c <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   2ec78:	f242 0332 	movw	r3, #8242	; 0x2032
   2ec7c:	429e      	cmp	r6, r3
   2ec7e:	f47f ae3d 	bne.w	2e8fc <hci_internal_cmd_put+0xb0>
   2ec82:	e02c      	b.n	2ecde <hci_internal_cmd_put+0x492>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2ec84:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2ec88:	48c9      	ldr	r0, [pc, #804]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2ec8a:	3303      	adds	r3, #3
   2ec8c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2ec90:	f7ef ff46 	bl	1eb20 <sdc_hci_cmd_le_read_buffer_size>
   2ec94:	e7f0      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2ec96:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2ec9a:	48c5      	ldr	r0, [pc, #788]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2ec9c:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   2ec9e:	2208      	movs	r2, #8
   2eca0:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2eca2:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2eca6:	f009 fd93 	bl	387d0 <memset>
	features->params.le_encryption = 1;
   2ecaa:	79e3      	ldrb	r3, [r4, #7]
   2ecac:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   2ecb0:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   2ecb4:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   2ecb6:	7a23      	ldrb	r3, [r4, #8]
   2ecb8:	f023 0359 	bic.w	r3, r3, #89	; 0x59
   2ecbc:	f043 0359 	orr.w	r3, r3, #89	; 0x59
   2ecc0:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   2ecc2:	f242 0332 	movw	r3, #8242	; 0x2032
   2ecc6:	429e      	cmp	r6, r3
   2ecc8:	d008      	beq.n	2ecdc <hci_internal_cmd_put+0x490>
   2ecca:	f200 81bf 	bhi.w	2f04c <hci_internal_cmd_put+0x800>
   2ecce:	f242 0326 	movw	r3, #8230	; 0x2026
   2ecd2:	429e      	cmp	r6, r3
   2ecd4:	f63f af0e 	bhi.w	2eaf4 <hci_internal_cmd_put+0x2a8>
		return 0;
   2ecd8:	2000      	movs	r0, #0
   2ecda:	e7c0      	b.n	2ec5e <hci_internal_cmd_put+0x412>
   2ecdc:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2ecde:	230f      	movs	r3, #15
   2ece0:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2ece2:	2304      	movs	r3, #4
   2ece4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   2ece6:	2301      	movs	r3, #1
	evt_data->status = status_code;
   2ece8:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   2ecea:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   2ecec:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   2ecf0:	2301      	movs	r3, #1
   2ecf2:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   2ecf4:	2000      	movs	r0, #0
}
   2ecf6:	b003      	add	sp, #12
   2ecf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2ecfa:	f7ef ff50 	bl	1eb9e <sdc_hci_cmd_le_set_random_address>
   2ecfe:	e7bb      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   2ed00:	f7ef ff2a 	bl	1eb58 <sdc_hci_cmd_le_set_adv_params>
   2ed04:	e7b8      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out +=
   2ed06:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2ed0a:	48a9      	ldr	r0, [pc, #676]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out +=
   2ed0c:	3301      	adds	r3, #1
   2ed0e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   2ed12:	f7ef ff03 	bl	1eb1c <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   2ed16:	e7af      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2ed18:	f7ef ff1a 	bl	1eb50 <sdc_hci_cmd_le_set_adv_data>
   2ed1c:	e7ac      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   2ed1e:	f7ef ff40 	bl	1eba2 <sdc_hci_cmd_le_set_scan_response_data>
   2ed22:	e7a9      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   2ed24:	f7ef ff16 	bl	1eb54 <sdc_hci_cmd_le_set_adv_enable>
   2ed28:	e7a6      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   2ed2a:	f7ef ff1b 	bl	1eb64 <sdc_hci_cmd_le_set_data_related_address_changes>
   2ed2e:	e7a3      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2ed30:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   2ed34:	489e      	ldr	r0, [pc, #632]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   2ed36:	3301      	adds	r3, #1
   2ed38:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   2ed3c:	f7ef fef4 	bl	1eb28 <sdc_hci_cmd_le_read_filter_accept_list_size>
   2ed40:	e79a      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   2ed42:	f7ef fedd 	bl	1eb00 <sdc_hci_cmd_le_clear_filter_accept_list>
   2ed46:	e797      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   2ed48:	f7ef fed6 	bl	1eaf8 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   2ed4c:	e794      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   2ed4e:	f7ef fefd 	bl	1eb4c <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   2ed52:	e791      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2ed54:	f7ef ff1f 	bl	1eb96 <sdc_hci_cmd_le_set_host_channel_classification>
   2ed58:	e78e      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2ed5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2ed5e:	4994      	ldr	r1, [pc, #592]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2ed60:	3307      	adds	r3, #7
   2ed62:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2ed66:	f7ef fedd 	bl	1eb24 <sdc_hci_cmd_le_read_channel_map>
   2ed6a:	e785      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2ed6c:	f7ef fee6 	bl	1eb3c <sdc_hci_cmd_le_read_remote_features>
   2ed70:	e782      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2ed72:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2ed76:	498e      	ldr	r1, [pc, #568]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2ed78:	3310      	adds	r3, #16
   2ed7a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2ed7e:	f7ef fec1 	bl	1eb04 <sdc_hci_cmd_le_encrypt>
   2ed82:	e779      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2ed84:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2ed88:	4889      	ldr	r0, [pc, #548]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2ed8a:	3308      	adds	r3, #8
   2ed8c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2ed90:	f7ef fec2 	bl	1eb18 <sdc_hci_cmd_le_rand>
   2ed94:	e770      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   2ed96:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2ed9a:	4985      	ldr	r1, [pc, #532]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   2ed9c:	3302      	adds	r3, #2
   2ed9e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2eda2:	f7ef feb5 	bl	1eb10 <sdc_hci_cmd_le_long_term_key_request_reply>
   2eda6:	e767      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out +=
   2eda8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2edac:	4980      	ldr	r1, [pc, #512]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out +=
   2edae:	3302      	adds	r3, #2
   2edb0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2edb4:	f7ef fea8 	bl	1eb08 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2edb8:	e75e      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2edba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2edbe:	3308      	adds	r3, #8
   2edc0:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   2edc4:	238f      	movs	r3, #143	; 0x8f
   2edc6:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   2edc8:	23c0      	movs	r3, #192	; 0xc0
   2edca:	72e3      	strb	r3, [r4, #11]
   2edcc:	e779      	b.n	2ecc2 <hci_internal_cmd_put+0x476>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2edce:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2edd2:	4977      	ldr	r1, [pc, #476]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2edd4:	3302      	adds	r3, #2
   2edd6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2edda:	f7ef fec1 	bl	1eb60 <sdc_hci_cmd_le_set_data_length>
   2edde:	e74b      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out +=
   2ede0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2ede4:	4872      	ldr	r0, [pc, #456]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out +=
   2ede6:	3304      	adds	r3, #4
   2ede8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2edec:	f7ef fea8 	bl	1eb40 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2edf0:	e742      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2edf2:	f7ef fed8 	bl	1eba6 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2edf6:	e73f      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return hci_cmd_le_read_local_p256_public_key();
   2edf8:	f000 fab2 	bl	2f360 <hci_cmd_le_read_local_p256_public_key>
   2edfc:	e73c      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2edfe:	f00b fe6f 	bl	3aae0 <hci_cmd_le_generate_dhkey>
   2ee02:	e739      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   2ee04:	f00b fe6f 	bl	3aae6 <hci_cmd_le_generate_dhkey_v2>
   2ee08:	e736      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2ee0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2ee0e:	4868      	ldr	r0, [pc, #416]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2ee10:	3308      	adds	r3, #8
   2ee12:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2ee16:	f7ef fe8b 	bl	1eb30 <sdc_hci_cmd_le_read_max_data_length>
   2ee1a:	e72d      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2ee1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2ee20:	4963      	ldr	r1, [pc, #396]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2ee22:	3304      	adds	r3, #4
   2ee24:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2ee28:	f7ef fe86 	bl	1eb38 <sdc_hci_cmd_le_read_phy>
   2ee2c:	e724      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2ee2e:	f7ef fe9b 	bl	1eb68 <sdc_hci_cmd_le_set_default_phy>
   2ee32:	e721      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2ee34:	f7ef feb1 	bl	1eb9a <sdc_hci_cmd_le_set_phy>
   2ee38:	e71e      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_adv_set_random_address((void *)cmd_params);
   2ee3a:	f7ef fe8f 	bl	1eb5c <sdc_hci_cmd_le_set_adv_set_random_address>
   2ee3e:	e71b      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_ext_adv_params_return_t);
   2ee40:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_ext_adv_params((void *)cmd_params,
   2ee44:	495a      	ldr	r1, [pc, #360]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_ext_adv_params_return_t);
   2ee46:	3301      	adds	r3, #1
   2ee48:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_ext_adv_params((void *)cmd_params,
   2ee4c:	f7ef fe9f 	bl	1eb8e <sdc_hci_cmd_le_set_ext_adv_params>
   2ee50:	e712      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_ext_adv_data((void *)cmd_params);
   2ee52:	f7ef fe90 	bl	1eb76 <sdc_hci_cmd_le_set_ext_adv_data>
   2ee56:	e70f      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_ext_scan_response_data((void *)cmd_params);
   2ee58:	f7ef fe9b 	bl	1eb92 <sdc_hci_cmd_le_set_ext_scan_response_data>
   2ee5c:	e70c      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_set_ext_adv_enable((void *)cmd_params);
   2ee5e:	f7ef fe8c 	bl	1eb7a <sdc_hci_cmd_le_set_ext_adv_enable>
   2ee62:	e709      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_adv_data_length_return_t);
   2ee64:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_adv_data_length((void *)event_out_params);
   2ee68:	4851      	ldr	r0, [pc, #324]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_adv_data_length_return_t);
   2ee6a:	3302      	adds	r3, #2
   2ee6c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_adv_data_length((void *)event_out_params);
   2ee70:	f7ef fe5c 	bl	1eb2c <sdc_hci_cmd_le_read_max_adv_data_length>
   2ee74:	e700      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out +=
   2ee76:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_number_of_supported_adv_sets((void *)event_out_params);
   2ee7a:	484d      	ldr	r0, [pc, #308]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out +=
   2ee7c:	3301      	adds	r3, #1
   2ee7e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_number_of_supported_adv_sets((void *)event_out_params);
   2ee82:	f7ef fe57 	bl	1eb34 <sdc_hci_cmd_le_read_number_of_supported_adv_sets>
   2ee86:	e6f7      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_remove_adv_set((void *)cmd_params);
   2ee88:	f7ef fe5e 	bl	1eb48 <sdc_hci_cmd_le_remove_adv_set>
   2ee8c:	e6f4      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		return sdc_hci_cmd_le_clear_adv_sets();
   2ee8e:	f7ef fe35 	bl	1eafc <sdc_hci_cmd_le_clear_adv_sets>
   2ee92:	e6f1      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2ee94:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2ee98:	4845      	ldr	r0, [pc, #276]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2ee9a:	3302      	adds	r3, #2
   2ee9c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2eea0:	f7ef fe50 	bl	1eb44 <sdc_hci_cmd_le_read_transmit_power>
   2eea4:	e6e8      	b.n	2ec78 <hci_internal_cmd_put+0x42c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2eea6:	4628      	mov	r0, r5
	switch (opcode)	{
   2eea8:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   2eeac:	f830 3b03 	ldrh.w	r3, [r0], #3
   2eeb0:	4293      	cmp	r3, r2
   2eeb2:	d823      	bhi.n	2eefc <hci_internal_cmd_put+0x6b0>
   2eeb4:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2eeb8:	f67f ad05 	bls.w	2e8c6 <hci_internal_cmd_put+0x7a>
   2eebc:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2eec0:	3b01      	subs	r3, #1
   2eec2:	2b0a      	cmp	r3, #10
   2eec4:	f63f acff 	bhi.w	2e8c6 <hci_internal_cmd_put+0x7a>
   2eec8:	a201      	add	r2, pc, #4	; (adr r2, 2eed0 <hci_internal_cmd_put+0x684>)
   2eeca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2eece:	bf00      	nop
   2eed0:	0002ef4d 	.word	0x0002ef4d
   2eed4:	0002ef69 	.word	0x0002ef69
   2eed8:	0002e8c7 	.word	0x0002e8c7
   2eedc:	0002e8c7 	.word	0x0002e8c7
   2eee0:	0002e8c7 	.word	0x0002e8c7
   2eee4:	0002efc7 	.word	0x0002efc7
   2eee8:	0002e8c7 	.word	0x0002e8c7
   2eeec:	0002e8c7 	.word	0x0002e8c7
   2eef0:	0002ef99 	.word	0x0002ef99
   2eef4:	0002efb5 	.word	0x0002efb5
   2eef8:	0002efcd 	.word	0x0002efcd
   2eefc:	f503 7240 	add.w	r2, r3, #768	; 0x300
   2ef00:	b292      	uxth	r2, r2
   2ef02:	2a0c      	cmp	r2, #12
   2ef04:	f63f acdf 	bhi.w	2e8c6 <hci_internal_cmd_put+0x7a>
   2ef08:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2ef0c:	2b0c      	cmp	r3, #12
   2ef0e:	f63f acda 	bhi.w	2e8c6 <hci_internal_cmd_put+0x7a>
   2ef12:	a201      	add	r2, pc, #4	; (adr r2, 2ef18 <hci_internal_cmd_put+0x6cc>)
   2ef14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2ef18:	0002efdf 	.word	0x0002efdf
   2ef1c:	0002f001 	.word	0x0002f001
   2ef20:	0002f007 	.word	0x0002f007
   2ef24:	0002f00d 	.word	0x0002f00d
   2ef28:	0002f013 	.word	0x0002f013
   2ef2c:	0002f019 	.word	0x0002f019
   2ef30:	0002e8c7 	.word	0x0002e8c7
   2ef34:	0002e8c7 	.word	0x0002e8c7
   2ef38:	0002e8c7 	.word	0x0002e8c7
   2ef3c:	0002f01f 	.word	0x0002f01f
   2ef40:	0002e8c7 	.word	0x0002e8c7
   2ef44:	0002e8c7 	.word	0x0002e8c7
   2ef48:	0002f025 	.word	0x0002f025
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2ef4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2ef50:	4817      	ldr	r0, [pc, #92]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2ef52:	330c      	adds	r3, #12
   2ef54:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2ef58:	f7de f9b0 	bl	d2bc <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   2ef5c:	f026 0308 	bic.w	r3, r6, #8
   2ef60:	f64f 5202 	movw	r2, #64770	; 0xfd02
   2ef64:	4293      	cmp	r3, r2
   2ef66:	e4c4      	b.n	2e8f2 <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2ef68:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2ef6c:	4810      	ldr	r0, [pc, #64]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2ef6e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   2ef70:	2202      	movs	r2, #2
   2ef72:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2ef74:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2ef78:	f009 fc2a 	bl	387d0 <memset>
	cmds->read_version_info = 1;
   2ef7c:	79e3      	ldrb	r3, [r4, #7]
   2ef7e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   2ef82:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2ef86:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   2ef88:	7a23      	ldrb	r3, [r4, #8]
   2ef8a:	f023 0307 	bic.w	r3, r3, #7
   2ef8e:	f043 0307 	orr.w	r3, r3, #7
   2ef92:	7223      	strb	r3, [r4, #8]
		return 0;
   2ef94:	2000      	movs	r0, #0
   2ef96:	e7e1      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2ef98:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2ef9c:	4804      	ldr	r0, [pc, #16]	; (2efb0 <hci_internal_cmd_put+0x764>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2ef9e:	3317      	adds	r3, #23
   2efa0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2efa4:	f7ef fd53 	bl	1ea4e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2efa8:	e7d8      	b.n	2ef5c <hci_internal_cmd_put+0x710>
   2efaa:	bf00      	nop
   2efac:	03001241 	.word	0x03001241
   2efb0:	20004de8 	.word	0x20004de8
		*param_length_out +=
   2efb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2efb8:	482c      	ldr	r0, [pc, #176]	; (2f06c <hci_internal_cmd_put+0x820>)
		*param_length_out +=
   2efba:	3320      	adds	r3, #32
   2efbc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2efc0:	f7ef fcf8 	bl	1e9b4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2efc4:	e7ca      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2efc6:	f7ef fd91 	bl	1eaec <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2efca:	e7c7      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2efcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2efd0:	4826      	ldr	r0, [pc, #152]	; (2f06c <hci_internal_cmd_put+0x820>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2efd2:	3301      	adds	r3, #1
   2efd4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2efd8:	f7ef fcd8 	bl	1e98c <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2efdc:	e7be      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2efde:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2efe2:	4822      	ldr	r0, [pc, #136]	; (2f06c <hci_internal_cmd_put+0x820>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2efe4:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   2efe6:	2202      	movs	r2, #2
   2efe8:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2efea:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2efee:	f009 fbef 	bl	387d0 <memset>
	cmds->read_supported_vs_commands = 1;
   2eff2:	79e3      	ldrb	r3, [r4, #7]
   2eff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2eff8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   2effc:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   2effe:	e7c9      	b.n	2ef94 <hci_internal_cmd_put+0x748>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2f000:	f7ef fcb1 	bl	1e966 <sdc_hci_cmd_vs_llpm_mode_set>
   2f004:	e7aa      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2f006:	f7ef fc82 	bl	1e90e <sdc_hci_cmd_vs_conn_update>
   2f00a:	e7a7      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2f00c:	f7ef fc77 	bl	1e8fe <sdc_hci_cmd_vs_conn_event_extend>
   2f010:	e7a4      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2f012:	f7ef fcb4 	bl	1e97e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2f016:	e7a1      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2f018:	f7ef fca3 	bl	1e962 <sdc_hci_cmd_vs_event_length_set>
   2f01c:	e79e      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   2f01e:	f7ef fcaa 	bl	1e976 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   2f022:	e79b      	b.n	2ef5c <hci_internal_cmd_put+0x710>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   2f024:	f7ef fcb0 	bl	1e988 <sdc_hci_cmd_vs_set_adv_randomness>
   2f028:	e798      	b.n	2ef5c <hci_internal_cmd_put+0x710>
	switch (hci_opcode) {
   2f02a:	f242 0326 	movw	r3, #8230	; 0x2026
   2f02e:	429e      	cmp	r6, r3
   2f030:	f67f ae15 	bls.w	2ec5e <hci_internal_cmd_put+0x412>
   2f034:	e4a3      	b.n	2e97e <hci_internal_cmd_put+0x132>
		switch (BT_OGF(opcode)) {
   2f036:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   2f038:	e4a1      	b.n	2e97e <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   2f03a:	3b2d      	subs	r3, #45	; 0x2d
   2f03c:	4a0c      	ldr	r2, [pc, #48]	; (2f070 <hci_internal_cmd_put+0x824>)
   2f03e:	b29b      	uxth	r3, r3
   2f040:	fa22 f303 	lsr.w	r3, r2, r3
   2f044:	07db      	lsls	r3, r3, #31
   2f046:	f57f ac9a 	bpl.w	2e97e <hci_internal_cmd_put+0x132>
   2f04a:	e648      	b.n	2ecde <hci_internal_cmd_put+0x492>
   2f04c:	f242 0385 	movw	r3, #8325	; 0x2085
   2f050:	429e      	cmp	r6, r3
   2f052:	d905      	bls.n	2f060 <hci_internal_cmd_put+0x814>
		return 0;
   2f054:	2000      	movs	r0, #0
   2f056:	e492      	b.n	2e97e <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   2f058:	f242 0385 	movw	r3, #8325	; 0x2085
   2f05c:	2001      	movs	r0, #1
   2f05e:	e454      	b.n	2e90a <hci_internal_cmd_put+0xbe>
		return 0;
   2f060:	2000      	movs	r0, #0
   2f062:	e454      	b.n	2e90e <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   2f064:	f04f 30ff 	mov.w	r0, #4294967295
   2f068:	e645      	b.n	2ecf6 <hci_internal_cmd_put+0x4aa>
   2f06a:	bf00      	nop
   2f06c:	20004de8 	.word	0x20004de8
   2f070:	01000401 	.word	0x01000401

0002f074 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   2f074:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   2f076:	4c09      	ldr	r4, [pc, #36]	; (2f09c <hci_internal_msg_get+0x28>)
   2f078:	7823      	ldrb	r3, [r4, #0]
{
   2f07a:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   2f07c:	b91b      	cbnz	r3, 2f086 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   2f07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   2f082:	f7ef bc1c 	b.w	1e8be <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   2f086:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   2f088:	1c61      	adds	r1, r4, #1
   2f08a:	3202      	adds	r2, #2
   2f08c:	f009 fb95 	bl	387ba <memcpy>
		cmd_complete_or_status.occurred = false;
   2f090:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2f092:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   2f094:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   2f096:	702b      	strb	r3, [r5, #0]
}
   2f098:	bd38      	pop	{r3, r4, r5, pc}
   2f09a:	bf00      	nop
   2f09c:	20004de1 	.word	0x20004de1

0002f0a0 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   2f0a0:	b570      	push	{r4, r5, r6, lr}
   2f0a2:	4606      	mov	r6, r0
   2f0a4:	460c      	mov	r4, r1
   2f0a6:	4d0d      	ldr	r5, [pc, #52]	; (2f0dc <bt_rand+0x3c>)
   2f0a8:	4628      	mov	r0, r5
   2f0aa:	f00c f9b7 	bl	3b41c <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   2f0ae:	b188      	cbz	r0, 2f0d4 <bt_rand+0x34>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   2f0b0:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   2f0b2:	68ab      	ldr	r3, [r5, #8]
   2f0b4:	681b      	ldr	r3, [r3, #0]
   2f0b6:	b943      	cbnz	r3, 2f0ca <bt_rand+0x2a>
   2f0b8:	4909      	ldr	r1, [pc, #36]	; (2f0e0 <bt_rand+0x40>)
   2f0ba:	480a      	ldr	r0, [pc, #40]	; (2f0e4 <bt_rand+0x44>)
   2f0bc:	224d      	movs	r2, #77	; 0x4d
   2f0be:	f008 ff83 	bl	37fc8 <assert_print>
   2f0c2:	4807      	ldr	r0, [pc, #28]	; (2f0e0 <bt_rand+0x40>)
   2f0c4:	214d      	movs	r1, #77	; 0x4d
   2f0c6:	f008 ff78 	bl	37fba <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   2f0ca:	4631      	mov	r1, r6
   2f0cc:	4628      	mov	r0, r5
}
   2f0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f0d2:	4718      	bx	r3
   2f0d4:	f06f 0012 	mvn.w	r0, #18
   2f0d8:	bd70      	pop	{r4, r5, r6, pc}
   2f0da:	bf00      	nop
   2f0dc:	0003b970 	.word	0x0003b970
   2f0e0:	0003e853 	.word	0x0003e853
   2f0e4:	0003c7f8 	.word	0x0003c7f8

0002f0e8 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2f0e8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   2f0ea:	b508      	push	{r3, lr}
   2f0ec:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2f0f0:	d90c      	bls.n	2f10c <sys_memcpy_swap.constprop.0+0x24>
   2f0f2:	4298      	cmp	r0, r3
   2f0f4:	d20f      	bcs.n	2f116 <sys_memcpy_swap.constprop.0+0x2e>
   2f0f6:	490c      	ldr	r1, [pc, #48]	; (2f128 <sys_memcpy_swap.constprop.0+0x40>)
   2f0f8:	480c      	ldr	r0, [pc, #48]	; (2f12c <sys_memcpy_swap.constprop.0+0x44>)
   2f0fa:	f240 2215 	movw	r2, #533	; 0x215
   2f0fe:	f008 ff63 	bl	37fc8 <assert_print>
   2f102:	4809      	ldr	r0, [pc, #36]	; (2f128 <sys_memcpy_swap.constprop.0+0x40>)
   2f104:	f240 2115 	movw	r1, #533	; 0x215
   2f108:	f008 ff57 	bl	37fba <assert_post_action>
   2f10c:	d0f3      	beq.n	2f0f6 <sys_memcpy_swap.constprop.0+0xe>
   2f10e:	f100 0220 	add.w	r2, r0, #32
   2f112:	4291      	cmp	r1, r2
   2f114:	e7ee      	b.n	2f0f4 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   2f116:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2f118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2f11c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2f120:	428b      	cmp	r3, r1
   2f122:	d1f9      	bne.n	2f118 <sys_memcpy_swap.constprop.0+0x30>
}
   2f124:	bd08      	pop	{r3, pc}
   2f126:	bf00      	nop
   2f128:	0003e963 	.word	0x0003e963
   2f12c:	0003c7f8 	.word	0x0003c7f8

0002f130 <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2f130:	4b1e      	ldr	r3, [pc, #120]	; (2f1ac <ecdh_p256_common_secret+0x7c>)
   2f132:	491f      	ldr	r1, [pc, #124]	; (2f1b0 <ecdh_p256_common_secret+0x80>)
   2f134:	f103 0220 	add.w	r2, r3, #32
   2f138:	2800      	cmp	r0, #0
   2f13a:	bf08      	it	eq
   2f13c:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   2f13e:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   2f140:	4610      	mov	r0, r2
   2f142:	f005 fcc3 	bl	34acc <ocrypto_ecdh_p256_common_secret>
	if (err) {
   2f146:	4602      	mov	r2, r0
   2f148:	b348      	cbz	r0, 2f19e <ecdh_p256_common_secret+0x6e>
		LOG_ERR("public key is not valid (err %d)", err);
   2f14a:	481a      	ldr	r0, [pc, #104]	; (2f1b4 <ecdh_p256_common_secret+0x84>)
   2f14c:	2145      	movs	r1, #69	; 0x45
   2f14e:	f008 ff49 	bl	37fe4 <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   2f152:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2f154:	f04f 32ff 	mov.w	r2, #4294967295
   2f158:	f04f 33ff 	mov.w	r3, #4294967295
   2f15c:	2001      	movs	r0, #1
   2f15e:	f7f6 ff7f 	bl	26060 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   2f162:	f100 060c 	add.w	r6, r0, #12
   2f166:	2102      	movs	r1, #2
   2f168:	4605      	mov	r5, r0
   2f16a:	4630      	mov	r0, r6
   2f16c:	f7fd f95e 	bl	2c42c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2f170:	233e      	movs	r3, #62	; 0x3e
   2f172:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2f174:	2322      	movs	r3, #34	; 0x22
   2f176:	7043      	strb	r3, [r0, #1]
   2f178:	2101      	movs	r1, #1
   2f17a:	4630      	mov	r0, r6
   2f17c:	f7fd f956 	bl	2c42c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2f180:	2309      	movs	r3, #9
   2f182:	7003      	strb	r3, [r0, #0]
   2f184:	2121      	movs	r1, #33	; 0x21
   2f186:	4630      	mov	r0, r6
   2f188:	f7fd f950 	bl	2c42c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   2f18c:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   2f190:	b13c      	cbz	r4, 2f1a2 <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2f192:	2220      	movs	r2, #32
   2f194:	21ff      	movs	r1, #255	; 0xff
   2f196:	f009 fb1b 	bl	387d0 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   2f19a:	4628      	mov	r0, r5
   2f19c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2f19e:	4604      	mov	r4, r0
   2f1a0:	e7d8      	b.n	2f154 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   2f1a2:	4905      	ldr	r1, [pc, #20]	; (2f1b8 <ecdh_p256_common_secret+0x88>)
   2f1a4:	f7ff ffa0 	bl	2f0e8 <sys_memcpy_swap.constprop.0>
   2f1a8:	e7f7      	b.n	2f19a <ecdh_p256_common_secret+0x6a>
   2f1aa:	bf00      	nop
   2f1ac:	20004e28 	.word	0x20004e28
   2f1b0:	0003e9d6 	.word	0x0003e9d6
   2f1b4:	0003e9a3 	.word	0x0003e9a3
   2f1b8:	20004e48 	.word	0x20004e48

0002f1bc <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   2f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f1be:	4b3b      	ldr	r3, [pc, #236]	; (2f2ac <ecdh_cmd_process+0xf0>)
   2f1c0:	f3bf 8f5b 	dmb	ish
   2f1c4:	681a      	ldr	r2, [r3, #0]
   2f1c6:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   2f1ca:	2a02      	cmp	r2, #2
   2f1cc:	461f      	mov	r7, r3
   2f1ce:	d065      	beq.n	2f29c <ecdh_cmd_process+0xe0>
   2f1d0:	2a04      	cmp	r2, #4
   2f1d2:	d068      	beq.n	2f2a6 <ecdh_cmd_process+0xea>
   2f1d4:	2a01      	cmp	r2, #1
   2f1d6:	d14a      	bne.n	2f26e <ecdh_cmd_process+0xb2>
		err = bt_rand(ecdh.private_key_be, 32);
   2f1d8:	4c35      	ldr	r4, [pc, #212]	; (2f2b0 <ecdh_cmd_process+0xf4>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   2f1da:	4e36      	ldr	r6, [pc, #216]	; (2f2b4 <ecdh_cmd_process+0xf8>)
		err = bt_rand(ecdh.private_key_be, 32);
   2f1dc:	2120      	movs	r1, #32
   2f1de:	4620      	mov	r0, r4
   2f1e0:	f7ff ff5e 	bl	2f0a0 <bt_rand>
		if (err) {
   2f1e4:	2800      	cmp	r0, #0
   2f1e6:	d14e      	bne.n	2f286 <ecdh_cmd_process+0xca>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   2f1e8:	2220      	movs	r2, #32
   2f1ea:	4631      	mov	r1, r6
   2f1ec:	4620      	mov	r0, r4
   2f1ee:	f009 fabd 	bl	3876c <memcmp>
   2f1f2:	2800      	cmp	r0, #0
   2f1f4:	d0f2      	beq.n	2f1dc <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   2f1f6:	4830      	ldr	r0, [pc, #192]	; (2f2b8 <ecdh_cmd_process+0xfc>)
   2f1f8:	4621      	mov	r1, r4
   2f1fa:	f005 fc53 	bl	34aa4 <ocrypto_ecdh_p256_public_key>
	} while (err);
   2f1fe:	4605      	mov	r5, r0
   2f200:	2800      	cmp	r0, #0
   2f202:	d1eb      	bne.n	2f1dc <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2f204:	f04f 32ff 	mov.w	r2, #4294967295
   2f208:	f04f 33ff 	mov.w	r3, #4294967295
   2f20c:	2001      	movs	r0, #1
   2f20e:	f7f6 ff27 	bl	26060 <bt_buf_get_rx>
   2f212:	f100 060c 	add.w	r6, r0, #12
   2f216:	2102      	movs	r1, #2
   2f218:	4604      	mov	r4, r0
   2f21a:	4630      	mov	r0, r6
   2f21c:	f7fd f906 	bl	2c42c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2f220:	233e      	movs	r3, #62	; 0x3e
   2f222:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2f224:	2342      	movs	r3, #66	; 0x42
   2f226:	7043      	strb	r3, [r0, #1]
   2f228:	2101      	movs	r1, #1
   2f22a:	4630      	mov	r0, r6
   2f22c:	f7fd f8fe 	bl	2c42c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2f230:	2308      	movs	r3, #8
   2f232:	7003      	strb	r3, [r0, #0]
   2f234:	2141      	movs	r1, #65	; 0x41
   2f236:	4630      	mov	r0, r6
   2f238:	f7fd f8f8 	bl	2c42c <net_buf_simple_add>
   2f23c:	4606      	mov	r6, r0
	evt->status = status;
   2f23e:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   2f242:	b315      	cbz	r5, 2f28a <ecdh_cmd_process+0xce>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2f244:	2240      	movs	r2, #64	; 0x40
   2f246:	2100      	movs	r1, #0
   2f248:	f009 fac2 	bl	387d0 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f24c:	f3bf 8f5b 	dmb	ish
   2f250:	2300      	movs	r3, #0
   2f252:	e857 2f00 	ldrex	r2, [r7]
   2f256:	e847 3100 	strex	r1, r3, [r7]
   2f25a:	2900      	cmp	r1, #0
   2f25c:	d1f9      	bne.n	2f252 <ecdh_cmd_process+0x96>
   2f25e:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   2f262:	b17c      	cbz	r4, 2f284 <ecdh_cmd_process+0xc8>
		bt_recv(buf);
   2f264:	4620      	mov	r0, r4
	}
}
   2f266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   2f26a:	f7f7 be5d 	b.w	26f28 <bt_recv>
   2f26e:	2200      	movs	r2, #0
   2f270:	f3bf 8f5b 	dmb	ish
   2f274:	e853 1f00 	ldrex	r1, [r3]
   2f278:	e843 2000 	strex	r0, r2, [r3]
   2f27c:	2800      	cmp	r0, #0
   2f27e:	d1f9      	bne.n	2f274 <ecdh_cmd_process+0xb8>
   2f280:	f3bf 8f5b 	dmb	ish
}
   2f284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_UNSPECIFIED;
   2f286:	251f      	movs	r5, #31
   2f288:	e7bc      	b.n	2f204 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   2f28a:	490b      	ldr	r1, [pc, #44]	; (2f2b8 <ecdh_cmd_process+0xfc>)
   2f28c:	f7ff ff2c 	bl	2f0e8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   2f290:	490a      	ldr	r1, [pc, #40]	; (2f2bc <ecdh_cmd_process+0x100>)
   2f292:	f106 0021 	add.w	r0, r6, #33	; 0x21
   2f296:	f7ff ff27 	bl	2f0e8 <sys_memcpy_swap.constprop.0>
		break;
   2f29a:	e7d7      	b.n	2f24c <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   2f29c:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   2f29e:	f7ff ff47 	bl	2f130 <ecdh_p256_common_secret>
   2f2a2:	4604      	mov	r4, r0
		break;
   2f2a4:	e7d2      	b.n	2f24c <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   2f2a6:	2001      	movs	r0, #1
   2f2a8:	e7f9      	b.n	2f29e <ecdh_cmd_process+0xe2>
   2f2aa:	bf00      	nop
   2f2ac:	20003fc8 	.word	0x20003fc8
   2f2b0:	20004e28 	.word	0x20004e28
   2f2b4:	0003e9d6 	.word	0x0003e9d6
   2f2b8:	20004e48 	.word	0x20004e48
   2f2bc:	20004e68 	.word	0x20004e68

0002f2c0 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   2f2c0:	b510      	push	{r4, lr}
   2f2c2:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   2f2c4:	2210      	movs	r2, #16
   2f2c6:	2100      	movs	r1, #0
   2f2c8:	a801      	add	r0, sp, #4
   2f2ca:	f009 fa81 	bl	387d0 <memset>
   2f2ce:	4c0b      	ldr	r4, [pc, #44]	; (2f2fc <ecdh_thread+0x3c>)
   2f2d0:	9405      	str	r4, [sp, #20]
   2f2d2:	2301      	movs	r3, #1
   2f2d4:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   2f2d8:	f04f 32ff 	mov.w	r2, #4294967295
   2f2dc:	f04f 33ff 	mov.w	r3, #4294967295
   2f2e0:	2101      	movs	r1, #1
   2f2e2:	a801      	add	r0, sp, #4
   2f2e4:	f005 faae 	bl	34844 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   2f2e8:	4620      	mov	r0, r4
   2f2ea:	f00c fab0 	bl	3b84e <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   2f2ee:	9b04      	ldr	r3, [sp, #16]
   2f2f0:	f36f 3394 	bfc	r3, #14, #7
   2f2f4:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   2f2f6:	f7ff ff61 	bl	2f1bc <ecdh_cmd_process>
	while (true) {
   2f2fa:	e7ed      	b.n	2f2d8 <ecdh_thread+0x18>
   2f2fc:	20003fb8 	.word	0x20003fb8

0002f300 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   2f300:	b510      	push	{r4, lr}
   2f302:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   2f304:	480e      	ldr	r0, [pc, #56]	; (2f340 <hci_ecdh_init+0x40>)
   2f306:	f00c fa9d 	bl	3b844 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2f30a:	4c0e      	ldr	r4, [pc, #56]	; (2f344 <hci_ecdh_init+0x44>)
   2f30c:	490e      	ldr	r1, [pc, #56]	; (2f348 <hci_ecdh_init+0x48>)
   2f30e:	2200      	movs	r2, #0
   2f310:	2300      	movs	r3, #0
   2f312:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2f316:	2300      	movs	r3, #0
   2f318:	220a      	movs	r2, #10
   2f31a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2f31e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2f322:	9300      	str	r3, [sp, #0]
   2f324:	f44f 7262 	mov.w	r2, #904	; 0x388
   2f328:	4b08      	ldr	r3, [pc, #32]	; (2f34c <hci_ecdh_init+0x4c>)
   2f32a:	4620      	mov	r0, r4
   2f32c:	f002 fd36 	bl	31d9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2f330:	4907      	ldr	r1, [pc, #28]	; (2f350 <hci_ecdh_init+0x50>)
   2f332:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   2f334:	b008      	add	sp, #32
   2f336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f33a:	f00c b8b1 	b.w	3b4a0 <z_impl_k_thread_name_set>
   2f33e:	bf00      	nop
   2f340:	20003fb8 	.word	0x20003fb8
   2f344:	20002fb0 	.word	0x20002fb0
   2f348:	20007b40 	.word	0x20007b40
   2f34c:	0002f2c1 	.word	0x0002f2c1
   2f350:	0003e9c9 	.word	0x0003e9c9

0002f354 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   2f354:	4801      	ldr	r0, [pc, #4]	; (2f35c <hci_ecdh_uninit+0x8>)
   2f356:	f7f6 bc47 	b.w	25be8 <z_impl_k_thread_abort>
   2f35a:	bf00      	nop
   2f35c:	20002fb0 	.word	0x20002fb0

0002f360 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   2f360:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2f362:	4b0b      	ldr	r3, [pc, #44]	; (2f390 <hci_cmd_le_read_local_p256_public_key+0x30>)
   2f364:	f3bf 8f5b 	dmb	ish
   2f368:	2201      	movs	r2, #1
   2f36a:	e853 1f00 	ldrex	r1, [r3]
   2f36e:	2900      	cmp	r1, #0
   2f370:	d103      	bne.n	2f37a <hci_cmd_le_read_local_p256_public_key+0x1a>
   2f372:	e843 2000 	strex	r0, r2, [r3]
   2f376:	2800      	cmp	r0, #0
   2f378:	d1f7      	bne.n	2f36a <hci_cmd_le_read_local_p256_public_key+0xa>
   2f37a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   2f37e:	d105      	bne.n	2f38c <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   2f380:	4804      	ldr	r0, [pc, #16]	; (2f394 <hci_cmd_le_read_local_p256_public_key+0x34>)
   2f382:	2100      	movs	r1, #0
   2f384:	f005 fb10 	bl	349a8 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   2f388:	2000      	movs	r0, #0
}
   2f38a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2f38c:	200c      	movs	r0, #12
   2f38e:	e7fc      	b.n	2f38a <hci_cmd_le_read_local_p256_public_key+0x2a>
   2f390:	20003fc8 	.word	0x20003fc8
   2f394:	20003fb8 	.word	0x20003fb8

0002f398 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   2f398:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2f39a:	2900      	cmp	r1, #0
   2f39c:	4b11      	ldr	r3, [pc, #68]	; (2f3e4 <cmd_le_generate_dhkey+0x4c>)
   2f39e:	f3bf 8f5b 	dmb	ish
{
   2f3a2:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2f3a4:	bf0c      	ite	eq
   2f3a6:	2202      	moveq	r2, #2
   2f3a8:	2204      	movne	r2, #4
   2f3aa:	e853 1f00 	ldrex	r1, [r3]
   2f3ae:	2900      	cmp	r1, #0
   2f3b0:	d103      	bne.n	2f3ba <cmd_le_generate_dhkey+0x22>
   2f3b2:	e843 2000 	strex	r0, r2, [r3]
   2f3b6:	2800      	cmp	r0, #0
   2f3b8:	d1f7      	bne.n	2f3aa <cmd_le_generate_dhkey+0x12>
   2f3ba:	f3bf 8f5b 	dmb	ish
   2f3be:	d10e      	bne.n	2f3de <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   2f3c0:	4621      	mov	r1, r4
   2f3c2:	4809      	ldr	r0, [pc, #36]	; (2f3e8 <cmd_le_generate_dhkey+0x50>)
   2f3c4:	f7ff fe90 	bl	2f0e8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   2f3c8:	4808      	ldr	r0, [pc, #32]	; (2f3ec <cmd_le_generate_dhkey+0x54>)
   2f3ca:	f104 0120 	add.w	r1, r4, #32
   2f3ce:	f7ff fe8b 	bl	2f0e8 <sys_memcpy_swap.constprop.0>
   2f3d2:	4807      	ldr	r0, [pc, #28]	; (2f3f0 <cmd_le_generate_dhkey+0x58>)
   2f3d4:	2100      	movs	r1, #0
   2f3d6:	f005 fae7 	bl	349a8 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   2f3da:	2000      	movs	r0, #0
}
   2f3dc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2f3de:	200c      	movs	r0, #12
   2f3e0:	e7fc      	b.n	2f3dc <cmd_le_generate_dhkey+0x44>
   2f3e2:	bf00      	nop
   2f3e4:	20003fc8 	.word	0x20003fc8
   2f3e8:	20004e48 	.word	0x20004e48
   2f3ec:	20004e68 	.word	0x20004e68
   2f3f0:	20003fb8 	.word	0x20003fb8

0002f3f4 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   2f3f4:	b508      	push	{r3, lr}
   2f3f6:	4602      	mov	r2, r0
   2f3f8:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   2f3fa:	4805      	ldr	r0, [pc, #20]	; (2f410 <m_assert_handler+0x1c>)
   2f3fc:	2145      	movs	r1, #69	; 0x45
   2f3fe:	f008 fdf1 	bl	37fe4 <z_log_minimal_printk>
	k_oops();
   2f402:	4040      	eors	r0, r0
   2f404:	f380 8811 	msr	BASEPRI, r0
   2f408:	f04f 0003 	mov.w	r0, #3
   2f40c:	df02      	svc	2
}
   2f40e:	bd08      	pop	{r3, pc}
   2f410:	0003ea02 	.word	0x0003ea02

0002f414 <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   2f414:	4901      	ldr	r1, [pc, #4]	; (2f41c <mpsl_low_prio_irq_handler+0x8>)
   2f416:	4802      	ldr	r0, [pc, #8]	; (2f420 <mpsl_low_prio_irq_handler+0xc>)
   2f418:	f00c b8f0 	b.w	3b5fc <k_work_submit_to_queue>
   2f41c:	20003ffc 	.word	0x20003ffc
   2f420:	20003048 	.word	0x20003048

0002f424 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   2f424:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2f426:	2332      	movs	r3, #50	; 0x32
   2f428:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2f42c:	4a13      	ldr	r2, [pc, #76]	; (2f47c <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   2f42e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   2f430:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2f432:	2119      	movs	r1, #25
   2f434:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   2f436:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   2f43a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   2f43e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2f442:	f7ed ffa3 	bl	1d38c <mpsl_init>
	if (err) {
   2f446:	4604      	mov	r4, r0
   2f448:	b9a0      	cbnz	r0, 2f474 <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   2f44a:	480d      	ldr	r0, [pc, #52]	; (2f480 <mpsl_lib_init_sys+0x5c>)
   2f44c:	4629      	mov	r1, r5
   2f44e:	f7f3 fc8d 	bl	22d6c <mpsl_timeslot_session_count_set>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   2f452:	4604      	mov	r4, r0
   2f454:	b970      	cbnz	r0, 2f474 <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2f456:	4601      	mov	r1, r0
   2f458:	462a      	mov	r2, r5
   2f45a:	2008      	movs	r0, #8
   2f45c:	f7f5 fff4 	bl	25448 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2f460:	462a      	mov	r2, r5
   2f462:	4621      	mov	r1, r4
   2f464:	200b      	movs	r0, #11
   2f466:	f7f5 ffef 	bl	25448 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2f46a:	462a      	mov	r2, r5
   2f46c:	4621      	mov	r1, r4
   2f46e:	4628      	mov	r0, r5
   2f470:	f7f5 ffea 	bl	25448 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   2f474:	4620      	mov	r0, r4
   2f476:	b003      	add	sp, #12
   2f478:	bd30      	pop	{r4, r5, pc}
   2f47a:	bf00      	nop
   2f47c:	0002f3f5 	.word	0x0002f3f5
   2f480:	20003fcc 	.word	0x20003fcc

0002f484 <mpsl_low_prio_work_handler>:
{
   2f484:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2f486:	f04f 30ff 	mov.w	r0, #4294967295
   2f48a:	f04f 31ff 	mov.w	r1, #4294967295
   2f48e:	f7ff f80d 	bl	2e4ac <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2f492:	b140      	cbz	r0, 2f4a6 <mpsl_low_prio_work_handler+0x22>
   2f494:	4907      	ldr	r1, [pc, #28]	; (2f4b4 <mpsl_low_prio_work_handler+0x30>)
   2f496:	4808      	ldr	r0, [pc, #32]	; (2f4b8 <mpsl_low_prio_work_handler+0x34>)
   2f498:	2247      	movs	r2, #71	; 0x47
   2f49a:	f008 fd95 	bl	37fc8 <assert_print>
   2f49e:	4805      	ldr	r0, [pc, #20]	; (2f4b4 <mpsl_low_prio_work_handler+0x30>)
   2f4a0:	2147      	movs	r1, #71	; 0x47
   2f4a2:	f008 fd8a 	bl	37fba <assert_post_action>
	mpsl_low_priority_process();
   2f4a6:	f7f3 fd5e 	bl	22f66 <mpsl_low_priority_process>
}
   2f4aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2f4ae:	f7ff b805 	b.w	2e4bc <multithreading_lock_release>
   2f4b2:	bf00      	nop
   2f4b4:	0003ea1b 	.word	0x0003ea1b
   2f4b8:	0003c7f8 	.word	0x0003c7f8

0002f4bc <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   2f4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   2f4be:	4d0d      	ldr	r5, [pc, #52]	; (2f4f4 <mpsl_low_prio_init+0x38>)
   2f4c0:	490d      	ldr	r1, [pc, #52]	; (2f4f8 <mpsl_low_prio_init+0x3c>)
   2f4c2:	2400      	movs	r4, #0
   2f4c4:	9400      	str	r4, [sp, #0]
   2f4c6:	f06f 0309 	mvn.w	r3, #9
   2f4ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2f4ce:	4628      	mov	r0, r5
   2f4d0:	f003 fa9c 	bl	32a0c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   2f4d4:	4909      	ldr	r1, [pc, #36]	; (2f4fc <mpsl_low_prio_init+0x40>)
   2f4d6:	4628      	mov	r0, r5
   2f4d8:	f00b ffe2 	bl	3b4a0 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   2f4dc:	4908      	ldr	r1, [pc, #32]	; (2f500 <mpsl_low_prio_init+0x44>)
   2f4de:	4809      	ldr	r0, [pc, #36]	; (2f504 <mpsl_low_prio_init+0x48>)
   2f4e0:	f003 f9de 	bl	328a0 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2f4e4:	4622      	mov	r2, r4
   2f4e6:	2104      	movs	r1, #4
   2f4e8:	2019      	movs	r0, #25
   2f4ea:	f7f5 ffad 	bl	25448 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2f4ee:	4620      	mov	r0, r4
   2f4f0:	b003      	add	sp, #12
   2f4f2:	bd30      	pop	{r4, r5, pc}
   2f4f4:	20003048 	.word	0x20003048
   2f4f8:	20007f40 	.word	0x20007f40
   2f4fc:	0003ea48 	.word	0x0003ea48
   2f500:	0002f485 	.word	0x0002f485
   2f504:	20003ffc 	.word	0x20003ffc

0002f508 <mpsl_fem_utils_ppi_channel_alloc>:
#elif IS_ENABLED(CONFIG_HAS_HW_NRF_DPPIC)
#include <nrfx_dppi.h>
#endif

int mpsl_fem_utils_ppi_channel_alloc(uint8_t *ppi_channels, size_t size)
{
   2f508:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < size; i++) {
		IF_ENABLED(CONFIG_HAS_HW_NRF_PPI,
			(err = nrfx_ppi_channel_alloc(&ppi_channels[i]);));
		IF_ENABLED(CONFIG_HAS_HW_NRF_DPPIC,
			(err = nrfx_dppi_channel_alloc(&ppi_channels[i]);));
		if (err != NRFX_SUCCESS) {
   2f50a:	4e08      	ldr	r6, [pc, #32]	; (2f52c <mpsl_fem_utils_ppi_channel_alloc+0x24>)
   2f50c:	4604      	mov	r4, r0
   2f50e:	1845      	adds	r5, r0, r1
	for (int i = 0; i < size; i++) {
   2f510:	42ac      	cmp	r4, r5
   2f512:	d101      	bne.n	2f518 <mpsl_fem_utils_ppi_channel_alloc+0x10>
			return -ENOMEM;
		}
	}

	return 0;
   2f514:	2000      	movs	r0, #0
}
   2f516:	bd70      	pop	{r4, r5, r6, pc}
		IF_ENABLED(CONFIG_HAS_HW_NRF_PPI,
   2f518:	4620      	mov	r0, r4
   2f51a:	f001 f90f 	bl	3073c <nrfx_ppi_channel_alloc>
		if (err != NRFX_SUCCESS) {
   2f51e:	42b0      	cmp	r0, r6
   2f520:	f104 0401 	add.w	r4, r4, #1
   2f524:	d0f4      	beq.n	2f510 <mpsl_fem_utils_ppi_channel_alloc+0x8>
			return -ENOMEM;
   2f526:	f06f 000b 	mvn.w	r0, #11
   2f52a:	e7f4      	b.n	2f516 <mpsl_fem_utils_ppi_channel_alloc+0xe>
   2f52c:	0bad0000 	.word	0x0bad0000

0002f530 <mpsl_fem_init>:

	return mpsl_fem_simple_gpio_interface_config_set(&cfg);
}

static int mpsl_fem_init(const struct device *dev)
{
   2f530:	b510      	push	{r4, lr}
	if (err) {
		return err;
	}
#endif /* IS_ENABLED(CONFIG_MPSL_FEM_POWER_MODEL) */

	mpsl_fem_device_config_254_apply_set(IS_ENABLED(CONFIG_MPSL_FEM_DEVICE_CONFIG_254));
   2f532:	2001      	movs	r0, #1
{
   2f534:	b08e      	sub	sp, #56	; 0x38
	mpsl_fem_device_config_254_apply_set(IS_ENABLED(CONFIG_MPSL_FEM_DEVICE_CONFIG_254));
   2f536:	f7ee f99f 	bl	1d878 <mpsl_fem_device_config_254_apply_set>
	if (nrfx_gpiote_channel_alloc(&ctx_gpiote_channel) != NRFX_SUCCESS) {
   2f53a:	f10d 0006 	add.w	r0, sp, #6
   2f53e:	f000 fe6f 	bl	30220 <nrfx_gpiote_channel_alloc>
   2f542:	4b21      	ldr	r3, [pc, #132]	; (2f5c8 <mpsl_fem_init+0x98>)
   2f544:	4298      	cmp	r0, r3
   2f546:	4604      	mov	r4, r0
   2f548:	d003      	beq.n	2f552 <mpsl_fem_init+0x22>
		return -ENOMEM;
   2f54a:	f06f 000b 	mvn.w	r0, #11

	return fem_simple_gpio_configure();
}
   2f54e:	b00e      	add	sp, #56	; 0x38
   2f550:	bd10      	pop	{r4, pc}
	if (nrfx_gpiote_channel_alloc(&crx_gpiote_channel) != NRFX_SUCCESS) {
   2f552:	f10d 0007 	add.w	r0, sp, #7
   2f556:	f000 fe63 	bl	30220 <nrfx_gpiote_channel_alloc>
   2f55a:	42a0      	cmp	r0, r4
   2f55c:	d1f5      	bne.n	2f54a <mpsl_fem_init+0x1a>
	mpsl_fem_simple_gpio_interface_config_t cfg = {
   2f55e:	2226      	movs	r2, #38	; 0x26
   2f560:	2100      	movs	r1, #0
   2f562:	f10d 0012 	add.w	r0, sp, #18
   2f566:	f009 f933 	bl	387d0 <memset>
   2f56a:	2301      	movs	r3, #1
   2f56c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2f570:	f88d 301c 	strb.w	r3, [sp, #28]
   2f574:	f88d 3020 	strb.w	r3, [sp, #32]
   2f578:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   2f57c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2f580:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2f584:	f240 6301 	movw	r3, #1537	; 0x601
   2f588:	2208      	movs	r2, #8
   2f58a:	2105      	movs	r1, #5
   2f58c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   2f590:	f240 1301 	movw	r3, #257	; 0x101
   2f594:	f88d 2010 	strb.w	r2, [sp, #16]
   2f598:	f88d 2011 	strb.w	r2, [sp, #17]
   2f59c:	f88d 101d 	strb.w	r1, [sp, #29]
   2f5a0:	4a0a      	ldr	r2, [pc, #40]	; (2f5cc <mpsl_fem_init+0x9c>)
   2f5a2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	IF_ENABLED(CONFIG_HAS_HW_NRF_PPI,
   2f5a6:	2102      	movs	r1, #2
	mpsl_fem_simple_gpio_interface_config_t cfg = {
   2f5a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f5ac:	9206      	str	r2, [sp, #24]
	IF_ENABLED(CONFIG_HAS_HW_NRF_PPI,
   2f5ae:	a80d      	add	r0, sp, #52	; 0x34
	mpsl_fem_simple_gpio_interface_config_t cfg = {
   2f5b0:	920a      	str	r2, [sp, #40]	; 0x28
   2f5b2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	IF_ENABLED(CONFIG_HAS_HW_NRF_PPI,
   2f5b6:	f7ff ffa7 	bl	2f508 <mpsl_fem_utils_ppi_channel_alloc>
	if (err) {
   2f5ba:	2800      	cmp	r0, #0
   2f5bc:	d1c7      	bne.n	2f54e <mpsl_fem_init+0x1e>
	return mpsl_fem_simple_gpio_interface_config_set(&cfg);
   2f5be:	a802      	add	r0, sp, #8
   2f5c0:	f7ee fbdc 	bl	1dd7c <mpsl_fem_simple_gpio_interface_config_set>
	return fem_simple_gpio_configure();
   2f5c4:	e7c3      	b.n	2f54e <mpsl_fem_init+0x1e>
   2f5c6:	bf00      	nop
   2f5c8:	0bad0000 	.word	0x0bad0000
   2f5cc:	50000300 	.word	0x50000300

0002f5d0 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2f5d0:	4b01      	ldr	r3, [pc, #4]	; (2f5d8 <mpsl_hfclk_callback+0x8>)
   2f5d2:	2000      	movs	r0, #0
   2f5d4:	681b      	ldr	r3, [r3, #0]
   2f5d6:	4718      	bx	r3
   2f5d8:	2000400c 	.word	0x2000400c

0002f5dc <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2f5dc:	b510      	push	{r4, lr}
	switch (domain) {
   2f5de:	b130      	cbz	r0, 2f5ee <nrfx_clock_start+0x12>
   2f5e0:	2801      	cmp	r0, #1
   2f5e2:	d10a      	bne.n	2f5fa <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2f5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   2f5e8:	4808      	ldr	r0, [pc, #32]	; (2f60c <nrfx_clock_start+0x30>)
   2f5ea:	f7ed bd31 	b.w	1d050 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2f5ee:	4b08      	ldr	r3, [pc, #32]	; (2f610 <nrfx_clock_start+0x34>)
}
   2f5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2f5f4:	681b      	ldr	r3, [r3, #0]
   2f5f6:	2001      	movs	r0, #1
   2f5f8:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   2f5fa:	4906      	ldr	r1, [pc, #24]	; (2f614 <nrfx_clock_start+0x38>)
   2f5fc:	4806      	ldr	r0, [pc, #24]	; (2f618 <nrfx_clock_start+0x3c>)
   2f5fe:	221c      	movs	r2, #28
   2f600:	f008 fce2 	bl	37fc8 <assert_print>
   2f604:	4803      	ldr	r0, [pc, #12]	; (2f614 <nrfx_clock_start+0x38>)
   2f606:	211c      	movs	r1, #28
   2f608:	f008 fcd7 	bl	37fba <assert_post_action>
   2f60c:	0002f5d1 	.word	0x0002f5d1
   2f610:	2000400c 	.word	0x2000400c
   2f614:	0003ea5c 	.word	0x0003ea5c
   2f618:	0003c7f8 	.word	0x0003c7f8

0002f61c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   2f61c:	b508      	push	{r3, lr}
	switch (domain) {
   2f61e:	b170      	cbz	r0, 2f63e <nrfx_clock_stop+0x22>
   2f620:	2801      	cmp	r0, #1
   2f622:	d103      	bne.n	2f62c <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   2f624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   2f628:	f7ed bd04 	b.w	1d034 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   2f62c:	4904      	ldr	r1, [pc, #16]	; (2f640 <nrfx_clock_stop+0x24>)
   2f62e:	4805      	ldr	r0, [pc, #20]	; (2f644 <nrfx_clock_stop+0x28>)
   2f630:	222a      	movs	r2, #42	; 0x2a
   2f632:	f008 fcc9 	bl	37fc8 <assert_print>
   2f636:	4802      	ldr	r0, [pc, #8]	; (2f640 <nrfx_clock_stop+0x24>)
   2f638:	212a      	movs	r1, #42	; 0x2a
   2f63a:	f008 fcbe 	bl	37fba <assert_post_action>
}
   2f63e:	bd08      	pop	{r3, pc}
   2f640:	0003ea5c 	.word	0x0003ea5c
   2f644:	0003c7f8 	.word	0x0003c7f8

0002f648 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   2f648:	4b01      	ldr	r3, [pc, #4]	; (2f650 <nrfx_clock_init+0x8>)
   2f64a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   2f64c:	4801      	ldr	r0, [pc, #4]	; (2f654 <nrfx_clock_init+0xc>)
   2f64e:	4770      	bx	lr
   2f650:	2000400c 	.word	0x2000400c
   2f654:	0bad0000 	.word	0x0bad0000

0002f658 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   2f658:	b510      	push	{r4, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   2f65a:	4c28      	ldr	r4, [pc, #160]	; (2f6fc <timeslot_callback+0xa4>)
   2f65c:	7e23      	ldrb	r3, [r4, #24]
   2f65e:	4283      	cmp	r3, r0
   2f660:	d008      	beq.n	2f674 <timeslot_callback+0x1c>
   2f662:	4927      	ldr	r1, [pc, #156]	; (2f700 <timeslot_callback+0xa8>)
   2f664:	4827      	ldr	r0, [pc, #156]	; (2f704 <timeslot_callback+0xac>)
   2f666:	2250      	movs	r2, #80	; 0x50
   2f668:	f008 fcae 	bl	37fc8 <assert_print>
   2f66c:	2150      	movs	r1, #80	; 0x50
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2f66e:	4824      	ldr	r0, [pc, #144]	; (2f700 <timeslot_callback+0xa8>)
   2f670:	f008 fca3 	bl	37fba <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f674:	f3bf 8f5b 	dmb	ish
   2f678:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2f67a:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   2f67e:	bb13      	cbnz	r3, 2f6c6 <timeslot_callback+0x6e>
		return NULL;
	}

	switch (signal) {
   2f680:	2909      	cmp	r1, #9
   2f682:	d834      	bhi.n	2f6ee <timeslot_callback+0x96>
   2f684:	e8df f001 	tbb	[pc, r1]
   2f688:	33333305 	.word	0x33333305
   2f68c:	1c212133 	.word	0x1c212133
   2f690:	1f33      	.short	0x1f33
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   2f692:	6a23      	ldr	r3, [r4, #32]
   2f694:	e9d3 2000 	ldrd	r2, r0, [r3]
   2f698:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   2f69a:	2801      	cmp	r0, #1
   2f69c:	d005      	beq.n	2f6aa <timeslot_callback+0x52>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
			_context.return_param.callback_action =
   2f69e:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   2f6a0:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   2f6a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   2f6a6:	4818      	ldr	r0, [pc, #96]	; (2f708 <timeslot_callback+0xb0>)
   2f6a8:	e00e      	b.n	2f6c8 <timeslot_callback+0x70>
			_context.timeslot_request.params.earliest.timeout_us =
   2f6aa:	f247 5330 	movw	r3, #30000	; 0x7530
   2f6ae:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   2f6b0:	2303      	movs	r3, #3
   2f6b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   2f6b6:	4b15      	ldr	r3, [pc, #84]	; (2f70c <timeslot_callback+0xb4>)
			_context.timeslot_request.params.earliest.priority =
   2f6b8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   2f6bc:	63a3      	str	r3, [r4, #56]	; 0x38
   2f6be:	e7f2      	b.n	2f6a6 <timeslot_callback+0x4e>
	z_impl_k_sem_give(sem);
   2f6c0:	480e      	ldr	r0, [pc, #56]	; (2f6fc <timeslot_callback+0xa4>)
   2f6c2:	f002 fe59 	bl	32378 <z_impl_k_sem_give>
		return NULL;
   2f6c6:	2000      	movs	r0, #0
}
   2f6c8:	bd10      	pop	{r4, pc}
	_context.timeslot_request.params.earliest.priority =
   2f6ca:	2300      	movs	r3, #0
   2f6cc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2f6d0:	490e      	ldr	r1, [pc, #56]	; (2f70c <timeslot_callback+0xb4>)
	_context.timeslot_request.params.earliest.timeout_us =
   2f6d2:	4b0f      	ldr	r3, [pc, #60]	; (2f710 <timeslot_callback+0xb8>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2f6d4:	7e20      	ldrb	r0, [r4, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   2f6d6:	6323      	str	r3, [r4, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   2f6d8:	f7f3 faec 	bl	22cb4 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2f6dc:	2800      	cmp	r0, #0
   2f6de:	d0f2      	beq.n	2f6c6 <timeslot_callback+0x6e>
   2f6e0:	4907      	ldr	r1, [pc, #28]	; (2f700 <timeslot_callback+0xa8>)
   2f6e2:	4808      	ldr	r0, [pc, #32]	; (2f704 <timeslot_callback+0xac>)
   2f6e4:	2248      	movs	r2, #72	; 0x48
   2f6e6:	f008 fc6f 	bl	37fc8 <assert_print>
   2f6ea:	2148      	movs	r1, #72	; 0x48
   2f6ec:	e7bf      	b.n	2f66e <timeslot_callback+0x16>
		__ASSERT(false, "unexpected signal: %u", signal);
   2f6ee:	4904      	ldr	r1, [pc, #16]	; (2f700 <timeslot_callback+0xa8>)
   2f6f0:	4804      	ldr	r0, [pc, #16]	; (2f704 <timeslot_callback+0xac>)
   2f6f2:	227c      	movs	r2, #124	; 0x7c
   2f6f4:	f008 fc68 	bl	37fc8 <assert_print>
   2f6f8:	217c      	movs	r1, #124	; 0x7c
   2f6fa:	e7b8      	b.n	2f66e <timeslot_callback+0x16>
   2f6fc:	20004010 	.word	0x20004010
   2f700:	0003ea99 	.word	0x0003ea99
   2f704:	0003c7f8 	.word	0x0003c7f8
   2f708:	20004044 	.word	0x20004044
   2f70c:	20004034 	.word	0x20004034
   2f710:	0f423fff 	.word	0x0f423fff

0002f714 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   2f714:	4802      	ldr	r0, [pc, #8]	; (2f720 <nrf_flash_sync_init+0xc>)
   2f716:	2201      	movs	r2, #1
   2f718:	2100      	movs	r1, #0
   2f71a:	f00b bf0c 	b.w	3b536 <z_impl_k_sem_init>
   2f71e:	bf00      	nop
   2f720:	20004010 	.word	0x20004010

0002f724 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   2f724:	4b01      	ldr	r3, [pc, #4]	; (2f72c <nrf_flash_sync_set_context+0x8>)
   2f726:	61d8      	str	r0, [r3, #28]
}
   2f728:	4770      	bx	lr
   2f72a:	bf00      	nop
   2f72c:	20004010 	.word	0x20004010

0002f730 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   2f730:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2f732:	f04f 31ff 	mov.w	r1, #4294967295
{
   2f736:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2f738:	f04f 30ff 	mov.w	r0, #4294967295
   2f73c:	f7fe feb6 	bl	2e4ac <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2f740:	4605      	mov	r5, r0
   2f742:	b140      	cbz	r0, 2f756 <nrf_flash_sync_exe+0x26>
   2f744:	4947      	ldr	r1, [pc, #284]	; (2f864 <nrf_flash_sync_exe+0x134>)
   2f746:	4848      	ldr	r0, [pc, #288]	; (2f868 <nrf_flash_sync_exe+0x138>)
   2f748:	2299      	movs	r2, #153	; 0x99
   2f74a:	f008 fc3d 	bl	37fc8 <assert_print>
   2f74e:	2199      	movs	r1, #153	; 0x99

	_context.op_desc = op_desc;
	_context.status = -ETIMEDOUT;
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   2f750:	4844      	ldr	r0, [pc, #272]	; (2f864 <nrf_flash_sync_exe+0x134>)
   2f752:	f008 fc32 	bl	37fba <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   2f756:	4945      	ldr	r1, [pc, #276]	; (2f86c <nrf_flash_sync_exe+0x13c>)
   2f758:	4845      	ldr	r0, [pc, #276]	; (2f870 <nrf_flash_sync_exe+0x140>)
   2f75a:	f7ea fa17 	bl	19b8c <mpsl_timeslot_session_open>
   2f75e:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2f760:	f7fe feac 	bl	2e4bc <multithreading_lock_release>
	if (ret < 0) {
   2f764:	2c00      	cmp	r4, #0
   2f766:	da07      	bge.n	2f778 <nrf_flash_sync_exe+0x48>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   2f768:	4842      	ldr	r0, [pc, #264]	; (2f874 <nrf_flash_sync_exe+0x144>)
   2f76a:	4622      	mov	r2, r4
   2f76c:	2145      	movs	r1, #69	; 0x45
   2f76e:	f008 fc39 	bl	37fe4 <z_log_minimal_printk>
		return -ENOMEM;
   2f772:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   2f776:	bd70      	pop	{r4, r5, r6, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2f778:	4c3f      	ldr	r4, [pc, #252]	; (2f878 <nrf_flash_sync_exe+0x148>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   2f77a:	f240 1301 	movw	r3, #257	; 0x101
   2f77e:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2f780:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   2f782:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2f784:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   2f786:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   2f788:	f247 5330 	movw	r3, #30000	; 0x7530
   2f78c:	6323      	str	r3, [r4, #48]	; 0x30
	_context.status = -ETIMEDOUT;
   2f78e:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2f792:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   2f796:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f798:	f104 0640 	add.w	r6, r4, #64	; 0x40
   2f79c:	f3bf 8f5b 	dmb	ish
   2f7a0:	e856 3f00 	ldrex	r3, [r6]
   2f7a4:	e846 5200 	strex	r2, r5, [r6]
   2f7a8:	2a00      	cmp	r2, #0
   2f7aa:	d1f9      	bne.n	2f7a0 <nrf_flash_sync_exe+0x70>
   2f7ac:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   2f7b0:	68a3      	ldr	r3, [r4, #8]
   2f7b2:	b133      	cbz	r3, 2f7c2 <nrf_flash_sync_exe+0x92>
   2f7b4:	492b      	ldr	r1, [pc, #172]	; (2f864 <nrf_flash_sync_exe+0x134>)
   2f7b6:	482c      	ldr	r0, [pc, #176]	; (2f868 <nrf_flash_sync_exe+0x138>)
   2f7b8:	22af      	movs	r2, #175	; 0xaf
   2f7ba:	f008 fc05 	bl	37fc8 <assert_print>
   2f7be:	21af      	movs	r1, #175	; 0xaf
   2f7c0:	e7c6      	b.n	2f750 <nrf_flash_sync_exe+0x20>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2f7c2:	f04f 30ff 	mov.w	r0, #4294967295
   2f7c6:	f04f 31ff 	mov.w	r1, #4294967295
   2f7ca:	f7fe fe6f 	bl	2e4ac <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2f7ce:	b130      	cbz	r0, 2f7de <nrf_flash_sync_exe+0xae>
   2f7d0:	4924      	ldr	r1, [pc, #144]	; (2f864 <nrf_flash_sync_exe+0x134>)
   2f7d2:	4825      	ldr	r0, [pc, #148]	; (2f868 <nrf_flash_sync_exe+0x138>)
   2f7d4:	22b2      	movs	r2, #178	; 0xb2
   2f7d6:	f008 fbf7 	bl	37fc8 <assert_print>
   2f7da:	21b2      	movs	r1, #178	; 0xb2
   2f7dc:	e7b8      	b.n	2f750 <nrf_flash_sync_exe+0x20>
	ret = mpsl_timeslot_request(_context.session_id, req);
   2f7de:	7e20      	ldrb	r0, [r4, #24]
   2f7e0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   2f7e4:	f7f3 fa66 	bl	22cb4 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2f7e8:	b130      	cbz	r0, 2f7f8 <nrf_flash_sync_exe+0xc8>
   2f7ea:	491e      	ldr	r1, [pc, #120]	; (2f864 <nrf_flash_sync_exe+0x134>)
   2f7ec:	481e      	ldr	r0, [pc, #120]	; (2f868 <nrf_flash_sync_exe+0x138>)
   2f7ee:	22b4      	movs	r2, #180	; 0xb4
   2f7f0:	f008 fbea 	bl	37fc8 <assert_print>
   2f7f4:	21b4      	movs	r1, #180	; 0xb4
   2f7f6:	e7ab      	b.n	2f750 <nrf_flash_sync_exe+0x20>
	MULTITHREADING_LOCK_RELEASE();
   2f7f8:	f7fe fe60 	bl	2e4bc <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   2f7fc:	4a1f      	ldr	r2, [pc, #124]	; (2f87c <nrf_flash_sync_exe+0x14c>)
   2f7fe:	2300      	movs	r3, #0
   2f800:	4620      	mov	r0, r4
   2f802:	f002 fdf5 	bl	323f0 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   2f806:	2800      	cmp	r0, #0
   2f808:	da0e      	bge.n	2f828 <nrf_flash_sync_exe+0xf8>
		LOG_ERR("timeout");
   2f80a:	481d      	ldr	r0, [pc, #116]	; (2f880 <nrf_flash_sync_exe+0x150>)
   2f80c:	2145      	movs	r1, #69	; 0x45
   2f80e:	f008 fbe9 	bl	37fe4 <z_log_minimal_printk>
   2f812:	f3bf 8f5b 	dmb	ish
   2f816:	2301      	movs	r3, #1
   2f818:	e856 2f00 	ldrex	r2, [r6]
   2f81c:	e846 3100 	strex	r1, r3, [r6]
   2f820:	2900      	cmp	r1, #0
   2f822:	d1f9      	bne.n	2f818 <nrf_flash_sync_exe+0xe8>
   2f824:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2f828:	f04f 30ff 	mov.w	r0, #4294967295
   2f82c:	f04f 31ff 	mov.w	r1, #4294967295
   2f830:	f7fe fe3c 	bl	2e4ac <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2f834:	b130      	cbz	r0, 2f844 <nrf_flash_sync_exe+0x114>
   2f836:	490b      	ldr	r1, [pc, #44]	; (2f864 <nrf_flash_sync_exe+0x134>)
   2f838:	480b      	ldr	r0, [pc, #44]	; (2f868 <nrf_flash_sync_exe+0x138>)
   2f83a:	22bf      	movs	r2, #191	; 0xbf
   2f83c:	f008 fbc4 	bl	37fc8 <assert_print>
   2f840:	21bf      	movs	r1, #191	; 0xbf
   2f842:	e785      	b.n	2f750 <nrf_flash_sync_exe+0x20>
	mpsl_timeslot_session_close(_context.session_id);
   2f844:	7e20      	ldrb	r0, [r4, #24]
   2f846:	f7f3 fa70 	bl	22d2a <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   2f84a:	f7fe fe37 	bl	2e4bc <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f84e:	f3bf 8f5b 	dmb	ish
   2f852:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2f854:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   2f858:	b113      	cbz	r3, 2f860 <nrf_flash_sync_exe+0x130>
	z_impl_k_sem_reset(sem);
   2f85a:	4807      	ldr	r0, [pc, #28]	; (2f878 <nrf_flash_sync_exe+0x148>)
   2f85c:	f002 fe28 	bl	324b0 <z_impl_k_sem_reset>
	return _context.status;
   2f860:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2f862:	e788      	b.n	2f776 <nrf_flash_sync_exe+0x46>
   2f864:	0003ea99 	.word	0x0003ea99
   2f868:	0003c7f8 	.word	0x0003c7f8
   2f86c:	20004028 	.word	0x20004028
   2f870:	0002f659 	.word	0x0002f659
   2f874:	0003ead3 	.word	0x0003ead3
   2f878:	20004010 	.word	0x20004010
   2f87c:	000b7b44 	.word	0x000b7b44
   2f880:	0003eafe 	.word	0x0003eafe

0002f884 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f884:	4b07      	ldr	r3, [pc, #28]	; (2f8a4 <nrf_flash_sync_check_time_limit+0x20>)
   2f886:	2201      	movs	r2, #1
   2f888:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   2f88a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   2f88e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   2f892:	4418      	add	r0, r3
   2f894:	4b04      	ldr	r3, [pc, #16]	; (2f8a8 <nrf_flash_sync_check_time_limit+0x24>)
   2f896:	69db      	ldr	r3, [r3, #28]
}
   2f898:	4298      	cmp	r0, r3
   2f89a:	bf34      	ite	cc
   2f89c:	2000      	movcc	r0, #0
   2f89e:	2001      	movcs	r0, #1
   2f8a0:	4770      	bx	lr
   2f8a2:	bf00      	nop
   2f8a4:	40008000 	.word	0x40008000
   2f8a8:	20004010 	.word	0x20004010

0002f8ac <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   2f8ac:	b530      	push	{r4, r5, lr}
   2f8ae:	b087      	sub	sp, #28
   2f8b0:	4604      	mov	r4, r0
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   2f8b2:	6885      	ldr	r5, [r0, #8]
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);

    erased_val = flash_area_erased_val(fap);
   2f8b4:	f008 fc1e 	bl	380f4 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
   2f8b8:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
   2f8ba:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
   2f8bc:	a802      	add	r0, sp, #8
   2f8be:	f008 ff87 	bl	387d0 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   2f8c2:	490d      	ldr	r1, [pc, #52]	; (2f8f8 <boot_write_magic+0x4c>)
   2f8c4:	2210      	movs	r2, #16
   2f8c6:	a802      	add	r0, sp, #8
   2f8c8:	f008 ff77 	bl	387ba <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
   2f8cc:	6863      	ldr	r3, [r4, #4]
   2f8ce:	480b      	ldr	r0, [pc, #44]	; (2f8fc <boot_write_magic+0x50>)
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   2f8d0:	3d10      	subs	r5, #16
    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
   2f8d2:	442b      	add	r3, r5
   2f8d4:	9300      	str	r3, [sp, #0]
   2f8d6:	7822      	ldrb	r2, [r4, #0]
   2f8d8:	462b      	mov	r3, r5
   2f8da:	2144      	movs	r1, #68	; 0x44
   2f8dc:	f008 fb82 	bl	37fe4 <z_log_minimal_printk>
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   2f8e0:	2310      	movs	r3, #16
   2f8e2:	aa02      	add	r2, sp, #8
   2f8e4:	f025 0107 	bic.w	r1, r5, #7
   2f8e8:	4620      	mov	r0, r4
   2f8ea:	f008 fbd1 	bl	38090 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   2f8ee:	3800      	subs	r0, #0
   2f8f0:	bf18      	it	ne
   2f8f2:	2001      	movne	r0, #1
   2f8f4:	b007      	add	sp, #28
   2f8f6:	bd30      	pop	{r4, r5, pc}
   2f8f8:	0003c79a 	.word	0x0003c79a
   2f8fc:	0003eb1b 	.word	0x0003eb1b

0002f900 <boot_write_image_ok>:
    return boot_write_trailer(fap, off, buf, 1);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   2f900:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   2f902:	6884      	ldr	r4, [r0, #8]
    uint32_t off;

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
   2f904:	6843      	ldr	r3, [r0, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   2f906:	3c18      	subs	r4, #24
   2f908:	f024 0407 	bic.w	r4, r4, #7
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
   2f90c:	4423      	add	r3, r4
   2f90e:	9300      	str	r3, [sp, #0]
   2f910:	7802      	ldrb	r2, [r0, #0]
{
   2f912:	4605      	mov	r5, r0
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
   2f914:	4623      	mov	r3, r4
   2f916:	4806      	ldr	r0, [pc, #24]	; (2f930 <boot_write_image_ok+0x30>)
   2f918:	2144      	movs	r1, #68	; 0x44
   2f91a:	f008 fb63 	bl	37fe4 <z_log_minimal_printk>
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   2f91e:	2201      	movs	r2, #1
   2f920:	4621      	mov	r1, r4
   2f922:	4628      	mov	r0, r5
}
   2f924:	b003      	add	sp, #12
   2f926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   2f92a:	f00b b994 	b.w	3ac56 <boot_write_trailer_flag>
   2f92e:	bf00      	nop
   2f930:	0003eb4a 	.word	0x0003eb4a

0002f934 <boot_read_swap_state>:
{
   2f934:	b530      	push	{r4, r5, lr}
   2f936:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   2f938:	6881      	ldr	r1, [r0, #8]
{
   2f93a:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2f93c:	2310      	movs	r3, #16
   2f93e:	aa02      	add	r2, sp, #8
   2f940:	3910      	subs	r1, #16
{
   2f942:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2f944:	f008 fb8f 	bl	38066 <flash_area_read>
    if (rc < 0) {
   2f948:	2800      	cmp	r0, #0
   2f94a:	da02      	bge.n	2f952 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   2f94c:	2001      	movs	r0, #1
}
   2f94e:	b007      	add	sp, #28
   2f950:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   2f952:	2210      	movs	r2, #16
   2f954:	a902      	add	r1, sp, #8
   2f956:	4620      	mov	r0, r4
   2f958:	f00b f922 	bl	3aba0 <bootutil_buffer_is_erased>
   2f95c:	2800      	cmp	r0, #0
   2f95e:	d13a      	bne.n	2f9d6 <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   2f960:	491e      	ldr	r1, [pc, #120]	; (2f9dc <boot_read_swap_state+0xa8>)
   2f962:	2210      	movs	r2, #16
   2f964:	a802      	add	r0, sp, #8
   2f966:	f008 ff01 	bl	3876c <memcmp>
    return BOOT_MAGIC_BAD;
   2f96a:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
   2f96c:	bf0c      	ite	eq
   2f96e:	2301      	moveq	r3, #1
   2f970:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
   2f972:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
   2f974:	4620      	mov	r0, r4
   2f976:	f00b f8ff 	bl	3ab78 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   2f97a:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   2f97c:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   2f97e:	f10d 0207 	add.w	r2, sp, #7
   2f982:	4620      	mov	r0, r4
   2f984:	f008 fb6f 	bl	38066 <flash_area_read>
    if (rc < 0) {
   2f988:	2800      	cmp	r0, #0
   2f98a:	dbdf      	blt.n	2f94c <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2f98c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f990:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2f994:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2f996:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2f998:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   2f99a:	2201      	movs	r2, #1
   2f99c:	f10d 0107 	add.w	r1, sp, #7
   2f9a0:	4620      	mov	r0, r4
   2f9a2:	f00b f8fd 	bl	3aba0 <bootutil_buffer_is_erased>
   2f9a6:	b910      	cbnz	r0, 2f9ae <boot_read_swap_state+0x7a>
   2f9a8:	786b      	ldrb	r3, [r5, #1]
   2f9aa:	2b04      	cmp	r3, #4
   2f9ac:	d903      	bls.n	2f9b6 <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   2f9ae:	2301      	movs	r3, #1
   2f9b0:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   2f9b2:	2300      	movs	r3, #0
   2f9b4:	712b      	strb	r3, [r5, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   2f9b6:	68a2      	ldr	r2, [r4, #8]
   2f9b8:	3a18      	subs	r2, #24
   2f9ba:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   2f9be:	3a08      	subs	r2, #8
   2f9c0:	1ca9      	adds	r1, r5, #2
   2f9c2:	4620      	mov	r0, r4
   2f9c4:	f00b f8ff 	bl	3abc6 <boot_read_flag>
    if (rc) {
   2f9c8:	2800      	cmp	r0, #0
   2f9ca:	d1bf      	bne.n	2f94c <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
   2f9cc:	1ce9      	adds	r1, r5, #3
   2f9ce:	4620      	mov	r0, r4
   2f9d0:	f00b f94b 	bl	3ac6a <boot_read_image_ok>
   2f9d4:	e7bb      	b.n	2f94e <boot_read_swap_state+0x1a>
   2f9d6:	2303      	movs	r3, #3
   2f9d8:	e7cb      	b.n	2f972 <boot_read_swap_state+0x3e>
   2f9da:	bf00      	nop
   2f9dc:	0003c79a 	.word	0x0003c79a

0002f9e0 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   2f9e0:	b530      	push	{r4, r5, lr}
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2f9e2:	2a0e      	cmp	r2, #14
{
   2f9e4:	b087      	sub	sp, #28
   2f9e6:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2f9e8:	d90a      	bls.n	2fa00 <boot_write_swap_info+0x20>
   2f9ea:	4914      	ldr	r1, [pc, #80]	; (2fa3c <boot_write_swap_info+0x5c>)
   2f9ec:	4814      	ldr	r0, [pc, #80]	; (2fa40 <boot_write_swap_info+0x60>)
   2f9ee:	f44f 72ce 	mov.w	r2, #412	; 0x19c
   2f9f2:	f008 fae9 	bl	37fc8 <assert_print>
   2f9f6:	4811      	ldr	r0, [pc, #68]	; (2fa3c <boot_write_swap_info+0x5c>)
   2f9f8:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   2f9fc:	f008 fadd 	bl	37fba <assert_post_action>
   2fa00:	290e      	cmp	r1, #14
   2fa02:	d8f2      	bhi.n	2f9ea <boot_write_swap_info+0xa>
   2fa04:	ea41 1302 	orr.w	r3, r1, r2, lsl #4
   2fa08:	f88d 3017 	strb.w	r3, [sp, #23]
    off = boot_swap_info_off(fap);
   2fa0c:	f00b f8b4 	bl	3ab78 <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
   2fa10:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2fa14:	6863      	ldr	r3, [r4, #4]
   2fa16:	4403      	add	r3, r0
   2fa18:	9300      	str	r3, [sp, #0]
   2fa1a:	7822      	ldrb	r2, [r4, #0]
    off = boot_swap_info_off(fap);
   2fa1c:	4605      	mov	r5, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
   2fa1e:	4603      	mov	r3, r0
   2fa20:	2144      	movs	r1, #68	; 0x44
   2fa22:	4808      	ldr	r0, [pc, #32]	; (2fa44 <boot_write_swap_info+0x64>)
   2fa24:	f008 fade 	bl	37fe4 <z_log_minimal_printk>
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2fa28:	2301      	movs	r3, #1
   2fa2a:	f10d 0217 	add.w	r2, sp, #23
   2fa2e:	4629      	mov	r1, r5
   2fa30:	4620      	mov	r0, r4
   2fa32:	f00b f8e4 	bl	3abfe <boot_write_trailer>
}
   2fa36:	b007      	add	sp, #28
   2fa38:	bd30      	pop	{r4, r5, pc}
   2fa3a:	bf00      	nop
   2fa3c:	0003eb7c 	.word	0x0003eb7c
   2fa40:	0003c7f8 	.word	0x0003c7f8
   2fa44:	0003ebbf 	.word	0x0003ebbf

0002fa48 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
   2fa48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2fa4a:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   2fa4c:	4669      	mov	r1, sp
   2fa4e:	2002      	movs	r0, #2
   2fa50:	f00b f911 	bl	3ac76 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
   2fa54:	4604      	mov	r4, r0
   2fa56:	b110      	cbz	r0, 2fa5e <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
   2fa58:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
   2fa5a:	b004      	add	sp, #16
   2fa5c:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   2fa5e:	a902      	add	r1, sp, #8
   2fa60:	2005      	movs	r0, #5
   2fa62:	f00b f908 	bl	3ac76 <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
   2fa66:	2801      	cmp	r0, #1
   2fa68:	d136      	bne.n	2fad8 <boot_swap_type_multi+0x90>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
   2fa6a:	4829      	ldr	r0, [pc, #164]	; (2fb10 <boot_swap_type_multi+0xc8>)
   2fa6c:	462a      	mov	r2, r5
   2fa6e:	2149      	movs	r1, #73	; 0x49
   2fa70:	f008 fab8 	bl	37fe4 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
   2fa74:	4b27      	ldr	r3, [pc, #156]	; (2fb14 <boot_swap_type_multi+0xcc>)
   2fa76:	9302      	str	r3, [sp, #8]
        secondary_slot.image_num = 0;
   2fa78:	f88d 400c 	strb.w	r4, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
   2fa7c:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
   2fa80:	f89d 6008 	ldrb.w	r6, [sp, #8]
   2fa84:	4c24      	ldr	r4, [pc, #144]	; (2fb18 <boot_swap_type_multi+0xd0>)
   2fa86:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
   2fa88:	7820      	ldrb	r0, [r4, #0]
   2fa8a:	4629      	mov	r1, r5
   2fa8c:	f00b f87a 	bl	3ab84 <boot_magic_compatible_check>
   2fa90:	b348      	cbz	r0, 2fae6 <boot_swap_type_multi+0x9e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   2fa92:	7860      	ldrb	r0, [r4, #1]
   2fa94:	4631      	mov	r1, r6
   2fa96:	f00b f875 	bl	3ab84 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   2fa9a:	b320      	cbz	r0, 2fae6 <boot_swap_type_multi+0x9e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2fa9c:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
   2fa9e:	2b04      	cmp	r3, #4
   2faa0:	d003      	beq.n	2faaa <boot_swap_type_multi+0x62>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2faa2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   2faa6:	4299      	cmp	r1, r3
   2faa8:	d11d      	bne.n	2fae6 <boot_swap_type_multi+0x9e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   2faaa:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   2faac:	2b04      	cmp	r3, #4
   2faae:	d003      	beq.n	2fab8 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   2fab0:	f89d 100b 	ldrb.w	r1, [sp, #11]
   2fab4:	4299      	cmp	r1, r3
   2fab6:	d116      	bne.n	2fae6 <boot_swap_type_multi+0x9e>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2fab8:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   2faba:	2b04      	cmp	r3, #4
   2fabc:	d10f      	bne.n	2fade <boot_swap_type_multi+0x96>
            BOOT_LOG_INF("Swap type: %s",
   2fabe:	7963      	ldrb	r3, [r4, #5]
   2fac0:	2b02      	cmp	r3, #2
   2fac2:	d11b      	bne.n	2fafc <boot_swap_type_multi+0xb4>
   2fac4:	4a15      	ldr	r2, [pc, #84]	; (2fb1c <boot_swap_type_multi+0xd4>)
   2fac6:	4816      	ldr	r0, [pc, #88]	; (2fb20 <boot_swap_type_multi+0xd8>)
   2fac8:	2149      	movs	r1, #73	; 0x49
   2faca:	f008 fa8b 	bl	37fe4 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   2face:	7960      	ldrb	r0, [r4, #5]
   2fad0:	1e83      	subs	r3, r0, #2
   2fad2:	2b02      	cmp	r3, #2
   2fad4:	d9c1      	bls.n	2fa5a <boot_swap_type_multi+0x12>
   2fad6:	e7bf      	b.n	2fa58 <boot_swap_type_multi+0x10>
    } else if (rc) {
   2fad8:	2800      	cmp	r0, #0
   2fada:	d0cf      	beq.n	2fa7c <boot_swap_type_multi+0x34>
   2fadc:	e7bc      	b.n	2fa58 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2fade:	f89d 1002 	ldrb.w	r1, [sp, #2]
   2fae2:	4299      	cmp	r1, r3
   2fae4:	d0eb      	beq.n	2fabe <boot_swap_type_multi+0x76>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2fae6:	3201      	adds	r2, #1
   2fae8:	2a03      	cmp	r2, #3
   2faea:	f104 0406 	add.w	r4, r4, #6
   2faee:	d1cb      	bne.n	2fa88 <boot_swap_type_multi+0x40>
    BOOT_LOG_INF("Swap type: none");
   2faf0:	480c      	ldr	r0, [pc, #48]	; (2fb24 <boot_swap_type_multi+0xdc>)
   2faf2:	2149      	movs	r1, #73	; 0x49
   2faf4:	f008 fa76 	bl	37fe4 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
   2faf8:	2001      	movs	r0, #1
   2fafa:	e7ae      	b.n	2fa5a <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
   2fafc:	2b03      	cmp	r3, #3
   2fafe:	d005      	beq.n	2fb0c <boot_swap_type_multi+0xc4>
   2fb00:	4a09      	ldr	r2, [pc, #36]	; (2fb28 <boot_swap_type_multi+0xe0>)
   2fb02:	490a      	ldr	r1, [pc, #40]	; (2fb2c <boot_swap_type_multi+0xe4>)
   2fb04:	2b04      	cmp	r3, #4
   2fb06:	bf08      	it	eq
   2fb08:	460a      	moveq	r2, r1
   2fb0a:	e7dc      	b.n	2fac6 <boot_swap_type_multi+0x7e>
   2fb0c:	4a08      	ldr	r2, [pc, #32]	; (2fb30 <boot_swap_type_multi+0xe8>)
   2fb0e:	e7da      	b.n	2fac6 <boot_swap_type_multi+0x7e>
   2fb10:	0003ec34 	.word	0x0003ec34
   2fb14:	03030103 	.word	0x03030103
   2fb18:	0003eca7 	.word	0x0003eca7
   2fb1c:	0003ec16 	.word	0x0003ec16
   2fb20:	0003ec7f 	.word	0x0003ec7f
   2fb24:	0003ec92 	.word	0x0003ec92
   2fb28:	0003ec1b 	.word	0x0003ec1b
   2fb2c:	0003ec2d 	.word	0x0003ec2d
   2fb30:	0003ec11 	.word	0x0003ec11

0002fb34 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   2fb34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2fb36:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2fb38:	2005      	movs	r0, #5
   2fb3a:	a901      	add	r1, sp, #4
   2fb3c:	f7f4 ff4c 	bl	249d8 <flash_area_open>
    if (rc != 0) {
   2fb40:	2800      	cmp	r0, #0
   2fb42:	d13b      	bne.n	2fbbc <boot_set_pending_multi+0x88>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   2fb44:	9801      	ldr	r0, [sp, #4]
   2fb46:	a902      	add	r1, sp, #8
   2fb48:	f7ff fef4 	bl	2f934 <boot_read_swap_state>
    if (rc != 0) {
   2fb4c:	4604      	mov	r4, r0
   2fb4e:	b938      	cbnz	r0, 2fb60 <boot_set_pending_multi+0x2c>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   2fb50:	f89d 5008 	ldrb.w	r5, [sp, #8]
   2fb54:	2d02      	cmp	r5, #2
   2fb56:	d01f      	beq.n	2fb98 <boot_set_pending_multi+0x64>
   2fb58:	2d03      	cmp	r5, #3
   2fb5a:	d007      	beq.n	2fb6c <boot_set_pending_multi+0x38>
   2fb5c:	2d01      	cmp	r5, #1
   2fb5e:	d122      	bne.n	2fba6 <boot_set_pending_multi+0x72>
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   2fb60:	9801      	ldr	r0, [sp, #4]
   2fb62:	f008 fa7f 	bl	38064 <flash_area_close>
    return rc;
}
   2fb66:	4620      	mov	r0, r4
   2fb68:	b004      	add	sp, #16
   2fb6a:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   2fb6c:	9801      	ldr	r0, [sp, #4]
   2fb6e:	f7ff fe9d 	bl	2f8ac <boot_write_magic>
        if (rc == 0 && permanent) {
   2fb72:	4604      	mov	r4, r0
   2fb74:	2800      	cmp	r0, #0
   2fb76:	d1f3      	bne.n	2fb60 <boot_set_pending_multi+0x2c>
            rc = boot_write_image_ok(fap);
   2fb78:	9801      	ldr	r0, [sp, #4]
        if (rc == 0 && permanent) {
   2fb7a:	b15e      	cbz	r6, 2fb94 <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   2fb7c:	f7ff fec0 	bl	2f900 <boot_write_image_ok>
        if (rc == 0) {
   2fb80:	4604      	mov	r4, r0
   2fb82:	2800      	cmp	r0, #0
   2fb84:	d1ec      	bne.n	2fb60 <boot_set_pending_multi+0x2c>
            rc = boot_write_swap_info(fap, swap_type, 0);
   2fb86:	9801      	ldr	r0, [sp, #4]
   2fb88:	2200      	movs	r2, #0
   2fb8a:	4629      	mov	r1, r5
   2fb8c:	f7ff ff28 	bl	2f9e0 <boot_write_swap_info>
   2fb90:	4604      	mov	r4, r0
   2fb92:	e7e5      	b.n	2fb60 <boot_set_pending_multi+0x2c>
                swap_type = BOOT_SWAP_TYPE_TEST;
   2fb94:	2502      	movs	r5, #2
   2fb96:	e7f6      	b.n	2fb86 <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   2fb98:	9801      	ldr	r0, [sp, #4]
   2fb9a:	4621      	mov	r1, r4
   2fb9c:	6882      	ldr	r2, [r0, #8]
   2fb9e:	f008 fa8c 	bl	380ba <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   2fba2:	2403      	movs	r4, #3
        break;
   2fba4:	e7dc      	b.n	2fb60 <boot_set_pending_multi+0x2c>
        assert(0);
   2fba6:	4906      	ldr	r1, [pc, #24]	; (2fbc0 <boot_set_pending_multi+0x8c>)
   2fba8:	4806      	ldr	r0, [pc, #24]	; (2fbc4 <boot_set_pending_multi+0x90>)
   2fbaa:	f240 2231 	movw	r2, #561	; 0x231
   2fbae:	f008 fa0b 	bl	37fc8 <assert_print>
   2fbb2:	4803      	ldr	r0, [pc, #12]	; (2fbc0 <boot_set_pending_multi+0x8c>)
   2fbb4:	f240 2131 	movw	r1, #561	; 0x231
   2fbb8:	f008 f9ff 	bl	37fba <assert_post_action>
        return BOOT_EFLASH;
   2fbbc:	2401      	movs	r4, #1
   2fbbe:	e7d2      	b.n	2fb66 <boot_set_pending_multi+0x32>
   2fbc0:	0003eb7c 	.word	0x0003eb7c
   2fbc4:	0003c7f8 	.word	0x0003c7f8

0002fbc8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fbc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2fbcc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2fbd0:	2a08      	cmp	r2, #8
   2fbd2:	d106      	bne.n	2fbe2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2fbd4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2fbd8:	2b05      	cmp	r3, #5
   2fbda:	d802      	bhi.n	2fbe2 <nrf52_errata_103+0x1a>
   2fbdc:	4a02      	ldr	r2, [pc, #8]	; (2fbe8 <nrf52_errata_103+0x20>)
   2fbde:	5cd0      	ldrb	r0, [r2, r3]
   2fbe0:	4770      	bx	lr
                        return false;
   2fbe2:	2000      	movs	r0, #0
}
   2fbe4:	4770      	bx	lr
   2fbe6:	bf00      	nop
   2fbe8:	0003eccc 	.word	0x0003eccc

0002fbec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2fbec:	4a02      	ldr	r2, [pc, #8]	; (2fbf8 <nvmc_wait+0xc>)
   2fbee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2fbf2:	2b00      	cmp	r3, #0
   2fbf4:	d0fb      	beq.n	2fbee <nvmc_wait+0x2>
}
   2fbf6:	4770      	bx	lr
   2fbf8:	4001e000 	.word	0x4001e000

0002fbfc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   2fbfc:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fbfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2fc02:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2fc06:	2a08      	cmp	r2, #8
   2fc08:	d14e      	bne.n	2fca8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   2fc0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2fc0e:	2100      	movs	r1, #0
   2fc10:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2fc14:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2fc18:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2fc1c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   2fc20:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   2fc24:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2fc28:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   2fc2c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2fc30:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   2fc34:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2fc38:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   2fc3c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2fc40:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   2fc44:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2fc48:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2fc4c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2fc50:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   2fc54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2fc58:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   2fc5c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2fc60:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   2fc64:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2fc68:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   2fc6c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2fc70:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   2fc74:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2fc78:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   2fc7c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2fc80:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   2fc84:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2fc88:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   2fc8c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2fc90:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   2fc94:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2fc98:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   2fc9c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2fca0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   2fca4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2fca8:	f7ff ff8e 	bl	2fbc8 <nrf52_errata_103>
   2fcac:	b118      	cbz	r0, 2fcb6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2fcae:	4b3b      	ldr	r3, [pc, #236]	; (2fd9c <SystemInit+0x1a0>)
   2fcb0:	4a3b      	ldr	r2, [pc, #236]	; (2fda0 <SystemInit+0x1a4>)
   2fcb2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2fcb6:	f7ff ff87 	bl	2fbc8 <nrf52_errata_103>
   2fcba:	b118      	cbz	r0, 2fcc4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2fcbc:	4b39      	ldr	r3, [pc, #228]	; (2fda4 <SystemInit+0x1a8>)
   2fcbe:	22fb      	movs	r2, #251	; 0xfb
   2fcc0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2fcc4:	f7ff ff80 	bl	2fbc8 <nrf52_errata_103>
   2fcc8:	b170      	cbz	r0, 2fce8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2fcca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2fcce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2fcd2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2fcd6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2fcda:	f022 020f 	bic.w	r2, r2, #15
   2fcde:	f003 030f 	and.w	r3, r3, #15
   2fce2:	4313      	orrs	r3, r2
   2fce4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2fce8:	f7ff ff6e 	bl	2fbc8 <nrf52_errata_103>
   2fcec:	b120      	cbz	r0, 2fcf8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2fcee:	4b2e      	ldr	r3, [pc, #184]	; (2fda8 <SystemInit+0x1ac>)
   2fcf0:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fcf4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2fcf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2fcfc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2fd00:	2b08      	cmp	r3, #8
   2fd02:	d11a      	bne.n	2fd3a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2fd04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2fd08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2fd0c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2fd0e:	bf44      	itt	mi
   2fd10:	f06f 0201 	mvnmi.w	r2, #1
   2fd14:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2fd18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2fd1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   2fd20:	2b05      	cmp	r3, #5
   2fd22:	d802      	bhi.n	2fd2a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2fd24:	4a21      	ldr	r2, [pc, #132]	; (2fdac <SystemInit+0x1b0>)
   2fd26:	5cd3      	ldrb	r3, [r2, r3]
   2fd28:	b13b      	cbz	r3, 2fd3a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2fd2a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2fd2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2fd32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2fd36:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2fd3a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2fd3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2fd42:	2a00      	cmp	r2, #0
   2fd44:	db03      	blt.n	2fd4e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2fd46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2fd4a:	2b00      	cmp	r3, #0
   2fd4c:	da22      	bge.n	2fd94 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2fd4e:	4918      	ldr	r1, [pc, #96]	; (2fdb0 <SystemInit+0x1b4>)
   2fd50:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2fd52:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2fd56:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2fd5a:	2412      	movs	r4, #18
    nvmc_wait();
   2fd5c:	f7ff ff46 	bl	2fbec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2fd60:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2fd64:	f7ff ff42 	bl	2fbec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2fd68:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2fd6c:	f7ff ff3e 	bl	2fbec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2fd70:	2300      	movs	r3, #0
   2fd72:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2fd76:	f7ff ff39 	bl	2fbec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   2fd7a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2fd7e:	490d      	ldr	r1, [pc, #52]	; (2fdb4 <SystemInit+0x1b8>)
   2fd80:	4b0d      	ldr	r3, [pc, #52]	; (2fdb8 <SystemInit+0x1bc>)
   2fd82:	68ca      	ldr	r2, [r1, #12]
   2fd84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2fd88:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2fd8a:	60cb      	str	r3, [r1, #12]
   2fd8c:	f3bf 8f4f 	dsb	sy
    __NOP();
   2fd90:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2fd92:	e7fd      	b.n	2fd90 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2fd94:	4b09      	ldr	r3, [pc, #36]	; (2fdbc <SystemInit+0x1c0>)
   2fd96:	4a0a      	ldr	r2, [pc, #40]	; (2fdc0 <SystemInit+0x1c4>)
   2fd98:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2fd9a:	bd10      	pop	{r4, pc}
   2fd9c:	40005000 	.word	0x40005000
   2fda0:	00038148 	.word	0x00038148
   2fda4:	4000f000 	.word	0x4000f000
   2fda8:	40029000 	.word	0x40029000
   2fdac:	0003ecc6 	.word	0x0003ecc6
   2fdb0:	4001e000 	.word	0x4001e000
   2fdb4:	e000ed00 	.word	0xe000ed00
   2fdb8:	05fa0004 	.word	0x05fa0004
   2fdbc:	20000848 	.word	0x20000848
   2fdc0:	03d09000 	.word	0x03d09000

0002fdc4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2fdc4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2fdc6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   2fdc8:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2fdca:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   2fdce:	fab2 f382 	clz	r3, r2
   2fdd2:	f1c3 031f 	rsb	r3, r3, #31
   2fdd6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2fdd8:	fa05 f403 	lsl.w	r4, r5, r3
   2fddc:	ea22 0404 	bic.w	r4, r2, r4
   2fde0:	e850 6f00 	ldrex	r6, [r0]
   2fde4:	4296      	cmp	r6, r2
   2fde6:	d104      	bne.n	2fdf2 <nrfx_flag32_alloc+0x2e>
   2fde8:	e840 4c00 	strex	ip, r4, [r0]
   2fdec:	f1bc 0f00 	cmp.w	ip, #0
   2fdf0:	d1f6      	bne.n	2fde0 <nrfx_flag32_alloc+0x1c>
   2fdf2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2fdf6:	d1e7      	bne.n	2fdc8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   2fdf8:	4801      	ldr	r0, [pc, #4]	; (2fe00 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   2fdfa:	700b      	strb	r3, [r1, #0]
}
   2fdfc:	bd70      	pop	{r4, r5, r6, pc}
   2fdfe:	bf00      	nop
   2fe00:	0bad0000 	.word	0x0bad0000

0002fe04 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   2fe04:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2fe06:	6803      	ldr	r3, [r0, #0]
   2fe08:	40cb      	lsrs	r3, r1
   2fe0a:	07db      	lsls	r3, r3, #31
   2fe0c:	d414      	bmi.n	2fe38 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2fe0e:	2301      	movs	r3, #1
   2fe10:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   2fe12:	6802      	ldr	r2, [r0, #0]
   2fe14:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2fe18:	ea43 0102 	orr.w	r1, r3, r2
   2fe1c:	e850 4f00 	ldrex	r4, [r0]
   2fe20:	4294      	cmp	r4, r2
   2fe22:	d104      	bne.n	2fe2e <nrfx_flag32_free+0x2a>
   2fe24:	e840 1c00 	strex	ip, r1, [r0]
   2fe28:	f1bc 0f00 	cmp.w	ip, #0
   2fe2c:	d1f6      	bne.n	2fe1c <nrfx_flag32_free+0x18>
   2fe2e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2fe32:	d1ee      	bne.n	2fe12 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   2fe34:	4801      	ldr	r0, [pc, #4]	; (2fe3c <nrfx_flag32_free+0x38>)
}
   2fe36:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2fe38:	4801      	ldr	r0, [pc, #4]	; (2fe40 <nrfx_flag32_free+0x3c>)
   2fe3a:	e7fc      	b.n	2fe36 <nrfx_flag32_free+0x32>
   2fe3c:	0bad0000 	.word	0x0bad0000
   2fe40:	0bad0004 	.word	0x0bad0004

0002fe44 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2fe44:	4b03      	ldr	r3, [pc, #12]	; (2fe54 <pin_in_use_by_te+0x10>)
   2fe46:	3008      	adds	r0, #8
   2fe48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2fe4c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2fe50:	4770      	bx	lr
   2fe52:	bf00      	nop
   2fe54:	2000084c 	.word	0x2000084c

0002fe58 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2fe58:	4b04      	ldr	r3, [pc, #16]	; (2fe6c <pin_has_trigger+0x14>)
   2fe5a:	3008      	adds	r0, #8
   2fe5c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2fe60:	f010 001c 	ands.w	r0, r0, #28
   2fe64:	bf18      	it	ne
   2fe66:	2001      	movne	r0, #1
   2fe68:	4770      	bx	lr
   2fe6a:	bf00      	nop
   2fe6c:	2000084c 	.word	0x2000084c

0002fe70 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2fe70:	4b03      	ldr	r3, [pc, #12]	; (2fe80 <pin_is_output+0x10>)
   2fe72:	3008      	adds	r0, #8
   2fe74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2fe78:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2fe7c:	4770      	bx	lr
   2fe7e:	bf00      	nop
   2fe80:	2000084c 	.word	0x2000084c

0002fe84 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2fe84:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2fe86:	f100 0308 	add.w	r3, r0, #8
   2fe8a:	4c0c      	ldr	r4, [pc, #48]	; (2febc <call_handler+0x38>)
   2fe8c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   2fe90:	05da      	lsls	r2, r3, #23
{
   2fe92:	4605      	mov	r5, r0
   2fe94:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2fe96:	d507      	bpl.n	2fea8 <call_handler+0x24>
   2fe98:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2fe9c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2fea0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2fea4:	6852      	ldr	r2, [r2, #4]
   2fea6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2fea8:	68a3      	ldr	r3, [r4, #8]
   2feaa:	b12b      	cbz	r3, 2feb8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2feac:	68e2      	ldr	r2, [r4, #12]
   2feae:	4631      	mov	r1, r6
   2feb0:	4628      	mov	r0, r5
    }
}
   2feb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2feb6:	4718      	bx	r3
}
   2feb8:	bd70      	pop	{r4, r5, r6, pc}
   2feba:	bf00      	nop
   2febc:	2000084c 	.word	0x2000084c

0002fec0 <release_handler>:
{
   2fec0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2fec2:	4a18      	ldr	r2, [pc, #96]	; (2ff24 <release_handler+0x64>)
   2fec4:	3008      	adds	r0, #8
   2fec6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2feca:	05d9      	lsls	r1, r3, #23
   2fecc:	d51d      	bpl.n	2ff0a <release_handler+0x4a>
   2fece:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2fed2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2fed6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2feda:	f102 040e 	add.w	r4, r2, #14
   2fede:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2fee0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   2fee4:	f413 7f80 	tst.w	r3, #256	; 0x100
   2fee8:	d003      	beq.n	2fef2 <release_handler+0x32>
   2feea:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2feee:	4299      	cmp	r1, r3
   2fef0:	d00b      	beq.n	2ff0a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2fef2:	3001      	adds	r0, #1
   2fef4:	2830      	cmp	r0, #48	; 0x30
   2fef6:	d1f3      	bne.n	2fee0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2fef8:	2300      	movs	r3, #0
   2fefa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2fefe:	480a      	ldr	r0, [pc, #40]	; (2ff28 <release_handler+0x68>)
   2ff00:	f7ff ff80 	bl	2fe04 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2ff04:	4b09      	ldr	r3, [pc, #36]	; (2ff2c <release_handler+0x6c>)
   2ff06:	4298      	cmp	r0, r3
   2ff08:	d100      	bne.n	2ff0c <release_handler+0x4c>
}
   2ff0a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2ff0c:	4908      	ldr	r1, [pc, #32]	; (2ff30 <release_handler+0x70>)
   2ff0e:	4809      	ldr	r0, [pc, #36]	; (2ff34 <release_handler+0x74>)
   2ff10:	f44f 7299 	mov.w	r2, #306	; 0x132
   2ff14:	f008 f858 	bl	37fc8 <assert_print>
   2ff18:	4805      	ldr	r0, [pc, #20]	; (2ff30 <release_handler+0x70>)
   2ff1a:	f44f 7199 	mov.w	r1, #306	; 0x132
   2ff1e:	f008 f84c 	bl	37fba <assert_post_action>
   2ff22:	bf00      	nop
   2ff24:	2000084c 	.word	0x2000084c
   2ff28:	200008c0 	.word	0x200008c0
   2ff2c:	0bad0000 	.word	0x0bad0000
   2ff30:	0003ecd2 	.word	0x0003ecd2
   2ff34:	0003c7f8 	.word	0x0003c7f8

0002ff38 <nrf_gpio_pin_port_decode>:
{
   2ff38:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ff3a:	6802      	ldr	r2, [r0, #0]
{
   2ff3c:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ff3e:	4610      	mov	r0, r2
   2ff40:	f00a fed9 	bl	3acf6 <nrf_gpio_pin_present_check>
   2ff44:	b950      	cbnz	r0, 2ff5c <nrf_gpio_pin_port_decode+0x24>
   2ff46:	4910      	ldr	r1, [pc, #64]	; (2ff88 <nrf_gpio_pin_port_decode+0x50>)
   2ff48:	4810      	ldr	r0, [pc, #64]	; (2ff8c <nrf_gpio_pin_port_decode+0x54>)
   2ff4a:	f240 2247 	movw	r2, #583	; 0x247
   2ff4e:	f008 f83b 	bl	37fc8 <assert_print>
   2ff52:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   2ff56:	480c      	ldr	r0, [pc, #48]	; (2ff88 <nrf_gpio_pin_port_decode+0x50>)
   2ff58:	f008 f82f 	bl	37fba <assert_post_action>
    *p_pin = pin_number & 0x1F;
   2ff5c:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ff60:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   2ff62:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ff64:	d00a      	beq.n	2ff7c <nrf_gpio_pin_port_decode+0x44>
   2ff66:	2a01      	cmp	r2, #1
   2ff68:	d00b      	beq.n	2ff82 <nrf_gpio_pin_port_decode+0x4a>
            NRFX_ASSERT(0);
   2ff6a:	4907      	ldr	r1, [pc, #28]	; (2ff88 <nrf_gpio_pin_port_decode+0x50>)
   2ff6c:	4807      	ldr	r0, [pc, #28]	; (2ff8c <nrf_gpio_pin_port_decode+0x54>)
   2ff6e:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2ff72:	f008 f829 	bl	37fc8 <assert_print>
   2ff76:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2ff7a:	e7ec      	b.n	2ff56 <nrf_gpio_pin_port_decode+0x1e>
        case 0: return NRF_P0;
   2ff7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2ff80:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ff82:	4803      	ldr	r0, [pc, #12]	; (2ff90 <nrf_gpio_pin_port_decode+0x58>)
   2ff84:	e7fc      	b.n	2ff80 <nrf_gpio_pin_port_decode+0x48>
   2ff86:	bf00      	nop
   2ff88:	0003c7c5 	.word	0x0003c7c5
   2ff8c:	0003c7f8 	.word	0x0003c7f8
   2ff90:	50000300 	.word	0x50000300

0002ff94 <nrfx_gpiote_input_configure>:
{
   2ff94:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ff96:	4604      	mov	r4, r0
   2ff98:	b085      	sub	sp, #20
   2ff9a:	4617      	mov	r7, r2
   2ff9c:	461d      	mov	r5, r3
    if (p_input_config)
   2ff9e:	b1d9      	cbz	r1, 2ffd8 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   2ffa0:	f00a feba 	bl	3ad18 <pin_is_task_output>
   2ffa4:	bb00      	cbnz	r0, 2ffe8 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2ffa6:	460b      	mov	r3, r1
   2ffa8:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2ffac:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2ffb0:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2ffb4:	f10d 020f 	add.w	r2, sp, #15
   2ffb8:	f10d 010e 	add.w	r1, sp, #14
   2ffbc:	4620      	mov	r0, r4
   2ffbe:	f00a feb6 	bl	3ad2e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2ffc2:	4a44      	ldr	r2, [pc, #272]	; (300d4 <nrfx_gpiote_input_configure+0x140>)
   2ffc4:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2ffc8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2ffcc:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2ffd0:	f043 0301 	orr.w	r3, r3, #1
   2ffd4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2ffd8:	b34f      	cbz	r7, 3002e <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   2ffda:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2ffdc:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2ffde:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   2ffe0:	f7ff ff46 	bl	2fe70 <pin_is_output>
   2ffe4:	b110      	cbz	r0, 2ffec <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   2ffe6:	b1ba      	cbz	r2, 30018 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   2ffe8:	483b      	ldr	r0, [pc, #236]	; (300d8 <nrfx_gpiote_input_configure+0x144>)
   2ffea:	e022      	b.n	30032 <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2ffec:	4b39      	ldr	r3, [pc, #228]	; (300d4 <nrfx_gpiote_input_configure+0x140>)
   2ffee:	f104 0c08 	add.w	ip, r4, #8
   2fff2:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   2fff6:	f021 0120 	bic.w	r1, r1, #32
   2fffa:	04c9      	lsls	r1, r1, #19
   2fffc:	0cc9      	lsrs	r1, r1, #19
   2fffe:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   30002:	b14a      	cbz	r2, 30018 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   30004:	2e03      	cmp	r6, #3
   30006:	d8ef      	bhi.n	2ffe8 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   30008:	687a      	ldr	r2, [r7, #4]
   3000a:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3000c:	b99e      	cbnz	r6, 30036 <nrfx_gpiote_input_configure+0xa2>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   3000e:	4b33      	ldr	r3, [pc, #204]	; (300dc <nrfx_gpiote_input_configure+0x148>)
   30010:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   30014:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   30018:	4a2e      	ldr	r2, [pc, #184]	; (300d4 <nrfx_gpiote_input_configure+0x140>)
   3001a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3001e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   30022:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   30026:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   3002a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   3002e:	bb3d      	cbnz	r5, 30080 <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   30030:	482b      	ldr	r0, [pc, #172]	; (300e0 <nrfx_gpiote_input_configure+0x14c>)
}
   30032:	b005      	add	sp, #20
   30034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   30036:	00ba      	lsls	r2, r7, #2
   30038:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3003c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   30040:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   30044:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   30048:	f020 0003 	bic.w	r0, r0, #3
   3004c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   30050:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   30054:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   30058:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   3005c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   30060:	0220      	lsls	r0, r4, #8
   30062:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   30066:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   3006a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   3006e:	ea40 000e 	orr.w	r0, r0, lr
   30072:	f041 0120 	orr.w	r1, r1, #32
   30076:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   3007a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   3007e:	e7cb      	b.n	30018 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   30080:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   30084:	4620      	mov	r0, r4
   30086:	f7ff ff1b 	bl	2fec0 <release_handler>
    if (!handler)
   3008a:	2e00      	cmp	r6, #0
   3008c:	d0d0      	beq.n	30030 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3008e:	4d11      	ldr	r5, [pc, #68]	; (300d4 <nrfx_gpiote_input_configure+0x140>)
   30090:	e9d5 2300 	ldrd	r2, r3, [r5]
   30094:	4296      	cmp	r6, r2
   30096:	d101      	bne.n	3009c <nrfx_gpiote_input_configure+0x108>
   30098:	429f      	cmp	r7, r3
   3009a:	d018      	beq.n	300ce <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3009c:	4811      	ldr	r0, [pc, #68]	; (300e4 <nrfx_gpiote_input_configure+0x150>)
   3009e:	f10d 010f 	add.w	r1, sp, #15
   300a2:	f7ff fe8f 	bl	2fdc4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   300a6:	4b0e      	ldr	r3, [pc, #56]	; (300e0 <nrfx_gpiote_input_configure+0x14c>)
   300a8:	4298      	cmp	r0, r3
   300aa:	d1c2      	bne.n	30032 <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   300ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   300b0:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   300b4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   300b8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   300ba:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   300bc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   300c0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   300c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   300c8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   300cc:	e7b0      	b.n	30030 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   300ce:	2200      	movs	r2, #0
   300d0:	e7ee      	b.n	300b0 <nrfx_gpiote_input_configure+0x11c>
   300d2:	bf00      	nop
   300d4:	2000084c 	.word	0x2000084c
   300d8:	0bad0004 	.word	0x0bad0004
   300dc:	40006000 	.word	0x40006000
   300e0:	0bad0000 	.word	0x0bad0000
   300e4:	200008c0 	.word	0x200008c0

000300e8 <nrfx_gpiote_output_configure>:
{
   300e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   300ea:	4604      	mov	r4, r0
   300ec:	b085      	sub	sp, #20
   300ee:	4615      	mov	r5, r2
    if (p_config)
   300f0:	b321      	cbz	r1, 3013c <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   300f2:	f7ff febd 	bl	2fe70 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   300f6:	b920      	cbnz	r0, 30102 <nrfx_gpiote_output_configure+0x1a>
   300f8:	4620      	mov	r0, r4
   300fa:	f7ff fea3 	bl	2fe44 <pin_in_use_by_te>
   300fe:	2800      	cmp	r0, #0
   30100:	d15e      	bne.n	301c0 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   30102:	4620      	mov	r0, r4
   30104:	f7ff fea8 	bl	2fe58 <pin_has_trigger>
   30108:	b110      	cbz	r0, 30110 <nrfx_gpiote_output_configure+0x28>
   3010a:	784b      	ldrb	r3, [r1, #1]
   3010c:	2b01      	cmp	r3, #1
   3010e:	d057      	beq.n	301c0 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   30110:	2301      	movs	r3, #1
   30112:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   30116:	2300      	movs	r3, #0
   30118:	e9cd 1300 	strd	r1, r3, [sp]
   3011c:	1c4a      	adds	r2, r1, #1
   3011e:	1c8b      	adds	r3, r1, #2
   30120:	4620      	mov	r0, r4
   30122:	f10d 010f 	add.w	r1, sp, #15
   30126:	f00a fe02 	bl	3ad2e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3012a:	4a26      	ldr	r2, [pc, #152]	; (301c4 <nrfx_gpiote_output_configure+0xdc>)
   3012c:	f104 0108 	add.w	r1, r4, #8
   30130:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   30134:	f043 0303 	orr.w	r3, r3, #3
   30138:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   3013c:	b915      	cbnz	r5, 30144 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   3013e:	4822      	ldr	r0, [pc, #136]	; (301c8 <nrfx_gpiote_output_configure+0xe0>)
}
   30140:	b005      	add	sp, #20
   30142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   30144:	4620      	mov	r0, r4
   30146:	f7ff fe93 	bl	2fe70 <pin_is_output>
        if (pin_is_input(pin))
   3014a:	b3c8      	cbz	r0, 301c0 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   3014c:	4e1d      	ldr	r6, [pc, #116]	; (301c4 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   3014e:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   30152:	f104 0708 	add.w	r7, r4, #8
   30156:	4661      	mov	r1, ip
   30158:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   3015c:	0089      	lsls	r1, r1, #2
   3015e:	f020 0020 	bic.w	r0, r0, #32
   30162:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   30166:	04c0      	lsls	r0, r0, #19
   30168:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   3016c:	0cc0      	lsrs	r0, r0, #19
   3016e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   30172:	2300      	movs	r3, #0
   30174:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   30178:	786a      	ldrb	r2, [r5, #1]
   3017a:	2a00      	cmp	r2, #0
   3017c:	d0df      	beq.n	3013e <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3017e:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   30182:	78ad      	ldrb	r5, [r5, #2]
   30184:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   30188:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3018c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   30190:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   30194:	0223      	lsls	r3, r4, #8
   30196:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3019a:	0412      	lsls	r2, r2, #16
   3019c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   301a0:	ea43 030e 	orr.w	r3, r3, lr
   301a4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   301a6:	052a      	lsls	r2, r5, #20
   301a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   301ac:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   301b0:	4313      	orrs	r3, r2
   301b2:	f040 0020 	orr.w	r0, r0, #32
   301b6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   301ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   301be:	e7be      	b.n	3013e <nrfx_gpiote_output_configure+0x56>
{
   301c0:	4802      	ldr	r0, [pc, #8]	; (301cc <nrfx_gpiote_output_configure+0xe4>)
   301c2:	e7bd      	b.n	30140 <nrfx_gpiote_output_configure+0x58>
   301c4:	2000084c 	.word	0x2000084c
   301c8:	0bad0000 	.word	0x0bad0000
   301cc:	0bad0004 	.word	0x0bad0004

000301d0 <nrfx_gpiote_init>:
{
   301d0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   301d2:	4c0f      	ldr	r4, [pc, #60]	; (30210 <nrfx_gpiote_init+0x40>)
   301d4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   301d8:	b9bd      	cbnz	r5, 3020a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   301da:	2260      	movs	r2, #96	; 0x60
   301dc:	4629      	mov	r1, r5
   301de:	f104 0010 	add.w	r0, r4, #16
   301e2:	f008 faf5 	bl	387d0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   301e6:	2006      	movs	r0, #6
   301e8:	f7f5 f8fe 	bl	253e8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   301ec:	4b09      	ldr	r3, [pc, #36]	; (30214 <nrfx_gpiote_init+0x44>)
    return err_code;
   301ee:	480a      	ldr	r0, [pc, #40]	; (30218 <nrfx_gpiote_init+0x48>)
   301f0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   301f4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   301f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   301fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   30200:	2301      	movs	r3, #1
   30202:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   30206:	6763      	str	r3, [r4, #116]	; 0x74
}
   30208:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   3020a:	4804      	ldr	r0, [pc, #16]	; (3021c <nrfx_gpiote_init+0x4c>)
   3020c:	e7fc      	b.n	30208 <nrfx_gpiote_init+0x38>
   3020e:	bf00      	nop
   30210:	2000084c 	.word	0x2000084c
   30214:	40006000 	.word	0x40006000
   30218:	0bad0000 	.word	0x0bad0000
   3021c:	0bad0005 	.word	0x0bad0005

00030220 <nrfx_gpiote_channel_alloc>:
{
   30220:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   30222:	4801      	ldr	r0, [pc, #4]	; (30228 <nrfx_gpiote_channel_alloc+0x8>)
   30224:	f7ff bdce 	b.w	2fdc4 <nrfx_flag32_alloc>
   30228:	200008bc 	.word	0x200008bc

0003022c <nrfx_gpiote_out_task_enable>:
{
   3022c:	b508      	push	{r3, lr}
   3022e:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
   30230:	f00a fd61 	bl	3acf6 <nrf_gpio_pin_present_check>
   30234:	b950      	cbnz	r0, 3024c <nrfx_gpiote_out_task_enable+0x20>
   30236:	4914      	ldr	r1, [pc, #80]	; (30288 <nrfx_gpiote_out_task_enable+0x5c>)
   30238:	4814      	ldr	r0, [pc, #80]	; (3028c <nrfx_gpiote_out_task_enable+0x60>)
   3023a:	f240 320d 	movw	r2, #781	; 0x30d
   3023e:	f007 fec3 	bl	37fc8 <assert_print>
   30242:	f240 310d 	movw	r1, #781	; 0x30d
    NRFX_ASSERT(pin_is_task_output(pin));
   30246:	4810      	ldr	r0, [pc, #64]	; (30288 <nrfx_gpiote_out_task_enable+0x5c>)
   30248:	f007 feb7 	bl	37fba <assert_post_action>
   3024c:	4608      	mov	r0, r1
   3024e:	f00a fd63 	bl	3ad18 <pin_is_task_output>
   30252:	b940      	cbnz	r0, 30266 <nrfx_gpiote_out_task_enable+0x3a>
   30254:	490c      	ldr	r1, [pc, #48]	; (30288 <nrfx_gpiote_out_task_enable+0x5c>)
   30256:	480d      	ldr	r0, [pc, #52]	; (3028c <nrfx_gpiote_out_task_enable+0x60>)
   30258:	f240 320e 	movw	r2, #782	; 0x30e
   3025c:	f007 feb4 	bl	37fc8 <assert_print>
   30260:	f240 310e 	movw	r1, #782	; 0x30e
   30264:	e7ef      	b.n	30246 <nrfx_gpiote_out_task_enable+0x1a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   30266:	4b0a      	ldr	r3, [pc, #40]	; (30290 <nrfx_gpiote_out_task_enable+0x64>)
   30268:	3108      	adds	r1, #8
   3026a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    nrf_gpiote_task_enable(NRF_GPIOTE, (uint32_t)pin_te_get(pin));
   3026e:	0b5b      	lsrs	r3, r3, #13
   30270:	009b      	lsls	r3, r3, #2
   30272:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   30276:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    uint32_t final_config = p_reg->CONFIG[idx] | GPIOTE_CONFIG_MODE_Task;
   3027a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3027e:	f042 0203 	orr.w	r2, r2, #3
    p_reg->CONFIG[idx] = final_config;
   30282:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   30286:	bd08      	pop	{r3, pc}
   30288:	0003ecd2 	.word	0x0003ecd2
   3028c:	0003c7f8 	.word	0x0003c7f8
   30290:	2000084c 	.word	0x2000084c

00030294 <nrfx_gpiote_out_task_disable>:
{
   30294:	b508      	push	{r3, lr}
   30296:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
   30298:	f00a fd2d 	bl	3acf6 <nrf_gpio_pin_present_check>
   3029c:	b950      	cbnz	r0, 302b4 <nrfx_gpiote_out_task_disable+0x20>
   3029e:	4914      	ldr	r1, [pc, #80]	; (302f0 <nrfx_gpiote_out_task_disable+0x5c>)
   302a0:	4814      	ldr	r0, [pc, #80]	; (302f4 <nrfx_gpiote_out_task_disable+0x60>)
   302a2:	f240 3216 	movw	r2, #790	; 0x316
   302a6:	f007 fe8f 	bl	37fc8 <assert_print>
   302aa:	f240 3116 	movw	r1, #790	; 0x316
    NRFX_ASSERT(pin_is_task_output(pin));
   302ae:	4810      	ldr	r0, [pc, #64]	; (302f0 <nrfx_gpiote_out_task_disable+0x5c>)
   302b0:	f007 fe83 	bl	37fba <assert_post_action>
   302b4:	4608      	mov	r0, r1
   302b6:	f00a fd2f 	bl	3ad18 <pin_is_task_output>
   302ba:	b940      	cbnz	r0, 302ce <nrfx_gpiote_out_task_disable+0x3a>
   302bc:	490c      	ldr	r1, [pc, #48]	; (302f0 <nrfx_gpiote_out_task_disable+0x5c>)
   302be:	480d      	ldr	r0, [pc, #52]	; (302f4 <nrfx_gpiote_out_task_disable+0x60>)
   302c0:	f240 3217 	movw	r2, #791	; 0x317
   302c4:	f007 fe80 	bl	37fc8 <assert_print>
   302c8:	f240 3117 	movw	r1, #791	; 0x317
   302cc:	e7ef      	b.n	302ae <nrfx_gpiote_out_task_disable+0x1a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   302ce:	4b0a      	ldr	r3, [pc, #40]	; (302f8 <nrfx_gpiote_out_task_disable+0x64>)
   302d0:	3108      	adds	r1, #8
   302d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    nrf_gpiote_task_disable(NRF_GPIOTE, (uint32_t)pin_te_get(pin));
   302d6:	0b5b      	lsrs	r3, r3, #13
   302d8:	009b      	lsls	r3, r3, #2
   302da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   302de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   302e2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   302e6:	f022 0203 	bic.w	r2, r2, #3
   302ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   302ee:	bd08      	pop	{r3, pc}
   302f0:	0003ecd2 	.word	0x0003ecd2
   302f4:	0003c7f8 	.word	0x0003c7f8
   302f8:	2000084c 	.word	0x2000084c

000302fc <nrfx_gpiote_out_task_get>:
{
   302fc:	b508      	push	{r3, lr}
   302fe:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
   30300:	f00a fcf9 	bl	3acf6 <nrf_gpio_pin_present_check>
   30304:	b950      	cbnz	r0, 3031c <nrfx_gpiote_out_task_get+0x20>
   30306:	490f      	ldr	r1, [pc, #60]	; (30344 <nrfx_gpiote_out_task_get+0x48>)
   30308:	480f      	ldr	r0, [pc, #60]	; (30348 <nrfx_gpiote_out_task_get+0x4c>)
   3030a:	f240 321f 	movw	r2, #799	; 0x31f
   3030e:	f007 fe5b 	bl	37fc8 <assert_print>
   30312:	f240 311f 	movw	r1, #799	; 0x31f
    NRFX_ASSERT(pin_is_task_output(pin));
   30316:	480b      	ldr	r0, [pc, #44]	; (30344 <nrfx_gpiote_out_task_get+0x48>)
   30318:	f007 fe4f 	bl	37fba <assert_post_action>
   3031c:	4608      	mov	r0, r1
   3031e:	f00a fcfb 	bl	3ad18 <pin_is_task_output>
   30322:	b940      	cbnz	r0, 30336 <nrfx_gpiote_out_task_get+0x3a>
   30324:	4907      	ldr	r1, [pc, #28]	; (30344 <nrfx_gpiote_out_task_get+0x48>)
   30326:	4808      	ldr	r0, [pc, #32]	; (30348 <nrfx_gpiote_out_task_get+0x4c>)
   30328:	f44f 7248 	mov.w	r2, #800	; 0x320
   3032c:	f007 fe4c 	bl	37fc8 <assert_print>
   30330:	f44f 7148 	mov.w	r1, #800	; 0x320
   30334:	e7ef      	b.n	30316 <nrfx_gpiote_out_task_get+0x1a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   30336:	4b05      	ldr	r3, [pc, #20]	; (3034c <nrfx_gpiote_out_task_get+0x50>)
   30338:	3108      	adds	r1, #8
   3033a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   3033e:	0b40      	lsrs	r0, r0, #13
}
   30340:	0080      	lsls	r0, r0, #2
   30342:	bd08      	pop	{r3, pc}
   30344:	0003ecd2 	.word	0x0003ecd2
   30348:	0003c7f8 	.word	0x0003c7f8
   3034c:	2000084c 	.word	0x2000084c

00030350 <nrfx_gpiote_trigger_enable>:
{
   30350:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30352:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   30354:	f7ff fd80 	bl	2fe58 <pin_has_trigger>
   30358:	b950      	cbnz	r0, 30370 <nrfx_gpiote_trigger_enable+0x20>
   3035a:	492c      	ldr	r1, [pc, #176]	; (3040c <nrfx_gpiote_trigger_enable+0xbc>)
   3035c:	482c      	ldr	r0, [pc, #176]	; (30410 <nrfx_gpiote_trigger_enable+0xc0>)
   3035e:	f240 32df 	movw	r2, #991	; 0x3df
   30362:	f007 fe31 	bl	37fc8 <assert_print>
   30366:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   3036a:	4828      	ldr	r0, [pc, #160]	; (3040c <nrfx_gpiote_trigger_enable+0xbc>)
   3036c:	f007 fe25 	bl	37fba <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   30370:	4620      	mov	r0, r4
   30372:	f7ff fd67 	bl	2fe44 <pin_in_use_by_te>
   30376:	4a27      	ldr	r2, [pc, #156]	; (30414 <nrfx_gpiote_trigger_enable+0xc4>)
   30378:	f104 0508 	add.w	r5, r4, #8
   3037c:	b1f8      	cbz	r0, 303be <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   3037e:	4620      	mov	r0, r4
   30380:	f7ff fd76 	bl	2fe70 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   30384:	b9d8      	cbnz	r0, 303be <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   30386:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   3038a:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3038c:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   3038e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   30392:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   30396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3039a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3039e:	6020      	str	r0, [r4, #0]
   303a0:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   303a2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   303a6:	f040 0001 	orr.w	r0, r0, #1
   303aa:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   303ae:	b121      	cbz	r1, 303ba <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   303b0:	2301      	movs	r3, #1
   303b2:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   303b4:	4a18      	ldr	r2, [pc, #96]	; (30418 <nrfx_gpiote_trigger_enable+0xc8>)
   303b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   303ba:	b003      	add	sp, #12
   303bc:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   303be:	b941      	cbnz	r1, 303d2 <nrfx_gpiote_trigger_enable+0x82>
   303c0:	4912      	ldr	r1, [pc, #72]	; (3040c <nrfx_gpiote_trigger_enable+0xbc>)
   303c2:	4813      	ldr	r0, [pc, #76]	; (30410 <nrfx_gpiote_trigger_enable+0xc0>)
   303c4:	f240 32ee 	movw	r2, #1006	; 0x3ee
   303c8:	f007 fdfe 	bl	37fc8 <assert_print>
   303cc:	f240 31ee 	movw	r1, #1006	; 0x3ee
   303d0:	e7cb      	b.n	3036a <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   303d2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   303d6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   303da:	2b04      	cmp	r3, #4
   303dc:	d012      	beq.n	30404 <nrfx_gpiote_trigger_enable+0xb4>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   303de:	2b05      	cmp	r3, #5
   303e0:	d012      	beq.n	30408 <nrfx_gpiote_trigger_enable+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   303e2:	a801      	add	r0, sp, #4
   303e4:	9401      	str	r4, [sp, #4]
   303e6:	f7ff fda7 	bl	2ff38 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   303ea:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   303ec:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   303f0:	40d9      	lsrs	r1, r3
   303f2:	f001 0101 	and.w	r1, r1, #1
   303f6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   303f8:	4620      	mov	r0, r4
}
   303fa:	b003      	add	sp, #12
   303fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   30400:	f00a bce2 	b.w	3adc8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   30404:	2103      	movs	r1, #3
   30406:	e7f7      	b.n	303f8 <nrfx_gpiote_trigger_enable+0xa8>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   30408:	2102      	movs	r1, #2
   3040a:	e7f5      	b.n	303f8 <nrfx_gpiote_trigger_enable+0xa8>
   3040c:	0003ecd2 	.word	0x0003ecd2
   30410:	0003c7f8 	.word	0x0003c7f8
   30414:	2000084c 	.word	0x2000084c
   30418:	40006000 	.word	0x40006000

0003041c <nrfx_gpiote_in_event_get>:
{
   3041c:	b508      	push	{r3, lr}
   3041e:	4602      	mov	r2, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
   30420:	f00a fc69 	bl	3acf6 <nrf_gpio_pin_present_check>
   30424:	b950      	cbnz	r0, 3043c <nrfx_gpiote_in_event_get+0x20>
   30426:	491a      	ldr	r1, [pc, #104]	; (30490 <nrfx_gpiote_in_event_get+0x74>)
   30428:	481a      	ldr	r0, [pc, #104]	; (30494 <nrfx_gpiote_in_event_get+0x78>)
   3042a:	f240 422d 	movw	r2, #1069	; 0x42d
   3042e:	f007 fdcb 	bl	37fc8 <assert_print>
   30432:	f240 412d 	movw	r1, #1069	; 0x42d
    NRFX_ASSERT(pin_is_input(pin));
   30436:	4816      	ldr	r0, [pc, #88]	; (30490 <nrfx_gpiote_in_event_get+0x74>)
   30438:	f007 fdbf 	bl	37fba <assert_post_action>
    return !pin_is_output(pin);
   3043c:	4610      	mov	r0, r2
   3043e:	f7ff fd17 	bl	2fe70 <pin_is_output>
    NRFX_ASSERT(pin_is_input(pin));
   30442:	b140      	cbz	r0, 30456 <nrfx_gpiote_in_event_get+0x3a>
   30444:	4912      	ldr	r1, [pc, #72]	; (30490 <nrfx_gpiote_in_event_get+0x74>)
   30446:	4813      	ldr	r0, [pc, #76]	; (30494 <nrfx_gpiote_in_event_get+0x78>)
   30448:	f240 422e 	movw	r2, #1070	; 0x42e
   3044c:	f007 fdbc 	bl	37fc8 <assert_print>
   30450:	f240 412e 	movw	r1, #1070	; 0x42e
   30454:	e7ef      	b.n	30436 <nrfx_gpiote_in_event_get+0x1a>
    NRFX_ASSERT(pin_has_trigger(pin));
   30456:	4610      	mov	r0, r2
   30458:	f7ff fcfe 	bl	2fe58 <pin_has_trigger>
   3045c:	b940      	cbnz	r0, 30470 <nrfx_gpiote_in_event_get+0x54>
   3045e:	490c      	ldr	r1, [pc, #48]	; (30490 <nrfx_gpiote_in_event_get+0x74>)
   30460:	480c      	ldr	r0, [pc, #48]	; (30494 <nrfx_gpiote_in_event_get+0x78>)
   30462:	f240 422f 	movw	r2, #1071	; 0x42f
   30466:	f007 fdaf 	bl	37fc8 <assert_print>
   3046a:	f240 412f 	movw	r1, #1071	; 0x42f
   3046e:	e7e2      	b.n	30436 <nrfx_gpiote_in_event_get+0x1a>
    if (pin_in_use_by_te(pin))
   30470:	4610      	mov	r0, r2
   30472:	f7ff fce7 	bl	2fe44 <pin_in_use_by_te>
   30476:	b140      	cbz	r0, 3048a <nrfx_gpiote_in_event_get+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   30478:	4b07      	ldr	r3, [pc, #28]	; (30498 <nrfx_gpiote_in_event_get+0x7c>)
   3047a:	3208      	adds	r2, #8
   3047c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   30480:	0b40      	lsrs	r0, r0, #13
   30482:	0080      	lsls	r0, r0, #2
   30484:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
   30488:	bd08      	pop	{r3, pc}
    return NRF_GPIOTE_EVENT_PORT;
   3048a:	f44f 70be 	mov.w	r0, #380	; 0x17c
   3048e:	e7fb      	b.n	30488 <nrfx_gpiote_in_event_get+0x6c>
   30490:	0003ecd2 	.word	0x0003ecd2
   30494:	0003c7f8 	.word	0x0003c7f8
   30498:	2000084c 	.word	0x2000084c

0003049c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   3049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   304a0:	4b69      	ldr	r3, [pc, #420]	; (30648 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
   304a2:	486a      	ldr	r0, [pc, #424]	; (3064c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   304a4:	496a      	ldr	r1, [pc, #424]	; (30650 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
   304a6:	2600      	movs	r6, #0
{
   304a8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   304aa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   304ac:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   304ae:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   304b0:	b135      	cbz	r5, 304c0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   304b2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   304b6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   304b8:	bf1e      	ittt	ne
   304ba:	601c      	strne	r4, [r3, #0]
   304bc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   304be:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   304c0:	3304      	adds	r3, #4
   304c2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   304c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   304c8:	d1f1      	bne.n	304ae <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   304ca:	f8df 9180 	ldr.w	r9, [pc, #384]	; 3064c <nrfx_gpiote_irq_handler+0x1b0>
   304ce:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   304d2:	2b00      	cmp	r3, #0
   304d4:	f000 809b 	beq.w	3060e <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
   304d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   304dc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   304e0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   304e2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   304e6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   304ea:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   304ec:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   304f0:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   304f4:	f10d 0a10 	add.w	sl, sp, #16
   304f8:	ea4f 1348 	mov.w	r3, r8, lsl #5
   304fc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   304fe:	f04f 0b01 	mov.w	fp, #1
   30502:	e04b      	b.n	3059c <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
   30504:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   30506:	4a53      	ldr	r2, [pc, #332]	; (30654 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   30508:	fa94 f4a4 	rbit	r4, r4
   3050c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   30510:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   30512:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   30514:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   30518:	f004 0107 	and.w	r1, r4, #7
   3051c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   30520:	f81a 3000 	ldrb.w	r3, [sl, r0]
   30524:	9403      	str	r4, [sp, #12]
   30526:	fa0b f101 	lsl.w	r1, fp, r1
   3052a:	ea23 0301 	bic.w	r3, r3, r1
   3052e:	08ba      	lsrs	r2, r7, #2
   30530:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30534:	a803      	add	r0, sp, #12
   30536:	9201      	str	r2, [sp, #4]
   30538:	f7ff fcfe 	bl	2ff38 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3053c:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   3053e:	9a01      	ldr	r2, [sp, #4]
   30540:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   30544:	f3c7 0582 	ubfx	r5, r7, #2, #3
   30548:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
   3054c:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3054e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   30550:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   30554:	d52c      	bpl.n	305b0 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
   30556:	4639      	mov	r1, r7
   30558:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3055a:	b2dd      	uxtb	r5, r3
   3055c:	f7ff fc92 	bl	2fe84 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30560:	a803      	add	r0, sp, #12
   30562:	9403      	str	r4, [sp, #12]
   30564:	f7ff fce8 	bl	2ff38 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   30568:	9b03      	ldr	r3, [sp, #12]
   3056a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3056e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   30572:	f3c3 4301 	ubfx	r3, r3, #16, #2
   30576:	429d      	cmp	r5, r3
   30578:	d107      	bne.n	3058a <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3057a:	2100      	movs	r1, #0
   3057c:	4620      	mov	r0, r4
   3057e:	f00a fc23 	bl	3adc8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   30582:	4629      	mov	r1, r5
   30584:	4620      	mov	r0, r4
   30586:	f00a fc1f 	bl	3adc8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3058a:	a803      	add	r0, sp, #12
   3058c:	9403      	str	r4, [sp, #12]
   3058e:	f7ff fcd3 	bl	2ff38 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   30592:	9b03      	ldr	r3, [sp, #12]
   30594:	fa0b f303 	lsl.w	r3, fp, r3
   30598:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   3059c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   305a0:	2c00      	cmp	r4, #0
   305a2:	d1af      	bne.n	30504 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   305a4:	f1b8 0f00 	cmp.w	r8, #0
   305a8:	d11d      	bne.n	305e6 <nrfx_gpiote_irq_handler+0x14a>
   305aa:	f04f 0801 	mov.w	r8, #1
   305ae:	e7a3      	b.n	304f8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   305b0:	2b02      	cmp	r3, #2
   305b2:	d10c      	bne.n	305ce <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   305b4:	2103      	movs	r1, #3
   305b6:	4620      	mov	r0, r4
   305b8:	f00a fc06 	bl	3adc8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   305bc:	f005 0305 	and.w	r3, r5, #5
   305c0:	2b01      	cmp	r3, #1
   305c2:	d1e2      	bne.n	3058a <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
   305c4:	4639      	mov	r1, r7
   305c6:	4620      	mov	r0, r4
   305c8:	f7ff fc5c 	bl	2fe84 <call_handler>
   305cc:	e7dd      	b.n	3058a <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   305ce:	2102      	movs	r1, #2
   305d0:	4620      	mov	r0, r4
   305d2:	9301      	str	r3, [sp, #4]
   305d4:	f00a fbf8 	bl	3adc8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   305d8:	2d03      	cmp	r5, #3
   305da:	d0f3      	beq.n	305c4 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   305dc:	9b01      	ldr	r3, [sp, #4]
   305de:	2b03      	cmp	r3, #3
   305e0:	d1d3      	bne.n	3058a <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   305e2:	2d02      	cmp	r5, #2
   305e4:	e7ed      	b.n	305c2 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
   305e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   305ea:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   305ee:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   305f2:	4919      	ldr	r1, [pc, #100]	; (30658 <nrfx_gpiote_irq_handler+0x1bc>)
   305f4:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   305f8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   305fa:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   305fe:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   30602:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   30604:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   30606:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   3060a:	f47f af71 	bne.w	304f0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   3060e:	2401      	movs	r4, #1
    while (mask)
   30610:	b916      	cbnz	r6, 30618 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   30612:	b007      	add	sp, #28
   30614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   30618:	fa96 f3a6 	rbit	r3, r6
   3061c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   30620:	fa04 f203 	lsl.w	r2, r4, r3
   30624:	009b      	lsls	r3, r3, #2
   30626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3062a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3062e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   30632:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   30636:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3063a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   3063e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   30642:	f7ff fc1f 	bl	2fe84 <call_handler>
   30646:	e7e3      	b.n	30610 <nrfx_gpiote_irq_handler+0x174>
   30648:	40006100 	.word	0x40006100
   3064c:	40006000 	.word	0x40006000
   30650:	40006120 	.word	0x40006120
   30654:	2000084c 	.word	0x2000084c
   30658:	50000300 	.word	0x50000300

0003065c <nvmc_word_write>:
   3065c:	4a04      	ldr	r2, [pc, #16]	; (30670 <nvmc_word_write+0x14>)
   3065e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   30662:	07db      	lsls	r3, r3, #31
   30664:	d5fb      	bpl.n	3065e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   30666:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   30668:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3066c:	4770      	bx	lr
   3066e:	bf00      	nop
   30670:	4001e000 	.word	0x4001e000

00030674 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   30674:	b508      	push	{r3, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   30676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3067a:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   3067c:	6959      	ldr	r1, [r3, #20]
    return flash_page_size_get() * flash_page_count_get();
   3067e:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   30680:	4290      	cmp	r0, r2
   30682:	d207      	bcs.n	30694 <nrfx_nvmc_page_erase+0x20>
    return p_reg->CODEPAGESIZE;
   30684:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   30686:	fbb0 f3f2 	udiv	r3, r0, r2
   3068a:	fb02 0313 	mls	r3, r2, r3, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   3068e:	b163      	cbz	r3, 306aa <nrfx_nvmc_page_erase+0x36>
    {
        return NRFX_ERROR_INVALID_ADDR;
   30690:	480d      	ldr	r0, [pc, #52]	; (306c8 <nrfx_nvmc_page_erase+0x54>)
   30692:	e018      	b.n	306c6 <nrfx_nvmc_page_erase+0x52>
    NRFX_ASSERT(is_valid_address(addr, false));
   30694:	490d      	ldr	r1, [pc, #52]	; (306cc <nrfx_nvmc_page_erase+0x58>)
   30696:	480e      	ldr	r0, [pc, #56]	; (306d0 <nrfx_nvmc_page_erase+0x5c>)
   30698:	f44f 7283 	mov.w	r2, #262	; 0x106
   3069c:	f007 fc94 	bl	37fc8 <assert_print>
   306a0:	480a      	ldr	r0, [pc, #40]	; (306cc <nrfx_nvmc_page_erase+0x58>)
   306a2:	f44f 7183 	mov.w	r1, #262	; 0x106
   306a6:	f007 fc88 	bl	37fba <assert_post_action>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   306aa:	4b0a      	ldr	r3, [pc, #40]	; (306d4 <nrfx_nvmc_page_erase+0x60>)
   306ac:	2202      	movs	r2, #2
   306ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   306b2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   306b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   306ba:	07d2      	lsls	r2, r2, #31
   306bc:	d5fb      	bpl.n	306b6 <nrfx_nvmc_page_erase+0x42>
    p_reg->CONFIG = (uint32_t)mode;
   306be:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   306c0:	4805      	ldr	r0, [pc, #20]	; (306d8 <nrfx_nvmc_page_erase+0x64>)
   306c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   306c6:	bd08      	pop	{r3, pc}
   306c8:	0bad000a 	.word	0x0bad000a
   306cc:	0003ed1c 	.word	0x0003ed1c
   306d0:	0003c7f8 	.word	0x0003c7f8
   306d4:	4001e000 	.word	0x4001e000
   306d8:	0bad0000 	.word	0x0bad0000

000306dc <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   306dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   306de:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   306e0:	2101      	movs	r1, #1
{
   306e2:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   306e4:	f00a fb8f 	bl	3ae06 <is_valid_address>
   306e8:	b950      	cbnz	r0, 30700 <nrfx_nvmc_word_write+0x24>
   306ea:	4911      	ldr	r1, [pc, #68]	; (30730 <nrfx_nvmc_word_write+0x54>)
   306ec:	4811      	ldr	r0, [pc, #68]	; (30734 <nrfx_nvmc_word_write+0x58>)
   306ee:	f44f 72ca 	mov.w	r2, #404	; 0x194
   306f2:	f007 fc69 	bl	37fc8 <assert_print>
   306f6:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   306fa:	480d      	ldr	r0, [pc, #52]	; (30730 <nrfx_nvmc_word_write+0x54>)
   306fc:	f007 fc5d 	bl	37fba <assert_post_action>
   30700:	f014 0703 	ands.w	r7, r4, #3
   30704:	d008      	beq.n	30718 <nrfx_nvmc_word_write+0x3c>
   30706:	490a      	ldr	r1, [pc, #40]	; (30730 <nrfx_nvmc_word_write+0x54>)
   30708:	480a      	ldr	r0, [pc, #40]	; (30734 <nrfx_nvmc_word_write+0x58>)
   3070a:	f240 1295 	movw	r2, #405	; 0x195
   3070e:	f007 fc5b 	bl	37fc8 <assert_print>
   30712:	f240 1195 	movw	r1, #405	; 0x195
   30716:	e7f0      	b.n	306fa <nrfx_nvmc_word_write+0x1e>
   30718:	4e07      	ldr	r6, [pc, #28]	; (30738 <nrfx_nvmc_word_write+0x5c>)
   3071a:	2301      	movs	r3, #1
   3071c:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   30720:	4629      	mov	r1, r5
   30722:	4620      	mov	r0, r4
   30724:	f7ff ff9a 	bl	3065c <nvmc_word_write>
   30728:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   3072c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3072e:	bf00      	nop
   30730:	0003ed1c 	.word	0x0003ed1c
   30734:	0003c7f8 	.word	0x0003c7f8
   30738:	4001e000 	.word	0x4001e000

0003073c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   3073c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   3073e:	4801      	ldr	r0, [pc, #4]	; (30744 <nrfx_ppi_channel_alloc+0x8>)
   30740:	f7ff bb40 	b.w	2fdc4 <nrfx_flag32_alloc>
   30744:	200008c8 	.word	0x200008c8

00030748 <nrf_gpio_pin_port_decode>:
{
   30748:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3074a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   3074c:	095a      	lsrs	r2, r3, #5
   3074e:	d00c      	beq.n	3076a <nrf_gpio_pin_port_decode+0x22>
   30750:	2a01      	cmp	r2, #1
   30752:	d013      	beq.n	3077c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   30754:	490e      	ldr	r1, [pc, #56]	; (30790 <nrf_gpio_pin_port_decode+0x48>)
   30756:	480f      	ldr	r0, [pc, #60]	; (30794 <nrf_gpio_pin_port_decode+0x4c>)
   30758:	f240 2247 	movw	r2, #583	; 0x247
   3075c:	f007 fc34 	bl	37fc8 <assert_print>
   30760:	480b      	ldr	r0, [pc, #44]	; (30790 <nrf_gpio_pin_port_decode+0x48>)
   30762:	f240 2147 	movw	r1, #583	; 0x247
   30766:	f007 fc28 	bl	37fba <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   3076a:	f04f 32ff 	mov.w	r2, #4294967295
   3076e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   30772:	07d9      	lsls	r1, r3, #31
   30774:	d5ee      	bpl.n	30754 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   30776:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   3077a:	e008      	b.n	3078e <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   3077c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   30780:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30784:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   30786:	07d2      	lsls	r2, r2, #31
   30788:	d5e4      	bpl.n	30754 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   3078a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   3078c:	4802      	ldr	r0, [pc, #8]	; (30798 <nrf_gpio_pin_port_decode+0x50>)
}
   3078e:	bd08      	pop	{r3, pc}
   30790:	0003c7c5 	.word	0x0003c7c5
   30794:	0003c7f8 	.word	0x0003c7f8
   30798:	50000300 	.word	0x50000300

0003079c <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
   3079c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_seq != NULL);
   3079e:	b952      	cbnz	r2, 307b6 <nrf_pwm_sequence_set+0x1a>
   307a0:	4929      	ldr	r1, [pc, #164]	; (30848 <nrf_pwm_sequence_set+0xac>)
   307a2:	482a      	ldr	r0, [pc, #168]	; (3084c <nrf_pwm_sequence_set+0xb0>)
   307a4:	f44f 722c 	mov.w	r2, #688	; 0x2b0
   307a8:	f007 fc0e 	bl	37fc8 <assert_print>
   307ac:	f44f 712c 	mov.w	r1, #688	; 0x2b0
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   307b0:	4825      	ldr	r0, [pc, #148]	; (30848 <nrf_pwm_sequence_set+0xac>)
   307b2:	f007 fc02 	bl	37fba <assert_post_action>
    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   307b6:	6813      	ldr	r3, [r2, #0]
    NRFX_ASSERT(p_values != NULL);
   307b8:	b943      	cbnz	r3, 307cc <nrf_pwm_sequence_set+0x30>
   307ba:	4923      	ldr	r1, [pc, #140]	; (30848 <nrf_pwm_sequence_set+0xac>)
   307bc:	4823      	ldr	r0, [pc, #140]	; (3084c <nrf_pwm_sequence_set+0xb0>)
   307be:	f240 22bd 	movw	r2, #701	; 0x2bd
   307c2:	f007 fc01 	bl	37fc8 <assert_print>
   307c6:	f240 21bd 	movw	r1, #701	; 0x2bd
   307ca:	e7f1      	b.n	307b0 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   307cc:	eb00 1441 	add.w	r4, r0, r1, lsl #5
   307d0:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   307d4:	8893      	ldrh	r3, [r2, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   307d6:	b943      	cbnz	r3, 307ea <nrf_pwm_sequence_set+0x4e>
   307d8:	491b      	ldr	r1, [pc, #108]	; (30848 <nrf_pwm_sequence_set+0xac>)
   307da:	481c      	ldr	r0, [pc, #112]	; (3084c <nrf_pwm_sequence_set+0xb0>)
   307dc:	f240 22c6 	movw	r2, #710	; 0x2c6
   307e0:	f007 fbf2 	bl	37fc8 <assert_print>
   307e4:	f240 21c6 	movw	r1, #710	; 0x2c6
   307e8:	e7e2      	b.n	307b0 <nrf_pwm_sequence_set+0x14>
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   307ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   307ee:	d008      	beq.n	30802 <nrf_pwm_sequence_set+0x66>
   307f0:	4915      	ldr	r1, [pc, #84]	; (30848 <nrf_pwm_sequence_set+0xac>)
   307f2:	4816      	ldr	r0, [pc, #88]	; (3084c <nrf_pwm_sequence_set+0xb0>)
   307f4:	f240 22c7 	movw	r2, #711	; 0x2c7
   307f8:	f007 fbe6 	bl	37fc8 <assert_print>
   307fc:	f240 21c7 	movw	r1, #711	; 0x2c7
   30800:	e7d6      	b.n	307b0 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].CNT = length;
   30802:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   30806:	6893      	ldr	r3, [r2, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   30808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   3080c:	d308      	bcc.n	30820 <nrf_pwm_sequence_set+0x84>
   3080e:	490e      	ldr	r1, [pc, #56]	; (30848 <nrf_pwm_sequence_set+0xac>)
   30810:	480e      	ldr	r0, [pc, #56]	; (3084c <nrf_pwm_sequence_set+0xb0>)
   30812:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   30816:	f007 fbd7 	bl	37fc8 <assert_print>
   3081a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   3081e:	e7c7      	b.n	307b0 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   30820:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   30824:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   30828:	68d3      	ldr	r3, [r2, #12]
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   3082a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   3082e:	d308      	bcc.n	30842 <nrf_pwm_sequence_set+0xa6>
   30830:	4905      	ldr	r1, [pc, #20]	; (30848 <nrf_pwm_sequence_set+0xac>)
   30832:	4806      	ldr	r0, [pc, #24]	; (3084c <nrf_pwm_sequence_set+0xb0>)
   30834:	f240 22d9 	movw	r2, #729	; 0x2d9
   30838:	f007 fbc6 	bl	37fc8 <assert_print>
   3083c:	f240 21d9 	movw	r1, #729	; 0x2d9
   30840:	e7b6      	b.n	307b0 <nrf_pwm_sequence_set+0x14>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   30842:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
}
   30846:	bd10      	pop	{r4, pc}
   30848:	0003ed61 	.word	0x0003ed61
   3084c:	0003c7f8 	.word	0x0003c7f8

00030850 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   30850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30854:	4604      	mov	r4, r0
   30856:	b087      	sub	sp, #28
    NRFX_ASSERT(p_config);
   30858:	460d      	mov	r5, r1
   3085a:	b941      	cbnz	r1, 3086e <nrfx_pwm_init+0x1e>
   3085c:	4958      	ldr	r1, [pc, #352]	; (309c0 <nrfx_pwm_init+0x170>)
   3085e:	4859      	ldr	r0, [pc, #356]	; (309c4 <nrfx_pwm_init+0x174>)
   30860:	228c      	movs	r2, #140	; 0x8c
   30862:	f007 fbb1 	bl	37fc8 <assert_print>
   30866:	4856      	ldr	r0, [pc, #344]	; (309c0 <nrfx_pwm_init+0x170>)
   30868:	218c      	movs	r1, #140	; 0x8c
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   3086a:	f007 fba6 	bl	37fba <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   3086e:	f890 8004 	ldrb.w	r8, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   30872:	4e55      	ldr	r6, [pc, #340]	; (309c8 <nrfx_pwm_init+0x178>)
   30874:	210c      	movs	r1, #12
   30876:	fb01 f108 	mul.w	r1, r1, r8
   3087a:	1870      	adds	r0, r6, r1
   3087c:	7a07      	ldrb	r7, [r0, #8]
   3087e:	2f00      	cmp	r7, #0
   30880:	f040 809c 	bne.w	309bc <nrfx_pwm_init+0x16c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   30884:	6043      	str	r3, [r0, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   30886:	7b2b      	ldrb	r3, [r5, #12]
    p_cb->handler = handler;
   30888:	5072      	str	r2, [r6, r1]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   3088a:	7283      	strb	r3, [r0, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   3088c:	b1bb      	cbz	r3, 308be <nrfx_pwm_init+0x6e>
   3088e:	7b6b      	ldrb	r3, [r5, #13]
   30890:	b1ab      	cbz	r3, 308be <nrfx_pwm_init+0x6e>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   30892:	6823      	ldr	r3, [r4, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   30894:	2201      	movs	r2, #1
   30896:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   3089a:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    nrf_pwm_configure(p_instance->p_registers,
   3089e:	6823      	ldr	r3, [r4, #0]
        p_config->base_clock, p_config->count_mode, p_config->top_value);
   308a0:	7968      	ldrb	r0, [r5, #5]
   308a2:	79a9      	ldrb	r1, [r5, #6]
   308a4:	892a      	ldrh	r2, [r5, #8]
   308a6:	2f00      	cmp	r7, #0
   308a8:	da50      	bge.n	3094c <nrfx_pwm_init+0xfc>
   308aa:	4948      	ldr	r1, [pc, #288]	; (309cc <nrfx_pwm_init+0x17c>)
   308ac:	4845      	ldr	r0, [pc, #276]	; (309c4 <nrfx_pwm_init+0x174>)
   308ae:	f240 22a5 	movw	r2, #677	; 0x2a5
   308b2:	f007 fb89 	bl	37fc8 <assert_print>
   308b6:	4845      	ldr	r0, [pc, #276]	; (309cc <nrfx_pwm_init+0x17c>)
   308b8:	f240 21a5 	movw	r1, #677	; 0x2a5
   308bc:	e7d5      	b.n	3086a <nrfx_pwm_init+0x1a>
   308be:	f105 39ff 	add.w	r9, r5, #4294967295
   308c2:	af02      	add	r7, sp, #8
   308c4:	f105 0a03 	add.w	sl, r5, #3
        uint8_t output_pin = p_config->output_pins[i];
   308c8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   308cc:	2aff      	cmp	r2, #255	; 0xff
   308ce:	d039      	beq.n	30944 <nrfx_pwm_init+0xf4>
            if (!p_config->skip_gpio_cfg)
   308d0:	7b29      	ldrb	r1, [r5, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   308d2:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
   308d6:	f8c7 b000 	str.w	fp, [r7]
            if (!p_config->skip_gpio_cfg)
   308da:	b9b1      	cbnz	r1, 3090a <nrfx_pwm_init+0xba>
    if (value == 0)
   308dc:	0613      	lsls	r3, r2, #24
   308de:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   308e2:	a801      	add	r0, sp, #4
    if (value == 0)
   308e4:	d426      	bmi.n	30934 <nrfx_pwm_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   308e6:	f7ff ff2f 	bl	30748 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   308ea:	9901      	ldr	r1, [sp, #4]
   308ec:	2201      	movs	r2, #1
   308ee:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   308f0:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   308f4:	a801      	add	r0, sp, #4
   308f6:	f8cd b004 	str.w	fp, [sp, #4]
   308fa:	f7ff ff25 	bl	30748 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   308fe:	9b01      	ldr	r3, [sp, #4]
   30900:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30904:	2203      	movs	r2, #3
   30906:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   3090a:	45ca      	cmp	sl, r9
   3090c:	f107 0704 	add.w	r7, r7, #4
   30910:	d1da      	bne.n	308c8 <nrfx_pwm_init+0x78>
    if (!p_config->skip_psel_cfg)
   30912:	7b6b      	ldrb	r3, [r5, #13]
   30914:	2b00      	cmp	r3, #0
   30916:	d1bc      	bne.n	30892 <nrfx_pwm_init+0x42>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   30918:	6823      	ldr	r3, [r4, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   3091a:	9a02      	ldr	r2, [sp, #8]
   3091c:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
   30920:	9a03      	ldr	r2, [sp, #12]
   30922:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   30926:	9a04      	ldr	r2, [sp, #16]
   30928:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
   3092c:	9a05      	ldr	r2, [sp, #20]
   3092e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   30932:	e7ae      	b.n	30892 <nrfx_pwm_init+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30934:	f7ff ff08 	bl	30748 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   30938:	9901      	ldr	r1, [sp, #4]
   3093a:	2201      	movs	r2, #1
   3093c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   3093e:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
   30942:	e7d7      	b.n	308f4 <nrfx_pwm_init+0xa4>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   30944:	f04f 33ff 	mov.w	r3, #4294967295
   30948:	603b      	str	r3, [r7, #0]
   3094a:	e7de      	b.n	3090a <nrfx_pwm_init+0xba>
    p_reg->PRESCALER  = base_clock;
   3094c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
   30950:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   30954:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_pwm_decoder_set(p_instance->p_registers,
   30958:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   3095a:	896a      	ldrh	r2, [r5, #10]
   3095c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   30960:	6822      	ldr	r2, [r4, #0]
    p_reg->SHORTS = mask;
   30962:	2300      	movs	r3, #0
   30964:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_pwm_int_set(p_instance->p_registers, 0);
   30968:	6822      	ldr	r2, [r4, #0]
    p_reg->INTEN = mask;
   3096a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
   3096e:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30970:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
   30974:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
   30978:	6822      	ldr	r2, [r4, #0]
   3097a:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
   3097e:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
   30982:	6822      	ldr	r2, [r4, #0]
   30984:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   30988:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   3098c:	6822      	ldr	r2, [r4, #0]
   3098e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   30992:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   30996:	230c      	movs	r3, #12
   30998:	fb03 f308 	mul.w	r3, r3, r8
   3099c:	58f3      	ldr	r3, [r6, r3]
   3099e:	b123      	cbz	r3, 309aa <nrfx_pwm_init+0x15a>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   309a0:	6820      	ldr	r0, [r4, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   309a2:	f340 3007 	sbfx	r0, r0, #12, #8
   309a6:	f7f4 fd1f 	bl	253e8 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   309aa:	230c      	movs	r3, #12
   309ac:	fb03 6608 	mla	r6, r3, r8, r6

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   309b0:	4807      	ldr	r0, [pc, #28]	; (309d0 <nrfx_pwm_init+0x180>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   309b2:	2301      	movs	r3, #1
   309b4:	7233      	strb	r3, [r6, #8]
}
   309b6:	b007      	add	sp, #28
   309b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return err_code;
   309bc:	4805      	ldr	r0, [pc, #20]	; (309d4 <nrfx_pwm_init+0x184>)
   309be:	e7fa      	b.n	309b6 <nrfx_pwm_init+0x166>
   309c0:	0003ed93 	.word	0x0003ed93
   309c4:	0003c7f8 	.word	0x0003c7f8
   309c8:	20004054 	.word	0x20004054
   309cc:	0003ed61 	.word	0x0003ed61
   309d0:	0bad0000 	.word	0x0bad0000
   309d4:	0bad0005 	.word	0x0bad0005

000309d8 <nrfx_pwm_uninit>:


void nrfx_pwm_uninit(nrfx_pwm_t const * p_instance)
{
   309d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   309dc:	4e1c      	ldr	r6, [pc, #112]	; (30a50 <nrfx_pwm_uninit+0x78>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   309de:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   309e0:	240c      	movs	r4, #12
   309e2:	fb04 6407 	mla	r4, r4, r7, r6
{
   309e6:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   309e8:	7a23      	ldrb	r3, [r4, #8]
   309ea:	b943      	cbnz	r3, 309fe <nrfx_pwm_uninit+0x26>
   309ec:	4919      	ldr	r1, [pc, #100]	; (30a54 <nrfx_pwm_uninit+0x7c>)
   309ee:	481a      	ldr	r0, [pc, #104]	; (30a58 <nrfx_pwm_uninit+0x80>)
   309f0:	22ca      	movs	r2, #202	; 0xca
   309f2:	f007 fae9 	bl	37fc8 <assert_print>
   309f6:	4817      	ldr	r0, [pc, #92]	; (30a54 <nrfx_pwm_uninit+0x7c>)
   309f8:	21ca      	movs	r1, #202	; 0xca
   309fa:	f007 fade 	bl	37fba <assert_post_action>
   309fe:	6800      	ldr	r0, [r0, #0]

    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_registers));
   30a00:	f340 3007 	sbfx	r0, r0, #12, #8
   30a04:	f7f4 fcfe 	bl	25404 <arch_irq_disable>
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_DISABLE(DMA_ISSUE_EGU_IRQn);
#endif

    nrf_pwm_disable(p_instance->p_registers);
   30a08:	682b      	ldr	r3, [r5, #0]

    if (!p_cb->skip_gpio_cfg)
   30a0a:	7aa4      	ldrb	r4, [r4, #10]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Disabled << PWM_ENABLE_ENABLE_Pos);
   30a0c:	2200      	movs	r2, #0
   30a0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   30a12:	b9a4      	cbnz	r4, 30a3e <nrfx_pwm_uninit+0x66>
    reg->PIN_CNF[pin_number] = cnf;
   30a14:	f04f 0802 	mov.w	r8, #2
    return p_reg->PSEL.OUT[channel];
   30a18:	f504 72ac 	add.w	r2, r4, #344	; 0x158
        uint32_t pin = nrf_pwm_pin_get(p_instance->p_registers, ch_idx);
   30a1c:	682b      	ldr	r3, [r5, #0]
   30a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        if (pin != NRF_PWM_PIN_NOT_CONNECTED)
   30a22:	1c5a      	adds	r2, r3, #1
   30a24:	d008      	beq.n	30a38 <nrfx_pwm_uninit+0x60>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30a26:	a801      	add	r0, sp, #4
   30a28:	9301      	str	r3, [sp, #4]
   30a2a:	f7ff fe8d 	bl	30748 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30a2e:	9b01      	ldr	r3, [sp, #4]
   30a30:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30a34:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    for (uint8_t ch_idx = 0; ch_idx < NRF_PWM_CHANNEL_COUNT; ch_idx++)
   30a38:	3401      	adds	r4, #1
   30a3a:	2c04      	cmp	r4, #4
   30a3c:	d1ec      	bne.n	30a18 <nrfx_pwm_uninit+0x40>
    {
        deconfigure_pins(p_instance);
    }

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   30a3e:	230c      	movs	r3, #12
   30a40:	fb03 6607 	mla	r6, r3, r7, r6
   30a44:	2300      	movs	r3, #0
   30a46:	7233      	strb	r3, [r6, #8]
}
   30a48:	b002      	add	sp, #8
   30a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30a4e:	bf00      	nop
   30a50:	20004054 	.word	0x20004054
   30a54:	0003ed93 	.word	0x0003ed93
   30a58:	0003c7f8 	.word	0x0003c7f8

00030a5c <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   30a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a60:	4616      	mov	r6, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   30a62:	7902      	ldrb	r2, [r0, #4]
{
   30a64:	461d      	mov	r5, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   30a66:	4b30      	ldr	r3, [pc, #192]	; (30b28 <nrfx_pwm_simple_playback+0xcc>)
{
   30a68:	4688      	mov	r8, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   30a6a:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   30a6e:	210c      	movs	r1, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   30a70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   30a74:	fb01 3302 	mla	r3, r1, r2, r3
{
   30a78:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   30a7a:	7a1b      	ldrb	r3, [r3, #8]
   30a7c:	b953      	cbnz	r3, 30a94 <nrfx_pwm_simple_playback+0x38>
   30a7e:	492b      	ldr	r1, [pc, #172]	; (30b2c <nrfx_pwm_simple_playback+0xd0>)
   30a80:	482b      	ldr	r0, [pc, #172]	; (30b30 <nrfx_pwm_simple_playback+0xd4>)
   30a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
   30a86:	f007 fa9f 	bl	37fc8 <assert_print>
   30a8a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    NRFX_ASSERT(playback_count > 0);
   30a8e:	4827      	ldr	r0, [pc, #156]	; (30b2c <nrfx_pwm_simple_playback+0xd0>)
   30a90:	f007 fa93 	bl	37fba <assert_post_action>
   30a94:	b946      	cbnz	r6, 30aa8 <nrfx_pwm_simple_playback+0x4c>
   30a96:	4925      	ldr	r1, [pc, #148]	; (30b2c <nrfx_pwm_simple_playback+0xd0>)
   30a98:	4825      	ldr	r0, [pc, #148]	; (30b30 <nrfx_pwm_simple_playback+0xd4>)
   30a9a:	f240 122d 	movw	r2, #301	; 0x12d
   30a9e:	f007 fa93 	bl	37fc8 <assert_print>
   30aa2:	f240 112d 	movw	r1, #301	; 0x12d
   30aa6:	e7f2      	b.n	30a8e <nrfx_pwm_simple_playback+0x32>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   30aa8:	f8d8 3000 	ldr.w	r3, [r8]
   30aac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   30ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   30ab4:	d008      	beq.n	30ac8 <nrfx_pwm_simple_playback+0x6c>
   30ab6:	491d      	ldr	r1, [pc, #116]	; (30b2c <nrfx_pwm_simple_playback+0xd0>)
   30ab8:	481d      	ldr	r0, [pc, #116]	; (30b30 <nrfx_pwm_simple_playback+0xd4>)
   30aba:	f44f 7297 	mov.w	r2, #302	; 0x12e
   30abe:	f007 fa83 	bl	37fc8 <assert_print>
   30ac2:	f44f 7197 	mov.w	r1, #302	; 0x12e
   30ac6:	e7e2      	b.n	30a8e <nrfx_pwm_simple_playback+0x32>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   30ac8:	6800      	ldr	r0, [r0, #0]
   30aca:	4642      	mov	r2, r8
   30acc:	2100      	movs	r1, #0
   30ace:	f7ff fe65 	bl	3079c <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   30ad2:	4642      	mov	r2, r8
   30ad4:	2101      	movs	r1, #1
   30ad6:	6820      	ldr	r0, [r4, #0]
   30ad8:	f7ff fe60 	bl	3079c <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   30adc:	6822      	ldr	r2, [r4, #0]
   30ade:	f006 0301 	and.w	r3, r6, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   30ae2:	eb03 0656 	add.w	r6, r3, r6, lsr #1
   30ae6:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   30aea:	f015 0f01 	tst.w	r5, #1
   30aee:	6821      	ldr	r1, [r4, #0]
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   30af0:	b2ea      	uxtb	r2, r5
    if (flags & NRFX_PWM_FLAG_STOP)
   30af2:	d112      	bne.n	30b1a <nrfx_pwm_simple_playback+0xbe>
    else if (flags & NRFX_PWM_FLAG_LOOP)
   30af4:	f015 0502 	ands.w	r5, r5, #2
   30af8:	d010      	beq.n	30b1c <nrfx_pwm_simple_playback+0xc0>
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   30afa:	b94b      	cbnz	r3, 30b10 <nrfx_pwm_simple_playback+0xb4>
    p_reg->SHORTS = mask;
   30afc:	2304      	movs	r3, #4
   30afe:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   30b02:	2308      	movs	r3, #8
   30b04:	4639      	mov	r1, r7
   30b06:	4620      	mov	r0, r4
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   30b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   30b0c:	f00a b99d 	b.w	3ae4a <start_playback>
   30b10:	2308      	movs	r3, #8
   30b12:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
   30b16:	230c      	movs	r3, #12
   30b18:	e7f4      	b.n	30b04 <nrfx_pwm_simple_playback+0xa8>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   30b1a:	2510      	movs	r5, #16
   30b1c:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    return start_playback(p_instance, p_cb, flags,
   30b20:	2b00      	cmp	r3, #0
   30b22:	d1f8      	bne.n	30b16 <nrfx_pwm_simple_playback+0xba>
   30b24:	e7ed      	b.n	30b02 <nrfx_pwm_simple_playback+0xa6>
   30b26:	bf00      	nop
   30b28:	20004054 	.word	0x20004054
   30b2c:	0003ed93 	.word	0x0003ed93
   30b30:	0003c7f8 	.word	0x0003c7f8

00030b34 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
   30b34:	b508      	push	{r3, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   30b36:	4a0f      	ldr	r2, [pc, #60]	; (30b74 <nrfx_pwm_is_stopped+0x40>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   30b38:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   30b3a:	210c      	movs	r1, #12
   30b3c:	fb01 2203 	mla	r2, r1, r3, r2
   30b40:	7a13      	ldrb	r3, [r2, #8]
   30b42:	b953      	cbnz	r3, 30b5a <nrfx_pwm_is_stopped+0x26>
   30b44:	490c      	ldr	r1, [pc, #48]	; (30b78 <nrfx_pwm_is_stopped+0x44>)
   30b46:	480d      	ldr	r0, [pc, #52]	; (30b7c <nrfx_pwm_is_stopped+0x48>)
   30b48:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   30b4c:	f007 fa3c 	bl	37fc8 <assert_print>
   30b50:	4809      	ldr	r0, [pc, #36]	; (30b78 <nrfx_pwm_is_stopped+0x44>)
   30b52:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   30b56:	f007 fa30 	bl	37fba <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   30b5a:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   30b5c:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30b5e:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   30b62:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   30b64:	b919      	cbnz	r1, 30b6e <nrfx_pwm_is_stopped+0x3a>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   30b66:	1e98      	subs	r0, r3, #2
   30b68:	bf18      	it	ne
   30b6a:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   30b6c:	bd08      	pop	{r3, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   30b6e:	2001      	movs	r0, #1
   30b70:	7210      	strb	r0, [r2, #8]
        ret_val = true;
   30b72:	e7fb      	b.n	30b6c <nrfx_pwm_is_stopped+0x38>
   30b74:	20004054 	.word	0x20004054
   30b78:	0003ed93 	.word	0x0003ed93
   30b7c:	0003c7f8 	.word	0x0003c7f8

00030b80 <nrfx_pwm_stop>:
{
   30b80:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   30b82:	4b14      	ldr	r3, [pc, #80]	; (30bd4 <nrfx_pwm_stop+0x54>)
   30b84:	7902      	ldrb	r2, [r0, #4]
{
   30b86:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   30b88:	210c      	movs	r1, #12
   30b8a:	fb01 3302 	mla	r3, r1, r2, r3
{
   30b8e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   30b90:	7a1b      	ldrb	r3, [r3, #8]
   30b92:	b953      	cbnz	r3, 30baa <nrfx_pwm_stop+0x2a>
   30b94:	4910      	ldr	r1, [pc, #64]	; (30bd8 <nrfx_pwm_stop+0x58>)
   30b96:	4811      	ldr	r0, [pc, #68]	; (30bdc <nrfx_pwm_stop+0x5c>)
   30b98:	f240 1285 	movw	r2, #389	; 0x185
   30b9c:	f007 fa14 	bl	37fc8 <assert_print>
   30ba0:	480d      	ldr	r0, [pc, #52]	; (30bd8 <nrfx_pwm_stop+0x58>)
   30ba2:	f240 1185 	movw	r1, #389	; 0x185
   30ba6:	f007 fa08 	bl	37fba <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   30baa:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   30bac:	2200      	movs	r2, #0
   30bae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
   30bb2:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30bb4:	2201      	movs	r2, #1
   30bb6:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
   30bb8:	f7ff ffbc 	bl	30b34 <nrfx_pwm_is_stopped>
   30bbc:	b938      	cbnz	r0, 30bce <nrfx_pwm_stop+0x4e>
            if (nrfx_pwm_is_stopped(p_instance))
   30bbe:	4620      	mov	r0, r4
   30bc0:	f7ff ffb8 	bl	30b34 <nrfx_pwm_is_stopped>
   30bc4:	b918      	cbnz	r0, 30bce <nrfx_pwm_stop+0x4e>
        } while (wait_until_stopped);
   30bc6:	2d00      	cmp	r5, #0
   30bc8:	d1f9      	bne.n	30bbe <nrfx_pwm_stop+0x3e>
}
   30bca:	4628      	mov	r0, r5
   30bcc:	bd38      	pop	{r3, r4, r5, pc}
                ret_val = true;
   30bce:	2501      	movs	r5, #1
   30bd0:	e7fb      	b.n	30bca <nrfx_pwm_stop+0x4a>
   30bd2:	bf00      	nop
   30bd4:	20004054 	.word	0x20004054
   30bd8:	0003ed93 	.word	0x0003ed93
   30bdc:	0003c7f8 	.word	0x0003c7f8

00030be0 <nrf_gpio_pin_port_decode>:
{
   30be0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   30be2:	6803      	ldr	r3, [r0, #0]
    switch (port)
   30be4:	095a      	lsrs	r2, r3, #5
   30be6:	d00c      	beq.n	30c02 <nrf_gpio_pin_port_decode+0x22>
   30be8:	2a01      	cmp	r2, #1
   30bea:	d013      	beq.n	30c14 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   30bec:	490e      	ldr	r1, [pc, #56]	; (30c28 <nrf_gpio_pin_port_decode+0x48>)
   30bee:	480f      	ldr	r0, [pc, #60]	; (30c2c <nrf_gpio_pin_port_decode+0x4c>)
   30bf0:	f240 2247 	movw	r2, #583	; 0x247
   30bf4:	f007 f9e8 	bl	37fc8 <assert_print>
   30bf8:	480b      	ldr	r0, [pc, #44]	; (30c28 <nrf_gpio_pin_port_decode+0x48>)
   30bfa:	f240 2147 	movw	r1, #583	; 0x247
   30bfe:	f007 f9dc 	bl	37fba <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   30c02:	f04f 32ff 	mov.w	r2, #4294967295
   30c06:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   30c0a:	07d9      	lsls	r1, r3, #31
   30c0c:	d5ee      	bpl.n	30bec <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   30c0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   30c12:	e008      	b.n	30c26 <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   30c14:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   30c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30c1c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   30c1e:	07d2      	lsls	r2, r2, #31
   30c20:	d5e4      	bpl.n	30bec <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   30c22:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   30c24:	4802      	ldr	r0, [pc, #8]	; (30c30 <nrf_gpio_pin_port_decode+0x50>)
}
   30c26:	bd08      	pop	{r3, pc}
   30c28:	0003c7c5 	.word	0x0003c7c5
   30c2c:	0003c7f8 	.word	0x0003c7f8
   30c30:	50000300 	.word	0x50000300

00030c34 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   30c34:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   30c36:	4d41      	ldr	r5, [pc, #260]	; (30d3c <qspi_xfer+0x108>)
   30c38:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   30c3c:	b944      	cbnz	r4, 30c50 <qspi_xfer+0x1c>
   30c3e:	4940      	ldr	r1, [pc, #256]	; (30d40 <qspi_xfer+0x10c>)
   30c40:	4840      	ldr	r0, [pc, #256]	; (30d44 <qspi_xfer+0x110>)
   30c42:	2268      	movs	r2, #104	; 0x68
   30c44:	f007 f9c0 	bl	37fc8 <assert_print>
   30c48:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   30c4a:	483d      	ldr	r0, [pc, #244]	; (30d40 <qspi_xfer+0x10c>)
   30c4c:	f007 f9b5 	bl	37fba <assert_post_action>
   30c50:	b930      	cbnz	r0, 30c60 <qspi_xfer+0x2c>
   30c52:	493b      	ldr	r1, [pc, #236]	; (30d40 <qspi_xfer+0x10c>)
   30c54:	483b      	ldr	r0, [pc, #236]	; (30d44 <qspi_xfer+0x110>)
   30c56:	2269      	movs	r2, #105	; 0x69
   30c58:	f007 f9b6 	bl	37fc8 <assert_print>
   30c5c:	2169      	movs	r1, #105	; 0x69
   30c5e:	e7f4      	b.n	30c4a <qspi_xfer+0x16>
   30c60:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   30c64:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   30c68:	d163      	bne.n	30d32 <qspi_xfer+0xfe>
   30c6a:	0786      	lsls	r6, r0, #30
   30c6c:	d161      	bne.n	30d32 <qspi_xfer+0xfe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   30c6e:	2c01      	cmp	r4, #1
   30c70:	d001      	beq.n	30c76 <qspi_xfer+0x42>
   30c72:	429c      	cmp	r4, r3
   30c74:	d15f      	bne.n	30d36 <qspi_xfer+0x102>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   30c76:	682c      	ldr	r4, [r5, #0]
   30c78:	bb04      	cbnz	r4, 30cbc <qspi_xfer+0x88>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   30c7a:	2b02      	cmp	r3, #2
   30c7c:	4b32      	ldr	r3, [pc, #200]	; (30d48 <qspi_xfer+0x114>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   30c7e:	bf0b      	itete	eq
   30c80:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   30c84:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   30c88:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   30c8c:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   30c90:	bf0b      	itete	eq
   30c92:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   30c96:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   30c9a:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   30c9c:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30c9e:	2100      	movs	r1, #0
   30ca0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30ca4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   30ca8:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   30cac:	2201      	movs	r2, #1
   30cae:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30cb0:	4a25      	ldr	r2, [pc, #148]	; (30d48 <qspi_xfer+0x114>)
   30cb2:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   30cb6:	2b00      	cmp	r3, #0
   30cb8:	d0fb      	beq.n	30cb2 <qspi_xfer+0x7e>
   30cba:	e00d      	b.n	30cd8 <qspi_xfer+0xa4>
        if (m_cb.p_buffer_primary)
   30cbc:	68ae      	ldr	r6, [r5, #8]
   30cbe:	4c22      	ldr	r4, [pc, #136]	; (30d48 <qspi_xfer+0x114>)
   30cc0:	b166      	cbz	r6, 30cdc <qspi_xfer+0xa8>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   30cc2:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   30cc4:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   30cc6:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   30cc8:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   30cca:	d12b      	bne.n	30d24 <qspi_xfer+0xf0>
    p_reg->WRITE.DST = dest_addr;
   30ccc:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   30cd0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   30cd4:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   30cd8:	481c      	ldr	r0, [pc, #112]	; (30d4c <qspi_xfer+0x118>)
}
   30cda:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   30cdc:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   30cde:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        task = NRF_QSPI_TASK_WRITESTART;
   30ce2:	bf0c      	ite	eq
   30ce4:	2308      	moveq	r3, #8
        task = NRF_QSPI_TASK_READSTART;
   30ce6:	2304      	movne	r3, #4
            m_cb.size_primary     = length;
   30ce8:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   30cea:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   30cec:	60a8      	str	r0, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30cee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    p_reg->WRITE.DST = dest_addr;
   30cf2:	bf0b      	itete	eq
   30cf4:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   30cf8:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   30cfc:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   30d00:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   30d04:	bf0c      	ite	eq
   30d06:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   30d0a:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30d0e:	490e      	ldr	r1, [pc, #56]	; (30d48 <qspi_xfer+0x114>)
   30d10:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30d12:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30d16:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   30d1a:	2201      	movs	r2, #1
   30d1c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30d20:	601a      	str	r2, [r3, #0]
}
   30d22:	e7d9      	b.n	30cd8 <qspi_xfer+0xa4>
    p_reg->READ.SRC = src_addr;
   30d24:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   30d28:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   30d2c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   30d30:	e7d2      	b.n	30cd8 <qspi_xfer+0xa4>
        return NRFX_ERROR_INVALID_ADDR;
   30d32:	4807      	ldr	r0, [pc, #28]	; (30d50 <qspi_xfer+0x11c>)
   30d34:	e7d1      	b.n	30cda <qspi_xfer+0xa6>
        return NRFX_ERROR_BUSY;
   30d36:	4807      	ldr	r0, [pc, #28]	; (30d54 <qspi_xfer+0x120>)
   30d38:	e7cf      	b.n	30cda <qspi_xfer+0xa6>
   30d3a:	bf00      	nop
   30d3c:	20004060 	.word	0x20004060
   30d40:	0003edd7 	.word	0x0003edd7
   30d44:	0003c7f8 	.word	0x0003c7f8
   30d48:	40029000 	.word	0x40029000
   30d4c:	0bad0000 	.word	0x0bad0000
   30d50:	0bad000a 	.word	0x0bad000a
   30d54:	0bad000b 	.word	0x0bad000b

00030d58 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   30d58:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   30d5a:	4d07      	ldr	r5, [pc, #28]	; (30d78 <qspi_ready_wait+0x20>)
   30d5c:	2464      	movs	r4, #100	; 0x64
   30d5e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   30d62:	b933      	cbnz	r3, 30d72 <qspi_ready_wait+0x1a>
   30d64:	200a      	movs	r0, #10
   30d66:	f009 ffc4 	bl	3acf2 <nrfx_busy_wait>
   30d6a:	3c01      	subs	r4, #1
   30d6c:	d1f7      	bne.n	30d5e <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   30d6e:	4803      	ldr	r0, [pc, #12]	; (30d7c <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   30d70:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   30d72:	4803      	ldr	r0, [pc, #12]	; (30d80 <qspi_ready_wait+0x28>)
   30d74:	e7fc      	b.n	30d70 <qspi_ready_wait+0x18>
   30d76:	bf00      	nop
   30d78:	40029000 	.word	0x40029000
   30d7c:	0bad0007 	.word	0x0bad0007
   30d80:	0bad0000 	.word	0x0bad0000

00030d84 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   30d84:	4b08      	ldr	r3, [pc, #32]	; (30da8 <qspi_event_xfer_handle.constprop.0+0x24>)
   30d86:	689a      	ldr	r2, [r3, #8]
   30d88:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   30d8a:	691a      	ldr	r2, [r3, #16]
   30d8c:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   30d8e:	699a      	ldr	r2, [r3, #24]
   30d90:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   30d92:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   30d94:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   30d96:	b132      	cbz	r2, 30da6 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   30d98:	695a      	ldr	r2, [r3, #20]
   30d9a:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   30d9c:	69da      	ldr	r2, [r3, #28]
   30d9e:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   30da0:	2200      	movs	r2, #0
   30da2:	60da      	str	r2, [r3, #12]
   30da4:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   30da6:	4770      	bx	lr
   30da8:	20004060 	.word	0x20004060

00030dac <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   30dac:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   30dae:	4b0e      	ldr	r3, [pc, #56]	; (30de8 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   30db0:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   30db2:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   30db6:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   30dba:	2807      	cmp	r0, #7
   30dbc:	d813      	bhi.n	30de6 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   30dbe:	e8df f000 	tbb	[pc, r0]
   30dc2:	0f11      	.short	0x0f11
   30dc4:	080a0b0d 	.word	0x080a0b0d
   30dc8:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   30dca:	0e10      	lsrs	r0, r2, #24
   30dcc:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   30dce:	0c10      	lsrs	r0, r2, #16
   30dd0:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   30dd2:	0a10      	lsrs	r0, r2, #8
   30dd4:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   30dd6:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   30dd8:	0e1a      	lsrs	r2, r3, #24
   30dda:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   30ddc:	0c1a      	lsrs	r2, r3, #16
   30dde:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   30de0:	0a1a      	lsrs	r2, r3, #8
   30de2:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   30de4:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   30de6:	bd10      	pop	{r4, pc}
   30de8:	40029000 	.word	0x40029000

00030dec <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   30dec:	3802      	subs	r0, #2
   30dee:	2807      	cmp	r0, #7
   30df0:	d81f      	bhi.n	30e32 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   30df2:	e8df f000 	tbb	[pc, r0]
   30df6:	2729      	.short	0x2729
   30df8:	21231125 	.word	0x21231125
   30dfc:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   30dfe:	79cb      	ldrb	r3, [r1, #7]
   30e00:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   30e02:	798a      	ldrb	r2, [r1, #6]
   30e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   30e08:	794a      	ldrb	r2, [r1, #5]
   30e0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   30e0e:	790a      	ldrb	r2, [r1, #4]
   30e10:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   30e12:	4a0e      	ldr	r2, [pc, #56]	; (30e4c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   30e14:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   30e18:	78cb      	ldrb	r3, [r1, #3]
   30e1a:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   30e1c:	788a      	ldrb	r2, [r1, #2]
   30e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   30e22:	784a      	ldrb	r2, [r1, #1]
   30e24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   30e28:	780a      	ldrb	r2, [r1, #0]
   30e2a:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   30e2c:	4a07      	ldr	r2, [pc, #28]	; (30e4c <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   30e2e:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   30e32:	4770      	bx	lr
    switch (length)
   30e34:	2300      	movs	r3, #0
   30e36:	e7e4      	b.n	30e02 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   30e38:	2300      	movs	r3, #0
   30e3a:	e7e5      	b.n	30e08 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   30e3c:	2300      	movs	r3, #0
   30e3e:	e7e6      	b.n	30e0e <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   30e40:	2300      	movs	r3, #0
   30e42:	e7eb      	b.n	30e1c <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   30e44:	2300      	movs	r3, #0
   30e46:	e7ec      	b.n	30e22 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   30e48:	2300      	movs	r3, #0
   30e4a:	e7ed      	b.n	30e28 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   30e4c:	40029000 	.word	0x40029000

00030e50 <nrfx_qspi_init>:
{
   30e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30e54:	460d      	mov	r5, r1
   30e56:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   30e58:	4604      	mov	r4, r0
   30e5a:	b950      	cbnz	r0, 30e72 <nrfx_qspi_init+0x22>
   30e5c:	4970      	ldr	r1, [pc, #448]	; (31020 <nrfx_qspi_init+0x1d0>)
   30e5e:	4871      	ldr	r0, [pc, #452]	; (31024 <nrfx_qspi_init+0x1d4>)
   30e60:	f44f 7288 	mov.w	r2, #272	; 0x110
   30e64:	f007 f8b0 	bl	37fc8 <assert_print>
   30e68:	486d      	ldr	r0, [pc, #436]	; (31020 <nrfx_qspi_init+0x1d0>)
   30e6a:	f44f 7188 	mov.w	r1, #272	; 0x110
   30e6e:	f007 f8a4 	bl	37fba <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   30e72:	4f6d      	ldr	r7, [pc, #436]	; (31028 <nrfx_qspi_init+0x1d8>)
   30e74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   30e78:	2b00      	cmp	r3, #0
   30e7a:	f040 80ca 	bne.w	31012 <nrfx_qspi_init+0x1c2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   30e7e:	7cc2      	ldrb	r2, [r0, #19]
   30e80:	b11a      	cbz	r2, 30e8a <nrfx_qspi_init+0x3a>
   30e82:	7d03      	ldrb	r3, [r0, #20]
   30e84:	2b00      	cmp	r3, #0
   30e86:	f040 8084 	bne.w	30f92 <nrfx_qspi_init+0x142>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   30e8a:	7923      	ldrb	r3, [r4, #4]
   30e8c:	2bff      	cmp	r3, #255	; 0xff
   30e8e:	f000 80c4 	beq.w	3101a <nrfx_qspi_init+0x1ca>
   30e92:	7961      	ldrb	r1, [r4, #5]
   30e94:	29ff      	cmp	r1, #255	; 0xff
   30e96:	f000 80c0 	beq.w	3101a <nrfx_qspi_init+0x1ca>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   30e9a:	79a1      	ldrb	r1, [r4, #6]
   30e9c:	29ff      	cmp	r1, #255	; 0xff
   30e9e:	f000 80bc 	beq.w	3101a <nrfx_qspi_init+0x1ca>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   30ea2:	79e1      	ldrb	r1, [r4, #7]
   30ea4:	29ff      	cmp	r1, #255	; 0xff
   30ea6:	f000 80b8 	beq.w	3101a <nrfx_qspi_init+0x1ca>
    if (!p_config->skip_gpio_cfg)
   30eaa:	2a00      	cmp	r2, #0
   30eac:	d142      	bne.n	30f34 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30eae:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   30eb0:	9301      	str	r3, [sp, #4]
   30eb2:	f7ff fe95 	bl	30be0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30eb6:	9b01      	ldr	r3, [sp, #4]
   30eb8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30ebc:	f240 3802 	movw	r8, #770	; 0x302
   30ec0:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30ec4:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   30ec6:	7963      	ldrb	r3, [r4, #5]
   30ec8:	9301      	str	r3, [sp, #4]
   30eca:	f7ff fe89 	bl	30be0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30ece:	9b01      	ldr	r3, [sp, #4]
   30ed0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30ed4:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30ed8:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   30eda:	79a3      	ldrb	r3, [r4, #6]
   30edc:	9301      	str	r3, [sp, #4]
   30ede:	f7ff fe7f 	bl	30be0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30ee2:	9b01      	ldr	r3, [sp, #4]
   30ee4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30ee8:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30eec:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   30eee:	79e3      	ldrb	r3, [r4, #7]
   30ef0:	9301      	str	r3, [sp, #4]
   30ef2:	f7ff fe75 	bl	30be0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30ef6:	9b01      	ldr	r3, [sp, #4]
   30ef8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30efc:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   30f00:	7a23      	ldrb	r3, [r4, #8]
   30f02:	2bff      	cmp	r3, #255	; 0xff
   30f04:	d008      	beq.n	30f18 <nrfx_qspi_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30f06:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   30f08:	9301      	str	r3, [sp, #4]
   30f0a:	f7ff fe69 	bl	30be0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30f0e:	9b01      	ldr	r3, [sp, #4]
   30f10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30f14:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   30f18:	7a63      	ldrb	r3, [r4, #9]
   30f1a:	2bff      	cmp	r3, #255	; 0xff
   30f1c:	d00a      	beq.n	30f34 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30f1e:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   30f20:	9301      	str	r3, [sp, #4]
   30f22:	f7ff fe5d 	bl	30be0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   30f26:	9b01      	ldr	r3, [sp, #4]
   30f28:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   30f2c:	f240 3202 	movw	r2, #770	; 0x302
   30f30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   30f34:	7d23      	ldrb	r3, [r4, #20]
   30f36:	bb63      	cbnz	r3, 30f92 <nrfx_qspi_init+0x142>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   30f38:	7923      	ldrb	r3, [r4, #4]
   30f3a:	2bff      	cmp	r3, #255	; 0xff
   30f3c:	bf18      	it	ne
   30f3e:	461a      	movne	r2, r3
   30f40:	4b3a      	ldr	r3, [pc, #232]	; (3102c <nrfx_qspi_init+0x1dc>)
   30f42:	bf08      	it	eq
   30f44:	f04f 32ff 	moveq.w	r2, #4294967295
   30f48:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   30f4c:	7962      	ldrb	r2, [r4, #5]
   30f4e:	2aff      	cmp	r2, #255	; 0xff
   30f50:	bf08      	it	eq
   30f52:	f04f 32ff 	moveq.w	r2, #4294967295
   30f56:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   30f5a:	79a2      	ldrb	r2, [r4, #6]
   30f5c:	2aff      	cmp	r2, #255	; 0xff
   30f5e:	bf08      	it	eq
   30f60:	f04f 32ff 	moveq.w	r2, #4294967295
   30f64:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   30f68:	79e2      	ldrb	r2, [r4, #7]
   30f6a:	2aff      	cmp	r2, #255	; 0xff
   30f6c:	bf08      	it	eq
   30f6e:	f04f 32ff 	moveq.w	r2, #4294967295
   30f72:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   30f76:	7a22      	ldrb	r2, [r4, #8]
   30f78:	2aff      	cmp	r2, #255	; 0xff
   30f7a:	bf08      	it	eq
   30f7c:	f04f 32ff 	moveq.w	r2, #4294967295
   30f80:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   30f84:	7a62      	ldrb	r2, [r4, #9]
   30f86:	2aff      	cmp	r2, #255	; 0xff
   30f88:	bf08      	it	eq
   30f8a:	f04f 32ff 	moveq.w	r2, #4294967295
   30f8e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->XIPOFFSET = xip_offset;
   30f92:	4a26      	ldr	r2, [pc, #152]	; (3102c <nrfx_qspi_init+0x1dc>)
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   30f94:	6823      	ldr	r3, [r4, #0]
   30f96:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   30f9a:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   30f9c:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   30f9e:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   30fa0:	019b      	lsls	r3, r3, #6
   30fa2:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   30fa6:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   30fa8:	7b61      	ldrb	r1, [r4, #13]
   30faa:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   30fae:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   30fb2:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   30fb6:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   30fb8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   30fbc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   30fc0:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   30fc2:	7be1      	ldrb	r1, [r4, #15]
   30fc4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   30fc8:	7c21      	ldrb	r1, [r4, #16]
   30fca:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   30fce:	7c61      	ldrb	r1, [r4, #17]
   30fd0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   30fd4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   30fd8:	7ce3      	ldrb	r3, [r4, #19]
   30fda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   30fde:	2301      	movs	r3, #1
    m_cb.p_context = p_context;
   30fe0:	e9c7 5600 	strd	r5, r6, [r7]
   30fe4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   30fe8:	b115      	cbz	r5, 30ff0 <nrfx_qspi_init+0x1a0>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   30fea:	2029      	movs	r0, #41	; 0x29
   30fec:	f7f4 f9fc 	bl	253e8 <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   30ff0:	4b0e      	ldr	r3, [pc, #56]	; (3102c <nrfx_qspi_init+0x1dc>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   30ff2:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
   30ff4:	2100      	movs	r1, #0
    m_cb.p_buffer_secondary = NULL;
   30ff6:	e9c7 1102 	strd	r1, r1, [r7, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   30ffa:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   30ffe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31002:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31006:	601a      	str	r2, [r3, #0]
}
   31008:	b002      	add	sp, #8
   3100a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
   3100e:	f7ff bea3 	b.w	30d58 <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
   31012:	4807      	ldr	r0, [pc, #28]	; (31030 <nrfx_qspi_init+0x1e0>)
}
   31014:	b002      	add	sp, #8
   31016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3101a:	4806      	ldr	r0, [pc, #24]	; (31034 <nrfx_qspi_init+0x1e4>)
   3101c:	e7fa      	b.n	31014 <nrfx_qspi_init+0x1c4>
   3101e:	bf00      	nop
   31020:	0003edd7 	.word	0x0003edd7
   31024:	0003c7f8 	.word	0x0003c7f8
   31028:	20004060 	.word	0x20004060
   3102c:	40029000 	.word	0x40029000
   31030:	0bad0005 	.word	0x0bad0005
   31034:	0bad0004 	.word	0x0bad0004

00031038 <nrfx_qspi_cinstr_xfer>:
{
   31038:	b570      	push	{r4, r5, r6, lr}
   3103a:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   3103c:	4a25      	ldr	r2, [pc, #148]	; (310d4 <nrfx_qspi_cinstr_xfer+0x9c>)
   3103e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
{
   31042:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   31044:	b952      	cbnz	r2, 3105c <nrfx_qspi_cinstr_xfer+0x24>
   31046:	4924      	ldr	r1, [pc, #144]	; (310d8 <nrfx_qspi_cinstr_xfer+0xa0>)
   31048:	4824      	ldr	r0, [pc, #144]	; (310dc <nrfx_qspi_cinstr_xfer+0xa4>)
   3104a:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   3104e:	f006 ffbb 	bl	37fc8 <assert_print>
   31052:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   31056:	4820      	ldr	r0, [pc, #128]	; (310d8 <nrfx_qspi_cinstr_xfer+0xa0>)
   31058:	f006 ffaf 	bl	37fba <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   3105c:	2a01      	cmp	r2, #1
   3105e:	d136      	bne.n	310ce <nrfx_qspi_cinstr_xfer+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31060:	4e1f      	ldr	r6, [pc, #124]	; (310e0 <nrfx_qspi_cinstr_xfer+0xa8>)
   31062:	2200      	movs	r2, #0
   31064:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   31068:	b111      	cbz	r1, 31070 <nrfx_qspi_cinstr_xfer+0x38>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   3106a:	7840      	ldrb	r0, [r0, #1]
   3106c:	f7ff febe 	bl	30dec <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   31070:	2301      	movs	r3, #1
   31072:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   31076:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   31078:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   3107a:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   3107c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   31080:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   31082:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   31084:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   31086:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   3108a:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   3108c:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   31090:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   31092:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   31096:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   3109a:	f7ff fe5d 	bl	30d58 <qspi_ready_wait>
   3109e:	4b11      	ldr	r3, [pc, #68]	; (310e4 <nrfx_qspi_cinstr_xfer+0xac>)
   310a0:	4298      	cmp	r0, r3
   310a2:	d10a      	bne.n	310ba <nrfx_qspi_cinstr_xfer+0x82>
        NRFX_ASSERT(p_config->wipwait);
   310a4:	792b      	ldrb	r3, [r5, #4]
   310a6:	b98b      	cbnz	r3, 310cc <nrfx_qspi_cinstr_xfer+0x94>
   310a8:	490b      	ldr	r1, [pc, #44]	; (310d8 <nrfx_qspi_cinstr_xfer+0xa0>)
   310aa:	480c      	ldr	r0, [pc, #48]	; (310dc <nrfx_qspi_cinstr_xfer+0xa4>)
   310ac:	f240 126b 	movw	r2, #363	; 0x16b
   310b0:	f006 ff8a 	bl	37fc8 <assert_print>
   310b4:	f240 116b 	movw	r1, #363	; 0x16b
   310b8:	e7cd      	b.n	31056 <nrfx_qspi_cinstr_xfer+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   310ba:	2300      	movs	r3, #0
   310bc:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   310c0:	b11c      	cbz	r4, 310ca <nrfx_qspi_cinstr_xfer+0x92>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   310c2:	7868      	ldrb	r0, [r5, #1]
   310c4:	4621      	mov	r1, r4
   310c6:	f7ff fe71 	bl	30dac <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   310ca:	4807      	ldr	r0, [pc, #28]	; (310e8 <nrfx_qspi_cinstr_xfer+0xb0>)
}
   310cc:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   310ce:	4807      	ldr	r0, [pc, #28]	; (310ec <nrfx_qspi_cinstr_xfer+0xb4>)
   310d0:	e7fc      	b.n	310cc <nrfx_qspi_cinstr_xfer+0x94>
   310d2:	bf00      	nop
   310d4:	20004060 	.word	0x20004060
   310d8:	0003edd7 	.word	0x0003edd7
   310dc:	0003c7f8 	.word	0x0003c7f8
   310e0:	40029000 	.word	0x40029000
   310e4:	0bad0007 	.word	0x0bad0007
   310e8:	0bad0000 	.word	0x0bad0000
   310ec:	0bad000b 	.word	0x0bad000b

000310f0 <nrfx_qspi_mem_busy_check>:
{
   310f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_qspi_cinstr_conf_t const config = {
   310f2:	4a0d      	ldr	r2, [pc, #52]	; (31128 <nrfx_qspi_mem_busy_check+0x38>)
   310f4:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   310f6:	f10d 0207 	add.w	r2, sp, #7
    uint8_t status_value = 0;
   310fa:	2300      	movs	r3, #0
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   310fc:	4611      	mov	r1, r2
   310fe:	a802      	add	r0, sp, #8
    uint8_t status_value = 0;
   31100:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   31104:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   31108:	f7ff ff96 	bl	31038 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   3110c:	4b07      	ldr	r3, [pc, #28]	; (3112c <nrfx_qspi_mem_busy_check+0x3c>)
   3110e:	4298      	cmp	r0, r3
   31110:	d106      	bne.n	31120 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   31112:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   31116:	f013 0f01 	tst.w	r3, #1
   3111a:	4b05      	ldr	r3, [pc, #20]	; (31130 <nrfx_qspi_mem_busy_check+0x40>)
   3111c:	bf18      	it	ne
   3111e:	4618      	movne	r0, r3
}
   31120:	b005      	add	sp, #20
   31122:	f85d fb04 	ldr.w	pc, [sp], #4
   31126:	bf00      	nop
   31128:	01000205 	.word	0x01000205
   3112c:	0bad0000 	.word	0x0bad0000
   31130:	0bad000b 	.word	0x0bad000b

00031134 <nrfx_qspi_uninit>:
{
   31134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   31138:	4e2d      	ldr	r6, [pc, #180]	; (311f0 <nrfx_qspi_uninit+0xbc>)
   3113a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   3113e:	b953      	cbnz	r3, 31156 <nrfx_qspi_uninit+0x22>
   31140:	492c      	ldr	r1, [pc, #176]	; (311f4 <nrfx_qspi_uninit+0xc0>)
   31142:	482d      	ldr	r0, [pc, #180]	; (311f8 <nrfx_qspi_uninit+0xc4>)
   31144:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   31148:	f006 ff3e 	bl	37fc8 <assert_print>
   3114c:	4829      	ldr	r0, [pc, #164]	; (311f4 <nrfx_qspi_uninit+0xc0>)
   3114e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   31152:	f006 ff32 	bl	37fba <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   31156:	2029      	movs	r0, #41	; 0x29
   31158:	f7f4 f954 	bl	25404 <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   3115c:	4b27      	ldr	r3, [pc, #156]	; (311fc <nrfx_qspi_uninit+0xc8>)
   3115e:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   31162:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   31166:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   3116a:	bf04      	itt	eq
   3116c:	4a24      	ldreq	r2, [pc, #144]	; (31200 <nrfx_qspi_uninit+0xcc>)
   3116e:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   31172:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
   31176:	2201      	movs	r2, #1
   31178:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3117c:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
   3117e:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   31182:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
   31184:	bf08      	it	eq
   31186:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   31188:	4b1c      	ldr	r3, [pc, #112]	; (311fc <nrfx_qspi_uninit+0xc8>)
   3118a:	2200      	movs	r2, #0
   3118c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31190:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   31194:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   31198:	bb22      	cbnz	r2, 311e4 <nrfx_qspi_uninit+0xb0>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   3119a:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   3119e:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   311a2:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   311a6:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   311aa:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   311ae:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
   311b2:	b2c0      	uxtb	r0, r0
   311b4:	f009 fe6e 	bl	3ae94 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   311b8:	fa5f f089 	uxtb.w	r0, r9
   311bc:	f009 fe6a 	bl	3ae94 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   311c0:	fa5f f088 	uxtb.w	r0, r8
   311c4:	f009 fe66 	bl	3ae94 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   311c8:	b2f8      	uxtb	r0, r7
   311ca:	f009 fe63 	bl	3ae94 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   311ce:	b2e8      	uxtb	r0, r5
   311d0:	28ff      	cmp	r0, #255	; 0xff
   311d2:	b2e4      	uxtb	r4, r4
   311d4:	d001      	beq.n	311da <nrfx_qspi_uninit+0xa6>
        nrf_gpio_cfg_default(pins.io2_pin);
   311d6:	f009 fe5d 	bl	3ae94 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   311da:	2cff      	cmp	r4, #255	; 0xff
   311dc:	d002      	beq.n	311e4 <nrfx_qspi_uninit+0xb0>
        nrf_gpio_cfg_default(pins.io3_pin);
   311de:	4620      	mov	r0, r4
   311e0:	f009 fe58 	bl	3ae94 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   311e4:	2300      	movs	r3, #0
   311e6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   311ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   311ee:	bf00      	nop
   311f0:	20004060 	.word	0x20004060
   311f4:	0003edd7 	.word	0x0003edd7
   311f8:	0003c7f8 	.word	0x0003c7f8
   311fc:	40029000 	.word	0x40029000
   31200:	00030100 	.word	0x00030100

00031204 <nrfx_qspi_erase>:
{
   31204:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   31206:	4a1a      	ldr	r2, [pc, #104]	; (31270 <nrfx_qspi_erase+0x6c>)
   31208:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   3120c:	b953      	cbnz	r3, 31224 <nrfx_qspi_erase+0x20>
   3120e:	4919      	ldr	r1, [pc, #100]	; (31274 <nrfx_qspi_erase+0x70>)
   31210:	4819      	ldr	r0, [pc, #100]	; (31278 <nrfx_qspi_erase+0x74>)
   31212:	f44f 720a 	mov.w	r2, #552	; 0x228
   31216:	f006 fed7 	bl	37fc8 <assert_print>
   3121a:	4816      	ldr	r0, [pc, #88]	; (31274 <nrfx_qspi_erase+0x70>)
   3121c:	f44f 710a 	mov.w	r1, #552	; 0x228
   31220:	f006 fecb 	bl	37fba <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   31224:	078c      	lsls	r4, r1, #30
   31226:	d11e      	bne.n	31266 <nrfx_qspi_erase+0x62>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   31228:	6814      	ldr	r4, [r2, #0]
   3122a:	b10c      	cbz	r4, 31230 <nrfx_qspi_erase+0x2c>
   3122c:	2b01      	cmp	r3, #1
   3122e:	d11c      	bne.n	3126a <nrfx_qspi_erase+0x66>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   31230:	2304      	movs	r3, #4
   31232:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   31236:	4b11      	ldr	r3, [pc, #68]	; (3127c <nrfx_qspi_erase+0x78>)
   31238:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3123c:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   3123e:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31242:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31246:	2101      	movs	r1, #1
   31248:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   3124a:	6810      	ldr	r0, [r2, #0]
   3124c:	b940      	cbnz	r0, 31260 <nrfx_qspi_erase+0x5c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3124e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   31252:	2900      	cmp	r1, #0
   31254:	d0fb      	beq.n	3124e <nrfx_qspi_erase+0x4a>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   31256:	2301      	movs	r3, #1
   31258:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   3125c:	4808      	ldr	r0, [pc, #32]	; (31280 <nrfx_qspi_erase+0x7c>)
}
   3125e:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   31260:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   31264:	e7fa      	b.n	3125c <nrfx_qspi_erase+0x58>
        return NRFX_ERROR_INVALID_ADDR;
   31266:	4807      	ldr	r0, [pc, #28]	; (31284 <nrfx_qspi_erase+0x80>)
   31268:	e7f9      	b.n	3125e <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_BUSY;
   3126a:	4807      	ldr	r0, [pc, #28]	; (31288 <nrfx_qspi_erase+0x84>)
   3126c:	e7f7      	b.n	3125e <nrfx_qspi_erase+0x5a>
   3126e:	bf00      	nop
   31270:	20004060 	.word	0x20004060
   31274:	0003edd7 	.word	0x0003edd7
   31278:	0003c7f8 	.word	0x0003c7f8
   3127c:	40029000 	.word	0x40029000
   31280:	0bad0000 	.word	0x0bad0000
   31284:	0bad000a 	.word	0x0bad000a
   31288:	0bad000b 	.word	0x0bad000b

0003128c <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   3128c:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3128e:	4b17      	ldr	r3, [pc, #92]	; (312ec <nrfx_qspi_irq_handler+0x60>)
   31290:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   31294:	b1e2      	cbz	r2, 312d0 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31296:	2200      	movs	r2, #0
    switch (m_cb.state)
   31298:	4c15      	ldr	r4, [pc, #84]	; (312f0 <nrfx_qspi_irq_handler+0x64>)
   3129a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3129e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   312a2:	2a03      	cmp	r2, #3
   312a4:	d015      	beq.n	312d2 <nrfx_qspi_irq_handler+0x46>
   312a6:	2a04      	cmp	r2, #4
   312a8:	d015      	beq.n	312d6 <nrfx_qspi_irq_handler+0x4a>
   312aa:	2a02      	cmp	r2, #2
   312ac:	d104      	bne.n	312b8 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   312ae:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   312b0:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   312b4:	f7ff fd66 	bl	30d84 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   312b8:	68a3      	ldr	r3, [r4, #8]
   312ba:	b913      	cbnz	r3, 312c2 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   312bc:	2301      	movs	r3, #1
   312be:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   312c2:	e9d4 3100 	ldrd	r3, r1, [r4]
   312c6:	2000      	movs	r0, #0
   312c8:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   312ca:	2300      	movs	r3, #0
   312cc:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   312d0:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   312d2:	2302      	movs	r3, #2
   312d4:	e7ec      	b.n	312b0 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   312d6:	2203      	movs	r2, #3
   312d8:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   312dc:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   312e0:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   312e2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   312e6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   312ea:	e7e5      	b.n	312b8 <nrfx_qspi_irq_handler+0x2c>
   312ec:	40029000 	.word	0x40029000
   312f0:	20004060 	.word	0x20004060

000312f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   312f4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   312f6:	4c14      	ldr	r4, [pc, #80]	; (31348 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   312f8:	4a14      	ldr	r2, [pc, #80]	; (3134c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   312fa:	4915      	ldr	r1, [pc, #84]	; (31350 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   312fc:	2303      	movs	r3, #3
   312fe:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   31300:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   31302:	4b14      	ldr	r3, [pc, #80]	; (31354 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   31304:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   31306:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   31308:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3130c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   3130e:	2300      	movs	r3, #0
   31310:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   31312:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   31314:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   31316:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   31318:	4a0f      	ldr	r2, [pc, #60]	; (31358 <_DoInit+0x64>)
   3131a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   3131c:	2210      	movs	r2, #16
   3131e:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   31320:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   31322:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   31324:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   31326:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   31328:	f007 f9fa 	bl	38720 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   3132c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   31330:	490a      	ldr	r1, [pc, #40]	; (3135c <_DoInit+0x68>)
   31332:	4620      	mov	r0, r4
   31334:	f007 f9f4 	bl	38720 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   31338:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   3133c:	2320      	movs	r3, #32
   3133e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   31340:	f3bf 8f5f 	dmb	sy
}
   31344:	bd10      	pop	{r4, pc}
   31346:	bf00      	nop
   31348:	20004094 	.word	0x20004094
   3134c:	0003ee13 	.word	0x0003ee13
   31350:	0003ee1c 	.word	0x0003ee1c
   31354:	20004e98 	.word	0x20004e98
   31358:	20004e88 	.word	0x20004e88
   3135c:	0003ee20 	.word	0x0003ee20

00031360 <zcbor_any_skip>:
	return true;
}


bool zcbor_any_skip(zcbor_state_t *state, void *result)
{
   31360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31364:	4604      	mov	r4, r0
   31366:	b088      	sub	sp, #32
	zcbor_assert_state(result == NULL,
   31368:	460d      	mov	r5, r1
   3136a:	b121      	cbz	r1, 31376 <zcbor_any_skip+0x16>
   3136c:	210e      	movs	r1, #14
	switch (major_type) {
		case ZCBOR_MAJOR_TYPE_BSTR:
		case ZCBOR_MAJOR_TYPE_TSTR:
			/* 'value' is the length of the BSTR or TSTR */
			if (value > (state->payload_end - state->payload)) {
				ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   3136e:	6960      	ldr	r0, [r4, #20]
   31370:	f009 fe02 	bl	3af78 <zcbor_error.isra.0>
   31374:	e002      	b.n	3137c <zcbor_any_skip+0x1c>
	INITIAL_CHECKS();
   31376:	f009 fe02 	bl	3af7e <initial_checks>
   3137a:	b920      	cbnz	r0, 31386 <zcbor_any_skip+0x26>
	zcbor_assert_state(result == NULL,
   3137c:	2700      	movs	r7, #0
			/* Do nothing */
			break;
	}

	return true;
}
   3137e:	4638      	mov	r0, r7
   31380:	b008      	add	sp, #32
   31382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
   31386:	f8d4 a000 	ldr.w	sl, [r4]
	uint_fast32_t elem_count_bak = state->elem_count;
   3138a:	f8d4 9008 	ldr.w	r9, [r4, #8]
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
   3138e:	f89a 8000 	ldrb.w	r8, [sl]
	if (!zcbor_multi_decode(0, ZCBOR_LARGE_ELEM_COUNT, &num_decode,
   31392:	9502      	str	r5, [sp, #8]
   31394:	ab06      	add	r3, sp, #24
   31396:	e9cd 4300 	strd	r4, r3, [sp]
   3139a:	aa05      	add	r2, sp, #20
   3139c:	4b37      	ldr	r3, [pc, #220]	; (3147c <zcbor_any_skip+0x11c>)
   3139e:	f06f 0110 	mvn.w	r1, #16
   313a2:	4628      	mov	r0, r5
   313a4:	f009 ff4e 	bl	3b244 <zcbor_multi_decode>
   313a8:	4607      	mov	r7, r0
   313aa:	b920      	cbnz	r0, 313b6 <zcbor_any_skip+0x56>
				state->elem_count = elem_count_bak;
   313ac:	f8c4 9008 	str.w	r9, [r4, #8]
				state->payload = payload_bak;
   313b0:	f8c4 a000 	str.w	sl, [r4]
				ZCBOR_FAIL();
   313b4:	e7e2      	b.n	3137c <zcbor_any_skip+0x1c>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
   313b6:	ea4f 1658 	mov.w	r6, r8, lsr #5
	if ((major_type == ZCBOR_MAJOR_TYPE_MAP) || (major_type == ZCBOR_MAJOR_TYPE_LIST)) {
   313ba:	1f33      	subs	r3, r6, #4
   313bc:	2b01      	cmp	r3, #1
   313be:	d82a      	bhi.n	31416 <zcbor_any_skip+0xb6>
		if (additional == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
   313c0:	f008 081f 	and.w	r8, r8, #31
   313c4:	f1b8 0f1f 	cmp.w	r8, #31
   313c8:	d139      	bne.n	3143e <zcbor_any_skip+0xde>
			ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
   313ca:	68a6      	ldr	r6, [r4, #8]
   313cc:	b90e      	cbnz	r6, 313d2 <zcbor_any_skip+0x72>
   313ce:	2103      	movs	r1, #3
   313d0:	e7cd      	b.n	3136e <zcbor_any_skip+0xe>
			state->payload++;
   313d2:	6823      	ldr	r3, [r4, #0]
			state->elem_count = ZCBOR_LARGE_ELEM_COUNT;
   313d4:	f06f 0110 	mvn.w	r1, #16
			state->payload++;
   313d8:	f103 0801 	add.w	r8, r3, #1
   313dc:	f8c4 8000 	str.w	r8, [r4]
			state->elem_count = ZCBOR_LARGE_ELEM_COUNT;
   313e0:	60a1      	str	r1, [r4, #8]
			if (!zcbor_multi_decode(0, ZCBOR_LARGE_ELEM_COUNT, &num_decode,
   313e2:	4b27      	ldr	r3, [pc, #156]	; (31480 <zcbor_any_skip+0x120>)
   313e4:	9400      	str	r4, [sp, #0]
   313e6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   313ea:	aa05      	add	r2, sp, #20
   313ec:	4628      	mov	r0, r5
   313ee:	f009 ff29 	bl	3b244 <zcbor_multi_decode>
   313f2:	b920      	cbnz	r0, 313fe <zcbor_any_skip+0x9e>
				state->elem_count = elem_count_bak;
   313f4:	f8c4 9008 	str.w	r9, [r4, #8]
				state->payload = payload_bak;
   313f8:	f8c4 8000 	str.w	r8, [r4]
				ZCBOR_FAIL();
   313fc:	e7be      	b.n	3137c <zcbor_any_skip+0x1c>
					|| (state->payload >= state->payload_end)
   313fe:	6823      	ldr	r3, [r4, #0]
   31400:	68e2      	ldr	r2, [r4, #12]
   31402:	4293      	cmp	r3, r2
   31404:	d2f6      	bcs.n	313f4 <zcbor_any_skip+0x94>
					|| !(*(state->payload++) == 0xFF)) {
   31406:	1c5a      	adds	r2, r3, #1
   31408:	6022      	str	r2, [r4, #0]
   3140a:	781b      	ldrb	r3, [r3, #0]
   3140c:	2bff      	cmp	r3, #255	; 0xff
   3140e:	d1f1      	bne.n	313f4 <zcbor_any_skip+0x94>
			state->elem_count--;
   31410:	3e01      	subs	r6, #1
			state->elem_count = temp_elem_count;
   31412:	60a6      	str	r6, [r4, #8]
			return true;
   31414:	e7b3      	b.n	3137e <zcbor_any_skip+0x1e>
	if (!value_extract(state, &value, sizeof(value))) {
   31416:	2204      	movs	r2, #4
   31418:	a904      	add	r1, sp, #16
   3141a:	4620      	mov	r0, r4
   3141c:	f009 fdea 	bl	3aff4 <value_extract>
   31420:	2800      	cmp	r0, #0
   31422:	d0ab      	beq.n	3137c <zcbor_any_skip+0x1c>
	switch (major_type) {
   31424:	2e04      	cmp	r6, #4
   31426:	d8aa      	bhi.n	3137e <zcbor_any_skip+0x1e>
   31428:	3e02      	subs	r6, #2
   3142a:	2e01      	cmp	r6, #1
   3142c:	d8a7      	bhi.n	3137e <zcbor_any_skip+0x1e>
			if (value > (state->payload_end - state->payload)) {
   3142e:	6823      	ldr	r3, [r4, #0]
   31430:	68e2      	ldr	r2, [r4, #12]
   31432:	9904      	ldr	r1, [sp, #16]
   31434:	1ad2      	subs	r2, r2, r3
   31436:	428a      	cmp	r2, r1
   31438:	d21d      	bcs.n	31476 <zcbor_any_skip+0x116>
				ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   3143a:	2108      	movs	r1, #8
   3143c:	e797      	b.n	3136e <zcbor_any_skip+0xe>
	if (!value_extract(state, &value, sizeof(value))) {
   3143e:	2204      	movs	r2, #4
   31440:	a904      	add	r1, sp, #16
   31442:	4620      	mov	r0, r4
   31444:	f009 fdd6 	bl	3aff4 <value_extract>
   31448:	2800      	cmp	r0, #0
   3144a:	d097      	beq.n	3137c <zcbor_any_skip+0x1c>
	switch (major_type) {
   3144c:	2e04      	cmp	r6, #4
   3144e:	d002      	beq.n	31456 <zcbor_any_skip+0xf6>
			value *= 2; /* Because all members have a key. */
   31450:	9b04      	ldr	r3, [sp, #16]
   31452:	005b      	lsls	r3, r3, #1
   31454:	9304      	str	r3, [sp, #16]
			state->elem_count = value;
   31456:	9904      	ldr	r1, [sp, #16]
			temp_elem_count = state->elem_count;
   31458:	68a5      	ldr	r5, [r4, #8]
			state->elem_count = value;
   3145a:	60a1      	str	r1, [r4, #8]
			if (!zcbor_multi_decode(value, value, &num_decode,
   3145c:	2300      	movs	r3, #0
   3145e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   31462:	9400      	str	r4, [sp, #0]
   31464:	4b06      	ldr	r3, [pc, #24]	; (31480 <zcbor_any_skip+0x120>)
   31466:	aa05      	add	r2, sp, #20
   31468:	4608      	mov	r0, r1
   3146a:	f009 feeb 	bl	3b244 <zcbor_multi_decode>
   3146e:	2800      	cmp	r0, #0
   31470:	d09c      	beq.n	313ac <zcbor_any_skip+0x4c>
			state->elem_count = temp_elem_count;
   31472:	60a5      	str	r5, [r4, #8]
			break;
   31474:	e783      	b.n	3137e <zcbor_any_skip+0x1e>
			(state->payload) += value;
   31476:	440b      	add	r3, r1
   31478:	6023      	str	r3, [r4, #0]
			break;
   3147a:	e780      	b.n	3137e <zcbor_any_skip+0x1e>
   3147c:	0003b0f7 	.word	0x0003b0f7
   31480:	00031361 	.word	0x00031361

00031484 <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
   31484:	4603      	mov	r3, r0
   31486:	4608      	mov	r0, r1
	uint8_t *u8_result  = (uint8_t *)input;
	uint_fast32_t len = max_result_len;

	for (; len > 0; len--) {
   31488:	b900      	cbnz	r0, 3148c <get_result_len+0x8>
   3148a:	4770      	bx	lr
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
   3148c:	1e42      	subs	r2, r0, #1
   3148e:	5c99      	ldrb	r1, [r3, r2]
   31490:	b909      	cbnz	r1, 31496 <get_result_len+0x12>
	for (; len > 0; len--) {
   31492:	4610      	mov	r0, r2
   31494:	e7f8      	b.n	31488 <get_result_len+0x4>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
   31496:	2802      	cmp	r0, #2
   31498:	d907      	bls.n	314aa <get_result_len+0x26>
	switch(val) {
   3149a:	3802      	subs	r0, #2
   3149c:	2806      	cmp	r0, #6
   3149e:	bf9a      	itte	ls
   314a0:	4b02      	ldrls	r3, [pc, #8]	; (314ac <get_result_len+0x28>)
   314a2:	5c1b      	ldrbls	r3, [r3, r0]
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
   314a4:	2300      	movhi	r3, #0
   314a6:	2001      	movs	r0, #1
   314a8:	4098      	lsls	r0, r3
}
   314aa:	4770      	bx	lr
   314ac:	0003ee27 	.word	0x0003ee27

000314b0 <value_encode_len>:
{
   314b0:	b570      	push	{r4, r5, r6, lr}
   314b2:	461c      	mov	r4, r3

static uint_fast32_t get_encoded_len(const void *const result, uint_fast32_t result_len)
{
	const uint8_t *u8_result  = (const uint8_t *)result;

	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
   314b4:	2c01      	cmp	r4, #1
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   314b6:	6803      	ldr	r3, [r0, #0]
{
   314b8:	4605      	mov	r5, r0
   314ba:	4616      	mov	r6, r2
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   314bc:	68c0      	ldr	r0, [r0, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
   314be:	d116      	bne.n	314ee <value_encode_len+0x3e>
   314c0:	7812      	ldrb	r2, [r2, #0]
   314c2:	2a17      	cmp	r2, #23
   314c4:	d904      	bls.n	314d0 <value_encode_len+0x20>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   314c6:	3302      	adds	r3, #2
   314c8:	4298      	cmp	r0, r3
   314ca:	d314      	bcc.n	314f6 <value_encode_len+0x46>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   314cc:	2300      	movs	r3, #0
   314ce:	e020      	b.n	31512 <value_encode_len+0x62>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   314d0:	3301      	adds	r3, #1
   314d2:	4298      	cmp	r0, r3
   314d4:	d30f      	bcc.n	314f6 <value_encode_len+0x46>
		return 0;
   314d6:	2400      	movs	r4, #0
	if (!encode_header_byte(state, major_type,
   314d8:	4628      	mov	r0, r5
   314da:	f009 fee2 	bl	3b2a2 <encode_header_byte>
   314de:	b170      	cbz	r0, 314fe <value_encode_len+0x4e>
   314e0:	4434      	add	r4, r6
	for (; encoded_len > 0; encoded_len--) {
   314e2:	42b4      	cmp	r4, r6
   314e4:	d118      	bne.n	31518 <value_encode_len+0x68>
	state->elem_count++;
   314e6:	68ab      	ldr	r3, [r5, #8]
   314e8:	3301      	adds	r3, #1
   314ea:	60ab      	str	r3, [r5, #8]
	return true;
   314ec:	e008      	b.n	31500 <value_encode_len+0x50>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
   314ee:	1c62      	adds	r2, r4, #1
   314f0:	4413      	add	r3, r2
   314f2:	4298      	cmp	r0, r3
   314f4:	d205      	bcs.n	31502 <value_encode_len+0x52>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   314f6:	6968      	ldr	r0, [r5, #20]
   314f8:	2108      	movs	r1, #8
   314fa:	f009 fecf 	bl	3b29c <zcbor_error.isra.0>
   314fe:	2000      	movs	r0, #0
}
   31500:	bd70      	pop	{r4, r5, r6, pc}
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   31502:	b90c      	cbnz	r4, 31508 <value_encode_len+0x58>
	if (!encode_header_byte(state, major_type,
   31504:	7832      	ldrb	r2, [r6, #0]
   31506:	e7e7      	b.n	314d8 <value_encode_len+0x28>
	switch(val) {
   31508:	1ea3      	subs	r3, r4, #2
   3150a:	2b06      	cmp	r3, #6
   3150c:	d8de      	bhi.n	314cc <value_encode_len+0x1c>
   3150e:	4a06      	ldr	r2, [pc, #24]	; (31528 <value_encode_len+0x78>)
   31510:	5cd3      	ldrb	r3, [r2, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
   31512:	3318      	adds	r3, #24
   31514:	b2da      	uxtb	r2, r3
   31516:	e7df      	b.n	314d8 <value_encode_len+0x28>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
   31518:	682b      	ldr	r3, [r5, #0]
   3151a:	1c5a      	adds	r2, r3, #1
   3151c:	602a      	str	r2, [r5, #0]
   3151e:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
   31522:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
   31524:	e7dd      	b.n	314e2 <value_encode_len+0x32>
   31526:	bf00      	nop
   31528:	0003ee27 	.word	0x0003ee27

0003152c <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   3152c:	4a03      	ldr	r2, [pc, #12]	; (3153c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   3152e:	4b04      	ldr	r3, [pc, #16]	; (31540 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   31530:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   31532:	1a9b      	subs	r3, r3, r2
}
   31534:	4803      	ldr	r0, [pc, #12]	; (31544 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   31536:	109b      	asrs	r3, r3, #2
}
   31538:	4358      	muls	r0, r3
   3153a:	4770      	bx	lr
   3153c:	0003b954 	.word	0x0003b954
   31540:	0003ba6c 	.word	0x0003ba6c
   31544:	b6db6db7 	.word	0xb6db6db7

00031548 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   31548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3154a:	4604      	mov	r4, r0
   3154c:	460e      	mov	r6, r1
   3154e:	f04f 0340 	mov.w	r3, #64	; 0x40
   31552:	f3ef 8711 	mrs	r7, BASEPRI
   31556:	f383 8812 	msr	BASEPRI_MAX, r3
   3155a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   3155e:	f002 fb6b 	bl	33c38 <z_impl_z_current_get>
   31562:	2c04      	cmp	r4, #4
   31564:	bf96      	itet	ls
   31566:	4b1e      	ldrls	r3, [pc, #120]	; (315e0 <z_fatal_error+0x98>)
   31568:	4b1e      	ldrhi	r3, [pc, #120]	; (315e4 <z_fatal_error+0x9c>)
   3156a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3156e:	2200      	movs	r2, #0
   31570:	4605      	mov	r5, r0
   31572:	9200      	str	r2, [sp, #0]
   31574:	481c      	ldr	r0, [pc, #112]	; (315e8 <z_fatal_error+0xa0>)
   31576:	4622      	mov	r2, r4
   31578:	2145      	movs	r1, #69	; 0x45
   3157a:	f006 fd33 	bl	37fe4 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3157e:	b13e      	cbz	r6, 31590 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   31580:	69f3      	ldr	r3, [r6, #28]
   31582:	f3c3 0308 	ubfx	r3, r3, #0, #9
   31586:	b11b      	cbz	r3, 31590 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   31588:	4818      	ldr	r0, [pc, #96]	; (315ec <z_fatal_error+0xa4>)
   3158a:	2145      	movs	r1, #69	; 0x45
   3158c:	f006 fd2a 	bl	37fe4 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   31590:	b135      	cbz	r5, 315a0 <z_fatal_error+0x58>
   31592:	4628      	mov	r0, r5
   31594:	f009 ff87 	bl	3b4a6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   31598:	4603      	mov	r3, r0
   3159a:	b108      	cbz	r0, 315a0 <z_fatal_error+0x58>
   3159c:	7802      	ldrb	r2, [r0, #0]
   3159e:	b902      	cbnz	r2, 315a2 <z_fatal_error+0x5a>
		thread_name = "unknown";
   315a0:	4b13      	ldr	r3, [pc, #76]	; (315f0 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   315a2:	4814      	ldr	r0, [pc, #80]	; (315f4 <z_fatal_error+0xac>)
   315a4:	462a      	mov	r2, r5
   315a6:	2145      	movs	r1, #69	; 0x45
   315a8:	f006 fd1c 	bl	37fe4 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   315ac:	4631      	mov	r1, r6
   315ae:	4620      	mov	r0, r4
   315b0:	f7fc ff8a 	bl	2e4c8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   315b4:	2c04      	cmp	r4, #4
   315b6:	d108      	bne.n	315ca <z_fatal_error+0x82>
   315b8:	490f      	ldr	r1, [pc, #60]	; (315f8 <z_fatal_error+0xb0>)
   315ba:	4810      	ldr	r0, [pc, #64]	; (315fc <z_fatal_error+0xb4>)
   315bc:	2293      	movs	r2, #147	; 0x93
   315be:	f006 fd03 	bl	37fc8 <assert_print>
   315c2:	480d      	ldr	r0, [pc, #52]	; (315f8 <z_fatal_error+0xb0>)
   315c4:	2193      	movs	r1, #147	; 0x93
   315c6:	f006 fcf8 	bl	37fba <assert_post_action>
	__asm__ volatile(
   315ca:	f387 8811 	msr	BASEPRI, r7
   315ce:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   315d2:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   315d4:	b003      	add	sp, #12
   315d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   315da:	f7f4 bb05 	b.w	25be8 <z_impl_k_thread_abort>
   315de:	bf00      	nop
   315e0:	0003c4d0 	.word	0x0003c4d0
   315e4:	0003ee2e 	.word	0x0003ee2e
   315e8:	0003ee44 	.word	0x0003ee44
   315ec:	0003ee71 	.word	0x0003ee71
   315f0:	0003ee3c 	.word	0x0003ee3c
   315f4:	0003ee97 	.word	0x0003ee97
   315f8:	0003eeb4 	.word	0x0003eeb4
   315fc:	0003c7f8 	.word	0x0003c7f8

00031600 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   31600:	4b0f      	ldr	r3, [pc, #60]	; (31640 <z_sys_init_run_level+0x40>)
{
   31602:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   31604:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   31608:	3001      	adds	r0, #1
   3160a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   3160e:	42a6      	cmp	r6, r4
   31610:	d800      	bhi.n	31614 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   31612:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   31614:	e9d4 3500 	ldrd	r3, r5, [r4]
   31618:	4628      	mov	r0, r5
   3161a:	4798      	blx	r3
		if (dev != NULL) {
   3161c:	b16d      	cbz	r5, 3163a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   3161e:	b138      	cbz	r0, 31630 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   31620:	2800      	cmp	r0, #0
   31622:	bfb8      	it	lt
   31624:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   31626:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   31628:	28ff      	cmp	r0, #255	; 0xff
   3162a:	bfa8      	it	ge
   3162c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   3162e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   31630:	68ea      	ldr	r2, [r5, #12]
   31632:	7853      	ldrb	r3, [r2, #1]
   31634:	f043 0301 	orr.w	r3, r3, #1
   31638:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3163a:	3408      	adds	r4, #8
   3163c:	e7e7      	b.n	3160e <z_sys_init_run_level+0xe>
   3163e:	bf00      	nop
   31640:	0003c4e4 	.word	0x0003c4e4

00031644 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   31644:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   31646:	4b0a      	ldr	r3, [pc, #40]	; (31670 <bg_thread_main+0x2c>)
   31648:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   3164a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   3164c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   3164e:	f7ff ffd7 	bl	31600 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   31652:	f003 fa21 	bl	34a98 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   31656:	2004      	movs	r0, #4
   31658:	f7ff ffd2 	bl	31600 <z_sys_init_run_level>

	z_init_static_threads();
   3165c:	f000 fbdc 	bl	31e18 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   31660:	f7f2 f940 	bl	238e4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   31664:	4a03      	ldr	r2, [pc, #12]	; (31674 <bg_thread_main+0x30>)
   31666:	7b13      	ldrb	r3, [r2, #12]
   31668:	f023 0301 	bic.w	r3, r3, #1
   3166c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3166e:	bd08      	pop	{r3, pc}
   31670:	20005298 	.word	0x20005298
   31674:	20003198 	.word	0x20003198

00031678 <z_bss_zero>:
{
   31678:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   3167a:	4803      	ldr	r0, [pc, #12]	; (31688 <z_bss_zero+0x10>)
   3167c:	4a03      	ldr	r2, [pc, #12]	; (3168c <z_bss_zero+0x14>)
   3167e:	2100      	movs	r1, #0
   31680:	1a12      	subs	r2, r2, r0
   31682:	f009 fed6 	bl	3b432 <z_early_memset>
}
   31686:	bd08      	pop	{r3, pc}
   31688:	20000cd0 	.word	0x20000cd0
   3168c:	2000529c 	.word	0x2000529c

00031690 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   31690:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   31692:	4e16      	ldr	r6, [pc, #88]	; (316ec <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   31694:	4d16      	ldr	r5, [pc, #88]	; (316f0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   31696:	4917      	ldr	r1, [pc, #92]	; (316f4 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
   31698:	2398      	movs	r3, #152	; 0x98
{
   3169a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   3169c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   316a0:	2201      	movs	r2, #1
   316a2:	2300      	movs	r3, #0
   316a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   316a8:	220f      	movs	r2, #15
   316aa:	e9cd 3202 	strd	r3, r2, [sp, #8]
   316ae:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   316b0:	2318      	movs	r3, #24
   316b2:	fb03 5500 	mla	r5, r3, r0, r5
{
   316b6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   316b8:	f44f 70c0 	mov.w	r0, #384	; 0x180
   316bc:	fb00 1104 	mla	r1, r0, r4, r1
   316c0:	4b0d      	ldr	r3, [pc, #52]	; (316f8 <z_init_cpu+0x68>)
   316c2:	9500      	str	r5, [sp, #0]
   316c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   316c8:	4630      	mov	r0, r6
   316ca:	f000 fae3 	bl	31c94 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   316ce:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   316d0:	4a0a      	ldr	r2, [pc, #40]	; (316fc <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   316d2:	60ee      	str	r6, [r5, #12]
   316d4:	f023 0304 	bic.w	r3, r3, #4
   316d8:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   316da:	f44f 6304 	mov.w	r3, #2112	; 0x840
   316de:	fb04 3303 	mla	r3, r4, r3, r3
   316e2:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   316e4:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   316e6:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   316e8:	b006      	add	sp, #24
   316ea:	bd70      	pop	{r4, r5, r6, pc}
   316ec:	20003100 	.word	0x20003100
   316f0:	2000413c 	.word	0x2000413c
   316f4:	20008bc0 	.word	0x20008bc0
   316f8:	00031f09 	.word	0x00031f09
   316fc:	20008380 	.word	0x20008380

00031700 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   31700:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   31702:	2000      	movs	r0, #0
{
   31704:	b0ac      	sub	sp, #176	; 0xb0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   31706:	f7ff ff7b 	bl	31600 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   3170a:	4b2d      	ldr	r3, [pc, #180]	; (317c0 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3170c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   31710:	4d2c      	ldr	r5, [pc, #176]	; (317c4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   31712:	4e2d      	ldr	r6, [pc, #180]	; (317c8 <z_cstart+0xc8>)
   31714:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   31716:	4f2d      	ldr	r7, [pc, #180]	; (317cc <z_cstart+0xcc>)
   31718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3171c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3171e:	23e0      	movs	r3, #224	; 0xe0
   31720:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   31724:	2400      	movs	r4, #0
   31726:	2320      	movs	r3, #32
   31728:	77eb      	strb	r3, [r5, #31]
   3172a:	762c      	strb	r4, [r5, #24]
   3172c:	766c      	strb	r4, [r5, #25]
   3172e:	76ac      	strb	r4, [r5, #26]
   31730:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   31734:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   31736:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3173a:	626b      	str	r3, [r5, #36]	; 0x24
   3173c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   31740:	f7f4 f9c6 	bl	25ad0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   31744:	f7f3 fe02 	bl	2534c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   31748:	f04f 33ff 	mov.w	r3, #4294967295
   3174c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3174e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   31750:	f7f4 fb26 	bl	25da0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   31754:	f7f4 fa5e 	bl	25c14 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   31758:	f240 1301 	movw	r3, #257	; 0x101
   3175c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   31760:	ab06      	add	r3, sp, #24
   31762:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   31764:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
	dummy_thread->resource_pool = NULL;
   31768:	9428      	str	r4, [sp, #160]	; 0xa0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   3176a:	f009 fe56 	bl	3b41a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   3176e:	2001      	movs	r0, #1
   31770:	f7ff ff46 	bl	31600 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   31774:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   31776:	4d16      	ldr	r5, [pc, #88]	; (317d0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   31778:	f7ff ff42 	bl	31600 <z_sys_init_run_level>
	z_sched_init();
   3177c:	f002 f926 	bl	339cc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   31780:	4b14      	ldr	r3, [pc, #80]	; (317d4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   31782:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   31784:	9305      	str	r3, [sp, #20]
   31786:	2301      	movs	r3, #1
   31788:	4913      	ldr	r1, [pc, #76]	; (317d8 <z_cstart+0xd8>)
   3178a:	9400      	str	r4, [sp, #0]
   3178c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   31790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   31794:	463b      	mov	r3, r7
   31796:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3179a:	4628      	mov	r0, r5
   3179c:	f000 fa7a 	bl	31c94 <z_setup_new_thread>
   317a0:	7b6a      	ldrb	r2, [r5, #13]
   317a2:	4606      	mov	r6, r0
   317a4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   317a8:	4628      	mov	r0, r5
   317aa:	736a      	strb	r2, [r5, #13]
   317ac:	f001 fc12 	bl	32fd4 <z_ready_thread>
	z_init_cpu(0);
   317b0:	4620      	mov	r0, r4
   317b2:	f7ff ff6d 	bl	31690 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   317b6:	463a      	mov	r2, r7
   317b8:	4631      	mov	r1, r6
   317ba:	4628      	mov	r0, r5
   317bc:	f7f3 ff26 	bl	2560c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   317c0:	20008bc0 	.word	0x20008bc0
   317c4:	e000ed00 	.word	0xe000ed00
   317c8:	2000413c 	.word	0x2000413c
   317cc:	00031645 	.word	0x00031645
   317d0:	20003198 	.word	0x20003198
   317d4:	0003ef20 	.word	0x0003ef20
   317d8:	20008d40 	.word	0x20008d40

000317dc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   317dc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   317de:	4c0b      	ldr	r4, [pc, #44]	; (3180c <statics_init+0x30>)
   317e0:	4d0b      	ldr	r5, [pc, #44]	; (31810 <statics_init+0x34>)
   317e2:	42ac      	cmp	r4, r5
   317e4:	d90f      	bls.n	31806 <statics_init+0x2a>
   317e6:	490b      	ldr	r1, [pc, #44]	; (31814 <statics_init+0x38>)
   317e8:	480b      	ldr	r0, [pc, #44]	; (31818 <statics_init+0x3c>)
   317ea:	2218      	movs	r2, #24
   317ec:	f006 fbec 	bl	37fc8 <assert_print>
   317f0:	4808      	ldr	r0, [pc, #32]	; (31814 <statics_init+0x38>)
   317f2:	2118      	movs	r1, #24
   317f4:	f006 fbe1 	bl	37fba <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   317f8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   317fc:	4620      	mov	r0, r4
   317fe:	f009 fe1c 	bl	3b43a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   31802:	3418      	adds	r4, #24
   31804:	e7ed      	b.n	317e2 <statics_init+0x6>
   31806:	d3f7      	bcc.n	317f8 <statics_init+0x1c>
		}
	}
	return 0;
}
   31808:	2000      	movs	r0, #0
   3180a:	bd38      	pop	{r3, r4, r5, pc}
   3180c:	20000ac8 	.word	0x20000ac8
   31810:	20000ac8 	.word	0x20000ac8
   31814:	0003ef28 	.word	0x0003ef28
   31818:	0003c7f8 	.word	0x0003c7f8

0003181c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   3181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31820:	b085      	sub	sp, #20
   31822:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   31826:	4680      	mov	r8, r0
   31828:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   3182a:	4648      	mov	r0, r9
   3182c:	4659      	mov	r1, fp
{
   3182e:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   31830:	f009 ff30 	bl	3b694 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   31834:	f1bb 3fff 	cmp.w	fp, #4294967295
   31838:	bf08      	it	eq
   3183a:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   3183e:	4605      	mov	r5, r0
   31840:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   31842:	bf04      	itt	eq
   31844:	f04f 35ff 	moveq.w	r5, #4294967295
   31848:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3184c:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   31850:	f04f 0340 	mov.w	r3, #64	; 0x40
   31854:	f3ef 8411 	mrs	r4, BASEPRI
   31858:	f383 8812 	msr	BASEPRI_MAX, r3
   3185c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31860:	4630      	mov	r0, r6
   31862:	f000 f969 	bl	31b38 <z_spin_lock_valid>
   31866:	b938      	cbnz	r0, 31878 <k_heap_aligned_alloc+0x5c>
   31868:	492c      	ldr	r1, [pc, #176]	; (3191c <k_heap_aligned_alloc+0x100>)
   3186a:	482d      	ldr	r0, [pc, #180]	; (31920 <k_heap_aligned_alloc+0x104>)
   3186c:	2294      	movs	r2, #148	; 0x94
   3186e:	f006 fbab 	bl	37fc8 <assert_print>
   31872:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31874:	4829      	ldr	r0, [pc, #164]	; (3191c <k_heap_aligned_alloc+0x100>)
   31876:	e027      	b.n	318c8 <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   31878:	4630      	mov	r0, r6
   3187a:	f000 f97b 	bl	31b74 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3187e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   31882:	b113      	cbz	r3, 3188a <k_heap_aligned_alloc+0x6e>
   31884:	ea5b 0909 	orrs.w	r9, fp, r9
   31888:	d117      	bne.n	318ba <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3188a:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   3188e:	9903      	ldr	r1, [sp, #12]
   31890:	4652      	mov	r2, sl
   31892:	4640      	mov	r0, r8
   31894:	f7f2 f97e 	bl	23b94 <sys_heap_aligned_alloc>
   31898:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   3189a:	f002 fd25 	bl	342e8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   3189e:	f1b9 0f00 	cmp.w	r9, #0
   318a2:	d013      	beq.n	318cc <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   318a4:	4630      	mov	r0, r6
   318a6:	f000 f955 	bl	31b54 <z_spin_unlock_valid>
   318aa:	bb70      	cbnz	r0, 3190a <k_heap_aligned_alloc+0xee>
   318ac:	491b      	ldr	r1, [pc, #108]	; (3191c <k_heap_aligned_alloc+0x100>)
   318ae:	481c      	ldr	r0, [pc, #112]	; (31920 <k_heap_aligned_alloc+0x104>)
   318b0:	22c2      	movs	r2, #194	; 0xc2
   318b2:	f006 fb89 	bl	37fc8 <assert_print>
   318b6:	21c2      	movs	r1, #194	; 0xc2
   318b8:	e7dc      	b.n	31874 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   318ba:	491a      	ldr	r1, [pc, #104]	; (31924 <k_heap_aligned_alloc+0x108>)
   318bc:	4818      	ldr	r0, [pc, #96]	; (31920 <k_heap_aligned_alloc+0x104>)
   318be:	224c      	movs	r2, #76	; 0x4c
   318c0:	f006 fb82 	bl	37fc8 <assert_print>
   318c4:	4817      	ldr	r0, [pc, #92]	; (31924 <k_heap_aligned_alloc+0x108>)
   318c6:	214c      	movs	r1, #76	; 0x4c
   318c8:	f006 fb77 	bl	37fba <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   318cc:	1a28      	subs	r0, r5, r0
   318ce:	eb67 0101 	sbc.w	r1, r7, r1
   318d2:	2801      	cmp	r0, #1
   318d4:	f171 0300 	sbcs.w	r3, r1, #0
   318d8:	dbe4      	blt.n	318a4 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   318da:	e9cd 0100 	strd	r0, r1, [sp]
   318de:	465a      	mov	r2, fp
   318e0:	4621      	mov	r1, r4
   318e2:	4630      	mov	r0, r6
   318e4:	f001 fe32 	bl	3354c <z_pend_curr>
   318e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   318ec:	f3ef 8411 	mrs	r4, BASEPRI
   318f0:	f383 8812 	msr	BASEPRI_MAX, r3
   318f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   318f8:	4630      	mov	r0, r6
   318fa:	f000 f91d 	bl	31b38 <z_spin_lock_valid>
   318fe:	2800      	cmp	r0, #0
   31900:	d0b2      	beq.n	31868 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   31902:	4630      	mov	r0, r6
   31904:	f000 f936 	bl	31b74 <z_spin_lock_set_owner>
	return k;
   31908:	e7c1      	b.n	3188e <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   3190a:	f384 8811 	msr	BASEPRI, r4
   3190e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   31912:	4648      	mov	r0, r9
   31914:	b005      	add	sp, #20
   31916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3191a:	bf00      	nop
   3191c:	0003cc84 	.word	0x0003cc84
   31920:	0003c7f8 	.word	0x0003c7f8
   31924:	0003ef28 	.word	0x0003ef28

00031928 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   31928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3192a:	4604      	mov	r4, r0
   3192c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3192e:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   31932:	f04f 0340 	mov.w	r3, #64	; 0x40
   31936:	f3ef 8711 	mrs	r7, BASEPRI
   3193a:	f383 8812 	msr	BASEPRI_MAX, r3
   3193e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31942:	4628      	mov	r0, r5
   31944:	f000 f8f8 	bl	31b38 <z_spin_lock_valid>
   31948:	b940      	cbnz	r0, 3195c <k_heap_free+0x34>
   3194a:	4915      	ldr	r1, [pc, #84]	; (319a0 <k_heap_free+0x78>)
   3194c:	4815      	ldr	r0, [pc, #84]	; (319a4 <k_heap_free+0x7c>)
   3194e:	2294      	movs	r2, #148	; 0x94
   31950:	f006 fb3a 	bl	37fc8 <assert_print>
   31954:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31956:	4812      	ldr	r0, [pc, #72]	; (319a0 <k_heap_free+0x78>)
   31958:	f006 fb2f 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3195c:	4628      	mov	r0, r5
   3195e:	f000 f909 	bl	31b74 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   31962:	4620      	mov	r0, r4
   31964:	4631      	mov	r1, r6
   31966:	f7f2 f8e3 	bl	23b30 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   3196a:	f104 000c 	add.w	r0, r4, #12
   3196e:	f009 fe77 	bl	3b660 <z_unpend_all>
   31972:	b128      	cbz	r0, 31980 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   31974:	4639      	mov	r1, r7
   31976:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   31978:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   3197c:	f001 bb92 	b.w	330a4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31980:	4628      	mov	r0, r5
   31982:	f000 f8e7 	bl	31b54 <z_spin_unlock_valid>
   31986:	b930      	cbnz	r0, 31996 <k_heap_free+0x6e>
   31988:	4905      	ldr	r1, [pc, #20]	; (319a0 <k_heap_free+0x78>)
   3198a:	4806      	ldr	r0, [pc, #24]	; (319a4 <k_heap_free+0x7c>)
   3198c:	22c2      	movs	r2, #194	; 0xc2
   3198e:	f006 fb1b 	bl	37fc8 <assert_print>
   31992:	21c2      	movs	r1, #194	; 0xc2
   31994:	e7df      	b.n	31956 <k_heap_free+0x2e>
	__asm__ volatile(
   31996:	f387 8811 	msr	BASEPRI, r7
   3199a:	f3bf 8f6f 	isb	sy
}
   3199e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   319a0:	0003cc84 	.word	0x0003cc84
   319a4:	0003c7f8 	.word	0x0003c7f8

000319a8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   319a8:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   319aa:	4c0b      	ldr	r4, [pc, #44]	; (319d8 <init_mem_slab_module+0x30>)
   319ac:	4d0b      	ldr	r5, [pc, #44]	; (319dc <init_mem_slab_module+0x34>)
	int rc = 0;
   319ae:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   319b0:	42ac      	cmp	r4, r5
   319b2:	d90f      	bls.n	319d4 <init_mem_slab_module+0x2c>
   319b4:	490a      	ldr	r1, [pc, #40]	; (319e0 <init_mem_slab_module+0x38>)
   319b6:	480b      	ldr	r0, [pc, #44]	; (319e4 <init_mem_slab_module+0x3c>)
   319b8:	223d      	movs	r2, #61	; 0x3d
   319ba:	f006 fb05 	bl	37fc8 <assert_print>
   319be:	4808      	ldr	r0, [pc, #32]	; (319e0 <init_mem_slab_module+0x38>)
   319c0:	213d      	movs	r1, #61	; 0x3d
   319c2:	f006 fafa 	bl	37fba <assert_post_action>
		rc = create_free_list(slab);
   319c6:	4620      	mov	r0, r4
   319c8:	f009 fd3f 	bl	3b44a <create_free_list>
		if (rc < 0) {
   319cc:	2800      	cmp	r0, #0
   319ce:	db02      	blt.n	319d6 <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   319d0:	3420      	adds	r4, #32
   319d2:	e7ed      	b.n	319b0 <init_mem_slab_module+0x8>
   319d4:	d3f7      	bcc.n	319c6 <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   319d6:	bd38      	pop	{r3, r4, r5, pc}
   319d8:	20000a68 	.word	0x20000a68
   319dc:	20000ac8 	.word	0x20000ac8
   319e0:	0003ef4a 	.word	0x0003ef4a
   319e4:	0003c7f8 	.word	0x0003c7f8

000319e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   319e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   319ec:	4604      	mov	r4, r0
   319ee:	460d      	mov	r5, r1
   319f0:	4690      	mov	r8, r2
   319f2:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   319f4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   319f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   319fc:	f3ef 8911 	mrs	r9, BASEPRI
   31a00:	f383 8812 	msr	BASEPRI_MAX, r3
   31a04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31a08:	4630      	mov	r0, r6
   31a0a:	f000 f895 	bl	31b38 <z_spin_lock_valid>
   31a0e:	b940      	cbnz	r0, 31a22 <k_mem_slab_alloc+0x3a>
   31a10:	491e      	ldr	r1, [pc, #120]	; (31a8c <k_mem_slab_alloc+0xa4>)
   31a12:	481f      	ldr	r0, [pc, #124]	; (31a90 <k_mem_slab_alloc+0xa8>)
   31a14:	2294      	movs	r2, #148	; 0x94
   31a16:	f006 fad7 	bl	37fc8 <assert_print>
   31a1a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31a1c:	481b      	ldr	r0, [pc, #108]	; (31a8c <k_mem_slab_alloc+0xa4>)
   31a1e:	f006 facc 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   31a22:	4630      	mov	r0, r6
   31a24:	f000 f8a6 	bl	31b74 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   31a28:	69a3      	ldr	r3, [r4, #24]
   31a2a:	b18b      	cbz	r3, 31a50 <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   31a2c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   31a2e:	681b      	ldr	r3, [r3, #0]
   31a30:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   31a32:	69e3      	ldr	r3, [r4, #28]
   31a34:	3301      	adds	r3, #1
   31a36:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   31a38:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31a3a:	4630      	mov	r0, r6
   31a3c:	f000 f88a 	bl	31b54 <z_spin_unlock_valid>
   31a40:	b9f0      	cbnz	r0, 31a80 <k_mem_slab_alloc+0x98>
   31a42:	4912      	ldr	r1, [pc, #72]	; (31a8c <k_mem_slab_alloc+0xa4>)
   31a44:	4812      	ldr	r0, [pc, #72]	; (31a90 <k_mem_slab_alloc+0xa8>)
   31a46:	22c2      	movs	r2, #194	; 0xc2
   31a48:	f006 fabe 	bl	37fc8 <assert_print>
   31a4c:	21c2      	movs	r1, #194	; 0xc2
   31a4e:	e7e5      	b.n	31a1c <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   31a50:	ea58 0207 	orrs.w	r2, r8, r7
   31a54:	d103      	bne.n	31a5e <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   31a56:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   31a58:	f06f 040b 	mvn.w	r4, #11
   31a5c:	e7ed      	b.n	31a3a <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   31a5e:	4622      	mov	r2, r4
   31a60:	e9cd 8700 	strd	r8, r7, [sp]
   31a64:	4649      	mov	r1, r9
   31a66:	4630      	mov	r0, r6
   31a68:	f001 fd70 	bl	3354c <z_pend_curr>
		if (result == 0) {
   31a6c:	4604      	mov	r4, r0
   31a6e:	b918      	cbnz	r0, 31a78 <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   31a70:	4b08      	ldr	r3, [pc, #32]	; (31a94 <k_mem_slab_alloc+0xac>)
   31a72:	689b      	ldr	r3, [r3, #8]
   31a74:	695b      	ldr	r3, [r3, #20]
   31a76:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   31a78:	4620      	mov	r0, r4
   31a7a:	b003      	add	sp, #12
   31a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   31a80:	f389 8811 	msr	BASEPRI, r9
   31a84:	f3bf 8f6f 	isb	sy
	return result;
   31a88:	e7f6      	b.n	31a78 <k_mem_slab_alloc+0x90>
   31a8a:	bf00      	nop
   31a8c:	0003cc84 	.word	0x0003cc84
   31a90:	0003c7f8 	.word	0x0003c7f8
   31a94:	2000413c 	.word	0x2000413c

00031a98 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   31a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31a9c:	4604      	mov	r4, r0
   31a9e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   31aa0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   31aa4:	f04f 0340 	mov.w	r3, #64	; 0x40
   31aa8:	f3ef 8711 	mrs	r7, BASEPRI
   31aac:	f383 8812 	msr	BASEPRI_MAX, r3
   31ab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31ab4:	4630      	mov	r0, r6
   31ab6:	f000 f83f 	bl	31b38 <z_spin_lock_valid>
   31aba:	b940      	cbnz	r0, 31ace <k_mem_slab_free+0x36>
   31abc:	491c      	ldr	r1, [pc, #112]	; (31b30 <k_mem_slab_free+0x98>)
   31abe:	481d      	ldr	r0, [pc, #116]	; (31b34 <k_mem_slab_free+0x9c>)
   31ac0:	2294      	movs	r2, #148	; 0x94
   31ac2:	f006 fa81 	bl	37fc8 <assert_print>
   31ac6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31ac8:	4819      	ldr	r0, [pc, #100]	; (31b30 <k_mem_slab_free+0x98>)
   31aca:	f006 fa76 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   31ace:	4630      	mov	r0, r6
   31ad0:	f000 f850 	bl	31b74 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   31ad4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   31ad8:	f1b8 0f00 	cmp.w	r8, #0
   31adc:	d10f      	bne.n	31afe <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   31ade:	4620      	mov	r0, r4
   31ae0:	f001 ff36 	bl	33950 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   31ae4:	b158      	cbz	r0, 31afe <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   31ae6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   31ae8:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   31aea:	f8c0 8090 	str.w	r8, [r0, #144]	; 0x90
			z_ready_thread(pending_thread);
   31aee:	f001 fa71 	bl	32fd4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   31af2:	4639      	mov	r1, r7
   31af4:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   31af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   31afa:	f001 bad3 	b.w	330a4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   31afe:	682b      	ldr	r3, [r5, #0]
   31b00:	69a2      	ldr	r2, [r4, #24]
   31b02:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   31b04:	682b      	ldr	r3, [r5, #0]
   31b06:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   31b08:	69e3      	ldr	r3, [r4, #28]
   31b0a:	3b01      	subs	r3, #1
   31b0c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31b0e:	4630      	mov	r0, r6
   31b10:	f000 f820 	bl	31b54 <z_spin_unlock_valid>
   31b14:	b930      	cbnz	r0, 31b24 <k_mem_slab_free+0x8c>
   31b16:	4906      	ldr	r1, [pc, #24]	; (31b30 <k_mem_slab_free+0x98>)
   31b18:	4806      	ldr	r0, [pc, #24]	; (31b34 <k_mem_slab_free+0x9c>)
   31b1a:	22c2      	movs	r2, #194	; 0xc2
   31b1c:	f006 fa54 	bl	37fc8 <assert_print>
   31b20:	21c2      	movs	r1, #194	; 0xc2
   31b22:	e7d1      	b.n	31ac8 <k_mem_slab_free+0x30>
	__asm__ volatile(
   31b24:	f387 8811 	msr	BASEPRI, r7
   31b28:	f3bf 8f6f 	isb	sy
}
   31b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31b30:	0003cc84 	.word	0x0003cc84
   31b34:	0003c7f8 	.word	0x0003c7f8

00031b38 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   31b38:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   31b3a:	b138      	cbz	r0, 31b4c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   31b3c:	4b04      	ldr	r3, [pc, #16]	; (31b50 <z_spin_lock_valid+0x18>)
   31b3e:	7d1b      	ldrb	r3, [r3, #20]
   31b40:	f000 0003 	and.w	r0, r0, #3
   31b44:	1ac0      	subs	r0, r0, r3
   31b46:	bf18      	it	ne
   31b48:	2001      	movne	r0, #1
   31b4a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   31b4c:	2001      	movs	r0, #1
}
   31b4e:	4770      	bx	lr
   31b50:	2000413c 	.word	0x2000413c

00031b54 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   31b54:	4a06      	ldr	r2, [pc, #24]	; (31b70 <z_spin_unlock_valid+0x1c>)
   31b56:	7d11      	ldrb	r1, [r2, #20]
   31b58:	6892      	ldr	r2, [r2, #8]
   31b5a:	430a      	orrs	r2, r1
   31b5c:	6801      	ldr	r1, [r0, #0]
{
   31b5e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   31b60:	4291      	cmp	r1, r2
   31b62:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   31b66:	bf04      	itt	eq
   31b68:	6018      	streq	r0, [r3, #0]
	return true;
   31b6a:	2001      	moveq	r0, #1
}
   31b6c:	4770      	bx	lr
   31b6e:	bf00      	nop
   31b70:	2000413c 	.word	0x2000413c

00031b74 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   31b74:	4b02      	ldr	r3, [pc, #8]	; (31b80 <z_spin_lock_set_owner+0xc>)
   31b76:	7d1a      	ldrb	r2, [r3, #20]
   31b78:	689b      	ldr	r3, [r3, #8]
   31b7a:	4313      	orrs	r3, r2
   31b7c:	6003      	str	r3, [r0, #0]
}
   31b7e:	4770      	bx	lr
   31b80:	2000413c 	.word	0x2000413c

00031b84 <k_thread_foreach>:
{
   31b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31b86:	460e      	mov	r6, r1
	__ASSERT(user_cb != NULL, "user_cb can not be NULL");
   31b88:	4605      	mov	r5, r0
   31b8a:	b940      	cbnz	r0, 31b9e <k_thread_foreach+0x1a>
   31b8c:	491b      	ldr	r1, [pc, #108]	; (31bfc <k_thread_foreach+0x78>)
   31b8e:	481c      	ldr	r0, [pc, #112]	; (31c00 <k_thread_foreach+0x7c>)
   31b90:	2233      	movs	r2, #51	; 0x33
   31b92:	f006 fa19 	bl	37fc8 <assert_print>
   31b96:	4819      	ldr	r0, [pc, #100]	; (31bfc <k_thread_foreach+0x78>)
   31b98:	2133      	movs	r1, #51	; 0x33
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31b9a:	f006 fa0e 	bl	37fba <assert_post_action>
	__asm__ volatile(
   31b9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   31ba2:	f3ef 8711 	mrs	r7, BASEPRI
   31ba6:	f383 8812 	msr	BASEPRI_MAX, r3
   31baa:	f3bf 8f6f 	isb	sy
   31bae:	4815      	ldr	r0, [pc, #84]	; (31c04 <k_thread_foreach+0x80>)
   31bb0:	f7ff ffc2 	bl	31b38 <z_spin_lock_valid>
   31bb4:	b938      	cbnz	r0, 31bc6 <k_thread_foreach+0x42>
   31bb6:	4914      	ldr	r1, [pc, #80]	; (31c08 <k_thread_foreach+0x84>)
   31bb8:	4811      	ldr	r0, [pc, #68]	; (31c00 <k_thread_foreach+0x7c>)
   31bba:	2294      	movs	r2, #148	; 0x94
   31bbc:	f006 fa04 	bl	37fc8 <assert_print>
   31bc0:	2194      	movs	r1, #148	; 0x94
   31bc2:	4811      	ldr	r0, [pc, #68]	; (31c08 <k_thread_foreach+0x84>)
   31bc4:	e7e9      	b.n	31b9a <k_thread_foreach+0x16>
	z_spin_lock_set_owner(l);
   31bc6:	480f      	ldr	r0, [pc, #60]	; (31c04 <k_thread_foreach+0x80>)
   31bc8:	f7ff ffd4 	bl	31b74 <z_spin_lock_set_owner>
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   31bcc:	4b0f      	ldr	r3, [pc, #60]	; (31c0c <k_thread_foreach+0x88>)
   31bce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   31bd0:	b954      	cbnz	r4, 31be8 <k_thread_foreach+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31bd2:	480c      	ldr	r0, [pc, #48]	; (31c04 <k_thread_foreach+0x80>)
   31bd4:	f7ff ffbe 	bl	31b54 <z_spin_unlock_valid>
   31bd8:	b958      	cbnz	r0, 31bf2 <k_thread_foreach+0x6e>
   31bda:	490b      	ldr	r1, [pc, #44]	; (31c08 <k_thread_foreach+0x84>)
   31bdc:	4808      	ldr	r0, [pc, #32]	; (31c00 <k_thread_foreach+0x7c>)
   31bde:	22c2      	movs	r2, #194	; 0xc2
   31be0:	f006 f9f2 	bl	37fc8 <assert_print>
   31be4:	21c2      	movs	r1, #194	; 0xc2
   31be6:	e7ec      	b.n	31bc2 <k_thread_foreach+0x3e>
		user_cb(thread, user_data);
   31be8:	4620      	mov	r0, r4
   31bea:	4631      	mov	r1, r6
   31bec:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   31bee:	6f64      	ldr	r4, [r4, #116]	; 0x74
   31bf0:	e7ee      	b.n	31bd0 <k_thread_foreach+0x4c>
	__asm__ volatile(
   31bf2:	f387 8811 	msr	BASEPRI, r7
   31bf6:	f3bf 8f6f 	isb	sy
}
   31bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31bfc:	0003ef6f 	.word	0x0003ef6f
   31c00:	0003c7f8 	.word	0x0003c7f8
   31c04:	20004168 	.word	0x20004168
   31c08:	0003cc84 	.word	0x0003cc84
   31c0c:	2000413c 	.word	0x2000413c

00031c10 <z_thread_monitor_exit>:
{
   31c10:	b510      	push	{r4, lr}
   31c12:	4601      	mov	r1, r0
	__asm__ volatile(
   31c14:	f04f 0340 	mov.w	r3, #64	; 0x40
   31c18:	f3ef 8411 	mrs	r4, BASEPRI
   31c1c:	f383 8812 	msr	BASEPRI_MAX, r3
   31c20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31c24:	4817      	ldr	r0, [pc, #92]	; (31c84 <z_thread_monitor_exit+0x74>)
   31c26:	f7ff ff87 	bl	31b38 <z_spin_lock_valid>
   31c2a:	b940      	cbnz	r0, 31c3e <z_thread_monitor_exit+0x2e>
   31c2c:	4916      	ldr	r1, [pc, #88]	; (31c88 <z_thread_monitor_exit+0x78>)
   31c2e:	4817      	ldr	r0, [pc, #92]	; (31c8c <z_thread_monitor_exit+0x7c>)
   31c30:	2294      	movs	r2, #148	; 0x94
   31c32:	f006 f9c9 	bl	37fc8 <assert_print>
   31c36:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31c38:	4813      	ldr	r0, [pc, #76]	; (31c88 <z_thread_monitor_exit+0x78>)
   31c3a:	f006 f9be 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   31c3e:	4811      	ldr	r0, [pc, #68]	; (31c84 <z_thread_monitor_exit+0x74>)
   31c40:	f7ff ff98 	bl	31b74 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   31c44:	4a12      	ldr	r2, [pc, #72]	; (31c90 <z_thread_monitor_exit+0x80>)
   31c46:	6a93      	ldr	r3, [r2, #40]	; 0x28
   31c48:	428b      	cmp	r3, r1
   31c4a:	d10d      	bne.n	31c68 <z_thread_monitor_exit+0x58>
		_kernel.threads = _kernel.threads->next_thread;
   31c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   31c4e:	6293      	str	r3, [r2, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31c50:	480c      	ldr	r0, [pc, #48]	; (31c84 <z_thread_monitor_exit+0x74>)
   31c52:	f7ff ff7f 	bl	31b54 <z_spin_unlock_valid>
   31c56:	b978      	cbnz	r0, 31c78 <z_thread_monitor_exit+0x68>
   31c58:	490b      	ldr	r1, [pc, #44]	; (31c88 <z_thread_monitor_exit+0x78>)
   31c5a:	480c      	ldr	r0, [pc, #48]	; (31c8c <z_thread_monitor_exit+0x7c>)
   31c5c:	22c2      	movs	r2, #194	; 0xc2
   31c5e:	f006 f9b3 	bl	37fc8 <assert_print>
   31c62:	21c2      	movs	r1, #194	; 0xc2
   31c64:	e7e8      	b.n	31c38 <z_thread_monitor_exit+0x28>
   31c66:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   31c68:	2b00      	cmp	r3, #0
   31c6a:	d0f1      	beq.n	31c50 <z_thread_monitor_exit+0x40>
			(thread != prev_thread->next_thread)) {
   31c6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   31c6e:	428a      	cmp	r2, r1
   31c70:	d1f9      	bne.n	31c66 <z_thread_monitor_exit+0x56>
			prev_thread->next_thread = thread->next_thread;
   31c72:	6f4a      	ldr	r2, [r1, #116]	; 0x74
   31c74:	675a      	str	r2, [r3, #116]	; 0x74
   31c76:	e7eb      	b.n	31c50 <z_thread_monitor_exit+0x40>
	__asm__ volatile(
   31c78:	f384 8811 	msr	BASEPRI, r4
   31c7c:	f3bf 8f6f 	isb	sy
}
   31c80:	bd10      	pop	{r4, pc}
   31c82:	bf00      	nop
   31c84:	20004168 	.word	0x20004168
   31c88:	0003cc84 	.word	0x0003cc84
   31c8c:	0003c7f8 	.word	0x0003c7f8
   31c90:	2000413c 	.word	0x2000413c

00031c94 <z_setup_new_thread>:
{
   31c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   31c98:	4604      	mov	r4, r0
   31c9a:	e9dd 600e 	ldrd	r6, r0, [sp, #56]	; 0x38
	Z_ASSERT_VALID_PRIO(prio, entry);
   31c9e:	280f      	cmp	r0, #15
{
   31ca0:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
   31ca4:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   31ca6:	d13e      	bne.n	31d26 <z_setup_new_thread+0x92>
   31ca8:	4b36      	ldr	r3, [pc, #216]	; (31d84 <z_setup_new_thread+0xf0>)
   31caa:	4599      	cmp	r9, r3
   31cac:	d13f      	bne.n	31d2e <z_setup_new_thread+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   31cae:	f104 0358 	add.w	r3, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   31cb2:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   31cb4:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   31cb8:	f022 0207 	bic.w	r2, r2, #7
	thread_base->user_options = (uint8_t)options;
   31cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31cbe:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   31cc0:	f102 0a40 	add.w	sl, r2, #64	; 0x40
	thread_base->thread_state = (uint8_t)initial_state;
   31cc4:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   31cc6:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   31cc8:	7363      	strb	r3, [r4, #13]
	stack_ptr = (char *)stack + stack_obj_size;
   31cca:	448a      	add	sl, r1

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   31ccc:	f101 0340 	add.w	r3, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   31cd0:	e9c4 321f 	strd	r3, r2, [r4, #124]	; 0x7c
	thread_base->prio = priority;
   31cd4:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   31cd6:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   31cda:	60a5      	str	r5, [r4, #8]
	thread_base->sched_locked = 0U;
   31cdc:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   31cde:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   31ce2:	464b      	mov	r3, r9
   31ce4:	e9cd 7601 	strd	r7, r6, [sp, #4]
   31ce8:	f8cd 8000 	str.w	r8, [sp]
   31cec:	4652      	mov	r2, sl
   31cee:	4620      	mov	r0, r4
   31cf0:	f7f3 fc5a 	bl	255a8 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
   31cf4:	e9c4 9819 	strd	r9, r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
   31cf8:	e9c4 761b 	strd	r7, r6, [r4, #108]	; 0x6c
	new_thread->init_data = NULL;
   31cfc:	6565      	str	r5, [r4, #84]	; 0x54
	__asm__ volatile(
   31cfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   31d02:	f3ef 8611 	mrs	r6, BASEPRI
   31d06:	f383 8812 	msr	BASEPRI_MAX, r3
   31d0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31d0e:	481e      	ldr	r0, [pc, #120]	; (31d88 <z_setup_new_thread+0xf4>)
   31d10:	f7ff ff12 	bl	31b38 <z_spin_lock_valid>
   31d14:	b9b0      	cbnz	r0, 31d44 <z_setup_new_thread+0xb0>
   31d16:	491d      	ldr	r1, [pc, #116]	; (31d8c <z_setup_new_thread+0xf8>)
   31d18:	481d      	ldr	r0, [pc, #116]	; (31d90 <z_setup_new_thread+0xfc>)
   31d1a:	2294      	movs	r2, #148	; 0x94
   31d1c:	f006 f954 	bl	37fc8 <assert_print>
   31d20:	2194      	movs	r1, #148	; 0x94
   31d22:	481a      	ldr	r0, [pc, #104]	; (31d8c <z_setup_new_thread+0xf8>)
   31d24:	e00c      	b.n	31d40 <z_setup_new_thread+0xac>
	Z_ASSERT_VALID_PRIO(prio, entry);
   31d26:	f100 0310 	add.w	r3, r0, #16
   31d2a:	2b1e      	cmp	r3, #30
   31d2c:	d9bf      	bls.n	31cae <z_setup_new_thread+0x1a>
   31d2e:	4919      	ldr	r1, [pc, #100]	; (31d94 <z_setup_new_thread+0x100>)
   31d30:	4817      	ldr	r0, [pc, #92]	; (31d90 <z_setup_new_thread+0xfc>)
   31d32:	f44f 7206 	mov.w	r2, #536	; 0x218
   31d36:	f006 f947 	bl	37fc8 <assert_print>
   31d3a:	4816      	ldr	r0, [pc, #88]	; (31d94 <z_setup_new_thread+0x100>)
   31d3c:	f44f 7106 	mov.w	r1, #536	; 0x218
   31d40:	f006 f93b 	bl	37fba <assert_post_action>
	new_thread->next_thread = _kernel.threads;
   31d44:	4d14      	ldr	r5, [pc, #80]	; (31d98 <z_setup_new_thread+0x104>)
	z_spin_lock_set_owner(l);
   31d46:	4810      	ldr	r0, [pc, #64]	; (31d88 <z_setup_new_thread+0xf4>)
   31d48:	f7ff ff14 	bl	31b74 <z_spin_lock_set_owner>
   31d4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   31d4e:	6763      	str	r3, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   31d50:	62ac      	str	r4, [r5, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31d52:	f7ff feff 	bl	31b54 <z_spin_unlock_valid>
   31d56:	b930      	cbnz	r0, 31d66 <z_setup_new_thread+0xd2>
   31d58:	490c      	ldr	r1, [pc, #48]	; (31d8c <z_setup_new_thread+0xf8>)
   31d5a:	480d      	ldr	r0, [pc, #52]	; (31d90 <z_setup_new_thread+0xfc>)
   31d5c:	22c2      	movs	r2, #194	; 0xc2
   31d5e:	f006 f933 	bl	37fc8 <assert_print>
   31d62:	21c2      	movs	r1, #194	; 0xc2
   31d64:	e7dd      	b.n	31d22 <z_setup_new_thread+0x8e>
	__asm__ volatile(
   31d66:	f386 8811 	msr	BASEPRI, r6
   31d6a:	f3bf 8f6f 	isb	sy
	if (!_current) {
   31d6e:	68ab      	ldr	r3, [r5, #8]
   31d70:	b10b      	cbz	r3, 31d76 <z_setup_new_thread+0xe2>
	new_thread->resource_pool = _current->resource_pool;
   31d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	return stack_ptr;
   31d76:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
   31d7a:	4650      	mov	r0, sl
   31d7c:	b004      	add	sp, #16
   31d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31d82:	bf00      	nop
   31d84:	00031f09 	.word	0x00031f09
   31d88:	20004168 	.word	0x20004168
   31d8c:	0003cc84 	.word	0x0003cc84
   31d90:	0003c7f8 	.word	0x0003c7f8
   31d94:	0003ef6f 	.word	0x0003ef6f
   31d98:	2000413c 	.word	0x2000413c

00031d9c <z_impl_k_thread_create>:
{
   31d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   31d9e:	b087      	sub	sp, #28
   31da0:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   31da4:	4604      	mov	r4, r0
   31da6:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   31daa:	b155      	cbz	r5, 31dc2 <z_impl_k_thread_create+0x26>
   31dac:	4917      	ldr	r1, [pc, #92]	; (31e0c <z_impl_k_thread_create+0x70>)
   31dae:	4818      	ldr	r0, [pc, #96]	; (31e10 <z_impl_k_thread_create+0x74>)
   31db0:	f240 2287 	movw	r2, #647	; 0x287
   31db4:	f006 f908 	bl	37fc8 <assert_print>
   31db8:	4814      	ldr	r0, [pc, #80]	; (31e0c <z_impl_k_thread_create+0x70>)
   31dba:	f240 2187 	movw	r1, #647	; 0x287
   31dbe:	f006 f8fc 	bl	37fba <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   31dc2:	9505      	str	r5, [sp, #20]
   31dc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   31dc6:	9504      	str	r5, [sp, #16]
   31dc8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   31dca:	9503      	str	r5, [sp, #12]
   31dcc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   31dce:	9502      	str	r5, [sp, #8]
   31dd0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   31dd2:	9501      	str	r5, [sp, #4]
   31dd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   31dd6:	9500      	str	r5, [sp, #0]
   31dd8:	f7ff ff5c 	bl	31c94 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   31ddc:	f1b6 3fff 	cmp.w	r6, #4294967295
   31de0:	bf08      	it	eq
   31de2:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   31de6:	d005      	beq.n	31df4 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   31de8:	ea56 0307 	orrs.w	r3, r6, r7
   31dec:	d105      	bne.n	31dfa <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   31dee:	4620      	mov	r0, r4
   31df0:	f001 f98c 	bl	3310c <z_sched_start>
}
   31df4:	4620      	mov	r0, r4
   31df6:	b007      	add	sp, #28
   31df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   31dfa:	4906      	ldr	r1, [pc, #24]	; (31e14 <z_impl_k_thread_create+0x78>)
   31dfc:	463a      	mov	r2, r7
   31dfe:	4633      	mov	r3, r6
   31e00:	f104 0018 	add.w	r0, r4, #24
   31e04:	f002 f88a 	bl	33f1c <z_add_timeout>
   31e08:	e7f4      	b.n	31df4 <z_impl_k_thread_create+0x58>
   31e0a:	bf00      	nop
   31e0c:	0003ef6f 	.word	0x0003ef6f
   31e10:	0003c7f8 	.word	0x0003c7f8
   31e14:	00033851 	.word	0x00033851

00031e18 <z_init_static_threads>:
{
   31e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31e1c:	4c35      	ldr	r4, [pc, #212]	; (31ef4 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   31e1e:	4d36      	ldr	r5, [pc, #216]	; (31ef8 <z_init_static_threads+0xe0>)
{
   31e20:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   31e22:	42ac      	cmp	r4, r5
   31e24:	4626      	mov	r6, r4
   31e26:	d926      	bls.n	31e76 <z_init_static_threads+0x5e>
   31e28:	4934      	ldr	r1, [pc, #208]	; (31efc <z_init_static_threads+0xe4>)
   31e2a:	4835      	ldr	r0, [pc, #212]	; (31f00 <z_init_static_threads+0xe8>)
   31e2c:	f240 22ee 	movw	r2, #750	; 0x2ee
   31e30:	f006 f8ca 	bl	37fc8 <assert_print>
   31e34:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   31e38:	4830      	ldr	r0, [pc, #192]	; (31efc <z_init_static_threads+0xe4>)
   31e3a:	f006 f8be 	bl	37fba <assert_post_action>
		z_setup_new_thread(
   31e3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   31e42:	9305      	str	r3, [sp, #20]
   31e44:	f854 3c10 	ldr.w	r3, [r4, #-16]
   31e48:	9304      	str	r3, [sp, #16]
   31e4a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   31e4e:	9303      	str	r3, [sp, #12]
   31e50:	f854 3c18 	ldr.w	r3, [r4, #-24]
   31e54:	9302      	str	r3, [sp, #8]
   31e56:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   31e5a:	9301      	str	r3, [sp, #4]
   31e5c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   31e60:	9300      	str	r3, [sp, #0]
   31e62:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   31e66:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   31e6a:	f7ff ff13 	bl	31c94 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   31e6e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   31e72:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   31e74:	e7d5      	b.n	31e22 <z_init_static_threads+0xa>
   31e76:	42ae      	cmp	r6, r5
   31e78:	f104 0430 	add.w	r4, r4, #48	; 0x30
   31e7c:	d3df      	bcc.n	31e3e <z_init_static_threads+0x26>
	k_sched_lock();
   31e7e:	f001 f985 	bl	3318c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   31e82:	4c1c      	ldr	r4, [pc, #112]	; (31ef4 <z_init_static_threads+0xdc>)
   31e84:	f8df 907c 	ldr.w	r9, [pc, #124]	; 31f04 <z_init_static_threads+0xec>
   31e88:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   31e8c:	f240 37e7 	movw	r7, #999	; 0x3e7
   31e90:	42ac      	cmp	r4, r5
   31e92:	d928      	bls.n	31ee6 <z_init_static_threads+0xce>
   31e94:	4919      	ldr	r1, [pc, #100]	; (31efc <z_init_static_threads+0xe4>)
   31e96:	481a      	ldr	r0, [pc, #104]	; (31f00 <z_init_static_threads+0xe8>)
   31e98:	f240 320d 	movw	r2, #781	; 0x30d
   31e9c:	f006 f894 	bl	37fc8 <assert_print>
   31ea0:	f240 310d 	movw	r1, #781	; 0x30d
   31ea4:	e7c8      	b.n	31e38 <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   31ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31ea8:	1c5a      	adds	r2, r3, #1
   31eaa:	d00d      	beq.n	31ec8 <z_init_static_threads+0xb0>
					    K_MSEC(thread_data->init_delay));
   31eac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   31eb0:	2100      	movs	r1, #0
   31eb2:	4638      	mov	r0, r7
   31eb4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   31eb8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   31ebc:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   31ec0:	d104      	bne.n	31ecc <z_init_static_threads+0xb4>
	z_sched_start(thread);
   31ec2:	4640      	mov	r0, r8
   31ec4:	f001 f922 	bl	3310c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   31ec8:	3430      	adds	r4, #48	; 0x30
   31eca:	e7e1      	b.n	31e90 <z_init_static_threads+0x78>
   31ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   31ed0:	2300      	movs	r3, #0
   31ed2:	f7da fa15 	bl	c300 <__aeabi_uldivmod>
   31ed6:	4602      	mov	r2, r0
   31ed8:	460b      	mov	r3, r1
   31eda:	f108 0018 	add.w	r0, r8, #24
   31ede:	4649      	mov	r1, r9
   31ee0:	f002 f81c 	bl	33f1c <z_add_timeout>
   31ee4:	e7f0      	b.n	31ec8 <z_init_static_threads+0xb0>
   31ee6:	d3de      	bcc.n	31ea6 <z_init_static_threads+0x8e>
}
   31ee8:	b007      	add	sp, #28
   31eea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   31eee:	f001 b999 	b.w	33224 <k_sched_unlock>
   31ef2:	bf00      	nop
   31ef4:	0003bbec 	.word	0x0003bbec
   31ef8:	0003bbec 	.word	0x0003bbec
   31efc:	0003ef6f 	.word	0x0003ef6f
   31f00:	0003c7f8 	.word	0x0003c7f8
   31f04:	00033851 	.word	0x00033851

00031f08 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   31f08:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   31f0a:	4c12      	ldr	r4, [pc, #72]	; (31f54 <idle+0x4c>)
   31f0c:	68a3      	ldr	r3, [r4, #8]
   31f0e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   31f12:	2b00      	cmp	r3, #0
   31f14:	db10      	blt.n	31f38 <idle+0x30>
	return !z_sys_post_kernel;
   31f16:	4d10      	ldr	r5, [pc, #64]	; (31f58 <idle+0x50>)
	__asm__ volatile(
   31f18:	f04f 0240 	mov.w	r2, #64	; 0x40
   31f1c:	f3ef 8311 	mrs	r3, BASEPRI
   31f20:	f382 8812 	msr	BASEPRI_MAX, r2
   31f24:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   31f28:	f002 f8de 	bl	340e8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   31f2c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   31f2e:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   31f30:	b95b      	cbnz	r3, 31f4a <idle+0x42>
	arch_cpu_idle();
   31f32:	f7f3 fa11 	bl	25358 <arch_cpu_idle>
}
   31f36:	e7ef      	b.n	31f18 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   31f38:	4908      	ldr	r1, [pc, #32]	; (31f5c <idle+0x54>)
   31f3a:	4809      	ldr	r0, [pc, #36]	; (31f60 <idle+0x58>)
   31f3c:	2227      	movs	r2, #39	; 0x27
   31f3e:	f006 f843 	bl	37fc8 <assert_print>
   31f42:	4806      	ldr	r0, [pc, #24]	; (31f5c <idle+0x54>)
   31f44:	2127      	movs	r1, #39	; 0x27
   31f46:	f006 f838 	bl	37fba <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   31f4a:	f7f2 fecf 	bl	24cec <pm_system_suspend>
   31f4e:	2800      	cmp	r0, #0
   31f50:	d1e2      	bne.n	31f18 <idle+0x10>
   31f52:	e7ee      	b.n	31f32 <idle+0x2a>
   31f54:	2000413c 	.word	0x2000413c
   31f58:	20005298 	.word	0x20005298
   31f5c:	0003ef92 	.word	0x0003ef92
   31f60:	0003c7f8 	.word	0x0003c7f8

00031f64 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   31f64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31f68:	4604      	mov	r4, r0
   31f6a:	4617      	mov	r7, r2
   31f6c:	461e      	mov	r6, r3
   31f6e:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   31f72:	b145      	cbz	r5, 31f86 <z_impl_k_mutex_lock+0x22>
   31f74:	4951      	ldr	r1, [pc, #324]	; (320bc <z_impl_k_mutex_lock+0x158>)
   31f76:	4852      	ldr	r0, [pc, #328]	; (320c0 <z_impl_k_mutex_lock+0x15c>)
   31f78:	2265      	movs	r2, #101	; 0x65
   31f7a:	f006 f825 	bl	37fc8 <assert_print>
   31f7e:	484f      	ldr	r0, [pc, #316]	; (320bc <z_impl_k_mutex_lock+0x158>)
   31f80:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31f82:	f006 f81a 	bl	37fba <assert_post_action>
   31f86:	f04f 0340 	mov.w	r3, #64	; 0x40
   31f8a:	f3ef 8811 	mrs	r8, BASEPRI
   31f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   31f92:	f3bf 8f6f 	isb	sy
   31f96:	484b      	ldr	r0, [pc, #300]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   31f98:	f7ff fdce 	bl	31b38 <z_spin_lock_valid>
   31f9c:	b938      	cbnz	r0, 31fae <z_impl_k_mutex_lock+0x4a>
   31f9e:	494a      	ldr	r1, [pc, #296]	; (320c8 <z_impl_k_mutex_lock+0x164>)
   31fa0:	4847      	ldr	r0, [pc, #284]	; (320c0 <z_impl_k_mutex_lock+0x15c>)
   31fa2:	2294      	movs	r2, #148	; 0x94
   31fa4:	f006 f810 	bl	37fc8 <assert_print>
   31fa8:	2194      	movs	r1, #148	; 0x94
   31faa:	4847      	ldr	r0, [pc, #284]	; (320c8 <z_impl_k_mutex_lock+0x164>)
   31fac:	e7e9      	b.n	31f82 <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   31fae:	4845      	ldr	r0, [pc, #276]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   31fb0:	f7ff fde0 	bl	31b74 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   31fb4:	68e3      	ldr	r3, [r4, #12]
   31fb6:	4a45      	ldr	r2, [pc, #276]	; (320cc <z_impl_k_mutex_lock+0x168>)
   31fb8:	b19b      	cbz	r3, 31fe2 <z_impl_k_mutex_lock+0x7e>
   31fba:	68a0      	ldr	r0, [r4, #8]
   31fbc:	6891      	ldr	r1, [r2, #8]
   31fbe:	4288      	cmp	r0, r1
   31fc0:	d022      	beq.n	32008 <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   31fc2:	ea57 0306 	orrs.w	r3, r7, r6
   31fc6:	d127      	bne.n	32018 <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31fc8:	483e      	ldr	r0, [pc, #248]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   31fca:	f7ff fdc3 	bl	31b54 <z_spin_unlock_valid>
   31fce:	b1a0      	cbz	r0, 31ffa <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   31fd0:	f388 8811 	msr	BASEPRI, r8
   31fd4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   31fd8:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   31fdc:	b002      	add	sp, #8
   31fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   31fe2:	6891      	ldr	r1, [r2, #8]
   31fe4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   31fe8:	4836      	ldr	r0, [pc, #216]	; (320c4 <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   31fea:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   31fec:	3301      	adds	r3, #1
   31fee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   31ff0:	6893      	ldr	r3, [r2, #8]
   31ff2:	60a3      	str	r3, [r4, #8]
   31ff4:	f7ff fdae 	bl	31b54 <z_spin_unlock_valid>
   31ff8:	b940      	cbnz	r0, 3200c <z_impl_k_mutex_lock+0xa8>
   31ffa:	4933      	ldr	r1, [pc, #204]	; (320c8 <z_impl_k_mutex_lock+0x164>)
   31ffc:	4830      	ldr	r0, [pc, #192]	; (320c0 <z_impl_k_mutex_lock+0x15c>)
   31ffe:	22c2      	movs	r2, #194	; 0xc2
   32000:	f005 ffe2 	bl	37fc8 <assert_print>
   32004:	21c2      	movs	r1, #194	; 0xc2
   32006:	e7d0      	b.n	31faa <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   32008:	6921      	ldr	r1, [r4, #16]
   3200a:	e7ed      	b.n	31fe8 <z_impl_k_mutex_lock+0x84>
   3200c:	f388 8811 	msr	BASEPRI, r8
   32010:	f3bf 8f6f 	isb	sy
		return 0;
   32014:	2000      	movs	r0, #0
   32016:	e7e1      	b.n	31fdc <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   32018:	f991 100e 	ldrsb.w	r1, [r1, #14]
   3201c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   32020:	4299      	cmp	r1, r3
   32022:	bfa8      	it	ge
   32024:	4619      	movge	r1, r3
   32026:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   3202a:	4291      	cmp	r1, r2
   3202c:	bfb8      	it	lt
   3202e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   32030:	428b      	cmp	r3, r1
   32032:	dd02      	ble.n	3203a <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   32034:	f009 fa42 	bl	3b4bc <adjust_owner_prio.isra.0>
   32038:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3203a:	e9cd 7600 	strd	r7, r6, [sp]
   3203e:	4821      	ldr	r0, [pc, #132]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   32040:	4622      	mov	r2, r4
   32042:	4641      	mov	r1, r8
   32044:	f001 fa82 	bl	3354c <z_pend_curr>
	if (got_mutex == 0) {
   32048:	2800      	cmp	r0, #0
   3204a:	d0e3      	beq.n	32014 <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   3204c:	f04f 0340 	mov.w	r3, #64	; 0x40
   32050:	f3ef 8611 	mrs	r6, BASEPRI
   32054:	f383 8812 	msr	BASEPRI_MAX, r3
   32058:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3205c:	4819      	ldr	r0, [pc, #100]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   3205e:	f7ff fd6b 	bl	31b38 <z_spin_lock_valid>
   32062:	2800      	cmp	r0, #0
   32064:	d09b      	beq.n	31f9e <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   32066:	4817      	ldr	r0, [pc, #92]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   32068:	f7ff fd84 	bl	31b74 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   3206c:	68a0      	ldr	r0, [r4, #8]
   3206e:	b1c0      	cbz	r0, 320a2 <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   32070:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   32072:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32074:	429c      	cmp	r4, r3
   32076:	d00a      	beq.n	3208e <z_impl_k_mutex_lock+0x12a>
   32078:	b14b      	cbz	r3, 3208e <z_impl_k_mutex_lock+0x12a>
   3207a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3207e:	4299      	cmp	r1, r3
   32080:	bfa8      	it	ge
   32082:	4619      	movge	r1, r3
   32084:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   32088:	4299      	cmp	r1, r3
   3208a:	bfb8      	it	lt
   3208c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   3208e:	f009 fa15 	bl	3b4bc <adjust_owner_prio.isra.0>
   32092:	b130      	cbz	r0, 320a2 <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   32094:	480b      	ldr	r0, [pc, #44]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   32096:	4631      	mov	r1, r6
   32098:	f001 f804 	bl	330a4 <z_reschedule>
	return -EAGAIN;
   3209c:	f06f 000a 	mvn.w	r0, #10
   320a0:	e79c      	b.n	31fdc <z_impl_k_mutex_lock+0x78>
	if (resched) {
   320a2:	2d00      	cmp	r5, #0
   320a4:	d1f6      	bne.n	32094 <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   320a6:	4807      	ldr	r0, [pc, #28]	; (320c4 <z_impl_k_mutex_lock+0x160>)
   320a8:	f7ff fd54 	bl	31b54 <z_spin_unlock_valid>
   320ac:	2800      	cmp	r0, #0
   320ae:	d0a4      	beq.n	31ffa <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   320b0:	f386 8811 	msr	BASEPRI, r6
   320b4:	f3bf 8f6f 	isb	sy
   320b8:	e7f0      	b.n	3209c <z_impl_k_mutex_lock+0x138>
   320ba:	bf00      	nop
   320bc:	0003efb3 	.word	0x0003efb3
   320c0:	0003c7f8 	.word	0x0003c7f8
   320c4:	2000416c 	.word	0x2000416c
   320c8:	0003cc84 	.word	0x0003cc84
   320cc:	2000413c 	.word	0x2000413c

000320d0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   320d0:	b570      	push	{r4, r5, r6, lr}
   320d2:	4604      	mov	r4, r0
   320d4:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   320d8:	b146      	cbz	r6, 320ec <z_impl_k_mutex_unlock+0x1c>
   320da:	4931      	ldr	r1, [pc, #196]	; (321a0 <z_impl_k_mutex_unlock+0xd0>)
   320dc:	4831      	ldr	r0, [pc, #196]	; (321a4 <z_impl_k_mutex_unlock+0xd4>)
   320de:	22cd      	movs	r2, #205	; 0xcd
   320e0:	f005 ff72 	bl	37fc8 <assert_print>
   320e4:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   320e6:	482e      	ldr	r0, [pc, #184]	; (321a0 <z_impl_k_mutex_unlock+0xd0>)
   320e8:	f005 ff67 	bl	37fba <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   320ec:	6883      	ldr	r3, [r0, #8]
   320ee:	2b00      	cmp	r3, #0
   320f0:	d04f      	beq.n	32192 <z_impl_k_mutex_unlock+0xc2>
	CHECKIF(mutex->owner != _current) {
   320f2:	4a2d      	ldr	r2, [pc, #180]	; (321a8 <z_impl_k_mutex_unlock+0xd8>)
   320f4:	6892      	ldr	r2, [r2, #8]
   320f6:	4293      	cmp	r3, r2
   320f8:	d14e      	bne.n	32198 <z_impl_k_mutex_unlock+0xc8>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   320fa:	68c3      	ldr	r3, [r0, #12]
   320fc:	b933      	cbnz	r3, 3210c <z_impl_k_mutex_unlock+0x3c>
   320fe:	4928      	ldr	r1, [pc, #160]	; (321a0 <z_impl_k_mutex_unlock+0xd0>)
   32100:	4828      	ldr	r0, [pc, #160]	; (321a4 <z_impl_k_mutex_unlock+0xd4>)
   32102:	22e5      	movs	r2, #229	; 0xe5
   32104:	f005 ff60 	bl	37fc8 <assert_print>
   32108:	21e5      	movs	r1, #229	; 0xe5
   3210a:	e7ec      	b.n	320e6 <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   3210c:	2b01      	cmp	r3, #1
   3210e:	d003      	beq.n	32118 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   32110:	3b01      	subs	r3, #1
   32112:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   32114:	2000      	movs	r0, #0
}
   32116:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   32118:	f04f 0340 	mov.w	r3, #64	; 0x40
   3211c:	f3ef 8511 	mrs	r5, BASEPRI
   32120:	f383 8812 	msr	BASEPRI_MAX, r3
   32124:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32128:	4820      	ldr	r0, [pc, #128]	; (321ac <z_impl_k_mutex_unlock+0xdc>)
   3212a:	f7ff fd05 	bl	31b38 <z_spin_lock_valid>
   3212e:	b938      	cbnz	r0, 32140 <z_impl_k_mutex_unlock+0x70>
   32130:	491f      	ldr	r1, [pc, #124]	; (321b0 <z_impl_k_mutex_unlock+0xe0>)
   32132:	481c      	ldr	r0, [pc, #112]	; (321a4 <z_impl_k_mutex_unlock+0xd4>)
   32134:	2294      	movs	r2, #148	; 0x94
   32136:	f005 ff47 	bl	37fc8 <assert_print>
   3213a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3213c:	481c      	ldr	r0, [pc, #112]	; (321b0 <z_impl_k_mutex_unlock+0xe0>)
   3213e:	e7d3      	b.n	320e8 <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   32140:	481a      	ldr	r0, [pc, #104]	; (321ac <z_impl_k_mutex_unlock+0xdc>)
   32142:	f7ff fd17 	bl	31b74 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   32146:	6921      	ldr	r1, [r4, #16]
   32148:	68a0      	ldr	r0, [r4, #8]
   3214a:	f009 f9b7 	bl	3b4bc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   3214e:	4620      	mov	r0, r4
   32150:	f001 fbfe 	bl	33950 <z_unpend_first_thread>
	mutex->owner = new_owner;
   32154:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   32156:	b158      	cbz	r0, 32170 <z_impl_k_mutex_unlock+0xa0>
		mutex->owner_orig_prio = new_owner->base.prio;
   32158:	f990 200e 	ldrsb.w	r2, [r0, #14]
   3215c:	6122      	str	r2, [r4, #16]
   3215e:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
		z_ready_thread(new_owner);
   32162:	f000 ff37 	bl	32fd4 <z_ready_thread>
		z_reschedule(&lock, key);
   32166:	4811      	ldr	r0, [pc, #68]	; (321ac <z_impl_k_mutex_unlock+0xdc>)
   32168:	4629      	mov	r1, r5
   3216a:	f000 ff9b 	bl	330a4 <z_reschedule>
   3216e:	e7d1      	b.n	32114 <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   32170:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32172:	480e      	ldr	r0, [pc, #56]	; (321ac <z_impl_k_mutex_unlock+0xdc>)
   32174:	f7ff fcee 	bl	31b54 <z_spin_unlock_valid>
   32178:	b930      	cbnz	r0, 32188 <z_impl_k_mutex_unlock+0xb8>
   3217a:	490d      	ldr	r1, [pc, #52]	; (321b0 <z_impl_k_mutex_unlock+0xe0>)
   3217c:	4809      	ldr	r0, [pc, #36]	; (321a4 <z_impl_k_mutex_unlock+0xd4>)
   3217e:	22c2      	movs	r2, #194	; 0xc2
   32180:	f005 ff22 	bl	37fc8 <assert_print>
   32184:	21c2      	movs	r1, #194	; 0xc2
   32186:	e7d9      	b.n	3213c <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   32188:	f385 8811 	msr	BASEPRI, r5
   3218c:	f3bf 8f6f 	isb	sy
   32190:	e7c0      	b.n	32114 <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   32192:	f06f 0015 	mvn.w	r0, #21
   32196:	e7be      	b.n	32116 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   32198:	f04f 30ff 	mov.w	r0, #4294967295
   3219c:	e7bb      	b.n	32116 <z_impl_k_mutex_unlock+0x46>
   3219e:	bf00      	nop
   321a0:	0003efb3 	.word	0x0003efb3
   321a4:	0003c7f8 	.word	0x0003c7f8
   321a8:	2000413c 	.word	0x2000413c
   321ac:	2000416c 	.word	0x2000416c
   321b0:	0003cc84 	.word	0x0003cc84

000321b4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   321b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   321b8:	4604      	mov	r4, r0
   321ba:	f89d a020 	ldrb.w	sl, [sp, #32]
   321be:	460d      	mov	r5, r1
   321c0:	4690      	mov	r8, r2
   321c2:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   321c4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   321c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   321cc:	f3ef 8711 	mrs	r7, BASEPRI
   321d0:	f383 8812 	msr	BASEPRI_MAX, r3
   321d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   321d8:	4630      	mov	r0, r6
   321da:	f7ff fcad 	bl	31b38 <z_spin_lock_valid>
   321de:	b940      	cbnz	r0, 321f2 <queue_insert+0x3e>
   321e0:	4937      	ldr	r1, [pc, #220]	; (322c0 <queue_insert+0x10c>)
   321e2:	4838      	ldr	r0, [pc, #224]	; (322c4 <queue_insert+0x110>)
   321e4:	2294      	movs	r2, #148	; 0x94
   321e6:	f005 feef 	bl	37fc8 <assert_print>
   321ea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   321ec:	4834      	ldr	r0, [pc, #208]	; (322c0 <queue_insert+0x10c>)
   321ee:	f005 fee4 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   321f2:	4630      	mov	r0, r6
   321f4:	f7ff fcbe 	bl	31b74 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   321f8:	f1ba 0f00 	cmp.w	sl, #0
   321fc:	d000      	beq.n	32200 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   321fe:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   32200:	f104 000c 	add.w	r0, r4, #12
   32204:	f001 fba4 	bl	33950 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   32208:	b160      	cbz	r0, 32224 <queue_insert+0x70>
   3220a:	2300      	movs	r3, #0
   3220c:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   32210:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   32214:	f000 fede 	bl	32fd4 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   32218:	4630      	mov	r0, r6
   3221a:	4639      	mov	r1, r7
   3221c:	f000 ff42 	bl	330a4 <z_reschedule>
		return 0;
   32220:	2000      	movs	r0, #0
   32222:	e017      	b.n	32254 <queue_insert+0xa0>
	if (alloc) {
   32224:	f1b9 0f00 	cmp.w	r9, #0
   32228:	d026      	beq.n	32278 <queue_insert+0xc4>
	return z_thread_aligned_alloc(0, size);
   3222a:	2108      	movs	r1, #8
   3222c:	f002 fc04 	bl	34a38 <z_thread_aligned_alloc>
		if (anode == NULL) {
   32230:	b990      	cbnz	r0, 32258 <queue_insert+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32232:	4630      	mov	r0, r6
   32234:	f7ff fc8e 	bl	31b54 <z_spin_unlock_valid>
   32238:	b930      	cbnz	r0, 32248 <queue_insert+0x94>
   3223a:	4921      	ldr	r1, [pc, #132]	; (322c0 <queue_insert+0x10c>)
   3223c:	4821      	ldr	r0, [pc, #132]	; (322c4 <queue_insert+0x110>)
   3223e:	22c2      	movs	r2, #194	; 0xc2
   32240:	f005 fec2 	bl	37fc8 <assert_print>
   32244:	21c2      	movs	r1, #194	; 0xc2
   32246:	e7d1      	b.n	321ec <queue_insert+0x38>
	__asm__ volatile(
   32248:	f387 8811 	msr	BASEPRI, r7
   3224c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   32250:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   32254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   32258:	2201      	movs	r2, #1
		anode->data = data;
   3225a:	f8c0 8004 	str.w	r8, [r0, #4]
   3225e:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   32260:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   32262:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   32266:	b95d      	cbnz	r5, 32280 <queue_insert+0xcc>
	parent->next_and_flags = cur_flags | (unative_t)child;
   32268:	6822      	ldr	r2, [r4, #0]
   3226a:	430a      	orrs	r2, r1
   3226c:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3226e:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   32270:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   32272:	b96a      	cbnz	r2, 32290 <queue_insert+0xdc>
	list->tail = node;
   32274:	6060      	str	r0, [r4, #4]
}
   32276:	e00b      	b.n	32290 <queue_insert+0xdc>
	node->next_and_flags = flags;
   32278:	f8c8 9000 	str.w	r9, [r8]
}
   3227c:	4640      	mov	r0, r8
   3227e:	e7ef      	b.n	32260 <queue_insert+0xac>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   32280:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   32282:	2a03      	cmp	r2, #3
   32284:	d810      	bhi.n	322a8 <queue_insert+0xf4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   32286:	6001      	str	r1, [r0, #0]
	return list->tail;
   32288:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   3228a:	b939      	cbnz	r1, 3229c <queue_insert+0xe8>
	list->head = node;
   3228c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   32290:	2104      	movs	r1, #4
   32292:	f104 0014 	add.w	r0, r4, #20
   32296:	f009 fac7 	bl	3b828 <z_handle_obj_poll_events>
   3229a:	e7bd      	b.n	32218 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3229c:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3229e:	f002 0203 	and.w	r2, r2, #3
   322a2:	4302      	orrs	r2, r0
   322a4:	600a      	str	r2, [r1, #0]
   322a6:	e7e5      	b.n	32274 <queue_insert+0xc0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   322a8:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   322ac:	430a      	orrs	r2, r1
   322ae:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   322b0:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   322b2:	f002 0203 	and.w	r2, r2, #3
   322b6:	ea40 0302 	orr.w	r3, r0, r2
   322ba:	602b      	str	r3, [r5, #0]
}
   322bc:	e7e8      	b.n	32290 <queue_insert+0xdc>
   322be:	bf00      	nop
   322c0:	0003cc84 	.word	0x0003cc84
   322c4:	0003c7f8 	.word	0x0003c7f8

000322c8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   322c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   322cc:	4605      	mov	r5, r0
   322ce:	4691      	mov	r9, r2
   322d0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   322d2:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   322d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   322da:	f3ef 8811 	mrs	r8, BASEPRI
   322de:	f383 8812 	msr	BASEPRI_MAX, r3
   322e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   322e6:	4630      	mov	r0, r6
   322e8:	f7ff fc26 	bl	31b38 <z_spin_lock_valid>
   322ec:	b940      	cbnz	r0, 32300 <z_impl_k_queue_get+0x38>
   322ee:	491f      	ldr	r1, [pc, #124]	; (3236c <z_impl_k_queue_get+0xa4>)
   322f0:	481f      	ldr	r0, [pc, #124]	; (32370 <z_impl_k_queue_get+0xa8>)
   322f2:	2294      	movs	r2, #148	; 0x94
   322f4:	f005 fe68 	bl	37fc8 <assert_print>
   322f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   322fa:	481c      	ldr	r0, [pc, #112]	; (3236c <z_impl_k_queue_get+0xa4>)
   322fc:	f005 fe5d 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   32300:	4630      	mov	r0, r6
   32302:	f7ff fc37 	bl	31b74 <z_spin_lock_set_owner>
	return list->head;
   32306:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   32308:	b1bc      	cbz	r4, 3233a <z_impl_k_queue_get+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3230a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3230c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3230e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   32312:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   32314:	4620      	mov	r0, r4
	list->head = node;
   32316:	602b      	str	r3, [r5, #0]
	list->tail = node;
   32318:	bf08      	it	eq
   3231a:	606b      	streq	r3, [r5, #4]
   3231c:	2101      	movs	r1, #1
   3231e:	f009 f8dc 	bl	3b4da <z_queue_node_peek>
   32322:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32324:	4630      	mov	r0, r6
   32326:	f7ff fc15 	bl	31b54 <z_spin_unlock_valid>
   3232a:	b9b0      	cbnz	r0, 3235a <z_impl_k_queue_get+0x92>
   3232c:	490f      	ldr	r1, [pc, #60]	; (3236c <z_impl_k_queue_get+0xa4>)
   3232e:	4810      	ldr	r0, [pc, #64]	; (32370 <z_impl_k_queue_get+0xa8>)
   32330:	22c2      	movs	r2, #194	; 0xc2
   32332:	f005 fe49 	bl	37fc8 <assert_print>
   32336:	21c2      	movs	r1, #194	; 0xc2
   32338:	e7df      	b.n	322fa <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3233a:	ea59 0307 	orrs.w	r3, r9, r7
   3233e:	d0f1      	beq.n	32324 <z_impl_k_queue_get+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   32340:	e9cd 9700 	strd	r9, r7, [sp]
   32344:	f105 020c 	add.w	r2, r5, #12
   32348:	4641      	mov	r1, r8
   3234a:	4630      	mov	r0, r6
   3234c:	f001 f8fe 	bl	3354c <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   32350:	b938      	cbnz	r0, 32362 <z_impl_k_queue_get+0x9a>
   32352:	4b08      	ldr	r3, [pc, #32]	; (32374 <z_impl_k_queue_get+0xac>)
   32354:	689b      	ldr	r3, [r3, #8]
   32356:	695c      	ldr	r4, [r3, #20]
   32358:	e003      	b.n	32362 <z_impl_k_queue_get+0x9a>
	__asm__ volatile(
   3235a:	f388 8811 	msr	BASEPRI, r8
   3235e:	f3bf 8f6f 	isb	sy
}
   32362:	4620      	mov	r0, r4
   32364:	b003      	add	sp, #12
   32366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3236a:	bf00      	nop
   3236c:	0003cc84 	.word	0x0003cc84
   32370:	0003c7f8 	.word	0x0003c7f8
   32374:	2000413c 	.word	0x2000413c

00032378 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   32378:	b538      	push	{r3, r4, r5, lr}
   3237a:	4604      	mov	r4, r0
	__asm__ volatile(
   3237c:	f04f 0340 	mov.w	r3, #64	; 0x40
   32380:	f3ef 8511 	mrs	r5, BASEPRI
   32384:	f383 8812 	msr	BASEPRI_MAX, r3
   32388:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3238c:	4815      	ldr	r0, [pc, #84]	; (323e4 <z_impl_k_sem_give+0x6c>)
   3238e:	f7ff fbd3 	bl	31b38 <z_spin_lock_valid>
   32392:	b940      	cbnz	r0, 323a6 <z_impl_k_sem_give+0x2e>
   32394:	4914      	ldr	r1, [pc, #80]	; (323e8 <z_impl_k_sem_give+0x70>)
   32396:	4815      	ldr	r0, [pc, #84]	; (323ec <z_impl_k_sem_give+0x74>)
   32398:	2294      	movs	r2, #148	; 0x94
   3239a:	f005 fe15 	bl	37fc8 <assert_print>
   3239e:	4812      	ldr	r0, [pc, #72]	; (323e8 <z_impl_k_sem_give+0x70>)
   323a0:	2194      	movs	r1, #148	; 0x94
   323a2:	f005 fe0a 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   323a6:	480f      	ldr	r0, [pc, #60]	; (323e4 <z_impl_k_sem_give+0x6c>)
   323a8:	f7ff fbe4 	bl	31b74 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   323ac:	4620      	mov	r0, r4
   323ae:	f001 facf 	bl	33950 <z_unpend_first_thread>

	if (thread != NULL) {
   323b2:	b150      	cbz	r0, 323ca <z_impl_k_sem_give+0x52>
   323b4:	2200      	movs	r2, #0
   323b6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   323ba:	f000 fe0b 	bl	32fd4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   323be:	4629      	mov	r1, r5
   323c0:	4808      	ldr	r0, [pc, #32]	; (323e4 <z_impl_k_sem_give+0x6c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   323c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   323c6:	f000 be6d 	b.w	330a4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   323ca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   323ce:	429a      	cmp	r2, r3
   323d0:	bf18      	it	ne
   323d2:	3301      	addne	r3, #1
   323d4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   323d6:	2102      	movs	r1, #2
   323d8:	f104 0010 	add.w	r0, r4, #16
   323dc:	f009 fa24 	bl	3b828 <z_handle_obj_poll_events>
}
   323e0:	e7ed      	b.n	323be <z_impl_k_sem_give+0x46>
   323e2:	bf00      	nop
   323e4:	20004170 	.word	0x20004170
   323e8:	0003cc84 	.word	0x0003cc84
   323ec:	0003c7f8 	.word	0x0003c7f8

000323f0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   323f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   323f2:	4604      	mov	r4, r0
   323f4:	4616      	mov	r6, r2
   323f6:	461d      	mov	r5, r3
   323f8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   323fc:	b15b      	cbz	r3, 32416 <z_impl_k_sem_take+0x26>
   323fe:	ea52 0305 	orrs.w	r3, r2, r5
   32402:	d008      	beq.n	32416 <z_impl_k_sem_take+0x26>
   32404:	4926      	ldr	r1, [pc, #152]	; (324a0 <z_impl_k_sem_take+0xb0>)
   32406:	4827      	ldr	r0, [pc, #156]	; (324a4 <z_impl_k_sem_take+0xb4>)
   32408:	2279      	movs	r2, #121	; 0x79
   3240a:	f005 fddd 	bl	37fc8 <assert_print>
   3240e:	4824      	ldr	r0, [pc, #144]	; (324a0 <z_impl_k_sem_take+0xb0>)
   32410:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32412:	f005 fdd2 	bl	37fba <assert_post_action>
   32416:	f04f 0340 	mov.w	r3, #64	; 0x40
   3241a:	f3ef 8711 	mrs	r7, BASEPRI
   3241e:	f383 8812 	msr	BASEPRI_MAX, r3
   32422:	f3bf 8f6f 	isb	sy
   32426:	4820      	ldr	r0, [pc, #128]	; (324a8 <z_impl_k_sem_take+0xb8>)
   32428:	f7ff fb86 	bl	31b38 <z_spin_lock_valid>
   3242c:	b938      	cbnz	r0, 3243e <z_impl_k_sem_take+0x4e>
   3242e:	491f      	ldr	r1, [pc, #124]	; (324ac <z_impl_k_sem_take+0xbc>)
   32430:	481c      	ldr	r0, [pc, #112]	; (324a4 <z_impl_k_sem_take+0xb4>)
   32432:	2294      	movs	r2, #148	; 0x94
   32434:	f005 fdc8 	bl	37fc8 <assert_print>
   32438:	2194      	movs	r1, #148	; 0x94
   3243a:	481c      	ldr	r0, [pc, #112]	; (324ac <z_impl_k_sem_take+0xbc>)
   3243c:	e7e9      	b.n	32412 <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   3243e:	481a      	ldr	r0, [pc, #104]	; (324a8 <z_impl_k_sem_take+0xb8>)
   32440:	f7ff fb98 	bl	31b74 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   32444:	68a3      	ldr	r3, [r4, #8]
   32446:	b19b      	cbz	r3, 32470 <z_impl_k_sem_take+0x80>
		sem->count--;
   32448:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3244a:	4817      	ldr	r0, [pc, #92]	; (324a8 <z_impl_k_sem_take+0xb8>)
   3244c:	60a3      	str	r3, [r4, #8]
   3244e:	f7ff fb81 	bl	31b54 <z_spin_unlock_valid>
   32452:	b930      	cbnz	r0, 32462 <z_impl_k_sem_take+0x72>
   32454:	4915      	ldr	r1, [pc, #84]	; (324ac <z_impl_k_sem_take+0xbc>)
   32456:	4813      	ldr	r0, [pc, #76]	; (324a4 <z_impl_k_sem_take+0xb4>)
   32458:	22c2      	movs	r2, #194	; 0xc2
   3245a:	f005 fdb5 	bl	37fc8 <assert_print>
   3245e:	21c2      	movs	r1, #194	; 0xc2
   32460:	e7eb      	b.n	3243a <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   32462:	f387 8811 	msr	BASEPRI, r7
   32466:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3246a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   3246c:	b003      	add	sp, #12
   3246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   32470:	ea56 0305 	orrs.w	r3, r6, r5
   32474:	d10b      	bne.n	3248e <z_impl_k_sem_take+0x9e>
   32476:	480c      	ldr	r0, [pc, #48]	; (324a8 <z_impl_k_sem_take+0xb8>)
   32478:	f7ff fb6c 	bl	31b54 <z_spin_unlock_valid>
   3247c:	2800      	cmp	r0, #0
   3247e:	d0e9      	beq.n	32454 <z_impl_k_sem_take+0x64>
   32480:	f387 8811 	msr	BASEPRI, r7
   32484:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   32488:	f06f 000f 	mvn.w	r0, #15
   3248c:	e7ee      	b.n	3246c <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3248e:	e9cd 6500 	strd	r6, r5, [sp]
   32492:	4622      	mov	r2, r4
   32494:	4639      	mov	r1, r7
   32496:	4804      	ldr	r0, [pc, #16]	; (324a8 <z_impl_k_sem_take+0xb8>)
   32498:	f001 f858 	bl	3354c <z_pend_curr>
	return ret;
   3249c:	e7e6      	b.n	3246c <z_impl_k_sem_take+0x7c>
   3249e:	bf00      	nop
   324a0:	0003efd5 	.word	0x0003efd5
   324a4:	0003c7f8 	.word	0x0003c7f8
   324a8:	20004170 	.word	0x20004170
   324ac:	0003cc84 	.word	0x0003cc84

000324b0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   324b0:	b570      	push	{r4, r5, r6, lr}
   324b2:	4604      	mov	r4, r0
	__asm__ volatile(
   324b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   324b8:	f3ef 8511 	mrs	r5, BASEPRI
   324bc:	f383 8812 	msr	BASEPRI_MAX, r3
   324c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   324c4:	4813      	ldr	r0, [pc, #76]	; (32514 <z_impl_k_sem_reset+0x64>)
   324c6:	f7ff fb37 	bl	31b38 <z_spin_lock_valid>
   324ca:	b940      	cbnz	r0, 324de <z_impl_k_sem_reset+0x2e>
   324cc:	4912      	ldr	r1, [pc, #72]	; (32518 <z_impl_k_sem_reset+0x68>)
   324ce:	4813      	ldr	r0, [pc, #76]	; (3251c <z_impl_k_sem_reset+0x6c>)
   324d0:	2294      	movs	r2, #148	; 0x94
   324d2:	f005 fd79 	bl	37fc8 <assert_print>
   324d6:	4810      	ldr	r0, [pc, #64]	; (32518 <z_impl_k_sem_reset+0x68>)
   324d8:	2194      	movs	r1, #148	; 0x94
   324da:	f005 fd6e 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   324de:	480d      	ldr	r0, [pc, #52]	; (32514 <z_impl_k_sem_reset+0x64>)
   324e0:	f7ff fb48 	bl	31b74 <z_spin_lock_set_owner>
   324e4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   324e8:	4620      	mov	r0, r4
   324ea:	f001 fa31 	bl	33950 <z_unpend_first_thread>
		if (thread == NULL) {
   324ee:	b120      	cbz	r0, 324fa <z_impl_k_sem_reset+0x4a>
   324f0:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   324f4:	f000 fd6e 	bl	32fd4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   324f8:	e7f6      	b.n	324e8 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   324fa:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   324fc:	2102      	movs	r1, #2
   324fe:	f104 0010 	add.w	r0, r4, #16
   32502:	f009 f991 	bl	3b828 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   32506:	4629      	mov	r1, r5
   32508:	4802      	ldr	r0, [pc, #8]	; (32514 <z_impl_k_sem_reset+0x64>)
}
   3250a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3250e:	f000 bdc9 	b.w	330a4 <z_reschedule>
   32512:	bf00      	nop
   32514:	20004170 	.word	0x20004170
   32518:	0003cc84 	.word	0x0003cc84
   3251c:	0003c7f8 	.word	0x0003c7f8

00032520 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   32520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   32522:	4b09      	ldr	r3, [pc, #36]	; (32548 <k_sys_work_q_init+0x28>)
   32524:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   32526:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   32528:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   3252a:	9300      	str	r3, [sp, #0]
   3252c:	4907      	ldr	r1, [pc, #28]	; (3254c <k_sys_work_q_init+0x2c>)
   3252e:	4808      	ldr	r0, [pc, #32]	; (32550 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   32530:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   32534:	f04f 33ff 	mov.w	r3, #4294967295
   32538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   3253c:	f000 fa66 	bl	32a0c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   32540:	4620      	mov	r0, r4
   32542:	b004      	add	sp, #16
   32544:	bd10      	pop	{r4, pc}
   32546:	bf00      	nop
   32548:	0003eff5 	.word	0x0003eff5
   3254c:	20009d80 	.word	0x20009d80
   32550:	20003230 	.word	0x20003230

00032554 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   32554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32558:	4e68      	ldr	r6, [pc, #416]	; (326fc <work_queue_main+0x1a8>)
	return list->head;
   3255a:	4f69      	ldr	r7, [pc, #420]	; (32700 <work_queue_main+0x1ac>)
   3255c:	b085      	sub	sp, #20
   3255e:	4604      	mov	r4, r0
   32560:	f04f 0340 	mov.w	r3, #64	; 0x40
   32564:	f3ef 8811 	mrs	r8, BASEPRI
   32568:	f383 8812 	msr	BASEPRI_MAX, r3
   3256c:	f3bf 8f6f 	isb	sy
   32570:	4630      	mov	r0, r6
   32572:	f7ff fae1 	bl	31b38 <z_spin_lock_valid>
   32576:	b940      	cbnz	r0, 3258a <work_queue_main+0x36>
   32578:	4962      	ldr	r1, [pc, #392]	; (32704 <work_queue_main+0x1b0>)
   3257a:	4863      	ldr	r0, [pc, #396]	; (32708 <work_queue_main+0x1b4>)
   3257c:	2294      	movs	r2, #148	; 0x94
   3257e:	f005 fd23 	bl	37fc8 <assert_print>
   32582:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32584:	485f      	ldr	r0, [pc, #380]	; (32704 <work_queue_main+0x1b0>)
   32586:	f005 fd18 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3258a:	4630      	mov	r0, r6
   3258c:	f7ff faf2 	bl	31b74 <z_spin_lock_set_owner>
   32590:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   32594:	b9a5      	cbnz	r5, 325c0 <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   32596:	2102      	movs	r1, #2
   32598:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   3259c:	f008 ffdb 	bl	3b556 <flag_test_and_clear>
   325a0:	bb80      	cbnz	r0, 32604 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   325a2:	2300      	movs	r3, #0
   325a4:	9302      	str	r3, [sp, #8]
   325a6:	f04f 32ff 	mov.w	r2, #4294967295
   325aa:	f04f 33ff 	mov.w	r3, #4294967295
   325ae:	e9cd 2300 	strd	r2, r3, [sp]
   325b2:	4641      	mov	r1, r8
   325b4:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
   325b8:	4630      	mov	r0, r6
   325ba:	f001 fc35 	bl	33e28 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   325be:	e7cf      	b.n	32560 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   325c0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
	return node->next;
   325c4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   325c6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   325ca:	4295      	cmp	r5, r2
	list->tail = node;
   325cc:	bf08      	it	eq
   325ce:	f8c4 309c 	streq.w	r3, [r4, #156]	; 0x9c
	*flagp |= BIT(bit);
   325d2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   325d6:	f043 0302 	orr.w	r3, r3, #2
   325da:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	*flagp &= ~BIT(bit);
   325de:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   325e0:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   325e4:	f023 0304 	bic.w	r3, r3, #4
   325e8:	f043 0301 	orr.w	r3, r3, #1
   325ec:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   325ee:	4630      	mov	r0, r6
   325f0:	f7ff fab0 	bl	31b54 <z_spin_unlock_valid>
   325f4:	b980      	cbnz	r0, 32618 <work_queue_main+0xc4>
   325f6:	4943      	ldr	r1, [pc, #268]	; (32704 <work_queue_main+0x1b0>)
   325f8:	4843      	ldr	r0, [pc, #268]	; (32708 <work_queue_main+0x1b4>)
   325fa:	22c2      	movs	r2, #194	; 0xc2
   325fc:	f005 fce4 	bl	37fc8 <assert_print>
   32600:	21c2      	movs	r1, #194	; 0xc2
   32602:	e7bf      	b.n	32584 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   32604:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   32608:	2200      	movs	r2, #0
   3260a:	2101      	movs	r1, #1
   3260c:	4628      	mov	r0, r5
   3260e:	f001 fbbf 	bl	33d90 <z_sched_wake>
   32612:	2800      	cmp	r0, #0
   32614:	d1f8      	bne.n	32608 <work_queue_main+0xb4>
   32616:	e7c4      	b.n	325a2 <work_queue_main+0x4e>
	__asm__ volatile(
   32618:	f388 8811 	msr	BASEPRI, r8
   3261c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   32620:	f1b9 0f00 	cmp.w	r9, #0
   32624:	d109      	bne.n	3263a <work_queue_main+0xe6>
   32626:	4939      	ldr	r1, [pc, #228]	; (3270c <work_queue_main+0x1b8>)
   32628:	4837      	ldr	r0, [pc, #220]	; (32708 <work_queue_main+0x1b4>)
   3262a:	f240 229b 	movw	r2, #667	; 0x29b
   3262e:	f005 fccb 	bl	37fc8 <assert_print>
   32632:	4836      	ldr	r0, [pc, #216]	; (3270c <work_queue_main+0x1b8>)
   32634:	f240 219b 	movw	r1, #667	; 0x29b
   32638:	e7a5      	b.n	32586 <work_queue_main+0x32>
		handler(work);
   3263a:	4628      	mov	r0, r5
   3263c:	47c8      	blx	r9
	__asm__ volatile(
   3263e:	f04f 0340 	mov.w	r3, #64	; 0x40
   32642:	f3ef 8a11 	mrs	sl, BASEPRI
   32646:	f383 8812 	msr	BASEPRI_MAX, r3
   3264a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3264e:	4630      	mov	r0, r6
   32650:	f7ff fa72 	bl	31b38 <z_spin_lock_valid>
   32654:	2800      	cmp	r0, #0
   32656:	d08f      	beq.n	32578 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   32658:	4630      	mov	r0, r6
   3265a:	f7ff fa8b 	bl	31b74 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   3265e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   32660:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   32662:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   32666:	d417      	bmi.n	32698 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   32668:	60ea      	str	r2, [r5, #12]
   3266a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   3266e:	f023 0302 	bic.w	r3, r3, #2
   32672:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32676:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   32678:	f3c3 2500 	ubfx	r5, r3, #8, #1
   3267c:	f7ff fa6a 	bl	31b54 <z_spin_unlock_valid>
   32680:	2800      	cmp	r0, #0
   32682:	d0b8      	beq.n	325f6 <work_queue_main+0xa2>
	__asm__ volatile(
   32684:	f38a 8811 	msr	BASEPRI, sl
   32688:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   3268c:	2d00      	cmp	r5, #0
   3268e:	f47f af67 	bne.w	32560 <work_queue_main+0xc>
	z_impl_k_yield();
   32692:	f001 f9a7 	bl	339e4 <z_impl_k_yield>
}
   32696:	e763      	b.n	32560 <work_queue_main+0xc>
	return list->head;
   32698:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   3269a:	f023 0303 	bic.w	r3, r3, #3
   3269e:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   326a0:	2800      	cmp	r0, #0
   326a2:	d0e2      	beq.n	3266a <work_queue_main+0x116>
	return node->next;
   326a4:	f04f 0800 	mov.w	r8, #0
   326a8:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   326ac:	46c3      	mov	fp, r8
   326ae:	2800      	cmp	r0, #0
   326b0:	d0db      	beq.n	3266a <work_queue_main+0x116>
		if (wc->work == work) {
   326b2:	6843      	ldr	r3, [r0, #4]
   326b4:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   326b6:	4602      	mov	r2, r0
		if (wc->work == work) {
   326b8:	d10d      	bne.n	326d6 <work_queue_main+0x182>
	return node->next;
   326ba:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   326bc:	f1b8 0f00 	cmp.w	r8, #0
   326c0:	d112      	bne.n	326e8 <work_queue_main+0x194>
   326c2:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   326c4:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   326c6:	4283      	cmp	r3, r0
   326c8:	d100      	bne.n	326cc <work_queue_main+0x178>
	list->tail = node;
   326ca:	607a      	str	r2, [r7, #4]
	parent->next = child;
   326cc:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   326d0:	f7ff fe52 	bl	32378 <z_impl_k_sem_give>
}
   326d4:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   326d6:	f1b9 0f00 	cmp.w	r9, #0
   326da:	d00d      	beq.n	326f8 <work_queue_main+0x1a4>
	return node->next;
   326dc:	f8d9 3000 	ldr.w	r3, [r9]
   326e0:	4648      	mov	r0, r9
   326e2:	4690      	mov	r8, r2
   326e4:	4699      	mov	r9, r3
   326e6:	e7e2      	b.n	326ae <work_queue_main+0x15a>
	parent->next = child;
   326e8:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   326ec:	687b      	ldr	r3, [r7, #4]
   326ee:	4283      	cmp	r3, r0
	list->tail = node;
   326f0:	bf08      	it	eq
   326f2:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   326f6:	e7e9      	b.n	326cc <work_queue_main+0x178>
   326f8:	464b      	mov	r3, r9
   326fa:	e7f1      	b.n	326e0 <work_queue_main+0x18c>
   326fc:	2000417c 	.word	0x2000417c
   32700:	20004174 	.word	0x20004174
   32704:	0003cc84 	.word	0x0003cc84
   32708:	0003c7f8 	.word	0x0003c7f8
   3270c:	0003effe 	.word	0x0003effe

00032710 <cancel_sync_locked>:
{
   32710:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   32712:	68c3      	ldr	r3, [r0, #12]
   32714:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   32718:	079b      	lsls	r3, r3, #30
{
   3271a:	4605      	mov	r5, r0
   3271c:	460c      	mov	r4, r1
	if (ret) {
   3271e:	d50d      	bpl.n	3273c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   32720:	2201      	movs	r2, #1
   32722:	2100      	movs	r1, #0
   32724:	f104 0008 	add.w	r0, r4, #8
   32728:	f008 ff05 	bl	3b536 <z_impl_k_sem_init>
	parent->next = child;
   3272c:	2300      	movs	r3, #0
   3272e:	6023      	str	r3, [r4, #0]
	return list->tail;
   32730:	4b05      	ldr	r3, [pc, #20]	; (32748 <cancel_sync_locked+0x38>)
	canceler->work = work;
   32732:	6065      	str	r5, [r4, #4]
   32734:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   32736:	b91a      	cbnz	r2, 32740 <cancel_sync_locked+0x30>
	list->head = node;
   32738:	e9c3 4400 	strd	r4, r4, [r3]
}
   3273c:	4630      	mov	r0, r6
   3273e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   32740:	6014      	str	r4, [r2, #0]
	list->tail = node;
   32742:	605c      	str	r4, [r3, #4]
}
   32744:	e7fa      	b.n	3273c <cancel_sync_locked+0x2c>
   32746:	bf00      	nop
   32748:	20004174 	.word	0x20004174

0003274c <submit_to_queue_locked>:
{
   3274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   3274e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   32750:	079a      	lsls	r2, r3, #30
{
   32752:	4604      	mov	r4, r0
   32754:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   32756:	f3c3 0640 	ubfx	r6, r3, #1, #1
   3275a:	d438      	bmi.n	327ce <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   3275c:	075b      	lsls	r3, r3, #29
   3275e:	d424      	bmi.n	327aa <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   32760:	680b      	ldr	r3, [r1, #0]
   32762:	b90b      	cbnz	r3, 32768 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   32764:	6883      	ldr	r3, [r0, #8]
   32766:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   32768:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   3276a:	07dd      	lsls	r5, r3, #31
   3276c:	d520      	bpl.n	327b0 <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   3276e:	68a3      	ldr	r3, [r4, #8]
   32770:	b953      	cbnz	r3, 32788 <submit_to_queue_locked+0x3c>
   32772:	4928      	ldr	r1, [pc, #160]	; (32814 <submit_to_queue_locked+0xc8>)
   32774:	4828      	ldr	r0, [pc, #160]	; (32818 <submit_to_queue_locked+0xcc>)
   32776:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   3277a:	f005 fc25 	bl	37fc8 <assert_print>
   3277e:	4825      	ldr	r0, [pc, #148]	; (32814 <submit_to_queue_locked+0xc8>)
   32780:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   32784:	f005 fc19 	bl	37fba <assert_post_action>
			*queuep = work->queue;
   32788:	603b      	str	r3, [r7, #0]
			ret = 2;
   3278a:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   3278c:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   3278e:	2d00      	cmp	r5, #0
   32790:	d03c      	beq.n	3280c <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   32792:	4b22      	ldr	r3, [pc, #136]	; (3281c <submit_to_queue_locked+0xd0>)
   32794:	689b      	ldr	r3, [r3, #8]
   32796:	42ab      	cmp	r3, r5
   32798:	d00c      	beq.n	327b4 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   3279a:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   3279e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   327a0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   327a4:	d416      	bmi.n	327d4 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   327a6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   327aa:	2300      	movs	r3, #0
   327ac:	603b      	str	r3, [r7, #0]
	return ret;
   327ae:	e027      	b.n	32800 <submit_to_queue_locked+0xb4>
		ret = 1;
   327b0:	2601      	movs	r6, #1
   327b2:	e7eb      	b.n	3278c <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   327b4:	f008 fe6e 	bl	3b494 <k_is_in_isr>
   327b8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   327bc:	2800      	cmp	r0, #0
   327be:	d1ee      	bne.n	3279e <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   327c0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   327c2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   327c6:	d5ee      	bpl.n	327a6 <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   327c8:	b152      	cbz	r2, 327e0 <submit_to_queue_locked+0x94>
   327ca:	075b      	lsls	r3, r3, #29
   327cc:	d408      	bmi.n	327e0 <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   327ce:	f06f 060f 	mvn.w	r6, #15
   327d2:	e7ea      	b.n	327aa <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   327d4:	2a00      	cmp	r2, #0
   327d6:	d1fa      	bne.n	327ce <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   327d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   327dc:	2b00      	cmp	r3, #0
   327de:	d1f6      	bne.n	327ce <submit_to_queue_locked+0x82>
	parent->next = child;
   327e0:	2300      	movs	r3, #0
   327e2:	6023      	str	r3, [r4, #0]
	return list->tail;
   327e4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
Z_GENLIST_APPEND(slist, snode)
   327e8:	b963      	cbnz	r3, 32804 <submit_to_queue_locked+0xb8>
	list->head = node;
   327ea:	e9c5 4426 	strd	r4, r4, [r5, #152]	; 0x98
		(void)notify_queue_locked(queue);
   327ee:	4628      	mov	r0, r5
   327f0:	f008 feca 	bl	3b588 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   327f4:	68e3      	ldr	r3, [r4, #12]
   327f6:	f043 0304 	orr.w	r3, r3, #4
   327fa:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   327fc:	683b      	ldr	r3, [r7, #0]
   327fe:	60a3      	str	r3, [r4, #8]
}
   32800:	4630      	mov	r0, r6
   32802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   32804:	601c      	str	r4, [r3, #0]
	list->tail = node;
   32806:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
}
   3280a:	e7f0      	b.n	327ee <submit_to_queue_locked+0xa2>
		return -EINVAL;
   3280c:	f06f 0615 	mvn.w	r6, #21
   32810:	e7cb      	b.n	327aa <submit_to_queue_locked+0x5e>
   32812:	bf00      	nop
   32814:	0003effe 	.word	0x0003effe
   32818:	0003c7f8 	.word	0x0003c7f8
   3281c:	2000413c 	.word	0x2000413c

00032820 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   32820:	b573      	push	{r0, r1, r4, r5, r6, lr}
   32822:	4604      	mov	r4, r0
	__asm__ volatile(
   32824:	f04f 0340 	mov.w	r3, #64	; 0x40
   32828:	f3ef 8511 	mrs	r5, BASEPRI
   3282c:	f383 8812 	msr	BASEPRI_MAX, r3
   32830:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32834:	4817      	ldr	r0, [pc, #92]	; (32894 <work_timeout+0x74>)
   32836:	f7ff f97f 	bl	31b38 <z_spin_lock_valid>
   3283a:	b940      	cbnz	r0, 3284e <work_timeout+0x2e>
   3283c:	4916      	ldr	r1, [pc, #88]	; (32898 <work_timeout+0x78>)
   3283e:	4817      	ldr	r0, [pc, #92]	; (3289c <work_timeout+0x7c>)
   32840:	2294      	movs	r2, #148	; 0x94
   32842:	f005 fbc1 	bl	37fc8 <assert_print>
   32846:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32848:	4813      	ldr	r0, [pc, #76]	; (32898 <work_timeout+0x78>)
   3284a:	f005 fbb6 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3284e:	4811      	ldr	r0, [pc, #68]	; (32894 <work_timeout+0x74>)
   32850:	f7ff f990 	bl	31b74 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   32854:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   32856:	2103      	movs	r1, #3
   32858:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   3285a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3285c:	f1a4 0610 	sub.w	r6, r4, #16
   32860:	f008 fe79 	bl	3b556 <flag_test_and_clear>
   32864:	b128      	cbz	r0, 32872 <work_timeout+0x52>
		queue = dw->queue;
   32866:	69a3      	ldr	r3, [r4, #24]
   32868:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   3286a:	a901      	add	r1, sp, #4
   3286c:	4630      	mov	r0, r6
   3286e:	f7ff ff6d 	bl	3274c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32872:	4808      	ldr	r0, [pc, #32]	; (32894 <work_timeout+0x74>)
   32874:	f7ff f96e 	bl	31b54 <z_spin_unlock_valid>
   32878:	b930      	cbnz	r0, 32888 <work_timeout+0x68>
   3287a:	4907      	ldr	r1, [pc, #28]	; (32898 <work_timeout+0x78>)
   3287c:	4807      	ldr	r0, [pc, #28]	; (3289c <work_timeout+0x7c>)
   3287e:	22c2      	movs	r2, #194	; 0xc2
   32880:	f005 fba2 	bl	37fc8 <assert_print>
   32884:	21c2      	movs	r1, #194	; 0xc2
   32886:	e7df      	b.n	32848 <work_timeout+0x28>
	__asm__ volatile(
   32888:	f385 8811 	msr	BASEPRI, r5
   3288c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   32890:	b002      	add	sp, #8
   32892:	bd70      	pop	{r4, r5, r6, pc}
   32894:	2000417c 	.word	0x2000417c
   32898:	0003cc84 	.word	0x0003cc84
   3289c:	0003c7f8 	.word	0x0003c7f8

000328a0 <k_work_init>:
{
   328a0:	b538      	push	{r3, r4, r5, lr}
   328a2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   328a4:	4604      	mov	r4, r0
   328a6:	b940      	cbnz	r0, 328ba <k_work_init+0x1a>
   328a8:	490b      	ldr	r1, [pc, #44]	; (328d8 <k_work_init+0x38>)
   328aa:	480c      	ldr	r0, [pc, #48]	; (328dc <k_work_init+0x3c>)
   328ac:	2289      	movs	r2, #137	; 0x89
   328ae:	f005 fb8b 	bl	37fc8 <assert_print>
   328b2:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   328b4:	4808      	ldr	r0, [pc, #32]	; (328d8 <k_work_init+0x38>)
   328b6:	f005 fb80 	bl	37fba <assert_post_action>
   328ba:	b931      	cbnz	r1, 328ca <k_work_init+0x2a>
   328bc:	4906      	ldr	r1, [pc, #24]	; (328d8 <k_work_init+0x38>)
   328be:	4807      	ldr	r0, [pc, #28]	; (328dc <k_work_init+0x3c>)
   328c0:	228a      	movs	r2, #138	; 0x8a
   328c2:	f005 fb81 	bl	37fc8 <assert_print>
   328c6:	218a      	movs	r1, #138	; 0x8a
   328c8:	e7f4      	b.n	328b4 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   328ca:	2210      	movs	r2, #16
   328cc:	2100      	movs	r1, #0
   328ce:	f005 ff7f 	bl	387d0 <memset>
   328d2:	6065      	str	r5, [r4, #4]
}
   328d4:	bd38      	pop	{r3, r4, r5, pc}
   328d6:	bf00      	nop
   328d8:	0003effe 	.word	0x0003effe
   328dc:	0003c7f8 	.word	0x0003c7f8

000328e0 <k_work_busy_get>:
{
   328e0:	b538      	push	{r3, r4, r5, lr}
   328e2:	4604      	mov	r4, r0
	__asm__ volatile(
   328e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   328e8:	f3ef 8511 	mrs	r5, BASEPRI
   328ec:	f383 8812 	msr	BASEPRI_MAX, r3
   328f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   328f4:	4811      	ldr	r0, [pc, #68]	; (3293c <k_work_busy_get+0x5c>)
   328f6:	f7ff f91f 	bl	31b38 <z_spin_lock_valid>
   328fa:	b940      	cbnz	r0, 3290e <k_work_busy_get+0x2e>
   328fc:	4910      	ldr	r1, [pc, #64]	; (32940 <k_work_busy_get+0x60>)
   328fe:	4811      	ldr	r0, [pc, #68]	; (32944 <k_work_busy_get+0x64>)
   32900:	2294      	movs	r2, #148	; 0x94
   32902:	f005 fb61 	bl	37fc8 <assert_print>
   32906:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32908:	480d      	ldr	r0, [pc, #52]	; (32940 <k_work_busy_get+0x60>)
   3290a:	f005 fb56 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3290e:	480b      	ldr	r0, [pc, #44]	; (3293c <k_work_busy_get+0x5c>)
   32910:	f7ff f930 	bl	31b74 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   32914:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32916:	4809      	ldr	r0, [pc, #36]	; (3293c <k_work_busy_get+0x5c>)
   32918:	f004 040f 	and.w	r4, r4, #15
   3291c:	f7ff f91a 	bl	31b54 <z_spin_unlock_valid>
   32920:	b930      	cbnz	r0, 32930 <k_work_busy_get+0x50>
   32922:	4907      	ldr	r1, [pc, #28]	; (32940 <k_work_busy_get+0x60>)
   32924:	4807      	ldr	r0, [pc, #28]	; (32944 <k_work_busy_get+0x64>)
   32926:	22c2      	movs	r2, #194	; 0xc2
   32928:	f005 fb4e 	bl	37fc8 <assert_print>
   3292c:	21c2      	movs	r1, #194	; 0xc2
   3292e:	e7eb      	b.n	32908 <k_work_busy_get+0x28>
	__asm__ volatile(
   32930:	f385 8811 	msr	BASEPRI, r5
   32934:	f3bf 8f6f 	isb	sy
}
   32938:	4620      	mov	r0, r4
   3293a:	bd38      	pop	{r3, r4, r5, pc}
   3293c:	2000417c 	.word	0x2000417c
   32940:	0003cc84 	.word	0x0003cc84
   32944:	0003c7f8 	.word	0x0003c7f8

00032948 <z_work_submit_to_queue>:
{
   32948:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   3294a:	460c      	mov	r4, r1
{
   3294c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   3294e:	b951      	cbnz	r1, 32966 <z_work_submit_to_queue+0x1e>
   32950:	491c      	ldr	r1, [pc, #112]	; (329c4 <z_work_submit_to_queue+0x7c>)
   32952:	481d      	ldr	r0, [pc, #116]	; (329c8 <z_work_submit_to_queue+0x80>)
   32954:	f44f 72ba 	mov.w	r2, #372	; 0x174
   32958:	f005 fb36 	bl	37fc8 <assert_print>
   3295c:	4819      	ldr	r0, [pc, #100]	; (329c4 <z_work_submit_to_queue+0x7c>)
   3295e:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32962:	f005 fb2a 	bl	37fba <assert_post_action>
	__asm__ volatile(
   32966:	f04f 0340 	mov.w	r3, #64	; 0x40
   3296a:	f3ef 8511 	mrs	r5, BASEPRI
   3296e:	f383 8812 	msr	BASEPRI_MAX, r3
   32972:	f3bf 8f6f 	isb	sy
   32976:	4815      	ldr	r0, [pc, #84]	; (329cc <z_work_submit_to_queue+0x84>)
   32978:	f7ff f8de 	bl	31b38 <z_spin_lock_valid>
   3297c:	b938      	cbnz	r0, 3298e <z_work_submit_to_queue+0x46>
   3297e:	4914      	ldr	r1, [pc, #80]	; (329d0 <z_work_submit_to_queue+0x88>)
   32980:	4811      	ldr	r0, [pc, #68]	; (329c8 <z_work_submit_to_queue+0x80>)
   32982:	2294      	movs	r2, #148	; 0x94
   32984:	f005 fb20 	bl	37fc8 <assert_print>
   32988:	2194      	movs	r1, #148	; 0x94
   3298a:	4811      	ldr	r0, [pc, #68]	; (329d0 <z_work_submit_to_queue+0x88>)
   3298c:	e7e9      	b.n	32962 <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   3298e:	480f      	ldr	r0, [pc, #60]	; (329cc <z_work_submit_to_queue+0x84>)
   32990:	f7ff f8f0 	bl	31b74 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   32994:	4620      	mov	r0, r4
   32996:	a901      	add	r1, sp, #4
   32998:	f7ff fed8 	bl	3274c <submit_to_queue_locked>
   3299c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3299e:	480b      	ldr	r0, [pc, #44]	; (329cc <z_work_submit_to_queue+0x84>)
   329a0:	f7ff f8d8 	bl	31b54 <z_spin_unlock_valid>
   329a4:	b930      	cbnz	r0, 329b4 <z_work_submit_to_queue+0x6c>
   329a6:	490a      	ldr	r1, [pc, #40]	; (329d0 <z_work_submit_to_queue+0x88>)
   329a8:	4807      	ldr	r0, [pc, #28]	; (329c8 <z_work_submit_to_queue+0x80>)
   329aa:	22c2      	movs	r2, #194	; 0xc2
   329ac:	f005 fb0c 	bl	37fc8 <assert_print>
   329b0:	21c2      	movs	r1, #194	; 0xc2
   329b2:	e7ea      	b.n	3298a <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   329b4:	f385 8811 	msr	BASEPRI, r5
   329b8:	f3bf 8f6f 	isb	sy
}
   329bc:	4620      	mov	r0, r4
   329be:	b003      	add	sp, #12
   329c0:	bd30      	pop	{r4, r5, pc}
   329c2:	bf00      	nop
   329c4:	0003effe 	.word	0x0003effe
   329c8:	0003c7f8 	.word	0x0003c7f8
   329cc:	2000417c 	.word	0x2000417c
   329d0:	0003cc84 	.word	0x0003cc84

000329d4 <k_work_submit>:
{
   329d4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   329d6:	4801      	ldr	r0, [pc, #4]	; (329dc <k_work_submit+0x8>)
   329d8:	f008 be10 	b.w	3b5fc <k_work_submit_to_queue>
   329dc:	20003230 	.word	0x20003230

000329e0 <k_work_queue_init>:
{
   329e0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   329e2:	b950      	cbnz	r0, 329fa <k_work_queue_init+0x1a>
   329e4:	4907      	ldr	r1, [pc, #28]	; (32a04 <k_work_queue_init+0x24>)
   329e6:	4808      	ldr	r0, [pc, #32]	; (32a08 <k_work_queue_init+0x28>)
   329e8:	f240 22b9 	movw	r2, #697	; 0x2b9
   329ec:	f005 faec 	bl	37fc8 <assert_print>
   329f0:	4804      	ldr	r0, [pc, #16]	; (32a04 <k_work_queue_init+0x24>)
   329f2:	f240 21b9 	movw	r1, #697	; 0x2b9
   329f6:	f005 fae0 	bl	37fba <assert_post_action>
	*queue = (struct k_work_q) {
   329fa:	22b8      	movs	r2, #184	; 0xb8
   329fc:	2100      	movs	r1, #0
   329fe:	f005 fee7 	bl	387d0 <memset>
}
   32a02:	bd08      	pop	{r3, pc}
   32a04:	0003effe 	.word	0x0003effe
   32a08:	0003c7f8 	.word	0x0003c7f8

00032a0c <k_work_queue_start>:
{
   32a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   32a0e:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   32a10:	4604      	mov	r4, r0
{
   32a12:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   32a14:	b950      	cbnz	r0, 32a2c <k_work_queue_start+0x20>
   32a16:	492a      	ldr	r1, [pc, #168]	; (32ac0 <k_work_queue_start+0xb4>)
   32a18:	482a      	ldr	r0, [pc, #168]	; (32ac4 <k_work_queue_start+0xb8>)
   32a1a:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   32a1e:	f005 fad3 	bl	37fc8 <assert_print>
   32a22:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   32a26:	4826      	ldr	r0, [pc, #152]	; (32ac0 <k_work_queue_start+0xb4>)
   32a28:	f005 fac7 	bl	37fba <assert_post_action>
   32a2c:	b941      	cbnz	r1, 32a40 <k_work_queue_start+0x34>
   32a2e:	4924      	ldr	r1, [pc, #144]	; (32ac0 <k_work_queue_start+0xb4>)
   32a30:	4824      	ldr	r0, [pc, #144]	; (32ac4 <k_work_queue_start+0xb8>)
   32a32:	f240 22c9 	movw	r2, #713	; 0x2c9
   32a36:	f005 fac7 	bl	37fc8 <assert_print>
   32a3a:	f240 21c9 	movw	r1, #713	; 0x2c9
   32a3e:	e7f2      	b.n	32a26 <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   32a40:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   32a44:	f010 0001 	ands.w	r0, r0, #1
   32a48:	d008      	beq.n	32a5c <k_work_queue_start+0x50>
   32a4a:	491d      	ldr	r1, [pc, #116]	; (32ac0 <k_work_queue_start+0xb4>)
   32a4c:	481d      	ldr	r0, [pc, #116]	; (32ac4 <k_work_queue_start+0xb8>)
   32a4e:	f240 22ca 	movw	r2, #714	; 0x2ca
   32a52:	f005 fab9 	bl	37fc8 <assert_print>
   32a56:	f240 21ca 	movw	r1, #714	; 0x2ca
   32a5a:	e7e4      	b.n	32a26 <k_work_queue_start+0x1a>
	list->tail = NULL;
   32a5c:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
   32a60:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	list->tail = (sys_dnode_t *)list;
   32a64:	e9c4 0028 	strd	r0, r0, [r4, #160]	; 0xa0
   32a68:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   32a6c:	e9c4 002a 	strd	r0, r0, [r4, #168]	; 0xa8
	if ((cfg != NULL) && cfg->no_yield) {
   32a70:	b31d      	cbz	r5, 32aba <k_work_queue_start+0xae>
   32a72:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   32a74:	2800      	cmp	r0, #0
   32a76:	f240 1001 	movw	r0, #257	; 0x101
   32a7a:	bf08      	it	eq
   32a7c:	2001      	moveq	r0, #1
	*flagp = flags;
   32a7e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   32a82:	2000      	movs	r0, #0
   32a84:	f04f 36ff 	mov.w	r6, #4294967295
   32a88:	f04f 37ff 	mov.w	r7, #4294967295
   32a8c:	e9cd 3003 	strd	r3, r0, [sp, #12]
   32a90:	e9cd 0001 	strd	r0, r0, [sp, #4]
   32a94:	e9cd 6706 	strd	r6, r7, [sp, #24]
   32a98:	4b0b      	ldr	r3, [pc, #44]	; (32ac8 <k_work_queue_start+0xbc>)
   32a9a:	9400      	str	r4, [sp, #0]
   32a9c:	4620      	mov	r0, r4
   32a9e:	f7ff f97d 	bl	31d9c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   32aa2:	b125      	cbz	r5, 32aae <k_work_queue_start+0xa2>
   32aa4:	6829      	ldr	r1, [r5, #0]
   32aa6:	b111      	cbz	r1, 32aae <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   32aa8:	4620      	mov	r0, r4
   32aaa:	f008 fcf9 	bl	3b4a0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   32aae:	4620      	mov	r0, r4
}
   32ab0:	b009      	add	sp, #36	; 0x24
   32ab2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   32ab6:	f008 bcf8 	b.w	3b4aa <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   32aba:	2001      	movs	r0, #1
   32abc:	e7df      	b.n	32a7e <k_work_queue_start+0x72>
   32abe:	bf00      	nop
   32ac0:	0003effe 	.word	0x0003effe
   32ac4:	0003c7f8 	.word	0x0003c7f8
   32ac8:	00032555 	.word	0x00032555

00032acc <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   32acc:	b538      	push	{r3, r4, r5, lr}
   32ace:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   32ad0:	4604      	mov	r4, r0
   32ad2:	b950      	cbnz	r0, 32aea <k_work_init_delayable+0x1e>
   32ad4:	490e      	ldr	r1, [pc, #56]	; (32b10 <k_work_init_delayable+0x44>)
   32ad6:	480f      	ldr	r0, [pc, #60]	; (32b14 <k_work_init_delayable+0x48>)
   32ad8:	f44f 7250 	mov.w	r2, #832	; 0x340
   32adc:	f005 fa74 	bl	37fc8 <assert_print>
   32ae0:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   32ae4:	480a      	ldr	r0, [pc, #40]	; (32b10 <k_work_init_delayable+0x44>)
   32ae6:	f005 fa68 	bl	37fba <assert_post_action>
   32aea:	b941      	cbnz	r1, 32afe <k_work_init_delayable+0x32>
   32aec:	4908      	ldr	r1, [pc, #32]	; (32b10 <k_work_init_delayable+0x44>)
   32aee:	4809      	ldr	r0, [pc, #36]	; (32b14 <k_work_init_delayable+0x48>)
   32af0:	f240 3241 	movw	r2, #833	; 0x341
   32af4:	f005 fa68 	bl	37fc8 <assert_print>
   32af8:	f240 3141 	movw	r1, #833	; 0x341
   32afc:	e7f2      	b.n	32ae4 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   32afe:	2230      	movs	r2, #48	; 0x30
   32b00:	2100      	movs	r1, #0
   32b02:	f005 fe65 	bl	387d0 <memset>
   32b06:	f44f 7380 	mov.w	r3, #256	; 0x100
   32b0a:	6065      	str	r5, [r4, #4]
   32b0c:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   32b0e:	bd38      	pop	{r3, r4, r5, pc}
   32b10:	0003effe 	.word	0x0003effe
   32b14:	0003c7f8 	.word	0x0003c7f8

00032b18 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   32b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32b1a:	4616      	mov	r6, r2
   32b1c:	9001      	str	r0, [sp, #4]
   32b1e:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   32b20:	460c      	mov	r4, r1
   32b22:	b951      	cbnz	r1, 32b3a <k_work_schedule_for_queue+0x22>
   32b24:	4927      	ldr	r1, [pc, #156]	; (32bc4 <k_work_schedule_for_queue+0xac>)
   32b26:	4828      	ldr	r0, [pc, #160]	; (32bc8 <k_work_schedule_for_queue+0xb0>)
   32b28:	f240 32b7 	movw	r2, #951	; 0x3b7
   32b2c:	f005 fa4c 	bl	37fc8 <assert_print>
   32b30:	4824      	ldr	r0, [pc, #144]	; (32bc4 <k_work_schedule_for_queue+0xac>)
   32b32:	f240 31b7 	movw	r1, #951	; 0x3b7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32b36:	f005 fa40 	bl	37fba <assert_post_action>
	__asm__ volatile(
   32b3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   32b3e:	f3ef 8711 	mrs	r7, BASEPRI
   32b42:	f383 8812 	msr	BASEPRI_MAX, r3
   32b46:	f3bf 8f6f 	isb	sy
   32b4a:	4820      	ldr	r0, [pc, #128]	; (32bcc <k_work_schedule_for_queue+0xb4>)
   32b4c:	f7fe fff4 	bl	31b38 <z_spin_lock_valid>
   32b50:	b938      	cbnz	r0, 32b62 <k_work_schedule_for_queue+0x4a>
   32b52:	491f      	ldr	r1, [pc, #124]	; (32bd0 <k_work_schedule_for_queue+0xb8>)
   32b54:	481c      	ldr	r0, [pc, #112]	; (32bc8 <k_work_schedule_for_queue+0xb0>)
   32b56:	2294      	movs	r2, #148	; 0x94
   32b58:	f005 fa36 	bl	37fc8 <assert_print>
   32b5c:	2194      	movs	r1, #148	; 0x94
   32b5e:	481c      	ldr	r0, [pc, #112]	; (32bd0 <k_work_schedule_for_queue+0xb8>)
   32b60:	e7e9      	b.n	32b36 <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   32b62:	481a      	ldr	r0, [pc, #104]	; (32bcc <k_work_schedule_for_queue+0xb4>)
   32b64:	f7ff f806 	bl	31b74 <z_spin_lock_set_owner>
	return *flagp;
   32b68:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   32b6a:	f013 0f0e 	tst.w	r3, #14
   32b6e:	d120      	bne.n	32bb2 <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   32b70:	ea55 0206 	orrs.w	r2, r5, r6
   32b74:	d10f      	bne.n	32b96 <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   32b76:	4620      	mov	r0, r4
   32b78:	a901      	add	r1, sp, #4
   32b7a:	f7ff fde7 	bl	3274c <submit_to_queue_locked>
   32b7e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32b80:	4812      	ldr	r0, [pc, #72]	; (32bcc <k_work_schedule_for_queue+0xb4>)
   32b82:	f7fe ffe7 	bl	31b54 <z_spin_unlock_valid>
   32b86:	b9b0      	cbnz	r0, 32bb6 <k_work_schedule_for_queue+0x9e>
   32b88:	4911      	ldr	r1, [pc, #68]	; (32bd0 <k_work_schedule_for_queue+0xb8>)
   32b8a:	480f      	ldr	r0, [pc, #60]	; (32bc8 <k_work_schedule_for_queue+0xb0>)
   32b8c:	22c2      	movs	r2, #194	; 0xc2
   32b8e:	f005 fa1b 	bl	37fc8 <assert_print>
   32b92:	21c2      	movs	r1, #194	; 0xc2
   32b94:	e7e3      	b.n	32b5e <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   32b96:	f043 0308 	orr.w	r3, r3, #8
   32b9a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   32b9c:	9b01      	ldr	r3, [sp, #4]
   32b9e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   32ba0:	f104 0010 	add.w	r0, r4, #16
   32ba4:	490b      	ldr	r1, [pc, #44]	; (32bd4 <k_work_schedule_for_queue+0xbc>)
   32ba6:	4632      	mov	r2, r6
   32ba8:	462b      	mov	r3, r5
   32baa:	f001 f9b7 	bl	33f1c <z_add_timeout>
	return ret;
   32bae:	2401      	movs	r4, #1
   32bb0:	e7e6      	b.n	32b80 <k_work_schedule_for_queue+0x68>
	int ret = 0;
   32bb2:	2400      	movs	r4, #0
   32bb4:	e7e4      	b.n	32b80 <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   32bb6:	f387 8811 	msr	BASEPRI, r7
   32bba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   32bbe:	4620      	mov	r0, r4
   32bc0:	b003      	add	sp, #12
   32bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32bc4:	0003effe 	.word	0x0003effe
   32bc8:	0003c7f8 	.word	0x0003c7f8
   32bcc:	2000417c 	.word	0x2000417c
   32bd0:	0003cc84 	.word	0x0003cc84
   32bd4:	00032821 	.word	0x00032821

00032bd8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   32bd8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   32bda:	4801      	ldr	r0, [pc, #4]	; (32be0 <k_work_schedule+0x8>)
   32bdc:	f7ff bf9c 	b.w	32b18 <k_work_schedule_for_queue>
   32be0:	20003230 	.word	0x20003230

00032be4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   32be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32be6:	4616      	mov	r6, r2
   32be8:	9001      	str	r0, [sp, #4]
   32bea:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   32bec:	460c      	mov	r4, r1
   32bee:	b951      	cbnz	r1, 32c06 <k_work_reschedule_for_queue+0x22>
   32bf0:	4926      	ldr	r1, [pc, #152]	; (32c8c <k_work_reschedule_for_queue+0xa8>)
   32bf2:	4827      	ldr	r0, [pc, #156]	; (32c90 <k_work_reschedule_for_queue+0xac>)
   32bf4:	f240 32db 	movw	r2, #987	; 0x3db
   32bf8:	f005 f9e6 	bl	37fc8 <assert_print>
   32bfc:	4823      	ldr	r0, [pc, #140]	; (32c8c <k_work_reschedule_for_queue+0xa8>)
   32bfe:	f240 31db 	movw	r1, #987	; 0x3db
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32c02:	f005 f9da 	bl	37fba <assert_post_action>
	__asm__ volatile(
   32c06:	f04f 0340 	mov.w	r3, #64	; 0x40
   32c0a:	f3ef 8711 	mrs	r7, BASEPRI
   32c0e:	f383 8812 	msr	BASEPRI_MAX, r3
   32c12:	f3bf 8f6f 	isb	sy
   32c16:	481f      	ldr	r0, [pc, #124]	; (32c94 <k_work_reschedule_for_queue+0xb0>)
   32c18:	f7fe ff8e 	bl	31b38 <z_spin_lock_valid>
   32c1c:	b938      	cbnz	r0, 32c2e <k_work_reschedule_for_queue+0x4a>
   32c1e:	491e      	ldr	r1, [pc, #120]	; (32c98 <k_work_reschedule_for_queue+0xb4>)
   32c20:	481b      	ldr	r0, [pc, #108]	; (32c90 <k_work_reschedule_for_queue+0xac>)
   32c22:	2294      	movs	r2, #148	; 0x94
   32c24:	f005 f9d0 	bl	37fc8 <assert_print>
   32c28:	2194      	movs	r1, #148	; 0x94
   32c2a:	481b      	ldr	r0, [pc, #108]	; (32c98 <k_work_reschedule_for_queue+0xb4>)
   32c2c:	e7e9      	b.n	32c02 <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   32c2e:	4819      	ldr	r0, [pc, #100]	; (32c94 <k_work_reschedule_for_queue+0xb0>)
   32c30:	f7fe ffa0 	bl	31b74 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   32c34:	4620      	mov	r0, r4
   32c36:	f008 fc99 	bl	3b56c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   32c3a:	ea55 0306 	orrs.w	r3, r5, r6
   32c3e:	d10f      	bne.n	32c60 <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   32c40:	4620      	mov	r0, r4
   32c42:	a901      	add	r1, sp, #4
   32c44:	f7ff fd82 	bl	3274c <submit_to_queue_locked>
   32c48:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32c4a:	4812      	ldr	r0, [pc, #72]	; (32c94 <k_work_reschedule_for_queue+0xb0>)
   32c4c:	f7fe ff82 	bl	31b54 <z_spin_unlock_valid>
   32c50:	b9a8      	cbnz	r0, 32c7e <k_work_reschedule_for_queue+0x9a>
   32c52:	4911      	ldr	r1, [pc, #68]	; (32c98 <k_work_reschedule_for_queue+0xb4>)
   32c54:	480e      	ldr	r0, [pc, #56]	; (32c90 <k_work_reschedule_for_queue+0xac>)
   32c56:	22c2      	movs	r2, #194	; 0xc2
   32c58:	f005 f9b6 	bl	37fc8 <assert_print>
   32c5c:	21c2      	movs	r1, #194	; 0xc2
   32c5e:	e7e4      	b.n	32c2a <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   32c60:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   32c62:	490e      	ldr	r1, [pc, #56]	; (32c9c <k_work_reschedule_for_queue+0xb8>)
	*flagp |= BIT(bit);
   32c64:	f043 0308 	orr.w	r3, r3, #8
   32c68:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   32c6a:	9b01      	ldr	r3, [sp, #4]
   32c6c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   32c6e:	f104 0010 	add.w	r0, r4, #16
   32c72:	4632      	mov	r2, r6
   32c74:	462b      	mov	r3, r5
   32c76:	f001 f951 	bl	33f1c <z_add_timeout>
	return ret;
   32c7a:	2401      	movs	r4, #1
   32c7c:	e7e5      	b.n	32c4a <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   32c7e:	f387 8811 	msr	BASEPRI, r7
   32c82:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   32c86:	4620      	mov	r0, r4
   32c88:	b003      	add	sp, #12
   32c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32c8c:	0003effe 	.word	0x0003effe
   32c90:	0003c7f8 	.word	0x0003c7f8
   32c94:	2000417c 	.word	0x2000417c
   32c98:	0003cc84 	.word	0x0003cc84
   32c9c:	00032821 	.word	0x00032821

00032ca0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   32ca0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   32ca2:	4801      	ldr	r0, [pc, #4]	; (32ca8 <k_work_reschedule+0x8>)
   32ca4:	f7ff bf9e 	b.w	32be4 <k_work_reschedule_for_queue>
   32ca8:	20003230 	.word	0x20003230

00032cac <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   32cac:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   32cae:	4604      	mov	r4, r0
   32cb0:	b950      	cbnz	r0, 32cc8 <k_work_cancel_delayable+0x1c>
   32cb2:	491d      	ldr	r1, [pc, #116]	; (32d28 <k_work_cancel_delayable+0x7c>)
   32cb4:	481d      	ldr	r0, [pc, #116]	; (32d2c <k_work_cancel_delayable+0x80>)
   32cb6:	f240 32fd 	movw	r2, #1021	; 0x3fd
   32cba:	f005 f985 	bl	37fc8 <assert_print>
   32cbe:	481a      	ldr	r0, [pc, #104]	; (32d28 <k_work_cancel_delayable+0x7c>)
   32cc0:	f240 31fd 	movw	r1, #1021	; 0x3fd
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32cc4:	f005 f979 	bl	37fba <assert_post_action>
	__asm__ volatile(
   32cc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   32ccc:	f3ef 8511 	mrs	r5, BASEPRI
   32cd0:	f383 8812 	msr	BASEPRI_MAX, r3
   32cd4:	f3bf 8f6f 	isb	sy
   32cd8:	4815      	ldr	r0, [pc, #84]	; (32d30 <k_work_cancel_delayable+0x84>)
   32cda:	f7fe ff2d 	bl	31b38 <z_spin_lock_valid>
   32cde:	b938      	cbnz	r0, 32cf0 <k_work_cancel_delayable+0x44>
   32ce0:	4914      	ldr	r1, [pc, #80]	; (32d34 <k_work_cancel_delayable+0x88>)
   32ce2:	4812      	ldr	r0, [pc, #72]	; (32d2c <k_work_cancel_delayable+0x80>)
   32ce4:	2294      	movs	r2, #148	; 0x94
   32ce6:	f005 f96f 	bl	37fc8 <assert_print>
   32cea:	2194      	movs	r1, #148	; 0x94
   32cec:	4811      	ldr	r0, [pc, #68]	; (32d34 <k_work_cancel_delayable+0x88>)
   32cee:	e7e9      	b.n	32cc4 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   32cf0:	480f      	ldr	r0, [pc, #60]	; (32d30 <k_work_cancel_delayable+0x84>)
   32cf2:	f7fe ff3f 	bl	31b74 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   32cf6:	4620      	mov	r0, r4
   32cf8:	f008 fc38 	bl	3b56c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   32cfc:	4620      	mov	r0, r4
   32cfe:	f008 fc4a 	bl	3b596 <cancel_async_locked>
   32d02:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32d04:	480a      	ldr	r0, [pc, #40]	; (32d30 <k_work_cancel_delayable+0x84>)
   32d06:	f7fe ff25 	bl	31b54 <z_spin_unlock_valid>
   32d0a:	b930      	cbnz	r0, 32d1a <k_work_cancel_delayable+0x6e>
   32d0c:	4909      	ldr	r1, [pc, #36]	; (32d34 <k_work_cancel_delayable+0x88>)
   32d0e:	4807      	ldr	r0, [pc, #28]	; (32d2c <k_work_cancel_delayable+0x80>)
   32d10:	22c2      	movs	r2, #194	; 0xc2
   32d12:	f005 f959 	bl	37fc8 <assert_print>
   32d16:	21c2      	movs	r1, #194	; 0xc2
   32d18:	e7e8      	b.n	32cec <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   32d1a:	f385 8811 	msr	BASEPRI, r5
   32d1e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   32d22:	4620      	mov	r0, r4
   32d24:	bd38      	pop	{r3, r4, r5, pc}
   32d26:	bf00      	nop
   32d28:	0003effe 	.word	0x0003effe
   32d2c:	0003c7f8 	.word	0x0003c7f8
   32d30:	2000417c 	.word	0x2000417c
   32d34:	0003cc84 	.word	0x0003cc84

00032d38 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   32d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32d3c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   32d3e:	4605      	mov	r5, r0
   32d40:	b950      	cbnz	r0, 32d58 <k_work_cancel_delayable_sync+0x20>
   32d42:	4933      	ldr	r1, [pc, #204]	; (32e10 <k_work_cancel_delayable_sync+0xd8>)
   32d44:	4833      	ldr	r0, [pc, #204]	; (32e14 <k_work_cancel_delayable_sync+0xdc>)
   32d46:	f240 420e 	movw	r2, #1038	; 0x40e
   32d4a:	f005 f93d 	bl	37fc8 <assert_print>
   32d4e:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   32d52:	482f      	ldr	r0, [pc, #188]	; (32e10 <k_work_cancel_delayable_sync+0xd8>)
   32d54:	f005 f931 	bl	37fba <assert_post_action>
   32d58:	b941      	cbnz	r1, 32d6c <k_work_cancel_delayable_sync+0x34>
   32d5a:	492d      	ldr	r1, [pc, #180]	; (32e10 <k_work_cancel_delayable_sync+0xd8>)
   32d5c:	482d      	ldr	r0, [pc, #180]	; (32e14 <k_work_cancel_delayable_sync+0xdc>)
   32d5e:	f240 420f 	movw	r2, #1039	; 0x40f
   32d62:	f005 f931 	bl	37fc8 <assert_print>
   32d66:	f240 410f 	movw	r1, #1039	; 0x40f
   32d6a:	e7f2      	b.n	32d52 <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   32d6c:	f008 fb92 	bl	3b494 <k_is_in_isr>
   32d70:	4604      	mov	r4, r0
   32d72:	b140      	cbz	r0, 32d86 <k_work_cancel_delayable_sync+0x4e>
   32d74:	4926      	ldr	r1, [pc, #152]	; (32e10 <k_work_cancel_delayable_sync+0xd8>)
   32d76:	4827      	ldr	r0, [pc, #156]	; (32e14 <k_work_cancel_delayable_sync+0xdc>)
   32d78:	f44f 6282 	mov.w	r2, #1040	; 0x410
   32d7c:	f005 f924 	bl	37fc8 <assert_print>
   32d80:	f44f 6182 	mov.w	r1, #1040	; 0x410
   32d84:	e7e5      	b.n	32d52 <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   32d86:	f04f 0340 	mov.w	r3, #64	; 0x40
   32d8a:	f3ef 8811 	mrs	r8, BASEPRI
   32d8e:	f383 8812 	msr	BASEPRI_MAX, r3
   32d92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32d96:	4820      	ldr	r0, [pc, #128]	; (32e18 <k_work_cancel_delayable_sync+0xe0>)
   32d98:	f7fe fece 	bl	31b38 <z_spin_lock_valid>
   32d9c:	b938      	cbnz	r0, 32dae <k_work_cancel_delayable_sync+0x76>
   32d9e:	491f      	ldr	r1, [pc, #124]	; (32e1c <k_work_cancel_delayable_sync+0xe4>)
   32da0:	481c      	ldr	r0, [pc, #112]	; (32e14 <k_work_cancel_delayable_sync+0xdc>)
   32da2:	2294      	movs	r2, #148	; 0x94
   32da4:	f005 f910 	bl	37fc8 <assert_print>
   32da8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32daa:	481c      	ldr	r0, [pc, #112]	; (32e1c <k_work_cancel_delayable_sync+0xe4>)
   32dac:	e7d2      	b.n	32d54 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   32dae:	481a      	ldr	r0, [pc, #104]	; (32e18 <k_work_cancel_delayable_sync+0xe0>)
   32db0:	f7fe fee0 	bl	31b74 <z_spin_lock_set_owner>
	return *flagp;
   32db4:	68eb      	ldr	r3, [r5, #12]
   32db6:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   32dba:	2b00      	cmp	r3, #0
   32dbc:	bf14      	ite	ne
   32dbe:	2701      	movne	r7, #1
   32dc0:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   32dc2:	d00a      	beq.n	32dda <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   32dc4:	4628      	mov	r0, r5
   32dc6:	f008 fbd1 	bl	3b56c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   32dca:	4628      	mov	r0, r5
   32dcc:	f008 fbe3 	bl	3b596 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   32dd0:	4631      	mov	r1, r6
   32dd2:	4628      	mov	r0, r5
   32dd4:	f7ff fc9c 	bl	32710 <cancel_sync_locked>
   32dd8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32dda:	480f      	ldr	r0, [pc, #60]	; (32e18 <k_work_cancel_delayable_sync+0xe0>)
   32ddc:	f7fe feba 	bl	31b54 <z_spin_unlock_valid>
   32de0:	b930      	cbnz	r0, 32df0 <k_work_cancel_delayable_sync+0xb8>
   32de2:	490e      	ldr	r1, [pc, #56]	; (32e1c <k_work_cancel_delayable_sync+0xe4>)
   32de4:	480b      	ldr	r0, [pc, #44]	; (32e14 <k_work_cancel_delayable_sync+0xdc>)
   32de6:	22c2      	movs	r2, #194	; 0xc2
   32de8:	f005 f8ee 	bl	37fc8 <assert_print>
   32dec:	21c2      	movs	r1, #194	; 0xc2
   32dee:	e7dc      	b.n	32daa <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   32df0:	f388 8811 	msr	BASEPRI, r8
   32df4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   32df8:	b13c      	cbz	r4, 32e0a <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   32dfa:	f04f 32ff 	mov.w	r2, #4294967295
   32dfe:	f04f 33ff 	mov.w	r3, #4294967295
   32e02:	f106 0008 	add.w	r0, r6, #8
   32e06:	f7ff faf3 	bl	323f0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   32e0a:	4638      	mov	r0, r7
   32e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32e10:	0003effe 	.word	0x0003effe
   32e14:	0003c7f8 	.word	0x0003c7f8
   32e18:	2000417c 	.word	0x2000417c
   32e1c:	0003cc84 	.word	0x0003cc84

00032e20 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   32e20:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   32e22:	4d07      	ldr	r5, [pc, #28]	; (32e40 <z_reset_time_slice+0x20>)
   32e24:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   32e26:	b154      	cbz	r4, 32e3e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   32e28:	f7fb fb0c 	bl	2e444 <sys_clock_elapsed>
   32e2c:	4b05      	ldr	r3, [pc, #20]	; (32e44 <z_reset_time_slice+0x24>)
   32e2e:	4404      	add	r4, r0
   32e30:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   32e32:	6828      	ldr	r0, [r5, #0]
   32e34:	2100      	movs	r1, #0
	}
}
   32e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   32e3a:	f001 b989 	b.w	34150 <z_set_timeout_expiry>
}
   32e3e:	bd38      	pop	{r3, r4, r5, pc}
   32e40:	20004188 	.word	0x20004188
   32e44:	2000413c 	.word	0x2000413c

00032e48 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   32e48:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   32e4a:	4d12      	ldr	r5, [pc, #72]	; (32e94 <update_cache+0x4c>)
   32e4c:	462b      	mov	r3, r5
   32e4e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32e52:	429c      	cmp	r4, r3
   32e54:	d000      	beq.n	32e58 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   32e56:	b904      	cbnz	r4, 32e5a <update_cache+0x12>
   32e58:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   32e5a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   32e5c:	b988      	cbnz	r0, 32e82 <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   32e5e:	b943      	cbnz	r3, 32e72 <update_cache+0x2a>
   32e60:	490d      	ldr	r1, [pc, #52]	; (32e98 <update_cache+0x50>)
   32e62:	480e      	ldr	r0, [pc, #56]	; (32e9c <update_cache+0x54>)
   32e64:	2289      	movs	r2, #137	; 0x89
   32e66:	f005 f8af 	bl	37fc8 <assert_print>
   32e6a:	480b      	ldr	r0, [pc, #44]	; (32e98 <update_cache+0x50>)
   32e6c:	2189      	movs	r1, #137	; 0x89
   32e6e:	f005 f8a4 	bl	37fba <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   32e72:	7b5a      	ldrb	r2, [r3, #13]
   32e74:	06d2      	lsls	r2, r2, #27
   32e76:	d104      	bne.n	32e82 <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   32e78:	69a2      	ldr	r2, [r4, #24]
   32e7a:	b912      	cbnz	r2, 32e82 <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   32e7c:	89da      	ldrh	r2, [r3, #14]
   32e7e:	2a7f      	cmp	r2, #127	; 0x7f
   32e80:	d805      	bhi.n	32e8e <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   32e82:	429c      	cmp	r4, r3
   32e84:	d002      	beq.n	32e8c <update_cache+0x44>
			z_reset_time_slice(thread);
   32e86:	4620      	mov	r0, r4
   32e88:	f7ff ffca 	bl	32e20 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   32e8c:	4623      	mov	r3, r4
   32e8e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   32e90:	bd38      	pop	{r3, r4, r5, pc}
   32e92:	bf00      	nop
   32e94:	2000413c 	.word	0x2000413c
   32e98:	0003f01f 	.word	0x0003f01f
   32e9c:	0003c7f8 	.word	0x0003c7f8

00032ea0 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   32ea0:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   32ea2:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   32ea6:	7b42      	ldrb	r2, [r0, #13]
   32ea8:	2b00      	cmp	r3, #0
   32eaa:	db37      	blt.n	32f1c <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   32eac:	06d3      	lsls	r3, r2, #27
   32eae:	d135      	bne.n	32f1c <ready_thread+0x7c>
	return node->next != NULL;
   32eb0:	6983      	ldr	r3, [r0, #24]
   32eb2:	2b00      	cmp	r3, #0
   32eb4:	d132      	bne.n	32f1c <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   32eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   32eba:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   32ebc:	4a18      	ldr	r2, [pc, #96]	; (32f20 <ready_thread+0x80>)
   32ebe:	4290      	cmp	r0, r2
   32ec0:	d108      	bne.n	32ed4 <ready_thread+0x34>
   32ec2:	4918      	ldr	r1, [pc, #96]	; (32f24 <ready_thread+0x84>)
   32ec4:	4818      	ldr	r0, [pc, #96]	; (32f28 <ready_thread+0x88>)
   32ec6:	22ba      	movs	r2, #186	; 0xba
   32ec8:	f005 f87e 	bl	37fc8 <assert_print>
   32ecc:	4815      	ldr	r0, [pc, #84]	; (32f24 <ready_thread+0x84>)
   32ece:	21ba      	movs	r1, #186	; 0xba
   32ed0:	f005 f873 	bl	37fba <assert_post_action>
	return list->head == list;
   32ed4:	4915      	ldr	r1, [pc, #84]	; (32f2c <ready_thread+0x8c>)
   32ed6:	460a      	mov	r2, r1
   32ed8:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   32edc:	4294      	cmp	r4, r2
   32ede:	bf18      	it	ne
   32ee0:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   32ee2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   32ee4:	b923      	cbnz	r3, 32ef0 <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   32ee6:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   32eea:	6020      	str	r0, [r4, #0]
	list->tail = node;
   32eec:	6248      	str	r0, [r1, #36]	; 0x24
}
   32eee:	e00c      	b.n	32f0a <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   32ef0:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   32ef4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   32ef8:	42b5      	cmp	r5, r6
   32efa:	d00b      	beq.n	32f14 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   32efc:	42ae      	cmp	r6, r5
   32efe:	dd09      	ble.n	32f14 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   32f00:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   32f02:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   32f06:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   32f08:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   32f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   32f0e:	2000      	movs	r0, #0
   32f10:	f7ff bf9a 	b.w	32e48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   32f14:	42a3      	cmp	r3, r4
   32f16:	d0e6      	beq.n	32ee6 <ready_thread+0x46>
   32f18:	681b      	ldr	r3, [r3, #0]
   32f1a:	e7e3      	b.n	32ee4 <ready_thread+0x44>
}
   32f1c:	bd70      	pop	{r4, r5, r6, pc}
   32f1e:	bf00      	nop
   32f20:	20003100 	.word	0x20003100
   32f24:	0003f01f 	.word	0x0003f01f
   32f28:	0003c7f8 	.word	0x0003c7f8
   32f2c:	2000413c 	.word	0x2000413c

00032f30 <k_sched_time_slice_set>:
{
   32f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32f32:	4604      	mov	r4, r0
   32f34:	460d      	mov	r5, r1
	__asm__ volatile(
   32f36:	f04f 0340 	mov.w	r3, #64	; 0x40
   32f3a:	f3ef 8711 	mrs	r7, BASEPRI
   32f3e:	f383 8812 	msr	BASEPRI_MAX, r3
   32f42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32f46:	481d      	ldr	r0, [pc, #116]	; (32fbc <k_sched_time_slice_set+0x8c>)
   32f48:	f7fe fdf6 	bl	31b38 <z_spin_lock_valid>
   32f4c:	b940      	cbnz	r0, 32f60 <k_sched_time_slice_set+0x30>
   32f4e:	491c      	ldr	r1, [pc, #112]	; (32fc0 <k_sched_time_slice_set+0x90>)
   32f50:	481c      	ldr	r0, [pc, #112]	; (32fc4 <k_sched_time_slice_set+0x94>)
   32f52:	2294      	movs	r2, #148	; 0x94
   32f54:	f005 f838 	bl	37fc8 <assert_print>
   32f58:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32f5a:	4819      	ldr	r0, [pc, #100]	; (32fc0 <k_sched_time_slice_set+0x90>)
   32f5c:	f005 f82d 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   32f60:	4816      	ldr	r0, [pc, #88]	; (32fbc <k_sched_time_slice_set+0x8c>)
			return (uint32_t)((t * to_hz + off) / from_hz);
   32f62:	2600      	movs	r6, #0
   32f64:	f7fe fe06 	bl	31b74 <z_spin_lock_set_owner>
   32f68:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   32f6c:	f240 30e7 	movw	r0, #999	; 0x3e7
   32f70:	4631      	mov	r1, r6
   32f72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   32f76:	2300      	movs	r3, #0
   32f78:	fbe4 010c 	umlal	r0, r1, r4, ip
   32f7c:	f7d9 f9c0 	bl	c300 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   32f80:	42b4      	cmp	r4, r6
   32f82:	dd02      	ble.n	32f8a <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   32f84:	2802      	cmp	r0, #2
   32f86:	bfb8      	it	lt
   32f88:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   32f8a:	4a0f      	ldr	r2, [pc, #60]	; (32fc8 <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   32f8c:	4b0f      	ldr	r3, [pc, #60]	; (32fcc <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   32f8e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   32f90:	4a0f      	ldr	r2, [pc, #60]	; (32fd0 <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   32f92:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   32f94:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   32f96:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   32f98:	f7ff ff42 	bl	32e20 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32f9c:	4807      	ldr	r0, [pc, #28]	; (32fbc <k_sched_time_slice_set+0x8c>)
   32f9e:	f7fe fdd9 	bl	31b54 <z_spin_unlock_valid>
   32fa2:	b930      	cbnz	r0, 32fb2 <k_sched_time_slice_set+0x82>
   32fa4:	4906      	ldr	r1, [pc, #24]	; (32fc0 <k_sched_time_slice_set+0x90>)
   32fa6:	4807      	ldr	r0, [pc, #28]	; (32fc4 <k_sched_time_slice_set+0x94>)
   32fa8:	22c2      	movs	r2, #194	; 0xc2
   32faa:	f005 f80d 	bl	37fc8 <assert_print>
   32fae:	21c2      	movs	r1, #194	; 0xc2
   32fb0:	e7d3      	b.n	32f5a <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   32fb2:	f387 8811 	msr	BASEPRI, r7
   32fb6:	f3bf 8f6f 	isb	sy
}
   32fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32fbc:	2000418c 	.word	0x2000418c
   32fc0:	0003cc84 	.word	0x0003cc84
   32fc4:	0003c7f8 	.word	0x0003c7f8
   32fc8:	20004188 	.word	0x20004188
   32fcc:	2000413c 	.word	0x2000413c
   32fd0:	20004184 	.word	0x20004184

00032fd4 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   32fd4:	b538      	push	{r3, r4, r5, lr}
   32fd6:	4604      	mov	r4, r0
	__asm__ volatile(
   32fd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   32fdc:	f3ef 8511 	mrs	r5, BASEPRI
   32fe0:	f383 8812 	msr	BASEPRI_MAX, r3
   32fe4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32fe8:	4811      	ldr	r0, [pc, #68]	; (33030 <z_ready_thread+0x5c>)
   32fea:	f7fe fda5 	bl	31b38 <z_spin_lock_valid>
   32fee:	b940      	cbnz	r0, 33002 <z_ready_thread+0x2e>
   32ff0:	4910      	ldr	r1, [pc, #64]	; (33034 <z_ready_thread+0x60>)
   32ff2:	4811      	ldr	r0, [pc, #68]	; (33038 <z_ready_thread+0x64>)
   32ff4:	2294      	movs	r2, #148	; 0x94
   32ff6:	f004 ffe7 	bl	37fc8 <assert_print>
   32ffa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32ffc:	480d      	ldr	r0, [pc, #52]	; (33034 <z_ready_thread+0x60>)
   32ffe:	f004 ffdc 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   33002:	480b      	ldr	r0, [pc, #44]	; (33030 <z_ready_thread+0x5c>)
   33004:	f7fe fdb6 	bl	31b74 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   33008:	4620      	mov	r0, r4
   3300a:	f7ff ff49 	bl	32ea0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3300e:	4808      	ldr	r0, [pc, #32]	; (33030 <z_ready_thread+0x5c>)
   33010:	f7fe fda0 	bl	31b54 <z_spin_unlock_valid>
   33014:	b930      	cbnz	r0, 33024 <z_ready_thread+0x50>
   33016:	4907      	ldr	r1, [pc, #28]	; (33034 <z_ready_thread+0x60>)
   33018:	4807      	ldr	r0, [pc, #28]	; (33038 <z_ready_thread+0x64>)
   3301a:	22c2      	movs	r2, #194	; 0xc2
   3301c:	f004 ffd4 	bl	37fc8 <assert_print>
   33020:	21c2      	movs	r1, #194	; 0xc2
   33022:	e7eb      	b.n	32ffc <z_ready_thread+0x28>
	__asm__ volatile(
   33024:	f385 8811 	msr	BASEPRI, r5
   33028:	f3bf 8f6f 	isb	sy
		}
	}
}
   3302c:	bd38      	pop	{r3, r4, r5, pc}
   3302e:	bf00      	nop
   33030:	2000418c 	.word	0x2000418c
   33034:	0003cc84 	.word	0x0003cc84
   33038:	0003c7f8 	.word	0x0003c7f8

0003303c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   3303c:	b538      	push	{r3, r4, r5, lr}
   3303e:	4604      	mov	r4, r0
	__asm__ volatile(
   33040:	f04f 0340 	mov.w	r3, #64	; 0x40
   33044:	f3ef 8511 	mrs	r5, BASEPRI
   33048:	f383 8812 	msr	BASEPRI_MAX, r3
   3304c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33050:	4811      	ldr	r0, [pc, #68]	; (33098 <z_unpend_thread_no_timeout+0x5c>)
   33052:	f7fe fd71 	bl	31b38 <z_spin_lock_valid>
   33056:	b940      	cbnz	r0, 3306a <z_unpend_thread_no_timeout+0x2e>
   33058:	4910      	ldr	r1, [pc, #64]	; (3309c <z_unpend_thread_no_timeout+0x60>)
   3305a:	4811      	ldr	r0, [pc, #68]	; (330a0 <z_unpend_thread_no_timeout+0x64>)
   3305c:	2294      	movs	r2, #148	; 0x94
   3305e:	f004 ffb3 	bl	37fc8 <assert_print>
   33062:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33064:	480d      	ldr	r0, [pc, #52]	; (3309c <z_unpend_thread_no_timeout+0x60>)
   33066:	f004 ffa8 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3306a:	480b      	ldr	r0, [pc, #44]	; (33098 <z_unpend_thread_no_timeout+0x5c>)
   3306c:	f7fe fd82 	bl	31b74 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   33070:	4620      	mov	r0, r4
   33072:	f000 fb97 	bl	337a4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33076:	4808      	ldr	r0, [pc, #32]	; (33098 <z_unpend_thread_no_timeout+0x5c>)
   33078:	f7fe fd6c 	bl	31b54 <z_spin_unlock_valid>
   3307c:	b930      	cbnz	r0, 3308c <z_unpend_thread_no_timeout+0x50>
   3307e:	4907      	ldr	r1, [pc, #28]	; (3309c <z_unpend_thread_no_timeout+0x60>)
   33080:	4807      	ldr	r0, [pc, #28]	; (330a0 <z_unpend_thread_no_timeout+0x64>)
   33082:	22c2      	movs	r2, #194	; 0xc2
   33084:	f004 ffa0 	bl	37fc8 <assert_print>
   33088:	21c2      	movs	r1, #194	; 0xc2
   3308a:	e7eb      	b.n	33064 <z_unpend_thread_no_timeout+0x28>
	__asm__ volatile(
   3308c:	f385 8811 	msr	BASEPRI, r5
   33090:	f3bf 8f6f 	isb	sy
	}
}
   33094:	bd38      	pop	{r3, r4, r5, pc}
   33096:	bf00      	nop
   33098:	2000418c 	.word	0x2000418c
   3309c:	0003cc84 	.word	0x0003cc84
   330a0:	0003c7f8 	.word	0x0003c7f8

000330a4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   330a4:	b538      	push	{r3, r4, r5, lr}
   330a6:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   330a8:	460c      	mov	r4, r1
   330aa:	b9c1      	cbnz	r1, 330de <z_reschedule+0x3a>
   330ac:	f3ef 8505 	mrs	r5, IPSR
   330b0:	b9ad      	cbnz	r5, 330de <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   330b2:	4a13      	ldr	r2, [pc, #76]	; (33100 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   330b4:	69d1      	ldr	r1, [r2, #28]
   330b6:	6892      	ldr	r2, [r2, #8]
   330b8:	4291      	cmp	r1, r2
   330ba:	d010      	beq.n	330de <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   330bc:	f7fe fd4a 	bl	31b54 <z_spin_unlock_valid>
   330c0:	b940      	cbnz	r0, 330d4 <z_reschedule+0x30>
   330c2:	4910      	ldr	r1, [pc, #64]	; (33104 <z_reschedule+0x60>)
   330c4:	4810      	ldr	r0, [pc, #64]	; (33108 <z_reschedule+0x64>)
   330c6:	22e1      	movs	r2, #225	; 0xe1
   330c8:	f004 ff7e 	bl	37fc8 <assert_print>
   330cc:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   330ce:	480d      	ldr	r0, [pc, #52]	; (33104 <z_reschedule+0x60>)
   330d0:	f004 ff73 	bl	37fba <assert_post_action>
	ret = arch_swap(key);
   330d4:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   330d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   330da:	f7f2 ba0d 	b.w	254f8 <arch_swap>
   330de:	4618      	mov	r0, r3
   330e0:	f7fe fd38 	bl	31b54 <z_spin_unlock_valid>
   330e4:	b930      	cbnz	r0, 330f4 <z_reschedule+0x50>
   330e6:	4907      	ldr	r1, [pc, #28]	; (33104 <z_reschedule+0x60>)
   330e8:	4807      	ldr	r0, [pc, #28]	; (33108 <z_reschedule+0x64>)
   330ea:	22c2      	movs	r2, #194	; 0xc2
   330ec:	f004 ff6c 	bl	37fc8 <assert_print>
   330f0:	21c2      	movs	r1, #194	; 0xc2
   330f2:	e7ec      	b.n	330ce <z_reschedule+0x2a>
   330f4:	f384 8811 	msr	BASEPRI, r4
   330f8:	f3bf 8f6f 	isb	sy
   330fc:	bd38      	pop	{r3, r4, r5, pc}
   330fe:	bf00      	nop
   33100:	2000413c 	.word	0x2000413c
   33104:	0003cc84 	.word	0x0003cc84
   33108:	0003c7f8 	.word	0x0003c7f8

0003310c <z_sched_start>:
{
   3310c:	b538      	push	{r3, r4, r5, lr}
   3310e:	4604      	mov	r4, r0
	__asm__ volatile(
   33110:	f04f 0340 	mov.w	r3, #64	; 0x40
   33114:	f3ef 8511 	mrs	r5, BASEPRI
   33118:	f383 8812 	msr	BASEPRI_MAX, r3
   3311c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33120:	4817      	ldr	r0, [pc, #92]	; (33180 <z_sched_start+0x74>)
   33122:	f7fe fd09 	bl	31b38 <z_spin_lock_valid>
   33126:	b940      	cbnz	r0, 3313a <z_sched_start+0x2e>
   33128:	4916      	ldr	r1, [pc, #88]	; (33184 <z_sched_start+0x78>)
   3312a:	4817      	ldr	r0, [pc, #92]	; (33188 <z_sched_start+0x7c>)
   3312c:	2294      	movs	r2, #148	; 0x94
   3312e:	f004 ff4b 	bl	37fc8 <assert_print>
   33132:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33134:	4813      	ldr	r0, [pc, #76]	; (33184 <z_sched_start+0x78>)
   33136:	f004 ff40 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3313a:	4811      	ldr	r0, [pc, #68]	; (33180 <z_sched_start+0x74>)
   3313c:	f7fe fd1a 	bl	31b74 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   33140:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   33142:	075a      	lsls	r2, r3, #29
   33144:	d40f      	bmi.n	33166 <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33146:	480e      	ldr	r0, [pc, #56]	; (33180 <z_sched_start+0x74>)
   33148:	f7fe fd04 	bl	31b54 <z_spin_unlock_valid>
   3314c:	b930      	cbnz	r0, 3315c <z_sched_start+0x50>
   3314e:	490d      	ldr	r1, [pc, #52]	; (33184 <z_sched_start+0x78>)
   33150:	480d      	ldr	r0, [pc, #52]	; (33188 <z_sched_start+0x7c>)
   33152:	22c2      	movs	r2, #194	; 0xc2
   33154:	f004 ff38 	bl	37fc8 <assert_print>
   33158:	21c2      	movs	r1, #194	; 0xc2
   3315a:	e7eb      	b.n	33134 <z_sched_start+0x28>
	__asm__ volatile(
   3315c:	f385 8811 	msr	BASEPRI, r5
   33160:	f3bf 8f6f 	isb	sy
}
   33164:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   33166:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3316a:	4620      	mov	r0, r4
   3316c:	7363      	strb	r3, [r4, #13]
   3316e:	f7ff fe97 	bl	32ea0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   33172:	4629      	mov	r1, r5
   33174:	4802      	ldr	r0, [pc, #8]	; (33180 <z_sched_start+0x74>)
}
   33176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3317a:	f7ff bf93 	b.w	330a4 <z_reschedule>
   3317e:	bf00      	nop
   33180:	2000418c 	.word	0x2000418c
   33184:	0003cc84 	.word	0x0003cc84
   33188:	0003c7f8 	.word	0x0003c7f8

0003318c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   3318c:	b510      	push	{r4, lr}
	__asm__ volatile(
   3318e:	f04f 0340 	mov.w	r3, #64	; 0x40
   33192:	f3ef 8411 	mrs	r4, BASEPRI
   33196:	f383 8812 	msr	BASEPRI_MAX, r3
   3319a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3319e:	481c      	ldr	r0, [pc, #112]	; (33210 <k_sched_lock+0x84>)
   331a0:	f7fe fcca 	bl	31b38 <z_spin_lock_valid>
   331a4:	b938      	cbnz	r0, 331b6 <k_sched_lock+0x2a>
   331a6:	491b      	ldr	r1, [pc, #108]	; (33214 <k_sched_lock+0x88>)
   331a8:	481b      	ldr	r0, [pc, #108]	; (33218 <k_sched_lock+0x8c>)
   331aa:	2294      	movs	r2, #148	; 0x94
   331ac:	f004 ff0c 	bl	37fc8 <assert_print>
   331b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   331b2:	4818      	ldr	r0, [pc, #96]	; (33214 <k_sched_lock+0x88>)
   331b4:	e00c      	b.n	331d0 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   331b6:	4816      	ldr	r0, [pc, #88]	; (33210 <k_sched_lock+0x84>)
   331b8:	f7fe fcdc 	bl	31b74 <z_spin_lock_set_owner>
   331bc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   331c0:	b143      	cbz	r3, 331d4 <k_sched_lock+0x48>
   331c2:	4916      	ldr	r1, [pc, #88]	; (3321c <k_sched_lock+0x90>)
   331c4:	4814      	ldr	r0, [pc, #80]	; (33218 <k_sched_lock+0x8c>)
   331c6:	22fd      	movs	r2, #253	; 0xfd
   331c8:	f004 fefe 	bl	37fc8 <assert_print>
   331cc:	21fd      	movs	r1, #253	; 0xfd
   331ce:	4813      	ldr	r0, [pc, #76]	; (3321c <k_sched_lock+0x90>)
   331d0:	f004 fef3 	bl	37fba <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   331d4:	4b12      	ldr	r3, [pc, #72]	; (33220 <k_sched_lock+0x94>)
   331d6:	689a      	ldr	r2, [r3, #8]
   331d8:	7bd3      	ldrb	r3, [r2, #15]
   331da:	2b01      	cmp	r3, #1
   331dc:	d106      	bne.n	331ec <k_sched_lock+0x60>
   331de:	490f      	ldr	r1, [pc, #60]	; (3321c <k_sched_lock+0x90>)
   331e0:	480d      	ldr	r0, [pc, #52]	; (33218 <k_sched_lock+0x8c>)
   331e2:	22fe      	movs	r2, #254	; 0xfe
   331e4:	f004 fef0 	bl	37fc8 <assert_print>
   331e8:	21fe      	movs	r1, #254	; 0xfe
   331ea:	e7f0      	b.n	331ce <k_sched_lock+0x42>
	--_current->base.sched_locked;
   331ec:	3b01      	subs	r3, #1
   331ee:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   331f0:	4807      	ldr	r0, [pc, #28]	; (33210 <k_sched_lock+0x84>)
   331f2:	f7fe fcaf 	bl	31b54 <z_spin_unlock_valid>
   331f6:	b930      	cbnz	r0, 33206 <k_sched_lock+0x7a>
   331f8:	4906      	ldr	r1, [pc, #24]	; (33214 <k_sched_lock+0x88>)
   331fa:	4807      	ldr	r0, [pc, #28]	; (33218 <k_sched_lock+0x8c>)
   331fc:	22c2      	movs	r2, #194	; 0xc2
   331fe:	f004 fee3 	bl	37fc8 <assert_print>
   33202:	21c2      	movs	r1, #194	; 0xc2
   33204:	e7d5      	b.n	331b2 <k_sched_lock+0x26>
	__asm__ volatile(
   33206:	f384 8811 	msr	BASEPRI, r4
   3320a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   3320e:	bd10      	pop	{r4, pc}
   33210:	2000418c 	.word	0x2000418c
   33214:	0003cc84 	.word	0x0003cc84
   33218:	0003c7f8 	.word	0x0003c7f8
   3321c:	0003f041 	.word	0x0003f041
   33220:	2000413c 	.word	0x2000413c

00033224 <k_sched_unlock>:

void k_sched_unlock(void)
{
   33224:	b510      	push	{r4, lr}
	__asm__ volatile(
   33226:	f04f 0340 	mov.w	r3, #64	; 0x40
   3322a:	f3ef 8411 	mrs	r4, BASEPRI
   3322e:	f383 8812 	msr	BASEPRI_MAX, r3
   33232:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33236:	4820      	ldr	r0, [pc, #128]	; (332b8 <k_sched_unlock+0x94>)
   33238:	f7fe fc7e 	bl	31b38 <z_spin_lock_valid>
   3323c:	b938      	cbnz	r0, 3324e <k_sched_unlock+0x2a>
   3323e:	491f      	ldr	r1, [pc, #124]	; (332bc <k_sched_unlock+0x98>)
   33240:	481f      	ldr	r0, [pc, #124]	; (332c0 <k_sched_unlock+0x9c>)
   33242:	2294      	movs	r2, #148	; 0x94
   33244:	f004 fec0 	bl	37fc8 <assert_print>
   33248:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3324a:	481c      	ldr	r0, [pc, #112]	; (332bc <k_sched_unlock+0x98>)
   3324c:	e00f      	b.n	3326e <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   3324e:	481a      	ldr	r0, [pc, #104]	; (332b8 <k_sched_unlock+0x94>)
   33250:	f7fe fc90 	bl	31b74 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   33254:	4b1b      	ldr	r3, [pc, #108]	; (332c4 <k_sched_unlock+0xa0>)
   33256:	689a      	ldr	r2, [r3, #8]
   33258:	7bd3      	ldrb	r3, [r2, #15]
   3325a:	b953      	cbnz	r3, 33272 <k_sched_unlock+0x4e>
   3325c:	491a      	ldr	r1, [pc, #104]	; (332c8 <k_sched_unlock+0xa4>)
   3325e:	4818      	ldr	r0, [pc, #96]	; (332c0 <k_sched_unlock+0x9c>)
   33260:	f240 32e7 	movw	r2, #999	; 0x3e7
   33264:	f004 feb0 	bl	37fc8 <assert_print>
   33268:	f240 31e7 	movw	r1, #999	; 0x3e7
   3326c:	4816      	ldr	r0, [pc, #88]	; (332c8 <k_sched_unlock+0xa4>)
   3326e:	f004 fea4 	bl	37fba <assert_post_action>
   33272:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   33276:	b140      	cbz	r0, 3328a <k_sched_unlock+0x66>
   33278:	4913      	ldr	r1, [pc, #76]	; (332c8 <k_sched_unlock+0xa4>)
   3327a:	4811      	ldr	r0, [pc, #68]	; (332c0 <k_sched_unlock+0x9c>)
   3327c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33280:	f004 fea2 	bl	37fc8 <assert_print>
   33284:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   33288:	e7f0      	b.n	3326c <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   3328a:	3301      	adds	r3, #1
   3328c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3328e:	f7ff fddb 	bl	32e48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33292:	4809      	ldr	r0, [pc, #36]	; (332b8 <k_sched_unlock+0x94>)
   33294:	f7fe fc5e 	bl	31b54 <z_spin_unlock_valid>
   33298:	b930      	cbnz	r0, 332a8 <k_sched_unlock+0x84>
   3329a:	4908      	ldr	r1, [pc, #32]	; (332bc <k_sched_unlock+0x98>)
   3329c:	4808      	ldr	r0, [pc, #32]	; (332c0 <k_sched_unlock+0x9c>)
   3329e:	22c2      	movs	r2, #194	; 0xc2
   332a0:	f004 fe92 	bl	37fc8 <assert_print>
   332a4:	21c2      	movs	r1, #194	; 0xc2
   332a6:	e7d0      	b.n	3324a <k_sched_unlock+0x26>
	__asm__ volatile(
   332a8:	f384 8811 	msr	BASEPRI, r4
   332ac:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   332b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   332b4:	f008 b9ca 	b.w	3b64c <z_reschedule_unlocked>
   332b8:	2000418c 	.word	0x2000418c
   332bc:	0003cc84 	.word	0x0003cc84
   332c0:	0003c7f8 	.word	0x0003c7f8
   332c4:	2000413c 	.word	0x2000413c
   332c8:	0003f01f 	.word	0x0003f01f

000332cc <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   332cc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   332ce:	4b0b      	ldr	r3, [pc, #44]	; (332fc <z_priq_dumb_remove+0x30>)
   332d0:	4299      	cmp	r1, r3
   332d2:	d10a      	bne.n	332ea <z_priq_dumb_remove+0x1e>
   332d4:	490a      	ldr	r1, [pc, #40]	; (33300 <z_priq_dumb_remove+0x34>)
   332d6:	480b      	ldr	r0, [pc, #44]	; (33304 <z_priq_dumb_remove+0x38>)
   332d8:	f240 4273 	movw	r2, #1139	; 0x473
   332dc:	f004 fe74 	bl	37fc8 <assert_print>
   332e0:	4807      	ldr	r0, [pc, #28]	; (33300 <z_priq_dumb_remove+0x34>)
   332e2:	f240 4173 	movw	r1, #1139	; 0x473
   332e6:	f004 fe68 	bl	37fba <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   332ea:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   332ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   332f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   332f2:	2300      	movs	r3, #0
	node->prev = NULL;
   332f4:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   332f8:	bd08      	pop	{r3, pc}
   332fa:	bf00      	nop
   332fc:	20003100 	.word	0x20003100
   33300:	0003f01f 	.word	0x0003f01f
   33304:	0003c7f8 	.word	0x0003c7f8

00033308 <move_thread_to_end_of_prio_q>:
{
   33308:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   3330a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   3330e:	7b43      	ldrb	r3, [r0, #13]
   33310:	2a00      	cmp	r2, #0
{
   33312:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   33314:	da06      	bge.n	33324 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3331a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3331c:	4601      	mov	r1, r0
   3331e:	481d      	ldr	r0, [pc, #116]	; (33394 <move_thread_to_end_of_prio_q+0x8c>)
   33320:	f7ff ffd4 	bl	332cc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   33324:	7b63      	ldrb	r3, [r4, #13]
   33326:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3332a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3332c:	4b1a      	ldr	r3, [pc, #104]	; (33398 <move_thread_to_end_of_prio_q+0x90>)
   3332e:	429c      	cmp	r4, r3
   33330:	d108      	bne.n	33344 <move_thread_to_end_of_prio_q+0x3c>
   33332:	491a      	ldr	r1, [pc, #104]	; (3339c <move_thread_to_end_of_prio_q+0x94>)
   33334:	481a      	ldr	r0, [pc, #104]	; (333a0 <move_thread_to_end_of_prio_q+0x98>)
   33336:	22ba      	movs	r2, #186	; 0xba
   33338:	f004 fe46 	bl	37fc8 <assert_print>
   3333c:	4817      	ldr	r0, [pc, #92]	; (3339c <move_thread_to_end_of_prio_q+0x94>)
   3333e:	21ba      	movs	r1, #186	; 0xba
   33340:	f004 fe3b 	bl	37fba <assert_post_action>
	return list->head == list;
   33344:	4a17      	ldr	r2, [pc, #92]	; (333a4 <move_thread_to_end_of_prio_q+0x9c>)
   33346:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   33348:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   3334a:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3334e:	428b      	cmp	r3, r1
   33350:	bf08      	it	eq
   33352:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33354:	b923      	cbnz	r3, 33360 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   33356:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   3335a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   3335c:	6254      	str	r4, [r2, #36]	; 0x24
}
   3335e:	e00c      	b.n	3337a <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   33360:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   33364:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   33368:	42b5      	cmp	r5, r6
   3336a:	d00e      	beq.n	3338a <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3336c:	42ae      	cmp	r6, r5
   3336e:	dd0c      	ble.n	3338a <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   33370:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   33372:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   33376:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   33378:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   3337a:	6890      	ldr	r0, [r2, #8]
   3337c:	1b03      	subs	r3, r0, r4
   3337e:	4258      	negs	r0, r3
}
   33380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   33384:	4158      	adcs	r0, r3
   33386:	f7ff bd5f 	b.w	32e48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3338a:	4298      	cmp	r0, r3
   3338c:	d0e3      	beq.n	33356 <move_thread_to_end_of_prio_q+0x4e>
   3338e:	681b      	ldr	r3, [r3, #0]
   33390:	e7e0      	b.n	33354 <move_thread_to_end_of_prio_q+0x4c>
   33392:	bf00      	nop
   33394:	2000415c 	.word	0x2000415c
   33398:	20003100 	.word	0x20003100
   3339c:	0003f01f 	.word	0x0003f01f
   333a0:	0003c7f8 	.word	0x0003c7f8
   333a4:	2000413c 	.word	0x2000413c

000333a8 <z_time_slice>:
{
   333a8:	b570      	push	{r4, r5, r6, lr}
   333aa:	4605      	mov	r5, r0
	__asm__ volatile(
   333ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   333b0:	f3ef 8611 	mrs	r6, BASEPRI
   333b4:	f383 8812 	msr	BASEPRI_MAX, r3
   333b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   333bc:	4824      	ldr	r0, [pc, #144]	; (33450 <z_time_slice+0xa8>)
   333be:	f7fe fbbb 	bl	31b38 <z_spin_lock_valid>
   333c2:	b940      	cbnz	r0, 333d6 <z_time_slice+0x2e>
   333c4:	4923      	ldr	r1, [pc, #140]	; (33454 <z_time_slice+0xac>)
   333c6:	4824      	ldr	r0, [pc, #144]	; (33458 <z_time_slice+0xb0>)
   333c8:	2294      	movs	r2, #148	; 0x94
   333ca:	f004 fdfd 	bl	37fc8 <assert_print>
   333ce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   333d0:	4820      	ldr	r0, [pc, #128]	; (33454 <z_time_slice+0xac>)
   333d2:	f004 fdf2 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   333d6:	481e      	ldr	r0, [pc, #120]	; (33450 <z_time_slice+0xa8>)
   333d8:	f7fe fbcc 	bl	31b74 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   333dc:	4b1f      	ldr	r3, [pc, #124]	; (3345c <z_time_slice+0xb4>)
   333de:	4a20      	ldr	r2, [pc, #128]	; (33460 <z_time_slice+0xb8>)
   333e0:	689c      	ldr	r4, [r3, #8]
   333e2:	6811      	ldr	r1, [r2, #0]
   333e4:	428c      	cmp	r4, r1
   333e6:	d10d      	bne.n	33404 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   333e8:	4620      	mov	r0, r4
   333ea:	f7ff fd19 	bl	32e20 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   333ee:	4818      	ldr	r0, [pc, #96]	; (33450 <z_time_slice+0xa8>)
   333f0:	f7fe fbb0 	bl	31b54 <z_spin_unlock_valid>
   333f4:	bb30      	cbnz	r0, 33444 <z_time_slice+0x9c>
   333f6:	4917      	ldr	r1, [pc, #92]	; (33454 <z_time_slice+0xac>)
   333f8:	4817      	ldr	r0, [pc, #92]	; (33458 <z_time_slice+0xb0>)
   333fa:	22c2      	movs	r2, #194	; 0xc2
   333fc:	f004 fde4 	bl	37fc8 <assert_print>
   33400:	21c2      	movs	r1, #194	; 0xc2
   33402:	e7e5      	b.n	333d0 <z_time_slice+0x28>
	pending_current = NULL;
   33404:	2100      	movs	r1, #0
   33406:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   33408:	4a16      	ldr	r2, [pc, #88]	; (33464 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   3340a:	6812      	ldr	r2, [r2, #0]
   3340c:	b1c2      	cbz	r2, 33440 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   3340e:	89e2      	ldrh	r2, [r4, #14]
   33410:	2a7f      	cmp	r2, #127	; 0x7f
   33412:	d815      	bhi.n	33440 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   33414:	7b62      	ldrb	r2, [r4, #13]
   33416:	06d2      	lsls	r2, r2, #27
   33418:	d112      	bne.n	33440 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3341a:	4a13      	ldr	r2, [pc, #76]	; (33468 <z_time_slice+0xc0>)
   3341c:	f994 100e 	ldrsb.w	r1, [r4, #14]
   33420:	6812      	ldr	r2, [r2, #0]
   33422:	4291      	cmp	r1, r2
   33424:	db0c      	blt.n	33440 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   33426:	4a11      	ldr	r2, [pc, #68]	; (3346c <z_time_slice+0xc4>)
   33428:	4294      	cmp	r4, r2
   3342a:	d009      	beq.n	33440 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   3342c:	691a      	ldr	r2, [r3, #16]
   3342e:	42aa      	cmp	r2, r5
   33430:	dc03      	bgt.n	3343a <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   33432:	4620      	mov	r0, r4
   33434:	f7ff ff68 	bl	33308 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   33438:	e7d6      	b.n	333e8 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   3343a:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   3343c:	611a      	str	r2, [r3, #16]
   3343e:	e7d6      	b.n	333ee <z_time_slice+0x46>
   33440:	2200      	movs	r2, #0
   33442:	e7fb      	b.n	3343c <z_time_slice+0x94>
	__asm__ volatile(
   33444:	f386 8811 	msr	BASEPRI, r6
   33448:	f3bf 8f6f 	isb	sy
}
   3344c:	bd70      	pop	{r4, r5, r6, pc}
   3344e:	bf00      	nop
   33450:	2000418c 	.word	0x2000418c
   33454:	0003cc84 	.word	0x0003cc84
   33458:	0003c7f8 	.word	0x0003c7f8
   3345c:	2000413c 	.word	0x2000413c
   33460:	20004180 	.word	0x20004180
   33464:	20004188 	.word	0x20004188
   33468:	20004184 	.word	0x20004184
   3346c:	20003100 	.word	0x20003100

00033470 <unready_thread>:
{
   33470:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   33472:	f990 200d 	ldrsb.w	r2, [r0, #13]
   33476:	7b43      	ldrb	r3, [r0, #13]
   33478:	2a00      	cmp	r2, #0
{
   3347a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3347c:	da06      	bge.n	3348c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3347e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   33482:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33484:	4601      	mov	r1, r0
   33486:	4806      	ldr	r0, [pc, #24]	; (334a0 <unready_thread+0x30>)
   33488:	f7ff ff20 	bl	332cc <z_priq_dumb_remove>
	update_cache(thread == _current);
   3348c:	4b05      	ldr	r3, [pc, #20]	; (334a4 <unready_thread+0x34>)
   3348e:	6898      	ldr	r0, [r3, #8]
   33490:	1b03      	subs	r3, r0, r4
   33492:	4258      	negs	r0, r3
}
   33494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   33498:	4158      	adcs	r0, r3
   3349a:	f7ff bcd5 	b.w	32e48 <update_cache>
   3349e:	bf00      	nop
   334a0:	2000415c 	.word	0x2000415c
   334a4:	2000413c 	.word	0x2000413c

000334a8 <add_to_waitq_locked>:
{
   334a8:	b538      	push	{r3, r4, r5, lr}
   334aa:	4604      	mov	r4, r0
   334ac:	460d      	mov	r5, r1
	unready_thread(thread);
   334ae:	f7ff ffdf 	bl	33470 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   334b2:	7b63      	ldrb	r3, [r4, #13]
   334b4:	f043 0302 	orr.w	r3, r3, #2
   334b8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   334ba:	b345      	cbz	r5, 3350e <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   334bc:	4b14      	ldr	r3, [pc, #80]	; (33510 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   334be:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   334c0:	429c      	cmp	r4, r3
   334c2:	d108      	bne.n	334d6 <add_to_waitq_locked+0x2e>
   334c4:	4913      	ldr	r1, [pc, #76]	; (33514 <add_to_waitq_locked+0x6c>)
   334c6:	4814      	ldr	r0, [pc, #80]	; (33518 <add_to_waitq_locked+0x70>)
   334c8:	22ba      	movs	r2, #186	; 0xba
   334ca:	f004 fd7d 	bl	37fc8 <assert_print>
   334ce:	4811      	ldr	r0, [pc, #68]	; (33514 <add_to_waitq_locked+0x6c>)
   334d0:	21ba      	movs	r1, #186	; 0xba
   334d2:	f004 fd72 	bl	37fba <assert_post_action>
	return list->head == list;
   334d6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   334d8:	429d      	cmp	r5, r3
   334da:	d109      	bne.n	334f0 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   334dc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   334de:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   334e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   334e4:	606c      	str	r4, [r5, #4]
}
   334e6:	e012      	b.n	3350e <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   334e8:	686a      	ldr	r2, [r5, #4]
   334ea:	4293      	cmp	r3, r2
   334ec:	d0f6      	beq.n	334dc <add_to_waitq_locked+0x34>
   334ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   334f0:	2b00      	cmp	r3, #0
   334f2:	d0f3      	beq.n	334dc <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   334f4:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   334f8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   334fc:	428a      	cmp	r2, r1
   334fe:	d0f3      	beq.n	334e8 <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   33500:	4291      	cmp	r1, r2
   33502:	ddf1      	ble.n	334e8 <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   33504:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   33506:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3350a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3350c:	605c      	str	r4, [r3, #4]
}
   3350e:	bd38      	pop	{r3, r4, r5, pc}
   33510:	20003100 	.word	0x20003100
   33514:	0003f01f 	.word	0x0003f01f
   33518:	0003c7f8 	.word	0x0003c7f8

0003351c <pend_locked>:
{
   3351c:	b570      	push	{r4, r5, r6, lr}
   3351e:	4615      	mov	r5, r2
   33520:	461c      	mov	r4, r3
   33522:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   33524:	f7ff ffc0 	bl	334a8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33528:	f1b4 3fff 	cmp.w	r4, #4294967295
   3352c:	bf08      	it	eq
   3352e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   33532:	d008      	beq.n	33546 <pend_locked+0x2a>
   33534:	462a      	mov	r2, r5
   33536:	4623      	mov	r3, r4
   33538:	f106 0018 	add.w	r0, r6, #24
   3353c:	4902      	ldr	r1, [pc, #8]	; (33548 <pend_locked+0x2c>)
}
   3353e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   33542:	f000 bceb 	b.w	33f1c <z_add_timeout>
   33546:	bd70      	pop	{r4, r5, r6, pc}
   33548:	00033851 	.word	0x00033851

0003354c <z_pend_curr>:
{
   3354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   33550:	f8df a094 	ldr.w	sl, [pc, #148]	; 335e8 <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   33554:	4c25      	ldr	r4, [pc, #148]	; (335ec <z_pend_curr+0xa0>)
	pending_current = _current;
   33556:	4b26      	ldr	r3, [pc, #152]	; (335f0 <z_pend_curr+0xa4>)
{
   33558:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   3355a:	42a0      	cmp	r0, r4
	pending_current = _current;
   3355c:	f8da 2008 	ldr.w	r2, [sl, #8]
   33560:	601a      	str	r2, [r3, #0]
{
   33562:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   33566:	4605      	mov	r5, r0
   33568:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   3356a:	d10a      	bne.n	33582 <z_pend_curr+0x36>
   3356c:	4921      	ldr	r1, [pc, #132]	; (335f4 <z_pend_curr+0xa8>)
   3356e:	4822      	ldr	r0, [pc, #136]	; (335f8 <z_pend_curr+0xac>)
   33570:	f240 324e 	movw	r2, #846	; 0x34e
   33574:	f004 fd28 	bl	37fc8 <assert_print>
   33578:	481e      	ldr	r0, [pc, #120]	; (335f4 <z_pend_curr+0xa8>)
   3357a:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3357e:	f004 fd1c 	bl	37fba <assert_post_action>
	__asm__ volatile(
   33582:	f04f 0240 	mov.w	r2, #64	; 0x40
   33586:	f3ef 8311 	mrs	r3, BASEPRI
   3358a:	f382 8812 	msr	BASEPRI_MAX, r2
   3358e:	f3bf 8f6f 	isb	sy
   33592:	4620      	mov	r0, r4
   33594:	f7fe fad0 	bl	31b38 <z_spin_lock_valid>
   33598:	b938      	cbnz	r0, 335aa <z_pend_curr+0x5e>
   3359a:	4918      	ldr	r1, [pc, #96]	; (335fc <z_pend_curr+0xb0>)
   3359c:	4816      	ldr	r0, [pc, #88]	; (335f8 <z_pend_curr+0xac>)
   3359e:	2294      	movs	r2, #148	; 0x94
   335a0:	f004 fd12 	bl	37fc8 <assert_print>
   335a4:	2194      	movs	r1, #148	; 0x94
   335a6:	4815      	ldr	r0, [pc, #84]	; (335fc <z_pend_curr+0xb0>)
   335a8:	e7e9      	b.n	3357e <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   335aa:	4620      	mov	r0, r4
   335ac:	f7fe fae2 	bl	31b74 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   335b0:	f8da 0008 	ldr.w	r0, [sl, #8]
   335b4:	4642      	mov	r2, r8
   335b6:	464b      	mov	r3, r9
   335b8:	4639      	mov	r1, r7
   335ba:	f7ff ffaf 	bl	3351c <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   335be:	4628      	mov	r0, r5
   335c0:	f7fe fac8 	bl	31b54 <z_spin_unlock_valid>
   335c4:	b930      	cbnz	r0, 335d4 <z_pend_curr+0x88>
   335c6:	490d      	ldr	r1, [pc, #52]	; (335fc <z_pend_curr+0xb0>)
   335c8:	480b      	ldr	r0, [pc, #44]	; (335f8 <z_pend_curr+0xac>)
   335ca:	22e1      	movs	r2, #225	; 0xe1
   335cc:	f004 fcfc 	bl	37fc8 <assert_print>
   335d0:	21e1      	movs	r1, #225	; 0xe1
   335d2:	e7e8      	b.n	335a6 <z_pend_curr+0x5a>
   335d4:	4620      	mov	r0, r4
   335d6:	f7fe fabd 	bl	31b54 <z_spin_unlock_valid>
   335da:	2800      	cmp	r0, #0
   335dc:	d0f3      	beq.n	335c6 <z_pend_curr+0x7a>
   335de:	4630      	mov	r0, r6
}
   335e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   335e4:	f7f1 bf88 	b.w	254f8 <arch_swap>
   335e8:	2000413c 	.word	0x2000413c
   335ec:	2000418c 	.word	0x2000418c
   335f0:	20004180 	.word	0x20004180
   335f4:	0003f01f 	.word	0x0003f01f
   335f8:	0003c7f8 	.word	0x0003c7f8
   335fc:	0003cc84 	.word	0x0003cc84

00033600 <z_set_prio>:
{
   33600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33604:	4604      	mov	r4, r0
   33606:	460e      	mov	r6, r1
   33608:	f04f 0340 	mov.w	r3, #64	; 0x40
   3360c:	f3ef 8911 	mrs	r9, BASEPRI
   33610:	f383 8812 	msr	BASEPRI_MAX, r3
   33614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33618:	4831      	ldr	r0, [pc, #196]	; (336e0 <z_set_prio+0xe0>)
   3361a:	f7fe fa8d 	bl	31b38 <z_spin_lock_valid>
   3361e:	4607      	mov	r7, r0
   33620:	b938      	cbnz	r0, 33632 <z_set_prio+0x32>
   33622:	4930      	ldr	r1, [pc, #192]	; (336e4 <z_set_prio+0xe4>)
   33624:	4830      	ldr	r0, [pc, #192]	; (336e8 <z_set_prio+0xe8>)
   33626:	2294      	movs	r2, #148	; 0x94
   33628:	f004 fcce 	bl	37fc8 <assert_print>
   3362c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3362e:	482d      	ldr	r0, [pc, #180]	; (336e4 <z_set_prio+0xe4>)
   33630:	e020      	b.n	33674 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   33632:	482b      	ldr	r0, [pc, #172]	; (336e0 <z_set_prio+0xe0>)
   33634:	f7fe fa9e 	bl	31b74 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   33638:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3363a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   3363c:	b276      	sxtb	r6, r6
   3363e:	d11b      	bne.n	33678 <z_set_prio+0x78>
	return node->next != NULL;
   33640:	69a5      	ldr	r5, [r4, #24]
   33642:	b9cd      	cbnz	r5, 33678 <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   33644:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 336ec <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3364c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3364e:	4621      	mov	r1, r4
   33650:	4640      	mov	r0, r8
   33652:	f7ff fe3b 	bl	332cc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   33656:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   33658:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   3365a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3365e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33660:	4b23      	ldr	r3, [pc, #140]	; (336f0 <z_set_prio+0xf0>)
   33662:	429c      	cmp	r4, r3
   33664:	d115      	bne.n	33692 <z_set_prio+0x92>
   33666:	4923      	ldr	r1, [pc, #140]	; (336f4 <z_set_prio+0xf4>)
   33668:	481f      	ldr	r0, [pc, #124]	; (336e8 <z_set_prio+0xe8>)
   3366a:	22ba      	movs	r2, #186	; 0xba
   3366c:	f004 fcac 	bl	37fc8 <assert_print>
   33670:	4820      	ldr	r0, [pc, #128]	; (336f4 <z_set_prio+0xf4>)
   33672:	21ba      	movs	r1, #186	; 0xba
   33674:	f004 fca1 	bl	37fba <assert_post_action>
			thread->base.prio = prio;
   33678:	73a6      	strb	r6, [r4, #14]
   3367a:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3367c:	4818      	ldr	r0, [pc, #96]	; (336e0 <z_set_prio+0xe0>)
   3367e:	f7fe fa69 	bl	31b54 <z_spin_unlock_valid>
   33682:	bb30      	cbnz	r0, 336d2 <z_set_prio+0xd2>
   33684:	4917      	ldr	r1, [pc, #92]	; (336e4 <z_set_prio+0xe4>)
   33686:	4818      	ldr	r0, [pc, #96]	; (336e8 <z_set_prio+0xe8>)
   33688:	22c2      	movs	r2, #194	; 0xc2
   3368a:	f004 fc9d 	bl	37fc8 <assert_print>
   3368e:	21c2      	movs	r1, #194	; 0xc2
   33690:	e7cd      	b.n	3362e <z_set_prio+0x2e>
	return list->head == list;
   33692:	4643      	mov	r3, r8
   33694:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33698:	4542      	cmp	r2, r8
   3369a:	bf18      	it	ne
   3369c:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   3369e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   336a0:	b925      	cbnz	r5, 336ac <z_set_prio+0xac>
	node->prev = tail;
   336a2:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   336a6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   336a8:	625c      	str	r4, [r3, #36]	; 0x24
}
   336aa:	e00a      	b.n	336c2 <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   336ac:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   336b0:	428e      	cmp	r6, r1
   336b2:	d00a      	beq.n	336ca <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   336b4:	42b1      	cmp	r1, r6
   336b6:	dd08      	ble.n	336ca <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   336b8:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   336ba:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   336be:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   336c0:	606c      	str	r4, [r5, #4]
			update_cache(1);
   336c2:	2001      	movs	r0, #1
   336c4:	f7ff fbc0 	bl	32e48 <update_cache>
   336c8:	e7d8      	b.n	3367c <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   336ca:	42aa      	cmp	r2, r5
   336cc:	d0e9      	beq.n	336a2 <z_set_prio+0xa2>
   336ce:	682d      	ldr	r5, [r5, #0]
   336d0:	e7e6      	b.n	336a0 <z_set_prio+0xa0>
	__asm__ volatile(
   336d2:	f389 8811 	msr	BASEPRI, r9
   336d6:	f3bf 8f6f 	isb	sy
}
   336da:	4638      	mov	r0, r7
   336dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   336e0:	2000418c 	.word	0x2000418c
   336e4:	0003cc84 	.word	0x0003cc84
   336e8:	0003c7f8 	.word	0x0003c7f8
   336ec:	2000415c 	.word	0x2000415c
   336f0:	20003100 	.word	0x20003100
   336f4:	0003f01f 	.word	0x0003f01f

000336f8 <z_impl_k_thread_suspend>:
{
   336f8:	b570      	push	{r4, r5, r6, lr}
   336fa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   336fc:	3018      	adds	r0, #24
   336fe:	f000 fcb9 	bl	34074 <z_abort_timeout>
	__asm__ volatile(
   33702:	f04f 0340 	mov.w	r3, #64	; 0x40
   33706:	f3ef 8611 	mrs	r6, BASEPRI
   3370a:	f383 8812 	msr	BASEPRI_MAX, r3
   3370e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33712:	481f      	ldr	r0, [pc, #124]	; (33790 <z_impl_k_thread_suspend+0x98>)
   33714:	f7fe fa10 	bl	31b38 <z_spin_lock_valid>
   33718:	b940      	cbnz	r0, 3372c <z_impl_k_thread_suspend+0x34>
   3371a:	491e      	ldr	r1, [pc, #120]	; (33794 <z_impl_k_thread_suspend+0x9c>)
   3371c:	481e      	ldr	r0, [pc, #120]	; (33798 <z_impl_k_thread_suspend+0xa0>)
   3371e:	2294      	movs	r2, #148	; 0x94
   33720:	f004 fc52 	bl	37fc8 <assert_print>
   33724:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33726:	481b      	ldr	r0, [pc, #108]	; (33794 <z_impl_k_thread_suspend+0x9c>)
   33728:	f004 fc47 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3372c:	4818      	ldr	r0, [pc, #96]	; (33790 <z_impl_k_thread_suspend+0x98>)
   3372e:	f7fe fa21 	bl	31b74 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   33732:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   33736:	7b63      	ldrb	r3, [r4, #13]
   33738:	2a00      	cmp	r2, #0
   3373a:	da06      	bge.n	3374a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3373c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   33740:	4816      	ldr	r0, [pc, #88]	; (3379c <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33742:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33744:	4621      	mov	r1, r4
   33746:	f7ff fdc1 	bl	332cc <z_priq_dumb_remove>
		update_cache(thread == _current);
   3374a:	4d15      	ldr	r5, [pc, #84]	; (337a0 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3374c:	7b63      	ldrb	r3, [r4, #13]
   3374e:	68a8      	ldr	r0, [r5, #8]
   33750:	f043 0310 	orr.w	r3, r3, #16
   33754:	7363      	strb	r3, [r4, #13]
   33756:	1b03      	subs	r3, r0, r4
   33758:	4258      	negs	r0, r3
   3375a:	4158      	adcs	r0, r3
   3375c:	f7ff fb74 	bl	32e48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33760:	480b      	ldr	r0, [pc, #44]	; (33790 <z_impl_k_thread_suspend+0x98>)
   33762:	f7fe f9f7 	bl	31b54 <z_spin_unlock_valid>
   33766:	b930      	cbnz	r0, 33776 <z_impl_k_thread_suspend+0x7e>
   33768:	490a      	ldr	r1, [pc, #40]	; (33794 <z_impl_k_thread_suspend+0x9c>)
   3376a:	480b      	ldr	r0, [pc, #44]	; (33798 <z_impl_k_thread_suspend+0xa0>)
   3376c:	22c2      	movs	r2, #194	; 0xc2
   3376e:	f004 fc2b 	bl	37fc8 <assert_print>
   33772:	21c2      	movs	r1, #194	; 0xc2
   33774:	e7d7      	b.n	33726 <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   33776:	f386 8811 	msr	BASEPRI, r6
   3377a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3377e:	68ab      	ldr	r3, [r5, #8]
   33780:	42a3      	cmp	r3, r4
   33782:	d103      	bne.n	3378c <z_impl_k_thread_suspend+0x94>
}
   33784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   33788:	f007 bf60 	b.w	3b64c <z_reschedule_unlocked>
}
   3378c:	bd70      	pop	{r4, r5, r6, pc}
   3378e:	bf00      	nop
   33790:	2000418c 	.word	0x2000418c
   33794:	0003cc84 	.word	0x0003cc84
   33798:	0003c7f8 	.word	0x0003c7f8
   3379c:	2000415c 	.word	0x2000415c
   337a0:	2000413c 	.word	0x2000413c

000337a4 <unpend_thread_no_timeout>:
{
   337a4:	b510      	push	{r4, lr}
   337a6:	4604      	mov	r4, r0
   337a8:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   337aa:	b950      	cbnz	r0, 337c2 <unpend_thread_no_timeout+0x1e>
   337ac:	490a      	ldr	r1, [pc, #40]	; (337d8 <unpend_thread_no_timeout+0x34>)
   337ae:	480b      	ldr	r0, [pc, #44]	; (337dc <unpend_thread_no_timeout+0x38>)
   337b0:	f240 22d6 	movw	r2, #726	; 0x2d6
   337b4:	f004 fc08 	bl	37fc8 <assert_print>
   337b8:	4807      	ldr	r0, [pc, #28]	; (337d8 <unpend_thread_no_timeout+0x34>)
   337ba:	f240 21d6 	movw	r1, #726	; 0x2d6
   337be:	f004 fbfc 	bl	37fba <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   337c2:	4621      	mov	r1, r4
   337c4:	f7ff fd82 	bl	332cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   337c8:	7b63      	ldrb	r3, [r4, #13]
   337ca:	f023 0302 	bic.w	r3, r3, #2
   337ce:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   337d0:	2300      	movs	r3, #0
   337d2:	60a3      	str	r3, [r4, #8]
}
   337d4:	bd10      	pop	{r4, pc}
   337d6:	bf00      	nop
   337d8:	0003f01f 	.word	0x0003f01f
   337dc:	0003c7f8 	.word	0x0003c7f8

000337e0 <z_unpend_thread>:
{
   337e0:	b538      	push	{r3, r4, r5, lr}
   337e2:	4604      	mov	r4, r0
	__asm__ volatile(
   337e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   337e8:	f3ef 8511 	mrs	r5, BASEPRI
   337ec:	f383 8812 	msr	BASEPRI_MAX, r3
   337f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   337f4:	4813      	ldr	r0, [pc, #76]	; (33844 <z_unpend_thread+0x64>)
   337f6:	f7fe f99f 	bl	31b38 <z_spin_lock_valid>
   337fa:	b940      	cbnz	r0, 3380e <z_unpend_thread+0x2e>
   337fc:	4912      	ldr	r1, [pc, #72]	; (33848 <z_unpend_thread+0x68>)
   337fe:	4813      	ldr	r0, [pc, #76]	; (3384c <z_unpend_thread+0x6c>)
   33800:	2294      	movs	r2, #148	; 0x94
   33802:	f004 fbe1 	bl	37fc8 <assert_print>
   33806:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33808:	480f      	ldr	r0, [pc, #60]	; (33848 <z_unpend_thread+0x68>)
   3380a:	f004 fbd6 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3380e:	480d      	ldr	r0, [pc, #52]	; (33844 <z_unpend_thread+0x64>)
   33810:	f7fe f9b0 	bl	31b74 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   33814:	4620      	mov	r0, r4
   33816:	f7ff ffc5 	bl	337a4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3381a:	480a      	ldr	r0, [pc, #40]	; (33844 <z_unpend_thread+0x64>)
   3381c:	f7fe f99a 	bl	31b54 <z_spin_unlock_valid>
   33820:	b930      	cbnz	r0, 33830 <z_unpend_thread+0x50>
   33822:	4909      	ldr	r1, [pc, #36]	; (33848 <z_unpend_thread+0x68>)
   33824:	4809      	ldr	r0, [pc, #36]	; (3384c <z_unpend_thread+0x6c>)
   33826:	22c2      	movs	r2, #194	; 0xc2
   33828:	f004 fbce 	bl	37fc8 <assert_print>
   3382c:	21c2      	movs	r1, #194	; 0xc2
   3382e:	e7eb      	b.n	33808 <z_unpend_thread+0x28>
	__asm__ volatile(
   33830:	f385 8811 	msr	BASEPRI, r5
   33834:	f3bf 8f6f 	isb	sy
   33838:	f104 0018 	add.w	r0, r4, #24
}
   3383c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33840:	f000 bc18 	b.w	34074 <z_abort_timeout>
   33844:	2000418c 	.word	0x2000418c
   33848:	0003cc84 	.word	0x0003cc84
   3384c:	0003c7f8 	.word	0x0003c7f8

00033850 <z_thread_timeout>:
{
   33850:	b570      	push	{r4, r5, r6, lr}
   33852:	4604      	mov	r4, r0
	__asm__ volatile(
   33854:	f04f 0340 	mov.w	r3, #64	; 0x40
   33858:	f3ef 8611 	mrs	r6, BASEPRI
   3385c:	f383 8812 	msr	BASEPRI_MAX, r3
   33860:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33864:	481a      	ldr	r0, [pc, #104]	; (338d0 <z_thread_timeout+0x80>)
   33866:	f7fe f967 	bl	31b38 <z_spin_lock_valid>
   3386a:	b940      	cbnz	r0, 3387e <z_thread_timeout+0x2e>
   3386c:	4919      	ldr	r1, [pc, #100]	; (338d4 <z_thread_timeout+0x84>)
   3386e:	481a      	ldr	r0, [pc, #104]	; (338d8 <z_thread_timeout+0x88>)
   33870:	2294      	movs	r2, #148	; 0x94
   33872:	f004 fba9 	bl	37fc8 <assert_print>
   33876:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33878:	4816      	ldr	r0, [pc, #88]	; (338d4 <z_thread_timeout+0x84>)
   3387a:	f004 fb9e 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3387e:	4814      	ldr	r0, [pc, #80]	; (338d0 <z_thread_timeout+0x80>)
   33880:	f7fe f978 	bl	31b74 <z_spin_lock_set_owner>
		if (!killed) {
   33884:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   33888:	f013 0f28 	tst.w	r3, #40	; 0x28
   3388c:	d110      	bne.n	338b0 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   3388e:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   33892:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   33896:	b113      	cbz	r3, 3389e <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   33898:	4628      	mov	r0, r5
   3389a:	f7ff ff83 	bl	337a4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3389e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   338a2:	f023 0314 	bic.w	r3, r3, #20
   338a6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   338aa:	4628      	mov	r0, r5
   338ac:	f7ff faf8 	bl	32ea0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   338b0:	4807      	ldr	r0, [pc, #28]	; (338d0 <z_thread_timeout+0x80>)
   338b2:	f7fe f94f 	bl	31b54 <z_spin_unlock_valid>
   338b6:	b930      	cbnz	r0, 338c6 <z_thread_timeout+0x76>
   338b8:	4906      	ldr	r1, [pc, #24]	; (338d4 <z_thread_timeout+0x84>)
   338ba:	4807      	ldr	r0, [pc, #28]	; (338d8 <z_thread_timeout+0x88>)
   338bc:	22c2      	movs	r2, #194	; 0xc2
   338be:	f004 fb83 	bl	37fc8 <assert_print>
   338c2:	21c2      	movs	r1, #194	; 0xc2
   338c4:	e7d8      	b.n	33878 <z_thread_timeout+0x28>
	__asm__ volatile(
   338c6:	f386 8811 	msr	BASEPRI, r6
   338ca:	f3bf 8f6f 	isb	sy
}
   338ce:	bd70      	pop	{r4, r5, r6, pc}
   338d0:	2000418c 	.word	0x2000418c
   338d4:	0003cc84 	.word	0x0003cc84
   338d8:	0003c7f8 	.word	0x0003c7f8

000338dc <z_unpend1_no_timeout>:
{
   338dc:	b570      	push	{r4, r5, r6, lr}
   338de:	4605      	mov	r5, r0
	__asm__ volatile(
   338e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   338e4:	f3ef 8611 	mrs	r6, BASEPRI
   338e8:	f383 8812 	msr	BASEPRI_MAX, r3
   338ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   338f0:	4814      	ldr	r0, [pc, #80]	; (33944 <z_unpend1_no_timeout+0x68>)
   338f2:	f7fe f921 	bl	31b38 <z_spin_lock_valid>
   338f6:	b940      	cbnz	r0, 3390a <z_unpend1_no_timeout+0x2e>
   338f8:	4913      	ldr	r1, [pc, #76]	; (33948 <z_unpend1_no_timeout+0x6c>)
   338fa:	4814      	ldr	r0, [pc, #80]	; (3394c <z_unpend1_no_timeout+0x70>)
   338fc:	2294      	movs	r2, #148	; 0x94
   338fe:	f004 fb63 	bl	37fc8 <assert_print>
   33902:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33904:	4810      	ldr	r0, [pc, #64]	; (33948 <z_unpend1_no_timeout+0x6c>)
   33906:	f004 fb58 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3390a:	480e      	ldr	r0, [pc, #56]	; (33944 <z_unpend1_no_timeout+0x68>)
   3390c:	f7fe f932 	bl	31b74 <z_spin_lock_set_owner>
	return list->head == list;
   33910:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33912:	42a5      	cmp	r5, r4
   33914:	d00e      	beq.n	33934 <z_unpend1_no_timeout+0x58>
		if (thread != NULL) {
   33916:	b114      	cbz	r4, 3391e <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   33918:	4620      	mov	r0, r4
   3391a:	f7ff ff43 	bl	337a4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3391e:	4809      	ldr	r0, [pc, #36]	; (33944 <z_unpend1_no_timeout+0x68>)
   33920:	f7fe f918 	bl	31b54 <z_spin_unlock_valid>
   33924:	b940      	cbnz	r0, 33938 <z_unpend1_no_timeout+0x5c>
   33926:	4908      	ldr	r1, [pc, #32]	; (33948 <z_unpend1_no_timeout+0x6c>)
   33928:	4808      	ldr	r0, [pc, #32]	; (3394c <z_unpend1_no_timeout+0x70>)
   3392a:	22c2      	movs	r2, #194	; 0xc2
   3392c:	f004 fb4c 	bl	37fc8 <assert_print>
   33930:	21c2      	movs	r1, #194	; 0xc2
   33932:	e7e7      	b.n	33904 <z_unpend1_no_timeout+0x28>
   33934:	2400      	movs	r4, #0
   33936:	e7f2      	b.n	3391e <z_unpend1_no_timeout+0x42>
	__asm__ volatile(
   33938:	f386 8811 	msr	BASEPRI, r6
   3393c:	f3bf 8f6f 	isb	sy
}
   33940:	4620      	mov	r0, r4
   33942:	bd70      	pop	{r4, r5, r6, pc}
   33944:	2000418c 	.word	0x2000418c
   33948:	0003cc84 	.word	0x0003cc84
   3394c:	0003c7f8 	.word	0x0003c7f8

00033950 <z_unpend_first_thread>:
{
   33950:	b570      	push	{r4, r5, r6, lr}
   33952:	4605      	mov	r5, r0
	__asm__ volatile(
   33954:	f04f 0340 	mov.w	r3, #64	; 0x40
   33958:	f3ef 8611 	mrs	r6, BASEPRI
   3395c:	f383 8812 	msr	BASEPRI_MAX, r3
   33960:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33964:	4816      	ldr	r0, [pc, #88]	; (339c0 <z_unpend_first_thread+0x70>)
   33966:	f7fe f8e7 	bl	31b38 <z_spin_lock_valid>
   3396a:	b940      	cbnz	r0, 3397e <z_unpend_first_thread+0x2e>
   3396c:	4915      	ldr	r1, [pc, #84]	; (339c4 <z_unpend_first_thread+0x74>)
   3396e:	4816      	ldr	r0, [pc, #88]	; (339c8 <z_unpend_first_thread+0x78>)
   33970:	2294      	movs	r2, #148	; 0x94
   33972:	f004 fb29 	bl	37fc8 <assert_print>
   33976:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33978:	4812      	ldr	r0, [pc, #72]	; (339c4 <z_unpend_first_thread+0x74>)
   3397a:	f004 fb1e 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3397e:	4810      	ldr	r0, [pc, #64]	; (339c0 <z_unpend_first_thread+0x70>)
   33980:	f7fe f8f8 	bl	31b74 <z_spin_lock_set_owner>
	return list->head == list;
   33984:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33986:	42a5      	cmp	r5, r4
   33988:	d012      	beq.n	339b0 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   3398a:	b134      	cbz	r4, 3399a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   3398c:	4620      	mov	r0, r4
   3398e:	f7ff ff09 	bl	337a4 <unpend_thread_no_timeout>
   33992:	f104 0018 	add.w	r0, r4, #24
   33996:	f000 fb6d 	bl	34074 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3399a:	4809      	ldr	r0, [pc, #36]	; (339c0 <z_unpend_first_thread+0x70>)
   3399c:	f7fe f8da 	bl	31b54 <z_spin_unlock_valid>
   339a0:	b940      	cbnz	r0, 339b4 <z_unpend_first_thread+0x64>
   339a2:	4908      	ldr	r1, [pc, #32]	; (339c4 <z_unpend_first_thread+0x74>)
   339a4:	4808      	ldr	r0, [pc, #32]	; (339c8 <z_unpend_first_thread+0x78>)
   339a6:	22c2      	movs	r2, #194	; 0xc2
   339a8:	f004 fb0e 	bl	37fc8 <assert_print>
   339ac:	21c2      	movs	r1, #194	; 0xc2
   339ae:	e7e3      	b.n	33978 <z_unpend_first_thread+0x28>
   339b0:	2400      	movs	r4, #0
   339b2:	e7f2      	b.n	3399a <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   339b4:	f386 8811 	msr	BASEPRI, r6
   339b8:	f3bf 8f6f 	isb	sy
}
   339bc:	4620      	mov	r0, r4
   339be:	bd70      	pop	{r4, r5, r6, pc}
   339c0:	2000418c 	.word	0x2000418c
   339c4:	0003cc84 	.word	0x0003cc84
   339c8:	0003c7f8 	.word	0x0003c7f8

000339cc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   339cc:	4b04      	ldr	r3, [pc, #16]	; (339e0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   339ce:	2100      	movs	r1, #0
   339d0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   339d4:	e9c3 2208 	strd	r2, r2, [r3, #32]
   339d8:	4608      	mov	r0, r1
   339da:	f7ff baa9 	b.w	32f30 <k_sched_time_slice_set>
   339de:	bf00      	nop
   339e0:	2000413c 	.word	0x2000413c

000339e4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   339e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   339e6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   339ea:	b14b      	cbz	r3, 33a00 <z_impl_k_yield+0x1c>
   339ec:	4935      	ldr	r1, [pc, #212]	; (33ac4 <z_impl_k_yield+0xe0>)
   339ee:	4836      	ldr	r0, [pc, #216]	; (33ac8 <z_impl_k_yield+0xe4>)
   339f0:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   339f4:	f004 fae8 	bl	37fc8 <assert_print>
   339f8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   339fc:	4831      	ldr	r0, [pc, #196]	; (33ac4 <z_impl_k_yield+0xe0>)
   339fe:	e012      	b.n	33a26 <z_impl_k_yield+0x42>
	__asm__ volatile(
   33a00:	f04f 0340 	mov.w	r3, #64	; 0x40
   33a04:	f3ef 8611 	mrs	r6, BASEPRI
   33a08:	f383 8812 	msr	BASEPRI_MAX, r3
   33a0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33a10:	482e      	ldr	r0, [pc, #184]	; (33acc <z_impl_k_yield+0xe8>)
   33a12:	f7fe f891 	bl	31b38 <z_spin_lock_valid>
   33a16:	b940      	cbnz	r0, 33a2a <z_impl_k_yield+0x46>
   33a18:	492d      	ldr	r1, [pc, #180]	; (33ad0 <z_impl_k_yield+0xec>)
   33a1a:	482b      	ldr	r0, [pc, #172]	; (33ac8 <z_impl_k_yield+0xe4>)
   33a1c:	2294      	movs	r2, #148	; 0x94
   33a1e:	f004 fad3 	bl	37fc8 <assert_print>
   33a22:	2194      	movs	r1, #148	; 0x94
   33a24:	482a      	ldr	r0, [pc, #168]	; (33ad0 <z_impl_k_yield+0xec>)
   33a26:	f004 fac8 	bl	37fba <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   33a2a:	4c2a      	ldr	r4, [pc, #168]	; (33ad4 <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   33a2c:	4827      	ldr	r0, [pc, #156]	; (33acc <z_impl_k_yield+0xe8>)
   33a2e:	f7fe f8a1 	bl	31b74 <z_spin_lock_set_owner>
   33a32:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33a34:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33a36:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   33a3e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33a40:	4628      	mov	r0, r5
   33a42:	f7ff fc43 	bl	332cc <z_priq_dumb_remove>
	}
	queue_thread(_current);
   33a46:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   33a48:	7b5a      	ldrb	r2, [r3, #13]
   33a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   33a4e:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33a50:	4a21      	ldr	r2, [pc, #132]	; (33ad8 <z_impl_k_yield+0xf4>)
   33a52:	4293      	cmp	r3, r2
   33a54:	d106      	bne.n	33a64 <z_impl_k_yield+0x80>
   33a56:	491b      	ldr	r1, [pc, #108]	; (33ac4 <z_impl_k_yield+0xe0>)
   33a58:	481b      	ldr	r0, [pc, #108]	; (33ac8 <z_impl_k_yield+0xe4>)
   33a5a:	22ba      	movs	r2, #186	; 0xba
   33a5c:	f004 fab4 	bl	37fc8 <assert_print>
   33a60:	21ba      	movs	r1, #186	; 0xba
   33a62:	e7cb      	b.n	339fc <z_impl_k_yield+0x18>
	return list->head == list;
   33a64:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   33a66:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33a68:	42aa      	cmp	r2, r5
   33a6a:	bf08      	it	eq
   33a6c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33a6e:	b922      	cbnz	r2, 33a7a <z_impl_k_yield+0x96>
	node->prev = tail;
   33a70:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   33a74:	600b      	str	r3, [r1, #0]
	list->tail = node;
   33a76:	6263      	str	r3, [r4, #36]	; 0x24
}
   33a78:	e00c      	b.n	33a94 <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   33a7a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   33a7e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   33a82:	42b8      	cmp	r0, r7
   33a84:	d014      	beq.n	33ab0 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   33a86:	4287      	cmp	r7, r0
   33a88:	dd12      	ble.n	33ab0 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   33a8a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   33a8c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   33a90:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   33a92:	6053      	str	r3, [r2, #4]
	update_cache(1);
   33a94:	2001      	movs	r0, #1
   33a96:	f7ff f9d7 	bl	32e48 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33a9a:	480c      	ldr	r0, [pc, #48]	; (33acc <z_impl_k_yield+0xe8>)
   33a9c:	f7fe f85a 	bl	31b54 <z_spin_unlock_valid>
   33aa0:	b950      	cbnz	r0, 33ab8 <z_impl_k_yield+0xd4>
   33aa2:	490b      	ldr	r1, [pc, #44]	; (33ad0 <z_impl_k_yield+0xec>)
   33aa4:	4808      	ldr	r0, [pc, #32]	; (33ac8 <z_impl_k_yield+0xe4>)
   33aa6:	22e1      	movs	r2, #225	; 0xe1
   33aa8:	f004 fa8e 	bl	37fc8 <assert_print>
   33aac:	21e1      	movs	r1, #225	; 0xe1
   33aae:	e7b9      	b.n	33a24 <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   33ab0:	428a      	cmp	r2, r1
   33ab2:	d0dd      	beq.n	33a70 <z_impl_k_yield+0x8c>
   33ab4:	6812      	ldr	r2, [r2, #0]
   33ab6:	e7da      	b.n	33a6e <z_impl_k_yield+0x8a>
   33ab8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   33aba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   33abe:	f7f1 bd1b 	b.w	254f8 <arch_swap>
   33ac2:	bf00      	nop
   33ac4:	0003f01f 	.word	0x0003f01f
   33ac8:	0003c7f8 	.word	0x0003c7f8
   33acc:	2000418c 	.word	0x2000418c
   33ad0:	0003cc84 	.word	0x0003cc84
   33ad4:	2000413c 	.word	0x2000413c
   33ad8:	20003100 	.word	0x20003100

00033adc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   33adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33ae0:	4605      	mov	r5, r0
   33ae2:	460e      	mov	r6, r1
   33ae4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   33ae8:	b14b      	cbz	r3, 33afe <z_tick_sleep+0x22>
   33aea:	4936      	ldr	r1, [pc, #216]	; (33bc4 <z_tick_sleep+0xe8>)
   33aec:	4836      	ldr	r0, [pc, #216]	; (33bc8 <z_tick_sleep+0xec>)
   33aee:	f240 528c 	movw	r2, #1420	; 0x58c
   33af2:	f004 fa69 	bl	37fc8 <assert_print>
   33af6:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   33afa:	4832      	ldr	r0, [pc, #200]	; (33bc4 <z_tick_sleep+0xe8>)
   33afc:	e020      	b.n	33b40 <z_tick_sleep+0x64>
	if (ticks == 0) {
   33afe:	ea50 0301 	orrs.w	r3, r0, r1
   33b02:	d103      	bne.n	33b0c <z_tick_sleep+0x30>
	z_impl_k_yield();
   33b04:	f7ff ff6e 	bl	339e4 <z_impl_k_yield>
		return 0;
   33b08:	2000      	movs	r0, #0
   33b0a:	e058      	b.n	33bbe <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   33b0c:	1c82      	adds	r2, r0, #2
   33b0e:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   33b12:	db17      	blt.n	33b44 <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   33b14:	f007 fdb4 	bl	3b680 <sys_clock_tick_get_32>
   33b18:	182c      	adds	r4, r5, r0
   33b1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   33b1e:	f3ef 8811 	mrs	r8, BASEPRI
   33b22:	f383 8812 	msr	BASEPRI_MAX, r3
   33b26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33b2a:	4828      	ldr	r0, [pc, #160]	; (33bcc <z_tick_sleep+0xf0>)
   33b2c:	f7fe f804 	bl	31b38 <z_spin_lock_valid>
   33b30:	b960      	cbnz	r0, 33b4c <z_tick_sleep+0x70>
   33b32:	4927      	ldr	r1, [pc, #156]	; (33bd0 <z_tick_sleep+0xf4>)
   33b34:	4824      	ldr	r0, [pc, #144]	; (33bc8 <z_tick_sleep+0xec>)
   33b36:	2294      	movs	r2, #148	; 0x94
   33b38:	f004 fa46 	bl	37fc8 <assert_print>
   33b3c:	2194      	movs	r1, #148	; 0x94
   33b3e:	4824      	ldr	r0, [pc, #144]	; (33bd0 <z_tick_sleep+0xf4>)
   33b40:	f004 fa3b 	bl	37fba <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   33b44:	f06f 0401 	mvn.w	r4, #1
   33b48:	1a24      	subs	r4, r4, r0
   33b4a:	e7e6      	b.n	33b1a <z_tick_sleep+0x3e>
	pending_current = _current;
   33b4c:	4f21      	ldr	r7, [pc, #132]	; (33bd4 <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   33b4e:	481f      	ldr	r0, [pc, #124]	; (33bcc <z_tick_sleep+0xf0>)
   33b50:	f7fe f810 	bl	31b74 <z_spin_lock_set_owner>
   33b54:	4b20      	ldr	r3, [pc, #128]	; (33bd8 <_flash_used>)
   33b56:	68b8      	ldr	r0, [r7, #8]
   33b58:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   33b5a:	f7ff fc89 	bl	33470 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   33b5e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   33b60:	491e      	ldr	r1, [pc, #120]	; (33bdc <_flash_used+0x4>)
   33b62:	462a      	mov	r2, r5
   33b64:	4633      	mov	r3, r6
   33b66:	3018      	adds	r0, #24
   33b68:	f000 f9d8 	bl	33f1c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   33b6c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33b6e:	4817      	ldr	r0, [pc, #92]	; (33bcc <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   33b70:	7b53      	ldrb	r3, [r2, #13]
   33b72:	f043 0310 	orr.w	r3, r3, #16
   33b76:	7353      	strb	r3, [r2, #13]
   33b78:	f7fd ffec 	bl	31b54 <z_spin_unlock_valid>
   33b7c:	b930      	cbnz	r0, 33b8c <z_tick_sleep+0xb0>
   33b7e:	4914      	ldr	r1, [pc, #80]	; (33bd0 <z_tick_sleep+0xf4>)
   33b80:	4811      	ldr	r0, [pc, #68]	; (33bc8 <z_tick_sleep+0xec>)
   33b82:	22e1      	movs	r2, #225	; 0xe1
   33b84:	f004 fa20 	bl	37fc8 <assert_print>
   33b88:	21e1      	movs	r1, #225	; 0xe1
   33b8a:	e7d8      	b.n	33b3e <z_tick_sleep+0x62>
   33b8c:	4640      	mov	r0, r8
   33b8e:	f7f1 fcb3 	bl	254f8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   33b92:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   33b94:	7b5b      	ldrb	r3, [r3, #13]
   33b96:	06db      	lsls	r3, r3, #27
   33b98:	d508      	bpl.n	33bac <z_tick_sleep+0xd0>
   33b9a:	490a      	ldr	r1, [pc, #40]	; (33bc4 <z_tick_sleep+0xe8>)
   33b9c:	480a      	ldr	r0, [pc, #40]	; (33bc8 <z_tick_sleep+0xec>)
   33b9e:	f44f 62b5 	mov.w	r2, #1448	; 0x5a8
   33ba2:	f004 fa11 	bl	37fc8 <assert_print>
   33ba6:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   33baa:	e7a6      	b.n	33afa <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   33bac:	f007 fd68 	bl	3b680 <sys_clock_tick_get_32>
   33bb0:	1a20      	subs	r0, r4, r0
   33bb2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   33bb6:	2801      	cmp	r0, #1
   33bb8:	f173 0300 	sbcs.w	r3, r3, #0
   33bbc:	dba4      	blt.n	33b08 <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   33bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33bc2:	bf00      	nop
   33bc4:	0003f01f 	.word	0x0003f01f
   33bc8:	0003c7f8 	.word	0x0003c7f8
   33bcc:	2000418c 	.word	0x2000418c
   33bd0:	0003cc84 	.word	0x0003cc84
   33bd4:	2000413c 	.word	0x2000413c
   33bd8:	20004180 	.word	0x20004180
   33bdc:	00033851 	.word	0x00033851

00033be0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   33be0:	b508      	push	{r3, lr}
   33be2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   33be6:	b153      	cbz	r3, 33bfe <z_impl_k_sleep+0x1e>
   33be8:	4910      	ldr	r1, [pc, #64]	; (33c2c <z_impl_k_sleep+0x4c>)
   33bea:	4811      	ldr	r0, [pc, #68]	; (33c30 <z_impl_k_sleep+0x50>)
   33bec:	f240 52b7 	movw	r2, #1463	; 0x5b7
   33bf0:	f004 f9ea 	bl	37fc8 <assert_print>
   33bf4:	480d      	ldr	r0, [pc, #52]	; (33c2c <z_impl_k_sleep+0x4c>)
   33bf6:	f240 51b7 	movw	r1, #1463	; 0x5b7
   33bfa:	f004 f9de 	bl	37fba <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33bfe:	f1b1 3fff 	cmp.w	r1, #4294967295
   33c02:	bf08      	it	eq
   33c04:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   33c08:	d106      	bne.n	33c18 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   33c0a:	4b0a      	ldr	r3, [pc, #40]	; (33c34 <z_impl_k_sleep+0x54>)
   33c0c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   33c0e:	f7ff fd73 	bl	336f8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   33c12:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   33c16:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   33c18:	f7ff ff60 	bl	33adc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   33c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   33c20:	fb80 0303 	smull	r0, r3, r0, r3
   33c24:	0bc0      	lsrs	r0, r0, #15
   33c26:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   33c2a:	e7f4      	b.n	33c16 <z_impl_k_sleep+0x36>
   33c2c:	0003f01f 	.word	0x0003f01f
   33c30:	0003c7f8 	.word	0x0003c7f8
   33c34:	2000413c 	.word	0x2000413c

00033c38 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   33c38:	4b01      	ldr	r3, [pc, #4]	; (33c40 <z_impl_z_current_get+0x8>)
   33c3a:	6898      	ldr	r0, [r3, #8]
   33c3c:	4770      	bx	lr
   33c3e:	bf00      	nop
   33c40:	2000413c 	.word	0x2000413c

00033c44 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   33c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33c48:	4604      	mov	r4, r0
   33c4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   33c4e:	f3ef 8611 	mrs	r6, BASEPRI
   33c52:	f383 8812 	msr	BASEPRI_MAX, r3
   33c56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33c5a:	4847      	ldr	r0, [pc, #284]	; (33d78 <z_thread_abort+0x134>)
   33c5c:	f7fd ff6c 	bl	31b38 <z_spin_lock_valid>
   33c60:	b940      	cbnz	r0, 33c74 <z_thread_abort+0x30>
   33c62:	4946      	ldr	r1, [pc, #280]	; (33d7c <z_thread_abort+0x138>)
   33c64:	4846      	ldr	r0, [pc, #280]	; (33d80 <z_thread_abort+0x13c>)
   33c66:	2294      	movs	r2, #148	; 0x94
   33c68:	f004 f9ae 	bl	37fc8 <assert_print>
   33c6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33c6e:	4843      	ldr	r0, [pc, #268]	; (33d7c <z_thread_abort+0x138>)
   33c70:	f004 f9a3 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   33c74:	4840      	ldr	r0, [pc, #256]	; (33d78 <z_thread_abort+0x134>)
   33c76:	f7fd ff7d 	bl	31b74 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   33c7a:	7b23      	ldrb	r3, [r4, #12]
   33c7c:	07d9      	lsls	r1, r3, #31
   33c7e:	d518      	bpl.n	33cb2 <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33c80:	483d      	ldr	r0, [pc, #244]	; (33d78 <z_thread_abort+0x134>)
   33c82:	f7fd ff67 	bl	31b54 <z_spin_unlock_valid>
   33c86:	b930      	cbnz	r0, 33c96 <z_thread_abort+0x52>
   33c88:	493c      	ldr	r1, [pc, #240]	; (33d7c <z_thread_abort+0x138>)
   33c8a:	483d      	ldr	r0, [pc, #244]	; (33d80 <z_thread_abort+0x13c>)
   33c8c:	22c2      	movs	r2, #194	; 0xc2
   33c8e:	f004 f99b 	bl	37fc8 <assert_print>
   33c92:	21c2      	movs	r1, #194	; 0xc2
   33c94:	e7eb      	b.n	33c6e <z_thread_abort+0x2a>
	__asm__ volatile(
   33c96:	f386 8811 	msr	BASEPRI, r6
   33c9a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   33c9e:	4939      	ldr	r1, [pc, #228]	; (33d84 <z_thread_abort+0x140>)
   33ca0:	4837      	ldr	r0, [pc, #220]	; (33d80 <z_thread_abort+0x13c>)
   33ca2:	f240 62c3 	movw	r2, #1731	; 0x6c3
   33ca6:	f004 f98f 	bl	37fc8 <assert_print>
   33caa:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   33cae:	4835      	ldr	r0, [pc, #212]	; (33d84 <z_thread_abort+0x140>)
   33cb0:	e7de      	b.n	33c70 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   33cb2:	7b63      	ldrb	r3, [r4, #13]
   33cb4:	071a      	lsls	r2, r3, #28
   33cb6:	d50a      	bpl.n	33cce <z_thread_abort+0x8a>
   33cb8:	482f      	ldr	r0, [pc, #188]	; (33d78 <z_thread_abort+0x134>)
   33cba:	f7fd ff4b 	bl	31b54 <z_spin_unlock_valid>
   33cbe:	2800      	cmp	r0, #0
   33cc0:	d0e2      	beq.n	33c88 <z_thread_abort+0x44>
   33cc2:	f386 8811 	msr	BASEPRI, r6
   33cc6:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   33cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   33cce:	f023 0220 	bic.w	r2, r3, #32
   33cd2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   33cd6:	09d2      	lsrs	r2, r2, #7
   33cd8:	d12a      	bne.n	33d30 <z_thread_abort+0xec>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   33cda:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   33cdc:	68a3      	ldr	r3, [r4, #8]
   33cde:	b113      	cbz	r3, 33ce6 <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   33ce0:	4620      	mov	r0, r4
   33ce2:	f7ff fd5f 	bl	337a4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   33ce6:	f104 0018 	add.w	r0, r4, #24
   33cea:	f000 f9c3 	bl	34074 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   33cee:	f104 0758 	add.w	r7, r4, #88	; 0x58
   33cf2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   33cf6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33cf8:	42bd      	cmp	r5, r7
   33cfa:	d000      	beq.n	33cfe <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   33cfc:	bb15      	cbnz	r5, 33d44 <z_thread_abort+0x100>
		update_cache(1);
   33cfe:	2001      	movs	r0, #1
   33d00:	f7ff f8a2 	bl	32e48 <update_cache>
		z_thread_monitor_exit(thread);
   33d04:	4620      	mov	r0, r4
   33d06:	f7fd ff83 	bl	31c10 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   33d0a:	4b1f      	ldr	r3, [pc, #124]	; (33d88 <z_thread_abort+0x144>)
   33d0c:	689b      	ldr	r3, [r3, #8]
   33d0e:	42a3      	cmp	r3, r4
   33d10:	d1d2      	bne.n	33cb8 <z_thread_abort+0x74>
   33d12:	f3ef 8305 	mrs	r3, IPSR
   33d16:	2b00      	cmp	r3, #0
   33d18:	d1ce      	bne.n	33cb8 <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33d1a:	4817      	ldr	r0, [pc, #92]	; (33d78 <z_thread_abort+0x134>)
   33d1c:	f7fd ff1a 	bl	31b54 <z_spin_unlock_valid>
   33d20:	b9e8      	cbnz	r0, 33d5e <z_thread_abort+0x11a>
   33d22:	4916      	ldr	r1, [pc, #88]	; (33d7c <z_thread_abort+0x138>)
   33d24:	4816      	ldr	r0, [pc, #88]	; (33d80 <z_thread_abort+0x13c>)
   33d26:	22e1      	movs	r2, #225	; 0xe1
   33d28:	f004 f94e 	bl	37fc8 <assert_print>
   33d2c:	21e1      	movs	r1, #225	; 0xe1
   33d2e:	e79e      	b.n	33c6e <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33d30:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   33d34:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   33d38:	4814      	ldr	r0, [pc, #80]	; (33d8c <z_thread_abort+0x148>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33d3a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33d3c:	4621      	mov	r1, r4
   33d3e:	f7ff fac5 	bl	332cc <z_priq_dumb_remove>
}
   33d42:	e7cb      	b.n	33cdc <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   33d44:	4628      	mov	r0, r5
   33d46:	f7ff fd2d 	bl	337a4 <unpend_thread_no_timeout>
   33d4a:	f105 0018 	add.w	r0, r5, #24
   33d4e:	f000 f991 	bl	34074 <z_abort_timeout>
   33d52:	f8c5 8090 	str.w	r8, [r5, #144]	; 0x90
		ready_thread(thread);
   33d56:	4628      	mov	r0, r5
   33d58:	f7ff f8a2 	bl	32ea0 <ready_thread>
   33d5c:	e7cb      	b.n	33cf6 <z_thread_abort+0xb2>
   33d5e:	4630      	mov	r0, r6
   33d60:	f7f1 fbca 	bl	254f8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   33d64:	4907      	ldr	r1, [pc, #28]	; (33d84 <z_thread_abort+0x140>)
   33d66:	4806      	ldr	r0, [pc, #24]	; (33d80 <z_thread_abort+0x13c>)
   33d68:	f240 62f2 	movw	r2, #1778	; 0x6f2
   33d6c:	f004 f92c 	bl	37fc8 <assert_print>
   33d70:	f240 61f2 	movw	r1, #1778	; 0x6f2
   33d74:	e79b      	b.n	33cae <z_thread_abort+0x6a>
   33d76:	bf00      	nop
   33d78:	2000418c 	.word	0x2000418c
   33d7c:	0003cc84 	.word	0x0003cc84
   33d80:	0003c7f8 	.word	0x0003c7f8
   33d84:	0003f01f 	.word	0x0003f01f
   33d88:	2000413c 	.word	0x2000413c
   33d8c:	2000415c 	.word	0x2000415c

00033d90 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   33d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33d94:	4606      	mov	r6, r0
   33d96:	4688      	mov	r8, r1
   33d98:	4617      	mov	r7, r2
	__asm__ volatile(
   33d9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   33d9e:	f3ef 8911 	mrs	r9, BASEPRI
   33da2:	f383 8812 	msr	BASEPRI_MAX, r3
   33da6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33daa:	481c      	ldr	r0, [pc, #112]	; (33e1c <z_sched_wake+0x8c>)
   33dac:	f7fd fec4 	bl	31b38 <z_spin_lock_valid>
   33db0:	4605      	mov	r5, r0
   33db2:	b940      	cbnz	r0, 33dc6 <z_sched_wake+0x36>
   33db4:	491a      	ldr	r1, [pc, #104]	; (33e20 <z_sched_wake+0x90>)
   33db6:	481b      	ldr	r0, [pc, #108]	; (33e24 <z_sched_wake+0x94>)
   33db8:	2294      	movs	r2, #148	; 0x94
   33dba:	f004 f905 	bl	37fc8 <assert_print>
   33dbe:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33dc0:	4817      	ldr	r0, [pc, #92]	; (33e20 <z_sched_wake+0x90>)
   33dc2:	f004 f8fa 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   33dc6:	4815      	ldr	r0, [pc, #84]	; (33e1c <z_sched_wake+0x8c>)
   33dc8:	f7fd fed4 	bl	31b74 <z_spin_lock_set_owner>
	return list->head == list;
   33dcc:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33dce:	42a6      	cmp	r6, r4
   33dd0:	d018      	beq.n	33e04 <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   33dd2:	b1cc      	cbz	r4, 33e08 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   33dd4:	4620      	mov	r0, r4
   33dd6:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
	thread->base.swap_data = data;
   33dda:	6167      	str	r7, [r4, #20]
   33ddc:	f7ff fce2 	bl	337a4 <unpend_thread_no_timeout>
   33de0:	f104 0018 	add.w	r0, r4, #24
   33de4:	f000 f946 	bl	34074 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   33de8:	4620      	mov	r0, r4
   33dea:	f7ff f859 	bl	32ea0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33dee:	480b      	ldr	r0, [pc, #44]	; (33e1c <z_sched_wake+0x8c>)
   33df0:	f7fd feb0 	bl	31b54 <z_spin_unlock_valid>
   33df4:	b950      	cbnz	r0, 33e0c <z_sched_wake+0x7c>
   33df6:	490a      	ldr	r1, [pc, #40]	; (33e20 <z_sched_wake+0x90>)
   33df8:	480a      	ldr	r0, [pc, #40]	; (33e24 <z_sched_wake+0x94>)
   33dfa:	22c2      	movs	r2, #194	; 0xc2
   33dfc:	f004 f8e4 	bl	37fc8 <assert_print>
   33e00:	21c2      	movs	r1, #194	; 0xc2
   33e02:	e7dd      	b.n	33dc0 <z_sched_wake+0x30>
	bool ret = false;
   33e04:	2500      	movs	r5, #0
   33e06:	e7f2      	b.n	33dee <z_sched_wake+0x5e>
   33e08:	4625      	mov	r5, r4
   33e0a:	e7f0      	b.n	33dee <z_sched_wake+0x5e>
	__asm__ volatile(
   33e0c:	f389 8811 	msr	BASEPRI, r9
   33e10:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   33e14:	4628      	mov	r0, r5
   33e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   33e1a:	bf00      	nop
   33e1c:	2000418c 	.word	0x2000418c
   33e20:	0003cc84 	.word	0x0003cc84
   33e24:	0003c7f8 	.word	0x0003c7f8

00033e28 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   33e28:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   33e2a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   33e2e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   33e30:	e9cd 6700 	strd	r6, r7, [sp]
   33e34:	f7ff fb8a 	bl	3354c <z_pend_curr>

	if (data != NULL) {
   33e38:	b11c      	cbz	r4, 33e42 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   33e3a:	4b03      	ldr	r3, [pc, #12]	; (33e48 <z_sched_wait+0x20>)
   33e3c:	689b      	ldr	r3, [r3, #8]
   33e3e:	695b      	ldr	r3, [r3, #20]
   33e40:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   33e42:	b002      	add	sp, #8
   33e44:	bdd0      	pop	{r4, r6, r7, pc}
   33e46:	bf00      	nop
   33e48:	2000413c 	.word	0x2000413c

00033e4c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   33e4c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   33e4e:	4806      	ldr	r0, [pc, #24]	; (33e68 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   33e50:	4a06      	ldr	r2, [pc, #24]	; (33e6c <z_data_copy+0x20>)
   33e52:	4907      	ldr	r1, [pc, #28]	; (33e70 <z_data_copy+0x24>)
   33e54:	1a12      	subs	r2, r2, r0
   33e56:	f007 faee 	bl	3b436 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   33e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   33e5e:	4a05      	ldr	r2, [pc, #20]	; (33e74 <z_data_copy+0x28>)
   33e60:	4905      	ldr	r1, [pc, #20]	; (33e78 <z_data_copy+0x2c>)
   33e62:	4806      	ldr	r0, [pc, #24]	; (33e7c <z_data_copy+0x30>)
   33e64:	f007 bae7 	b.w	3b436 <z_early_memcpy>
   33e68:	20000000 	.word	0x20000000
   33e6c:	20000cd0 	.word	0x20000cd0
   33e70:	0003f104 	.word	0x0003f104
   33e74:	00000000 	.word	0x00000000
   33e78:	0003f104 	.word	0x0003f104
   33e7c:	20000000 	.word	0x20000000

00033e80 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   33e80:	4b03      	ldr	r3, [pc, #12]	; (33e90 <elapsed+0x10>)
   33e82:	681b      	ldr	r3, [r3, #0]
   33e84:	b90b      	cbnz	r3, 33e8a <elapsed+0xa>
   33e86:	f7fa badd 	b.w	2e444 <sys_clock_elapsed>
}
   33e8a:	2000      	movs	r0, #0
   33e8c:	4770      	bx	lr
   33e8e:	bf00      	nop
   33e90:	20004190 	.word	0x20004190

00033e94 <next_timeout>:

static int32_t next_timeout(void)
{
   33e94:	b510      	push	{r4, lr}
	return list->head == list;
   33e96:	4b11      	ldr	r3, [pc, #68]	; (33edc <next_timeout+0x48>)
   33e98:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33e9a:	429c      	cmp	r4, r3
   33e9c:	d10a      	bne.n	33eb4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   33e9e:	f7ff ffef 	bl	33e80 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   33ea2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   33ea6:	4b0e      	ldr	r3, [pc, #56]	; (33ee0 <next_timeout+0x4c>)
   33ea8:	691b      	ldr	r3, [r3, #16]
   33eaa:	b113      	cbz	r3, 33eb2 <next_timeout+0x1e>
   33eac:	4298      	cmp	r0, r3
   33eae:	bfa8      	it	ge
   33eb0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   33eb2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   33eb4:	f7ff ffe4 	bl	33e80 <elapsed>
	if ((to == NULL) ||
   33eb8:	2c00      	cmp	r4, #0
   33eba:	d0f2      	beq.n	33ea2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   33ebc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   33ec0:	1a1b      	subs	r3, r3, r0
   33ec2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   33ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   33eca:	f172 0100 	sbcs.w	r1, r2, #0
   33ece:	dae8      	bge.n	33ea2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   33ed0:	2a00      	cmp	r2, #0
   33ed2:	bfac      	ite	ge
   33ed4:	4618      	movge	r0, r3
   33ed6:	2000      	movlt	r0, #0
   33ed8:	e7e5      	b.n	33ea6 <next_timeout+0x12>
   33eda:	bf00      	nop
   33edc:	200008cc 	.word	0x200008cc
   33ee0:	2000413c 	.word	0x2000413c

00033ee4 <remove_timeout>:
{
   33ee4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   33ee6:	b170      	cbz	r0, 33f06 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   33ee8:	4b0b      	ldr	r3, [pc, #44]	; (33f18 <remove_timeout+0x34>)
   33eea:	685b      	ldr	r3, [r3, #4]
   33eec:	4298      	cmp	r0, r3
   33eee:	d00a      	beq.n	33f06 <remove_timeout+0x22>
   33ef0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   33ef2:	b143      	cbz	r3, 33f06 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   33ef4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   33ef8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   33efc:	1912      	adds	r2, r2, r4
   33efe:	eb41 0105 	adc.w	r1, r1, r5
   33f02:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   33f06:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   33f0a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   33f0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   33f0e:	2300      	movs	r3, #0
	node->prev = NULL;
   33f10:	e9c0 3300 	strd	r3, r3, [r0]
}
   33f14:	bd30      	pop	{r4, r5, pc}
   33f16:	bf00      	nop
   33f18:	200008cc 	.word	0x200008cc

00033f1c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   33f20:	bf08      	it	eq
   33f22:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   33f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33f2a:	4604      	mov	r4, r0
   33f2c:	4692      	mov	sl, r2
   33f2e:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33f30:	f000 8090 	beq.w	34054 <z_add_timeout+0x138>
	return node->next != NULL;
   33f34:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   33f36:	b146      	cbz	r6, 33f4a <z_add_timeout+0x2e>
   33f38:	4947      	ldr	r1, [pc, #284]	; (34058 <z_add_timeout+0x13c>)
   33f3a:	4848      	ldr	r0, [pc, #288]	; (3405c <z_add_timeout+0x140>)
   33f3c:	2263      	movs	r2, #99	; 0x63
   33f3e:	f004 f843 	bl	37fc8 <assert_print>
   33f42:	4845      	ldr	r0, [pc, #276]	; (34058 <z_add_timeout+0x13c>)
   33f44:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33f46:	f004 f838 	bl	37fba <assert_post_action>
	to->fn = fn;
   33f4a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   33f4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   33f50:	f3ef 8711 	mrs	r7, BASEPRI
   33f54:	f383 8812 	msr	BASEPRI_MAX, r3
   33f58:	f3bf 8f6f 	isb	sy
   33f5c:	4840      	ldr	r0, [pc, #256]	; (34060 <z_add_timeout+0x144>)
   33f5e:	f7fd fdeb 	bl	31b38 <z_spin_lock_valid>
   33f62:	b938      	cbnz	r0, 33f74 <z_add_timeout+0x58>
   33f64:	493f      	ldr	r1, [pc, #252]	; (34064 <z_add_timeout+0x148>)
   33f66:	483d      	ldr	r0, [pc, #244]	; (3405c <z_add_timeout+0x140>)
   33f68:	2294      	movs	r2, #148	; 0x94
   33f6a:	f004 f82d 	bl	37fc8 <assert_print>
   33f6e:	2194      	movs	r1, #148	; 0x94
   33f70:	483c      	ldr	r0, [pc, #240]	; (34064 <z_add_timeout+0x148>)
   33f72:	e7e8      	b.n	33f46 <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   33f74:	483a      	ldr	r0, [pc, #232]	; (34060 <z_add_timeout+0x144>)
   33f76:	f7fd fdfd 	bl	31b74 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   33f7a:	f1ba 3fff 	cmp.w	sl, #4294967295
   33f7e:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   33f82:	da23      	bge.n	33fcc <z_add_timeout+0xb0>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   33f84:	4938      	ldr	r1, [pc, #224]	; (34068 <z_add_timeout+0x14c>)
   33f86:	e9d1 2000 	ldrd	r2, r0, [r1]
   33f8a:	f06f 0301 	mvn.w	r3, #1
   33f8e:	1a9b      	subs	r3, r3, r2
   33f90:	f04f 32ff 	mov.w	r2, #4294967295
   33f94:	eb62 0000 	sbc.w	r0, r2, r0
   33f98:	ebb3 030a 	subs.w	r3, r3, sl
   33f9c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   33fa0:	2b01      	cmp	r3, #1
   33fa2:	f170 0200 	sbcs.w	r2, r0, #0
   33fa6:	da01      	bge.n	33fac <z_add_timeout+0x90>
   33fa8:	2301      	movs	r3, #1
   33faa:	4630      	mov	r0, r6
   33fac:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   33fb0:	4b2e      	ldr	r3, [pc, #184]	; (3406c <z_add_timeout+0x150>)
   33fb2:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   33fb4:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33fb8:	429a      	cmp	r2, r3
   33fba:	bf18      	it	ne
   33fbc:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   33fbe:	b986      	cbnz	r6, 33fe2 <z_add_timeout+0xc6>
	node->prev = tail;
   33fc0:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   33fc4:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   33fc8:	605c      	str	r4, [r3, #4]
}
   33fca:	e01c      	b.n	34006 <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   33fcc:	f7ff ff58 	bl	33e80 <elapsed>
   33fd0:	f11a 0801 	adds.w	r8, sl, #1
   33fd4:	f145 0500 	adc.w	r5, r5, #0
   33fd8:	eb18 0300 	adds.w	r3, r8, r0
   33fdc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   33fe0:	e7e4      	b.n	33fac <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   33fe2:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   33fe6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   33fea:	428a      	cmp	r2, r1
   33fec:	eb70 0e05 	sbcs.w	lr, r0, r5
   33ff0:	da23      	bge.n	3403a <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   33ff2:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   33ff4:	6872      	ldr	r2, [r6, #4]
   33ff6:	eb65 0500 	sbc.w	r5, r5, r0
   33ffa:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   33ffe:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   34002:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   34004:	6074      	str	r4, [r6, #4]
	return list->head == list;
   34006:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34008:	429a      	cmp	r2, r3
   3400a:	d00b      	beq.n	34024 <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3400c:	4294      	cmp	r4, r2
   3400e:	d109      	bne.n	34024 <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   34010:	f7ff ff40 	bl	33e94 <next_timeout>

			if (next_time == 0 ||
   34014:	b118      	cbz	r0, 3401e <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   34016:	4b16      	ldr	r3, [pc, #88]	; (34070 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   34018:	691b      	ldr	r3, [r3, #16]
   3401a:	4283      	cmp	r3, r0
   3401c:	d002      	beq.n	34024 <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   3401e:	2100      	movs	r1, #0
   34020:	f7fa f9e4 	bl	2e3ec <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34024:	480e      	ldr	r0, [pc, #56]	; (34060 <z_add_timeout+0x144>)
   34026:	f7fd fd95 	bl	31b54 <z_spin_unlock_valid>
   3402a:	b978      	cbnz	r0, 3404c <z_add_timeout+0x130>
   3402c:	490d      	ldr	r1, [pc, #52]	; (34064 <z_add_timeout+0x148>)
   3402e:	480b      	ldr	r0, [pc, #44]	; (3405c <z_add_timeout+0x140>)
   34030:	22c2      	movs	r2, #194	; 0xc2
   34032:	f003 ffc9 	bl	37fc8 <assert_print>
   34036:	21c2      	movs	r1, #194	; 0xc2
   34038:	e79a      	b.n	33f70 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   3403a:	1a52      	subs	r2, r2, r1
   3403c:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   34040:	4566      	cmp	r6, ip
   34042:	e9c4 2004 	strd	r2, r0, [r4, #16]
   34046:	d0bb      	beq.n	33fc0 <z_add_timeout+0xa4>
   34048:	6836      	ldr	r6, [r6, #0]
   3404a:	e7b8      	b.n	33fbe <z_add_timeout+0xa2>
	__asm__ volatile(
   3404c:	f387 8811 	msr	BASEPRI, r7
   34050:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   34054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34058:	0003f06c 	.word	0x0003f06c
   3405c:	0003c7f8 	.word	0x0003c7f8
   34060:	20004194 	.word	0x20004194
   34064:	0003cc84 	.word	0x0003cc84
   34068:	200032e8 	.word	0x200032e8
   3406c:	200008cc 	.word	0x200008cc
   34070:	2000413c 	.word	0x2000413c

00034074 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   34074:	b538      	push	{r3, r4, r5, lr}
   34076:	4604      	mov	r4, r0
	__asm__ volatile(
   34078:	f04f 0340 	mov.w	r3, #64	; 0x40
   3407c:	f3ef 8511 	mrs	r5, BASEPRI
   34080:	f383 8812 	msr	BASEPRI_MAX, r3
   34084:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34088:	4814      	ldr	r0, [pc, #80]	; (340dc <z_abort_timeout+0x68>)
   3408a:	f7fd fd55 	bl	31b38 <z_spin_lock_valid>
   3408e:	b940      	cbnz	r0, 340a2 <z_abort_timeout+0x2e>
   34090:	4913      	ldr	r1, [pc, #76]	; (340e0 <z_abort_timeout+0x6c>)
   34092:	4814      	ldr	r0, [pc, #80]	; (340e4 <z_abort_timeout+0x70>)
   34094:	2294      	movs	r2, #148	; 0x94
   34096:	f003 ff97 	bl	37fc8 <assert_print>
   3409a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3409c:	4810      	ldr	r0, [pc, #64]	; (340e0 <z_abort_timeout+0x6c>)
   3409e:	f003 ff8c 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   340a2:	480e      	ldr	r0, [pc, #56]	; (340dc <z_abort_timeout+0x68>)
   340a4:	f7fd fd66 	bl	31b74 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   340a8:	6823      	ldr	r3, [r4, #0]
   340aa:	b173      	cbz	r3, 340ca <z_abort_timeout+0x56>
			remove_timeout(to);
   340ac:	4620      	mov	r0, r4
   340ae:	f7ff ff19 	bl	33ee4 <remove_timeout>
			ret = 0;
   340b2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   340b4:	4809      	ldr	r0, [pc, #36]	; (340dc <z_abort_timeout+0x68>)
   340b6:	f7fd fd4d 	bl	31b54 <z_spin_unlock_valid>
   340ba:	b948      	cbnz	r0, 340d0 <z_abort_timeout+0x5c>
   340bc:	4908      	ldr	r1, [pc, #32]	; (340e0 <z_abort_timeout+0x6c>)
   340be:	4809      	ldr	r0, [pc, #36]	; (340e4 <z_abort_timeout+0x70>)
   340c0:	22c2      	movs	r2, #194	; 0xc2
   340c2:	f003 ff81 	bl	37fc8 <assert_print>
   340c6:	21c2      	movs	r1, #194	; 0xc2
   340c8:	e7e8      	b.n	3409c <z_abort_timeout+0x28>
	int ret = -EINVAL;
   340ca:	f06f 0415 	mvn.w	r4, #21
   340ce:	e7f1      	b.n	340b4 <z_abort_timeout+0x40>
	__asm__ volatile(
   340d0:	f385 8811 	msr	BASEPRI, r5
   340d4:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   340d8:	4620      	mov	r0, r4
   340da:	bd38      	pop	{r3, r4, r5, pc}
   340dc:	20004194 	.word	0x20004194
   340e0:	0003cc84 	.word	0x0003cc84
   340e4:	0003c7f8 	.word	0x0003c7f8

000340e8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   340e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   340ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   340ee:	f3ef 8511 	mrs	r5, BASEPRI
   340f2:	f383 8812 	msr	BASEPRI_MAX, r3
   340f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   340fa:	4812      	ldr	r0, [pc, #72]	; (34144 <z_get_next_timeout_expiry+0x5c>)
   340fc:	f7fd fd1c 	bl	31b38 <z_spin_lock_valid>
   34100:	b940      	cbnz	r0, 34114 <z_get_next_timeout_expiry+0x2c>
   34102:	4911      	ldr	r1, [pc, #68]	; (34148 <z_get_next_timeout_expiry+0x60>)
   34104:	4811      	ldr	r0, [pc, #68]	; (3414c <z_get_next_timeout_expiry+0x64>)
   34106:	2294      	movs	r2, #148	; 0x94
   34108:	f003 ff5e 	bl	37fc8 <assert_print>
   3410c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3410e:	480e      	ldr	r0, [pc, #56]	; (34148 <z_get_next_timeout_expiry+0x60>)
   34110:	f003 ff53 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   34114:	480b      	ldr	r0, [pc, #44]	; (34144 <z_get_next_timeout_expiry+0x5c>)
   34116:	f7fd fd2d 	bl	31b74 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3411a:	f7ff febb 	bl	33e94 <next_timeout>
   3411e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34120:	4808      	ldr	r0, [pc, #32]	; (34144 <z_get_next_timeout_expiry+0x5c>)
   34122:	f7fd fd17 	bl	31b54 <z_spin_unlock_valid>
   34126:	b930      	cbnz	r0, 34136 <z_get_next_timeout_expiry+0x4e>
   34128:	4907      	ldr	r1, [pc, #28]	; (34148 <z_get_next_timeout_expiry+0x60>)
   3412a:	4808      	ldr	r0, [pc, #32]	; (3414c <z_get_next_timeout_expiry+0x64>)
   3412c:	22c2      	movs	r2, #194	; 0xc2
   3412e:	f003 ff4b 	bl	37fc8 <assert_print>
   34132:	21c2      	movs	r1, #194	; 0xc2
   34134:	e7eb      	b.n	3410e <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   34136:	f385 8811 	msr	BASEPRI, r5
   3413a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3413e:	4620      	mov	r0, r4
   34140:	bd38      	pop	{r3, r4, r5, pc}
   34142:	bf00      	nop
   34144:	20004194 	.word	0x20004194
   34148:	0003cc84 	.word	0x0003cc84
   3414c:	0003c7f8 	.word	0x0003c7f8

00034150 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   34150:	b570      	push	{r4, r5, r6, lr}
   34152:	4604      	mov	r4, r0
   34154:	460d      	mov	r5, r1
	__asm__ volatile(
   34156:	f04f 0340 	mov.w	r3, #64	; 0x40
   3415a:	f3ef 8611 	mrs	r6, BASEPRI
   3415e:	f383 8812 	msr	BASEPRI_MAX, r3
   34162:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34166:	4816      	ldr	r0, [pc, #88]	; (341c0 <z_set_timeout_expiry+0x70>)
   34168:	f7fd fce6 	bl	31b38 <z_spin_lock_valid>
   3416c:	b940      	cbnz	r0, 34180 <z_set_timeout_expiry+0x30>
   3416e:	4915      	ldr	r1, [pc, #84]	; (341c4 <z_set_timeout_expiry+0x74>)
   34170:	4815      	ldr	r0, [pc, #84]	; (341c8 <z_set_timeout_expiry+0x78>)
   34172:	2294      	movs	r2, #148	; 0x94
   34174:	f003 ff28 	bl	37fc8 <assert_print>
   34178:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3417a:	4812      	ldr	r0, [pc, #72]	; (341c4 <z_set_timeout_expiry+0x74>)
   3417c:	f003 ff1d 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   34180:	480f      	ldr	r0, [pc, #60]	; (341c0 <z_set_timeout_expiry+0x70>)
   34182:	f7fd fcf7 	bl	31b74 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   34186:	f7ff fe85 	bl	33e94 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   3418a:	2801      	cmp	r0, #1
   3418c:	dd07      	ble.n	3419e <z_set_timeout_expiry+0x4e>
   3418e:	42a0      	cmp	r0, r4
   34190:	db05      	blt.n	3419e <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   34192:	42a0      	cmp	r0, r4
   34194:	4629      	mov	r1, r5
   34196:	bfa8      	it	ge
   34198:	4620      	movge	r0, r4
   3419a:	f7fa f927 	bl	2e3ec <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3419e:	4808      	ldr	r0, [pc, #32]	; (341c0 <z_set_timeout_expiry+0x70>)
   341a0:	f7fd fcd8 	bl	31b54 <z_spin_unlock_valid>
   341a4:	b930      	cbnz	r0, 341b4 <z_set_timeout_expiry+0x64>
   341a6:	4907      	ldr	r1, [pc, #28]	; (341c4 <z_set_timeout_expiry+0x74>)
   341a8:	4807      	ldr	r0, [pc, #28]	; (341c8 <z_set_timeout_expiry+0x78>)
   341aa:	22c2      	movs	r2, #194	; 0xc2
   341ac:	f003 ff0c 	bl	37fc8 <assert_print>
   341b0:	21c2      	movs	r1, #194	; 0xc2
   341b2:	e7e2      	b.n	3417a <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   341b4:	f386 8811 	msr	BASEPRI, r6
   341b8:	f3bf 8f6f 	isb	sy
		}
	}
}
   341bc:	bd70      	pop	{r4, r5, r6, pc}
   341be:	bf00      	nop
   341c0:	20004194 	.word	0x20004194
   341c4:	0003cc84 	.word	0x0003cc84
   341c8:	0003c7f8 	.word	0x0003c7f8

000341cc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   341cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   341d0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   341d2:	f7ff f8e9 	bl	333a8 <z_time_slice>
	__asm__ volatile(
   341d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   341da:	f3ef 8711 	mrs	r7, BASEPRI
   341de:	f383 8812 	msr	BASEPRI_MAX, r3
   341e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   341e6:	483a      	ldr	r0, [pc, #232]	; (342d0 <sys_clock_announce+0x104>)
   341e8:	f7fd fca6 	bl	31b38 <z_spin_lock_valid>
   341ec:	b940      	cbnz	r0, 34200 <sys_clock_announce+0x34>
   341ee:	4939      	ldr	r1, [pc, #228]	; (342d4 <sys_clock_announce+0x108>)
   341f0:	4839      	ldr	r0, [pc, #228]	; (342d8 <sys_clock_announce+0x10c>)
   341f2:	2294      	movs	r2, #148	; 0x94
   341f4:	f003 fee8 	bl	37fc8 <assert_print>
   341f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   341fa:	4836      	ldr	r0, [pc, #216]	; (342d4 <sys_clock_announce+0x108>)
   341fc:	f003 fedd 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   34200:	4833      	ldr	r0, [pc, #204]	; (342d0 <sys_clock_announce+0x104>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   34202:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 342dc <sys_clock_announce+0x110>
	return list->head == list;
   34206:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 342e0 <sys_clock_announce+0x114>
   3420a:	f7fd fcb3 	bl	31b74 <z_spin_lock_set_owner>
   3420e:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   34212:	4a34      	ldr	r2, [pc, #208]	; (342e4 <sys_clock_announce+0x118>)
	announce_remaining = ticks;
   34214:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34218:	454d      	cmp	r5, r9
		curr_tick += dt;
   3421a:	e9d2 3c00 	ldrd	r3, ip, [r2]
   3421e:	ea4f 71e4 	mov.w	r1, r4, asr #31
   34222:	d00b      	beq.n	3423c <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   34224:	b155      	cbz	r5, 3423c <sys_clock_announce+0x70>
   34226:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   3422a:	42b4      	cmp	r4, r6
   3422c:	eb71 0e00 	sbcs.w	lr, r1, r0
   34230:	da1b      	bge.n	3426a <sys_clock_announce+0x9e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   34232:	1b36      	subs	r6, r6, r4
   34234:	eb60 0001 	sbc.w	r0, r0, r1
   34238:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   3423c:	18e3      	adds	r3, r4, r3
   3423e:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   34242:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   34244:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   34248:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   3424c:	f7ff fe22 	bl	33e94 <next_timeout>
   34250:	4621      	mov	r1, r4
   34252:	f7fa f8cb 	bl	2e3ec <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34256:	481e      	ldr	r0, [pc, #120]	; (342d0 <sys_clock_announce+0x104>)
   34258:	f7fd fc7c 	bl	31b54 <z_spin_unlock_valid>
   3425c:	b1a8      	cbz	r0, 3428a <sys_clock_announce+0xbe>
	__asm__ volatile(
   3425e:	f387 8811 	msr	BASEPRI, r7
   34262:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   34266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   3426a:	18f3      	adds	r3, r6, r3
   3426c:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   34270:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   34274:	2200      	movs	r2, #0
   34276:	2300      	movs	r3, #0
		remove_timeout(t);
   34278:	4628      	mov	r0, r5
		t->dticks = 0;
   3427a:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   3427e:	f7ff fe31 	bl	33ee4 <remove_timeout>
   34282:	4813      	ldr	r0, [pc, #76]	; (342d0 <sys_clock_announce+0x104>)
   34284:	f7fd fc66 	bl	31b54 <z_spin_unlock_valid>
   34288:	b930      	cbnz	r0, 34298 <sys_clock_announce+0xcc>
   3428a:	4912      	ldr	r1, [pc, #72]	; (342d4 <sys_clock_announce+0x108>)
   3428c:	4812      	ldr	r0, [pc, #72]	; (342d8 <sys_clock_announce+0x10c>)
   3428e:	22c2      	movs	r2, #194	; 0xc2
   34290:	f003 fe9a 	bl	37fc8 <assert_print>
   34294:	21c2      	movs	r1, #194	; 0xc2
   34296:	e7b0      	b.n	341fa <sys_clock_announce+0x2e>
   34298:	f387 8811 	msr	BASEPRI, r7
   3429c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   342a0:	68ab      	ldr	r3, [r5, #8]
   342a2:	4628      	mov	r0, r5
   342a4:	4798      	blx	r3
	__asm__ volatile(
   342a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   342aa:	f3ef 8711 	mrs	r7, BASEPRI
   342ae:	f383 8812 	msr	BASEPRI_MAX, r3
   342b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   342b6:	4806      	ldr	r0, [pc, #24]	; (342d0 <sys_clock_announce+0x104>)
   342b8:	f7fd fc3e 	bl	31b38 <z_spin_lock_valid>
   342bc:	2800      	cmp	r0, #0
   342be:	d096      	beq.n	341ee <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   342c0:	4803      	ldr	r0, [pc, #12]	; (342d0 <sys_clock_announce+0x104>)
   342c2:	f7fd fc57 	bl	31b74 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   342c6:	f8d8 4000 	ldr.w	r4, [r8]
   342ca:	1ba4      	subs	r4, r4, r6
   342cc:	e79f      	b.n	3420e <sys_clock_announce+0x42>
   342ce:	bf00      	nop
   342d0:	20004194 	.word	0x20004194
   342d4:	0003cc84 	.word	0x0003cc84
   342d8:	0003c7f8 	.word	0x0003c7f8
   342dc:	20004190 	.word	0x20004190
   342e0:	200008cc 	.word	0x200008cc
   342e4:	200032e8 	.word	0x200032e8

000342e8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   342e8:	b570      	push	{r4, r5, r6, lr}
   342ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   342ee:	f3ef 8611 	mrs	r6, BASEPRI
   342f2:	f383 8812 	msr	BASEPRI_MAX, r3
   342f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   342fa:	4815      	ldr	r0, [pc, #84]	; (34350 <sys_clock_tick_get+0x68>)
   342fc:	f7fd fc1c 	bl	31b38 <z_spin_lock_valid>
   34300:	b940      	cbnz	r0, 34314 <sys_clock_tick_get+0x2c>
   34302:	4914      	ldr	r1, [pc, #80]	; (34354 <sys_clock_tick_get+0x6c>)
   34304:	4814      	ldr	r0, [pc, #80]	; (34358 <sys_clock_tick_get+0x70>)
   34306:	2294      	movs	r2, #148	; 0x94
   34308:	f003 fe5e 	bl	37fc8 <assert_print>
   3430c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3430e:	4811      	ldr	r0, [pc, #68]	; (34354 <sys_clock_tick_get+0x6c>)
   34310:	f003 fe53 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   34314:	480e      	ldr	r0, [pc, #56]	; (34350 <sys_clock_tick_get+0x68>)
   34316:	f7fd fc2d 	bl	31b74 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   3431a:	f7ff fdb1 	bl	33e80 <elapsed>
   3431e:	4a0f      	ldr	r2, [pc, #60]	; (3435c <sys_clock_tick_get+0x74>)
   34320:	e9d2 4500 	ldrd	r4, r5, [r2]
   34324:	1904      	adds	r4, r0, r4
   34326:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3432a:	4809      	ldr	r0, [pc, #36]	; (34350 <sys_clock_tick_get+0x68>)
   3432c:	f7fd fc12 	bl	31b54 <z_spin_unlock_valid>
   34330:	b930      	cbnz	r0, 34340 <sys_clock_tick_get+0x58>
   34332:	4908      	ldr	r1, [pc, #32]	; (34354 <sys_clock_tick_get+0x6c>)
   34334:	4808      	ldr	r0, [pc, #32]	; (34358 <sys_clock_tick_get+0x70>)
   34336:	22c2      	movs	r2, #194	; 0xc2
   34338:	f003 fe46 	bl	37fc8 <assert_print>
   3433c:	21c2      	movs	r1, #194	; 0xc2
   3433e:	e7e6      	b.n	3430e <sys_clock_tick_get+0x26>
	__asm__ volatile(
   34340:	f386 8811 	msr	BASEPRI, r6
   34344:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   34348:	4620      	mov	r0, r4
   3434a:	4629      	mov	r1, r5
   3434c:	bd70      	pop	{r4, r5, r6, pc}
   3434e:	bf00      	nop
   34350:	20004194 	.word	0x20004194
   34354:	0003cc84 	.word	0x0003cc84
   34358:	0003c7f8 	.word	0x0003c7f8
   3435c:	200032e8 	.word	0x200032e8

00034360 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   34360:	b570      	push	{r4, r5, r6, lr}
   34362:	4604      	mov	r4, r0
	__asm__ volatile(
   34364:	f04f 0340 	mov.w	r3, #64	; 0x40
   34368:	f3ef 8511 	mrs	r5, BASEPRI
   3436c:	f383 8812 	msr	BASEPRI_MAX, r3
   34370:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34374:	4845      	ldr	r0, [pc, #276]	; (3448c <z_timer_expiration_handler+0x12c>)
   34376:	f7fd fbdf 	bl	31b38 <z_spin_lock_valid>
   3437a:	b940      	cbnz	r0, 3438e <z_timer_expiration_handler+0x2e>
   3437c:	4944      	ldr	r1, [pc, #272]	; (34490 <z_timer_expiration_handler+0x130>)
   3437e:	4845      	ldr	r0, [pc, #276]	; (34494 <z_timer_expiration_handler+0x134>)
   34380:	2294      	movs	r2, #148	; 0x94
   34382:	f003 fe21 	bl	37fc8 <assert_print>
   34386:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34388:	4841      	ldr	r0, [pc, #260]	; (34490 <z_timer_expiration_handler+0x130>)
   3438a:	f003 fe16 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   3438e:	483f      	ldr	r0, [pc, #252]	; (3448c <z_timer_expiration_handler+0x12c>)
   34390:	f7fd fbf0 	bl	31b74 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   34394:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   34398:	3301      	adds	r3, #1
   3439a:	f142 0200 	adc.w	r2, r2, #0
   3439e:	2b02      	cmp	r3, #2
   343a0:	f172 0200 	sbcs.w	r2, r2, #0
   343a4:	d322      	bcc.n	343ec <z_timer_expiration_handler+0x8c>
	return z_impl_k_uptime_ticks();
   343a6:	f007 f96f 	bl	3b688 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   343aa:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   343ae:	3001      	adds	r0, #1
   343b0:	f141 0100 	adc.w	r1, r1, #0
   343b4:	18c0      	adds	r0, r0, r3
   343b6:	eb41 0102 	adc.w	r1, r1, r2
   343ba:	2801      	cmp	r0, #1
   343bc:	f171 0100 	sbcs.w	r1, r1, #0
   343c0:	db24      	blt.n	3440c <z_timer_expiration_handler+0xac>
   343c2:	f007 f961 	bl	3b688 <z_impl_k_uptime_ticks>
   343c6:	3001      	adds	r0, #1
   343c8:	f141 0300 	adc.w	r3, r1, #0
   343cc:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   343d0:	1880      	adds	r0, r0, r2
   343d2:	f06f 0201 	mvn.w	r2, #1
   343d6:	eb43 0301 	adc.w	r3, r3, r1
   343da:	1a12      	subs	r2, r2, r0
   343dc:	f04f 31ff 	mov.w	r1, #4294967295
   343e0:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   343e4:	492c      	ldr	r1, [pc, #176]	; (34498 <z_timer_expiration_handler+0x138>)
   343e6:	4620      	mov	r0, r4
   343e8:	f7ff fd98 	bl	33f1c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   343ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   343ee:	3301      	adds	r3, #1
   343f0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   343f2:	6a23      	ldr	r3, [r4, #32]
   343f4:	b333      	cbz	r3, 34444 <z_timer_expiration_handler+0xe4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   343f6:	4825      	ldr	r0, [pc, #148]	; (3448c <z_timer_expiration_handler+0x12c>)
   343f8:	f7fd fbac 	bl	31b54 <z_spin_unlock_valid>
   343fc:	b958      	cbnz	r0, 34416 <z_timer_expiration_handler+0xb6>
   343fe:	4924      	ldr	r1, [pc, #144]	; (34490 <z_timer_expiration_handler+0x130>)
   34400:	4824      	ldr	r0, [pc, #144]	; (34494 <z_timer_expiration_handler+0x134>)
   34402:	22c2      	movs	r2, #194	; 0xc2
   34404:	f003 fde0 	bl	37fc8 <assert_print>
   34408:	21c2      	movs	r1, #194	; 0xc2
   3440a:	e7bd      	b.n	34388 <z_timer_expiration_handler+0x28>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   3440c:	f06f 0201 	mvn.w	r2, #1
   34410:	f04f 33ff 	mov.w	r3, #4294967295
   34414:	e7e6      	b.n	343e4 <z_timer_expiration_handler+0x84>
	__asm__ volatile(
   34416:	f385 8811 	msr	BASEPRI, r5
   3441a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   3441e:	6a23      	ldr	r3, [r4, #32]
   34420:	4620      	mov	r0, r4
   34422:	4798      	blx	r3
	__asm__ volatile(
   34424:	f04f 0340 	mov.w	r3, #64	; 0x40
   34428:	f3ef 8511 	mrs	r5, BASEPRI
   3442c:	f383 8812 	msr	BASEPRI_MAX, r3
   34430:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34434:	4815      	ldr	r0, [pc, #84]	; (3448c <z_timer_expiration_handler+0x12c>)
   34436:	f7fd fb7f 	bl	31b38 <z_spin_lock_valid>
   3443a:	2800      	cmp	r0, #0
   3443c:	d09e      	beq.n	3437c <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   3443e:	4813      	ldr	r0, [pc, #76]	; (3448c <z_timer_expiration_handler+0x12c>)
   34440:	f7fd fb98 	bl	31b74 <z_spin_lock_set_owner>
	return list->head == list;
   34444:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34448:	42a6      	cmp	r6, r4
   3444a:	d000      	beq.n	3444e <z_timer_expiration_handler+0xee>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   3444c:	b94e      	cbnz	r6, 34462 <z_timer_expiration_handler+0x102>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3444e:	480f      	ldr	r0, [pc, #60]	; (3448c <z_timer_expiration_handler+0x12c>)
   34450:	f7fd fb80 	bl	31b54 <z_spin_unlock_valid>
   34454:	2800      	cmp	r0, #0
   34456:	d0d2      	beq.n	343fe <z_timer_expiration_handler+0x9e>
	__asm__ volatile(
   34458:	f385 8811 	msr	BASEPRI, r5
   3445c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   34460:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   34462:	4630      	mov	r0, r6
   34464:	f7fe fdea 	bl	3303c <z_unpend_thread_no_timeout>
   34468:	2300      	movs	r3, #0
   3446a:	4808      	ldr	r0, [pc, #32]	; (3448c <z_timer_expiration_handler+0x12c>)
   3446c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
   34470:	f7fd fb70 	bl	31b54 <z_spin_unlock_valid>
   34474:	2800      	cmp	r0, #0
   34476:	d0c2      	beq.n	343fe <z_timer_expiration_handler+0x9e>
   34478:	f385 8811 	msr	BASEPRI, r5
   3447c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   34480:	4630      	mov	r0, r6
}
   34482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   34486:	f7fe bda5 	b.w	32fd4 <z_ready_thread>
   3448a:	bf00      	nop
   3448c:	20004198 	.word	0x20004198
   34490:	0003cc84 	.word	0x0003cc84
   34494:	0003c7f8 	.word	0x0003c7f8
   34498:	00034361 	.word	0x00034361

0003449c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   3449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   344a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   344a4:	bf08      	it	eq
   344a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   344aa:	4605      	mov	r5, r0
   344ac:	4614      	mov	r4, r2
   344ae:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   344b2:	4619      	mov	r1, r3
   344b4:	4691      	mov	r9, r2
   344b6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   344b8:	d037      	beq.n	3452a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   344ba:	f1b0 3fff 	cmp.w	r0, #4294967295
   344be:	bf08      	it	eq
   344c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   344c4:	4637      	mov	r7, r6
   344c6:	4682      	mov	sl, r0
   344c8:	d011      	beq.n	344ee <z_impl_k_timer_start+0x52>
   344ca:	ea50 0306 	orrs.w	r3, r0, r6
   344ce:	d00e      	beq.n	344ee <z_impl_k_timer_start+0x52>
   344d0:	1c72      	adds	r2, r6, #1
   344d2:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   344d6:	db0a      	blt.n	344ee <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   344d8:	2e02      	cmp	r6, #2
   344da:	4684      	mov	ip, r0
   344dc:	f170 0000 	sbcs.w	r0, r0, #0
   344e0:	bfbc      	itt	lt
   344e2:	2702      	movlt	r7, #2
   344e4:	f04f 0c00 	movlt.w	ip, #0
   344e8:	3f01      	subs	r7, #1
   344ea:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   344ee:	1c63      	adds	r3, r4, #1
   344f0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   344f4:	db0a      	blt.n	3450c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   344f6:	2c01      	cmp	r4, #1
   344f8:	f171 0300 	sbcs.w	r3, r1, #0
   344fc:	4622      	mov	r2, r4
   344fe:	bfbc      	itt	lt
   34500:	2201      	movlt	r2, #1
   34502:	2100      	movlt	r1, #0
   34504:	f112 39ff 	adds.w	r9, r2, #4294967295
   34508:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   3450c:	4628      	mov	r0, r5
   3450e:	f7ff fdb1 	bl	34074 <z_abort_timeout>
	timer->period = period;
   34512:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   34516:	2300      	movs	r3, #0
   34518:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3451a:	464a      	mov	r2, r9
   3451c:	4643      	mov	r3, r8
   3451e:	4628      	mov	r0, r5
   34520:	4903      	ldr	r1, [pc, #12]	; (34530 <z_impl_k_timer_start+0x94>)
		     duration);
}
   34522:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   34526:	f7ff bcf9 	b.w	33f1c <z_add_timeout>
}
   3452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3452e:	bf00      	nop
   34530:	00034361 	.word	0x00034361

00034534 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   34534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   34538:	2500      	movs	r5, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3453a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 346d0 <register_events+0x19c>
{
   3453e:	9301      	str	r3, [sp, #4]
   34540:	460f      	mov	r7, r1
   34542:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   34544:	4680      	mov	r8, r0
	int events_registered = 0;
   34546:	462e      	mov	r6, r5
	event->poller = NULL;
   34548:	46aa      	mov	sl, r5
	for (int ii = 0; ii < num_events; ii++) {
   3454a:	42bd      	cmp	r5, r7
   3454c:	db03      	blt.n	34556 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   3454e:	4630      	mov	r0, r6
   34550:	b003      	add	sp, #12
   34552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   34556:	f04f 0340 	mov.w	r3, #64	; 0x40
   3455a:	f3ef 8b11 	mrs	fp, BASEPRI
   3455e:	f383 8812 	msr	BASEPRI_MAX, r3
   34562:	f3bf 8f6f 	isb	sy
   34566:	4648      	mov	r0, r9
   34568:	f7fd fae6 	bl	31b38 <z_spin_lock_valid>
   3456c:	b938      	cbnz	r0, 3457e <register_events+0x4a>
   3456e:	4959      	ldr	r1, [pc, #356]	; (346d4 <register_events+0x1a0>)
   34570:	4859      	ldr	r0, [pc, #356]	; (346d8 <register_events+0x1a4>)
   34572:	2294      	movs	r2, #148	; 0x94
   34574:	f003 fd28 	bl	37fc8 <assert_print>
   34578:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3457a:	4856      	ldr	r0, [pc, #344]	; (346d4 <register_events+0x1a0>)
   3457c:	e05b      	b.n	34636 <register_events+0x102>
	z_spin_lock_set_owner(l);
   3457e:	4648      	mov	r0, r9
   34580:	f7fd faf8 	bl	31b74 <z_spin_lock_set_owner>
	switch (event->type) {
   34584:	f898 300d 	ldrb.w	r3, [r8, #13]
   34588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3458c:	2b08      	cmp	r3, #8
   3458e:	d84b      	bhi.n	34628 <register_events+0xf4>
   34590:	e8df f003 	tbb	[pc, r3]
   34594:	4a053c29 	.word	0x4a053c29
   34598:	4a4a4a25 	.word	0x4a4a4a25
   3459c:	43          	.byte	0x43
   3459d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   3459e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   345a2:	689b      	ldr	r3, [r3, #8]
   345a4:	b1fb      	cbz	r3, 345e6 <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   345a6:	2302      	movs	r3, #2
	event->state |= state;
   345a8:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   345ac:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   345b0:	f3c2 3086 	ubfx	r0, r2, #14, #7
   345b4:	4303      	orrs	r3, r0
   345b6:	f363 3294 	bfi	r2, r3, #14, #7
   345ba:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   345be:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   345c2:	4648      	mov	r0, r9
   345c4:	f7fd fac6 	bl	31b54 <z_spin_unlock_valid>
   345c8:	f108 0814 	add.w	r8, r8, #20
   345cc:	2800      	cmp	r0, #0
   345ce:	d179      	bne.n	346c4 <register_events+0x190>
   345d0:	4940      	ldr	r1, [pc, #256]	; (346d4 <register_events+0x1a0>)
   345d2:	4841      	ldr	r0, [pc, #260]	; (346d8 <register_events+0x1a4>)
   345d4:	22c2      	movs	r2, #194	; 0xc2
   345d6:	f003 fcf7 	bl	37fc8 <assert_print>
   345da:	21c2      	movs	r1, #194	; 0xc2
   345dc:	e7cd      	b.n	3457a <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   345de:	f8d8 3010 	ldr.w	r3, [r8, #16]
   345e2:	681b      	ldr	r3, [r3, #0]
   345e4:	bb4b      	cbnz	r3, 3463a <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   345e6:	9b01      	ldr	r3, [sp, #4]
   345e8:	2b00      	cmp	r3, #0
   345ea:	d1ea      	bne.n	345c2 <register_events+0x8e>
   345ec:	7823      	ldrb	r3, [r4, #0]
   345ee:	2b00      	cmp	r3, #0
   345f0:	d0e7      	beq.n	345c2 <register_events+0x8e>
	switch (event->type) {
   345f2:	f898 300d 	ldrb.w	r3, [r8, #13]
   345f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   345fa:	2b08      	cmp	r3, #8
   345fc:	d85b      	bhi.n	346b6 <register_events+0x182>
   345fe:	e8df f003 	tbb	[pc, r3]
   34602:	3f2d      	.short	0x3f2d
   34604:	5a315a1e 	.word	0x5a315a1e
   34608:	5a5a      	.short	0x5a5a
   3460a:	4c          	.byte	0x4c
   3460b:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3460c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   34610:	689b      	ldr	r3, [r3, #8]
   34612:	2b00      	cmp	r3, #0
   34614:	d0e7      	beq.n	345e6 <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   34616:	2301      	movs	r3, #1
   34618:	e7c6      	b.n	345a8 <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   3461a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   3461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   34620:	2b00      	cmp	r3, #0
   34622:	d0e0      	beq.n	345e6 <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   34624:	2310      	movs	r3, #16
   34626:	e7bf      	b.n	345a8 <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   34628:	492c      	ldr	r1, [pc, #176]	; (346dc <register_events+0x1a8>)
   3462a:	482b      	ldr	r0, [pc, #172]	; (346d8 <register_events+0x1a4>)
   3462c:	2263      	movs	r2, #99	; 0x63
   3462e:	f003 fccb 	bl	37fc8 <assert_print>
   34632:	2163      	movs	r1, #99	; 0x63
   34634:	4829      	ldr	r0, [pc, #164]	; (346dc <register_events+0x1a8>)
   34636:	f003 fcc0 	bl	37fba <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3463a:	2304      	movs	r3, #4
   3463c:	e7b4      	b.n	345a8 <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3463e:	f8d8 0010 	ldr.w	r0, [r8, #16]
   34642:	b930      	cbnz	r0, 34652 <register_events+0x11e>
   34644:	4925      	ldr	r1, [pc, #148]	; (346dc <register_events+0x1a8>)
   34646:	4824      	ldr	r0, [pc, #144]	; (346d8 <register_events+0x1a4>)
   34648:	228d      	movs	r2, #141	; 0x8d
   3464a:	f003 fcbd 	bl	37fc8 <assert_print>
   3464e:	218d      	movs	r1, #141	; 0x8d
   34650:	e7f0      	b.n	34634 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   34652:	4622      	mov	r2, r4
   34654:	4641      	mov	r1, r8
   34656:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   34658:	f007 f85b 	bl	3b712 <add_event>
	event->poller = poller;
   3465c:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   34660:	3601      	adds	r6, #1
   34662:	e7ae      	b.n	345c2 <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   34664:	f8d8 0010 	ldr.w	r0, [r8, #16]
   34668:	b930      	cbnz	r0, 34678 <register_events+0x144>
   3466a:	491c      	ldr	r1, [pc, #112]	; (346dc <register_events+0x1a8>)
   3466c:	481a      	ldr	r0, [pc, #104]	; (346d8 <register_events+0x1a4>)
   3466e:	2291      	movs	r2, #145	; 0x91
   34670:	f003 fcaa 	bl	37fc8 <assert_print>
   34674:	2191      	movs	r1, #145	; 0x91
   34676:	e7dd      	b.n	34634 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   34678:	4622      	mov	r2, r4
   3467a:	4641      	mov	r1, r8
   3467c:	3014      	adds	r0, #20
   3467e:	e7eb      	b.n	34658 <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   34680:	f8d8 0010 	ldr.w	r0, [r8, #16]
   34684:	b930      	cbnz	r0, 34694 <register_events+0x160>
   34686:	4915      	ldr	r1, [pc, #84]	; (346dc <register_events+0x1a8>)
   34688:	4813      	ldr	r0, [pc, #76]	; (346d8 <register_events+0x1a4>)
   3468a:	2295      	movs	r2, #149	; 0x95
   3468c:	f003 fc9c 	bl	37fc8 <assert_print>
   34690:	2195      	movs	r1, #149	; 0x95
   34692:	e7cf      	b.n	34634 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   34694:	4622      	mov	r2, r4
   34696:	4641      	mov	r1, r8
   34698:	e7de      	b.n	34658 <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3469a:	f8d8 0010 	ldr.w	r0, [r8, #16]
   3469e:	b930      	cbnz	r0, 346ae <register_events+0x17a>
   346a0:	490e      	ldr	r1, [pc, #56]	; (346dc <register_events+0x1a8>)
   346a2:	480d      	ldr	r0, [pc, #52]	; (346d8 <register_events+0x1a4>)
   346a4:	2299      	movs	r2, #153	; 0x99
   346a6:	f003 fc8f 	bl	37fc8 <assert_print>
   346aa:	2199      	movs	r1, #153	; 0x99
   346ac:	e7c2      	b.n	34634 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   346ae:	4622      	mov	r2, r4
   346b0:	4641      	mov	r1, r8
   346b2:	3028      	adds	r0, #40	; 0x28
   346b4:	e7d0      	b.n	34658 <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   346b6:	4909      	ldr	r1, [pc, #36]	; (346dc <register_events+0x1a8>)
   346b8:	4807      	ldr	r0, [pc, #28]	; (346d8 <register_events+0x1a4>)
   346ba:	22a6      	movs	r2, #166	; 0xa6
   346bc:	f003 fc84 	bl	37fc8 <assert_print>
   346c0:	21a6      	movs	r1, #166	; 0xa6
   346c2:	e7b7      	b.n	34634 <register_events+0x100>
	__asm__ volatile(
   346c4:	f38b 8811 	msr	BASEPRI, fp
   346c8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   346cc:	3501      	adds	r5, #1
   346ce:	e73c      	b.n	3454a <register_events+0x16>
   346d0:	2000419c 	.word	0x2000419c
   346d4:	0003cc84 	.word	0x0003cc84
   346d8:	0003c7f8 	.word	0x0003c7f8
   346dc:	0003f090 	.word	0x0003f090

000346e0 <clear_event_registrations>:
{
   346e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   346e4:	2314      	movs	r3, #20
   346e6:	4f3e      	ldr	r7, [pc, #248]	; (347e0 <clear_event_registrations+0x100>)
   346e8:	4615      	mov	r5, r2
	while (num_events--) {
   346ea:	460c      	mov	r4, r1
   346ec:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   346f0:	2600      	movs	r6, #0
	while (num_events--) {
   346f2:	b90c      	cbnz	r4, 346f8 <clear_event_registrations+0x18>
}
   346f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   346f8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   346fc:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   34700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   34704:	f1a0 0814 	sub.w	r8, r0, #20
   34708:	2b08      	cmp	r3, #8
   3470a:	d830      	bhi.n	3476e <clear_event_registrations+0x8e>
   3470c:	e8df f003 	tbb	[pc, r3]
   34710:	2f051b3f 	.word	0x2f051b3f
   34714:	2f2f2f11 	.word	0x2f2f2f11
   34718:	25          	.byte	0x25
   34719:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3471a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   3471e:	bb6b      	cbnz	r3, 3477c <clear_event_registrations+0x9c>
   34720:	4930      	ldr	r1, [pc, #192]	; (347e4 <clear_event_registrations+0x104>)
   34722:	4831      	ldr	r0, [pc, #196]	; (347e8 <clear_event_registrations+0x108>)
   34724:	22b6      	movs	r2, #182	; 0xb6
   34726:	f003 fc4f 	bl	37fc8 <assert_print>
   3472a:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3472c:	482d      	ldr	r0, [pc, #180]	; (347e4 <clear_event_registrations+0x104>)
   3472e:	f003 fc44 	bl	37fba <assert_post_action>
   34732:	f850 3c04 	ldr.w	r3, [r0, #-4]
   34736:	bb0b      	cbnz	r3, 3477c <clear_event_registrations+0x9c>
   34738:	492a      	ldr	r1, [pc, #168]	; (347e4 <clear_event_registrations+0x104>)
   3473a:	482b      	ldr	r0, [pc, #172]	; (347e8 <clear_event_registrations+0x108>)
   3473c:	22ba      	movs	r2, #186	; 0xba
   3473e:	f003 fc43 	bl	37fc8 <assert_print>
   34742:	21ba      	movs	r1, #186	; 0xba
   34744:	e7f2      	b.n	3472c <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   34746:	f850 3c04 	ldr.w	r3, [r0, #-4]
   3474a:	b9bb      	cbnz	r3, 3477c <clear_event_registrations+0x9c>
   3474c:	4925      	ldr	r1, [pc, #148]	; (347e4 <clear_event_registrations+0x104>)
   3474e:	4826      	ldr	r0, [pc, #152]	; (347e8 <clear_event_registrations+0x108>)
   34750:	22be      	movs	r2, #190	; 0xbe
   34752:	f003 fc39 	bl	37fc8 <assert_print>
   34756:	21be      	movs	r1, #190	; 0xbe
   34758:	e7e8      	b.n	3472c <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3475a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   3475e:	b96b      	cbnz	r3, 3477c <clear_event_registrations+0x9c>
   34760:	4920      	ldr	r1, [pc, #128]	; (347e4 <clear_event_registrations+0x104>)
   34762:	4821      	ldr	r0, [pc, #132]	; (347e8 <clear_event_registrations+0x108>)
   34764:	22c2      	movs	r2, #194	; 0xc2
   34766:	f003 fc2f 	bl	37fc8 <assert_print>
   3476a:	21c2      	movs	r1, #194	; 0xc2
   3476c:	e7de      	b.n	3472c <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   3476e:	491d      	ldr	r1, [pc, #116]	; (347e4 <clear_event_registrations+0x104>)
   34770:	481d      	ldr	r0, [pc, #116]	; (347e8 <clear_event_registrations+0x108>)
   34772:	22cf      	movs	r2, #207	; 0xcf
   34774:	f003 fc28 	bl	37fc8 <assert_print>
   34778:	21cf      	movs	r1, #207	; 0xcf
   3477a:	e7d7      	b.n	3472c <clear_event_registrations+0x4c>
	return node->next != NULL;
   3477c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   34780:	b12b      	cbz	r3, 3478e <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   34782:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   34786:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   34788:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   3478a:	e940 6605 	strd	r6, r6, [r0, #-20]
   3478e:	4638      	mov	r0, r7
   34790:	f7fd f9e0 	bl	31b54 <z_spin_unlock_valid>
   34794:	b938      	cbnz	r0, 347a6 <clear_event_registrations+0xc6>
   34796:	4915      	ldr	r1, [pc, #84]	; (347ec <clear_event_registrations+0x10c>)
   34798:	4813      	ldr	r0, [pc, #76]	; (347e8 <clear_event_registrations+0x108>)
   3479a:	22c2      	movs	r2, #194	; 0xc2
   3479c:	f003 fc14 	bl	37fc8 <assert_print>
   347a0:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   347a2:	4812      	ldr	r0, [pc, #72]	; (347ec <clear_event_registrations+0x10c>)
   347a4:	e7c3      	b.n	3472e <clear_event_registrations+0x4e>
   347a6:	f385 8811 	msr	BASEPRI, r5
   347aa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   347ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   347b2:	f3ef 8511 	mrs	r5, BASEPRI
   347b6:	f383 8812 	msr	BASEPRI_MAX, r3
   347ba:	f3bf 8f6f 	isb	sy
   347be:	4638      	mov	r0, r7
   347c0:	f7fd f9ba 	bl	31b38 <z_spin_lock_valid>
   347c4:	3c01      	subs	r4, #1
   347c6:	b930      	cbnz	r0, 347d6 <clear_event_registrations+0xf6>
   347c8:	4908      	ldr	r1, [pc, #32]	; (347ec <clear_event_registrations+0x10c>)
   347ca:	4807      	ldr	r0, [pc, #28]	; (347e8 <clear_event_registrations+0x108>)
   347cc:	2294      	movs	r2, #148	; 0x94
   347ce:	f003 fbfb 	bl	37fc8 <assert_print>
   347d2:	2194      	movs	r1, #148	; 0x94
   347d4:	e7e5      	b.n	347a2 <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   347d6:	4638      	mov	r0, r7
   347d8:	f7fd f9cc 	bl	31b74 <z_spin_lock_set_owner>
	return k;
   347dc:	4640      	mov	r0, r8
   347de:	e788      	b.n	346f2 <clear_event_registrations+0x12>
   347e0:	2000419c 	.word	0x2000419c
   347e4:	0003f090 	.word	0x0003f090
   347e8:	0003c7f8 	.word	0x0003c7f8
   347ec:	0003cc84 	.word	0x0003cc84

000347f0 <k_poll_event_init>:
{
   347f0:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   347f2:	b142      	cbz	r2, 34806 <k_poll_event_init+0x16>
   347f4:	4911      	ldr	r1, [pc, #68]	; (3483c <k_poll_event_init+0x4c>)
   347f6:	4812      	ldr	r0, [pc, #72]	; (34840 <k_poll_event_init+0x50>)
   347f8:	222d      	movs	r2, #45	; 0x2d
   347fa:	f003 fbe5 	bl	37fc8 <assert_print>
   347fe:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   34800:	480e      	ldr	r0, [pc, #56]	; (3483c <k_poll_event_init+0x4c>)
   34802:	f003 fbda 	bl	37fba <assert_post_action>
   34806:	293f      	cmp	r1, #63	; 0x3f
   34808:	d906      	bls.n	34818 <k_poll_event_init+0x28>
   3480a:	490c      	ldr	r1, [pc, #48]	; (3483c <k_poll_event_init+0x4c>)
   3480c:	480c      	ldr	r0, [pc, #48]	; (34840 <k_poll_event_init+0x50>)
   3480e:	222f      	movs	r2, #47	; 0x2f
   34810:	f003 fbda 	bl	37fc8 <assert_print>
   34814:	212f      	movs	r1, #47	; 0x2f
   34816:	e7f3      	b.n	34800 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   34818:	b933      	cbnz	r3, 34828 <k_poll_event_init+0x38>
   3481a:	4908      	ldr	r1, [pc, #32]	; (3483c <k_poll_event_init+0x4c>)
   3481c:	4808      	ldr	r0, [pc, #32]	; (34840 <k_poll_event_init+0x50>)
   3481e:	2230      	movs	r2, #48	; 0x30
   34820:	f003 fbd2 	bl	37fc8 <assert_print>
   34824:	2130      	movs	r1, #48	; 0x30
   34826:	e7eb      	b.n	34800 <k_poll_event_init+0x10>
	event->poller = NULL;
   34828:	6082      	str	r2, [r0, #8]
	event->type = type;
   3482a:	0209      	lsls	r1, r1, #8
   3482c:	7b02      	ldrb	r2, [r0, #12]
   3482e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   34832:	4311      	orrs	r1, r2
	event->obj = obj;
   34834:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   34838:	bd08      	pop	{r3, pc}
   3483a:	bf00      	nop
   3483c:	0003f090 	.word	0x0003f090
   34840:	0003c7f8 	.word	0x0003c7f8

00034844 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   34844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34848:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   3484a:	4b51      	ldr	r3, [pc, #324]	; (34990 <z_impl_k_poll+0x14c>)
   3484c:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   34850:	2301      	movs	r3, #1
{
   34852:	4617      	mov	r7, r2
   34854:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   34856:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   3485a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   3485e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   34862:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   34866:	f1bb 0f00 	cmp.w	fp, #0
   3486a:	d00a      	beq.n	34882 <z_impl_k_poll+0x3e>
   3486c:	4949      	ldr	r1, [pc, #292]	; (34994 <z_impl_k_poll+0x150>)
   3486e:	484a      	ldr	r0, [pc, #296]	; (34998 <z_impl_k_poll+0x154>)
   34870:	f240 122d 	movw	r2, #301	; 0x12d
   34874:	f003 fba8 	bl	37fc8 <assert_print>
   34878:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   3487c:	4845      	ldr	r0, [pc, #276]	; (34994 <z_impl_k_poll+0x150>)
   3487e:	f003 fb9c 	bl	37fba <assert_post_action>
   34882:	b940      	cbnz	r0, 34896 <z_impl_k_poll+0x52>
   34884:	4943      	ldr	r1, [pc, #268]	; (34994 <z_impl_k_poll+0x150>)
   34886:	4844      	ldr	r0, [pc, #272]	; (34998 <z_impl_k_poll+0x154>)
   34888:	f44f 7297 	mov.w	r2, #302	; 0x12e
   3488c:	f003 fb9c 	bl	37fc8 <assert_print>
   34890:	f44f 7197 	mov.w	r1, #302	; 0x12e
   34894:	e7f2      	b.n	3487c <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   34896:	2900      	cmp	r1, #0
   34898:	da08      	bge.n	348ac <z_impl_k_poll+0x68>
   3489a:	493e      	ldr	r1, [pc, #248]	; (34994 <z_impl_k_poll+0x150>)
   3489c:	483e      	ldr	r0, [pc, #248]	; (34998 <z_impl_k_poll+0x154>)
   3489e:	f240 122f 	movw	r2, #303	; 0x12f
   348a2:	f003 fb91 	bl	37fc8 <assert_print>
   348a6:	f240 112f 	movw	r1, #303	; 0x12f
   348aa:	e7e7      	b.n	3487c <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   348ac:	ea57 0306 	orrs.w	r3, r7, r6
   348b0:	bf0c      	ite	eq
   348b2:	2301      	moveq	r3, #1
   348b4:	2300      	movne	r3, #0
   348b6:	f7ff fe3d 	bl	34534 <register_events>
   348ba:	4681      	mov	r9, r0
   348bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   348c0:	f3ef 8a11 	mrs	sl, BASEPRI
   348c4:	f383 8812 	msr	BASEPRI_MAX, r3
   348c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   348cc:	4833      	ldr	r0, [pc, #204]	; (3499c <z_impl_k_poll+0x158>)
   348ce:	f7fd f933 	bl	31b38 <z_spin_lock_valid>
   348d2:	b938      	cbnz	r0, 348e4 <z_impl_k_poll+0xa0>
   348d4:	4932      	ldr	r1, [pc, #200]	; (349a0 <z_impl_k_poll+0x15c>)
   348d6:	4830      	ldr	r0, [pc, #192]	; (34998 <z_impl_k_poll+0x154>)
   348d8:	2294      	movs	r2, #148	; 0x94
   348da:	f003 fb75 	bl	37fc8 <assert_print>
   348de:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   348e0:	482f      	ldr	r0, [pc, #188]	; (349a0 <z_impl_k_poll+0x15c>)
   348e2:	e7cc      	b.n	3487e <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   348e4:	482d      	ldr	r0, [pc, #180]	; (3499c <z_impl_k_poll+0x158>)
   348e6:	f7fd f945 	bl	31b74 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   348ea:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   348ee:	b9bc      	cbnz	r4, 34920 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   348f0:	4628      	mov	r0, r5
   348f2:	4652      	mov	r2, sl
   348f4:	4649      	mov	r1, r9
   348f6:	f7ff fef3 	bl	346e0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   348fa:	4828      	ldr	r0, [pc, #160]	; (3499c <z_impl_k_poll+0x158>)
   348fc:	f7fd f92a 	bl	31b54 <z_spin_unlock_valid>
   34900:	b930      	cbnz	r0, 34910 <z_impl_k_poll+0xcc>
   34902:	4927      	ldr	r1, [pc, #156]	; (349a0 <z_impl_k_poll+0x15c>)
   34904:	4824      	ldr	r0, [pc, #144]	; (34998 <z_impl_k_poll+0x154>)
   34906:	22c2      	movs	r2, #194	; 0xc2
   34908:	f003 fb5e 	bl	37fc8 <assert_print>
   3490c:	21c2      	movs	r1, #194	; 0xc2
   3490e:	e7e7      	b.n	348e0 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   34910:	f38a 8811 	msr	BASEPRI, sl
   34914:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   34918:	4620      	mov	r0, r4
   3491a:	b003      	add	sp, #12
   3491c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   34920:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   34924:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   34928:	d10b      	bne.n	34942 <z_impl_k_poll+0xfe>
   3492a:	481c      	ldr	r0, [pc, #112]	; (3499c <z_impl_k_poll+0x158>)
   3492c:	f7fd f912 	bl	31b54 <z_spin_unlock_valid>
   34930:	2800      	cmp	r0, #0
   34932:	d0e6      	beq.n	34902 <z_impl_k_poll+0xbe>
   34934:	f38a 8811 	msr	BASEPRI, sl
   34938:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3493c:	f06f 040a 	mvn.w	r4, #10
   34940:	e7ea      	b.n	34918 <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   34942:	e9cd 7600 	strd	r7, r6, [sp]
   34946:	4a17      	ldr	r2, [pc, #92]	; (349a4 <z_impl_k_poll+0x160>)
   34948:	4814      	ldr	r0, [pc, #80]	; (3499c <z_impl_k_poll+0x158>)
   3494a:	4651      	mov	r1, sl
   3494c:	f7fe fdfe 	bl	3354c <z_pend_curr>
   34950:	4604      	mov	r4, r0
	__asm__ volatile(
   34952:	f04f 0340 	mov.w	r3, #64	; 0x40
   34956:	f3ef 8611 	mrs	r6, BASEPRI
   3495a:	f383 8812 	msr	BASEPRI_MAX, r3
   3495e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34962:	480e      	ldr	r0, [pc, #56]	; (3499c <z_impl_k_poll+0x158>)
   34964:	f7fd f8e8 	bl	31b38 <z_spin_lock_valid>
   34968:	2800      	cmp	r0, #0
   3496a:	d0b3      	beq.n	348d4 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   3496c:	480b      	ldr	r0, [pc, #44]	; (3499c <z_impl_k_poll+0x158>)
   3496e:	f7fd f901 	bl	31b74 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   34972:	4628      	mov	r0, r5
   34974:	4632      	mov	r2, r6
   34976:	4649      	mov	r1, r9
   34978:	f7ff feb2 	bl	346e0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3497c:	4807      	ldr	r0, [pc, #28]	; (3499c <z_impl_k_poll+0x158>)
   3497e:	f7fd f8e9 	bl	31b54 <z_spin_unlock_valid>
   34982:	2800      	cmp	r0, #0
   34984:	d0bd      	beq.n	34902 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   34986:	f386 8811 	msr	BASEPRI, r6
   3498a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3498e:	e7c3      	b.n	34918 <z_impl_k_poll+0xd4>
   34990:	2000413c 	.word	0x2000413c
   34994:	0003f090 	.word	0x0003f090
   34998:	0003c7f8 	.word	0x0003c7f8
   3499c:	2000419c 	.word	0x2000419c
   349a0:	0003cc84 	.word	0x0003cc84
   349a4:	200008d4 	.word	0x200008d4

000349a8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   349a8:	b570      	push	{r4, r5, r6, lr}
   349aa:	4604      	mov	r4, r0
   349ac:	460d      	mov	r5, r1
	__asm__ volatile(
   349ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   349b2:	f3ef 8611 	mrs	r6, BASEPRI
   349b6:	f383 8812 	msr	BASEPRI_MAX, r3
   349ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   349be:	481b      	ldr	r0, [pc, #108]	; (34a2c <z_impl_k_poll_signal_raise+0x84>)
   349c0:	f7fd f8ba 	bl	31b38 <z_spin_lock_valid>
   349c4:	b940      	cbnz	r0, 349d8 <z_impl_k_poll_signal_raise+0x30>
   349c6:	491a      	ldr	r1, [pc, #104]	; (34a30 <z_impl_k_poll_signal_raise+0x88>)
   349c8:	481a      	ldr	r0, [pc, #104]	; (34a34 <z_impl_k_poll_signal_raise+0x8c>)
   349ca:	2294      	movs	r2, #148	; 0x94
   349cc:	f003 fafc 	bl	37fc8 <assert_print>
   349d0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   349d2:	4817      	ldr	r0, [pc, #92]	; (34a30 <z_impl_k_poll_signal_raise+0x88>)
   349d4:	f003 faf1 	bl	37fba <assert_post_action>
	z_spin_lock_set_owner(l);
   349d8:	4814      	ldr	r0, [pc, #80]	; (34a2c <z_impl_k_poll_signal_raise+0x84>)
   349da:	f7fd f8cb 	bl	31b74 <z_spin_lock_set_owner>
	return list->head == list;
   349de:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   349e0:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   349e2:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   349e4:	4284      	cmp	r4, r0
   349e6:	60a1      	str	r1, [r4, #8]
   349e8:	d10a      	bne.n	34a00 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   349ea:	4810      	ldr	r0, [pc, #64]	; (34a2c <z_impl_k_poll_signal_raise+0x84>)
   349ec:	f7fd f8b2 	bl	31b54 <z_spin_unlock_valid>
   349f0:	b9b0      	cbnz	r0, 34a20 <z_impl_k_poll_signal_raise+0x78>
   349f2:	490f      	ldr	r1, [pc, #60]	; (34a30 <z_impl_k_poll_signal_raise+0x88>)
   349f4:	480f      	ldr	r0, [pc, #60]	; (34a34 <z_impl_k_poll_signal_raise+0x8c>)
   349f6:	22c2      	movs	r2, #194	; 0xc2
   349f8:	f003 fae6 	bl	37fc8 <assert_print>
   349fc:	21c2      	movs	r1, #194	; 0xc2
   349fe:	e7e8      	b.n	349d2 <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   34a00:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   34a04:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   34a06:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   34a08:	2300      	movs	r3, #0
	node->prev = NULL;
   34a0a:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   34a0e:	f006 feb1 	bl	3b774 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   34a12:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   34a14:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   34a16:	4805      	ldr	r0, [pc, #20]	; (34a2c <z_impl_k_poll_signal_raise+0x84>)
   34a18:	f7fe fb44 	bl	330a4 <z_reschedule>
	return rc;
}
   34a1c:	4620      	mov	r0, r4
   34a1e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   34a20:	f386 8811 	msr	BASEPRI, r6
   34a24:	f3bf 8f6f 	isb	sy
		return 0;
   34a28:	2400      	movs	r4, #0
   34a2a:	e7f7      	b.n	34a1c <z_impl_k_poll_signal_raise+0x74>
   34a2c:	2000419c 	.word	0x2000419c
   34a30:	0003cc84 	.word	0x0003cc84
   34a34:	0003c7f8 	.word	0x0003c7f8

00034a38 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   34a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34a3a:	4605      	mov	r5, r0
   34a3c:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   34a3e:	f006 fd29 	bl	3b494 <k_is_in_isr>
   34a42:	b9f8      	cbnz	r0, 34a84 <z_thread_aligned_alloc+0x4c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   34a44:	4b11      	ldr	r3, [pc, #68]	; (34a8c <z_thread_aligned_alloc+0x54>)
   34a46:	689b      	ldr	r3, [r3, #8]
   34a48:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
	}

	if (heap != NULL) {
   34a4c:	b1dc      	cbz	r4, 34a86 <z_thread_aligned_alloc+0x4e>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   34a4e:	1d32      	adds	r2, r6, #4
   34a50:	d218      	bcs.n	34a84 <z_thread_aligned_alloc+0x4c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   34a52:	2000      	movs	r0, #0
   34a54:	2100      	movs	r1, #0
   34a56:	e9cd 0100 	strd	r0, r1, [sp]
   34a5a:	f045 0104 	orr.w	r1, r5, #4
   34a5e:	4620      	mov	r0, r4
   34a60:	f7fc fedc 	bl	3181c <k_heap_aligned_alloc>
	if (mem == NULL) {
   34a64:	b170      	cbz	r0, 34a84 <z_thread_aligned_alloc+0x4c>
	*heap_ref = heap;
   34a66:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   34a68:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   34a6a:	b165      	cbz	r5, 34a86 <z_thread_aligned_alloc+0x4e>
   34a6c:	3d01      	subs	r5, #1
   34a6e:	422c      	tst	r4, r5
   34a70:	d009      	beq.n	34a86 <z_thread_aligned_alloc+0x4e>
   34a72:	4907      	ldr	r1, [pc, #28]	; (34a90 <z_thread_aligned_alloc+0x58>)
   34a74:	4807      	ldr	r0, [pc, #28]	; (34a94 <z_thread_aligned_alloc+0x5c>)
   34a76:	2225      	movs	r2, #37	; 0x25
   34a78:	f003 faa6 	bl	37fc8 <assert_print>
   34a7c:	4804      	ldr	r0, [pc, #16]	; (34a90 <z_thread_aligned_alloc+0x58>)
   34a7e:	2125      	movs	r1, #37	; 0x25
   34a80:	f003 fa9b 	bl	37fba <assert_post_action>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   34a84:	2400      	movs	r4, #0
	}

	return ret;
}
   34a86:	4620      	mov	r0, r4
   34a88:	b002      	add	sp, #8
   34a8a:	bd70      	pop	{r4, r5, r6, pc}
   34a8c:	2000413c 	.word	0x2000413c
   34a90:	0003f0b1 	.word	0x0003f0b1
   34a94:	0003c7f8 	.word	0x0003c7f8

00034a98 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   34a98:	4801      	ldr	r0, [pc, #4]	; (34aa0 <boot_banner+0x8>)
   34a9a:	f003 b88d 	b.w	37bb8 <printk>
   34a9e:	bf00      	nop
   34aa0:	0003f0d5 	.word	0x0003f0d5

00034aa4 <ocrypto_ecdh_p256_public_key>:
   34aa4:	b530      	push	{r4, r5, lr}
   34aa6:	b099      	sub	sp, #100	; 0x64
   34aa8:	4605      	mov	r5, r0
   34aaa:	4668      	mov	r0, sp
   34aac:	f000 f828 	bl	34b00 <ocrypto_sc_p256_from32bytes>
   34ab0:	4669      	mov	r1, sp
   34ab2:	4604      	mov	r4, r0
   34ab4:	a808      	add	r0, sp, #32
   34ab6:	f000 fa53 	bl	34f60 <ocrypto_curve_p256_scalarmult_base>
   34aba:	a908      	add	r1, sp, #32
   34abc:	4304      	orrs	r4, r0
   34abe:	4628      	mov	r0, r5
   34ac0:	f000 f98a 	bl	34dd8 <ocrypto_curve_p256_to64bytes>
   34ac4:	4620      	mov	r0, r4
   34ac6:	b019      	add	sp, #100	; 0x64
   34ac8:	bd30      	pop	{r4, r5, pc}
   34aca:	bf00      	nop

00034acc <ocrypto_ecdh_p256_common_secret>:
   34acc:	b570      	push	{r4, r5, r6, lr}
   34ace:	b098      	sub	sp, #96	; 0x60
   34ad0:	4605      	mov	r5, r0
   34ad2:	4668      	mov	r0, sp
   34ad4:	4616      	mov	r6, r2
   34ad6:	f000 f813 	bl	34b00 <ocrypto_sc_p256_from32bytes>
   34ada:	4631      	mov	r1, r6
   34adc:	4604      	mov	r4, r0
   34ade:	a808      	add	r0, sp, #32
   34ae0:	f000 f946 	bl	34d70 <ocrypto_curve_p256_from64bytes>
   34ae4:	a908      	add	r1, sp, #32
   34ae6:	466a      	mov	r2, sp
   34ae8:	4304      	orrs	r4, r0
   34aea:	4608      	mov	r0, r1
   34aec:	f000 f982 	bl	34df4 <ocrypto_curve_p256_scalarmult>
   34af0:	a908      	add	r1, sp, #32
   34af2:	4304      	orrs	r4, r0
   34af4:	4628      	mov	r0, r5
   34af6:	f000 f96d 	bl	34dd4 <ocrypto_curve_p256_to32bytes>
   34afa:	4620      	mov	r0, r4
   34afc:	b018      	add	sp, #96	; 0x60
   34afe:	bd70      	pop	{r4, r5, r6, pc}

00034b00 <ocrypto_sc_p256_from32bytes>:
   34b00:	b570      	push	{r4, r5, r6, lr}
   34b02:	680b      	ldr	r3, [r1, #0]
   34b04:	4e12      	ldr	r6, [pc, #72]	; (34b50 <ocrypto_sc_p256_from32bytes+0x50>)
   34b06:	ba1b      	rev	r3, r3
   34b08:	61c3      	str	r3, [r0, #28]
   34b0a:	684b      	ldr	r3, [r1, #4]
   34b0c:	ba1b      	rev	r3, r3
   34b0e:	6183      	str	r3, [r0, #24]
   34b10:	688b      	ldr	r3, [r1, #8]
   34b12:	ba1b      	rev	r3, r3
   34b14:	6143      	str	r3, [r0, #20]
   34b16:	68cb      	ldr	r3, [r1, #12]
   34b18:	ba1b      	rev	r3, r3
   34b1a:	6103      	str	r3, [r0, #16]
   34b1c:	690b      	ldr	r3, [r1, #16]
   34b1e:	ba1b      	rev	r3, r3
   34b20:	60c3      	str	r3, [r0, #12]
   34b22:	694b      	ldr	r3, [r1, #20]
   34b24:	ba1b      	rev	r3, r3
   34b26:	6083      	str	r3, [r0, #8]
   34b28:	698b      	ldr	r3, [r1, #24]
   34b2a:	ba1b      	rev	r3, r3
   34b2c:	6043      	str	r3, [r0, #4]
   34b2e:	69cb      	ldr	r3, [r1, #28]
   34b30:	ba1b      	rev	r3, r3
   34b32:	4632      	mov	r2, r6
   34b34:	6003      	str	r3, [r0, #0]
   34b36:	4601      	mov	r1, r0
   34b38:	4604      	mov	r4, r0
   34b3a:	f7d7 fc1b 	bl	c374 <ocrypto_bigint_sub256>
   34b3e:	4631      	mov	r1, r6
   34b40:	4605      	mov	r5, r0
   34b42:	4602      	mov	r2, r0
   34b44:	4620      	mov	r0, r4
   34b46:	f7d7 fc35 	bl	c3b4 <ocrypto_bigint_cadd256>
   34b4a:	1e68      	subs	r0, r5, #1
   34b4c:	bd70      	pop	{r4, r5, r6, pc}
   34b4e:	bf00      	nop
   34b50:	0003c4fc 	.word	0x0003c4fc

00034b54 <p256_zdblu>:
   34b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34b58:	b088      	sub	sp, #32
   34b5a:	460c      	mov	r4, r1
   34b5c:	4606      	mov	r6, r0
   34b5e:	f102 0120 	add.w	r1, r2, #32
   34b62:	4668      	mov	r0, sp
   34b64:	f106 0720 	add.w	r7, r6, #32
   34b68:	4690      	mov	r8, r2
   34b6a:	f7d7 ff0d 	bl	c988 <ocrypto_mod_p256_sqr>
   34b6e:	466a      	mov	r2, sp
   34b70:	4669      	mov	r1, sp
   34b72:	4668      	mov	r0, sp
   34b74:	f7d7 fe1a 	bl	c7ac <ocrypto_mod_p256_add>
   34b78:	4669      	mov	r1, sp
   34b7a:	4638      	mov	r0, r7
   34b7c:	f7d7 ff04 	bl	c988 <ocrypto_mod_p256_sqr>
   34b80:	463a      	mov	r2, r7
   34b82:	4639      	mov	r1, r7
   34b84:	4638      	mov	r0, r7
   34b86:	f104 0520 	add.w	r5, r4, #32
   34b8a:	f7d7 fe0f 	bl	c7ac <ocrypto_mod_p256_add>
   34b8e:	466a      	mov	r2, sp
   34b90:	4669      	mov	r1, sp
   34b92:	4668      	mov	r0, sp
   34b94:	f7d7 fe0a 	bl	c7ac <ocrypto_mod_p256_add>
   34b98:	4641      	mov	r1, r8
   34b9a:	4628      	mov	r0, r5
   34b9c:	f7d7 fef4 	bl	c988 <ocrypto_mod_p256_sqr>
   34ba0:	466a      	mov	r2, sp
   34ba2:	4641      	mov	r1, r8
   34ba4:	4630      	mov	r0, r6
   34ba6:	f7d7 fed7 	bl	c958 <ocrypto_mod_p256_mul>
   34baa:	462a      	mov	r2, r5
   34bac:	4629      	mov	r1, r5
   34bae:	4668      	mov	r0, sp
   34bb0:	f7d7 fdfc 	bl	c7ac <ocrypto_mod_p256_add>
   34bb4:	462a      	mov	r2, r5
   34bb6:	4669      	mov	r1, sp
   34bb8:	4668      	mov	r0, sp
   34bba:	f7d7 fdf7 	bl	c7ac <ocrypto_mod_p256_add>
   34bbe:	4a12      	ldr	r2, [pc, #72]	; (34c08 <p256_zdblu+0xb4>)
   34bc0:	4669      	mov	r1, sp
   34bc2:	4668      	mov	r0, sp
   34bc4:	f7d7 fdf2 	bl	c7ac <ocrypto_mod_p256_add>
   34bc8:	4669      	mov	r1, sp
   34bca:	4620      	mov	r0, r4
   34bcc:	f7d7 fedc 	bl	c988 <ocrypto_mod_p256_sqr>
   34bd0:	4632      	mov	r2, r6
   34bd2:	4621      	mov	r1, r4
   34bd4:	4620      	mov	r0, r4
   34bd6:	f7d7 fe27 	bl	c828 <ocrypto_mod_p256_sub>
   34bda:	4632      	mov	r2, r6
   34bdc:	4621      	mov	r1, r4
   34bde:	4620      	mov	r0, r4
   34be0:	f7d7 fe22 	bl	c828 <ocrypto_mod_p256_sub>
   34be4:	4622      	mov	r2, r4
   34be6:	4631      	mov	r1, r6
   34be8:	4628      	mov	r0, r5
   34bea:	f7d7 fe1d 	bl	c828 <ocrypto_mod_p256_sub>
   34bee:	466a      	mov	r2, sp
   34bf0:	4629      	mov	r1, r5
   34bf2:	4628      	mov	r0, r5
   34bf4:	f7d7 feb0 	bl	c958 <ocrypto_mod_p256_mul>
   34bf8:	463a      	mov	r2, r7
   34bfa:	4629      	mov	r1, r5
   34bfc:	4628      	mov	r0, r5
   34bfe:	f7d7 fe13 	bl	c828 <ocrypto_mod_p256_sub>
   34c02:	b008      	add	sp, #32
   34c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34c08:	0003c59c 	.word	0x0003c59c

00034c0c <p256_zaddc>:
   34c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34c0e:	b099      	sub	sp, #100	; 0x64
   34c10:	4604      	mov	r4, r0
   34c12:	460d      	mov	r5, r1
   34c14:	460a      	mov	r2, r1
   34c16:	4601      	mov	r1, r0
   34c18:	4668      	mov	r0, sp
   34c1a:	f7d7 fe05 	bl	c828 <ocrypto_mod_p256_sub>
   34c1e:	4669      	mov	r1, sp
   34c20:	4668      	mov	r0, sp
   34c22:	f7d7 feb1 	bl	c988 <ocrypto_mod_p256_sqr>
   34c26:	466a      	mov	r2, sp
   34c28:	4621      	mov	r1, r4
   34c2a:	a808      	add	r0, sp, #32
   34c2c:	f105 0620 	add.w	r6, r5, #32
   34c30:	f104 0720 	add.w	r7, r4, #32
   34c34:	f7d7 fe90 	bl	c958 <ocrypto_mod_p256_mul>
   34c38:	466a      	mov	r2, sp
   34c3a:	4629      	mov	r1, r5
   34c3c:	4668      	mov	r0, sp
   34c3e:	f7d7 fe8b 	bl	c958 <ocrypto_mod_p256_mul>
   34c42:	4632      	mov	r2, r6
   34c44:	4639      	mov	r1, r7
   34c46:	a810      	add	r0, sp, #64	; 0x40
   34c48:	f7d7 fdb0 	bl	c7ac <ocrypto_mod_p256_add>
   34c4c:	4632      	mov	r2, r6
   34c4e:	4639      	mov	r1, r7
   34c50:	4630      	mov	r0, r6
   34c52:	f7d7 fde9 	bl	c828 <ocrypto_mod_p256_sub>
   34c56:	4631      	mov	r1, r6
   34c58:	4628      	mov	r0, r5
   34c5a:	f7d7 fe95 	bl	c988 <ocrypto_mod_p256_sqr>
   34c5e:	466a      	mov	r2, sp
   34c60:	a908      	add	r1, sp, #32
   34c62:	4620      	mov	r0, r4
   34c64:	f7d7 fda2 	bl	c7ac <ocrypto_mod_p256_add>
   34c68:	4622      	mov	r2, r4
   34c6a:	4629      	mov	r1, r5
   34c6c:	4628      	mov	r0, r5
   34c6e:	f7d7 fddb 	bl	c828 <ocrypto_mod_p256_sub>
   34c72:	466a      	mov	r2, sp
   34c74:	a908      	add	r1, sp, #32
   34c76:	4668      	mov	r0, sp
   34c78:	f7d7 fdd6 	bl	c828 <ocrypto_mod_p256_sub>
   34c7c:	466a      	mov	r2, sp
   34c7e:	4639      	mov	r1, r7
   34c80:	4638      	mov	r0, r7
   34c82:	f7d7 fe69 	bl	c958 <ocrypto_mod_p256_mul>
   34c86:	462a      	mov	r2, r5
   34c88:	a908      	add	r1, sp, #32
   34c8a:	4668      	mov	r0, sp
   34c8c:	f7d7 fdcc 	bl	c828 <ocrypto_mod_p256_sub>
   34c90:	466a      	mov	r2, sp
   34c92:	4631      	mov	r1, r6
   34c94:	4630      	mov	r0, r6
   34c96:	f7d7 fe5f 	bl	c958 <ocrypto_mod_p256_mul>
   34c9a:	463a      	mov	r2, r7
   34c9c:	4631      	mov	r1, r6
   34c9e:	4630      	mov	r0, r6
   34ca0:	f7d7 fdc2 	bl	c828 <ocrypto_mod_p256_sub>
   34ca4:	a910      	add	r1, sp, #64	; 0x40
   34ca6:	4668      	mov	r0, sp
   34ca8:	f7d7 fe6e 	bl	c988 <ocrypto_mod_p256_sqr>
   34cac:	4622      	mov	r2, r4
   34cae:	4669      	mov	r1, sp
   34cb0:	4620      	mov	r0, r4
   34cb2:	f7d7 fdb9 	bl	c828 <ocrypto_mod_p256_sub>
   34cb6:	a908      	add	r1, sp, #32
   34cb8:	4622      	mov	r2, r4
   34cba:	4608      	mov	r0, r1
   34cbc:	f7d7 fdb4 	bl	c828 <ocrypto_mod_p256_sub>
   34cc0:	a910      	add	r1, sp, #64	; 0x40
   34cc2:	aa08      	add	r2, sp, #32
   34cc4:	4608      	mov	r0, r1
   34cc6:	f7d7 fe47 	bl	c958 <ocrypto_mod_p256_mul>
   34cca:	463a      	mov	r2, r7
   34ccc:	a910      	add	r1, sp, #64	; 0x40
   34cce:	4638      	mov	r0, r7
   34cd0:	f7d7 fdaa 	bl	c828 <ocrypto_mod_p256_sub>
   34cd4:	b019      	add	sp, #100	; 0x64
   34cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034cd8 <p256_zaddu>:
   34cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34cdc:	b088      	sub	sp, #32
   34cde:	460c      	mov	r4, r1
   34ce0:	4605      	mov	r5, r0
   34ce2:	4690      	mov	r8, r2
   34ce4:	460a      	mov	r2, r1
   34ce6:	4601      	mov	r1, r0
   34ce8:	4668      	mov	r0, sp
   34cea:	f7d7 fd9d 	bl	c828 <ocrypto_mod_p256_sub>
   34cee:	4669      	mov	r1, sp
   34cf0:	4668      	mov	r0, sp
   34cf2:	f7d7 fe49 	bl	c988 <ocrypto_mod_p256_sqr>
   34cf6:	466a      	mov	r2, sp
   34cf8:	4629      	mov	r1, r5
   34cfa:	4628      	mov	r0, r5
   34cfc:	f104 0620 	add.w	r6, r4, #32
   34d00:	f7d7 fe2a 	bl	c958 <ocrypto_mod_p256_mul>
   34d04:	f105 0720 	add.w	r7, r5, #32
   34d08:	466a      	mov	r2, sp
   34d0a:	4621      	mov	r1, r4
   34d0c:	4668      	mov	r0, sp
   34d0e:	f7d7 fe23 	bl	c958 <ocrypto_mod_p256_mul>
   34d12:	4632      	mov	r2, r6
   34d14:	4639      	mov	r1, r7
   34d16:	4630      	mov	r0, r6
   34d18:	f7d7 fd86 	bl	c828 <ocrypto_mod_p256_sub>
   34d1c:	4631      	mov	r1, r6
   34d1e:	4620      	mov	r0, r4
   34d20:	f7d7 fe32 	bl	c988 <ocrypto_mod_p256_sqr>
   34d24:	462a      	mov	r2, r5
   34d26:	4621      	mov	r1, r4
   34d28:	4620      	mov	r0, r4
   34d2a:	f7d7 fd7d 	bl	c828 <ocrypto_mod_p256_sub>
   34d2e:	466a      	mov	r2, sp
   34d30:	4621      	mov	r1, r4
   34d32:	4620      	mov	r0, r4
   34d34:	f7d7 fd78 	bl	c828 <ocrypto_mod_p256_sub>
   34d38:	466a      	mov	r2, sp
   34d3a:	4629      	mov	r1, r5
   34d3c:	4640      	mov	r0, r8
   34d3e:	f7d7 fd73 	bl	c828 <ocrypto_mod_p256_sub>
   34d42:	4642      	mov	r2, r8
   34d44:	4639      	mov	r1, r7
   34d46:	4638      	mov	r0, r7
   34d48:	f7d7 fe06 	bl	c958 <ocrypto_mod_p256_mul>
   34d4c:	4622      	mov	r2, r4
   34d4e:	4629      	mov	r1, r5
   34d50:	4668      	mov	r0, sp
   34d52:	f7d7 fd69 	bl	c828 <ocrypto_mod_p256_sub>
   34d56:	466a      	mov	r2, sp
   34d58:	4631      	mov	r1, r6
   34d5a:	4630      	mov	r0, r6
   34d5c:	f7d7 fdfc 	bl	c958 <ocrypto_mod_p256_mul>
   34d60:	463a      	mov	r2, r7
   34d62:	4631      	mov	r1, r6
   34d64:	4630      	mov	r0, r6
   34d66:	f7d7 fd5f 	bl	c828 <ocrypto_mod_p256_sub>
   34d6a:	b008      	add	sp, #32
   34d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034d70 <ocrypto_curve_p256_from64bytes>:
   34d70:	b570      	push	{r4, r5, r6, lr}
   34d72:	f100 0620 	add.w	r6, r0, #32
   34d76:	b090      	sub	sp, #64	; 0x40
   34d78:	460d      	mov	r5, r1
   34d7a:	4604      	mov	r4, r0
   34d7c:	f000 f914 	bl	34fa8 <ocrypto_mod_p256_from_bytes>
   34d80:	f105 0120 	add.w	r1, r5, #32
   34d84:	4630      	mov	r0, r6
   34d86:	f000 f90f 	bl	34fa8 <ocrypto_mod_p256_from_bytes>
   34d8a:	4621      	mov	r1, r4
   34d8c:	a808      	add	r0, sp, #32
   34d8e:	f7d7 fdfb 	bl	c988 <ocrypto_mod_p256_sqr>
   34d92:	a908      	add	r1, sp, #32
   34d94:	4608      	mov	r0, r1
   34d96:	4a0d      	ldr	r2, [pc, #52]	; (34dcc <ocrypto_curve_p256_from64bytes+0x5c>)
   34d98:	f7d7 fd08 	bl	c7ac <ocrypto_mod_p256_add>
   34d9c:	a908      	add	r1, sp, #32
   34d9e:	4622      	mov	r2, r4
   34da0:	4608      	mov	r0, r1
   34da2:	f7d7 fdd9 	bl	c958 <ocrypto_mod_p256_mul>
   34da6:	a908      	add	r1, sp, #32
   34da8:	4a09      	ldr	r2, [pc, #36]	; (34dd0 <ocrypto_curve_p256_from64bytes+0x60>)
   34daa:	4608      	mov	r0, r1
   34dac:	f7d7 fcfe 	bl	c7ac <ocrypto_mod_p256_add>
   34db0:	4631      	mov	r1, r6
   34db2:	4668      	mov	r0, sp
   34db4:	f7d7 fde8 	bl	c988 <ocrypto_mod_p256_sqr>
   34db8:	2220      	movs	r2, #32
   34dba:	4669      	mov	r1, sp
   34dbc:	eb0d 0002 	add.w	r0, sp, r2
   34dc0:	f7d7 fcc6 	bl	c750 <ocrypto_constant_time_equal>
   34dc4:	3801      	subs	r0, #1
   34dc6:	b010      	add	sp, #64	; 0x40
   34dc8:	bd70      	pop	{r4, r5, r6, pc}
   34dca:	bf00      	nop
   34dcc:	0003c59c 	.word	0x0003c59c
   34dd0:	0003c5bc 	.word	0x0003c5bc

00034dd4 <ocrypto_curve_p256_to32bytes>:
   34dd4:	f000 b902 	b.w	34fdc <ocrypto_mod_p256_to_bytes>

00034dd8 <ocrypto_curve_p256_to64bytes>:
   34dd8:	b538      	push	{r3, r4, r5, lr}
   34dda:	4604      	mov	r4, r0
   34ddc:	460d      	mov	r5, r1
   34dde:	f000 f8fd 	bl	34fdc <ocrypto_mod_p256_to_bytes>
   34de2:	f105 0120 	add.w	r1, r5, #32
   34de6:	f104 0020 	add.w	r0, r4, #32
   34dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   34dee:	f000 b8f5 	b.w	34fdc <ocrypto_mod_p256_to_bytes>
   34df2:	bf00      	nop

00034df4 <ocrypto_curve_p256_scalarmult>:
   34df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34df8:	4613      	mov	r3, r2
   34dfa:	b0b8      	sub	sp, #224	; 0xe0
   34dfc:	4a54      	ldr	r2, [pc, #336]	; (34f50 <ocrypto_curve_p256_scalarmult+0x15c>)
   34dfe:	4689      	mov	r9, r1
   34e00:	4680      	mov	r8, r0
   34e02:	4619      	mov	r1, r3
   34e04:	a810      	add	r0, sp, #64	; 0x40
   34e06:	f7d7 fab5 	bl	c374 <ocrypto_bigint_sub256>
   34e0a:	4952      	ldr	r1, [pc, #328]	; (34f54 <ocrypto_curve_p256_scalarmult+0x160>)
   34e0c:	4602      	mov	r2, r0
   34e0e:	a810      	add	r0, sp, #64	; 0x40
   34e10:	f7d7 fad0 	bl	c3b4 <ocrypto_bigint_cadd256>
   34e14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   34e16:	494e      	ldr	r1, [pc, #312]	; (34f50 <ocrypto_curve_p256_scalarmult+0x15c>)
   34e18:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   34e1c:	4607      	mov	r7, r0
   34e1e:	f1c6 0201 	rsb	r2, r6, #1
   34e22:	a810      	add	r0, sp, #64	; 0x40
   34e24:	f7d7 fac6 	bl	c3b4 <ocrypto_bigint_cadd256>
   34e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   34e2a:	464a      	mov	r2, r9
   34e2c:	ea6f 0a03 	mvn.w	sl, r3
   34e30:	a928      	add	r1, sp, #160	; 0xa0
   34e32:	a818      	add	r0, sp, #96	; 0x60
   34e34:	f7ff fe8e 	bl	34b54 <p256_zdblu>
   34e38:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   34e3c:	a920      	add	r1, sp, #128	; 0x80
   34e3e:	f1ca 0201 	rsb	r2, sl, #1
   34e42:	4608      	mov	r0, r1
   34e44:	f000 f892 	bl	34f6c <ocrypto_mod_p256_cneg>
   34e48:	f1c7 0701 	rsb	r7, r7, #1
   34e4c:	24fe      	movs	r4, #254	; 0xfe
   34e4e:	466a      	mov	r2, sp
   34e50:	a918      	add	r1, sp, #96	; 0x60
   34e52:	a828      	add	r0, sp, #160	; 0xa0
   34e54:	f7ff ff40 	bl	34cd8 <p256_zaddu>
   34e58:	1162      	asrs	r2, r4, #5
   34e5a:	ab38      	add	r3, sp, #224	; 0xe0
   34e5c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   34e60:	f004 011f 	and.w	r1, r4, #31
   34e64:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   34e68:	40cb      	lsrs	r3, r1
   34e6a:	4655      	mov	r5, sl
   34e6c:	f003 0a01 	and.w	sl, r3, #1
   34e70:	ea8a 0505 	eor.w	r5, sl, r5
   34e74:	462a      	mov	r2, r5
   34e76:	a928      	add	r1, sp, #160	; 0xa0
   34e78:	a818      	add	r0, sp, #96	; 0x60
   34e7a:	f7d7 faf7 	bl	c46c <ocrypto_bigint_cswap256>
   34e7e:	462a      	mov	r2, r5
   34e80:	a930      	add	r1, sp, #192	; 0xc0
   34e82:	a820      	add	r0, sp, #128	; 0x80
   34e84:	f7d7 faf2 	bl	c46c <ocrypto_bigint_cswap256>
   34e88:	3c01      	subs	r4, #1
   34e8a:	a928      	add	r1, sp, #160	; 0xa0
   34e8c:	a818      	add	r0, sp, #96	; 0x60
   34e8e:	f7ff febd 	bl	34c0c <p256_zaddc>
   34e92:	1c63      	adds	r3, r4, #1
   34e94:	d1db      	bne.n	34e4e <ocrypto_curve_p256_scalarmult+0x5a>
   34e96:	f1ca 0201 	rsb	r2, sl, #1
   34e9a:	a920      	add	r1, sp, #128	; 0x80
   34e9c:	a808      	add	r0, sp, #32
   34e9e:	f000 f865 	bl	34f6c <ocrypto_mod_p256_cneg>
   34ea2:	ea86 060a 	eor.w	r6, r6, sl
   34ea6:	466a      	mov	r2, sp
   34ea8:	a918      	add	r1, sp, #96	; 0x60
   34eaa:	a828      	add	r0, sp, #160	; 0xa0
   34eac:	f7ff ff14 	bl	34cd8 <p256_zaddu>
   34eb0:	a928      	add	r1, sp, #160	; 0xa0
   34eb2:	4632      	mov	r2, r6
   34eb4:	a818      	add	r0, sp, #96	; 0x60
   34eb6:	f7d7 fad9 	bl	c46c <ocrypto_bigint_cswap256>
   34eba:	4632      	mov	r2, r6
   34ebc:	a930      	add	r1, sp, #192	; 0xc0
   34ebe:	a820      	add	r0, sp, #128	; 0x80
   34ec0:	f7d7 fad4 	bl	c46c <ocrypto_bigint_cswap256>
   34ec4:	a908      	add	r1, sp, #32
   34ec6:	466a      	mov	r2, sp
   34ec8:	4608      	mov	r0, r1
   34eca:	f7d7 fd45 	bl	c958 <ocrypto_mod_p256_mul>
   34ece:	a908      	add	r1, sp, #32
   34ed0:	4608      	mov	r0, r1
   34ed2:	f000 f89d 	bl	35010 <ocrypto_mod_p256_inv>
   34ed6:	a908      	add	r1, sp, #32
   34ed8:	f108 0420 	add.w	r4, r8, #32
   34edc:	f109 0220 	add.w	r2, r9, #32
   34ee0:	4608      	mov	r0, r1
   34ee2:	f7d7 fd39 	bl	c958 <ocrypto_mod_p256_mul>
   34ee6:	a920      	add	r1, sp, #128	; 0x80
   34ee8:	aa08      	add	r2, sp, #32
   34eea:	4620      	mov	r0, r4
   34eec:	f7d7 fd34 	bl	c958 <ocrypto_mod_p256_mul>
   34ef0:	aa08      	add	r2, sp, #32
   34ef2:	a918      	add	r1, sp, #96	; 0x60
   34ef4:	4668      	mov	r0, sp
   34ef6:	f7d7 fd2f 	bl	c958 <ocrypto_mod_p256_mul>
   34efa:	4669      	mov	r1, sp
   34efc:	4668      	mov	r0, sp
   34efe:	f7d7 fd43 	bl	c988 <ocrypto_mod_p256_sqr>
   34f02:	aa18      	add	r2, sp, #96	; 0x60
   34f04:	4669      	mov	r1, sp
   34f06:	a808      	add	r0, sp, #32
   34f08:	f7d7 fd26 	bl	c958 <ocrypto_mod_p256_mul>
   34f0c:	4621      	mov	r1, r4
   34f0e:	4668      	mov	r0, sp
   34f10:	f7d7 fd3a 	bl	c988 <ocrypto_mod_p256_sqr>
   34f14:	aa08      	add	r2, sp, #32
   34f16:	4669      	mov	r1, sp
   34f18:	4610      	mov	r0, r2
   34f1a:	f7d7 fc85 	bl	c828 <ocrypto_mod_p256_sub>
   34f1e:	4a0e      	ldr	r2, [pc, #56]	; (34f58 <ocrypto_curve_p256_scalarmult+0x164>)
   34f20:	a908      	add	r1, sp, #32
   34f22:	4668      	mov	r0, sp
   34f24:	f7d7 fc80 	bl	c828 <ocrypto_mod_p256_sub>
   34f28:	4620      	mov	r0, r4
   34f2a:	2120      	movs	r1, #32
   34f2c:	f7d7 fc24 	bl	c778 <ocrypto_constant_time_is_zero>
   34f30:	a908      	add	r1, sp, #32
   34f32:	4243      	negs	r3, r0
   34f34:	4602      	mov	r2, r0
   34f36:	4668      	mov	r0, sp
   34f38:	431f      	orrs	r7, r3
   34f3a:	f7d7 fa97 	bl	c46c <ocrypto_bigint_cswap256>
   34f3e:	4640      	mov	r0, r8
   34f40:	4a06      	ldr	r2, [pc, #24]	; (34f5c <ocrypto_curve_p256_scalarmult+0x168>)
   34f42:	4669      	mov	r1, sp
   34f44:	f7d7 fd08 	bl	c958 <ocrypto_mod_p256_mul>
   34f48:	4638      	mov	r0, r7
   34f4a:	b038      	add	sp, #224	; 0xe0
   34f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34f50:	0003c5dc 	.word	0x0003c5dc
   34f54:	0003c55c 	.word	0x0003c55c
   34f58:	0003c5bc 	.word	0x0003c5bc
   34f5c:	0003c57c 	.word	0x0003c57c

00034f60 <ocrypto_curve_p256_scalarmult_base>:
   34f60:	460a      	mov	r2, r1
   34f62:	4901      	ldr	r1, [pc, #4]	; (34f68 <ocrypto_curve_p256_scalarmult_base+0x8>)
   34f64:	f7ff bf46 	b.w	34df4 <ocrypto_curve_p256_scalarmult>
   34f68:	0003c51c 	.word	0x0003c51c

00034f6c <ocrypto_mod_p256_cneg>:
   34f6c:	b570      	push	{r4, r5, r6, lr}
   34f6e:	b088      	sub	sp, #32
   34f70:	4604      	mov	r4, r0
   34f72:	460d      	mov	r5, r1
   34f74:	4616      	mov	r6, r2
   34f76:	2100      	movs	r1, #0
   34f78:	2220      	movs	r2, #32
   34f7a:	4668      	mov	r0, sp
   34f7c:	f003 fc28 	bl	387d0 <memset>
   34f80:	2300      	movs	r3, #0
   34f82:	4629      	mov	r1, r5
   34f84:	2220      	movs	r2, #32
   34f86:	4620      	mov	r0, r4
   34f88:	9300      	str	r3, [sp, #0]
   34f8a:	f003 fc16 	bl	387ba <memcpy>
   34f8e:	462a      	mov	r2, r5
   34f90:	4669      	mov	r1, sp
   34f92:	4668      	mov	r0, sp
   34f94:	f7d7 fc48 	bl	c828 <ocrypto_mod_p256_sub>
   34f98:	4632      	mov	r2, r6
   34f9a:	4669      	mov	r1, sp
   34f9c:	4620      	mov	r0, r4
   34f9e:	f7d7 fa65 	bl	c46c <ocrypto_bigint_cswap256>
   34fa2:	b008      	add	sp, #32
   34fa4:	bd70      	pop	{r4, r5, r6, pc}
   34fa6:	bf00      	nop

00034fa8 <ocrypto_mod_p256_from_bytes>:
   34fa8:	680b      	ldr	r3, [r1, #0]
   34faa:	ba1b      	rev	r3, r3
   34fac:	61c3      	str	r3, [r0, #28]
   34fae:	684b      	ldr	r3, [r1, #4]
   34fb0:	ba1b      	rev	r3, r3
   34fb2:	6183      	str	r3, [r0, #24]
   34fb4:	688b      	ldr	r3, [r1, #8]
   34fb6:	ba1b      	rev	r3, r3
   34fb8:	6143      	str	r3, [r0, #20]
   34fba:	68cb      	ldr	r3, [r1, #12]
   34fbc:	ba1b      	rev	r3, r3
   34fbe:	6103      	str	r3, [r0, #16]
   34fc0:	690b      	ldr	r3, [r1, #16]
   34fc2:	ba1b      	rev	r3, r3
   34fc4:	60c3      	str	r3, [r0, #12]
   34fc6:	694b      	ldr	r3, [r1, #20]
   34fc8:	ba1b      	rev	r3, r3
   34fca:	6083      	str	r3, [r0, #8]
   34fcc:	698b      	ldr	r3, [r1, #24]
   34fce:	ba1b      	rev	r3, r3
   34fd0:	6043      	str	r3, [r0, #4]
   34fd2:	69cb      	ldr	r3, [r1, #28]
   34fd4:	ba1b      	rev	r3, r3
   34fd6:	6003      	str	r3, [r0, #0]
   34fd8:	4770      	bx	lr
   34fda:	bf00      	nop

00034fdc <ocrypto_mod_p256_to_bytes>:
   34fdc:	69cb      	ldr	r3, [r1, #28]
   34fde:	ba1b      	rev	r3, r3
   34fe0:	6003      	str	r3, [r0, #0]
   34fe2:	698b      	ldr	r3, [r1, #24]
   34fe4:	ba1b      	rev	r3, r3
   34fe6:	6043      	str	r3, [r0, #4]
   34fe8:	694b      	ldr	r3, [r1, #20]
   34fea:	ba1b      	rev	r3, r3
   34fec:	6083      	str	r3, [r0, #8]
   34fee:	690b      	ldr	r3, [r1, #16]
   34ff0:	ba1b      	rev	r3, r3
   34ff2:	60c3      	str	r3, [r0, #12]
   34ff4:	68cb      	ldr	r3, [r1, #12]
   34ff6:	ba1b      	rev	r3, r3
   34ff8:	6103      	str	r3, [r0, #16]
   34ffa:	688b      	ldr	r3, [r1, #8]
   34ffc:	ba1b      	rev	r3, r3
   34ffe:	6143      	str	r3, [r0, #20]
   35000:	684b      	ldr	r3, [r1, #4]
   35002:	ba1b      	rev	r3, r3
   35004:	6183      	str	r3, [r0, #24]
   35006:	680b      	ldr	r3, [r1, #0]
   35008:	ba1b      	rev	r3, r3
   3500a:	61c3      	str	r3, [r0, #28]
   3500c:	4770      	bx	lr
   3500e:	bf00      	nop

00035010 <ocrypto_mod_p256_inv>:
   35010:	b570      	push	{r4, r5, r6, lr}
   35012:	b098      	sub	sp, #96	; 0x60
   35014:	460d      	mov	r5, r1
   35016:	4606      	mov	r6, r0
   35018:	a810      	add	r0, sp, #64	; 0x40
   3501a:	f7d7 fcb5 	bl	c988 <ocrypto_mod_p256_sqr>
   3501e:	462a      	mov	r2, r5
   35020:	a910      	add	r1, sp, #64	; 0x40
   35022:	4668      	mov	r0, sp
   35024:	f7d7 fc98 	bl	c958 <ocrypto_mod_p256_mul>
   35028:	4669      	mov	r1, sp
   3502a:	a810      	add	r0, sp, #64	; 0x40
   3502c:	f7d7 fcac 	bl	c988 <ocrypto_mod_p256_sqr>
   35030:	a910      	add	r1, sp, #64	; 0x40
   35032:	4608      	mov	r0, r1
   35034:	f7d7 fca8 	bl	c988 <ocrypto_mod_p256_sqr>
   35038:	466a      	mov	r2, sp
   3503a:	a910      	add	r1, sp, #64	; 0x40
   3503c:	a808      	add	r0, sp, #32
   3503e:	f7d7 fc8b 	bl	c958 <ocrypto_mod_p256_mul>
   35042:	a908      	add	r1, sp, #32
   35044:	a810      	add	r0, sp, #64	; 0x40
   35046:	f7d7 fc9f 	bl	c988 <ocrypto_mod_p256_sqr>
   3504a:	a910      	add	r1, sp, #64	; 0x40
   3504c:	4608      	mov	r0, r1
   3504e:	f7d7 fc9b 	bl	c988 <ocrypto_mod_p256_sqr>
   35052:	a910      	add	r1, sp, #64	; 0x40
   35054:	4608      	mov	r0, r1
   35056:	f7d7 fc97 	bl	c988 <ocrypto_mod_p256_sqr>
   3505a:	a910      	add	r1, sp, #64	; 0x40
   3505c:	4608      	mov	r0, r1
   3505e:	f7d7 fc93 	bl	c988 <ocrypto_mod_p256_sqr>
   35062:	a910      	add	r1, sp, #64	; 0x40
   35064:	aa08      	add	r2, sp, #32
   35066:	4608      	mov	r0, r1
   35068:	f7d7 fc76 	bl	c958 <ocrypto_mod_p256_mul>
   3506c:	a910      	add	r1, sp, #64	; 0x40
   3506e:	4608      	mov	r0, r1
   35070:	f7d7 fc8a 	bl	c988 <ocrypto_mod_p256_sqr>
   35074:	a910      	add	r1, sp, #64	; 0x40
   35076:	4608      	mov	r0, r1
   35078:	f7d7 fc86 	bl	c988 <ocrypto_mod_p256_sqr>
   3507c:	a910      	add	r1, sp, #64	; 0x40
   3507e:	466a      	mov	r2, sp
   35080:	a808      	add	r0, sp, #32
   35082:	f7d7 fc69 	bl	c958 <ocrypto_mod_p256_mul>
   35086:	2405      	movs	r4, #5
   35088:	a908      	add	r1, sp, #32
   3508a:	a810      	add	r0, sp, #64	; 0x40
   3508c:	f7d7 fc7c 	bl	c988 <ocrypto_mod_p256_sqr>
   35090:	a910      	add	r1, sp, #64	; 0x40
   35092:	4608      	mov	r0, r1
   35094:	f7d7 fc78 	bl	c988 <ocrypto_mod_p256_sqr>
   35098:	3c01      	subs	r4, #1
   3509a:	a910      	add	r1, sp, #64	; 0x40
   3509c:	d1f5      	bne.n	3508a <ocrypto_mod_p256_inv+0x7a>
   3509e:	aa08      	add	r2, sp, #32
   350a0:	4608      	mov	r0, r1
   350a2:	f7d7 fc59 	bl	c958 <ocrypto_mod_p256_mul>
   350a6:	2405      	movs	r4, #5
   350a8:	a910      	add	r1, sp, #64	; 0x40
   350aa:	4608      	mov	r0, r1
   350ac:	f7d7 fc6c 	bl	c988 <ocrypto_mod_p256_sqr>
   350b0:	a910      	add	r1, sp, #64	; 0x40
   350b2:	4608      	mov	r0, r1
   350b4:	f7d7 fc68 	bl	c988 <ocrypto_mod_p256_sqr>
   350b8:	3c01      	subs	r4, #1
   350ba:	d1f5      	bne.n	350a8 <ocrypto_mod_p256_inv+0x98>
   350bc:	a910      	add	r1, sp, #64	; 0x40
   350be:	aa08      	add	r2, sp, #32
   350c0:	4608      	mov	r0, r1
   350c2:	f7d7 fc49 	bl	c958 <ocrypto_mod_p256_mul>
   350c6:	a910      	add	r1, sp, #64	; 0x40
   350c8:	a808      	add	r0, sp, #32
   350ca:	f7d7 fc5d 	bl	c988 <ocrypto_mod_p256_sqr>
   350ce:	a908      	add	r1, sp, #32
   350d0:	4608      	mov	r0, r1
   350d2:	f7d7 fc59 	bl	c988 <ocrypto_mod_p256_sqr>
   350d6:	a908      	add	r1, sp, #32
   350d8:	466a      	mov	r2, sp
   350da:	4668      	mov	r0, sp
   350dc:	f7d7 fc3c 	bl	c958 <ocrypto_mod_p256_mul>
   350e0:	2410      	movs	r4, #16
   350e2:	4669      	mov	r1, sp
   350e4:	a810      	add	r0, sp, #64	; 0x40
   350e6:	f7d7 fc4f 	bl	c988 <ocrypto_mod_p256_sqr>
   350ea:	a910      	add	r1, sp, #64	; 0x40
   350ec:	4608      	mov	r0, r1
   350ee:	f7d7 fc4b 	bl	c988 <ocrypto_mod_p256_sqr>
   350f2:	3c01      	subs	r4, #1
   350f4:	a910      	add	r1, sp, #64	; 0x40
   350f6:	d1f5      	bne.n	350e4 <ocrypto_mod_p256_inv+0xd4>
   350f8:	462a      	mov	r2, r5
   350fa:	4608      	mov	r0, r1
   350fc:	f7d7 fc2c 	bl	c958 <ocrypto_mod_p256_mul>
   35100:	2440      	movs	r4, #64	; 0x40
   35102:	a910      	add	r1, sp, #64	; 0x40
   35104:	4608      	mov	r0, r1
   35106:	f7d7 fc3f 	bl	c988 <ocrypto_mod_p256_sqr>
   3510a:	a910      	add	r1, sp, #64	; 0x40
   3510c:	4608      	mov	r0, r1
   3510e:	f7d7 fc3b 	bl	c988 <ocrypto_mod_p256_sqr>
   35112:	3c01      	subs	r4, #1
   35114:	d1f5      	bne.n	35102 <ocrypto_mod_p256_inv+0xf2>
   35116:	a910      	add	r1, sp, #64	; 0x40
   35118:	466a      	mov	r2, sp
   3511a:	4608      	mov	r0, r1
   3511c:	f7d7 fc1c 	bl	c958 <ocrypto_mod_p256_mul>
   35120:	2410      	movs	r4, #16
   35122:	a910      	add	r1, sp, #64	; 0x40
   35124:	4608      	mov	r0, r1
   35126:	f7d7 fc2f 	bl	c988 <ocrypto_mod_p256_sqr>
   3512a:	a910      	add	r1, sp, #64	; 0x40
   3512c:	4608      	mov	r0, r1
   3512e:	f7d7 fc2b 	bl	c988 <ocrypto_mod_p256_sqr>
   35132:	3c01      	subs	r4, #1
   35134:	d1f5      	bne.n	35122 <ocrypto_mod_p256_inv+0x112>
   35136:	a910      	add	r1, sp, #64	; 0x40
   35138:	466a      	mov	r2, sp
   3513a:	4608      	mov	r0, r1
   3513c:	f7d7 fc0c 	bl	c958 <ocrypto_mod_p256_mul>
   35140:	2410      	movs	r4, #16
   35142:	a910      	add	r1, sp, #64	; 0x40
   35144:	4608      	mov	r0, r1
   35146:	f7d7 fc1f 	bl	c988 <ocrypto_mod_p256_sqr>
   3514a:	a910      	add	r1, sp, #64	; 0x40
   3514c:	4608      	mov	r0, r1
   3514e:	f7d7 fc1b 	bl	c988 <ocrypto_mod_p256_sqr>
   35152:	3c01      	subs	r4, #1
   35154:	d1f5      	bne.n	35142 <ocrypto_mod_p256_inv+0x132>
   35156:	a910      	add	r1, sp, #64	; 0x40
   35158:	aa08      	add	r2, sp, #32
   3515a:	4608      	mov	r0, r1
   3515c:	f7d7 fbfc 	bl	c958 <ocrypto_mod_p256_mul>
   35160:	462a      	mov	r2, r5
   35162:	a910      	add	r1, sp, #64	; 0x40
   35164:	4630      	mov	r0, r6
   35166:	f7d7 fbf7 	bl	c958 <ocrypto_mod_p256_mul>
   3516a:	b018      	add	sp, #96	; 0x60
   3516c:	bd70      	pop	{r4, r5, r6, pc}
   3516e:	bf00      	nop

00035170 <nrf_cc3xx_platform_init>:
   35170:	b510      	push	{r4, lr}
   35172:	4c0c      	ldr	r4, [pc, #48]	; (351a4 <nrf_cc3xx_platform_init+0x34>)
   35174:	6823      	ldr	r3, [r4, #0]
   35176:	b113      	cbz	r3, 3517e <nrf_cc3xx_platform_init+0xe>
   35178:	4b0b      	ldr	r3, [pc, #44]	; (351a8 <nrf_cc3xx_platform_init+0x38>)
   3517a:	681b      	ldr	r3, [r3, #0]
   3517c:	b92b      	cbnz	r3, 3518a <nrf_cc3xx_platform_init+0x1a>
   3517e:	f000 fe99 	bl	35eb4 <CC_LibInit>
   35182:	b930      	cbnz	r0, 35192 <nrf_cc3xx_platform_init+0x22>
   35184:	4b08      	ldr	r3, [pc, #32]	; (351a8 <nrf_cc3xx_platform_init+0x38>)
   35186:	2201      	movs	r2, #1
   35188:	601a      	str	r2, [r3, #0]
   3518a:	2301      	movs	r3, #1
   3518c:	6023      	str	r3, [r4, #0]
   3518e:	2000      	movs	r0, #0
   35190:	bd10      	pop	{r4, pc}
   35192:	3801      	subs	r0, #1
   35194:	2806      	cmp	r0, #6
   35196:	d901      	bls.n	3519c <nrf_cc3xx_platform_init+0x2c>
   35198:	4804      	ldr	r0, [pc, #16]	; (351ac <nrf_cc3xx_platform_init+0x3c>)
   3519a:	bd10      	pop	{r4, pc}
   3519c:	4b04      	ldr	r3, [pc, #16]	; (351b0 <nrf_cc3xx_platform_init+0x40>)
   3519e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   351a2:	bd10      	pop	{r4, pc}
   351a4:	200041a0 	.word	0x200041a0
   351a8:	200041a4 	.word	0x200041a4
   351ac:	ffff8ffe 	.word	0xffff8ffe
   351b0:	0003c5fc 	.word	0x0003c5fc

000351b4 <nrf_cc3xx_platform_abort>:
   351b4:	f3bf 8f4f 	dsb	sy
   351b8:	4905      	ldr	r1, [pc, #20]	; (351d0 <nrf_cc3xx_platform_abort+0x1c>)
   351ba:	4b06      	ldr	r3, [pc, #24]	; (351d4 <nrf_cc3xx_platform_abort+0x20>)
   351bc:	68ca      	ldr	r2, [r1, #12]
   351be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   351c2:	4313      	orrs	r3, r2
   351c4:	60cb      	str	r3, [r1, #12]
   351c6:	f3bf 8f4f 	dsb	sy
   351ca:	bf00      	nop
   351cc:	e7fd      	b.n	351ca <nrf_cc3xx_platform_abort+0x16>
   351ce:	bf00      	nop
   351d0:	e000ed00 	.word	0xe000ed00
   351d4:	05fa0004 	.word	0x05fa0004

000351d8 <CC_PalAbort>:
   351d8:	b410      	push	{r4}
   351da:	4b09      	ldr	r3, [pc, #36]	; (35200 <CC_PalAbort+0x28>)
   351dc:	4909      	ldr	r1, [pc, #36]	; (35204 <CC_PalAbort+0x2c>)
   351de:	4c0a      	ldr	r4, [pc, #40]	; (35208 <CC_PalAbort+0x30>)
   351e0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   351e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   351e8:	6849      	ldr	r1, [r1, #4]
   351ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   351ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   351f2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   351f6:	2300      	movs	r3, #0
   351f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   351fc:	bc10      	pop	{r4}
   351fe:	4708      	bx	r1
   35200:	5002b000 	.word	0x5002b000
   35204:	200008dc 	.word	0x200008dc
   35208:	5002a000 	.word	0x5002a000

0003520c <nrf_cc3xx_platform_set_abort>:
   3520c:	e9d0 1200 	ldrd	r1, r2, [r0]
   35210:	4b01      	ldr	r3, [pc, #4]	; (35218 <nrf_cc3xx_platform_set_abort+0xc>)
   35212:	e9c3 1200 	strd	r1, r2, [r3]
   35216:	4770      	bx	lr
   35218:	200008dc 	.word	0x200008dc

0003521c <nrf_cc3xx_platform_ctr_drbg_init>:
   3521c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35220:	4c14      	ldr	r4, [pc, #80]	; (35274 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   35222:	4e15      	ldr	r6, [pc, #84]	; (35278 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   35224:	2800      	cmp	r0, #0
   35226:	bf18      	it	ne
   35228:	4604      	movne	r4, r0
   3522a:	b083      	sub	sp, #12
   3522c:	6823      	ldr	r3, [r4, #0]
   3522e:	42b3      	cmp	r3, r6
   35230:	d01c      	beq.n	3526c <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   35232:	460d      	mov	r5, r1
   35234:	4620      	mov	r0, r4
   35236:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   3523a:	f104 0904 	add.w	r9, r4, #4
   3523e:	4617      	mov	r7, r2
   35240:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   35244:	f000 f8e8 	bl	35418 <mbedtls_platform_zeroize>
   35248:	4648      	mov	r0, r9
   3524a:	f000 fd1d 	bl	35c88 <cc_mbedtls_entropy_init>
   3524e:	4640      	mov	r0, r8
   35250:	f000 fb4a 	bl	358e8 <cc_mbedtls_ctr_drbg_init>
   35254:	4909      	ldr	r1, [pc, #36]	; (3527c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   35256:	9700      	str	r7, [sp, #0]
   35258:	462b      	mov	r3, r5
   3525a:	464a      	mov	r2, r9
   3525c:	4640      	mov	r0, r8
   3525e:	f000 fb59 	bl	35914 <cc_mbedtls_ctr_drbg_seed>
   35262:	b900      	cbnz	r0, 35266 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   35264:	6026      	str	r6, [r4, #0]
   35266:	b003      	add	sp, #12
   35268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3526c:	2000      	movs	r0, #0
   3526e:	b003      	add	sp, #12
   35270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35274:	200041a8 	.word	0x200041a8
   35278:	5ac9bca5 	.word	0x5ac9bca5
   3527c:	00035d11 	.word	0x00035d11

00035280 <nrf_cc3xx_platform_ctr_drbg_get>:
   35280:	b570      	push	{r4, r5, r6, lr}
   35282:	4d0d      	ldr	r5, [pc, #52]	; (352b8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   35284:	2800      	cmp	r0, #0
   35286:	bf18      	it	ne
   35288:	4605      	movne	r5, r0
   3528a:	461e      	mov	r6, r3
   3528c:	6828      	ldr	r0, [r5, #0]
   3528e:	4b0b      	ldr	r3, [pc, #44]	; (352bc <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   35290:	4298      	cmp	r0, r3
   35292:	b082      	sub	sp, #8
   35294:	d10d      	bne.n	352b2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   35296:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   3529a:	2500      	movs	r5, #0
   3529c:	9500      	str	r5, [sp, #0]
   3529e:	462b      	mov	r3, r5
   352a0:	4614      	mov	r4, r2
   352a2:	f000 fb85 	bl	359b0 <cc_mbedtls_ctr_drbg_random_with_add>
   352a6:	2800      	cmp	r0, #0
   352a8:	bf18      	it	ne
   352aa:	462c      	movne	r4, r5
   352ac:	6034      	str	r4, [r6, #0]
   352ae:	b002      	add	sp, #8
   352b0:	bd70      	pop	{r4, r5, r6, pc}
   352b2:	4803      	ldr	r0, [pc, #12]	; (352c0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   352b4:	e7fb      	b.n	352ae <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   352b6:	bf00      	nop
   352b8:	200041a8 	.word	0x200041a8
   352bc:	5ac9bca5 	.word	0x5ac9bca5
   352c0:	ffff8fe8 	.word	0xffff8fe8

000352c4 <mutex_free>:
   352c4:	b510      	push	{r4, lr}
   352c6:	4604      	mov	r4, r0
   352c8:	b150      	cbz	r0, 352e0 <mutex_free+0x1c>
   352ca:	6863      	ldr	r3, [r4, #4]
   352cc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   352d0:	d005      	beq.n	352de <mutex_free+0x1a>
   352d2:	4a06      	ldr	r2, [pc, #24]	; (352ec <mutex_free+0x28>)
   352d4:	4293      	cmp	r3, r2
   352d6:	d002      	beq.n	352de <mutex_free+0x1a>
   352d8:	2300      	movs	r3, #0
   352da:	6023      	str	r3, [r4, #0]
   352dc:	6062      	str	r2, [r4, #4]
   352de:	bd10      	pop	{r4, pc}
   352e0:	4b03      	ldr	r3, [pc, #12]	; (352f0 <mutex_free+0x2c>)
   352e2:	4804      	ldr	r0, [pc, #16]	; (352f4 <mutex_free+0x30>)
   352e4:	685b      	ldr	r3, [r3, #4]
   352e6:	4798      	blx	r3
   352e8:	e7ef      	b.n	352ca <mutex_free+0x6>
   352ea:	bf00      	nop
   352ec:	a95c5f2c 	.word	0xa95c5f2c
   352f0:	200008dc 	.word	0x200008dc
   352f4:	0003c618 	.word	0x0003c618

000352f8 <mutex_lock>:
   352f8:	b1c8      	cbz	r0, 3532e <mutex_lock+0x36>
   352fa:	6843      	ldr	r3, [r0, #4]
   352fc:	4a0d      	ldr	r2, [pc, #52]	; (35334 <mutex_lock+0x3c>)
   352fe:	4293      	cmp	r3, r2
   35300:	d013      	beq.n	3532a <mutex_lock+0x32>
   35302:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   35306:	d00e      	beq.n	35326 <mutex_lock+0x2e>
   35308:	2301      	movs	r3, #1
   3530a:	e850 2f00 	ldrex	r2, [r0]
   3530e:	4619      	mov	r1, r3
   35310:	e840 1c00 	strex	ip, r1, [r0]
   35314:	f09c 0f00 	teq	ip, #0
   35318:	d1f7      	bne.n	3530a <mutex_lock+0x12>
   3531a:	2a01      	cmp	r2, #1
   3531c:	d0f5      	beq.n	3530a <mutex_lock+0x12>
   3531e:	f3bf 8f5f 	dmb	sy
   35322:	2000      	movs	r0, #0
   35324:	4770      	bx	lr
   35326:	4804      	ldr	r0, [pc, #16]	; (35338 <mutex_lock+0x40>)
   35328:	4770      	bx	lr
   3532a:	4804      	ldr	r0, [pc, #16]	; (3533c <mutex_lock+0x44>)
   3532c:	4770      	bx	lr
   3532e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   35332:	4770      	bx	lr
   35334:	a95c5f2c 	.word	0xa95c5f2c
   35338:	ffff8fe9 	.word	0xffff8fe9
   3533c:	ffff8fea 	.word	0xffff8fea

00035340 <mutex_unlock>:
   35340:	b180      	cbz	r0, 35364 <mutex_unlock+0x24>
   35342:	6843      	ldr	r3, [r0, #4]
   35344:	4a09      	ldr	r2, [pc, #36]	; (3536c <mutex_unlock+0x2c>)
   35346:	4293      	cmp	r3, r2
   35348:	d00a      	beq.n	35360 <mutex_unlock+0x20>
   3534a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   3534e:	d005      	beq.n	3535c <mutex_unlock+0x1c>
   35350:	f3bf 8f5f 	dmb	sy
   35354:	2300      	movs	r3, #0
   35356:	6003      	str	r3, [r0, #0]
   35358:	4618      	mov	r0, r3
   3535a:	4770      	bx	lr
   3535c:	4804      	ldr	r0, [pc, #16]	; (35370 <mutex_unlock+0x30>)
   3535e:	4770      	bx	lr
   35360:	4804      	ldr	r0, [pc, #16]	; (35374 <mutex_unlock+0x34>)
   35362:	4770      	bx	lr
   35364:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   35368:	4770      	bx	lr
   3536a:	bf00      	nop
   3536c:	a95c5f2c 	.word	0xa95c5f2c
   35370:	ffff8fe9 	.word	0xffff8fe9
   35374:	ffff8fea 	.word	0xffff8fea

00035378 <mutex_init>:
   35378:	b510      	push	{r4, lr}
   3537a:	4604      	mov	r4, r0
   3537c:	b120      	cbz	r0, 35388 <mutex_init+0x10>
   3537e:	4b04      	ldr	r3, [pc, #16]	; (35390 <mutex_init+0x18>)
   35380:	6063      	str	r3, [r4, #4]
   35382:	2200      	movs	r2, #0
   35384:	6022      	str	r2, [r4, #0]
   35386:	bd10      	pop	{r4, pc}
   35388:	4802      	ldr	r0, [pc, #8]	; (35394 <mutex_init+0x1c>)
   3538a:	f7ff ff25 	bl	351d8 <CC_PalAbort>
   3538e:	e7f6      	b.n	3537e <mutex_init+0x6>
   35390:	3a00003a 	.word	0x3a00003a
   35394:	0003c640 	.word	0x0003c640

00035398 <nrf_cc3xx_platform_set_mutexes>:
   35398:	b570      	push	{r4, r5, r6, lr}
   3539a:	e9d0 2300 	ldrd	r2, r3, [r0]
   3539e:	4c15      	ldr	r4, [pc, #84]	; (353f4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   353a0:	4d15      	ldr	r5, [pc, #84]	; (353f8 <nrf_cc3xx_platform_set_mutexes+0x60>)
   353a2:	6063      	str	r3, [r4, #4]
   353a4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   353a8:	e9c4 3002 	strd	r3, r0, [r4, #8]
   353ac:	6022      	str	r2, [r4, #0]
   353ae:	4b13      	ldr	r3, [pc, #76]	; (353fc <nrf_cc3xx_platform_set_mutexes+0x64>)
   353b0:	6808      	ldr	r0, [r1, #0]
   353b2:	6018      	str	r0, [r3, #0]
   353b4:	6848      	ldr	r0, [r1, #4]
   353b6:	6058      	str	r0, [r3, #4]
   353b8:	6888      	ldr	r0, [r1, #8]
   353ba:	6098      	str	r0, [r3, #8]
   353bc:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   353c0:	60d8      	str	r0, [r3, #12]
   353c2:	6119      	str	r1, [r3, #16]
   353c4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   353c8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   353cc:	d010      	beq.n	353f0 <nrf_cc3xx_platform_set_mutexes+0x58>
   353ce:	490c      	ldr	r1, [pc, #48]	; (35400 <nrf_cc3xx_platform_set_mutexes+0x68>)
   353d0:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   353d4:	2300      	movs	r3, #0
   353d6:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   353da:	f505 708a 	add.w	r0, r5, #276	; 0x114
   353de:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   353e2:	4790      	blx	r2
   353e4:	6823      	ldr	r3, [r4, #0]
   353e6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   353ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   353ee:	4718      	bx	r3
   353f0:	bd70      	pop	{r4, r5, r6, pc}
   353f2:	bf00      	nop
   353f4:	200008ec 	.word	0x200008ec
   353f8:	200041a8 	.word	0x200041a8
   353fc:	200008fc 	.word	0x200008fc
   35400:	a95c5f2c 	.word	0xa95c5f2c

00035404 <mbedtls_zeroize_internal>:
   35404:	b138      	cbz	r0, 35416 <mbedtls_zeroize_internal+0x12>
   35406:	b131      	cbz	r1, 35416 <mbedtls_zeroize_internal+0x12>
   35408:	4401      	add	r1, r0
   3540a:	2200      	movs	r2, #0
   3540c:	4603      	mov	r3, r0
   3540e:	3001      	adds	r0, #1
   35410:	4281      	cmp	r1, r0
   35412:	701a      	strb	r2, [r3, #0]
   35414:	d1fa      	bne.n	3540c <mbedtls_zeroize_internal+0x8>
   35416:	4770      	bx	lr

00035418 <mbedtls_platform_zeroize>:
   35418:	b138      	cbz	r0, 3542a <mbedtls_platform_zeroize+0x12>
   3541a:	b131      	cbz	r1, 3542a <mbedtls_platform_zeroize+0x12>
   3541c:	4401      	add	r1, r0
   3541e:	2200      	movs	r2, #0
   35420:	4603      	mov	r3, r0
   35422:	3001      	adds	r0, #1
   35424:	4288      	cmp	r0, r1
   35426:	701a      	strb	r2, [r3, #0]
   35428:	d1fa      	bne.n	35420 <mbedtls_platform_zeroize+0x8>
   3542a:	4770      	bx	lr

0003542c <block_cipher_df>:
   3542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35430:	b0b7      	sub	sp, #220	; 0xdc
   35432:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   35436:	9005      	str	r0, [sp, #20]
   35438:	f200 8147 	bhi.w	356ca <block_cipher_df+0x29e>
   3543c:	4614      	mov	r4, r2
   3543e:	460d      	mov	r5, r1
   35440:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   35444:	2100      	movs	r1, #0
   35446:	48a2      	ldr	r0, [pc, #648]	; (356d0 <block_cipher_df+0x2a4>)
   35448:	f003 f9c2 	bl	387d0 <memset>
   3544c:	a819      	add	r0, sp, #100	; 0x64
   3544e:	f001 f9cf 	bl	367f0 <cc_mbedtls_aes_init>
   35452:	489f      	ldr	r0, [pc, #636]	; (356d0 <block_cipher_df+0x2a4>)
   35454:	2300      	movs	r3, #0
   35456:	8203      	strh	r3, [r0, #16]
   35458:	ba63      	rev16	r3, r4
   3545a:	8243      	strh	r3, [r0, #18]
   3545c:	2320      	movs	r3, #32
   3545e:	4629      	mov	r1, r5
   35460:	75c3      	strb	r3, [r0, #23]
   35462:	4605      	mov	r5, r0
   35464:	4622      	mov	r2, r4
   35466:	3018      	adds	r0, #24
   35468:	f003 f9a7 	bl	387ba <memcpy>
   3546c:	462b      	mov	r3, r5
   3546e:	4423      	add	r3, r4
   35470:	2280      	movs	r2, #128	; 0x80
   35472:	761a      	strb	r2, [r3, #24]
   35474:	4b97      	ldr	r3, [pc, #604]	; (356d4 <block_cipher_df+0x2a8>)
   35476:	930d      	str	r3, [sp, #52]	; 0x34
   35478:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   3547c:	930e      	str	r3, [sp, #56]	; 0x38
   3547e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   35482:	930f      	str	r3, [sp, #60]	; 0x3c
   35484:	a90d      	add	r1, sp, #52	; 0x34
   35486:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   3548a:	a819      	add	r0, sp, #100	; 0x64
   3548c:	9310      	str	r3, [sp, #64]	; 0x40
   3548e:	f001 f9c5 	bl	3681c <cc_mbedtls_aes_setkey_enc>
   35492:	4605      	mov	r5, r0
   35494:	2800      	cmp	r0, #0
   35496:	f040 80f4 	bne.w	35682 <block_cipher_df+0x256>
   3549a:	f104 0319 	add.w	r3, r4, #25
   3549e:	9306      	str	r3, [sp, #24]
   354a0:	f10d 0820 	add.w	r8, sp, #32
   354a4:	ab11      	add	r3, sp, #68	; 0x44
   354a6:	9304      	str	r3, [sp, #16]
   354a8:	9307      	str	r3, [sp, #28]
   354aa:	46c1      	mov	r9, r8
   354ac:	2210      	movs	r2, #16
   354ae:	2100      	movs	r1, #0
   354b0:	4648      	mov	r0, r9
   354b2:	f003 f98d 	bl	387d0 <memset>
   354b6:	f8df a220 	ldr.w	sl, [pc, #544]	; 356d8 <block_cipher_df+0x2ac>
   354ba:	9b06      	ldr	r3, [sp, #24]
   354bc:	9300      	str	r3, [sp, #0]
   354be:	f8cd 900c 	str.w	r9, [sp, #12]
   354c2:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   354c6:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   354ca:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   354ce:	f89d 5020 	ldrb.w	r5, [sp, #32]
   354d2:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   354d6:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   354da:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   354de:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   354e2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   354e6:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   354ea:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   354ee:	406a      	eors	r2, r5
   354f0:	ea8e 0e00 	eor.w	lr, lr, r0
   354f4:	9d00      	ldr	r5, [sp, #0]
   354f6:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   354fa:	9202      	str	r2, [sp, #8]
   354fc:	ea8c 0c03 	eor.w	ip, ip, r3
   35500:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   35504:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   35508:	2d10      	cmp	r5, #16
   3550a:	ea80 0003 	eor.w	r0, r0, r3
   3550e:	462b      	mov	r3, r5
   35510:	bf8c      	ite	hi
   35512:	3b10      	subhi	r3, #16
   35514:	1b6b      	subls	r3, r5, r5
   35516:	9300      	str	r3, [sp, #0]
   35518:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   3551c:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   35520:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   35524:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   35528:	4061      	eors	r1, r4
   3552a:	405f      	eors	r7, r3
   3552c:	2400      	movs	r4, #0
   3552e:	406a      	eors	r2, r5
   35530:	ea8b 0b06 	eor.w	fp, fp, r6
   35534:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   35538:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   3553c:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   35540:	9601      	str	r6, [sp, #4]
   35542:	4626      	mov	r6, r4
   35544:	406b      	eors	r3, r5
   35546:	f36b 0607 	bfi	r6, fp, #0, #8
   3554a:	4625      	mov	r5, r4
   3554c:	f367 260f 	bfi	r6, r7, #8, #8
   35550:	462f      	mov	r7, r5
   35552:	f361 0707 	bfi	r7, r1, #0, #8
   35556:	9902      	ldr	r1, [sp, #8]
   35558:	f361 0507 	bfi	r5, r1, #0, #8
   3555c:	f362 250f 	bfi	r5, r2, #8, #8
   35560:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   35564:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   35568:	f363 270f 	bfi	r7, r3, #8, #8
   3556c:	ea82 0909 	eor.w	r9, r2, r9
   35570:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   35574:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   35578:	ea83 0808 	eor.w	r8, r3, r8
   3557c:	404a      	eors	r2, r1
   3557e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   35582:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   35586:	f36e 0407 	bfi	r4, lr, #0, #8
   3558a:	404b      	eors	r3, r1
   3558c:	f368 4717 	bfi	r7, r8, #16, #8
   35590:	f36c 240f 	bfi	r4, ip, #8, #8
   35594:	f363 671f 	bfi	r7, r3, #24, #8
   35598:	9b03      	ldr	r3, [sp, #12]
   3559a:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   3559e:	f8dd e004 	ldr.w	lr, [sp, #4]
   355a2:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   355a6:	ea8c 0c0e 	eor.w	ip, ip, lr
   355aa:	f36c 4617 	bfi	r6, ip, #16, #8
   355ae:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   355b2:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   355b6:	ea8c 0c08 	eor.w	ip, ip, r8
   355ba:	f36c 661f 	bfi	r6, ip, #24, #8
   355be:	f369 4517 	bfi	r5, r9, #16, #8
   355c2:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   355c6:	960b      	str	r6, [sp, #44]	; 0x2c
   355c8:	f362 651f 	bfi	r5, r2, #24, #8
   355cc:	f360 4417 	bfi	r4, r0, #16, #8
   355d0:	9508      	str	r5, [sp, #32]
   355d2:	ea8c 050e 	eor.w	r5, ip, lr
   355d6:	f365 641f 	bfi	r4, r5, #24, #8
   355da:	461a      	mov	r2, r3
   355dc:	2101      	movs	r1, #1
   355de:	a819      	add	r0, sp, #100	; 0x64
   355e0:	f10a 0a10 	add.w	sl, sl, #16
   355e4:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   355e8:	f001 f932 	bl	36850 <cc_mbedtls_aes_crypt_ecb>
   355ec:	2800      	cmp	r0, #0
   355ee:	d168      	bne.n	356c2 <block_cipher_df+0x296>
   355f0:	9b00      	ldr	r3, [sp, #0]
   355f2:	2b00      	cmp	r3, #0
   355f4:	f47f af65 	bne.w	354c2 <block_cipher_df+0x96>
   355f8:	9c07      	ldr	r4, [sp, #28]
   355fa:	f8dd 900c 	ldr.w	r9, [sp, #12]
   355fe:	4620      	mov	r0, r4
   35600:	2210      	movs	r2, #16
   35602:	3410      	adds	r4, #16
   35604:	4649      	mov	r1, r9
   35606:	9407      	str	r4, [sp, #28]
   35608:	f003 f8d7 	bl	387ba <memcpy>
   3560c:	4a30      	ldr	r2, [pc, #192]	; (356d0 <block_cipher_df+0x2a4>)
   3560e:	78d3      	ldrb	r3, [r2, #3]
   35610:	3301      	adds	r3, #1
   35612:	70d3      	strb	r3, [r2, #3]
   35614:	ab19      	add	r3, sp, #100	; 0x64
   35616:	429c      	cmp	r4, r3
   35618:	f47f af48 	bne.w	354ac <block_cipher_df+0x80>
   3561c:	9904      	ldr	r1, [sp, #16]
   3561e:	2280      	movs	r2, #128	; 0x80
   35620:	4618      	mov	r0, r3
   35622:	f001 f8fb 	bl	3681c <cc_mbedtls_aes_setkey_enc>
   35626:	46c8      	mov	r8, r9
   35628:	4605      	mov	r5, r0
   3562a:	bb70      	cbnz	r0, 3568a <block_cipher_df+0x25e>
   3562c:	9c05      	ldr	r4, [sp, #20]
   3562e:	f104 0620 	add.w	r6, r4, #32
   35632:	ab15      	add	r3, sp, #84	; 0x54
   35634:	461a      	mov	r2, r3
   35636:	2101      	movs	r1, #1
   35638:	a819      	add	r0, sp, #100	; 0x64
   3563a:	f001 f909 	bl	36850 <cc_mbedtls_aes_crypt_ecb>
   3563e:	2210      	movs	r2, #16
   35640:	4605      	mov	r5, r0
   35642:	bb10      	cbnz	r0, 3568a <block_cipher_df+0x25e>
   35644:	4620      	mov	r0, r4
   35646:	a915      	add	r1, sp, #84	; 0x54
   35648:	3410      	adds	r4, #16
   3564a:	f003 f8b6 	bl	387ba <memcpy>
   3564e:	42b4      	cmp	r4, r6
   35650:	d1ef      	bne.n	35632 <block_cipher_df+0x206>
   35652:	a819      	add	r0, sp, #100	; 0x64
   35654:	f001 f8dc 	bl	36810 <cc_mbedtls_aes_free>
   35658:	481d      	ldr	r0, [pc, #116]	; (356d0 <block_cipher_df+0x2a4>)
   3565a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   3565e:	f7ff fedb 	bl	35418 <mbedtls_platform_zeroize>
   35662:	9804      	ldr	r0, [sp, #16]
   35664:	2120      	movs	r1, #32
   35666:	f7ff fed7 	bl	35418 <mbedtls_platform_zeroize>
   3566a:	a80d      	add	r0, sp, #52	; 0x34
   3566c:	2110      	movs	r1, #16
   3566e:	f7ff fed3 	bl	35418 <mbedtls_platform_zeroize>
   35672:	4640      	mov	r0, r8
   35674:	2110      	movs	r1, #16
   35676:	f7ff fecf 	bl	35418 <mbedtls_platform_zeroize>
   3567a:	4628      	mov	r0, r5
   3567c:	b037      	add	sp, #220	; 0xdc
   3567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35682:	ab11      	add	r3, sp, #68	; 0x44
   35684:	9304      	str	r3, [sp, #16]
   35686:	f10d 0820 	add.w	r8, sp, #32
   3568a:	a819      	add	r0, sp, #100	; 0x64
   3568c:	f001 f8c0 	bl	36810 <cc_mbedtls_aes_free>
   35690:	480f      	ldr	r0, [pc, #60]	; (356d0 <block_cipher_df+0x2a4>)
   35692:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   35696:	f7ff febf 	bl	35418 <mbedtls_platform_zeroize>
   3569a:	9804      	ldr	r0, [sp, #16]
   3569c:	2120      	movs	r1, #32
   3569e:	f7ff febb 	bl	35418 <mbedtls_platform_zeroize>
   356a2:	a80d      	add	r0, sp, #52	; 0x34
   356a4:	2110      	movs	r1, #16
   356a6:	f7ff feb7 	bl	35418 <mbedtls_platform_zeroize>
   356aa:	4640      	mov	r0, r8
   356ac:	2110      	movs	r1, #16
   356ae:	f7ff feb3 	bl	35418 <mbedtls_platform_zeroize>
   356b2:	9805      	ldr	r0, [sp, #20]
   356b4:	2120      	movs	r1, #32
   356b6:	f7ff feaf 	bl	35418 <mbedtls_platform_zeroize>
   356ba:	4628      	mov	r0, r5
   356bc:	b037      	add	sp, #220	; 0xdc
   356be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   356c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
   356c6:	4605      	mov	r5, r0
   356c8:	e7df      	b.n	3568a <block_cipher_df+0x25e>
   356ca:	f06f 0537 	mvn.w	r5, #55	; 0x37
   356ce:	e7f4      	b.n	356ba <block_cipher_df+0x28e>
   356d0:	20004378 	.word	0x20004378
   356d4:	03020100 	.word	0x03020100
   356d8:	20004388 	.word	0x20004388

000356dc <ctr_drbg_update_internal>:
   356dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   356e0:	b088      	sub	sp, #32
   356e2:	4604      	mov	r4, r0
   356e4:	460d      	mov	r5, r1
   356e6:	2220      	movs	r2, #32
   356e8:	2100      	movs	r1, #0
   356ea:	4668      	mov	r0, sp
   356ec:	f003 f870 	bl	387d0 <memset>
   356f0:	f104 0620 	add.w	r6, r4, #32
   356f4:	466f      	mov	r7, sp
   356f6:	7be2      	ldrb	r2, [r4, #15]
   356f8:	3201      	adds	r2, #1
   356fa:	b2d2      	uxtb	r2, r2
   356fc:	73e2      	strb	r2, [r4, #15]
   356fe:	2a00      	cmp	r2, #0
   35700:	d14d      	bne.n	3579e <ctr_drbg_update_internal+0xc2>
   35702:	7ba2      	ldrb	r2, [r4, #14]
   35704:	3201      	adds	r2, #1
   35706:	b2d2      	uxtb	r2, r2
   35708:	73a2      	strb	r2, [r4, #14]
   3570a:	2a00      	cmp	r2, #0
   3570c:	d147      	bne.n	3579e <ctr_drbg_update_internal+0xc2>
   3570e:	7b63      	ldrb	r3, [r4, #13]
   35710:	3301      	adds	r3, #1
   35712:	b2db      	uxtb	r3, r3
   35714:	7363      	strb	r3, [r4, #13]
   35716:	2b00      	cmp	r3, #0
   35718:	d141      	bne.n	3579e <ctr_drbg_update_internal+0xc2>
   3571a:	7b23      	ldrb	r3, [r4, #12]
   3571c:	3301      	adds	r3, #1
   3571e:	b2db      	uxtb	r3, r3
   35720:	7323      	strb	r3, [r4, #12]
   35722:	2b00      	cmp	r3, #0
   35724:	d13b      	bne.n	3579e <ctr_drbg_update_internal+0xc2>
   35726:	7ae3      	ldrb	r3, [r4, #11]
   35728:	3301      	adds	r3, #1
   3572a:	b2db      	uxtb	r3, r3
   3572c:	72e3      	strb	r3, [r4, #11]
   3572e:	2b00      	cmp	r3, #0
   35730:	d135      	bne.n	3579e <ctr_drbg_update_internal+0xc2>
   35732:	7aa3      	ldrb	r3, [r4, #10]
   35734:	3301      	adds	r3, #1
   35736:	b2db      	uxtb	r3, r3
   35738:	72a3      	strb	r3, [r4, #10]
   3573a:	2b00      	cmp	r3, #0
   3573c:	d12f      	bne.n	3579e <ctr_drbg_update_internal+0xc2>
   3573e:	7a63      	ldrb	r3, [r4, #9]
   35740:	3301      	adds	r3, #1
   35742:	b2db      	uxtb	r3, r3
   35744:	7263      	strb	r3, [r4, #9]
   35746:	bb53      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   35748:	7a23      	ldrb	r3, [r4, #8]
   3574a:	3301      	adds	r3, #1
   3574c:	b2db      	uxtb	r3, r3
   3574e:	7223      	strb	r3, [r4, #8]
   35750:	bb2b      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   35752:	79e3      	ldrb	r3, [r4, #7]
   35754:	3301      	adds	r3, #1
   35756:	b2db      	uxtb	r3, r3
   35758:	71e3      	strb	r3, [r4, #7]
   3575a:	bb03      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   3575c:	79a3      	ldrb	r3, [r4, #6]
   3575e:	3301      	adds	r3, #1
   35760:	b2db      	uxtb	r3, r3
   35762:	71a3      	strb	r3, [r4, #6]
   35764:	b9db      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   35766:	7963      	ldrb	r3, [r4, #5]
   35768:	3301      	adds	r3, #1
   3576a:	b2db      	uxtb	r3, r3
   3576c:	7163      	strb	r3, [r4, #5]
   3576e:	b9b3      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   35770:	7923      	ldrb	r3, [r4, #4]
   35772:	3301      	adds	r3, #1
   35774:	b2db      	uxtb	r3, r3
   35776:	7123      	strb	r3, [r4, #4]
   35778:	b98b      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   3577a:	78e3      	ldrb	r3, [r4, #3]
   3577c:	3301      	adds	r3, #1
   3577e:	b2db      	uxtb	r3, r3
   35780:	70e3      	strb	r3, [r4, #3]
   35782:	b963      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   35784:	78a3      	ldrb	r3, [r4, #2]
   35786:	3301      	adds	r3, #1
   35788:	b2db      	uxtb	r3, r3
   3578a:	70a3      	strb	r3, [r4, #2]
   3578c:	b93b      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   3578e:	7863      	ldrb	r3, [r4, #1]
   35790:	3301      	adds	r3, #1
   35792:	b2db      	uxtb	r3, r3
   35794:	7063      	strb	r3, [r4, #1]
   35796:	b913      	cbnz	r3, 3579e <ctr_drbg_update_internal+0xc2>
   35798:	7823      	ldrb	r3, [r4, #0]
   3579a:	3301      	adds	r3, #1
   3579c:	7023      	strb	r3, [r4, #0]
   3579e:	463b      	mov	r3, r7
   357a0:	4622      	mov	r2, r4
   357a2:	2101      	movs	r1, #1
   357a4:	4630      	mov	r0, r6
   357a6:	f001 f853 	bl	36850 <cc_mbedtls_aes_crypt_ecb>
   357aa:	4680      	mov	r8, r0
   357ac:	bb50      	cbnz	r0, 35804 <ctr_drbg_update_internal+0x128>
   357ae:	3710      	adds	r7, #16
   357b0:	ab08      	add	r3, sp, #32
   357b2:	429f      	cmp	r7, r3
   357b4:	d19f      	bne.n	356f6 <ctr_drbg_update_internal+0x1a>
   357b6:	9a00      	ldr	r2, [sp, #0]
   357b8:	682b      	ldr	r3, [r5, #0]
   357ba:	9906      	ldr	r1, [sp, #24]
   357bc:	4053      	eors	r3, r2
   357be:	9300      	str	r3, [sp, #0]
   357c0:	9a01      	ldr	r2, [sp, #4]
   357c2:	686b      	ldr	r3, [r5, #4]
   357c4:	4053      	eors	r3, r2
   357c6:	9301      	str	r3, [sp, #4]
   357c8:	9a02      	ldr	r2, [sp, #8]
   357ca:	68ab      	ldr	r3, [r5, #8]
   357cc:	4053      	eors	r3, r2
   357ce:	9302      	str	r3, [sp, #8]
   357d0:	9a03      	ldr	r2, [sp, #12]
   357d2:	68eb      	ldr	r3, [r5, #12]
   357d4:	4053      	eors	r3, r2
   357d6:	9303      	str	r3, [sp, #12]
   357d8:	9a04      	ldr	r2, [sp, #16]
   357da:	692b      	ldr	r3, [r5, #16]
   357dc:	4053      	eors	r3, r2
   357de:	9304      	str	r3, [sp, #16]
   357e0:	9a05      	ldr	r2, [sp, #20]
   357e2:	696b      	ldr	r3, [r5, #20]
   357e4:	4053      	eors	r3, r2
   357e6:	69aa      	ldr	r2, [r5, #24]
   357e8:	9305      	str	r3, [sp, #20]
   357ea:	404a      	eors	r2, r1
   357ec:	69eb      	ldr	r3, [r5, #28]
   357ee:	9206      	str	r2, [sp, #24]
   357f0:	9a07      	ldr	r2, [sp, #28]
   357f2:	4630      	mov	r0, r6
   357f4:	4053      	eors	r3, r2
   357f6:	4669      	mov	r1, sp
   357f8:	2280      	movs	r2, #128	; 0x80
   357fa:	9307      	str	r3, [sp, #28]
   357fc:	f001 f80e 	bl	3681c <cc_mbedtls_aes_setkey_enc>
   35800:	4680      	mov	r8, r0
   35802:	b138      	cbz	r0, 35814 <ctr_drbg_update_internal+0x138>
   35804:	4668      	mov	r0, sp
   35806:	2120      	movs	r1, #32
   35808:	f7ff fe06 	bl	35418 <mbedtls_platform_zeroize>
   3580c:	4640      	mov	r0, r8
   3580e:	b008      	add	sp, #32
   35810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35814:	2210      	movs	r2, #16
   35816:	eb0d 0102 	add.w	r1, sp, r2
   3581a:	4620      	mov	r0, r4
   3581c:	f002 ffcd 	bl	387ba <memcpy>
   35820:	e7f0      	b.n	35804 <ctr_drbg_update_internal+0x128>
   35822:	bf00      	nop

00035824 <mbedtls_ctr_drbg_reseed_internal>:
   35824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35828:	4604      	mov	r4, r0
   3582a:	6980      	ldr	r0, [r0, #24]
   3582c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   35830:	d852      	bhi.n	358d8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   35832:	461d      	mov	r5, r3
   35834:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   35838:	42ab      	cmp	r3, r5
   3583a:	d34d      	bcc.n	358d8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   3583c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   35840:	1a18      	subs	r0, r3, r0
   35842:	4290      	cmp	r0, r2
   35844:	4616      	mov	r6, r2
   35846:	d347      	bcc.n	358d8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   35848:	f8df 9098 	ldr.w	r9, [pc, #152]	; 358e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   3584c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   35850:	460f      	mov	r7, r1
   35852:	4648      	mov	r0, r9
   35854:	2100      	movs	r1, #0
   35856:	f002 ffbb 	bl	387d0 <memset>
   3585a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   3585e:	69a2      	ldr	r2, [r4, #24]
   35860:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   35864:	4649      	mov	r1, r9
   35866:	4798      	blx	r3
   35868:	2800      	cmp	r0, #0
   3586a:	d138      	bne.n	358de <mbedtls_ctr_drbg_reseed_internal+0xba>
   3586c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   35870:	b13d      	cbz	r5, 35882 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   35872:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   35876:	462a      	mov	r2, r5
   35878:	eb09 0108 	add.w	r1, r9, r8
   3587c:	4798      	blx	r3
   3587e:	bb70      	cbnz	r0, 358de <mbedtls_ctr_drbg_reseed_internal+0xba>
   35880:	44a8      	add	r8, r5
   35882:	b107      	cbz	r7, 35886 <mbedtls_ctr_drbg_reseed_internal+0x62>
   35884:	b9c6      	cbnz	r6, 358b8 <mbedtls_ctr_drbg_reseed_internal+0x94>
   35886:	4917      	ldr	r1, [pc, #92]	; (358e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   35888:	4642      	mov	r2, r8
   3588a:	4608      	mov	r0, r1
   3588c:	f7ff fdce 	bl	3542c <block_cipher_df>
   35890:	4605      	mov	r5, r0
   35892:	b138      	cbz	r0, 358a4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   35894:	4813      	ldr	r0, [pc, #76]	; (358e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   35896:	f44f 71c0 	mov.w	r1, #384	; 0x180
   3589a:	f7ff fdbd 	bl	35418 <mbedtls_platform_zeroize>
   3589e:	4628      	mov	r0, r5
   358a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   358a4:	490f      	ldr	r1, [pc, #60]	; (358e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   358a6:	4620      	mov	r0, r4
   358a8:	f7ff ff18 	bl	356dc <ctr_drbg_update_internal>
   358ac:	4605      	mov	r5, r0
   358ae:	2800      	cmp	r0, #0
   358b0:	d1f0      	bne.n	35894 <mbedtls_ctr_drbg_reseed_internal+0x70>
   358b2:	2301      	movs	r3, #1
   358b4:	6123      	str	r3, [r4, #16]
   358b6:	e7ed      	b.n	35894 <mbedtls_ctr_drbg_reseed_internal+0x70>
   358b8:	eb09 0008 	add.w	r0, r9, r8
   358bc:	4639      	mov	r1, r7
   358be:	4632      	mov	r2, r6
   358c0:	f002 ff7b 	bl	387ba <memcpy>
   358c4:	4907      	ldr	r1, [pc, #28]	; (358e4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   358c6:	44b0      	add	r8, r6
   358c8:	4642      	mov	r2, r8
   358ca:	4608      	mov	r0, r1
   358cc:	f7ff fdae 	bl	3542c <block_cipher_df>
   358d0:	4605      	mov	r5, r0
   358d2:	2800      	cmp	r0, #0
   358d4:	d1de      	bne.n	35894 <mbedtls_ctr_drbg_reseed_internal+0x70>
   358d6:	e7e5      	b.n	358a4 <mbedtls_ctr_drbg_reseed_internal+0x80>
   358d8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   358dc:	e7df      	b.n	3589e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   358de:	f06f 0533 	mvn.w	r5, #51	; 0x33
   358e2:	e7dc      	b.n	3589e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   358e4:	20004518 	.word	0x20004518

000358e8 <cc_mbedtls_ctr_drbg_init>:
   358e8:	b510      	push	{r4, lr}
   358ea:	22a4      	movs	r2, #164	; 0xa4
   358ec:	4604      	mov	r4, r0
   358ee:	2100      	movs	r1, #0
   358f0:	f002 ff6e 	bl	387d0 <memset>
   358f4:	4b06      	ldr	r3, [pc, #24]	; (35910 <cc_mbedtls_ctr_drbg_init+0x28>)
   358f6:	f04f 31ff 	mov.w	r1, #4294967295
   358fa:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   358fe:	6121      	str	r1, [r4, #16]
   35900:	61e2      	str	r2, [r4, #28]
   35902:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   35906:	681b      	ldr	r3, [r3, #0]
   35908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3590c:	4718      	bx	r3
   3590e:	bf00      	nop
   35910:	20000940 	.word	0x20000940

00035914 <cc_mbedtls_ctr_drbg_seed>:
   35914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35918:	b085      	sub	sp, #20
   3591a:	4605      	mov	r5, r0
   3591c:	460f      	mov	r7, r1
   3591e:	4616      	mov	r6, r2
   35920:	2100      	movs	r1, #0
   35922:	2210      	movs	r2, #16
   35924:	4668      	mov	r0, sp
   35926:	4699      	mov	r9, r3
   35928:	f002 ff52 	bl	387d0 <memset>
   3592c:	4b1e      	ldr	r3, [pc, #120]	; (359a8 <cc_mbedtls_ctr_drbg_seed+0x94>)
   3592e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   35932:	681b      	ldr	r3, [r3, #0]
   35934:	4640      	mov	r0, r8
   35936:	4798      	blx	r3
   35938:	b120      	cbz	r0, 35944 <cc_mbedtls_ctr_drbg_seed+0x30>
   3593a:	4604      	mov	r4, r0
   3593c:	4620      	mov	r0, r4
   3593e:	b005      	add	sp, #20
   35940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35944:	f105 0420 	add.w	r4, r5, #32
   35948:	4620      	mov	r0, r4
   3594a:	f000 ff51 	bl	367f0 <cc_mbedtls_aes_init>
   3594e:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   35952:	69ae      	ldr	r6, [r5, #24]
   35954:	692b      	ldr	r3, [r5, #16]
   35956:	b9ee      	cbnz	r6, 35994 <cc_mbedtls_ctr_drbg_seed+0x80>
   35958:	2220      	movs	r2, #32
   3595a:	2b00      	cmp	r3, #0
   3595c:	61aa      	str	r2, [r5, #24]
   3595e:	db20      	blt.n	359a2 <cc_mbedtls_ctr_drbg_seed+0x8e>
   35960:	461e      	mov	r6, r3
   35962:	4620      	mov	r0, r4
   35964:	4669      	mov	r1, sp
   35966:	2280      	movs	r2, #128	; 0x80
   35968:	f000 ff58 	bl	3681c <cc_mbedtls_aes_setkey_enc>
   3596c:	4604      	mov	r4, r0
   3596e:	b930      	cbnz	r0, 3597e <cc_mbedtls_ctr_drbg_seed+0x6a>
   35970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   35972:	4633      	mov	r3, r6
   35974:	4649      	mov	r1, r9
   35976:	4628      	mov	r0, r5
   35978:	f7ff ff54 	bl	35824 <mbedtls_ctr_drbg_reseed_internal>
   3597c:	4604      	mov	r4, r0
   3597e:	4b0b      	ldr	r3, [pc, #44]	; (359ac <cc_mbedtls_ctr_drbg_seed+0x98>)
   35980:	4640      	mov	r0, r8
   35982:	681b      	ldr	r3, [r3, #0]
   35984:	4798      	blx	r3
   35986:	2800      	cmp	r0, #0
   35988:	bf18      	it	ne
   3598a:	4604      	movne	r4, r0
   3598c:	4620      	mov	r0, r4
   3598e:	b005      	add	sp, #20
   35990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35994:	2b00      	cmp	r3, #0
   35996:	dae3      	bge.n	35960 <cc_mbedtls_ctr_drbg_seed+0x4c>
   35998:	2e17      	cmp	r6, #23
   3599a:	d802      	bhi.n	359a2 <cc_mbedtls_ctr_drbg_seed+0x8e>
   3599c:	3601      	adds	r6, #1
   3599e:	0876      	lsrs	r6, r6, #1
   359a0:	e7df      	b.n	35962 <cc_mbedtls_ctr_drbg_seed+0x4e>
   359a2:	2600      	movs	r6, #0
   359a4:	e7dd      	b.n	35962 <cc_mbedtls_ctr_drbg_seed+0x4e>
   359a6:	bf00      	nop
   359a8:	20000944 	.word	0x20000944
   359ac:	20000948 	.word	0x20000948

000359b0 <cc_mbedtls_ctr_drbg_random_with_add>:
   359b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   359b4:	b08d      	sub	sp, #52	; 0x34
   359b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   359ba:	9f16      	ldr	r7, [sp, #88]	; 0x58
   359bc:	f200 80e3 	bhi.w	35b86 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   359c0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   359c4:	f200 80dc 	bhi.w	35b80 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   359c8:	4604      	mov	r4, r0
   359ca:	4615      	mov	r5, r2
   359cc:	460e      	mov	r6, r1
   359ce:	2220      	movs	r2, #32
   359d0:	2100      	movs	r1, #0
   359d2:	a804      	add	r0, sp, #16
   359d4:	4698      	mov	r8, r3
   359d6:	f002 fefb 	bl	387d0 <memset>
   359da:	4b6c      	ldr	r3, [pc, #432]	; (35b8c <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   359dc:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   359e0:	681b      	ldr	r3, [r3, #0]
   359e2:	4648      	mov	r0, r9
   359e4:	4798      	blx	r3
   359e6:	4683      	mov	fp, r0
   359e8:	2800      	cmp	r0, #0
   359ea:	f040 8092 	bne.w	35b12 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   359ee:	6922      	ldr	r2, [r4, #16]
   359f0:	69e3      	ldr	r3, [r4, #28]
   359f2:	429a      	cmp	r2, r3
   359f4:	f300 8091 	bgt.w	35b1a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   359f8:	6963      	ldr	r3, [r4, #20]
   359fa:	2b00      	cmp	r3, #0
   359fc:	f040 808d 	bne.w	35b1a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   35a00:	2f00      	cmp	r7, #0
   35a02:	f040 80a9 	bne.w	35b58 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   35a06:	f8df a188 	ldr.w	sl, [pc, #392]	; 35b90 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   35a0a:	466f      	mov	r7, sp
   35a0c:	2d00      	cmp	r5, #0
   35a0e:	f000 8098 	beq.w	35b42 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   35a12:	f104 0820 	add.w	r8, r4, #32
   35a16:	466f      	mov	r7, sp
   35a18:	e00e      	b.n	35a38 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   35a1a:	2d10      	cmp	r5, #16
   35a1c:	46ab      	mov	fp, r5
   35a1e:	bf28      	it	cs
   35a20:	f04f 0b10 	movcs.w	fp, #16
   35a24:	4630      	mov	r0, r6
   35a26:	465a      	mov	r2, fp
   35a28:	4639      	mov	r1, r7
   35a2a:	f002 fec6 	bl	387ba <memcpy>
   35a2e:	ebb5 050b 	subs.w	r5, r5, fp
   35a32:	445e      	add	r6, fp
   35a34:	f000 8085 	beq.w	35b42 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   35a38:	7be3      	ldrb	r3, [r4, #15]
   35a3a:	3301      	adds	r3, #1
   35a3c:	b2db      	uxtb	r3, r3
   35a3e:	73e3      	strb	r3, [r4, #15]
   35a40:	2b00      	cmp	r3, #0
   35a42:	d14d      	bne.n	35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a44:	7ba3      	ldrb	r3, [r4, #14]
   35a46:	3301      	adds	r3, #1
   35a48:	b2db      	uxtb	r3, r3
   35a4a:	73a3      	strb	r3, [r4, #14]
   35a4c:	2b00      	cmp	r3, #0
   35a4e:	d147      	bne.n	35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a50:	7b63      	ldrb	r3, [r4, #13]
   35a52:	3301      	adds	r3, #1
   35a54:	b2db      	uxtb	r3, r3
   35a56:	7363      	strb	r3, [r4, #13]
   35a58:	2b00      	cmp	r3, #0
   35a5a:	d141      	bne.n	35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a5c:	7b23      	ldrb	r3, [r4, #12]
   35a5e:	3301      	adds	r3, #1
   35a60:	b2db      	uxtb	r3, r3
   35a62:	7323      	strb	r3, [r4, #12]
   35a64:	2b00      	cmp	r3, #0
   35a66:	d13b      	bne.n	35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a68:	7ae3      	ldrb	r3, [r4, #11]
   35a6a:	3301      	adds	r3, #1
   35a6c:	b2db      	uxtb	r3, r3
   35a6e:	72e3      	strb	r3, [r4, #11]
   35a70:	2b00      	cmp	r3, #0
   35a72:	d135      	bne.n	35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a74:	7aa3      	ldrb	r3, [r4, #10]
   35a76:	3301      	adds	r3, #1
   35a78:	b2db      	uxtb	r3, r3
   35a7a:	72a3      	strb	r3, [r4, #10]
   35a7c:	2b00      	cmp	r3, #0
   35a7e:	d12f      	bne.n	35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a80:	7a63      	ldrb	r3, [r4, #9]
   35a82:	3301      	adds	r3, #1
   35a84:	b2db      	uxtb	r3, r3
   35a86:	7263      	strb	r3, [r4, #9]
   35a88:	bb53      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a8a:	7a23      	ldrb	r3, [r4, #8]
   35a8c:	3301      	adds	r3, #1
   35a8e:	b2db      	uxtb	r3, r3
   35a90:	7223      	strb	r3, [r4, #8]
   35a92:	bb2b      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a94:	79e3      	ldrb	r3, [r4, #7]
   35a96:	3301      	adds	r3, #1
   35a98:	b2db      	uxtb	r3, r3
   35a9a:	71e3      	strb	r3, [r4, #7]
   35a9c:	bb03      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35a9e:	79a3      	ldrb	r3, [r4, #6]
   35aa0:	3301      	adds	r3, #1
   35aa2:	b2db      	uxtb	r3, r3
   35aa4:	71a3      	strb	r3, [r4, #6]
   35aa6:	b9db      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35aa8:	7963      	ldrb	r3, [r4, #5]
   35aaa:	3301      	adds	r3, #1
   35aac:	b2db      	uxtb	r3, r3
   35aae:	7163      	strb	r3, [r4, #5]
   35ab0:	b9b3      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35ab2:	7923      	ldrb	r3, [r4, #4]
   35ab4:	3301      	adds	r3, #1
   35ab6:	b2db      	uxtb	r3, r3
   35ab8:	7123      	strb	r3, [r4, #4]
   35aba:	b98b      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35abc:	78e3      	ldrb	r3, [r4, #3]
   35abe:	3301      	adds	r3, #1
   35ac0:	b2db      	uxtb	r3, r3
   35ac2:	70e3      	strb	r3, [r4, #3]
   35ac4:	b963      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35ac6:	78a3      	ldrb	r3, [r4, #2]
   35ac8:	3301      	adds	r3, #1
   35aca:	b2db      	uxtb	r3, r3
   35acc:	70a3      	strb	r3, [r4, #2]
   35ace:	b93b      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35ad0:	7863      	ldrb	r3, [r4, #1]
   35ad2:	3301      	adds	r3, #1
   35ad4:	b2db      	uxtb	r3, r3
   35ad6:	7063      	strb	r3, [r4, #1]
   35ad8:	b913      	cbnz	r3, 35ae0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   35ada:	7823      	ldrb	r3, [r4, #0]
   35adc:	3301      	adds	r3, #1
   35ade:	7023      	strb	r3, [r4, #0]
   35ae0:	463b      	mov	r3, r7
   35ae2:	4622      	mov	r2, r4
   35ae4:	2101      	movs	r1, #1
   35ae6:	4640      	mov	r0, r8
   35ae8:	f000 feb2 	bl	36850 <cc_mbedtls_aes_crypt_ecb>
   35aec:	4683      	mov	fp, r0
   35aee:	2800      	cmp	r0, #0
   35af0:	d093      	beq.n	35a1a <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   35af2:	f8da 3000 	ldr.w	r3, [sl]
   35af6:	4648      	mov	r0, r9
   35af8:	4798      	blx	r3
   35afa:	2120      	movs	r1, #32
   35afc:	4603      	mov	r3, r0
   35afe:	a804      	add	r0, sp, #16
   35b00:	2b00      	cmp	r3, #0
   35b02:	bf18      	it	ne
   35b04:	469b      	movne	fp, r3
   35b06:	f7ff fc87 	bl	35418 <mbedtls_platform_zeroize>
   35b0a:	2110      	movs	r1, #16
   35b0c:	4638      	mov	r0, r7
   35b0e:	f7ff fc83 	bl	35418 <mbedtls_platform_zeroize>
   35b12:	4658      	mov	r0, fp
   35b14:	b00d      	add	sp, #52	; 0x34
   35b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b1a:	463a      	mov	r2, r7
   35b1c:	4641      	mov	r1, r8
   35b1e:	2300      	movs	r3, #0
   35b20:	4620      	mov	r0, r4
   35b22:	f7ff fe7f 	bl	35824 <mbedtls_ctr_drbg_reseed_internal>
   35b26:	f8df a068 	ldr.w	sl, [pc, #104]	; 35b90 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   35b2a:	2800      	cmp	r0, #0
   35b2c:	f43f af6d 	beq.w	35a0a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   35b30:	f8da 3000 	ldr.w	r3, [sl]
   35b34:	4648      	mov	r0, r9
   35b36:	4798      	blx	r3
   35b38:	4683      	mov	fp, r0
   35b3a:	2800      	cmp	r0, #0
   35b3c:	f43f af65 	beq.w	35a0a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   35b40:	e7e7      	b.n	35b12 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   35b42:	a904      	add	r1, sp, #16
   35b44:	4620      	mov	r0, r4
   35b46:	f7ff fdc9 	bl	356dc <ctr_drbg_update_internal>
   35b4a:	4683      	mov	fp, r0
   35b4c:	2800      	cmp	r0, #0
   35b4e:	d1d0      	bne.n	35af2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   35b50:	6923      	ldr	r3, [r4, #16]
   35b52:	3301      	adds	r3, #1
   35b54:	6123      	str	r3, [r4, #16]
   35b56:	e7cc      	b.n	35af2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   35b58:	463a      	mov	r2, r7
   35b5a:	4641      	mov	r1, r8
   35b5c:	a804      	add	r0, sp, #16
   35b5e:	f7ff fc65 	bl	3542c <block_cipher_df>
   35b62:	4683      	mov	fp, r0
   35b64:	b118      	cbz	r0, 35b6e <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   35b66:	f8df a028 	ldr.w	sl, [pc, #40]	; 35b90 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   35b6a:	466f      	mov	r7, sp
   35b6c:	e7c1      	b.n	35af2 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   35b6e:	a904      	add	r1, sp, #16
   35b70:	4620      	mov	r0, r4
   35b72:	f7ff fdb3 	bl	356dc <ctr_drbg_update_internal>
   35b76:	4683      	mov	fp, r0
   35b78:	2800      	cmp	r0, #0
   35b7a:	f43f af44 	beq.w	35a06 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   35b7e:	e7f2      	b.n	35b66 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   35b80:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   35b84:	e7c5      	b.n	35b12 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   35b86:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   35b8a:	e7c2      	b.n	35b12 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   35b8c:	20000944 	.word	0x20000944
   35b90:	20000948 	.word	0x20000948

00035b94 <entropy_update>:
   35b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35b98:	2b20      	cmp	r3, #32
   35b9a:	b08b      	sub	sp, #44	; 0x2c
   35b9c:	461d      	mov	r5, r3
   35b9e:	4606      	mov	r6, r0
   35ba0:	4688      	mov	r8, r1
   35ba2:	4691      	mov	r9, r2
   35ba4:	d826      	bhi.n	35bf4 <entropy_update+0x60>
   35ba6:	b2db      	uxtb	r3, r3
   35ba8:	af02      	add	r7, sp, #8
   35baa:	f88d 8004 	strb.w	r8, [sp, #4]
   35bae:	46b0      	mov	r8, r6
   35bb0:	f88d 3005 	strb.w	r3, [sp, #5]
   35bb4:	f858 1b04 	ldr.w	r1, [r8], #4
   35bb8:	b921      	cbnz	r1, 35bc4 <entropy_update+0x30>
   35bba:	4640      	mov	r0, r8
   35bbc:	f000 fe8c 	bl	368d8 <cc_mbedtls_sha256_starts>
   35bc0:	4604      	mov	r4, r0
   35bc2:	b940      	cbnz	r0, 35bd6 <entropy_update+0x42>
   35bc4:	2301      	movs	r3, #1
   35bc6:	6033      	str	r3, [r6, #0]
   35bc8:	2202      	movs	r2, #2
   35bca:	a901      	add	r1, sp, #4
   35bcc:	4640      	mov	r0, r8
   35bce:	f000 fe97 	bl	36900 <cc_mbedtls_sha256_update>
   35bd2:	4604      	mov	r4, r0
   35bd4:	b138      	cbz	r0, 35be6 <entropy_update+0x52>
   35bd6:	4638      	mov	r0, r7
   35bd8:	2120      	movs	r1, #32
   35bda:	f7ff fc1d 	bl	35418 <mbedtls_platform_zeroize>
   35bde:	4620      	mov	r0, r4
   35be0:	b00b      	add	sp, #44	; 0x2c
   35be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35be6:	462a      	mov	r2, r5
   35be8:	4649      	mov	r1, r9
   35bea:	4640      	mov	r0, r8
   35bec:	f000 fe88 	bl	36900 <cc_mbedtls_sha256_update>
   35bf0:	4604      	mov	r4, r0
   35bf2:	e7f0      	b.n	35bd6 <entropy_update+0x42>
   35bf4:	af02      	add	r7, sp, #8
   35bf6:	4619      	mov	r1, r3
   35bf8:	4610      	mov	r0, r2
   35bfa:	2300      	movs	r3, #0
   35bfc:	463a      	mov	r2, r7
   35bfe:	f001 f807 	bl	36c10 <cc_mbedtls_sha256>
   35c02:	4604      	mov	r4, r0
   35c04:	2800      	cmp	r0, #0
   35c06:	d1e6      	bne.n	35bd6 <entropy_update+0x42>
   35c08:	2320      	movs	r3, #32
   35c0a:	46b9      	mov	r9, r7
   35c0c:	461d      	mov	r5, r3
   35c0e:	e7cc      	b.n	35baa <entropy_update+0x16>

00035c10 <entropy_gather_internal.part.0>:
   35c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   35c12:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   35c16:	b0a7      	sub	sp, #156	; 0x9c
   35c18:	2b00      	cmp	r3, #0
   35c1a:	bfd8      	it	le
   35c1c:	ae02      	addle	r6, sp, #8
   35c1e:	dd2c      	ble.n	35c7a <entropy_gather_internal.part.0+0x6a>
   35c20:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   35c24:	4605      	mov	r5, r0
   35c26:	2300      	movs	r3, #0
   35c28:	ae02      	add	r6, sp, #8
   35c2a:	9301      	str	r3, [sp, #4]
   35c2c:	f1a4 0701 	sub.w	r7, r4, #1
   35c30:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   35c34:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   35c38:	ab01      	add	r3, sp, #4
   35c3a:	2290      	movs	r2, #144	; 0x90
   35c3c:	4631      	mov	r1, r6
   35c3e:	47a0      	blx	r4
   35c40:	fab7 f787 	clz	r7, r7
   35c44:	097f      	lsrs	r7, r7, #5
   35c46:	4604      	mov	r4, r0
   35c48:	b910      	cbnz	r0, 35c50 <entropy_gather_internal.part.0+0x40>
   35c4a:	9b01      	ldr	r3, [sp, #4]
   35c4c:	b93b      	cbnz	r3, 35c5e <entropy_gather_internal.part.0+0x4e>
   35c4e:	b1a7      	cbz	r7, 35c7a <entropy_gather_internal.part.0+0x6a>
   35c50:	4630      	mov	r0, r6
   35c52:	2190      	movs	r1, #144	; 0x90
   35c54:	f7ff fbe0 	bl	35418 <mbedtls_platform_zeroize>
   35c58:	4620      	mov	r0, r4
   35c5a:	b027      	add	sp, #156	; 0x9c
   35c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35c5e:	4601      	mov	r1, r0
   35c60:	4632      	mov	r2, r6
   35c62:	4628      	mov	r0, r5
   35c64:	f7ff ff96 	bl	35b94 <entropy_update>
   35c68:	b950      	cbnz	r0, 35c80 <entropy_gather_internal.part.0+0x70>
   35c6a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   35c6e:	9a01      	ldr	r2, [sp, #4]
   35c70:	4413      	add	r3, r2
   35c72:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   35c76:	2f00      	cmp	r7, #0
   35c78:	d1ea      	bne.n	35c50 <entropy_gather_internal.part.0+0x40>
   35c7a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   35c7e:	e7e7      	b.n	35c50 <entropy_gather_internal.part.0+0x40>
   35c80:	4604      	mov	r4, r0
   35c82:	4620      	mov	r0, r4
   35c84:	b027      	add	sp, #156	; 0x9c
   35c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

00035c88 <cc_mbedtls_entropy_init>:
   35c88:	b570      	push	{r4, r5, r6, lr}
   35c8a:	2500      	movs	r5, #0
   35c8c:	4604      	mov	r4, r0
   35c8e:	f504 7688 	add.w	r6, r4, #272	; 0x110
   35c92:	2214      	movs	r2, #20
   35c94:	4629      	mov	r1, r5
   35c96:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   35c9a:	30fc      	adds	r0, #252	; 0xfc
   35c9c:	f002 fd98 	bl	387d0 <memset>
   35ca0:	2208      	movs	r2, #8
   35ca2:	4629      	mov	r1, r5
   35ca4:	4630      	mov	r0, r6
   35ca6:	f002 fd93 	bl	387d0 <memset>
   35caa:	4b15      	ldr	r3, [pc, #84]	; (35d00 <cc_mbedtls_entropy_init+0x78>)
   35cac:	4630      	mov	r0, r6
   35cae:	681b      	ldr	r3, [r3, #0]
   35cb0:	4798      	blx	r3
   35cb2:	4620      	mov	r0, r4
   35cb4:	f840 5b04 	str.w	r5, [r0], #4
   35cb8:	f000 fdf4 	bl	368a4 <cc_mbedtls_sha256_init>
   35cbc:	4b11      	ldr	r3, [pc, #68]	; (35d04 <cc_mbedtls_entropy_init+0x7c>)
   35cbe:	4630      	mov	r0, r6
   35cc0:	681b      	ldr	r3, [r3, #0]
   35cc2:	4798      	blx	r3
   35cc4:	b9d8      	cbnz	r0, 35cfe <cc_mbedtls_entropy_init+0x76>
   35cc6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   35cca:	42ab      	cmp	r3, r5
   35ccc:	dc11      	bgt.n	35cf2 <cc_mbedtls_entropy_init+0x6a>
   35cce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   35cd2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   35cd6:	2120      	movs	r1, #32
   35cd8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   35cdc:	2101      	movs	r1, #1
   35cde:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   35ce2:	3301      	adds	r3, #1
   35ce4:	4908      	ldr	r1, [pc, #32]	; (35d08 <cc_mbedtls_entropy_init+0x80>)
   35ce6:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   35cea:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   35cee:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   35cf2:	4b06      	ldr	r3, [pc, #24]	; (35d0c <cc_mbedtls_entropy_init+0x84>)
   35cf4:	4630      	mov	r0, r6
   35cf6:	681b      	ldr	r3, [r3, #0]
   35cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   35cfc:	4718      	bx	r3
   35cfe:	bd70      	pop	{r4, r5, r6, pc}
   35d00:	20000940 	.word	0x20000940
   35d04:	20000944 	.word	0x20000944
   35d08:	000366f5 	.word	0x000366f5
   35d0c:	20000948 	.word	0x20000948

00035d10 <cc_mbedtls_entropy_func>:
   35d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35d14:	2a20      	cmp	r2, #32
   35d16:	b088      	sub	sp, #32
   35d18:	d876      	bhi.n	35e08 <cc_mbedtls_entropy_func+0xf8>
   35d1a:	4b3d      	ldr	r3, [pc, #244]	; (35e10 <cc_mbedtls_entropy_func+0x100>)
   35d1c:	f500 7988 	add.w	r9, r0, #272	; 0x110
   35d20:	681b      	ldr	r3, [r3, #0]
   35d22:	4604      	mov	r4, r0
   35d24:	4648      	mov	r0, r9
   35d26:	4617      	mov	r7, r2
   35d28:	4688      	mov	r8, r1
   35d2a:	4798      	blx	r3
   35d2c:	4605      	mov	r5, r0
   35d2e:	bba0      	cbnz	r0, 35d9a <cc_mbedtls_entropy_func+0x8a>
   35d30:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   35d34:	f240 1601 	movw	r6, #257	; 0x101
   35d38:	e001      	b.n	35d3e <cc_mbedtls_entropy_func+0x2e>
   35d3a:	3e01      	subs	r6, #1
   35d3c:	d060      	beq.n	35e00 <cc_mbedtls_entropy_func+0xf0>
   35d3e:	4620      	mov	r0, r4
   35d40:	b37b      	cbz	r3, 35da2 <cc_mbedtls_entropy_func+0x92>
   35d42:	f7ff ff65 	bl	35c10 <entropy_gather_internal.part.0>
   35d46:	4605      	mov	r5, r0
   35d48:	bb68      	cbnz	r0, 35da6 <cc_mbedtls_entropy_func+0x96>
   35d4a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   35d4e:	2b00      	cmp	r3, #0
   35d50:	ddf3      	ble.n	35d3a <cc_mbedtls_entropy_func+0x2a>
   35d52:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   35d56:	4290      	cmp	r0, r2
   35d58:	d3ef      	bcc.n	35d3a <cc_mbedtls_entropy_func+0x2a>
   35d5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   35d5e:	2a01      	cmp	r2, #1
   35d60:	d1eb      	bne.n	35d3a <cc_mbedtls_entropy_func+0x2a>
   35d62:	281f      	cmp	r0, #31
   35d64:	d9e9      	bls.n	35d3a <cc_mbedtls_entropy_func+0x2a>
   35d66:	466e      	mov	r6, sp
   35d68:	4629      	mov	r1, r5
   35d6a:	2220      	movs	r2, #32
   35d6c:	4630      	mov	r0, r6
   35d6e:	f104 0a04 	add.w	sl, r4, #4
   35d72:	f002 fd2d 	bl	387d0 <memset>
   35d76:	4631      	mov	r1, r6
   35d78:	4650      	mov	r0, sl
   35d7a:	f000 fdeb 	bl	36954 <cc_mbedtls_sha256_finish>
   35d7e:	4605      	mov	r5, r0
   35d80:	b198      	cbz	r0, 35daa <cc_mbedtls_entropy_func+0x9a>
   35d82:	2120      	movs	r1, #32
   35d84:	4630      	mov	r0, r6
   35d86:	f7ff fb47 	bl	35418 <mbedtls_platform_zeroize>
   35d8a:	4b22      	ldr	r3, [pc, #136]	; (35e14 <cc_mbedtls_entropy_func+0x104>)
   35d8c:	4648      	mov	r0, r9
   35d8e:	681b      	ldr	r3, [r3, #0]
   35d90:	4798      	blx	r3
   35d92:	2800      	cmp	r0, #0
   35d94:	bf18      	it	ne
   35d96:	f06f 051d 	mvnne.w	r5, #29
   35d9a:	4628      	mov	r0, r5
   35d9c:	b008      	add	sp, #32
   35d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35da2:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   35da6:	466e      	mov	r6, sp
   35da8:	e7eb      	b.n	35d82 <cc_mbedtls_entropy_func+0x72>
   35daa:	4650      	mov	r0, sl
   35dac:	f000 fd8e 	bl	368cc <cc_mbedtls_sha256_free>
   35db0:	4650      	mov	r0, sl
   35db2:	f000 fd77 	bl	368a4 <cc_mbedtls_sha256_init>
   35db6:	4629      	mov	r1, r5
   35db8:	4650      	mov	r0, sl
   35dba:	f000 fd8d 	bl	368d8 <cc_mbedtls_sha256_starts>
   35dbe:	4605      	mov	r5, r0
   35dc0:	2800      	cmp	r0, #0
   35dc2:	d1de      	bne.n	35d82 <cc_mbedtls_entropy_func+0x72>
   35dc4:	4650      	mov	r0, sl
   35dc6:	2220      	movs	r2, #32
   35dc8:	4631      	mov	r1, r6
   35dca:	f000 fd99 	bl	36900 <cc_mbedtls_sha256_update>
   35dce:	4605      	mov	r5, r0
   35dd0:	2800      	cmp	r0, #0
   35dd2:	d1d6      	bne.n	35d82 <cc_mbedtls_entropy_func+0x72>
   35dd4:	4603      	mov	r3, r0
   35dd6:	4632      	mov	r2, r6
   35dd8:	2120      	movs	r1, #32
   35dda:	4630      	mov	r0, r6
   35ddc:	f000 ff18 	bl	36c10 <cc_mbedtls_sha256>
   35de0:	4605      	mov	r5, r0
   35de2:	2800      	cmp	r0, #0
   35de4:	d1cd      	bne.n	35d82 <cc_mbedtls_entropy_func+0x72>
   35de6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   35dea:	2b00      	cmp	r3, #0
   35dec:	bfc4      	itt	gt
   35dee:	2300      	movgt	r3, #0
   35df0:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   35df4:	463a      	mov	r2, r7
   35df6:	4640      	mov	r0, r8
   35df8:	4631      	mov	r1, r6
   35dfa:	f002 fcde 	bl	387ba <memcpy>
   35dfe:	e7c0      	b.n	35d82 <cc_mbedtls_entropy_func+0x72>
   35e00:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   35e04:	466e      	mov	r6, sp
   35e06:	e7bc      	b.n	35d82 <cc_mbedtls_entropy_func+0x72>
   35e08:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   35e0c:	e7c5      	b.n	35d9a <cc_mbedtls_entropy_func+0x8a>
   35e0e:	bf00      	nop
   35e10:	20000944 	.word	0x20000944
   35e14:	20000948 	.word	0x20000948

00035e18 <RndStartupTest.constprop.0>:
   35e18:	b530      	push	{r4, r5, lr}
   35e1a:	b08d      	sub	sp, #52	; 0x34
   35e1c:	2100      	movs	r1, #0
   35e1e:	2228      	movs	r2, #40	; 0x28
   35e20:	a802      	add	r0, sp, #8
   35e22:	9101      	str	r1, [sp, #4]
   35e24:	f002 fcd4 	bl	387d0 <memset>
   35e28:	a802      	add	r0, sp, #8
   35e2a:	f000 ff19 	bl	36c60 <RNG_PLAT_SetUserRngParameters>
   35e2e:	4604      	mov	r4, r0
   35e30:	b110      	cbz	r0, 35e38 <RndStartupTest.constprop.0+0x20>
   35e32:	4620      	mov	r0, r4
   35e34:	b00d      	add	sp, #52	; 0x34
   35e36:	bd30      	pop	{r4, r5, pc}
   35e38:	4d18      	ldr	r5, [pc, #96]	; (35e9c <RndStartupTest.constprop.0+0x84>)
   35e3a:	f04f 31ff 	mov.w	r1, #4294967295
   35e3e:	6828      	ldr	r0, [r5, #0]
   35e40:	f000 f946 	bl	360d0 <CC_PalMutexLock>
   35e44:	4604      	mov	r4, r0
   35e46:	b9c0      	cbnz	r0, 35e7a <RndStartupTest.constprop.0+0x62>
   35e48:	2000      	movs	r0, #0
   35e4a:	f000 f971 	bl	36130 <CC_PalPowerSaveModeSelect>
   35e4e:	bb00      	cbnz	r0, 35e92 <RndStartupTest.constprop.0+0x7a>
   35e50:	4a13      	ldr	r2, [pc, #76]	; (35ea0 <RndStartupTest.constprop.0+0x88>)
   35e52:	a902      	add	r1, sp, #8
   35e54:	a801      	add	r0, sp, #4
   35e56:	f000 fc3f 	bl	366d8 <LLF_RND_RunTrngStartupTest>
   35e5a:	4604      	mov	r4, r0
   35e5c:	2001      	movs	r0, #1
   35e5e:	f000 f967 	bl	36130 <CC_PalPowerSaveModeSelect>
   35e62:	b990      	cbnz	r0, 35e8a <RndStartupTest.constprop.0+0x72>
   35e64:	6828      	ldr	r0, [r5, #0]
   35e66:	f000 f93b 	bl	360e0 <CC_PalMutexUnlock>
   35e6a:	2800      	cmp	r0, #0
   35e6c:	d0e1      	beq.n	35e32 <RndStartupTest.constprop.0+0x1a>
   35e6e:	480d      	ldr	r0, [pc, #52]	; (35ea4 <RndStartupTest.constprop.0+0x8c>)
   35e70:	f7ff f9b2 	bl	351d8 <CC_PalAbort>
   35e74:	4620      	mov	r0, r4
   35e76:	b00d      	add	sp, #52	; 0x34
   35e78:	bd30      	pop	{r4, r5, pc}
   35e7a:	480b      	ldr	r0, [pc, #44]	; (35ea8 <RndStartupTest.constprop.0+0x90>)
   35e7c:	f7ff f9ac 	bl	351d8 <CC_PalAbort>
   35e80:	2c01      	cmp	r4, #1
   35e82:	bf08      	it	eq
   35e84:	2405      	moveq	r4, #5
   35e86:	d0ed      	beq.n	35e64 <RndStartupTest.constprop.0+0x4c>
   35e88:	e7de      	b.n	35e48 <RndStartupTest.constprop.0+0x30>
   35e8a:	4808      	ldr	r0, [pc, #32]	; (35eac <RndStartupTest.constprop.0+0x94>)
   35e8c:	f7ff f9a4 	bl	351d8 <CC_PalAbort>
   35e90:	e7e8      	b.n	35e64 <RndStartupTest.constprop.0+0x4c>
   35e92:	4807      	ldr	r0, [pc, #28]	; (35eb0 <RndStartupTest.constprop.0+0x98>)
   35e94:	f7ff f9a0 	bl	351d8 <CC_PalAbort>
   35e98:	e7da      	b.n	35e50 <RndStartupTest.constprop.0+0x38>
   35e9a:	bf00      	nop
   35e9c:	2000093c 	.word	0x2000093c
   35ea0:	20004704 	.word	0x20004704
   35ea4:	0003c6bc 	.word	0x0003c6bc
   35ea8:	0003c664 	.word	0x0003c664
   35eac:	0003c69c 	.word	0x0003c69c
   35eb0:	0003c67c 	.word	0x0003c67c

00035eb4 <CC_LibInit>:
   35eb4:	b530      	push	{r4, r5, lr}
   35eb6:	b083      	sub	sp, #12
   35eb8:	f000 f85c 	bl	35f74 <CC_HalInit>
   35ebc:	b128      	cbz	r0, 35eca <CC_LibInit+0x16>
   35ebe:	f000 f8ab 	bl	36018 <CC_PalTerminate>
   35ec2:	2403      	movs	r4, #3
   35ec4:	4620      	mov	r0, r4
   35ec6:	b003      	add	sp, #12
   35ec8:	bd30      	pop	{r4, r5, pc}
   35eca:	f000 f877 	bl	35fbc <CC_PalInit>
   35ece:	b9d8      	cbnz	r0, 35f08 <CC_LibInit+0x54>
   35ed0:	f000 f92e 	bl	36130 <CC_PalPowerSaveModeSelect>
   35ed4:	b9e0      	cbnz	r0, 35f10 <CC_LibInit+0x5c>
   35ed6:	4c22      	ldr	r4, [pc, #136]	; (35f60 <CC_LibInit+0xac>)
   35ed8:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   35edc:	0e1b      	lsrs	r3, r3, #24
   35ede:	2bf0      	cmp	r3, #240	; 0xf0
   35ee0:	d10a      	bne.n	35ef8 <CC_LibInit+0x44>
   35ee2:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   35ee6:	4b1f      	ldr	r3, [pc, #124]	; (35f64 <CC_LibInit+0xb0>)
   35ee8:	429a      	cmp	r2, r3
   35eea:	d031      	beq.n	35f50 <CC_LibInit+0x9c>
   35eec:	f000 f844 	bl	35f78 <CC_HalTerminate>
   35ef0:	2407      	movs	r4, #7
   35ef2:	f000 f891 	bl	36018 <CC_PalTerminate>
   35ef6:	e7e5      	b.n	35ec4 <CC_LibInit+0x10>
   35ef8:	f000 f83e 	bl	35f78 <CC_HalTerminate>
   35efc:	f000 f88c 	bl	36018 <CC_PalTerminate>
   35f00:	2406      	movs	r4, #6
   35f02:	4620      	mov	r0, r4
   35f04:	b003      	add	sp, #12
   35f06:	bd30      	pop	{r4, r5, pc}
   35f08:	2404      	movs	r4, #4
   35f0a:	4620      	mov	r0, r4
   35f0c:	b003      	add	sp, #12
   35f0e:	bd30      	pop	{r4, r5, pc}
   35f10:	f000 f832 	bl	35f78 <CC_HalTerminate>
   35f14:	f000 f880 	bl	36018 <CC_PalTerminate>
   35f18:	f7ff ff7e 	bl	35e18 <RndStartupTest.constprop.0>
   35f1c:	4604      	mov	r4, r0
   35f1e:	b998      	cbnz	r0, 35f48 <CC_LibInit+0x94>
   35f20:	4d11      	ldr	r5, [pc, #68]	; (35f68 <CC_LibInit+0xb4>)
   35f22:	682b      	ldr	r3, [r5, #0]
   35f24:	2b00      	cmp	r3, #0
   35f26:	d1cd      	bne.n	35ec4 <CC_LibInit+0x10>
   35f28:	4602      	mov	r2, r0
   35f2a:	4601      	mov	r1, r0
   35f2c:	f7ff f976 	bl	3521c <nrf_cc3xx_platform_ctr_drbg_init>
   35f30:	b950      	cbnz	r0, 35f48 <CC_LibInit+0x94>
   35f32:	490e      	ldr	r1, [pc, #56]	; (35f6c <CC_LibInit+0xb8>)
   35f34:	ab01      	add	r3, sp, #4
   35f36:	2268      	movs	r2, #104	; 0x68
   35f38:	f7ff f9a2 	bl	35280 <nrf_cc3xx_platform_ctr_drbg_get>
   35f3c:	b920      	cbnz	r0, 35f48 <CC_LibInit+0x94>
   35f3e:	4b0c      	ldr	r3, [pc, #48]	; (35f70 <CC_LibInit+0xbc>)
   35f40:	602b      	str	r3, [r5, #0]
   35f42:	4620      	mov	r0, r4
   35f44:	b003      	add	sp, #12
   35f46:	bd30      	pop	{r4, r5, pc}
   35f48:	2405      	movs	r4, #5
   35f4a:	4620      	mov	r0, r4
   35f4c:	b003      	add	sp, #12
   35f4e:	bd30      	pop	{r4, r5, pc}
   35f50:	2001      	movs	r0, #1
   35f52:	f000 f8ed 	bl	36130 <CC_PalPowerSaveModeSelect>
   35f56:	2800      	cmp	r0, #0
   35f58:	d1da      	bne.n	35f10 <CC_LibInit+0x5c>
   35f5a:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   35f5e:	e7db      	b.n	35f18 <CC_LibInit+0x64>
   35f60:	5002b000 	.word	0x5002b000
   35f64:	20e00000 	.word	0x20e00000
   35f68:	20004700 	.word	0x20004700
   35f6c:	20004698 	.word	0x20004698
   35f70:	5a5aea5a 	.word	0x5a5aea5a

00035f74 <CC_HalInit>:
   35f74:	2000      	movs	r0, #0
   35f76:	4770      	bx	lr

00035f78 <CC_HalTerminate>:
   35f78:	2000      	movs	r0, #0
   35f7a:	4770      	bx	lr

00035f7c <CC_HalClearInterruptBit>:
   35f7c:	0543      	lsls	r3, r0, #21
   35f7e:	d504      	bpl.n	35f8a <CC_HalClearInterruptBit+0xe>
   35f80:	4b04      	ldr	r3, [pc, #16]	; (35f94 <CC_HalClearInterruptBit+0x18>)
   35f82:	f04f 32ff 	mov.w	r2, #4294967295
   35f86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   35f8a:	4b02      	ldr	r3, [pc, #8]	; (35f94 <CC_HalClearInterruptBit+0x18>)
   35f8c:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   35f90:	4770      	bx	lr
   35f92:	bf00      	nop
   35f94:	5002b000 	.word	0x5002b000

00035f98 <CC_HalMaskInterrupt>:
   35f98:	4b01      	ldr	r3, [pc, #4]	; (35fa0 <CC_HalMaskInterrupt+0x8>)
   35f9a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   35f9e:	4770      	bx	lr
   35fa0:	5002b000 	.word	0x5002b000

00035fa4 <CC_HalWaitInterrupt>:
   35fa4:	b108      	cbz	r0, 35faa <CC_HalWaitInterrupt+0x6>
   35fa6:	f000 b86b 	b.w	36080 <CC_PalWaitInterrupt>
   35faa:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   35fae:	4770      	bx	lr

00035fb0 <CC_HalWaitInterruptRND>:
   35fb0:	b108      	cbz	r0, 35fb6 <CC_HalWaitInterruptRND+0x6>
   35fb2:	f000 b84f 	b.w	36054 <CC_PalWaitInterruptRND>
   35fb6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   35fba:	4770      	bx	lr

00035fbc <CC_PalInit>:
   35fbc:	b510      	push	{r4, lr}
   35fbe:	4811      	ldr	r0, [pc, #68]	; (36004 <CC_PalInit+0x48>)
   35fc0:	f000 f872 	bl	360a8 <CC_PalMutexCreate>
   35fc4:	b100      	cbz	r0, 35fc8 <CC_PalInit+0xc>
   35fc6:	bd10      	pop	{r4, pc}
   35fc8:	480f      	ldr	r0, [pc, #60]	; (36008 <CC_PalInit+0x4c>)
   35fca:	f000 f86d 	bl	360a8 <CC_PalMutexCreate>
   35fce:	2800      	cmp	r0, #0
   35fd0:	d1f9      	bne.n	35fc6 <CC_PalInit+0xa>
   35fd2:	4c0e      	ldr	r4, [pc, #56]	; (3600c <CC_PalInit+0x50>)
   35fd4:	4620      	mov	r0, r4
   35fd6:	f000 f867 	bl	360a8 <CC_PalMutexCreate>
   35fda:	2800      	cmp	r0, #0
   35fdc:	d1f3      	bne.n	35fc6 <CC_PalInit+0xa>
   35fde:	4b0c      	ldr	r3, [pc, #48]	; (36010 <CC_PalInit+0x54>)
   35fe0:	480c      	ldr	r0, [pc, #48]	; (36014 <CC_PalInit+0x58>)
   35fe2:	601c      	str	r4, [r3, #0]
   35fe4:	f000 f860 	bl	360a8 <CC_PalMutexCreate>
   35fe8:	4601      	mov	r1, r0
   35fea:	2800      	cmp	r0, #0
   35fec:	d1eb      	bne.n	35fc6 <CC_PalInit+0xa>
   35fee:	f000 f82d 	bl	3604c <CC_PalDmaInit>
   35ff2:	4604      	mov	r4, r0
   35ff4:	b108      	cbz	r0, 35ffa <CC_PalInit+0x3e>
   35ff6:	4620      	mov	r0, r4
   35ff8:	bd10      	pop	{r4, pc}
   35ffa:	f000 f87b 	bl	360f4 <CC_PalPowerSaveModeInit>
   35ffe:	4620      	mov	r0, r4
   36000:	e7fa      	b.n	35ff8 <CC_PalInit+0x3c>
   36002:	bf00      	nop
   36004:	20000938 	.word	0x20000938
   36008:	2000092c 	.word	0x2000092c
   3600c:	20000934 	.word	0x20000934
   36010:	2000093c 	.word	0x2000093c
   36014:	20000930 	.word	0x20000930

00036018 <CC_PalTerminate>:
   36018:	b508      	push	{r3, lr}
   3601a:	4808      	ldr	r0, [pc, #32]	; (3603c <CC_PalTerminate+0x24>)
   3601c:	f000 f84e 	bl	360bc <CC_PalMutexDestroy>
   36020:	4807      	ldr	r0, [pc, #28]	; (36040 <CC_PalTerminate+0x28>)
   36022:	f000 f84b 	bl	360bc <CC_PalMutexDestroy>
   36026:	4807      	ldr	r0, [pc, #28]	; (36044 <CC_PalTerminate+0x2c>)
   36028:	f000 f848 	bl	360bc <CC_PalMutexDestroy>
   3602c:	4806      	ldr	r0, [pc, #24]	; (36048 <CC_PalTerminate+0x30>)
   3602e:	f000 f845 	bl	360bc <CC_PalMutexDestroy>
   36032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   36036:	f000 b80b 	b.w	36050 <CC_PalDmaTerminate>
   3603a:	bf00      	nop
   3603c:	20000938 	.word	0x20000938
   36040:	2000092c 	.word	0x2000092c
   36044:	20000934 	.word	0x20000934
   36048:	20000930 	.word	0x20000930

0003604c <CC_PalDmaInit>:
   3604c:	2000      	movs	r0, #0
   3604e:	4770      	bx	lr

00036050 <CC_PalDmaTerminate>:
   36050:	4770      	bx	lr
   36052:	bf00      	nop

00036054 <CC_PalWaitInterruptRND>:
   36054:	b410      	push	{r4}
   36056:	4c09      	ldr	r4, [pc, #36]	; (3607c <CC_PalWaitInterruptRND+0x28>)
   36058:	4602      	mov	r2, r0
   3605a:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   3605e:	4213      	tst	r3, r2
   36060:	d0fb      	beq.n	3605a <CC_PalWaitInterruptRND+0x6>
   36062:	b121      	cbz	r1, 3606e <CC_PalWaitInterruptRND+0x1a>
   36064:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   36068:	600b      	str	r3, [r1, #0]
   3606a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   3606e:	4b03      	ldr	r3, [pc, #12]	; (3607c <CC_PalWaitInterruptRND+0x28>)
   36070:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   36074:	2000      	movs	r0, #0
   36076:	bc10      	pop	{r4}
   36078:	4770      	bx	lr
   3607a:	bf00      	nop
   3607c:	5002b000 	.word	0x5002b000

00036080 <CC_PalWaitInterrupt>:
   36080:	4a04      	ldr	r2, [pc, #16]	; (36094 <CC_PalWaitInterrupt+0x14>)
   36082:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   36086:	4218      	tst	r0, r3
   36088:	d0fb      	beq.n	36082 <CC_PalWaitInterrupt+0x2>
   3608a:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   3608e:	2000      	movs	r0, #0
   36090:	4770      	bx	lr
   36092:	bf00      	nop
   36094:	5002b000 	.word	0x5002b000

00036098 <CC_PalMemCopyPlat>:
   36098:	f002 bb78 	b.w	3878c <memmove>

0003609c <CC_PalMemSetPlat>:
   3609c:	f002 bb98 	b.w	387d0 <memset>

000360a0 <CC_PalMemSetZeroPlat>:
   360a0:	460a      	mov	r2, r1
   360a2:	2100      	movs	r1, #0
   360a4:	f002 bb94 	b.w	387d0 <memset>

000360a8 <CC_PalMutexCreate>:
   360a8:	b508      	push	{r3, lr}
   360aa:	4b03      	ldr	r3, [pc, #12]	; (360b8 <CC_PalMutexCreate+0x10>)
   360ac:	6802      	ldr	r2, [r0, #0]
   360ae:	681b      	ldr	r3, [r3, #0]
   360b0:	6810      	ldr	r0, [r2, #0]
   360b2:	4798      	blx	r3
   360b4:	2000      	movs	r0, #0
   360b6:	bd08      	pop	{r3, pc}
   360b8:	200008ec 	.word	0x200008ec

000360bc <CC_PalMutexDestroy>:
   360bc:	b508      	push	{r3, lr}
   360be:	4b03      	ldr	r3, [pc, #12]	; (360cc <CC_PalMutexDestroy+0x10>)
   360c0:	6802      	ldr	r2, [r0, #0]
   360c2:	685b      	ldr	r3, [r3, #4]
   360c4:	6810      	ldr	r0, [r2, #0]
   360c6:	4798      	blx	r3
   360c8:	2000      	movs	r0, #0
   360ca:	bd08      	pop	{r3, pc}
   360cc:	200008ec 	.word	0x200008ec

000360d0 <CC_PalMutexLock>:
   360d0:	4b02      	ldr	r3, [pc, #8]	; (360dc <CC_PalMutexLock+0xc>)
   360d2:	6802      	ldr	r2, [r0, #0]
   360d4:	689b      	ldr	r3, [r3, #8]
   360d6:	6810      	ldr	r0, [r2, #0]
   360d8:	4718      	bx	r3
   360da:	bf00      	nop
   360dc:	200008ec 	.word	0x200008ec

000360e0 <CC_PalMutexUnlock>:
   360e0:	b508      	push	{r3, lr}
   360e2:	4b03      	ldr	r3, [pc, #12]	; (360f0 <CC_PalMutexUnlock+0x10>)
   360e4:	6802      	ldr	r2, [r0, #0]
   360e6:	68db      	ldr	r3, [r3, #12]
   360e8:	6810      	ldr	r0, [r2, #0]
   360ea:	4798      	blx	r3
   360ec:	2000      	movs	r0, #0
   360ee:	bd08      	pop	{r3, pc}
   360f0:	200008ec 	.word	0x200008ec

000360f4 <CC_PalPowerSaveModeInit>:
   360f4:	b570      	push	{r4, r5, r6, lr}
   360f6:	4c09      	ldr	r4, [pc, #36]	; (3611c <CC_PalPowerSaveModeInit+0x28>)
   360f8:	4d09      	ldr	r5, [pc, #36]	; (36120 <CC_PalPowerSaveModeInit+0x2c>)
   360fa:	6920      	ldr	r0, [r4, #16]
   360fc:	68ab      	ldr	r3, [r5, #8]
   360fe:	4798      	blx	r3
   36100:	b118      	cbz	r0, 3610a <CC_PalPowerSaveModeInit+0x16>
   36102:	4b08      	ldr	r3, [pc, #32]	; (36124 <CC_PalPowerSaveModeInit+0x30>)
   36104:	4808      	ldr	r0, [pc, #32]	; (36128 <CC_PalPowerSaveModeInit+0x34>)
   36106:	685b      	ldr	r3, [r3, #4]
   36108:	4798      	blx	r3
   3610a:	4a08      	ldr	r2, [pc, #32]	; (3612c <CC_PalPowerSaveModeInit+0x38>)
   3610c:	68eb      	ldr	r3, [r5, #12]
   3610e:	6920      	ldr	r0, [r4, #16]
   36110:	2100      	movs	r1, #0
   36112:	6011      	str	r1, [r2, #0]
   36114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   36118:	4718      	bx	r3
   3611a:	bf00      	nop
   3611c:	200008fc 	.word	0x200008fc
   36120:	200008ec 	.word	0x200008ec
   36124:	200008dc 	.word	0x200008dc
   36128:	0003c6d4 	.word	0x0003c6d4
   3612c:	20004924 	.word	0x20004924

00036130 <CC_PalPowerSaveModeSelect>:
   36130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36132:	4d1a      	ldr	r5, [pc, #104]	; (3619c <CC_PalPowerSaveModeSelect+0x6c>)
   36134:	4e1a      	ldr	r6, [pc, #104]	; (361a0 <CC_PalPowerSaveModeSelect+0x70>)
   36136:	4604      	mov	r4, r0
   36138:	68b2      	ldr	r2, [r6, #8]
   3613a:	6928      	ldr	r0, [r5, #16]
   3613c:	4790      	blx	r2
   3613e:	b9e8      	cbnz	r0, 3617c <CC_PalPowerSaveModeSelect+0x4c>
   36140:	4f18      	ldr	r7, [pc, #96]	; (361a4 <CC_PalPowerSaveModeSelect+0x74>)
   36142:	683b      	ldr	r3, [r7, #0]
   36144:	b14c      	cbz	r4, 3615a <CC_PalPowerSaveModeSelect+0x2a>
   36146:	b1a3      	cbz	r3, 36172 <CC_PalPowerSaveModeSelect+0x42>
   36148:	2b01      	cmp	r3, #1
   3614a:	d019      	beq.n	36180 <CC_PalPowerSaveModeSelect+0x50>
   3614c:	3b01      	subs	r3, #1
   3614e:	603b      	str	r3, [r7, #0]
   36150:	6928      	ldr	r0, [r5, #16]
   36152:	68f3      	ldr	r3, [r6, #12]
   36154:	4798      	blx	r3
   36156:	2000      	movs	r0, #0
   36158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3615a:	b943      	cbnz	r3, 3616e <CC_PalPowerSaveModeSelect+0x3e>
   3615c:	4a12      	ldr	r2, [pc, #72]	; (361a8 <CC_PalPowerSaveModeSelect+0x78>)
   3615e:	2101      	movs	r1, #1
   36160:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   36164:	4911      	ldr	r1, [pc, #68]	; (361ac <CC_PalPowerSaveModeSelect+0x7c>)
   36166:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   3616a:	2a00      	cmp	r2, #0
   3616c:	d1fb      	bne.n	36166 <CC_PalPowerSaveModeSelect+0x36>
   3616e:	3301      	adds	r3, #1
   36170:	603b      	str	r3, [r7, #0]
   36172:	68f3      	ldr	r3, [r6, #12]
   36174:	6928      	ldr	r0, [r5, #16]
   36176:	4798      	blx	r3
   36178:	2000      	movs	r0, #0
   3617a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3617c:	480c      	ldr	r0, [pc, #48]	; (361b0 <CC_PalPowerSaveModeSelect+0x80>)
   3617e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36180:	4a0a      	ldr	r2, [pc, #40]	; (361ac <CC_PalPowerSaveModeSelect+0x7c>)
   36182:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   36186:	2b00      	cmp	r3, #0
   36188:	d1fb      	bne.n	36182 <CC_PalPowerSaveModeSelect+0x52>
   3618a:	4a07      	ldr	r2, [pc, #28]	; (361a8 <CC_PalPowerSaveModeSelect+0x78>)
   3618c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   36190:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   36194:	f7ff ff00 	bl	35f98 <CC_HalMaskInterrupt>
   36198:	683b      	ldr	r3, [r7, #0]
   3619a:	e7d7      	b.n	3614c <CC_PalPowerSaveModeSelect+0x1c>
   3619c:	200008fc 	.word	0x200008fc
   361a0:	200008ec 	.word	0x200008ec
   361a4:	20004924 	.word	0x20004924
   361a8:	5002a000 	.word	0x5002a000
   361ac:	5002b000 	.word	0x5002b000
   361b0:	ffff8fe9 	.word	0xffff8fe9

000361b4 <mutex_init>:
   361b4:	4b01      	ldr	r3, [pc, #4]	; (361bc <mutex_init+0x8>)
   361b6:	681b      	ldr	r3, [r3, #0]
   361b8:	4718      	bx	r3
   361ba:	bf00      	nop
   361bc:	200008ec 	.word	0x200008ec

000361c0 <mutex_lock>:
   361c0:	4b01      	ldr	r3, [pc, #4]	; (361c8 <mutex_lock+0x8>)
   361c2:	689b      	ldr	r3, [r3, #8]
   361c4:	4718      	bx	r3
   361c6:	bf00      	nop
   361c8:	200008ec 	.word	0x200008ec

000361cc <mutex_unlock>:
   361cc:	4b01      	ldr	r3, [pc, #4]	; (361d4 <mutex_unlock+0x8>)
   361ce:	68db      	ldr	r3, [r3, #12]
   361d0:	4718      	bx	r3
   361d2:	bf00      	nop
   361d4:	200008ec 	.word	0x200008ec

000361d8 <startTrngHW>:
   361d8:	2800      	cmp	r0, #0
   361da:	f000 8084 	beq.w	362e6 <startTrngHW+0x10e>
   361de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   361e2:	460c      	mov	r4, r1
   361e4:	b083      	sub	sp, #12
   361e6:	2900      	cmp	r1, #0
   361e8:	d078      	beq.n	362dc <startTrngHW+0x104>
   361ea:	461d      	mov	r5, r3
   361ec:	2b00      	cmp	r3, #0
   361ee:	d075      	beq.n	362dc <startTrngHW+0x104>
   361f0:	4607      	mov	r7, r0
   361f2:	b11a      	cbz	r2, 361fc <startTrngHW+0x24>
   361f4:	2201      	movs	r2, #1
   361f6:	2300      	movs	r3, #0
   361f8:	602a      	str	r2, [r5, #0]
   361fa:	6003      	str	r3, [r0, #0]
   361fc:	682b      	ldr	r3, [r5, #0]
   361fe:	2b00      	cmp	r3, #0
   36200:	d067      	beq.n	362d2 <startTrngHW+0xfa>
   36202:	4629      	mov	r1, r5
   36204:	4620      	mov	r0, r4
   36206:	f000 fde9 	bl	36ddc <LLF_RND_GetFastestRosc>
   3620a:	4603      	mov	r3, r0
   3620c:	2800      	cmp	r0, #0
   3620e:	d161      	bne.n	362d4 <startTrngHW+0xfc>
   36210:	6828      	ldr	r0, [r5, #0]
   36212:	4621      	mov	r1, r4
   36214:	f000 fdc4 	bl	36da0 <LLF_RND_GetRoscSampleCnt>
   36218:	4603      	mov	r3, r0
   3621a:	2800      	cmp	r0, #0
   3621c:	d15a      	bne.n	362d4 <startTrngHW+0xfc>
   3621e:	682a      	ldr	r2, [r5, #0]
   36220:	2a08      	cmp	r2, #8
   36222:	d072      	beq.n	3630a <startTrngHW+0x132>
   36224:	2a04      	cmp	r2, #4
   36226:	d073      	beq.n	36310 <startTrngHW+0x138>
   36228:	f1a2 0802 	sub.w	r8, r2, #2
   3622c:	fab8 f888 	clz	r8, r8
   36230:	ea4f 1858 	mov.w	r8, r8, lsr #5
   36234:	4e38      	ldr	r6, [pc, #224]	; (36318 <startTrngHW+0x140>)
   36236:	2001      	movs	r0, #1
   36238:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   3623c:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   36240:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   36244:	6a62      	ldr	r2, [r4, #36]	; 0x24
   36246:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   3624a:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   3624e:	428a      	cmp	r2, r1
   36250:	d1f6      	bne.n	36240 <startTrngHW+0x68>
   36252:	f04f 0900 	mov.w	r9, #0
   36256:	9301      	str	r3, [sp, #4]
   36258:	f04f 30ff 	mov.w	r0, #4294967295
   3625c:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   36260:	f7ff fe8c 	bl	35f7c <CC_HalClearInterruptBit>
   36264:	f06f 021b 	mvn.w	r2, #27
   36268:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   3626c:	4648      	mov	r0, r9
   3626e:	f7ff fe93 	bl	35f98 <CC_HalMaskInterrupt>
   36272:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   36276:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   3627a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   3627e:	f7ff fe8b 	bl	35f98 <CC_HalMaskInterrupt>
   36282:	220a      	movs	r2, #10
   36284:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   36288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3628a:	2b01      	cmp	r3, #1
   3628c:	9b01      	ldr	r3, [sp, #4]
   3628e:	d02d      	beq.n	362ec <startTrngHW+0x114>
   36290:	6922      	ldr	r2, [r4, #16]
   36292:	4922      	ldr	r1, [pc, #136]	; (3631c <startTrngHW+0x144>)
   36294:	fba1 1202 	umull	r1, r2, r1, r2
   36298:	0912      	lsrs	r2, r2, #4
   3629a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3629c:	fb01 f202 	mul.w	r2, r1, r2
   362a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   362a4:	491c      	ldr	r1, [pc, #112]	; (36318 <startTrngHW+0x140>)
   362a6:	03d2      	lsls	r2, r2, #15
   362a8:	0992      	lsrs	r2, r2, #6
   362aa:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   362ae:	2201      	movs	r2, #1
   362b0:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   362b4:	683a      	ldr	r2, [r7, #0]
   362b6:	6829      	ldr	r1, [r5, #0]
   362b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   362bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   362c0:	603a      	str	r2, [r7, #0]
   362c2:	6829      	ldr	r1, [r5, #0]
   362c4:	4618      	mov	r0, r3
   362c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   362ca:	603a      	str	r2, [r7, #0]
   362cc:	b003      	add	sp, #12
   362ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   362d2:	4b13      	ldr	r3, [pc, #76]	; (36320 <startTrngHW+0x148>)
   362d4:	4618      	mov	r0, r3
   362d6:	b003      	add	sp, #12
   362d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   362dc:	4b11      	ldr	r3, [pc, #68]	; (36324 <startTrngHW+0x14c>)
   362de:	4618      	mov	r0, r3
   362e0:	b003      	add	sp, #12
   362e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   362e6:	4b0f      	ldr	r3, [pc, #60]	; (36324 <startTrngHW+0x14c>)
   362e8:	4618      	mov	r0, r3
   362ea:	4770      	bx	lr
   362ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   362f0:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   362f4:	3101      	adds	r1, #1
   362f6:	d006      	beq.n	36306 <startTrngHW+0x12e>
   362f8:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   362fc:	4907      	ldr	r1, [pc, #28]	; (3631c <startTrngHW+0x144>)
   362fe:	fba1 1202 	umull	r1, r2, r1, r2
   36302:	0912      	lsrs	r2, r2, #4
   36304:	e7c9      	b.n	3629a <startTrngHW+0xc2>
   36306:	2216      	movs	r2, #22
   36308:	e7c7      	b.n	3629a <startTrngHW+0xc2>
   3630a:	f04f 0803 	mov.w	r8, #3
   3630e:	e791      	b.n	36234 <startTrngHW+0x5c>
   36310:	f04f 0802 	mov.w	r8, #2
   36314:	e78e      	b.n	36234 <startTrngHW+0x5c>
   36316:	bf00      	nop
   36318:	5002b000 	.word	0x5002b000
   3631c:	aaaaaaab 	.word	0xaaaaaaab
   36320:	00f10c31 	.word	0x00f10c31
   36324:	00f10c35 	.word	0x00f10c35

00036328 <LLF_RND_RepetitionCounterTest.part.0>:
   36328:	b570      	push	{r4, r5, r6, lr}
   3632a:	00c9      	lsls	r1, r1, #3
   3632c:	2400      	movs	r4, #0
   3632e:	1e4e      	subs	r6, r1, #1
   36330:	f04f 0c01 	mov.w	ip, #1
   36334:	4625      	mov	r5, r4
   36336:	46a6      	mov	lr, r4
   36338:	e008      	b.n	3634c <LLF_RND_RepetitionCounterTest.part.0+0x24>
   3633a:	459e      	cmp	lr, r3
   3633c:	d015      	beq.n	3636a <LLF_RND_RepetitionCounterTest.part.0+0x42>
   3633e:	2501      	movs	r5, #1
   36340:	45b4      	cmp	ip, r6
   36342:	d817      	bhi.n	36374 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   36344:	3401      	adds	r4, #1
   36346:	f10c 0c01 	add.w	ip, ip, #1
   3634a:	469e      	mov	lr, r3
   3634c:	0963      	lsrs	r3, r4, #5
   3634e:	f004 011f 	and.w	r1, r4, #31
   36352:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   36356:	291f      	cmp	r1, #31
   36358:	fa23 f301 	lsr.w	r3, r3, r1
   3635c:	bf18      	it	ne
   3635e:	f003 0301 	andne.w	r3, r3, #1
   36362:	2c00      	cmp	r4, #0
   36364:	d1e9      	bne.n	3633a <LLF_RND_RepetitionCounterTest.part.0+0x12>
   36366:	2501      	movs	r5, #1
   36368:	e7ec      	b.n	36344 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   3636a:	3501      	adds	r5, #1
   3636c:	4295      	cmp	r5, r2
   3636e:	d1e7      	bne.n	36340 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   36370:	4801      	ldr	r0, [pc, #4]	; (36378 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   36372:	bd70      	pop	{r4, r5, r6, pc}
   36374:	2000      	movs	r0, #0
   36376:	bd70      	pop	{r4, r5, r6, pc}
   36378:	00f10c36 	.word	0x00f10c36

0003637c <LLF_RND_AdaptiveProportionTest>:
   3637c:	2800      	cmp	r0, #0
   3637e:	d03f      	beq.n	36400 <LLF_RND_AdaptiveProportionTest+0x84>
   36380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36384:	1e4c      	subs	r4, r1, #1
   36386:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   3638a:	d228      	bcs.n	363de <LLF_RND_AdaptiveProportionTest+0x62>
   3638c:	b33b      	cbz	r3, 363de <LLF_RND_AdaptiveProportionTest+0x62>
   3638e:	b332      	cbz	r2, 363de <LLF_RND_AdaptiveProportionTest+0x62>
   36390:	f04f 0e00 	mov.w	lr, #0
   36394:	00cf      	lsls	r7, r1, #3
   36396:	4676      	mov	r6, lr
   36398:	4675      	mov	r5, lr
   3639a:	4674      	mov	r4, lr
   3639c:	f103 38ff 	add.w	r8, r3, #4294967295
   363a0:	0961      	lsrs	r1, r4, #5
   363a2:	f004 0c1f 	and.w	ip, r4, #31
   363a6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   363aa:	f1bc 0f1f 	cmp.w	ip, #31
   363ae:	fa21 f10c 	lsr.w	r1, r1, ip
   363b2:	bf18      	it	ne
   363b4:	f001 0101 	andne.w	r1, r1, #1
   363b8:	b1a4      	cbz	r4, 363e4 <LLF_RND_AdaptiveProportionTest+0x68>
   363ba:	42ab      	cmp	r3, r5
   363bc:	d018      	beq.n	363f0 <LLF_RND_AdaptiveProportionTest+0x74>
   363be:	428e      	cmp	r6, r1
   363c0:	bf08      	it	eq
   363c2:	f10e 0e01 	addeq.w	lr, lr, #1
   363c6:	45a8      	cmp	r8, r5
   363c8:	d015      	beq.n	363f6 <LLF_RND_AdaptiveProportionTest+0x7a>
   363ca:	3501      	adds	r5, #1
   363cc:	4631      	mov	r1, r6
   363ce:	3401      	adds	r4, #1
   363d0:	42bc      	cmp	r4, r7
   363d2:	d001      	beq.n	363d8 <LLF_RND_AdaptiveProportionTest+0x5c>
   363d4:	460e      	mov	r6, r1
   363d6:	e7e3      	b.n	363a0 <LLF_RND_AdaptiveProportionTest+0x24>
   363d8:	2000      	movs	r0, #0
   363da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   363de:	4809      	ldr	r0, [pc, #36]	; (36404 <LLF_RND_AdaptiveProportionTest+0x88>)
   363e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   363e4:	f04f 0e01 	mov.w	lr, #1
   363e8:	4674      	mov	r4, lr
   363ea:	4675      	mov	r5, lr
   363ec:	460e      	mov	r6, r1
   363ee:	e7d7      	b.n	363a0 <LLF_RND_AdaptiveProportionTest+0x24>
   363f0:	2501      	movs	r5, #1
   363f2:	46ae      	mov	lr, r5
   363f4:	e7eb      	b.n	363ce <LLF_RND_AdaptiveProportionTest+0x52>
   363f6:	4572      	cmp	r2, lr
   363f8:	d3f1      	bcc.n	363de <LLF_RND_AdaptiveProportionTest+0x62>
   363fa:	4631      	mov	r1, r6
   363fc:	461d      	mov	r5, r3
   363fe:	e7e6      	b.n	363ce <LLF_RND_AdaptiveProportionTest+0x52>
   36400:	4800      	ldr	r0, [pc, #0]	; (36404 <LLF_RND_AdaptiveProportionTest+0x88>)
   36402:	4770      	bx	lr
   36404:	00f10c37 	.word	0x00f10c37

00036408 <getTrngSource>:
   36408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3640c:	b091      	sub	sp, #68	; 0x44
   3640e:	460d      	mov	r5, r1
   36410:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   36414:	4681      	mov	r9, r0
   36416:	2900      	cmp	r1, #0
   36418:	d14c      	bne.n	364b4 <getTrngSource+0xac>
   3641a:	6928      	ldr	r0, [r5, #16]
   3641c:	9006      	str	r0, [sp, #24]
   3641e:	981a      	ldr	r0, [sp, #104]	; 0x68
   36420:	601c      	str	r4, [r3, #0]
   36422:	2300      	movs	r3, #0
   36424:	6003      	str	r3, [r0, #0]
   36426:	2a00      	cmp	r2, #0
   36428:	f000 8124 	beq.w	36674 <getTrngSource+0x26c>
   3642c:	4b9d      	ldr	r3, [pc, #628]	; (366a4 <getTrngSource+0x29c>)
   3642e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   36430:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   36434:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   36438:	429a      	cmp	r2, r3
   3643a:	d147      	bne.n	364cc <getTrngSource+0xc4>
   3643c:	290a      	cmp	r1, #10
   3643e:	d145      	bne.n	364cc <getTrngSource+0xc4>
   36440:	f899 3003 	ldrb.w	r3, [r9, #3]
   36444:	9308      	str	r3, [sp, #32]
   36446:	f104 0308 	add.w	r3, r4, #8
   3644a:	9a06      	ldr	r2, [sp, #24]
   3644c:	9307      	str	r3, [sp, #28]
   3644e:	4b96      	ldr	r3, [pc, #600]	; (366a8 <getTrngSource+0x2a0>)
   36450:	4c94      	ldr	r4, [pc, #592]	; (366a4 <getTrngSource+0x29c>)
   36452:	fba3 1302 	umull	r1, r3, r3, r2
   36456:	089b      	lsrs	r3, r3, #2
   36458:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3645c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   36460:	9303      	str	r3, [sp, #12]
   36462:	2304      	movs	r3, #4
   36464:	9305      	str	r3, [sp, #20]
   36466:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   36468:	9e06      	ldr	r6, [sp, #24]
   3646a:	601e      	str	r6, [r3, #0]
   3646c:	2e00      	cmp	r6, #0
   3646e:	d033      	beq.n	364d8 <getTrngSource+0xd0>
   36470:	f8dd 801c 	ldr.w	r8, [sp, #28]
   36474:	2700      	movs	r7, #0
   36476:	f04f 0a01 	mov.w	sl, #1
   3647a:	f000 fcbf 	bl	36dfc <LLF_RND_TurnOffTrng>
   3647e:	2300      	movs	r3, #0
   36480:	9309      	str	r3, [sp, #36]	; 0x24
   36482:	f1b9 0f00 	cmp.w	r9, #0
   36486:	f000 80df 	beq.w	36648 <getTrngSource+0x240>
   3648a:	2d00      	cmp	r5, #0
   3648c:	f000 80dc 	beq.w	36648 <getTrngSource+0x240>
   36490:	9b08      	ldr	r3, [sp, #32]
   36492:	b1eb      	cbz	r3, 364d0 <getTrngSource+0xc8>
   36494:	a908      	add	r1, sp, #32
   36496:	4628      	mov	r0, r5
   36498:	f000 fca0 	bl	36ddc <LLF_RND_GetFastestRosc>
   3649c:	2800      	cmp	r0, #0
   3649e:	d03e      	beq.n	3651e <getTrngSource+0x116>
   364a0:	4b82      	ldr	r3, [pc, #520]	; (366ac <getTrngSource+0x2a4>)
   364a2:	4298      	cmp	r0, r3
   364a4:	d118      	bne.n	364d8 <getTrngSource+0xd0>
   364a6:	9003      	str	r0, [sp, #12]
   364a8:	f000 fca8 	bl	36dfc <LLF_RND_TurnOffTrng>
   364ac:	9803      	ldr	r0, [sp, #12]
   364ae:	b011      	add	sp, #68	; 0x44
   364b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   364b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   364b8:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   364bc:	3601      	adds	r6, #1
   364be:	bf14      	ite	ne
   364c0:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   364c4:	f44f 7004 	moveq.w	r0, #528	; 0x210
   364c8:	9006      	str	r0, [sp, #24]
   364ca:	e7a8      	b.n	3641e <getTrngSource+0x16>
   364cc:	4878      	ldr	r0, [pc, #480]	; (366b0 <getTrngSource+0x2a8>)
   364ce:	e7ea      	b.n	364a6 <getTrngSource+0x9e>
   364d0:	4878      	ldr	r0, [pc, #480]	; (366b4 <getTrngSource+0x2ac>)
   364d2:	4b76      	ldr	r3, [pc, #472]	; (366ac <getTrngSource+0x2a4>)
   364d4:	4298      	cmp	r0, r3
   364d6:	d0e6      	beq.n	364a6 <getTrngSource+0x9e>
   364d8:	9b08      	ldr	r3, [sp, #32]
   364da:	2b08      	cmp	r3, #8
   364dc:	f000 80c8 	beq.w	36670 <getTrngSource+0x268>
   364e0:	005b      	lsls	r3, r3, #1
   364e2:	2200      	movs	r2, #0
   364e4:	9308      	str	r3, [sp, #32]
   364e6:	9200      	str	r2, [sp, #0]
   364e8:	ab08      	add	r3, sp, #32
   364ea:	4629      	mov	r1, r5
   364ec:	4648      	mov	r0, r9
   364ee:	f7ff fe73 	bl	361d8 <startTrngHW>
   364f2:	4b70      	ldr	r3, [pc, #448]	; (366b4 <getTrngSource+0x2ac>)
   364f4:	4298      	cmp	r0, r3
   364f6:	f000 80b7 	beq.w	36668 <getTrngSource+0x260>
   364fa:	2800      	cmp	r0, #0
   364fc:	d1d3      	bne.n	364a6 <getTrngSource+0x9e>
   364fe:	f8d9 2000 	ldr.w	r2, [r9]
   36502:	0a13      	lsrs	r3, r2, #8
   36504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   36508:	4313      	orrs	r3, r2
   3650a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   3650e:	f8c9 3000 	str.w	r3, [r9]
   36512:	9b05      	ldr	r3, [sp, #20]
   36514:	3b01      	subs	r3, #1
   36516:	9305      	str	r3, [sp, #20]
   36518:	d1a5      	bne.n	36466 <getTrngSource+0x5e>
   3651a:	2000      	movs	r0, #0
   3651c:	e7c3      	b.n	364a6 <getTrngSource+0x9e>
   3651e:	9808      	ldr	r0, [sp, #32]
   36520:	4629      	mov	r1, r5
   36522:	f000 fc3d 	bl	36da0 <LLF_RND_GetRoscSampleCnt>
   36526:	2800      	cmp	r0, #0
   36528:	d1ba      	bne.n	364a0 <getTrngSource+0x98>
   3652a:	9b08      	ldr	r3, [sp, #32]
   3652c:	2b08      	cmp	r3, #8
   3652e:	f000 8095 	beq.w	3665c <getTrngSource+0x254>
   36532:	2b04      	cmp	r3, #4
   36534:	f000 8095 	beq.w	36662 <getTrngSource+0x25a>
   36538:	f1a3 0302 	sub.w	r3, r3, #2
   3653c:	fab3 f383 	clz	r3, r3
   36540:	095b      	lsrs	r3, r3, #5
   36542:	9304      	str	r3, [sp, #16]
   36544:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   36548:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   3654c:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   36550:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   36552:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   36556:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   3655a:	4293      	cmp	r3, r2
   3655c:	d1f6      	bne.n	3654c <getTrngSource+0x144>
   3655e:	f04f 0b00 	mov.w	fp, #0
   36562:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   36566:	f04f 30ff 	mov.w	r0, #4294967295
   3656a:	f7ff fd07 	bl	35f7c <CC_HalClearInterruptBit>
   3656e:	f06f 031b 	mvn.w	r3, #27
   36572:	4658      	mov	r0, fp
   36574:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   36578:	f7ff fd0e 	bl	35f98 <CC_HalMaskInterrupt>
   3657c:	9b04      	ldr	r3, [sp, #16]
   3657e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   36582:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   36586:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   3658a:	f7ff fd05 	bl	35f98 <CC_HalMaskInterrupt>
   3658e:	230a      	movs	r3, #10
   36590:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   36594:	692b      	ldr	r3, [r5, #16]
   36596:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   3659a:	fbab 2303 	umull	r2, r3, fp, r3
   3659e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   365a0:	091b      	lsrs	r3, r3, #4
   365a2:	fb02 f303 	mul.w	r3, r2, r3
   365a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   365aa:	03db      	lsls	r3, r3, #15
   365ac:	099b      	lsrs	r3, r3, #6
   365ae:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   365b2:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   365b6:	9908      	ldr	r1, [sp, #32]
   365b8:	f8d9 2000 	ldr.w	r2, [r9]
   365bc:	020b      	lsls	r3, r1, #8
   365be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   365c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   365c6:	4313      	orrs	r3, r2
   365c8:	f8c9 3000 	str.w	r3, [r9]
   365cc:	a809      	add	r0, sp, #36	; 0x24
   365ce:	f000 fbd7 	bl	36d80 <LLF_RND_WaitRngInterrupt>
   365d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   365d4:	f003 031a 	and.w	r3, r3, #26
   365d8:	4303      	orrs	r3, r0
   365da:	f47f af7d 	bne.w	364d8 <getTrngSource+0xd0>
   365de:	fbab 3b06 	umull	r3, fp, fp, r6
   365e2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   365e6:	930a      	str	r3, [sp, #40]	; 0x28
   365e8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   365ec:	930b      	str	r3, [sp, #44]	; 0x2c
   365ee:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   365f2:	930c      	str	r3, [sp, #48]	; 0x30
   365f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   365f8:	930d      	str	r3, [sp, #52]	; 0x34
   365fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   365fe:	930e      	str	r3, [sp, #56]	; 0x38
   36600:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   36604:	930f      	str	r3, [sp, #60]	; 0x3c
   36606:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   3660a:	d101      	bne.n	36610 <getTrngSource+0x208>
   3660c:	9b03      	ldr	r3, [sp, #12]
   3660e:	b9eb      	cbnz	r3, 3664c <getTrngSource+0x244>
   36610:	4640      	mov	r0, r8
   36612:	2218      	movs	r2, #24
   36614:	a90a      	add	r1, sp, #40	; 0x28
   36616:	3e18      	subs	r6, #24
   36618:	f108 0818 	add.w	r8, r8, #24
   3661c:	f7ff fd3c 	bl	36098 <CC_PalMemCopyPlat>
   36620:	3701      	adds	r7, #1
   36622:	2e00      	cmp	r6, #0
   36624:	f47f af29 	bne.w	3647a <getTrngSource+0x72>
   36628:	9b06      	ldr	r3, [sp, #24]
   3662a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   3662e:	d836      	bhi.n	3669e <getTrngSource+0x296>
   36630:	9e07      	ldr	r6, [sp, #28]
   36632:	696a      	ldr	r2, [r5, #20]
   36634:	4619      	mov	r1, r3
   36636:	4630      	mov	r0, r6
   36638:	461f      	mov	r7, r3
   3663a:	f7ff fe75 	bl	36328 <LLF_RND_RepetitionCounterTest.part.0>
   3663e:	b320      	cbz	r0, 3668a <getTrngSource+0x282>
   36640:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   36642:	2300      	movs	r3, #0
   36644:	6013      	str	r3, [r2, #0]
   36646:	e72b      	b.n	364a0 <getTrngSource+0x98>
   36648:	481b      	ldr	r0, [pc, #108]	; (366b8 <getTrngSource+0x2b0>)
   3664a:	e729      	b.n	364a0 <getTrngSource+0x98>
   3664c:	4640      	mov	r0, r8
   3664e:	461a      	mov	r2, r3
   36650:	a90a      	add	r1, sp, #40	; 0x28
   36652:	1af6      	subs	r6, r6, r3
   36654:	4498      	add	r8, r3
   36656:	f7ff fd1f 	bl	36098 <CC_PalMemCopyPlat>
   3665a:	e7e1      	b.n	36620 <getTrngSource+0x218>
   3665c:	2303      	movs	r3, #3
   3665e:	9304      	str	r3, [sp, #16]
   36660:	e770      	b.n	36544 <getTrngSource+0x13c>
   36662:	2302      	movs	r3, #2
   36664:	9304      	str	r3, [sp, #16]
   36666:	e76d      	b.n	36544 <getTrngSource+0x13c>
   36668:	6a2b      	ldr	r3, [r5, #32]
   3666a:	2b00      	cmp	r3, #0
   3666c:	f43f af1b 	beq.w	364a6 <getTrngSource+0x9e>
   36670:	4812      	ldr	r0, [pc, #72]	; (366bc <getTrngSource+0x2b4>)
   36672:	e718      	b.n	364a6 <getTrngSource+0x9e>
   36674:	9100      	str	r1, [sp, #0]
   36676:	ab08      	add	r3, sp, #32
   36678:	2201      	movs	r2, #1
   3667a:	4629      	mov	r1, r5
   3667c:	4648      	mov	r0, r9
   3667e:	f7ff fdab 	bl	361d8 <startTrngHW>
   36682:	2800      	cmp	r0, #0
   36684:	f43f aedf 	beq.w	36446 <getTrngSource+0x3e>
   36688:	e70d      	b.n	364a6 <getTrngSource+0x9e>
   3668a:	69aa      	ldr	r2, [r5, #24]
   3668c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   36690:	4639      	mov	r1, r7
   36692:	4630      	mov	r0, r6
   36694:	f7ff fe72 	bl	3637c <LLF_RND_AdaptiveProportionTest>
   36698:	2800      	cmp	r0, #0
   3669a:	d1d1      	bne.n	36640 <getTrngSource+0x238>
   3669c:	e73d      	b.n	3651a <getTrngSource+0x112>
   3669e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   366a0:	601e      	str	r6, [r3, #0]
   366a2:	e719      	b.n	364d8 <getTrngSource+0xd0>
   366a4:	5002b000 	.word	0x5002b000
   366a8:	aaaaaaab 	.word	0xaaaaaaab
   366ac:	00f10c02 	.word	0x00f10c02
   366b0:	00f10c30 	.word	0x00f10c30
   366b4:	00f10c31 	.word	0x00f10c31
   366b8:	00f10c35 	.word	0x00f10c35
   366bc:	00f10c32 	.word	0x00f10c32

000366c0 <LLF_RND_GetTrngSource>:
   366c0:	b410      	push	{r4}
   366c2:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   366c6:	9401      	str	r4, [sp, #4]
   366c8:	9c03      	ldr	r4, [sp, #12]
   366ca:	9402      	str	r4, [sp, #8]
   366cc:	2400      	movs	r4, #0
   366ce:	9403      	str	r4, [sp, #12]
   366d0:	bc10      	pop	{r4}
   366d2:	f7ff be99 	b.w	36408 <getTrngSource>
   366d6:	bf00      	nop

000366d8 <LLF_RND_RunTrngStartupTest>:
   366d8:	b510      	push	{r4, lr}
   366da:	b086      	sub	sp, #24
   366dc:	ab05      	add	r3, sp, #20
   366de:	2401      	movs	r4, #1
   366e0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   366e4:	9300      	str	r3, [sp, #0]
   366e6:	2200      	movs	r2, #0
   366e8:	ab04      	add	r3, sp, #16
   366ea:	f7ff fe8d 	bl	36408 <getTrngSource>
   366ee:	b006      	add	sp, #24
   366f0:	bd10      	pop	{r4, pc}
   366f2:	bf00      	nop

000366f4 <mbedtls_hardware_poll>:
   366f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   366f6:	b089      	sub	sp, #36	; 0x24
   366f8:	9205      	str	r2, [sp, #20]
   366fa:	2900      	cmp	r1, #0
   366fc:	d064      	beq.n	367c8 <mbedtls_hardware_poll+0xd4>
   366fe:	461c      	mov	r4, r3
   36700:	2b00      	cmp	r3, #0
   36702:	d061      	beq.n	367c8 <mbedtls_hardware_poll+0xd4>
   36704:	4615      	mov	r5, r2
   36706:	2a00      	cmp	r2, #0
   36708:	d05e      	beq.n	367c8 <mbedtls_hardware_poll+0xd4>
   3670a:	4f31      	ldr	r7, [pc, #196]	; (367d0 <mbedtls_hardware_poll+0xdc>)
   3670c:	460e      	mov	r6, r1
   3670e:	6838      	ldr	r0, [r7, #0]
   36710:	f04f 31ff 	mov.w	r1, #4294967295
   36714:	f7ff fcdc 	bl	360d0 <CC_PalMutexLock>
   36718:	2800      	cmp	r0, #0
   3671a:	d14b      	bne.n	367b4 <mbedtls_hardware_poll+0xc0>
   3671c:	2000      	movs	r0, #0
   3671e:	f7ff fd07 	bl	36130 <CC_PalPowerSaveModeSelect>
   36722:	2800      	cmp	r0, #0
   36724:	d142      	bne.n	367ac <mbedtls_hardware_poll+0xb8>
   36726:	482b      	ldr	r0, [pc, #172]	; (367d4 <mbedtls_hardware_poll+0xe0>)
   36728:	f000 fa9a 	bl	36c60 <RNG_PLAT_SetUserRngParameters>
   3672c:	b1d8      	cbz	r0, 36766 <mbedtls_hardware_poll+0x72>
   3672e:	2001      	movs	r0, #1
   36730:	f04f 36ff 	mov.w	r6, #4294967295
   36734:	f7ff fcfc 	bl	36130 <CC_PalPowerSaveModeSelect>
   36738:	2800      	cmp	r0, #0
   3673a:	d133      	bne.n	367a4 <mbedtls_hardware_poll+0xb0>
   3673c:	4826      	ldr	r0, [pc, #152]	; (367d8 <mbedtls_hardware_poll+0xe4>)
   3673e:	f44f 7108 	mov.w	r1, #544	; 0x220
   36742:	f7fe fe5f 	bl	35404 <mbedtls_zeroize_internal>
   36746:	4825      	ldr	r0, [pc, #148]	; (367dc <mbedtls_hardware_poll+0xe8>)
   36748:	2104      	movs	r1, #4
   3674a:	f7fe fe5b 	bl	35404 <mbedtls_zeroize_internal>
   3674e:	4821      	ldr	r0, [pc, #132]	; (367d4 <mbedtls_hardware_poll+0xe0>)
   36750:	2128      	movs	r1, #40	; 0x28
   36752:	f7fe fe57 	bl	35404 <mbedtls_zeroize_internal>
   36756:	6838      	ldr	r0, [r7, #0]
   36758:	f7ff fcc2 	bl	360e0 <CC_PalMutexUnlock>
   3675c:	2800      	cmp	r0, #0
   3675e:	d12d      	bne.n	367bc <mbedtls_hardware_poll+0xc8>
   36760:	4630      	mov	r0, r6
   36762:	b009      	add	sp, #36	; 0x24
   36764:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36766:	4b1c      	ldr	r3, [pc, #112]	; (367d8 <mbedtls_hardware_poll+0xe4>)
   36768:	9302      	str	r3, [sp, #8]
   3676a:	ab07      	add	r3, sp, #28
   3676c:	9003      	str	r0, [sp, #12]
   3676e:	4602      	mov	r2, r0
   36770:	9300      	str	r3, [sp, #0]
   36772:	4918      	ldr	r1, [pc, #96]	; (367d4 <mbedtls_hardware_poll+0xe0>)
   36774:	4819      	ldr	r0, [pc, #100]	; (367dc <mbedtls_hardware_poll+0xe8>)
   36776:	9401      	str	r4, [sp, #4]
   36778:	ab05      	add	r3, sp, #20
   3677a:	f7ff ffa1 	bl	366c0 <LLF_RND_GetTrngSource>
   3677e:	4603      	mov	r3, r0
   36780:	2800      	cmp	r0, #0
   36782:	d1d4      	bne.n	3672e <mbedtls_hardware_poll+0x3a>
   36784:	6822      	ldr	r2, [r4, #0]
   36786:	42aa      	cmp	r2, r5
   36788:	d3d1      	bcc.n	3672e <mbedtls_hardware_poll+0x3a>
   3678a:	9907      	ldr	r1, [sp, #28]
   3678c:	4630      	mov	r0, r6
   3678e:	3108      	adds	r1, #8
   36790:	462a      	mov	r2, r5
   36792:	461e      	mov	r6, r3
   36794:	f7ff fc80 	bl	36098 <CC_PalMemCopyPlat>
   36798:	6025      	str	r5, [r4, #0]
   3679a:	2001      	movs	r0, #1
   3679c:	f7ff fcc8 	bl	36130 <CC_PalPowerSaveModeSelect>
   367a0:	2800      	cmp	r0, #0
   367a2:	d0cb      	beq.n	3673c <mbedtls_hardware_poll+0x48>
   367a4:	480e      	ldr	r0, [pc, #56]	; (367e0 <mbedtls_hardware_poll+0xec>)
   367a6:	f7fe fd17 	bl	351d8 <CC_PalAbort>
   367aa:	e7c7      	b.n	3673c <mbedtls_hardware_poll+0x48>
   367ac:	480d      	ldr	r0, [pc, #52]	; (367e4 <mbedtls_hardware_poll+0xf0>)
   367ae:	f7fe fd13 	bl	351d8 <CC_PalAbort>
   367b2:	e7b8      	b.n	36726 <mbedtls_hardware_poll+0x32>
   367b4:	480c      	ldr	r0, [pc, #48]	; (367e8 <mbedtls_hardware_poll+0xf4>)
   367b6:	f7fe fd0f 	bl	351d8 <CC_PalAbort>
   367ba:	e7af      	b.n	3671c <mbedtls_hardware_poll+0x28>
   367bc:	480b      	ldr	r0, [pc, #44]	; (367ec <mbedtls_hardware_poll+0xf8>)
   367be:	f7fe fd0b 	bl	351d8 <CC_PalAbort>
   367c2:	4630      	mov	r0, r6
   367c4:	b009      	add	sp, #36	; 0x24
   367c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   367c8:	f04f 36ff 	mov.w	r6, #4294967295
   367cc:	e7c8      	b.n	36760 <mbedtls_hardware_poll+0x6c>
   367ce:	bf00      	nop
   367d0:	2000093c 	.word	0x2000093c
   367d4:	20004b4c 	.word	0x20004b4c
   367d8:	2000492c 	.word	0x2000492c
   367dc:	20004928 	.word	0x20004928
   367e0:	0003c69c 	.word	0x0003c69c
   367e4:	0003c67c 	.word	0x0003c67c
   367e8:	0003c664 	.word	0x0003c664
   367ec:	0003c6f4 	.word	0x0003c6f4

000367f0 <cc_mbedtls_aes_init>:
   367f0:	b510      	push	{r4, lr}
   367f2:	4604      	mov	r4, r0
   367f4:	b130      	cbz	r0, 36804 <cc_mbedtls_aes_init+0x14>
   367f6:	2200      	movs	r2, #0
   367f8:	2301      	movs	r3, #1
   367fa:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   367fe:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   36802:	bd10      	pop	{r4, pc}
   36804:	4801      	ldr	r0, [pc, #4]	; (3680c <cc_mbedtls_aes_init+0x1c>)
   36806:	f7fe fce7 	bl	351d8 <CC_PalAbort>
   3680a:	e7f4      	b.n	367f6 <cc_mbedtls_aes_init+0x6>
   3680c:	0003c70c 	.word	0x0003c70c

00036810 <cc_mbedtls_aes_free>:
   36810:	b118      	cbz	r0, 3681a <cc_mbedtls_aes_free+0xa>
   36812:	2274      	movs	r2, #116	; 0x74
   36814:	2100      	movs	r1, #0
   36816:	f7ff bc41 	b.w	3609c <CC_PalMemSetPlat>
   3681a:	4770      	bx	lr

0003681c <cc_mbedtls_aes_setkey_enc>:
   3681c:	b190      	cbz	r0, 36844 <cc_mbedtls_aes_setkey_enc+0x28>
   3681e:	b1a1      	cbz	r1, 3684a <cc_mbedtls_aes_setkey_enc+0x2e>
   36820:	b510      	push	{r4, lr}
   36822:	2a80      	cmp	r2, #128	; 0x80
   36824:	f04f 0400 	mov.w	r4, #0
   36828:	6384      	str	r4, [r0, #56]	; 0x38
   3682a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   3682e:	d106      	bne.n	3683e <cc_mbedtls_aes_setkey_enc+0x22>
   36830:	2210      	movs	r2, #16
   36832:	6304      	str	r4, [r0, #48]	; 0x30
   36834:	4410      	add	r0, r2
   36836:	f7ff fc2f 	bl	36098 <CC_PalMemCopyPlat>
   3683a:	4620      	mov	r0, r4
   3683c:	bd10      	pop	{r4, pc}
   3683e:	f06f 001f 	mvn.w	r0, #31
   36842:	bd10      	pop	{r4, pc}
   36844:	f06f 0021 	mvn.w	r0, #33	; 0x21
   36848:	4770      	bx	lr
   3684a:	f06f 001f 	mvn.w	r0, #31
   3684e:	4770      	bx	lr

00036850 <cc_mbedtls_aes_crypt_ecb>:
   36850:	b328      	cbz	r0, 3689e <cc_mbedtls_aes_crypt_ecb+0x4e>
   36852:	b322      	cbz	r2, 3689e <cc_mbedtls_aes_crypt_ecb+0x4e>
   36854:	b31b      	cbz	r3, 3689e <cc_mbedtls_aes_crypt_ecb+0x4e>
   36856:	2901      	cmp	r1, #1
   36858:	d821      	bhi.n	3689e <cc_mbedtls_aes_crypt_ecb+0x4e>
   3685a:	b570      	push	{r4, r5, r6, lr}
   3685c:	4604      	mov	r4, r0
   3685e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   36860:	b086      	sub	sp, #24
   36862:	d017      	beq.n	36894 <cc_mbedtls_aes_crypt_ecb+0x44>
   36864:	2901      	cmp	r1, #1
   36866:	d117      	bne.n	36898 <cc_mbedtls_aes_crypt_ecb+0x48>
   36868:	2510      	movs	r5, #16
   3686a:	2100      	movs	r1, #0
   3686c:	eb0d 0605 	add.w	r6, sp, r5
   36870:	6361      	str	r1, [r4, #52]	; 0x34
   36872:	4610      	mov	r0, r2
   36874:	9500      	str	r5, [sp, #0]
   36876:	9601      	str	r6, [sp, #4]
   36878:	aa02      	add	r2, sp, #8
   3687a:	4629      	mov	r1, r5
   3687c:	f000 faca 	bl	36e14 <SetDataBuffersInfo>
   36880:	b950      	cbnz	r0, 36898 <cc_mbedtls_aes_crypt_ecb+0x48>
   36882:	462b      	mov	r3, r5
   36884:	4632      	mov	r2, r6
   36886:	a902      	add	r1, sp, #8
   36888:	4620      	mov	r0, r4
   3688a:	f000 fd4b 	bl	37324 <ProcessAesDrv>
   3688e:	b918      	cbnz	r0, 36898 <cc_mbedtls_aes_crypt_ecb+0x48>
   36890:	b006      	add	sp, #24
   36892:	bd70      	pop	{r4, r5, r6, pc}
   36894:	2900      	cmp	r1, #0
   36896:	d0e7      	beq.n	36868 <cc_mbedtls_aes_crypt_ecb+0x18>
   36898:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3689c:	e7f8      	b.n	36890 <cc_mbedtls_aes_crypt_ecb+0x40>
   3689e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   368a2:	4770      	bx	lr

000368a4 <cc_mbedtls_sha256_init>:
   368a4:	b510      	push	{r4, lr}
   368a6:	4604      	mov	r4, r0
   368a8:	b128      	cbz	r0, 368b6 <cc_mbedtls_sha256_init+0x12>
   368aa:	4620      	mov	r0, r4
   368ac:	21f4      	movs	r1, #244	; 0xf4
   368ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   368b2:	f7ff bbf5 	b.w	360a0 <CC_PalMemSetZeroPlat>
   368b6:	4804      	ldr	r0, [pc, #16]	; (368c8 <cc_mbedtls_sha256_init+0x24>)
   368b8:	f7fe fc8e 	bl	351d8 <CC_PalAbort>
   368bc:	4620      	mov	r0, r4
   368be:	21f4      	movs	r1, #244	; 0xf4
   368c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   368c4:	f7ff bbec 	b.w	360a0 <CC_PalMemSetZeroPlat>
   368c8:	0003c720 	.word	0x0003c720

000368cc <cc_mbedtls_sha256_free>:
   368cc:	b110      	cbz	r0, 368d4 <cc_mbedtls_sha256_free+0x8>
   368ce:	21f4      	movs	r1, #244	; 0xf4
   368d0:	f7fe bd98 	b.w	35404 <mbedtls_zeroize_internal>
   368d4:	4770      	bx	lr
   368d6:	bf00      	nop

000368d8 <cc_mbedtls_sha256_starts>:
   368d8:	b508      	push	{r3, lr}
   368da:	b161      	cbz	r1, 368f6 <cc_mbedtls_sha256_starts+0x1e>
   368dc:	2901      	cmp	r1, #1
   368de:	d107      	bne.n	368f0 <cc_mbedtls_sha256_starts+0x18>
   368e0:	2102      	movs	r1, #2
   368e2:	f000 f85b 	bl	3699c <mbedtls_sha_starts_internal>
   368e6:	2800      	cmp	r0, #0
   368e8:	bf18      	it	ne
   368ea:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   368ee:	bd08      	pop	{r3, pc}
   368f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   368f4:	bd08      	pop	{r3, pc}
   368f6:	2101      	movs	r1, #1
   368f8:	f000 f850 	bl	3699c <mbedtls_sha_starts_internal>
   368fc:	e7f3      	b.n	368e6 <cc_mbedtls_sha256_starts+0xe>
   368fe:	bf00      	nop

00036900 <cc_mbedtls_sha256_update>:
   36900:	b530      	push	{r4, r5, lr}
   36902:	4605      	mov	r5, r0
   36904:	1888      	adds	r0, r1, r2
   36906:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   3690a:	b0a1      	sub	sp, #132	; 0x84
   3690c:	460b      	mov	r3, r1
   3690e:	4614      	mov	r4, r2
   36910:	d801      	bhi.n	36916 <cc_mbedtls_sha256_update+0x16>
   36912:	2a80      	cmp	r2, #128	; 0x80
   36914:	d90c      	bls.n	36930 <cc_mbedtls_sha256_update+0x30>
   36916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3691a:	d917      	bls.n	3694c <cc_mbedtls_sha256_update+0x4c>
   3691c:	4622      	mov	r2, r4
   3691e:	4619      	mov	r1, r3
   36920:	4628      	mov	r0, r5
   36922:	f000 f87d 	bl	36a20 <mbedtls_sha_update_internal>
   36926:	4604      	mov	r4, r0
   36928:	b984      	cbnz	r4, 3694c <cc_mbedtls_sha256_update+0x4c>
   3692a:	4620      	mov	r0, r4
   3692c:	b021      	add	sp, #132	; 0x84
   3692e:	bd30      	pop	{r4, r5, pc}
   36930:	4668      	mov	r0, sp
   36932:	f7ff fbb1 	bl	36098 <CC_PalMemCopyPlat>
   36936:	4622      	mov	r2, r4
   36938:	4669      	mov	r1, sp
   3693a:	4628      	mov	r0, r5
   3693c:	f000 f870 	bl	36a20 <mbedtls_sha_update_internal>
   36940:	2180      	movs	r1, #128	; 0x80
   36942:	4604      	mov	r4, r0
   36944:	4668      	mov	r0, sp
   36946:	f7ff fbab 	bl	360a0 <CC_PalMemSetZeroPlat>
   3694a:	e7ed      	b.n	36928 <cc_mbedtls_sha256_update+0x28>
   3694c:	f06f 0436 	mvn.w	r4, #54	; 0x36
   36950:	e7eb      	b.n	3692a <cc_mbedtls_sha256_update+0x2a>
   36952:	bf00      	nop

00036954 <cc_mbedtls_sha256_finish>:
   36954:	b570      	push	{r4, r5, r6, lr}
   36956:	b1e8      	cbz	r0, 36994 <cc_mbedtls_sha256_finish+0x40>
   36958:	460e      	mov	r6, r1
   3695a:	b1d9      	cbz	r1, 36994 <cc_mbedtls_sha256_finish+0x40>
   3695c:	4604      	mov	r4, r0
   3695e:	f000 f831 	bl	369c4 <mbedtls_sha_finish_internal>
   36962:	4605      	mov	r5, r0
   36964:	b9b0      	cbnz	r0, 36994 <cc_mbedtls_sha256_finish+0x40>
   36966:	6823      	ldr	r3, [r4, #0]
   36968:	2b01      	cmp	r3, #1
   3696a:	d00b      	beq.n	36984 <cc_mbedtls_sha256_finish+0x30>
   3696c:	2b02      	cmp	r3, #2
   3696e:	d001      	beq.n	36974 <cc_mbedtls_sha256_finish+0x20>
   36970:	4628      	mov	r0, r5
   36972:	bd70      	pop	{r4, r5, r6, pc}
   36974:	221c      	movs	r2, #28
   36976:	f104 0108 	add.w	r1, r4, #8
   3697a:	4630      	mov	r0, r6
   3697c:	f7ff fb8c 	bl	36098 <CC_PalMemCopyPlat>
   36980:	4628      	mov	r0, r5
   36982:	bd70      	pop	{r4, r5, r6, pc}
   36984:	2220      	movs	r2, #32
   36986:	f104 0108 	add.w	r1, r4, #8
   3698a:	4630      	mov	r0, r6
   3698c:	f7ff fb84 	bl	36098 <CC_PalMemCopyPlat>
   36990:	4628      	mov	r0, r5
   36992:	bd70      	pop	{r4, r5, r6, pc}
   36994:	f06f 0536 	mvn.w	r5, #54	; 0x36
   36998:	e7ea      	b.n	36970 <cc_mbedtls_sha256_finish+0x1c>
   3699a:	bf00      	nop

0003699c <mbedtls_sha_starts_internal>:
   3699c:	b178      	cbz	r0, 369be <mbedtls_sha_starts_internal+0x22>
   3699e:	b538      	push	{r3, r4, r5, lr}
   369a0:	4604      	mov	r4, r0
   369a2:	460d      	mov	r5, r1
   369a4:	21f0      	movs	r1, #240	; 0xf0
   369a6:	f7ff fb7b 	bl	360a0 <CC_PalMemSetZeroPlat>
   369aa:	2340      	movs	r3, #64	; 0x40
   369ac:	6025      	str	r5, [r4, #0]
   369ae:	65e3      	str	r3, [r4, #92]	; 0x5c
   369b0:	4620      	mov	r0, r4
   369b2:	f000 fa63 	bl	36e7c <InitHashDrv>
   369b6:	3800      	subs	r0, #0
   369b8:	bf18      	it	ne
   369ba:	2001      	movne	r0, #1
   369bc:	bd38      	pop	{r3, r4, r5, pc}
   369be:	2001      	movs	r0, #1
   369c0:	4770      	bx	lr
   369c2:	bf00      	nop

000369c4 <mbedtls_sha_finish_internal>:
   369c4:	b570      	push	{r4, r5, r6, lr}
   369c6:	6e05      	ldr	r5, [r0, #96]	; 0x60
   369c8:	b0a4      	sub	sp, #144	; 0x90
   369ca:	4604      	mov	r4, r0
   369cc:	ae04      	add	r6, sp, #16
   369ce:	b9e5      	cbnz	r5, 36a0a <mbedtls_sha_finish_internal+0x46>
   369d0:	2201      	movs	r2, #1
   369d2:	2300      	movs	r3, #0
   369d4:	6062      	str	r2, [r4, #4]
   369d6:	4630      	mov	r0, r6
   369d8:	e9cd 3300 	strd	r3, r3, [sp]
   369dc:	aa02      	add	r2, sp, #8
   369de:	4629      	mov	r1, r5
   369e0:	f000 fa18 	bl	36e14 <SetDataBuffersInfo>
   369e4:	b110      	cbz	r0, 369ec <mbedtls_sha_finish_internal+0x28>
   369e6:	2001      	movs	r0, #1
   369e8:	b024      	add	sp, #144	; 0x90
   369ea:	bd70      	pop	{r4, r5, r6, pc}
   369ec:	462a      	mov	r2, r5
   369ee:	a902      	add	r1, sp, #8
   369f0:	4620      	mov	r0, r4
   369f2:	f000 fa6d 	bl	36ed0 <ProcessHashDrv>
   369f6:	2800      	cmp	r0, #0
   369f8:	d1f5      	bne.n	369e6 <mbedtls_sha_finish_internal+0x22>
   369fa:	4620      	mov	r0, r4
   369fc:	f000 fb7e 	bl	370fc <FinishHashDrv>
   36a00:	2800      	cmp	r0, #0
   36a02:	d1f0      	bne.n	369e6 <mbedtls_sha_finish_internal+0x22>
   36a04:	6620      	str	r0, [r4, #96]	; 0x60
   36a06:	b024      	add	sp, #144	; 0x90
   36a08:	bd70      	pop	{r4, r5, r6, pc}
   36a0a:	2d80      	cmp	r5, #128	; 0x80
   36a0c:	462a      	mov	r2, r5
   36a0e:	f100 0164 	add.w	r1, r0, #100	; 0x64
   36a12:	bf28      	it	cs
   36a14:	2280      	movcs	r2, #128	; 0x80
   36a16:	4630      	mov	r0, r6
   36a18:	f7ff fb3e 	bl	36098 <CC_PalMemCopyPlat>
   36a1c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   36a1e:	e7d7      	b.n	369d0 <mbedtls_sha_finish_internal+0xc>

00036a20 <mbedtls_sha_update_internal>:
   36a20:	2800      	cmp	r0, #0
   36a22:	f000 80cd 	beq.w	36bc0 <mbedtls_sha_update_internal+0x1a0>
   36a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36a2a:	4615      	mov	r5, r2
   36a2c:	b0a5      	sub	sp, #148	; 0x94
   36a2e:	2a00      	cmp	r2, #0
   36a30:	f000 80b4 	beq.w	36b9c <mbedtls_sha_update_internal+0x17c>
   36a34:	460f      	mov	r7, r1
   36a36:	2900      	cmp	r1, #0
   36a38:	f000 80ac 	beq.w	36b94 <mbedtls_sha_update_internal+0x174>
   36a3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   36a40:	4606      	mov	r6, r0
   36a42:	6e00      	ldr	r0, [r0, #96]	; 0x60
   36a44:	d37d      	bcc.n	36b42 <mbedtls_sha_update_internal+0x122>
   36a46:	f64f 78ff 	movw	r8, #65535	; 0xffff
   36a4a:	f106 0964 	add.w	r9, r6, #100	; 0x64
   36a4e:	e014      	b.n	36a7a <mbedtls_sha_update_internal+0x5a>
   36a50:	4283      	cmp	r3, r0
   36a52:	46ba      	mov	sl, r7
   36a54:	f64f 74ff 	movw	r4, #65535	; 0xffff
   36a58:	d029      	beq.n	36aae <mbedtls_sha_update_internal+0x8e>
   36a5a:	fbb4 fbf3 	udiv	fp, r4, r3
   36a5e:	fb03 fb0b 	mul.w	fp, r3, fp
   36a62:	f1bb 0f00 	cmp.w	fp, #0
   36a66:	d144      	bne.n	36af2 <mbedtls_sha_update_internal+0xd2>
   36a68:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   36a6c:	4447      	add	r7, r8
   36a6e:	3dff      	subs	r5, #255	; 0xff
   36a70:	2c00      	cmp	r4, #0
   36a72:	d159      	bne.n	36b28 <mbedtls_sha_update_internal+0x108>
   36a74:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   36a78:	d363      	bcc.n	36b42 <mbedtls_sha_update_internal+0x122>
   36a7a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   36a7c:	1a1c      	subs	r4, r3, r0
   36a7e:	fbb4 f2f3 	udiv	r2, r4, r3
   36a82:	fb03 4412 	mls	r4, r3, r2, r4
   36a86:	2c00      	cmp	r4, #0
   36a88:	d0e2      	beq.n	36a50 <mbedtls_sha_update_internal+0x30>
   36a8a:	4544      	cmp	r4, r8
   36a8c:	bf28      	it	cs
   36a8e:	4644      	movcs	r4, r8
   36a90:	4622      	mov	r2, r4
   36a92:	4448      	add	r0, r9
   36a94:	4639      	mov	r1, r7
   36a96:	f7ff faff 	bl	36098 <CC_PalMemCopyPlat>
   36a9a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   36a9c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   36a9e:	4420      	add	r0, r4
   36aa0:	4283      	cmp	r3, r0
   36aa2:	eb07 0a04 	add.w	sl, r7, r4
   36aa6:	6630      	str	r0, [r6, #96]	; 0x60
   36aa8:	eba8 0404 	sub.w	r4, r8, r4
   36aac:	d1d5      	bne.n	36a5a <mbedtls_sha_update_internal+0x3a>
   36aae:	2b80      	cmp	r3, #128	; 0x80
   36ab0:	bf28      	it	cs
   36ab2:	2380      	movcs	r3, #128	; 0x80
   36ab4:	461a      	mov	r2, r3
   36ab6:	4649      	mov	r1, r9
   36ab8:	a804      	add	r0, sp, #16
   36aba:	f7ff faed 	bl	36098 <CC_PalMemCopyPlat>
   36abe:	2300      	movs	r3, #0
   36ac0:	e9cd 3300 	strd	r3, r3, [sp]
   36ac4:	aa02      	add	r2, sp, #8
   36ac6:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   36ac8:	a804      	add	r0, sp, #16
   36aca:	f000 f9a3 	bl	36e14 <SetDataBuffersInfo>
   36ace:	2800      	cmp	r0, #0
   36ad0:	d160      	bne.n	36b94 <mbedtls_sha_update_internal+0x174>
   36ad2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   36ad4:	a902      	add	r1, sp, #8
   36ad6:	4630      	mov	r0, r6
   36ad8:	f000 f9fa 	bl	36ed0 <ProcessHashDrv>
   36adc:	2800      	cmp	r0, #0
   36ade:	d159      	bne.n	36b94 <mbedtls_sha_update_internal+0x174>
   36ae0:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   36ae2:	fbb4 fbf3 	udiv	fp, r4, r3
   36ae6:	fb03 fb0b 	mul.w	fp, r3, fp
   36aea:	6630      	str	r0, [r6, #96]	; 0x60
   36aec:	f1bb 0f00 	cmp.w	fp, #0
   36af0:	d0ba      	beq.n	36a68 <mbedtls_sha_update_internal+0x48>
   36af2:	2300      	movs	r3, #0
   36af4:	e9cd 3300 	strd	r3, r3, [sp]
   36af8:	aa02      	add	r2, sp, #8
   36afa:	4659      	mov	r1, fp
   36afc:	4650      	mov	r0, sl
   36afe:	f000 f989 	bl	36e14 <SetDataBuffersInfo>
   36b02:	2800      	cmp	r0, #0
   36b04:	d146      	bne.n	36b94 <mbedtls_sha_update_internal+0x174>
   36b06:	a902      	add	r1, sp, #8
   36b08:	465a      	mov	r2, fp
   36b0a:	4630      	mov	r0, r6
   36b0c:	f000 f9e0 	bl	36ed0 <ProcessHashDrv>
   36b10:	2800      	cmp	r0, #0
   36b12:	d13f      	bne.n	36b94 <mbedtls_sha_update_internal+0x174>
   36b14:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   36b18:	eba4 040b 	sub.w	r4, r4, fp
   36b1c:	6e30      	ldr	r0, [r6, #96]	; 0x60
   36b1e:	44da      	add	sl, fp
   36b20:	4447      	add	r7, r8
   36b22:	3dff      	subs	r5, #255	; 0xff
   36b24:	2c00      	cmp	r4, #0
   36b26:	d0a5      	beq.n	36a74 <mbedtls_sha_update_internal+0x54>
   36b28:	3019      	adds	r0, #25
   36b2a:	4651      	mov	r1, sl
   36b2c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   36b30:	4622      	mov	r2, r4
   36b32:	f7ff fab1 	bl	36098 <CC_PalMemCopyPlat>
   36b36:	6e30      	ldr	r0, [r6, #96]	; 0x60
   36b38:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   36b3c:	4420      	add	r0, r4
   36b3e:	6630      	str	r0, [r6, #96]	; 0x60
   36b40:	d29b      	bcs.n	36a7a <mbedtls_sha_update_internal+0x5a>
   36b42:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   36b44:	1a14      	subs	r4, r2, r0
   36b46:	fbb4 f3f2 	udiv	r3, r4, r2
   36b4a:	fb02 4413 	mls	r4, r2, r3, r4
   36b4e:	42ac      	cmp	r4, r5
   36b50:	bf28      	it	cs
   36b52:	462c      	movcs	r4, r5
   36b54:	bb34      	cbnz	r4, 36ba4 <mbedtls_sha_update_internal+0x184>
   36b56:	4290      	cmp	r0, r2
   36b58:	d034      	beq.n	36bc4 <mbedtls_sha_update_internal+0x1a4>
   36b5a:	fbb5 f4f2 	udiv	r4, r5, r2
   36b5e:	fb02 f404 	mul.w	r4, r2, r4
   36b62:	b96c      	cbnz	r4, 36b80 <mbedtls_sha_update_internal+0x160>
   36b64:	b1d5      	cbz	r5, 36b9c <mbedtls_sha_update_internal+0x17c>
   36b66:	6e33      	ldr	r3, [r6, #96]	; 0x60
   36b68:	3319      	adds	r3, #25
   36b6a:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   36b6e:	462a      	mov	r2, r5
   36b70:	4639      	mov	r1, r7
   36b72:	f7ff fa91 	bl	36098 <CC_PalMemCopyPlat>
   36b76:	6e33      	ldr	r3, [r6, #96]	; 0x60
   36b78:	442b      	add	r3, r5
   36b7a:	2000      	movs	r0, #0
   36b7c:	6633      	str	r3, [r6, #96]	; 0x60
   36b7e:	e00a      	b.n	36b96 <mbedtls_sha_update_internal+0x176>
   36b80:	2300      	movs	r3, #0
   36b82:	e9cd 3300 	strd	r3, r3, [sp]
   36b86:	aa02      	add	r2, sp, #8
   36b88:	4621      	mov	r1, r4
   36b8a:	4638      	mov	r0, r7
   36b8c:	f000 f942 	bl	36e14 <SetDataBuffersInfo>
   36b90:	2800      	cmp	r0, #0
   36b92:	d033      	beq.n	36bfc <mbedtls_sha_update_internal+0x1dc>
   36b94:	2001      	movs	r0, #1
   36b96:	b025      	add	sp, #148	; 0x94
   36b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36b9c:	4628      	mov	r0, r5
   36b9e:	b025      	add	sp, #148	; 0x94
   36ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ba4:	f106 0364 	add.w	r3, r6, #100	; 0x64
   36ba8:	4639      	mov	r1, r7
   36baa:	4622      	mov	r2, r4
   36bac:	4418      	add	r0, r3
   36bae:	f7ff fa73 	bl	36098 <CC_PalMemCopyPlat>
   36bb2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   36bb4:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   36bb6:	4420      	add	r0, r4
   36bb8:	1b2d      	subs	r5, r5, r4
   36bba:	4427      	add	r7, r4
   36bbc:	6630      	str	r0, [r6, #96]	; 0x60
   36bbe:	e7ca      	b.n	36b56 <mbedtls_sha_update_internal+0x136>
   36bc0:	2001      	movs	r0, #1
   36bc2:	4770      	bx	lr
   36bc4:	2a80      	cmp	r2, #128	; 0x80
   36bc6:	bf28      	it	cs
   36bc8:	2280      	movcs	r2, #128	; 0x80
   36bca:	f106 0164 	add.w	r1, r6, #100	; 0x64
   36bce:	a804      	add	r0, sp, #16
   36bd0:	f7ff fa62 	bl	36098 <CC_PalMemCopyPlat>
   36bd4:	2300      	movs	r3, #0
   36bd6:	e9cd 3300 	strd	r3, r3, [sp]
   36bda:	a804      	add	r0, sp, #16
   36bdc:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   36bde:	aa02      	add	r2, sp, #8
   36be0:	f000 f918 	bl	36e14 <SetDataBuffersInfo>
   36be4:	2800      	cmp	r0, #0
   36be6:	d1d5      	bne.n	36b94 <mbedtls_sha_update_internal+0x174>
   36be8:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   36bea:	a902      	add	r1, sp, #8
   36bec:	4630      	mov	r0, r6
   36bee:	f000 f96f 	bl	36ed0 <ProcessHashDrv>
   36bf2:	2800      	cmp	r0, #0
   36bf4:	d1ce      	bne.n	36b94 <mbedtls_sha_update_internal+0x174>
   36bf6:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   36bf8:	6630      	str	r0, [r6, #96]	; 0x60
   36bfa:	e7ae      	b.n	36b5a <mbedtls_sha_update_internal+0x13a>
   36bfc:	a902      	add	r1, sp, #8
   36bfe:	4622      	mov	r2, r4
   36c00:	4630      	mov	r0, r6
   36c02:	f000 f965 	bl	36ed0 <ProcessHashDrv>
   36c06:	2800      	cmp	r0, #0
   36c08:	d1c4      	bne.n	36b94 <mbedtls_sha_update_internal+0x174>
   36c0a:	4427      	add	r7, r4
   36c0c:	1b2d      	subs	r5, r5, r4
   36c0e:	e7a9      	b.n	36b64 <mbedtls_sha_update_internal+0x144>

00036c10 <cc_mbedtls_sha256>:
   36c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36c12:	461c      	mov	r4, r3
   36c14:	4605      	mov	r5, r0
   36c16:	4811      	ldr	r0, [pc, #68]	; (36c5c <cc_mbedtls_sha256+0x4c>)
   36c18:	460e      	mov	r6, r1
   36c1a:	4617      	mov	r7, r2
   36c1c:	f7ff fe42 	bl	368a4 <cc_mbedtls_sha256_init>
   36c20:	4621      	mov	r1, r4
   36c22:	480e      	ldr	r0, [pc, #56]	; (36c5c <cc_mbedtls_sha256+0x4c>)
   36c24:	f7ff fe58 	bl	368d8 <cc_mbedtls_sha256_starts>
   36c28:	4604      	mov	r4, r0
   36c2a:	b120      	cbz	r0, 36c36 <cc_mbedtls_sha256+0x26>
   36c2c:	480b      	ldr	r0, [pc, #44]	; (36c5c <cc_mbedtls_sha256+0x4c>)
   36c2e:	f7ff fe4d 	bl	368cc <cc_mbedtls_sha256_free>
   36c32:	4620      	mov	r0, r4
   36c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36c36:	4809      	ldr	r0, [pc, #36]	; (36c5c <cc_mbedtls_sha256+0x4c>)
   36c38:	4632      	mov	r2, r6
   36c3a:	4629      	mov	r1, r5
   36c3c:	f7ff fe60 	bl	36900 <cc_mbedtls_sha256_update>
   36c40:	4604      	mov	r4, r0
   36c42:	2800      	cmp	r0, #0
   36c44:	d1f2      	bne.n	36c2c <cc_mbedtls_sha256+0x1c>
   36c46:	4639      	mov	r1, r7
   36c48:	4804      	ldr	r0, [pc, #16]	; (36c5c <cc_mbedtls_sha256+0x4c>)
   36c4a:	f7ff fe83 	bl	36954 <cc_mbedtls_sha256_finish>
   36c4e:	4604      	mov	r4, r0
   36c50:	4802      	ldr	r0, [pc, #8]	; (36c5c <cc_mbedtls_sha256+0x4c>)
   36c52:	f7ff fe3b 	bl	368cc <cc_mbedtls_sha256_free>
   36c56:	4620      	mov	r0, r4
   36c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36c5a:	bf00      	nop
   36c5c:	20004b74 	.word	0x20004b74

00036c60 <RNG_PLAT_SetUserRngParameters>:
   36c60:	b530      	push	{r4, r5, lr}
   36c62:	b083      	sub	sp, #12
   36c64:	231c      	movs	r3, #28
   36c66:	a901      	add	r1, sp, #4
   36c68:	4604      	mov	r4, r0
   36c6a:	9301      	str	r3, [sp, #4]
   36c6c:	f000 f834 	bl	36cd8 <CC_PalTrngParamGet>
   36c70:	4605      	mov	r5, r0
   36c72:	b938      	cbnz	r0, 36c84 <RNG_PLAT_SetUserRngParameters+0x24>
   36c74:	9b01      	ldr	r3, [sp, #4]
   36c76:	2b1c      	cmp	r3, #28
   36c78:	d007      	beq.n	36c8a <RNG_PLAT_SetUserRngParameters+0x2a>
   36c7a:	4d15      	ldr	r5, [pc, #84]	; (36cd0 <RNG_PLAT_SetUserRngParameters+0x70>)
   36c7c:	211c      	movs	r1, #28
   36c7e:	4620      	mov	r0, r4
   36c80:	f7ff fa0e 	bl	360a0 <CC_PalMemSetZeroPlat>
   36c84:	4628      	mov	r0, r5
   36c86:	b003      	add	sp, #12
   36c88:	bd30      	pop	{r4, r5, pc}
   36c8a:	e9d4 3200 	ldrd	r3, r2, [r4]
   36c8e:	2101      	movs	r1, #1
   36c90:	3b00      	subs	r3, #0
   36c92:	61e1      	str	r1, [r4, #28]
   36c94:	bf18      	it	ne
   36c96:	2301      	movne	r3, #1
   36c98:	b10a      	cbz	r2, 36c9e <RNG_PLAT_SetUserRngParameters+0x3e>
   36c9a:	f043 0302 	orr.w	r3, r3, #2
   36c9e:	68a2      	ldr	r2, [r4, #8]
   36ca0:	b932      	cbnz	r2, 36cb0 <RNG_PLAT_SetUserRngParameters+0x50>
   36ca2:	68e2      	ldr	r2, [r4, #12]
   36ca4:	b942      	cbnz	r2, 36cb8 <RNG_PLAT_SetUserRngParameters+0x58>
   36ca6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   36caa:	b97b      	cbnz	r3, 36ccc <RNG_PLAT_SetUserRngParameters+0x6c>
   36cac:	4d09      	ldr	r5, [pc, #36]	; (36cd4 <RNG_PLAT_SetUserRngParameters+0x74>)
   36cae:	e7e5      	b.n	36c7c <RNG_PLAT_SetUserRngParameters+0x1c>
   36cb0:	68e2      	ldr	r2, [r4, #12]
   36cb2:	f043 0304 	orr.w	r3, r3, #4
   36cb6:	b13a      	cbz	r2, 36cc8 <RNG_PLAT_SetUserRngParameters+0x68>
   36cb8:	f043 0308 	orr.w	r3, r3, #8
   36cbc:	2200      	movs	r2, #0
   36cbe:	4628      	mov	r0, r5
   36cc0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   36cc4:	b003      	add	sp, #12
   36cc6:	bd30      	pop	{r4, r5, pc}
   36cc8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   36ccc:	4615      	mov	r5, r2
   36cce:	e7d9      	b.n	36c84 <RNG_PLAT_SetUserRngParameters+0x24>
   36cd0:	00f00c37 	.word	0x00f00c37
   36cd4:	00f00c0e 	.word	0x00f00c0e

00036cd8 <CC_PalTrngParamGet>:
   36cd8:	b118      	cbz	r0, 36ce2 <CC_PalTrngParamGet+0xa>
   36cda:	b111      	cbz	r1, 36ce2 <CC_PalTrngParamGet+0xa>
   36cdc:	680b      	ldr	r3, [r1, #0]
   36cde:	2b1c      	cmp	r3, #28
   36ce0:	d001      	beq.n	36ce6 <CC_PalTrngParamGet+0xe>
   36ce2:	2001      	movs	r0, #1
   36ce4:	4770      	bx	lr
   36ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   36cea:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   36cee:	3201      	adds	r2, #1
   36cf0:	bf14      	ite	ne
   36cf2:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   36cf6:	f241 225c 	movweq	r2, #4700	; 0x125c
   36cfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   36cfe:	6002      	str	r2, [r0, #0]
   36d00:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   36d04:	3201      	adds	r2, #1
   36d06:	bf14      	ite	ne
   36d08:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   36d0c:	f641 1264 	movweq	r2, #6500	; 0x1964
   36d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   36d14:	6042      	str	r2, [r0, #4]
   36d16:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   36d1a:	3201      	adds	r2, #1
   36d1c:	bf14      	ite	ne
   36d1e:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   36d22:	f640 62d8 	movweq	r2, #3800	; 0xed8
   36d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   36d2a:	6082      	str	r2, [r0, #8]
   36d2c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   36d30:	3201      	adds	r2, #1
   36d32:	bf14      	ite	ne
   36d34:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   36d38:	f241 3288 	movweq	r2, #5000	; 0x1388
   36d3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   36d40:	60c2      	str	r2, [r0, #12]
   36d42:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   36d46:	3201      	adds	r2, #1
   36d48:	bf14      	ite	ne
   36d4a:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   36d4e:	2290      	moveq	r2, #144	; 0x90
   36d50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   36d54:	6102      	str	r2, [r0, #16]
   36d56:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   36d5a:	3201      	adds	r2, #1
   36d5c:	bf14      	ite	ne
   36d5e:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   36d62:	2251      	moveq	r2, #81	; 0x51
   36d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   36d68:	6142      	str	r2, [r0, #20]
   36d6a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   36d6e:	3201      	adds	r2, #1
   36d70:	bf14      	ite	ne
   36d72:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   36d76:	f240 3337 	movweq	r3, #823	; 0x337
   36d7a:	6183      	str	r3, [r0, #24]
   36d7c:	2000      	movs	r0, #0
   36d7e:	4770      	bx	lr

00036d80 <LLF_RND_WaitRngInterrupt>:
   36d80:	b508      	push	{r3, lr}
   36d82:	4601      	mov	r1, r0
   36d84:	f44f 6080 	mov.w	r0, #1024	; 0x400
   36d88:	f7ff f912 	bl	35fb0 <CC_HalWaitInterruptRND>
   36d8c:	4b03      	ldr	r3, [pc, #12]	; (36d9c <LLF_RND_WaitRngInterrupt+0x1c>)
   36d8e:	2200      	movs	r2, #0
   36d90:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   36d94:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   36d98:	bd08      	pop	{r3, pc}
   36d9a:	bf00      	nop
   36d9c:	5002b000 	.word	0x5002b000

00036da0 <LLF_RND_GetRoscSampleCnt>:
   36da0:	3801      	subs	r0, #1
   36da2:	2807      	cmp	r0, #7
   36da4:	d805      	bhi.n	36db2 <LLF_RND_GetRoscSampleCnt+0x12>
   36da6:	e8df f000 	tbb	[pc, r0]
   36daa:	0e12      	.short	0x0e12
   36dac:	04040a04 	.word	0x04040a04
   36db0:	0604      	.short	0x0604
   36db2:	4809      	ldr	r0, [pc, #36]	; (36dd8 <LLF_RND_GetRoscSampleCnt+0x38>)
   36db4:	4770      	bx	lr
   36db6:	68cb      	ldr	r3, [r1, #12]
   36db8:	624b      	str	r3, [r1, #36]	; 0x24
   36dba:	2000      	movs	r0, #0
   36dbc:	4770      	bx	lr
   36dbe:	688b      	ldr	r3, [r1, #8]
   36dc0:	624b      	str	r3, [r1, #36]	; 0x24
   36dc2:	2000      	movs	r0, #0
   36dc4:	4770      	bx	lr
   36dc6:	684b      	ldr	r3, [r1, #4]
   36dc8:	624b      	str	r3, [r1, #36]	; 0x24
   36dca:	2000      	movs	r0, #0
   36dcc:	4770      	bx	lr
   36dce:	680b      	ldr	r3, [r1, #0]
   36dd0:	624b      	str	r3, [r1, #36]	; 0x24
   36dd2:	2000      	movs	r0, #0
   36dd4:	4770      	bx	lr
   36dd6:	bf00      	nop
   36dd8:	00f10c31 	.word	0x00f10c31

00036ddc <LLF_RND_GetFastestRosc>:
   36ddc:	680b      	ldr	r3, [r1, #0]
   36dde:	e002      	b.n	36de6 <LLF_RND_GetFastestRosc+0xa>
   36de0:	2b08      	cmp	r3, #8
   36de2:	600b      	str	r3, [r1, #0]
   36de4:	d806      	bhi.n	36df4 <LLF_RND_GetFastestRosc+0x18>
   36de6:	6a02      	ldr	r2, [r0, #32]
   36de8:	4213      	tst	r3, r2
   36dea:	ea4f 0343 	mov.w	r3, r3, lsl #1
   36dee:	d0f7      	beq.n	36de0 <LLF_RND_GetFastestRosc+0x4>
   36df0:	2000      	movs	r0, #0
   36df2:	4770      	bx	lr
   36df4:	4800      	ldr	r0, [pc, #0]	; (36df8 <LLF_RND_GetFastestRosc+0x1c>)
   36df6:	4770      	bx	lr
   36df8:	00f10c31 	.word	0x00f10c31

00036dfc <LLF_RND_TurnOffTrng>:
   36dfc:	4b04      	ldr	r3, [pc, #16]	; (36e10 <LLF_RND_TurnOffTrng+0x14>)
   36dfe:	2200      	movs	r2, #0
   36e00:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   36e04:	f44f 6080 	mov.w	r0, #1024	; 0x400
   36e08:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   36e0c:	f7ff b8b6 	b.w	35f7c <CC_HalClearInterruptBit>
   36e10:	5002b000 	.word	0x5002b000

00036e14 <SetDataBuffersInfo>:
   36e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   36e16:	b083      	sub	sp, #12
   36e18:	461d      	mov	r5, r3
   36e1a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   36e1e:	f04f 0300 	mov.w	r3, #0
   36e22:	f88d 3007 	strb.w	r3, [sp, #7]
   36e26:	d324      	bcc.n	36e72 <SetDataBuffersInfo+0x5e>
   36e28:	468c      	mov	ip, r1
   36e2a:	4484      	add	ip, r0
   36e2c:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   36e30:	4604      	mov	r4, r0
   36e32:	d81e      	bhi.n	36e72 <SetDataBuffersInfo+0x5e>
   36e34:	4617      	mov	r7, r2
   36e36:	f10d 0307 	add.w	r3, sp, #7
   36e3a:	2201      	movs	r2, #1
   36e3c:	f000 fe68 	bl	37b10 <CC_PalDataBufferAttrGet>
   36e40:	4606      	mov	r6, r0
   36e42:	b9b0      	cbnz	r0, 36e72 <SetDataBuffersInfo+0x5e>
   36e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
   36e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   36e4a:	603c      	str	r4, [r7, #0]
   36e4c:	713b      	strb	r3, [r7, #4]
   36e4e:	b192      	cbz	r2, 36e76 <SetDataBuffersInfo+0x62>
   36e50:	b14d      	cbz	r5, 36e66 <SetDataBuffersInfo+0x52>
   36e52:	4602      	mov	r2, r0
   36e54:	9908      	ldr	r1, [sp, #32]
   36e56:	f10d 0307 	add.w	r3, sp, #7
   36e5a:	4628      	mov	r0, r5
   36e5c:	f000 fe58 	bl	37b10 <CC_PalDataBufferAttrGet>
   36e60:	b938      	cbnz	r0, 36e72 <SetDataBuffersInfo+0x5e>
   36e62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   36e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
   36e68:	4630      	mov	r0, r6
   36e6a:	6015      	str	r5, [r2, #0]
   36e6c:	7113      	strb	r3, [r2, #4]
   36e6e:	b003      	add	sp, #12
   36e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36e72:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   36e76:	4630      	mov	r0, r6
   36e78:	b003      	add	sp, #12
   36e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00036e7c <InitHashDrv>:
   36e7c:	b1e8      	cbz	r0, 36eba <InitHashDrv+0x3e>
   36e7e:	b510      	push	{r4, lr}
   36e80:	6804      	ldr	r4, [r0, #0]
   36e82:	2c01      	cmp	r4, #1
   36e84:	d004      	beq.n	36e90 <InitHashDrv+0x14>
   36e86:	2c02      	cmp	r4, #2
   36e88:	d010      	beq.n	36eac <InitHashDrv+0x30>
   36e8a:	b144      	cbz	r4, 36e9e <InitHashDrv+0x22>
   36e8c:	480c      	ldr	r0, [pc, #48]	; (36ec0 <InitHashDrv+0x44>)
   36e8e:	bd10      	pop	{r4, pc}
   36e90:	490c      	ldr	r1, [pc, #48]	; (36ec4 <InitHashDrv+0x48>)
   36e92:	2220      	movs	r2, #32
   36e94:	3008      	adds	r0, #8
   36e96:	f7ff f8ff 	bl	36098 <CC_PalMemCopyPlat>
   36e9a:	2000      	movs	r0, #0
   36e9c:	bd10      	pop	{r4, pc}
   36e9e:	490a      	ldr	r1, [pc, #40]	; (36ec8 <InitHashDrv+0x4c>)
   36ea0:	2214      	movs	r2, #20
   36ea2:	3008      	adds	r0, #8
   36ea4:	f7ff f8f8 	bl	36098 <CC_PalMemCopyPlat>
   36ea8:	4620      	mov	r0, r4
   36eaa:	bd10      	pop	{r4, pc}
   36eac:	4907      	ldr	r1, [pc, #28]	; (36ecc <InitHashDrv+0x50>)
   36eae:	2220      	movs	r2, #32
   36eb0:	3008      	adds	r0, #8
   36eb2:	f7ff f8f1 	bl	36098 <CC_PalMemCopyPlat>
   36eb6:	2000      	movs	r0, #0
   36eb8:	bd10      	pop	{r4, pc}
   36eba:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   36ebe:	4770      	bx	lr
   36ec0:	00f30001 	.word	0x00f30001
   36ec4:	0003c764 	.word	0x0003c764
   36ec8:	0003c730 	.word	0x0003c730
   36ecc:	0003c744 	.word	0x0003c744

00036ed0 <ProcessHashDrv>:
   36ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36ed4:	2900      	cmp	r1, #0
   36ed6:	f000 80f9 	beq.w	370cc <ProcessHashDrv+0x1fc>
   36eda:	4604      	mov	r4, r0
   36edc:	2800      	cmp	r0, #0
   36ede:	f000 80f9 	beq.w	370d4 <ProcessHashDrv+0x204>
   36ee2:	6803      	ldr	r3, [r0, #0]
   36ee4:	4690      	mov	r8, r2
   36ee6:	460f      	mov	r7, r1
   36ee8:	2b00      	cmp	r3, #0
   36eea:	f000 80c3 	beq.w	37074 <ProcessHashDrv+0x1a4>
   36eee:	3b01      	subs	r3, #1
   36ef0:	2b01      	cmp	r3, #1
   36ef2:	f200 80d7 	bhi.w	370a4 <ProcessHashDrv+0x1d4>
   36ef6:	4879      	ldr	r0, [pc, #484]	; (370dc <ProcessHashDrv+0x20c>)
   36ef8:	f04f 31ff 	mov.w	r1, #4294967295
   36efc:	f04f 0902 	mov.w	r9, #2
   36f00:	f7ff f8e6 	bl	360d0 <CC_PalMutexLock>
   36f04:	2800      	cmp	r0, #0
   36f06:	f040 80bf 	bne.w	37088 <ProcessHashDrv+0x1b8>
   36f0a:	2000      	movs	r0, #0
   36f0c:	f7ff f910 	bl	36130 <CC_PalPowerSaveModeSelect>
   36f10:	4606      	mov	r6, r0
   36f12:	2800      	cmp	r0, #0
   36f14:	f040 80c2 	bne.w	3709c <ProcessHashDrv+0x1cc>
   36f18:	4a71      	ldr	r2, [pc, #452]	; (370e0 <ProcessHashDrv+0x210>)
   36f1a:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   36f1e:	2b00      	cmp	r3, #0
   36f20:	d1fb      	bne.n	36f1a <ProcessHashDrv+0x4a>
   36f22:	4d6f      	ldr	r5, [pc, #444]	; (370e0 <ProcessHashDrv+0x210>)
   36f24:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   36f28:	2b00      	cmp	r3, #0
   36f2a:	d1fb      	bne.n	36f24 <ProcessHashDrv+0x54>
   36f2c:	f04f 30ff 	mov.w	r0, #4294967295
   36f30:	f7ff f824 	bl	35f7c <CC_HalClearInterruptBit>
   36f34:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   36f38:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   36f3c:	f7ff f82c 	bl	35f98 <CC_HalMaskInterrupt>
   36f40:	2301      	movs	r3, #1
   36f42:	2207      	movs	r2, #7
   36f44:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   36f48:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   36f4c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   36f50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   36f52:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   36f56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   36f58:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   36f5c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   36f60:	6823      	ldr	r3, [r4, #0]
   36f62:	b15b      	cbz	r3, 36f7c <ProcessHashDrv+0xac>
   36f64:	3b01      	subs	r3, #1
   36f66:	2b01      	cmp	r3, #1
   36f68:	d818      	bhi.n	36f9c <ProcessHashDrv+0xcc>
   36f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36f6c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   36f70:	6a23      	ldr	r3, [r4, #32]
   36f72:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   36f76:	69e3      	ldr	r3, [r4, #28]
   36f78:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   36f7c:	4b58      	ldr	r3, [pc, #352]	; (370e0 <ProcessHashDrv+0x210>)
   36f7e:	69a2      	ldr	r2, [r4, #24]
   36f80:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   36f84:	6962      	ldr	r2, [r4, #20]
   36f86:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   36f8a:	6922      	ldr	r2, [r4, #16]
   36f8c:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   36f90:	68e2      	ldr	r2, [r4, #12]
   36f92:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   36f96:	68a2      	ldr	r2, [r4, #8]
   36f98:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   36f9c:	4a50      	ldr	r2, [pc, #320]	; (370e0 <ProcessHashDrv+0x210>)
   36f9e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   36fa2:	2b00      	cmp	r3, #0
   36fa4:	d1fb      	bne.n	36f9e <ProcessHashDrv+0xce>
   36fa6:	f1b8 0f00 	cmp.w	r8, #0
   36faa:	d05f      	beq.n	3706c <ProcessHashDrv+0x19c>
   36fac:	6863      	ldr	r3, [r4, #4]
   36fae:	2b01      	cmp	r3, #1
   36fb0:	bf08      	it	eq
   36fb2:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   36fb6:	4b4a      	ldr	r3, [pc, #296]	; (370e0 <ProcessHashDrv+0x210>)
   36fb8:	683a      	ldr	r2, [r7, #0]
   36fba:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   36fbe:	2040      	movs	r0, #64	; 0x40
   36fc0:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   36fc4:	f7fe ffee 	bl	35fa4 <CC_HalWaitInterrupt>
   36fc8:	4606      	mov	r6, r0
   36fca:	4a45      	ldr	r2, [pc, #276]	; (370e0 <ProcessHashDrv+0x210>)
   36fcc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   36fd0:	2b00      	cmp	r3, #0
   36fd2:	d1fb      	bne.n	36fcc <ProcessHashDrv+0xfc>
   36fd4:	4a42      	ldr	r2, [pc, #264]	; (370e0 <ProcessHashDrv+0x210>)
   36fd6:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   36fda:	2b00      	cmp	r3, #0
   36fdc:	d1fb      	bne.n	36fd6 <ProcessHashDrv+0x106>
   36fde:	6823      	ldr	r3, [r4, #0]
   36fe0:	b15b      	cbz	r3, 36ffa <ProcessHashDrv+0x12a>
   36fe2:	3b01      	subs	r3, #1
   36fe4:	2b01      	cmp	r3, #1
   36fe6:	d818      	bhi.n	3701a <ProcessHashDrv+0x14a>
   36fe8:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   36fec:	6263      	str	r3, [r4, #36]	; 0x24
   36fee:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   36ff2:	6223      	str	r3, [r4, #32]
   36ff4:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   36ff8:	61e3      	str	r3, [r4, #28]
   36ffa:	4b39      	ldr	r3, [pc, #228]	; (370e0 <ProcessHashDrv+0x210>)
   36ffc:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   37000:	61a2      	str	r2, [r4, #24]
   37002:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   37006:	6162      	str	r2, [r4, #20]
   37008:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   3700c:	6122      	str	r2, [r4, #16]
   3700e:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   37012:	60e2      	str	r2, [r4, #12]
   37014:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   37018:	60a3      	str	r3, [r4, #8]
   3701a:	4a31      	ldr	r2, [pc, #196]	; (370e0 <ProcessHashDrv+0x210>)
   3701c:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   37020:	64a1      	str	r1, [r4, #72]	; 0x48
   37022:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   37026:	64e1      	str	r1, [r4, #76]	; 0x4c
   37028:	2300      	movs	r3, #0
   3702a:	2101      	movs	r1, #1
   3702c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   37030:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   37034:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   37038:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   3703c:	2b00      	cmp	r3, #0
   3703e:	d1fb      	bne.n	37038 <ProcessHashDrv+0x168>
   37040:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   37044:	2e00      	cmp	r6, #0
   37046:	d13b      	bne.n	370c0 <ProcessHashDrv+0x1f0>
   37048:	4b25      	ldr	r3, [pc, #148]	; (370e0 <ProcessHashDrv+0x210>)
   3704a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   3704e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   37052:	f7fe ffa1 	bl	35f98 <CC_HalMaskInterrupt>
   37056:	2001      	movs	r0, #1
   37058:	f7ff f86a 	bl	36130 <CC_PalPowerSaveModeSelect>
   3705c:	bb60      	cbnz	r0, 370b8 <ProcessHashDrv+0x1e8>
   3705e:	481f      	ldr	r0, [pc, #124]	; (370dc <ProcessHashDrv+0x20c>)
   37060:	f7ff f83e 	bl	360e0 <CC_PalMutexUnlock>
   37064:	bb10      	cbnz	r0, 370ac <ProcessHashDrv+0x1dc>
   37066:	4630      	mov	r0, r6
   37068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3706c:	2304      	movs	r3, #4
   3706e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   37072:	e7aa      	b.n	36fca <ProcessHashDrv+0xfa>
   37074:	4819      	ldr	r0, [pc, #100]	; (370dc <ProcessHashDrv+0x20c>)
   37076:	f04f 31ff 	mov.w	r1, #4294967295
   3707a:	f04f 0901 	mov.w	r9, #1
   3707e:	f7ff f827 	bl	360d0 <CC_PalMutexLock>
   37082:	2800      	cmp	r0, #0
   37084:	f43f af41 	beq.w	36f0a <ProcessHashDrv+0x3a>
   37088:	4816      	ldr	r0, [pc, #88]	; (370e4 <ProcessHashDrv+0x214>)
   3708a:	f7fe f8a5 	bl	351d8 <CC_PalAbort>
   3708e:	2000      	movs	r0, #0
   37090:	f7ff f84e 	bl	36130 <CC_PalPowerSaveModeSelect>
   37094:	4606      	mov	r6, r0
   37096:	2800      	cmp	r0, #0
   37098:	f43f af3e 	beq.w	36f18 <ProcessHashDrv+0x48>
   3709c:	4812      	ldr	r0, [pc, #72]	; (370e8 <ProcessHashDrv+0x218>)
   3709e:	f7fe f89b 	bl	351d8 <CC_PalAbort>
   370a2:	e739      	b.n	36f18 <ProcessHashDrv+0x48>
   370a4:	4e11      	ldr	r6, [pc, #68]	; (370ec <ProcessHashDrv+0x21c>)
   370a6:	4630      	mov	r0, r6
   370a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   370ac:	4810      	ldr	r0, [pc, #64]	; (370f0 <ProcessHashDrv+0x220>)
   370ae:	f7fe f893 	bl	351d8 <CC_PalAbort>
   370b2:	4630      	mov	r0, r6
   370b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   370b8:	480e      	ldr	r0, [pc, #56]	; (370f4 <ProcessHashDrv+0x224>)
   370ba:	f7fe f88d 	bl	351d8 <CC_PalAbort>
   370be:	e7ce      	b.n	3705e <ProcessHashDrv+0x18e>
   370c0:	2110      	movs	r1, #16
   370c2:	f104 0008 	add.w	r0, r4, #8
   370c6:	f7fe ffeb 	bl	360a0 <CC_PalMemSetZeroPlat>
   370ca:	e7bd      	b.n	37048 <ProcessHashDrv+0x178>
   370cc:	4e0a      	ldr	r6, [pc, #40]	; (370f8 <ProcessHashDrv+0x228>)
   370ce:	4630      	mov	r0, r6
   370d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   370d4:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   370d8:	e7c5      	b.n	37066 <ProcessHashDrv+0x196>
   370da:	bf00      	nop
   370dc:	20000938 	.word	0x20000938
   370e0:	5002b000 	.word	0x5002b000
   370e4:	0003c664 	.word	0x0003c664
   370e8:	0003c67c 	.word	0x0003c67c
   370ec:	00f30001 	.word	0x00f30001
   370f0:	0003c6bc 	.word	0x0003c6bc
   370f4:	0003c69c 	.word	0x0003c69c
   370f8:	00f30003 	.word	0x00f30003

000370fc <FinishHashDrv>:
   370fc:	b398      	cbz	r0, 37166 <FinishHashDrv+0x6a>
   370fe:	b470      	push	{r4, r5, r6}
   37100:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   37104:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   37108:	ba26      	rev	r6, r4
   3710a:	ba0d      	rev	r5, r1
   3710c:	ba14      	rev	r4, r2
   3710e:	ba19      	rev	r1, r3
   37110:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   37114:	ba12      	rev	r2, r2
   37116:	e9c0 4104 	strd	r4, r1, [r0, #16]
   3711a:	6182      	str	r2, [r0, #24]
   3711c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   37120:	e9c0 6502 	strd	r6, r5, [r0, #8]
   37124:	ba1b      	rev	r3, r3
   37126:	ba25      	rev	r5, r4
   37128:	e9c0 3507 	strd	r3, r5, [r0, #28]
   3712c:	ba14      	rev	r4, r2
   3712e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   37132:	6a81      	ldr	r1, [r0, #40]	; 0x28
   37134:	ba12      	rev	r2, r2
   37136:	ba09      	rev	r1, r1
   37138:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   3713c:	62c2      	str	r2, [r0, #44]	; 0x2c
   3713e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   37142:	ba1b      	rev	r3, r3
   37144:	ba25      	rev	r5, r4
   37146:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   3714a:	ba14      	rev	r4, r2
   3714c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   37150:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   37152:	ba12      	rev	r2, r2
   37154:	ba09      	rev	r1, r1
   37156:	ba1b      	rev	r3, r3
   37158:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   3715c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   37160:	2000      	movs	r0, #0
   37162:	bc70      	pop	{r4, r5, r6}
   37164:	4770      	bx	lr
   37166:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   3716a:	4770      	bx	lr

0003716c <LoadAesKey>:
   3716c:	2800      	cmp	r0, #0
   3716e:	d046      	beq.n	371fe <LoadAesKey+0x92>
   37170:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   37174:	2b00      	cmp	r3, #0
   37176:	d033      	beq.n	371e0 <LoadAesKey+0x74>
   37178:	2b03      	cmp	r3, #3
   3717a:	b510      	push	{r4, lr}
   3717c:	d013      	beq.n	371a6 <LoadAesKey+0x3a>
   3717e:	4821      	ldr	r0, [pc, #132]	; (37204 <LoadAesKey+0x98>)
   37180:	4c21      	ldr	r4, [pc, #132]	; (37208 <LoadAesKey+0x9c>)
   37182:	6822      	ldr	r2, [r4, #0]
   37184:	4b21      	ldr	r3, [pc, #132]	; (3720c <LoadAesKey+0xa0>)
   37186:	6812      	ldr	r2, [r2, #0]
   37188:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   3718c:	6822      	ldr	r2, [r4, #0]
   3718e:	6852      	ldr	r2, [r2, #4]
   37190:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   37194:	6822      	ldr	r2, [r4, #0]
   37196:	6892      	ldr	r2, [r2, #8]
   37198:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   3719c:	6822      	ldr	r2, [r4, #0]
   3719e:	68d2      	ldr	r2, [r2, #12]
   371a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   371a4:	bd10      	pop	{r4, pc}
   371a6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   371a8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   371aa:	4c17      	ldr	r4, [pc, #92]	; (37208 <LoadAesKey+0x9c>)
   371ac:	f000 fbac 	bl	37908 <kmu_validate_kdr_slot_and_size>
   371b0:	2800      	cmp	r0, #0
   371b2:	d1e6      	bne.n	37182 <LoadAesKey+0x16>
   371b4:	6822      	ldr	r2, [r4, #0]
   371b6:	4b15      	ldr	r3, [pc, #84]	; (3720c <LoadAesKey+0xa0>)
   371b8:	6812      	ldr	r2, [r2, #0]
   371ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   371be:	6822      	ldr	r2, [r4, #0]
   371c0:	6852      	ldr	r2, [r2, #4]
   371c2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   371c6:	6822      	ldr	r2, [r4, #0]
   371c8:	6892      	ldr	r2, [r2, #8]
   371ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   371ce:	6822      	ldr	r2, [r4, #0]
   371d0:	68d2      	ldr	r2, [r2, #12]
   371d2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   371d6:	f000 fba3 	bl	37920 <kmu_use_kdr_key>
   371da:	2800      	cmp	r0, #0
   371dc:	d1d1      	bne.n	37182 <LoadAesKey+0x16>
   371de:	bd10      	pop	{r4, pc}
   371e0:	4a0a      	ldr	r2, [pc, #40]	; (3720c <LoadAesKey+0xa0>)
   371e2:	6901      	ldr	r1, [r0, #16]
   371e4:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   371e8:	6941      	ldr	r1, [r0, #20]
   371ea:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   371ee:	6981      	ldr	r1, [r0, #24]
   371f0:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   371f4:	69c1      	ldr	r1, [r0, #28]
   371f6:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   371fa:	4618      	mov	r0, r3
   371fc:	4770      	bx	lr
   371fe:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   37202:	4770      	bx	lr
   37204:	00f10009 	.word	0x00f10009
   37208:	20000928 	.word	0x20000928
   3720c:	5002b000 	.word	0x5002b000

00037210 <InitAes.part.0>:
   37210:	4a37      	ldr	r2, [pc, #220]	; (372f0 <InitAes.part.0+0xe0>)
   37212:	b538      	push	{r3, r4, r5, lr}
   37214:	4604      	mov	r4, r0
   37216:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   3721a:	2b00      	cmp	r3, #0
   3721c:	d1fb      	bne.n	37216 <InitAes.part.0+0x6>
   3721e:	4a34      	ldr	r2, [pc, #208]	; (372f0 <InitAes.part.0+0xe0>)
   37220:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   37224:	2b00      	cmp	r3, #0
   37226:	d1fb      	bne.n	37220 <InitAes.part.0+0x10>
   37228:	4a31      	ldr	r2, [pc, #196]	; (372f0 <InitAes.part.0+0xe0>)
   3722a:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   3722e:	2b00      	cmp	r3, #0
   37230:	d1fb      	bne.n	3722a <InitAes.part.0+0x1a>
   37232:	4a2f      	ldr	r2, [pc, #188]	; (372f0 <InitAes.part.0+0xe0>)
   37234:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   37238:	2b00      	cmp	r3, #0
   3723a:	d1fb      	bne.n	37234 <InitAes.part.0+0x24>
   3723c:	4a2c      	ldr	r2, [pc, #176]	; (372f0 <InitAes.part.0+0xe0>)
   3723e:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   37242:	2b00      	cmp	r3, #0
   37244:	d1fb      	bne.n	3723e <InitAes.part.0+0x2e>
   37246:	4d2a      	ldr	r5, [pc, #168]	; (372f0 <InitAes.part.0+0xe0>)
   37248:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   3724c:	2b00      	cmp	r3, #0
   3724e:	d1fb      	bne.n	37248 <InitAes.part.0+0x38>
   37250:	f04f 30ff 	mov.w	r0, #4294967295
   37254:	f7fe fe92 	bl	35f7c <CC_HalClearInterruptBit>
   37258:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3725a:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   3725e:	f023 0304 	bic.w	r3, r3, #4
   37262:	2b03      	cmp	r3, #3
   37264:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   37266:	d039      	beq.n	372dc <InitAes.part.0+0xcc>
   37268:	2b01      	cmp	r3, #1
   3726a:	bf0c      	ite	eq
   3726c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   37270:	f020 0020 	bicne.w	r0, r0, #32
   37274:	f7fe fe90 	bl	35f98 <CC_HalMaskInterrupt>
   37278:	4a1d      	ldr	r2, [pc, #116]	; (372f0 <InitAes.part.0+0xe0>)
   3727a:	2301      	movs	r3, #1
   3727c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   37280:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   37284:	2b00      	cmp	r3, #0
   37286:	d1fb      	bne.n	37280 <InitAes.part.0+0x70>
   37288:	4a19      	ldr	r2, [pc, #100]	; (372f0 <InitAes.part.0+0xe0>)
   3728a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   3728e:	2b00      	cmp	r3, #0
   37290:	d1fb      	bne.n	3728a <InitAes.part.0+0x7a>
   37292:	4917      	ldr	r1, [pc, #92]	; (372f0 <InitAes.part.0+0xe0>)
   37294:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   37298:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   3729c:	2b00      	cmp	r3, #0
   3729e:	d1fb      	bne.n	37298 <InitAes.part.0+0x88>
   372a0:	4a13      	ldr	r2, [pc, #76]	; (372f0 <InitAes.part.0+0xe0>)
   372a2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   372a6:	2b00      	cmp	r3, #0
   372a8:	d1fb      	bne.n	372a2 <InitAes.part.0+0x92>
   372aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
   372ac:	f022 0104 	bic.w	r1, r2, #4
   372b0:	2903      	cmp	r1, #3
   372b2:	bf18      	it	ne
   372b4:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   372b6:	490e      	ldr	r1, [pc, #56]	; (372f0 <InitAes.part.0+0xe0>)
   372b8:	ea4f 0282 	mov.w	r2, r2, lsl #2
   372bc:	bf18      	it	ne
   372be:	f003 0301 	andne.w	r3, r3, #1
   372c2:	f002 021c 	and.w	r2, r2, #28
   372c6:	4313      	orrs	r3, r2
   372c8:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   372cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   372ce:	2b07      	cmp	r3, #7
   372d0:	bf04      	itt	eq
   372d2:	2301      	moveq	r3, #1
   372d4:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   372d8:	2000      	movs	r0, #0
   372da:	bd38      	pop	{r3, r4, r5, pc}
   372dc:	2b01      	cmp	r3, #1
   372de:	bf0c      	ite	eq
   372e0:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   372e4:	f020 0010 	bicne.w	r0, r0, #16
   372e8:	f7fe fe56 	bl	35f98 <CC_HalMaskInterrupt>
   372ec:	e7c4      	b.n	37278 <InitAes.part.0+0x68>
   372ee:	bf00      	nop
   372f0:	5002b000 	.word	0x5002b000

000372f4 <write_invalid_key>:
   372f4:	4a09      	ldr	r2, [pc, #36]	; (3731c <write_invalid_key+0x28>)
   372f6:	4b0a      	ldr	r3, [pc, #40]	; (37320 <write_invalid_key+0x2c>)
   372f8:	6811      	ldr	r1, [r2, #0]
   372fa:	6809      	ldr	r1, [r1, #0]
   372fc:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   37300:	6811      	ldr	r1, [r2, #0]
   37302:	6849      	ldr	r1, [r1, #4]
   37304:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   37308:	6811      	ldr	r1, [r2, #0]
   3730a:	6889      	ldr	r1, [r1, #8]
   3730c:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   37310:	6812      	ldr	r2, [r2, #0]
   37312:	68d2      	ldr	r2, [r2, #12]
   37314:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   37318:	4770      	bx	lr
   3731a:	bf00      	nop
   3731c:	20000928 	.word	0x20000928
   37320:	5002b000 	.word	0x5002b000

00037324 <ProcessAesDrv>:
   37324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37328:	b085      	sub	sp, #20
   3732a:	2900      	cmp	r1, #0
   3732c:	f000 80a3 	beq.w	37476 <ProcessAesDrv+0x152>
   37330:	4690      	mov	r8, r2
   37332:	2a00      	cmp	r2, #0
   37334:	f000 809f 	beq.w	37476 <ProcessAesDrv+0x152>
   37338:	4605      	mov	r5, r0
   3733a:	2800      	cmp	r0, #0
   3733c:	f000 813c 	beq.w	375b8 <ProcessAesDrv+0x294>
   37340:	4699      	mov	r9, r3
   37342:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   37344:	460e      	mov	r6, r1
   37346:	2b00      	cmp	r3, #0
   37348:	d151      	bne.n	373ee <ProcessAesDrv+0xca>
   3734a:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   3734e:	d253      	bcs.n	373f8 <ProcessAesDrv+0xd4>
   37350:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   37354:	2b04      	cmp	r3, #4
   37356:	f000 8112 	beq.w	3757e <ProcessAesDrv+0x25a>
   3735a:	2700      	movs	r7, #0
   3735c:	48a6      	ldr	r0, [pc, #664]	; (375f8 <ProcessAesDrv+0x2d4>)
   3735e:	f04f 31ff 	mov.w	r1, #4294967295
   37362:	f7fe feb5 	bl	360d0 <CC_PalMutexLock>
   37366:	2800      	cmp	r0, #0
   37368:	f040 80e8 	bne.w	3753c <ProcessAesDrv+0x218>
   3736c:	2000      	movs	r0, #0
   3736e:	f7fe fedf 	bl	36130 <CC_PalPowerSaveModeSelect>
   37372:	2800      	cmp	r0, #0
   37374:	f040 80eb 	bne.w	3754e <ProcessAesDrv+0x22a>
   37378:	48a0      	ldr	r0, [pc, #640]	; (375fc <ProcessAesDrv+0x2d8>)
   3737a:	2301      	movs	r3, #1
   3737c:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   37380:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   37384:	2c00      	cmp	r4, #0
   37386:	d1fb      	bne.n	37380 <ProcessAesDrv+0x5c>
   37388:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   3738a:	2b03      	cmp	r3, #3
   3738c:	dc39      	bgt.n	37402 <ProcessAesDrv+0xde>
   3738e:	2b00      	cmp	r3, #0
   37390:	da3a      	bge.n	37408 <ProcessAesDrv+0xe4>
   37392:	4c9b      	ldr	r4, [pc, #620]	; (37600 <ProcessAesDrv+0x2dc>)
   37394:	4a99      	ldr	r2, [pc, #612]	; (375fc <ProcessAesDrv+0x2d8>)
   37396:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   3739a:	2b00      	cmp	r3, #0
   3739c:	d1fb      	bne.n	37396 <ProcessAesDrv+0x72>
   3739e:	2f00      	cmp	r7, #0
   373a0:	f040 80e4 	bne.w	3756c <ProcessAesDrv+0x248>
   373a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   373a6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   373a8:	f023 0304 	bic.w	r3, r3, #4
   373ac:	2b03      	cmp	r3, #3
   373ae:	4b93      	ldr	r3, [pc, #588]	; (375fc <ProcessAesDrv+0x2d8>)
   373b0:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   373b4:	d056      	beq.n	37464 <ProcessAesDrv+0x140>
   373b6:	2a01      	cmp	r2, #1
   373b8:	bf0c      	ite	eq
   373ba:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   373be:	f040 0020 	orrne.w	r0, r0, #32
   373c2:	f7fe fde9 	bl	35f98 <CC_HalMaskInterrupt>
   373c6:	4b8d      	ldr	r3, [pc, #564]	; (375fc <ProcessAesDrv+0x2d8>)
   373c8:	2200      	movs	r2, #0
   373ca:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   373ce:	2001      	movs	r0, #1
   373d0:	f7fe feae 	bl	36130 <CC_PalPowerSaveModeSelect>
   373d4:	2800      	cmp	r0, #0
   373d6:	f040 80c5 	bne.w	37564 <ProcessAesDrv+0x240>
   373da:	4887      	ldr	r0, [pc, #540]	; (375f8 <ProcessAesDrv+0x2d4>)
   373dc:	f7fe fe80 	bl	360e0 <CC_PalMutexUnlock>
   373e0:	2800      	cmp	r0, #0
   373e2:	f040 80b8 	bne.w	37556 <ProcessAesDrv+0x232>
   373e6:	4620      	mov	r0, r4
   373e8:	b005      	add	sp, #20
   373ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   373ee:	2b01      	cmp	r3, #1
   373f0:	d1ae      	bne.n	37350 <ProcessAesDrv+0x2c>
   373f2:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   373f6:	d3ab      	bcc.n	37350 <ProcessAesDrv+0x2c>
   373f8:	4c82      	ldr	r4, [pc, #520]	; (37604 <ProcessAesDrv+0x2e0>)
   373fa:	4620      	mov	r0, r4
   373fc:	b005      	add	sp, #20
   373fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37402:	3b06      	subs	r3, #6
   37404:	2b01      	cmp	r3, #1
   37406:	d8c4      	bhi.n	37392 <ProcessAesDrv+0x6e>
   37408:	6bab      	ldr	r3, [r5, #56]	; 0x38
   3740a:	2b01      	cmp	r3, #1
   3740c:	f200 80d2 	bhi.w	375b4 <ProcessAesDrv+0x290>
   37410:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   37412:	2b01      	cmp	r3, #1
   37414:	d834      	bhi.n	37480 <ProcessAesDrv+0x15c>
   37416:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   37418:	2b01      	cmp	r3, #1
   3741a:	f200 8122 	bhi.w	37662 <ProcessAesDrv+0x33e>
   3741e:	4628      	mov	r0, r5
   37420:	f7ff fef6 	bl	37210 <InitAes.part.0>
   37424:	4604      	mov	r4, r0
   37426:	2800      	cmp	r0, #0
   37428:	d1b4      	bne.n	37394 <ProcessAesDrv+0x70>
   3742a:	4628      	mov	r0, r5
   3742c:	f7ff fe9e 	bl	3716c <LoadAesKey>
   37430:	4604      	mov	r4, r0
   37432:	2800      	cmp	r0, #0
   37434:	d1ae      	bne.n	37394 <ProcessAesDrv+0x70>
   37436:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   37438:	2b07      	cmp	r3, #7
   3743a:	d8aa      	bhi.n	37392 <ProcessAesDrv+0x6e>
   3743c:	a201      	add	r2, pc, #4	; (adr r2, 37444 <ProcessAesDrv+0x120>)
   3743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   37442:	bf00      	nop
   37444:	000374a1 	.word	0x000374a1
   37448:	00037485 	.word	0x00037485
   3744c:	00037629 	.word	0x00037629
   37450:	00037485 	.word	0x00037485
   37454:	00037393 	.word	0x00037393
   37458:	00037393 	.word	0x00037393
   3745c:	00037629 	.word	0x00037629
   37460:	00037485 	.word	0x00037485
   37464:	2a01      	cmp	r2, #1
   37466:	bf0c      	ite	eq
   37468:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   3746c:	f040 0010 	orrne.w	r0, r0, #16
   37470:	f7fe fd92 	bl	35f98 <CC_HalMaskInterrupt>
   37474:	e7a7      	b.n	373c6 <ProcessAesDrv+0xa2>
   37476:	4c64      	ldr	r4, [pc, #400]	; (37608 <ProcessAesDrv+0x2e4>)
   37478:	4620      	mov	r0, r4
   3747a:	b005      	add	sp, #20
   3747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37480:	4c62      	ldr	r4, [pc, #392]	; (3760c <ProcessAesDrv+0x2e8>)
   37482:	e787      	b.n	37394 <ProcessAesDrv+0x70>
   37484:	4b5d      	ldr	r3, [pc, #372]	; (375fc <ProcessAesDrv+0x2d8>)
   37486:	682a      	ldr	r2, [r5, #0]
   37488:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   3748c:	686a      	ldr	r2, [r5, #4]
   3748e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   37492:	68aa      	ldr	r2, [r5, #8]
   37494:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   37498:	68ea      	ldr	r2, [r5, #12]
   3749a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   3749e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   374a0:	6832      	ldr	r2, [r6, #0]
   374a2:	f023 0304 	bic.w	r3, r3, #4
   374a6:	2b03      	cmp	r3, #3
   374a8:	d00d      	beq.n	374c6 <ProcessAesDrv+0x1a2>
   374aa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   374ac:	f8d8 1000 	ldr.w	r1, [r8]
   374b0:	2b01      	cmp	r3, #1
   374b2:	4b52      	ldr	r3, [pc, #328]	; (375fc <ProcessAesDrv+0x2d8>)
   374b4:	bf0b      	itete	eq
   374b6:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   374ba:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   374be:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   374c2:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   374c6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   374c8:	2b01      	cmp	r3, #1
   374ca:	4b4c      	ldr	r3, [pc, #304]	; (375fc <ProcessAesDrv+0x2d8>)
   374cc:	bf0b      	itete	eq
   374ce:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   374d2:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   374d6:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   374da:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   374de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   374e0:	f023 0304 	bic.w	r3, r3, #4
   374e4:	2b03      	cmp	r3, #3
   374e6:	d06a      	beq.n	375be <ProcessAesDrv+0x29a>
   374e8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   374ea:	2b01      	cmp	r3, #1
   374ec:	bf0c      	ite	eq
   374ee:	2080      	moveq	r0, #128	; 0x80
   374f0:	2020      	movne	r0, #32
   374f2:	f7fe fd57 	bl	35fa4 <CC_HalWaitInterrupt>
   374f6:	4604      	mov	r4, r0
   374f8:	2800      	cmp	r0, #0
   374fa:	f47f af4b 	bne.w	37394 <ProcessAesDrv+0x70>
   374fe:	4b3f      	ldr	r3, [pc, #252]	; (375fc <ProcessAesDrv+0x2d8>)
   37500:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   37504:	2c00      	cmp	r4, #0
   37506:	d1fb      	bne.n	37500 <ProcessAesDrv+0x1dc>
   37508:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   3750a:	3b01      	subs	r3, #1
   3750c:	2b06      	cmp	r3, #6
   3750e:	d812      	bhi.n	37536 <ProcessAesDrv+0x212>
   37510:	e8df f003 	tbb	[pc, r3]
   37514:	11049904 	.word	0x11049904
   37518:	9911      	.short	0x9911
   3751a:	04          	.byte	0x04
   3751b:	00          	.byte	0x00
   3751c:	4b37      	ldr	r3, [pc, #220]	; (375fc <ProcessAesDrv+0x2d8>)
   3751e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   37522:	602a      	str	r2, [r5, #0]
   37524:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   37528:	606a      	str	r2, [r5, #4]
   3752a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   3752e:	60aa      	str	r2, [r5, #8]
   37530:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   37534:	60eb      	str	r3, [r5, #12]
   37536:	2301      	movs	r3, #1
   37538:	65ab      	str	r3, [r5, #88]	; 0x58
   3753a:	e72b      	b.n	37394 <ProcessAesDrv+0x70>
   3753c:	4834      	ldr	r0, [pc, #208]	; (37610 <ProcessAesDrv+0x2ec>)
   3753e:	f7fd fe4b 	bl	351d8 <CC_PalAbort>
   37542:	2000      	movs	r0, #0
   37544:	f7fe fdf4 	bl	36130 <CC_PalPowerSaveModeSelect>
   37548:	2800      	cmp	r0, #0
   3754a:	f43f af15 	beq.w	37378 <ProcessAesDrv+0x54>
   3754e:	4831      	ldr	r0, [pc, #196]	; (37614 <ProcessAesDrv+0x2f0>)
   37550:	f7fd fe42 	bl	351d8 <CC_PalAbort>
   37554:	e710      	b.n	37378 <ProcessAesDrv+0x54>
   37556:	4830      	ldr	r0, [pc, #192]	; (37618 <ProcessAesDrv+0x2f4>)
   37558:	f7fd fe3e 	bl	351d8 <CC_PalAbort>
   3755c:	4620      	mov	r0, r4
   3755e:	b005      	add	sp, #20
   37560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37564:	482d      	ldr	r0, [pc, #180]	; (3761c <ProcessAesDrv+0x2f8>)
   37566:	f7fd fe37 	bl	351d8 <CC_PalAbort>
   3756a:	e736      	b.n	373da <ProcessAesDrv+0xb6>
   3756c:	2304      	movs	r3, #4
   3756e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   37572:	2120      	movs	r1, #32
   37574:	f105 0010 	add.w	r0, r5, #16
   37578:	f7fe fd92 	bl	360a0 <CC_PalMemSetZeroPlat>
   3757c:	e712      	b.n	373a4 <ProcessAesDrv+0x80>
   3757e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   37580:	6c28      	ldr	r0, [r5, #64]	; 0x40
   37582:	f000 f9b5 	bl	378f0 <kmu_validate_slot_and_size>
   37586:	b998      	cbnz	r0, 375b0 <ProcessAesDrv+0x28c>
   37588:	4f25      	ldr	r7, [pc, #148]	; (37620 <ProcessAesDrv+0x2fc>)
   3758a:	4c1c      	ldr	r4, [pc, #112]	; (375fc <ProcessAesDrv+0x2d8>)
   3758c:	683b      	ldr	r3, [r7, #0]
   3758e:	681b      	ldr	r3, [r3, #0]
   37590:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   37594:	683b      	ldr	r3, [r7, #0]
   37596:	685b      	ldr	r3, [r3, #4]
   37598:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   3759c:	683b      	ldr	r3, [r7, #0]
   3759e:	689b      	ldr	r3, [r3, #8]
   375a0:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   375a4:	683b      	ldr	r3, [r7, #0]
   375a6:	68db      	ldr	r3, [r3, #12]
   375a8:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   375ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
   375ae:	b161      	cbz	r1, 375ca <ProcessAesDrv+0x2a6>
   375b0:	2701      	movs	r7, #1
   375b2:	e6d3      	b.n	3735c <ProcessAesDrv+0x38>
   375b4:	4c1b      	ldr	r4, [pc, #108]	; (37624 <ProcessAesDrv+0x300>)
   375b6:	e6ed      	b.n	37394 <ProcessAesDrv+0x70>
   375b8:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   375bc:	e713      	b.n	373e6 <ProcessAesDrv+0xc2>
   375be:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   375c0:	2b01      	cmp	r3, #1
   375c2:	bf0c      	ite	eq
   375c4:	2040      	moveq	r0, #64	; 0x40
   375c6:	2010      	movne	r0, #16
   375c8:	e793      	b.n	374f2 <ProcessAesDrv+0x1ce>
   375ca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   375cc:	9301      	str	r3, [sp, #4]
   375ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   375d0:	9300      	str	r3, [sp, #0]
   375d2:	f105 0a10 	add.w	sl, r5, #16
   375d6:	f04f 0b10 	mov.w	fp, #16
   375da:	f8cd a008 	str.w	sl, [sp, #8]
   375de:	f8cd b00c 	str.w	fp, [sp, #12]
   375e2:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   375e6:	6c28      	ldr	r0, [r5, #64]	; 0x40
   375e8:	f000 f9a4 	bl	37934 <kmu_derive_cmac>
   375ec:	2800      	cmp	r0, #0
   375ee:	d13a      	bne.n	37666 <ProcessAesDrv+0x342>
   375f0:	2300      	movs	r3, #0
   375f2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   375f6:	e7db      	b.n	375b0 <ProcessAesDrv+0x28c>
   375f8:	20000938 	.word	0x20000938
   375fc:	5002b000 	.word	0x5002b000
   37600:	00f10001 	.word	0x00f10001
   37604:	00f10005 	.word	0x00f10005
   37608:	00f1000b 	.word	0x00f1000b
   3760c:	00f10003 	.word	0x00f10003
   37610:	0003c664 	.word	0x0003c664
   37614:	0003c67c 	.word	0x0003c67c
   37618:	0003c6bc 	.word	0x0003c6bc
   3761c:	0003c69c 	.word	0x0003c69c
   37620:	20000928 	.word	0x20000928
   37624:	00f10002 	.word	0x00f10002
   37628:	4b19      	ldr	r3, [pc, #100]	; (37690 <ProcessAesDrv+0x36c>)
   3762a:	682a      	ldr	r2, [r5, #0]
   3762c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   37630:	686a      	ldr	r2, [r5, #4]
   37632:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   37636:	68aa      	ldr	r2, [r5, #8]
   37638:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   3763c:	68ea      	ldr	r2, [r5, #12]
   3763e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   37642:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   37644:	e72c      	b.n	374a0 <ProcessAesDrv+0x17c>
   37646:	4b12      	ldr	r3, [pc, #72]	; (37690 <ProcessAesDrv+0x36c>)
   37648:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   3764c:	602a      	str	r2, [r5, #0]
   3764e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   37652:	606a      	str	r2, [r5, #4]
   37654:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   37658:	60aa      	str	r2, [r5, #8]
   3765a:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   3765e:	60eb      	str	r3, [r5, #12]
   37660:	e769      	b.n	37536 <ProcessAesDrv+0x212>
   37662:	4c0c      	ldr	r4, [pc, #48]	; (37694 <ProcessAesDrv+0x370>)
   37664:	e696      	b.n	37394 <ProcessAesDrv+0x70>
   37666:	683b      	ldr	r3, [r7, #0]
   37668:	681b      	ldr	r3, [r3, #0]
   3766a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   3766e:	683b      	ldr	r3, [r7, #0]
   37670:	685b      	ldr	r3, [r3, #4]
   37672:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   37676:	683b      	ldr	r3, [r7, #0]
   37678:	689b      	ldr	r3, [r3, #8]
   3767a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   3767e:	683b      	ldr	r3, [r7, #0]
   37680:	68db      	ldr	r3, [r3, #12]
   37682:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   37686:	4659      	mov	r1, fp
   37688:	4650      	mov	r0, sl
   3768a:	f7fe fd09 	bl	360a0 <CC_PalMemSetZeroPlat>
   3768e:	e7af      	b.n	375f0 <ProcessAesDrv+0x2cc>
   37690:	5002b000 	.word	0x5002b000
   37694:	00f10004 	.word	0x00f10004

00037698 <FinishAesDrv>:
   37698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3769c:	b301      	cbz	r1, 376e0 <FinishAesDrv+0x48>
   3769e:	b1fa      	cbz	r2, 376e0 <FinishAesDrv+0x48>
   376a0:	4604      	mov	r4, r0
   376a2:	2800      	cmp	r0, #0
   376a4:	d07c      	beq.n	377a0 <FinishAesDrv+0x108>
   376a6:	461d      	mov	r5, r3
   376a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   376aa:	2b07      	cmp	r3, #7
   376ac:	460e      	mov	r6, r1
   376ae:	d01b      	beq.n	376e8 <FinishAesDrv+0x50>
   376b0:	b95d      	cbnz	r5, 376ca <FinishAesDrv+0x32>
   376b2:	2b03      	cmp	r3, #3
   376b4:	d110      	bne.n	376d8 <FinishAesDrv+0x40>
   376b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   376b8:	b973      	cbnz	r3, 376d8 <FinishAesDrv+0x40>
   376ba:	f100 0364 	add.w	r3, r0, #100	; 0x64
   376be:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   376c2:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   376c6:	600b      	str	r3, [r1, #0]
   376c8:	2510      	movs	r5, #16
   376ca:	462b      	mov	r3, r5
   376cc:	4631      	mov	r1, r6
   376ce:	4620      	mov	r0, r4
   376d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   376d4:	f7ff be26 	b.w	37324 <ProcessAesDrv>
   376d8:	462f      	mov	r7, r5
   376da:	4638      	mov	r0, r7
   376dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   376e0:	4f77      	ldr	r7, [pc, #476]	; (378c0 <FinishAesDrv+0x228>)
   376e2:	4638      	mov	r0, r7
   376e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   376e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   376ea:	2b00      	cmp	r3, #0
   376ec:	d15b      	bne.n	377a6 <FinishAesDrv+0x10e>
   376ee:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   376f2:	d25d      	bcs.n	377b0 <FinishAesDrv+0x118>
   376f4:	b915      	cbnz	r5, 376fc <FinishAesDrv+0x64>
   376f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   376f8:	2b00      	cmp	r3, #0
   376fa:	d159      	bne.n	377b0 <FinishAesDrv+0x118>
   376fc:	4871      	ldr	r0, [pc, #452]	; (378c4 <FinishAesDrv+0x22c>)
   376fe:	f04f 31ff 	mov.w	r1, #4294967295
   37702:	f7fe fce5 	bl	360d0 <CC_PalMutexLock>
   37706:	2800      	cmp	r0, #0
   37708:	f040 80b8 	bne.w	3787c <FinishAesDrv+0x1e4>
   3770c:	2000      	movs	r0, #0
   3770e:	f7fe fd0f 	bl	36130 <CC_PalPowerSaveModeSelect>
   37712:	2800      	cmp	r0, #0
   37714:	f040 80ae 	bne.w	37874 <FinishAesDrv+0x1dc>
   37718:	4a6b      	ldr	r2, [pc, #428]	; (378c8 <FinishAesDrv+0x230>)
   3771a:	2301      	movs	r3, #1
   3771c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   37720:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   37724:	2b00      	cmp	r3, #0
   37726:	d1fb      	bne.n	37720 <FinishAesDrv+0x88>
   37728:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3772a:	2b03      	cmp	r3, #3
   3772c:	dd20      	ble.n	37770 <FinishAesDrv+0xd8>
   3772e:	3b06      	subs	r3, #6
   37730:	2b01      	cmp	r3, #1
   37732:	d81f      	bhi.n	37774 <FinishAesDrv+0xdc>
   37734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   37736:	2b01      	cmp	r3, #1
   37738:	d83c      	bhi.n	377b4 <FinishAesDrv+0x11c>
   3773a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   3773c:	2b01      	cmp	r3, #1
   3773e:	f200 80a5 	bhi.w	3788c <FinishAesDrv+0x1f4>
   37742:	6e23      	ldr	r3, [r4, #96]	; 0x60
   37744:	2b01      	cmp	r3, #1
   37746:	f200 80a3 	bhi.w	37890 <FinishAesDrv+0x1f8>
   3774a:	4620      	mov	r0, r4
   3774c:	f7ff fd60 	bl	37210 <InitAes.part.0>
   37750:	4607      	mov	r7, r0
   37752:	b980      	cbnz	r0, 37776 <FinishAesDrv+0xde>
   37754:	4620      	mov	r0, r4
   37756:	f7ff fd09 	bl	3716c <LoadAesKey>
   3775a:	4607      	mov	r7, r0
   3775c:	b958      	cbnz	r0, 37776 <FinishAesDrv+0xde>
   3775e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   37760:	2b07      	cmp	r3, #7
   37762:	d807      	bhi.n	37774 <FinishAesDrv+0xdc>
   37764:	e8df f003 	tbb	[pc, r3]
   37768:	285c2835 	.word	0x285c2835
   3776c:	285c0606 	.word	0x285c0606
   37770:	2b00      	cmp	r3, #0
   37772:	dadf      	bge.n	37734 <FinishAesDrv+0x9c>
   37774:	4f55      	ldr	r7, [pc, #340]	; (378cc <FinishAesDrv+0x234>)
   37776:	4a54      	ldr	r2, [pc, #336]	; (378c8 <FinishAesDrv+0x230>)
   37778:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   3777c:	2b00      	cmp	r3, #0
   3777e:	d1fb      	bne.n	37778 <FinishAesDrv+0xe0>
   37780:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   37784:	2001      	movs	r0, #1
   37786:	f7fe fcd3 	bl	36130 <CC_PalPowerSaveModeSelect>
   3778a:	2800      	cmp	r0, #0
   3778c:	d17a      	bne.n	37884 <FinishAesDrv+0x1ec>
   3778e:	484d      	ldr	r0, [pc, #308]	; (378c4 <FinishAesDrv+0x22c>)
   37790:	f7fe fca6 	bl	360e0 <CC_PalMutexUnlock>
   37794:	2800      	cmp	r0, #0
   37796:	d0a0      	beq.n	376da <FinishAesDrv+0x42>
   37798:	484d      	ldr	r0, [pc, #308]	; (378d0 <FinishAesDrv+0x238>)
   3779a:	f7fd fd1d 	bl	351d8 <CC_PalAbort>
   3779e:	e79c      	b.n	376da <FinishAesDrv+0x42>
   377a0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   377a4:	e799      	b.n	376da <FinishAesDrv+0x42>
   377a6:	2b01      	cmp	r3, #1
   377a8:	d1a4      	bne.n	376f4 <FinishAesDrv+0x5c>
   377aa:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   377ae:	d3a1      	bcc.n	376f4 <FinishAesDrv+0x5c>
   377b0:	4f48      	ldr	r7, [pc, #288]	; (378d4 <FinishAesDrv+0x23c>)
   377b2:	e792      	b.n	376da <FinishAesDrv+0x42>
   377b4:	4f48      	ldr	r7, [pc, #288]	; (378d8 <FinishAesDrv+0x240>)
   377b6:	e7de      	b.n	37776 <FinishAesDrv+0xde>
   377b8:	4b43      	ldr	r3, [pc, #268]	; (378c8 <FinishAesDrv+0x230>)
   377ba:	6822      	ldr	r2, [r4, #0]
   377bc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   377c0:	6862      	ldr	r2, [r4, #4]
   377c2:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   377c6:	68a2      	ldr	r2, [r4, #8]
   377c8:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   377cc:	68e2      	ldr	r2, [r4, #12]
   377ce:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   377d2:	4b3d      	ldr	r3, [pc, #244]	; (378c8 <FinishAesDrv+0x230>)
   377d4:	2201      	movs	r2, #1
   377d6:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   377da:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   377de:	2d00      	cmp	r5, #0
   377e0:	d158      	bne.n	37894 <FinishAesDrv+0x1fc>
   377e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
   377e4:	b909      	cbnz	r1, 377ea <FinishAesDrv+0x152>
   377e6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   377ea:	4b37      	ldr	r3, [pc, #220]	; (378c8 <FinishAesDrv+0x230>)
   377ec:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   377f0:	2f00      	cmp	r7, #0
   377f2:	d1fb      	bne.n	377ec <FinishAesDrv+0x154>
   377f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   377f6:	3b01      	subs	r3, #1
   377f8:	2b06      	cmp	r3, #6
   377fa:	d8bc      	bhi.n	37776 <FinishAesDrv+0xde>
   377fc:	a201      	add	r2, pc, #4	; (adr r2, 37804 <FinishAesDrv+0x16c>)
   377fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   37802:	bf00      	nop
   37804:	0003783d 	.word	0x0003783d
   37808:	00037859 	.word	0x00037859
   3780c:	0003783d 	.word	0x0003783d
   37810:	00037777 	.word	0x00037777
   37814:	00037777 	.word	0x00037777
   37818:	00037859 	.word	0x00037859
   3781c:	0003783d 	.word	0x0003783d
   37820:	4b29      	ldr	r3, [pc, #164]	; (378c8 <FinishAesDrv+0x230>)
   37822:	6822      	ldr	r2, [r4, #0]
   37824:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   37828:	6862      	ldr	r2, [r4, #4]
   3782a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   3782e:	68a2      	ldr	r2, [r4, #8]
   37830:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   37834:	68e2      	ldr	r2, [r4, #12]
   37836:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   3783a:	e7ca      	b.n	377d2 <FinishAesDrv+0x13a>
   3783c:	4b22      	ldr	r3, [pc, #136]	; (378c8 <FinishAesDrv+0x230>)
   3783e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   37842:	6022      	str	r2, [r4, #0]
   37844:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   37848:	6062      	str	r2, [r4, #4]
   3784a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   3784e:	60a2      	str	r2, [r4, #8]
   37850:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   37854:	60e3      	str	r3, [r4, #12]
   37856:	e78e      	b.n	37776 <FinishAesDrv+0xde>
   37858:	4b1b      	ldr	r3, [pc, #108]	; (378c8 <FinishAesDrv+0x230>)
   3785a:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   3785e:	6022      	str	r2, [r4, #0]
   37860:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   37864:	6062      	str	r2, [r4, #4]
   37866:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   3786a:	60a2      	str	r2, [r4, #8]
   3786c:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   37870:	60e3      	str	r3, [r4, #12]
   37872:	e780      	b.n	37776 <FinishAesDrv+0xde>
   37874:	4819      	ldr	r0, [pc, #100]	; (378dc <FinishAesDrv+0x244>)
   37876:	f7fd fcaf 	bl	351d8 <CC_PalAbort>
   3787a:	e74d      	b.n	37718 <FinishAesDrv+0x80>
   3787c:	4818      	ldr	r0, [pc, #96]	; (378e0 <FinishAesDrv+0x248>)
   3787e:	f7fd fcab 	bl	351d8 <CC_PalAbort>
   37882:	e743      	b.n	3770c <FinishAesDrv+0x74>
   37884:	4817      	ldr	r0, [pc, #92]	; (378e4 <FinishAesDrv+0x24c>)
   37886:	f7fd fca7 	bl	351d8 <CC_PalAbort>
   3788a:	e780      	b.n	3778e <FinishAesDrv+0xf6>
   3788c:	4f16      	ldr	r7, [pc, #88]	; (378e8 <FinishAesDrv+0x250>)
   3788e:	e772      	b.n	37776 <FinishAesDrv+0xde>
   37890:	4f16      	ldr	r7, [pc, #88]	; (378ec <FinishAesDrv+0x254>)
   37892:	e770      	b.n	37776 <FinishAesDrv+0xde>
   37894:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   37896:	6832      	ldr	r2, [r6, #0]
   37898:	2901      	cmp	r1, #1
   3789a:	d00a      	beq.n	378b2 <FinishAesDrv+0x21a>
   3789c:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   378a0:	2010      	movs	r0, #16
   378a2:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   378a6:	f7fe fb7d 	bl	35fa4 <CC_HalWaitInterrupt>
   378aa:	4607      	mov	r7, r0
   378ac:	2800      	cmp	r0, #0
   378ae:	d09c      	beq.n	377ea <FinishAesDrv+0x152>
   378b0:	e761      	b.n	37776 <FinishAesDrv+0xde>
   378b2:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   378b6:	2040      	movs	r0, #64	; 0x40
   378b8:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   378bc:	e7f3      	b.n	378a6 <FinishAesDrv+0x20e>
   378be:	bf00      	nop
   378c0:	00f1000b 	.word	0x00f1000b
   378c4:	20000938 	.word	0x20000938
   378c8:	5002b000 	.word	0x5002b000
   378cc:	00f10001 	.word	0x00f10001
   378d0:	0003c6bc 	.word	0x0003c6bc
   378d4:	00f10005 	.word	0x00f10005
   378d8:	00f10002 	.word	0x00f10002
   378dc:	0003c67c 	.word	0x0003c67c
   378e0:	0003c664 	.word	0x0003c664
   378e4:	0003c69c 	.word	0x0003c69c
   378e8:	00f10003 	.word	0x00f10003
   378ec:	00f10004 	.word	0x00f10004

000378f0 <kmu_validate_slot_and_size>:
   378f0:	b921      	cbnz	r1, 378fc <kmu_validate_slot_and_size+0xc>
   378f2:	4b03      	ldr	r3, [pc, #12]	; (37900 <kmu_validate_slot_and_size+0x10>)
   378f4:	2800      	cmp	r0, #0
   378f6:	bf18      	it	ne
   378f8:	4618      	movne	r0, r3
   378fa:	4770      	bx	lr
   378fc:	4801      	ldr	r0, [pc, #4]	; (37904 <kmu_validate_slot_and_size+0x14>)
   378fe:	4770      	bx	lr
   37900:	00f70001 	.word	0x00f70001
   37904:	00f70003 	.word	0x00f70003

00037908 <kmu_validate_kdr_slot_and_size>:
   37908:	b921      	cbnz	r1, 37914 <kmu_validate_kdr_slot_and_size+0xc>
   3790a:	4b03      	ldr	r3, [pc, #12]	; (37918 <kmu_validate_kdr_slot_and_size+0x10>)
   3790c:	2800      	cmp	r0, #0
   3790e:	bf18      	it	ne
   37910:	4618      	movne	r0, r3
   37912:	4770      	bx	lr
   37914:	4801      	ldr	r0, [pc, #4]	; (3791c <kmu_validate_kdr_slot_and_size+0x14>)
   37916:	4770      	bx	lr
   37918:	00f70001 	.word	0x00f70001
   3791c:	00f70003 	.word	0x00f70003

00037920 <kmu_use_kdr_key>:
   37920:	4b03      	ldr	r3, [pc, #12]	; (37930 <kmu_use_kdr_key+0x10>)
   37922:	2000      	movs	r0, #0
   37924:	2201      	movs	r2, #1
   37926:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   3792a:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   3792e:	4770      	bx	lr
   37930:	5002b000 	.word	0x5002b000

00037934 <kmu_derive_cmac>:
   37934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37938:	b0cc      	sub	sp, #304	; 0x130
   3793a:	2400      	movs	r4, #0
   3793c:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   3793e:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   37942:	4682      	mov	sl, r0
   37944:	4689      	mov	r9, r1
   37946:	4616      	mov	r6, r2
   37948:	4621      	mov	r1, r4
   3794a:	2274      	movs	r2, #116	; 0x74
   3794c:	a80e      	add	r0, sp, #56	; 0x38
   3794e:	461f      	mov	r7, r3
   37950:	f000 ff3e 	bl	387d0 <memset>
   37954:	2280      	movs	r2, #128	; 0x80
   37956:	4621      	mov	r1, r4
   37958:	a82c      	add	r0, sp, #176	; 0xb0
   3795a:	942b      	str	r4, [sp, #172]	; 0xac
   3795c:	f000 ff38 	bl	387d0 <memset>
   37960:	2384      	movs	r3, #132	; 0x84
   37962:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   37966:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   3796a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   3796e:	9305      	str	r3, [sp, #20]
   37970:	d863      	bhi.n	37a3a <kmu_derive_cmac+0x106>
   37972:	f7ff fcbf 	bl	372f4 <write_invalid_key>
   37976:	ab05      	add	r3, sp, #20
   37978:	4630      	mov	r0, r6
   3797a:	ae2b      	add	r6, sp, #172	; 0xac
   3797c:	9301      	str	r3, [sp, #4]
   3797e:	9502      	str	r5, [sp, #8]
   37980:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   37984:	4639      	mov	r1, r7
   37986:	9600      	str	r6, [sp, #0]
   37988:	f000 f862 	bl	37a50 <UtilCmacBuildDataForDerivation>
   3798c:	2800      	cmp	r0, #0
   3798e:	d14f      	bne.n	37a30 <kmu_derive_cmac+0xfc>
   37990:	2303      	movs	r3, #3
   37992:	f88d 3013 	strb.w	r3, [sp, #19]
   37996:	f89d 3013 	ldrb.w	r3, [sp, #19]
   3799a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   3799e:	2307      	movs	r3, #7
   379a0:	2200      	movs	r2, #0
   379a2:	901c      	str	r0, [sp, #112]	; 0x70
   379a4:	2110      	movs	r1, #16
   379a6:	a80e      	add	r0, sp, #56	; 0x38
   379a8:	931b      	str	r3, [sp, #108]	; 0x6c
   379aa:	2401      	movs	r4, #1
   379ac:	2301      	movs	r3, #1
   379ae:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   379b2:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   379b6:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   379ba:	9426      	str	r4, [sp, #152]	; 0x98
   379bc:	f10d 0920 	add.w	r9, sp, #32
   379c0:	f7fe fb6e 	bl	360a0 <CC_PalMemSetZeroPlat>
   379c4:	2210      	movs	r2, #16
   379c6:	9200      	str	r2, [sp, #0]
   379c8:	9905      	ldr	r1, [sp, #20]
   379ca:	f8cd 9004 	str.w	r9, [sp, #4]
   379ce:	ab0a      	add	r3, sp, #40	; 0x28
   379d0:	4630      	mov	r0, r6
   379d2:	aa06      	add	r2, sp, #24
   379d4:	f7ff fa1e 	bl	36e14 <SetDataBuffersInfo>
   379d8:	4607      	mov	r7, r0
   379da:	b170      	cbz	r0, 379fa <kmu_derive_cmac+0xc6>
   379dc:	e01d      	b.n	37a1a <kmu_derive_cmac+0xe6>
   379de:	a90e      	add	r1, sp, #56	; 0x38
   379e0:	eb08 0007 	add.w	r0, r8, r7
   379e4:	f7fe fb58 	bl	36098 <CC_PalMemCopyPlat>
   379e8:	2110      	movs	r1, #16
   379ea:	a80e      	add	r0, sp, #56	; 0x38
   379ec:	f7fe fb58 	bl	360a0 <CC_PalMemSetZeroPlat>
   379f0:	3401      	adds	r4, #1
   379f2:	1bad      	subs	r5, r5, r6
   379f4:	4437      	add	r7, r6
   379f6:	b2e4      	uxtb	r4, r4
   379f8:	d024      	beq.n	37a44 <kmu_derive_cmac+0x110>
   379fa:	2d10      	cmp	r5, #16
   379fc:	464a      	mov	r2, r9
   379fe:	9b05      	ldr	r3, [sp, #20]
   37a00:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   37a04:	a906      	add	r1, sp, #24
   37a06:	a80e      	add	r0, sp, #56	; 0x38
   37a08:	462e      	mov	r6, r5
   37a0a:	bf28      	it	cs
   37a0c:	2610      	movcs	r6, #16
   37a0e:	f7ff fe43 	bl	37698 <FinishAesDrv>
   37a12:	4632      	mov	r2, r6
   37a14:	2800      	cmp	r0, #0
   37a16:	d0e2      	beq.n	379de <kmu_derive_cmac+0xaa>
   37a18:	4607      	mov	r7, r0
   37a1a:	a80e      	add	r0, sp, #56	; 0x38
   37a1c:	2274      	movs	r2, #116	; 0x74
   37a1e:	2100      	movs	r1, #0
   37a20:	f7fe fb3c 	bl	3609c <CC_PalMemSetPlat>
   37a24:	f7ff fc66 	bl	372f4 <write_invalid_key>
   37a28:	4638      	mov	r0, r7
   37a2a:	b04c      	add	sp, #304	; 0x130
   37a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37a30:	4f05      	ldr	r7, [pc, #20]	; (37a48 <kmu_derive_cmac+0x114>)
   37a32:	4638      	mov	r0, r7
   37a34:	b04c      	add	sp, #304	; 0x130
   37a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37a3a:	4f04      	ldr	r7, [pc, #16]	; (37a4c <kmu_derive_cmac+0x118>)
   37a3c:	4638      	mov	r0, r7
   37a3e:	b04c      	add	sp, #304	; 0x130
   37a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37a44:	462f      	mov	r7, r5
   37a46:	e7e8      	b.n	37a1a <kmu_derive_cmac+0xe6>
   37a48:	00f1000e 	.word	0x00f1000e
   37a4c:	00f1000f 	.word	0x00f1000f

00037a50 <UtilCmacBuildDataForDerivation>:
   37a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37a54:	b082      	sub	sp, #8
   37a56:	461e      	mov	r6, r3
   37a58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   37a5a:	2300      	movs	r3, #0
   37a5c:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   37a60:	9301      	str	r3, [sp, #4]
   37a62:	d83e      	bhi.n	37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a64:	00e4      	lsls	r4, r4, #3
   37a66:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   37a6a:	4617      	mov	r7, r2
   37a6c:	f101 32ff 	add.w	r2, r1, #4294967295
   37a70:	bf34      	ite	cc
   37a72:	2303      	movcc	r3, #3
   37a74:	2304      	movcs	r3, #4
   37a76:	2a3f      	cmp	r2, #63	; 0x3f
   37a78:	460d      	mov	r5, r1
   37a7a:	9300      	str	r3, [sp, #0]
   37a7c:	d831      	bhi.n	37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a7e:	b380      	cbz	r0, 37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a80:	b116      	cbz	r6, 37a88 <UtilCmacBuildDataForDerivation+0x38>
   37a82:	b377      	cbz	r7, 37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a84:	2e40      	cmp	r6, #64	; 0x40
   37a86:	d82c      	bhi.n	37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a88:	9a08      	ldr	r2, [sp, #32]
   37a8a:	b352      	cbz	r2, 37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   37a8e:	6811      	ldr	r1, [r2, #0]
   37a90:	b339      	cbz	r1, 37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a92:	19aa      	adds	r2, r5, r6
   37a94:	4413      	add	r3, r2
   37a96:	4299      	cmp	r1, r3
   37a98:	d323      	bcc.n	37ae2 <UtilCmacBuildDataForDerivation+0x92>
   37a9a:	9b08      	ldr	r3, [sp, #32]
   37a9c:	4601      	mov	r1, r0
   37a9e:	462a      	mov	r2, r5
   37aa0:	1c58      	adds	r0, r3, #1
   37aa2:	f7fe faf9 	bl	36098 <CC_PalMemCopyPlat>
   37aa6:	9b08      	ldr	r3, [sp, #32]
   37aa8:	f105 0802 	add.w	r8, r5, #2
   37aac:	441d      	add	r5, r3
   37aae:	2300      	movs	r3, #0
   37ab0:	706b      	strb	r3, [r5, #1]
   37ab2:	bb0e      	cbnz	r6, 37af8 <UtilCmacBuildDataForDerivation+0xa8>
   37ab4:	9b08      	ldr	r3, [sp, #32]
   37ab6:	9400      	str	r4, [sp, #0]
   37ab8:	2cff      	cmp	r4, #255	; 0xff
   37aba:	eb03 0008 	add.w	r0, r3, r8
   37abe:	d914      	bls.n	37aea <UtilCmacBuildDataForDerivation+0x9a>
   37ac0:	0223      	lsls	r3, r4, #8
   37ac2:	b29b      	uxth	r3, r3
   37ac4:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   37ac8:	2202      	movs	r2, #2
   37aca:	a901      	add	r1, sp, #4
   37acc:	9401      	str	r4, [sp, #4]
   37ace:	f7fe fae3 	bl	36098 <CC_PalMemCopyPlat>
   37ad2:	f108 0302 	add.w	r3, r8, #2
   37ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   37ad8:	2000      	movs	r0, #0
   37ada:	6013      	str	r3, [r2, #0]
   37adc:	b002      	add	sp, #8
   37ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37ae2:	480a      	ldr	r0, [pc, #40]	; (37b0c <UtilCmacBuildDataForDerivation+0xbc>)
   37ae4:	b002      	add	sp, #8
   37ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37aea:	2201      	movs	r2, #1
   37aec:	4669      	mov	r1, sp
   37aee:	f7fe fad3 	bl	36098 <CC_PalMemCopyPlat>
   37af2:	f108 0301 	add.w	r3, r8, #1
   37af6:	e7ee      	b.n	37ad6 <UtilCmacBuildDataForDerivation+0x86>
   37af8:	9b08      	ldr	r3, [sp, #32]
   37afa:	4632      	mov	r2, r6
   37afc:	eb03 0008 	add.w	r0, r3, r8
   37b00:	4639      	mov	r1, r7
   37b02:	f7fe fac9 	bl	36098 <CC_PalMemCopyPlat>
   37b06:	44b0      	add	r8, r6
   37b08:	e7d4      	b.n	37ab4 <UtilCmacBuildDataForDerivation+0x64>
   37b0a:	bf00      	nop
   37b0c:	80000006 	.word	0x80000006

00037b10 <CC_PalDataBufferAttrGet>:
   37b10:	2000      	movs	r0, #0
   37b12:	7018      	strb	r0, [r3, #0]
   37b14:	4770      	bx	lr
   37b16:	bf00      	nop

00037b18 <nrf_gpio_pin_set>:
{
   37b18:	b507      	push	{r0, r1, r2, lr}
   37b1a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   37b1c:	a801      	add	r0, sp, #4
   37b1e:	f7eb fd3d 	bl	2359c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   37b22:	9a01      	ldr	r2, [sp, #4]
   37b24:	2301      	movs	r3, #1
   37b26:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   37b28:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   37b2c:	b003      	add	sp, #12
   37b2e:	f85d fb04 	ldr.w	pc, [sp], #4

00037b32 <nrf_gpio_cfg_output>:
{
   37b32:	b507      	push	{r0, r1, r2, lr}
   37b34:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   37b36:	a801      	add	r0, sp, #4
   37b38:	f7eb fd30 	bl	2359c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   37b3c:	9b01      	ldr	r3, [sp, #4]
   37b3e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   37b42:	2203      	movs	r2, #3
   37b44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   37b48:	b003      	add	sp, #12
   37b4a:	f85d fb04 	ldr.w	pc, [sp], #4

00037b4e <nrf_gpio_pin_clear>:
{
   37b4e:	b507      	push	{r0, r1, r2, lr}
   37b50:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   37b52:	a801      	add	r0, sp, #4
   37b54:	f7eb fd22 	bl	2359c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   37b58:	9a01      	ldr	r2, [sp, #4]
   37b5a:	2301      	movs	r3, #1
   37b5c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   37b5e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   37b62:	b003      	add	sp, #12
   37b64:	f85d fb04 	ldr.w	pc, [sp], #4

00037b68 <nrf_gpio_cfg_sense_set>:
{
   37b68:	b513      	push	{r0, r1, r4, lr}
   37b6a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   37b6c:	a801      	add	r0, sp, #4
{
   37b6e:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   37b70:	f7eb fd14 	bl	2359c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   37b74:	9b01      	ldr	r3, [sp, #4]
   37b76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   37b7a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   37b7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   37b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   37b86:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   37b8a:	b002      	add	sp, #8
   37b8c:	bd10      	pop	{r4, pc}

00037b8e <arch_printk_char_out>:
}
   37b8e:	2000      	movs	r0, #0
   37b90:	4770      	bx	lr

00037b92 <str_out>:
{
   37b92:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   37b94:	688a      	ldr	r2, [r1, #8]
   37b96:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   37b98:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   37b9a:	b114      	cbz	r4, 37ba2 <str_out+0x10>
   37b9c:	684b      	ldr	r3, [r1, #4]
   37b9e:	4293      	cmp	r3, r2
   37ba0:	dc01      	bgt.n	37ba6 <str_out+0x14>
		ctx->count++;
   37ba2:	608d      	str	r5, [r1, #8]
}
   37ba4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   37ba6:	3b01      	subs	r3, #1
   37ba8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   37baa:	bf08      	it	eq
   37bac:	2200      	moveq	r2, #0
   37bae:	608d      	str	r5, [r1, #8]
   37bb0:	bf0c      	ite	eq
   37bb2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   37bb4:	54a0      	strbne	r0, [r4, r2]
   37bb6:	e7f5      	b.n	37ba4 <str_out+0x12>

00037bb8 <printk>:
{
   37bb8:	b40f      	push	{r0, r1, r2, r3}
   37bba:	b507      	push	{r0, r1, r2, lr}
   37bbc:	a904      	add	r1, sp, #16
   37bbe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   37bc2:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   37bc4:	f7eb ff90 	bl	23ae8 <vprintk>
}
   37bc8:	b003      	add	sp, #12
   37bca:	f85d eb04 	ldr.w	lr, [sp], #4
   37bce:	b004      	add	sp, #16
   37bd0:	4770      	bx	lr

00037bd2 <snprintk>:
{
   37bd2:	b40c      	push	{r2, r3}
   37bd4:	b507      	push	{r0, r1, r2, lr}
   37bd6:	ab04      	add	r3, sp, #16
   37bd8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   37bdc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   37bde:	f7eb ff91 	bl	23b04 <vsnprintk>
}
   37be2:	b003      	add	sp, #12
   37be4:	f85d eb04 	ldr.w	lr, [sp], #4
   37be8:	b002      	add	sp, #8
   37bea:	4770      	bx	lr

00037bec <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   37bec:	4604      	mov	r4, r0
   37bee:	b508      	push	{r3, lr}
   37bf0:	4608      	mov	r0, r1
   37bf2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   37bf4:	461a      	mov	r2, r3
   37bf6:	47a0      	blx	r4
	return z_impl_z_current_get();
   37bf8:	f7fc f81e 	bl	33c38 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   37bfc:	f7ed fff4 	bl	25be8 <z_impl_k_thread_abort>

00037c00 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   37c00:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   37c04:	8840      	ldrh	r0, [r0, #2]
}
   37c06:	0840      	lsrs	r0, r0, #1
   37c08:	4770      	bx	lr

00037c0a <free_list_add>:
{
   37c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37c0c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   37c0e:	f7ff fff7 	bl	37c00 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   37c12:	fab0 f080 	clz	r0, r0
   37c16:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   37c1a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   37c1e:	00ca      	lsls	r2, r1, #3
   37c20:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   37c24:	1d17      	adds	r7, r2, #4
{
   37c26:	460c      	mov	r4, r1
   37c28:	3206      	adds	r2, #6
   37c2a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   37c2c:	b956      	cbnz	r6, 37c44 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   37c2e:	2101      	movs	r1, #1
   37c30:	fa01 f000 	lsl.w	r0, r1, r0
   37c34:	68d9      	ldr	r1, [r3, #12]
   37c36:	4301      	orrs	r1, r0
   37c38:	60d9      	str	r1, [r3, #12]
		b->next = c;
   37c3a:	f8cc 4010 	str.w	r4, [ip, #16]
   37c3e:	53dd      	strh	r5, [r3, r7]
   37c40:	529d      	strh	r5, [r3, r2]
}
   37c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   37c44:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   37c46:	3104      	adds	r1, #4
   37c48:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   37c4a:	53d8      	strh	r0, [r3, r7]
   37c4c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   37c50:	529e      	strh	r6, [r3, r2]
   37c52:	80c5      	strh	r5, [r0, #6]
   37c54:	525d      	strh	r5, [r3, r1]
   37c56:	e7f4      	b.n	37c42 <free_list_add+0x38>

00037c58 <free_list_remove_bidx>:
{
   37c58:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   37c5a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   37c5e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   37c60:	4299      	cmp	r1, r3
   37c62:	f102 0104 	add.w	r1, r2, #4
   37c66:	d10a      	bne.n	37c7e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   37c68:	2301      	movs	r3, #1
   37c6a:	fa03 f202 	lsl.w	r2, r3, r2
   37c6e:	68c3      	ldr	r3, [r0, #12]
   37c70:	ea23 0302 	bic.w	r3, r3, r2
   37c74:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   37c76:	2300      	movs	r3, #0
   37c78:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   37c7c:	bd10      	pop	{r4, pc}
   37c7e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   37c80:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   37c84:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   37c88:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   37c8c:	80cb      	strh	r3, [r1, #6]
   37c8e:	8082      	strh	r2, [r0, #4]
}
   37c90:	e7f4      	b.n	37c7c <free_list_remove_bidx+0x24>

00037c92 <free_list_remove>:
{
   37c92:	b508      	push	{r3, lr}
   37c94:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   37c96:	f7ff ffb3 	bl	37c00 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   37c9a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   37c9e:	f1c2 021f 	rsb	r2, r2, #31
   37ca2:	4618      	mov	r0, r3
}
   37ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   37ca8:	f7ff bfd6 	b.w	37c58 <free_list_remove_bidx>

00037cac <alloc_chunk>:
{
   37cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   37cb0:	fab1 f581 	clz	r5, r1
   37cb4:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   37cb8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   37cbc:	4603      	mov	r3, r0
	if (b->next) {
   37cbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   37cc2:	460e      	mov	r6, r1
	if (b->next) {
   37cc4:	b1c2      	cbz	r2, 37cf8 <alloc_chunk+0x4c>
   37cc6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   37cc8:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   37ccc:	4618      	mov	r0, r3
   37cce:	4621      	mov	r1, r4
   37cd0:	f7ff ff96 	bl	37c00 <chunk_size>
   37cd4:	42b0      	cmp	r0, r6
   37cd6:	d306      	bcc.n	37ce6 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   37cd8:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   37cda:	4618      	mov	r0, r3
   37cdc:	f7ff ffbc 	bl	37c58 <free_list_remove_bidx>
}
   37ce0:	4620      	mov	r0, r4
   37ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   37ce6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   37cea:	3f01      	subs	r7, #1
   37cec:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   37cee:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   37cf2:	d001      	beq.n	37cf8 <alloc_chunk+0x4c>
   37cf4:	4282      	cmp	r2, r0
   37cf6:	d1e7      	bne.n	37cc8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   37cf8:	f1c5 0220 	rsb	r2, r5, #32
   37cfc:	f04f 34ff 	mov.w	r4, #4294967295
   37d00:	4094      	lsls	r4, r2
   37d02:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   37d04:	4014      	ands	r4, r2
   37d06:	d0eb      	beq.n	37ce0 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   37d08:	fa94 f2a4 	rbit	r2, r4
   37d0c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   37d10:	1d11      	adds	r1, r2, #4
   37d12:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   37d16:	4621      	mov	r1, r4
   37d18:	e7df      	b.n	37cda <alloc_chunk+0x2e>

00037d1a <merge_chunks>:
{
   37d1a:	b538      	push	{r3, r4, r5, lr}
   37d1c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   37d1e:	f7ff ff6f 	bl	37c00 <chunk_size>
{
   37d22:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   37d24:	4604      	mov	r4, r0
   37d26:	4611      	mov	r1, r2
   37d28:	4618      	mov	r0, r3
   37d2a:	f7ff ff69 	bl	37c00 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   37d2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   37d32:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   37d34:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   37d36:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   37d38:	4618      	mov	r0, r3
   37d3a:	f7ff ff61 	bl	37c00 <chunk_size>
	void *cmem = &buf[c];
   37d3e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   37d40:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   37d44:	bd38      	pop	{r3, r4, r5, pc}

00037d46 <split_chunks>:
{
   37d46:	b538      	push	{r3, r4, r5, lr}
   37d48:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   37d4a:	f7ff ff59 	bl	37c00 <chunk_size>
{
   37d4e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   37d50:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   37d52:	1a51      	subs	r1, r2, r1
   37d54:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   37d58:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   37d5a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   37d5c:	8060      	strh	r0, [r4, #2]
   37d5e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   37d62:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   37d64:	8044      	strh	r4, [r0, #2]
   37d66:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   37d6a:	4618      	mov	r0, r3
   37d6c:	4611      	mov	r1, r2
   37d6e:	f7ff ff47 	bl	37c00 <chunk_size>
	void *cmem = &buf[c];
   37d72:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   37d74:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   37d78:	bd38      	pop	{r3, r4, r5, pc}

00037d7a <free_chunk>:
{
   37d7a:	b538      	push	{r3, r4, r5, lr}
   37d7c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   37d7e:	f7ff ff3f 	bl	37c00 <chunk_size>
   37d82:	460c      	mov	r4, r1
   37d84:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   37d86:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   37d8a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   37d8c:	07da      	lsls	r2, r3, #31
   37d8e:	d40a      	bmi.n	37da6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   37d90:	4628      	mov	r0, r5
   37d92:	f7ff ff7e 	bl	37c92 <free_list_remove>
	return c + chunk_size(h, c);
   37d96:	4621      	mov	r1, r4
   37d98:	4628      	mov	r0, r5
   37d9a:	f7ff ff31 	bl	37c00 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   37d9e:	1822      	adds	r2, r4, r0
   37da0:	4628      	mov	r0, r5
   37da2:	f7ff ffba 	bl	37d1a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   37da6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   37daa:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   37dac:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   37db0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   37db2:	07db      	lsls	r3, r3, #31
   37db4:	d40c      	bmi.n	37dd0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   37db6:	4628      	mov	r0, r5
   37db8:	f7ff ff6b 	bl	37c92 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   37dbc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   37dc0:	4622      	mov	r2, r4
   37dc2:	1a61      	subs	r1, r4, r1
   37dc4:	4628      	mov	r0, r5
   37dc6:	f7ff ffa8 	bl	37d1a <merge_chunks>
   37dca:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   37dce:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   37dd0:	4621      	mov	r1, r4
   37dd2:	4628      	mov	r0, r5
}
   37dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   37dd8:	f7ff bf17 	b.w	37c0a <free_list_add>

00037ddc <sys_heap_alloc>:
{
   37ddc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   37dde:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   37de0:	b909      	cbnz	r1, 37de6 <sys_heap_alloc+0xa>
		return NULL;
   37de2:	2000      	movs	r0, #0
}
   37de4:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   37de6:	68ab      	ldr	r3, [r5, #8]
   37de8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   37dec:	d9f9      	bls.n	37de2 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   37dee:	310b      	adds	r1, #11
   37df0:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   37df2:	4621      	mov	r1, r4
   37df4:	4628      	mov	r0, r5
   37df6:	f7ff ff59 	bl	37cac <alloc_chunk>
	if (c == 0U) {
   37dfa:	4606      	mov	r6, r0
   37dfc:	2800      	cmp	r0, #0
   37dfe:	d0f0      	beq.n	37de2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   37e00:	4601      	mov	r1, r0
   37e02:	4628      	mov	r0, r5
   37e04:	f7ff fefc 	bl	37c00 <chunk_size>
   37e08:	42a0      	cmp	r0, r4
   37e0a:	d907      	bls.n	37e1c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   37e0c:	1932      	adds	r2, r6, r4
   37e0e:	4628      	mov	r0, r5
   37e10:	f7ff ff99 	bl	37d46 <split_chunks>
		free_list_add(h, c + chunk_sz);
   37e14:	4611      	mov	r1, r2
   37e16:	4628      	mov	r0, r5
   37e18:	f7ff fef7 	bl	37c0a <free_list_add>
	void *cmem = &buf[c];
   37e1c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   37e20:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   37e22:	8853      	ldrh	r3, [r2, #2]
   37e24:	f043 0301 	orr.w	r3, r3, #1
   37e28:	8053      	strh	r3, [r2, #2]
   37e2a:	3004      	adds	r0, #4
	return mem;
   37e2c:	e7da      	b.n	37de4 <sys_heap_alloc+0x8>

00037e2e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   37e2e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   37e30:	f013 0307 	ands.w	r3, r3, #7
   37e34:	d105      	bne.n	37e42 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   37e36:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   37e38:	2b00      	cmp	r3, #0
   37e3a:	bf0c      	ite	eq
   37e3c:	2000      	moveq	r0, #0
   37e3e:	2003      	movne	r0, #3
   37e40:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   37e42:	2b02      	cmp	r3, #2
   37e44:	d105      	bne.n	37e52 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   37e46:	8bc0      	ldrh	r0, [r0, #30]
   37e48:	fab0 f080 	clz	r0, r0
   37e4c:	0940      	lsrs	r0, r0, #5
   37e4e:	0080      	lsls	r0, r0, #2
   37e50:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   37e52:	2b01      	cmp	r3, #1
   37e54:	d105      	bne.n	37e62 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   37e56:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   37e58:	2b00      	cmp	r3, #0
   37e5a:	bf0c      	ite	eq
   37e5c:	2000      	moveq	r0, #0
   37e5e:	2005      	movne	r0, #5
   37e60:	4770      	bx	lr
	int evt = EVT_NOP;
   37e62:	2000      	movs	r0, #0
}
   37e64:	4770      	bx	lr

00037e66 <validate_args>:
{
   37e66:	b510      	push	{r4, lr}
   37e68:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   37e6a:	b100      	cbz	r0, 37e6e <validate_args+0x8>
   37e6c:	b911      	cbnz	r1, 37e74 <validate_args+0xe>
		return -EINVAL;
   37e6e:	f06f 0015 	mvn.w	r0, #21
}
   37e72:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   37e74:	1d08      	adds	r0, r1, #4
   37e76:	f000 f82f 	bl	37ed8 <sys_notify_validate>
	if ((rv == 0)
   37e7a:	2800      	cmp	r0, #0
   37e7c:	d1f9      	bne.n	37e72 <validate_args+0xc>
	    && ((cli->notify.flags
   37e7e:	68a3      	ldr	r3, [r4, #8]
   37e80:	2b03      	cmp	r3, #3
   37e82:	d9f6      	bls.n	37e72 <validate_args+0xc>
   37e84:	e7f3      	b.n	37e6e <validate_args+0x8>

00037e86 <notify_one>:
{
   37e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37e8a:	460d      	mov	r5, r1
   37e8c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   37e8e:	4619      	mov	r1, r3
   37e90:	1d28      	adds	r0, r5, #4
{
   37e92:	4690      	mov	r8, r2
   37e94:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   37e96:	f7ec f9ad 	bl	241f4 <sys_notify_finalize>
	if (cb) {
   37e9a:	4604      	mov	r4, r0
   37e9c:	b138      	cbz	r0, 37eae <notify_one+0x28>
		cb(mgr, cli, state, res);
   37e9e:	4633      	mov	r3, r6
   37ea0:	4642      	mov	r2, r8
   37ea2:	4629      	mov	r1, r5
   37ea4:	4638      	mov	r0, r7
   37ea6:	46a4      	mov	ip, r4
}
   37ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   37eac:	4760      	bx	ip
}
   37eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00037eb2 <onoff_manager_init>:
{
   37eb2:	b538      	push	{r3, r4, r5, lr}
   37eb4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   37eb6:	4605      	mov	r5, r0
   37eb8:	b158      	cbz	r0, 37ed2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   37eba:	b151      	cbz	r1, 37ed2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   37ebc:	680b      	ldr	r3, [r1, #0]
   37ebe:	b143      	cbz	r3, 37ed2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   37ec0:	684b      	ldr	r3, [r1, #4]
   37ec2:	b133      	cbz	r3, 37ed2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   37ec4:	2220      	movs	r2, #32
   37ec6:	2100      	movs	r1, #0
   37ec8:	f000 fc82 	bl	387d0 <memset>
   37ecc:	612c      	str	r4, [r5, #16]
	return 0;
   37ece:	2000      	movs	r0, #0
}
   37ed0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   37ed2:	f06f 0015 	mvn.w	r0, #21
   37ed6:	e7fb      	b.n	37ed0 <onoff_manager_init+0x1e>

00037ed8 <sys_notify_validate>:
	if (notify == NULL) {
   37ed8:	4603      	mov	r3, r0
   37eda:	b140      	cbz	r0, 37eee <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   37edc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   37ede:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   37ee2:	2a02      	cmp	r2, #2
   37ee4:	d006      	beq.n	37ef4 <sys_notify_validate+0x1c>
   37ee6:	2a03      	cmp	r2, #3
   37ee8:	d004      	beq.n	37ef4 <sys_notify_validate+0x1c>
   37eea:	2a01      	cmp	r2, #1
   37eec:	d005      	beq.n	37efa <sys_notify_validate+0x22>
   37eee:	f06f 0015 	mvn.w	r0, #21
}
   37ef2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   37ef4:	681a      	ldr	r2, [r3, #0]
   37ef6:	2a00      	cmp	r2, #0
   37ef8:	d0f9      	beq.n	37eee <sys_notify_validate+0x16>
		notify->result = 0;
   37efa:	2000      	movs	r0, #0
   37efc:	6098      	str	r0, [r3, #8]
   37efe:	4770      	bx	lr

00037f00 <encode_uint>:
{
   37f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37f04:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   37f06:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   37f08:	2b6f      	cmp	r3, #111	; 0x6f
{
   37f0a:	4680      	mov	r8, r0
   37f0c:	460f      	mov	r7, r1
   37f0e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   37f10:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   37f14:	d029      	beq.n	37f6a <encode_uint+0x6a>
   37f16:	d824      	bhi.n	37f62 <encode_uint+0x62>
		return 10;
   37f18:	2b58      	cmp	r3, #88	; 0x58
   37f1a:	bf0c      	ite	eq
   37f1c:	2610      	moveq	r6, #16
   37f1e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   37f20:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   37f24:	4632      	mov	r2, r6
   37f26:	2300      	movs	r3, #0
   37f28:	4640      	mov	r0, r8
   37f2a:	4639      	mov	r1, r7
   37f2c:	f7d4 f9e8 	bl	c300 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   37f30:	2a09      	cmp	r2, #9
   37f32:	b2d4      	uxtb	r4, r2
   37f34:	d81e      	bhi.n	37f74 <encode_uint+0x74>
   37f36:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   37f38:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   37f3a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   37f3c:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   37f40:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   37f44:	d301      	bcc.n	37f4a <encode_uint+0x4a>
   37f46:	45d1      	cmp	r9, sl
   37f48:	d811      	bhi.n	37f6e <encode_uint+0x6e>
	if (conv->flag_hash) {
   37f4a:	782b      	ldrb	r3, [r5, #0]
   37f4c:	069b      	lsls	r3, r3, #26
   37f4e:	d505      	bpl.n	37f5c <encode_uint+0x5c>
		if (radix == 8) {
   37f50:	2e08      	cmp	r6, #8
   37f52:	d115      	bne.n	37f80 <encode_uint+0x80>
			conv->altform_0 = true;
   37f54:	78ab      	ldrb	r3, [r5, #2]
   37f56:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   37f5a:	70ab      	strb	r3, [r5, #2]
}
   37f5c:	4648      	mov	r0, r9
   37f5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   37f62:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   37f66:	2b70      	cmp	r3, #112	; 0x70
   37f68:	e7d7      	b.n	37f1a <encode_uint+0x1a>
	switch (specifier) {
   37f6a:	2608      	movs	r6, #8
   37f6c:	e7d8      	b.n	37f20 <encode_uint+0x20>
		value /= radix;
   37f6e:	4680      	mov	r8, r0
   37f70:	460f      	mov	r7, r1
   37f72:	e7d7      	b.n	37f24 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   37f74:	f1bb 0f19 	cmp.w	fp, #25
   37f78:	bf94      	ite	ls
   37f7a:	3437      	addls	r4, #55	; 0x37
   37f7c:	3457      	addhi	r4, #87	; 0x57
   37f7e:	e7db      	b.n	37f38 <encode_uint+0x38>
		} else if (radix == 16) {
   37f80:	2e10      	cmp	r6, #16
   37f82:	d1eb      	bne.n	37f5c <encode_uint+0x5c>
			conv->altform_0c = true;
   37f84:	78ab      	ldrb	r3, [r5, #2]
   37f86:	f043 0310 	orr.w	r3, r3, #16
   37f8a:	e7e6      	b.n	37f5a <encode_uint+0x5a>

00037f8c <outs>:
{
   37f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37f90:	4607      	mov	r7, r0
   37f92:	4688      	mov	r8, r1
   37f94:	4615      	mov	r5, r2
   37f96:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   37f98:	4614      	mov	r4, r2
   37f9a:	42b4      	cmp	r4, r6
   37f9c:	d305      	bcc.n	37faa <outs+0x1e>
   37f9e:	b10e      	cbz	r6, 37fa4 <outs+0x18>
	return (int)count;
   37fa0:	1b60      	subs	r0, r4, r5
   37fa2:	e008      	b.n	37fb6 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   37fa4:	7823      	ldrb	r3, [r4, #0]
   37fa6:	2b00      	cmp	r3, #0
   37fa8:	d0fa      	beq.n	37fa0 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   37faa:	f814 0b01 	ldrb.w	r0, [r4], #1
   37fae:	4641      	mov	r1, r8
   37fb0:	47b8      	blx	r7
		if (rc < 0) {
   37fb2:	2800      	cmp	r0, #0
   37fb4:	daf1      	bge.n	37f9a <outs+0xe>
}
   37fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00037fba <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   37fba:	4040      	eors	r0, r0
   37fbc:	f380 8811 	msr	BASEPRI, r0
   37fc0:	f04f 0004 	mov.w	r0, #4
   37fc4:	df02      	svc	2
}
   37fc6:	4770      	bx	lr

00037fc8 <assert_print>:

void assert_print(const char *fmt, ...)
{
   37fc8:	b40f      	push	{r0, r1, r2, r3}
   37fca:	b507      	push	{r0, r1, r2, lr}
   37fcc:	a904      	add	r1, sp, #16
   37fce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   37fd2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   37fd4:	f7eb fd88 	bl	23ae8 <vprintk>

	va_end(ap);
}
   37fd8:	b003      	add	sp, #12
   37fda:	f85d eb04 	ldr.w	lr, [sp], #4
   37fde:	b004      	add	sp, #16
   37fe0:	4770      	bx	lr

00037fe2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   37fe2:	4770      	bx	lr

00037fe4 <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   37fe4:	b40f      	push	{r0, r1, r2, r3}
   37fe6:	b507      	push	{r0, r1, r2, lr}
   37fe8:	a904      	add	r1, sp, #16
   37fea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   37fee:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   37ff0:	f7eb fd7a 	bl	23ae8 <vprintk>
	va_end(ap);
}
   37ff4:	b003      	add	sp, #12
   37ff6:	f85d eb04 	ldr.w	lr, [sp], #4
   37ffa:	b004      	add	sp, #16
   37ffc:	4770      	bx	lr

00037ffe <flash_img_buffered_write>:
	     "FLASH_WRITE_BLOCK_SIZE");
#endif

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   37ffe:	b570      	push	{r4, r5, r6, lr}
   38000:	4604      	mov	r4, r0
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   38002:	f500 7001 	add.w	r0, r0, #516	; 0x204
{
   38006:	461e      	mov	r6, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   38008:	f000 f881 	bl	3810e <stream_flash_buffered_write>
   3800c:	4605      	mov	r5, r0
	if (!flush) {
   3800e:	b136      	cbz	r6, 3801e <flash_img_buffered_write+0x20>
	if (rc) {
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   38010:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   38014:	f000 f826 	bl	38064 <flash_area_close>
	ctx->flash_area = NULL;
   38018:	2300      	movs	r3, #0
   3801a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	return rc;
}
   3801e:	4628      	mov	r0, r5
   38020:	bd70      	pop	{r4, r5, r6, pc}

00038022 <flash_img_init_id>:
{
	return stream_flash_bytes_written(&ctx->stream);
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   38022:	b530      	push	{r4, r5, lr}
   38024:	4605      	mov	r5, r0
   38026:	b085      	sub	sp, #20
   38028:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   3802a:	f505 7100 	add.w	r1, r5, #512	; 0x200
   3802e:	f7ec fcd3 	bl	249d8 <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   38032:	4604      	mov	r4, r0
   38034:	b998      	cbnz	r0, 3805e <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   38036:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   3803a:	f000 f859 	bl	380f0 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   3803e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   38042:	9402      	str	r4, [sp, #8]
   38044:	689a      	ldr	r2, [r3, #8]
   38046:	9201      	str	r2, [sp, #4]
   38048:	685b      	ldr	r3, [r3, #4]
   3804a:	9300      	str	r3, [sp, #0]
	flash_dev = flash_area_get_device(ctx->flash_area);
   3804c:	4601      	mov	r1, r0
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   3804e:	f44f 7300 	mov.w	r3, #512	; 0x200
   38052:	462a      	mov	r2, r5
   38054:	f505 7001 	add.w	r0, r5, #516	; 0x204
   38058:	f7ec fd5a 	bl	24b10 <stream_flash_init>
   3805c:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   3805e:	4620      	mov	r0, r4
   38060:	b005      	add	sp, #20
   38062:	bd30      	pop	{r4, r5, pc}

00038064 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   38064:	4770      	bx	lr

00038066 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   38066:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   38068:	b430      	push	{r4, r5}
   3806a:	4604      	mov	r4, r0
   3806c:	4618      	mov	r0, r3
   3806e:	db0b      	blt.n	38088 <flash_area_read+0x22>
   38070:	68a5      	ldr	r5, [r4, #8]
   38072:	4408      	add	r0, r1
   38074:	42a8      	cmp	r0, r5
   38076:	d807      	bhi.n	38088 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   38078:	68e0      	ldr	r0, [r4, #12]
   3807a:	6864      	ldr	r4, [r4, #4]
   3807c:	4421      	add	r1, r4
   3807e:	6884      	ldr	r4, [r0, #8]
   38080:	6824      	ldr	r4, [r4, #0]
   38082:	46a4      	mov	ip, r4
}
   38084:	bc30      	pop	{r4, r5}
   38086:	4760      	bx	ip
   38088:	f06f 0015 	mvn.w	r0, #21
   3808c:	bc30      	pop	{r4, r5}
   3808e:	4770      	bx	lr

00038090 <flash_area_write>:
   38090:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   38092:	b430      	push	{r4, r5}
   38094:	4604      	mov	r4, r0
   38096:	4618      	mov	r0, r3
   38098:	db0b      	blt.n	380b2 <flash_area_write+0x22>
   3809a:	68a5      	ldr	r5, [r4, #8]
   3809c:	4408      	add	r0, r1
   3809e:	42a8      	cmp	r0, r5
   380a0:	d807      	bhi.n	380b2 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   380a2:	68e0      	ldr	r0, [r4, #12]
   380a4:	6864      	ldr	r4, [r4, #4]
   380a6:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   380a8:	6884      	ldr	r4, [r0, #8]
   380aa:	6864      	ldr	r4, [r4, #4]
   380ac:	46a4      	mov	ip, r4
}
   380ae:	bc30      	pop	{r4, r5}
   380b0:	4760      	bx	ip
   380b2:	f06f 0015 	mvn.w	r0, #21
   380b6:	bc30      	pop	{r4, r5}
   380b8:	4770      	bx	lr

000380ba <flash_area_erase>:
   380ba:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   380bc:	4603      	mov	r3, r0
   380be:	b410      	push	{r4}
   380c0:	4610      	mov	r0, r2
   380c2:	db0a      	blt.n	380da <flash_area_erase+0x20>
   380c4:	689c      	ldr	r4, [r3, #8]
   380c6:	4408      	add	r0, r1
   380c8:	42a0      	cmp	r0, r4
   380ca:	d806      	bhi.n	380da <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   380cc:	68d8      	ldr	r0, [r3, #12]
   380ce:	685b      	ldr	r3, [r3, #4]
   380d0:	4419      	add	r1, r3
	rc = api->erase(dev, offset, size);
   380d2:	6883      	ldr	r3, [r0, #8]
}
   380d4:	bc10      	pop	{r4}
   380d6:	689b      	ldr	r3, [r3, #8]
   380d8:	4718      	bx	r3
   380da:	f06f 0015 	mvn.w	r0, #21
   380de:	bc10      	pop	{r4}
   380e0:	4770      	bx	lr

000380e2 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   380e2:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
   380e4:	68c0      	ldr	r0, [r0, #12]
	return api->get_parameters(dev)->write_block_size;
   380e6:	6883      	ldr	r3, [r0, #8]
   380e8:	68db      	ldr	r3, [r3, #12]
   380ea:	4798      	blx	r3
}
   380ec:	6800      	ldr	r0, [r0, #0]
   380ee:	bd08      	pop	{r3, pc}

000380f0 <flash_area_get_device>:
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return fa->fa_dev;
}
   380f0:	68c0      	ldr	r0, [r0, #12]
   380f2:	4770      	bx	lr

000380f4 <flash_area_erased_val>:

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   380f4:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
   380f6:	68c0      	ldr	r0, [r0, #12]
	return api->get_parameters(dev);
   380f8:	6883      	ldr	r3, [r0, #8]
   380fa:	68db      	ldr	r3, [r3, #12]
   380fc:	4798      	blx	r3

	return param->erase_value;
}
   380fe:	7900      	ldrb	r0, [r0, #4]
   38100:	bd08      	pop	{r3, pc}

00038102 <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   38102:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   38104:	6883      	ldr	r3, [r0, #8]
   38106:	68db      	ldr	r3, [r3, #12]
   38108:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   3810a:	6800      	ldr	r0, [r0, #0]
   3810c:	bd08      	pop	{r3, pc}

0003810e <stream_flash_buffered_write>:
{
   3810e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38112:	4689      	mov	r9, r1
   38114:	4616      	mov	r6, r2
   38116:	4698      	mov	r8, r3
	if (!ctx) {
   38118:	4604      	mov	r4, r0
   3811a:	b398      	cbz	r0, 38184 <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3811c:	6882      	ldr	r2, [r0, #8]
   3811e:	6903      	ldr	r3, [r0, #16]
   38120:	4413      	add	r3, r2
   38122:	6982      	ldr	r2, [r0, #24]
   38124:	4433      	add	r3, r6
   38126:	4293      	cmp	r3, r2
   38128:	d830      	bhi.n	3818c <stream_flash_buffered_write+0x7e>
	int processed = 0;
   3812a:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3812c:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   38130:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   38134:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   38136:	45ba      	cmp	sl, r7
   38138:	d215      	bcs.n	38166 <stream_flash_buffered_write+0x58>
	if (processed < len) {
   3813a:	42b5      	cmp	r5, r6
   3813c:	d209      	bcs.n	38152 <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   3813e:	6823      	ldr	r3, [r4, #0]
   38140:	4652      	mov	r2, sl
   38142:	4418      	add	r0, r3
   38144:	eb09 0105 	add.w	r1, r9, r5
   38148:	f000 fb37 	bl	387ba <memcpy>
		ctx->buf_bytes += len - processed;
   3814c:	68a3      	ldr	r3, [r4, #8]
   3814e:	4453      	add	r3, sl
   38150:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   38152:	f1b8 0f00 	cmp.w	r8, #0
   38156:	d01c      	beq.n	38192 <stream_flash_buffered_write+0x84>
   38158:	68a0      	ldr	r0, [r4, #8]
   3815a:	b1a8      	cbz	r0, 38188 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   3815c:	4620      	mov	r0, r4
}
   3815e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   38162:	f7ec bc61 	b.w	24a28 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   38166:	6823      	ldr	r3, [r4, #0]
   38168:	463a      	mov	r2, r7
   3816a:	4418      	add	r0, r3
   3816c:	eb09 0105 	add.w	r1, r9, r5
   38170:	f000 fb23 	bl	387ba <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   38174:	6863      	ldr	r3, [r4, #4]
   38176:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   38178:	4620      	mov	r0, r4
   3817a:	f7ec fc55 	bl	24a28 <flash_sync>
		if (rc != 0) {
   3817e:	b918      	cbnz	r0, 38188 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   38180:	443d      	add	r5, r7
   38182:	e7d3      	b.n	3812c <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   38184:	f06f 000d 	mvn.w	r0, #13
}
   38188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   3818c:	f06f 000b 	mvn.w	r0, #11
   38190:	e7fa      	b.n	38188 <stream_flash_buffered_write+0x7a>
   38192:	4640      	mov	r0, r8
   38194:	e7f8      	b.n	38188 <stream_flash_buffered_write+0x7a>

00038196 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   38196:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   38198:	b11b      	cbz	r3, 381a2 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   3819a:	7a1b      	ldrb	r3, [r3, #8]
   3819c:	700b      	strb	r3, [r1, #0]

	return 0;
   3819e:	2000      	movs	r0, #0
   381a0:	4770      	bx	lr
		return -ENOSYS;
   381a2:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   381a6:	4770      	bx	lr

000381a8 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   381a8:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   381aa:	b130      	cbz	r0, 381ba <pm_device_is_busy+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   381ac:	f3bf 8f5b 	dmb	ish
   381b0:	6840      	ldr	r0, [r0, #4]
   381b2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   381b6:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
   381ba:	4770      	bx	lr

000381bc <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   381bc:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   381be:	b130      	cbz	r0, 381ce <pm_device_wakeup_is_enabled+0x12>
   381c0:	f3bf 8f5b 	dmb	ish
   381c4:	6840      	ldr	r0, [r0, #4]
   381c6:	f3bf 8f5b 	dmb	ish
   381ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   381ce:	4770      	bx	lr

000381d0 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   381d0:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   381d2:	b130      	cbz	r0, 381e2 <pm_device_state_is_locked+0x12>
   381d4:	f3bf 8f5b 	dmb	ish
   381d8:	6840      	ldr	r0, [r0, #4]
   381da:	f3bf 8f5b 	dmb	ish
   381de:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   381e2:	4770      	bx	lr

000381e4 <stats_walk>:
{
   381e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381e8:	b085      	sub	sp, #20
   381ea:	4604      	mov	r4, r0
   381ec:	460e      	mov	r6, r1
   381ee:	9201      	str	r2, [sp, #4]
	for (i = 0; i < hdr->s_cnt; i++) {
   381f0:	2500      	movs	r5, #0
		cur = hdr->s_map + i;
   381f2:	f04f 0806 	mov.w	r8, #6
		dst[len++] = '0' + idx % 10;
   381f6:	270a      	movs	r7, #10
	for (i = 0; i < hdr->s_cnt; i++) {
   381f8:	88e3      	ldrh	r3, [r4, #6]
   381fa:	42ab      	cmp	r3, r5
   381fc:	dc03      	bgt.n	38206 <stats_walk+0x22>
	return 0;
   381fe:	2000      	movs	r0, #0
}
   38200:	b005      	add	sp, #20
   38202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	off = sizeof(*hdr) + idx * hdr->s_size;
   38206:	7923      	ldrb	r3, [r4, #4]
	for (i = 0; i < hdr->s_map_cnt; i++) {
   38208:	f8d4 c010 	ldr.w	ip, [r4, #16]
	off = sizeof(*hdr) + idx * hdr->s_size;
   3820c:	fb13 f305 	smulbb	r3, r3, r5
   38210:	3318      	adds	r3, #24
   38212:	b29b      	uxth	r3, r3
	for (i = 0; i < hdr->s_map_cnt; i++) {
   38214:	2200      	movs	r2, #0
   38216:	4562      	cmp	r2, ip
   38218:	da0a      	bge.n	38230 <stats_walk+0x4c>
		cur = hdr->s_map + i;
   3821a:	68e0      	ldr	r0, [r4, #12]
   3821c:	fb08 f102 	mul.w	r1, r8, r2
   38220:	eb00 0e01 	add.w	lr, r0, r1
		if (cur->snm_off == off) {
   38224:	5a41      	ldrh	r1, [r0, r1]
   38226:	4299      	cmp	r1, r3
   38228:	d13b      	bne.n	382a2 <stats_walk+0xbe>
			return cur->snm_name;
   3822a:	f8de 2002 	ldr.w	r2, [lr, #2]
		if (name == NULL) {
   3822e:	bb8a      	cbnz	r2, 38294 <stats_walk+0xb0>
   38230:	a902      	add	r1, sp, #8
	for (i = 0; i < hdr->s_map_cnt; i++) {
   38232:	468b      	mov	fp, r1
   38234:	46ae      	mov	lr, r5
	len = 0;
   38236:	f04f 0c00 	mov.w	ip, #0
   3823a:	460a      	mov	r2, r1
		dst[len++] = '0' + idx % 10;
   3823c:	fbbe faf7 	udiv	sl, lr, r7
   38240:	fb07 e91a 	mls	r9, r7, sl, lr
   38244:	f109 0930 	add.w	r9, r9, #48	; 0x30
   38248:	f80b 9b01 	strb.w	r9, [fp], #1
   3824c:	46f1      	mov	r9, lr
	} while (idx > 0);
   3824e:	f1b9 0f09 	cmp.w	r9, #9
   38252:	4660      	mov	r0, ip
		idx /= 10;
   38254:	46d6      	mov	lr, sl
		dst[len++] = '0' + idx % 10;
   38256:	f10c 0c01 	add.w	ip, ip, #1
	} while (idx > 0);
   3825a:	dcef      	bgt.n	3823c <stats_walk+0x58>
	dst[len++] = 's';
   3825c:	f10c 0c10 	add.w	ip, ip, #16
   38260:	44ec      	add	ip, sp
   38262:	3002      	adds	r0, #2
   38264:	f04f 0e73 	mov.w	lr, #115	; 0x73
	for (i = 0; i < len / 2; i++) {
   38268:	ea4f 0960 	mov.w	r9, r0, asr #1
   3826c:	4408      	add	r0, r1
	dst[len++] = 's';
   3826e:	f80c ec08 	strb.w	lr, [ip, #-8]
	for (i = 0; i < len / 2; i++) {
   38272:	4686      	mov	lr, r0
   38274:	f04f 0c00 	mov.w	ip, #0
   38278:	f10c 0c01 	add.w	ip, ip, #1
		c = dst[i];
   3827c:	f891 a000 	ldrb.w	sl, [r1]
		dst[i] = dst[len - i - 1];
   38280:	f81e bd01 	ldrb.w	fp, [lr, #-1]!
   38284:	f801 bb01 	strb.w	fp, [r1], #1
	for (i = 0; i < len / 2; i++) {
   38288:	45e1      	cmp	r9, ip
		dst[len - i - 1] = c;
   3828a:	f88e a000 	strb.w	sl, [lr]
	for (i = 0; i < len / 2; i++) {
   3828e:	d1f3      	bne.n	38278 <stats_walk+0x94>
	dst[len] = '\0';
   38290:	2100      	movs	r1, #0
   38292:	7001      	strb	r1, [r0, #0]
		rc = walk_func(hdr, arg, name, stats_get_off(hdr, i));
   38294:	9901      	ldr	r1, [sp, #4]
   38296:	4620      	mov	r0, r4
   38298:	47b0      	blx	r6
		if (rc != 0) {
   3829a:	2800      	cmp	r0, #0
   3829c:	d1b0      	bne.n	38200 <stats_walk+0x1c>
	for (i = 0; i < hdr->s_cnt; i++) {
   3829e:	3501      	adds	r5, #1
   382a0:	e7aa      	b.n	381f8 <stats_walk+0x14>
	for (i = 0; i < hdr->s_map_cnt; i++) {
   382a2:	3201      	adds	r2, #1
   382a4:	e7b7      	b.n	38216 <stats_walk+0x32>

000382a6 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   382a6:	b538      	push	{r3, r4, r5, lr}
   382a8:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   382aa:	42ab      	cmp	r3, r5
{
   382ac:	4611      	mov	r1, r2
   382ae:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   382b0:	d804      	bhi.n	382bc <_copy+0x16>
		(void)memcpy(to, from, from_len);
   382b2:	461a      	mov	r2, r3
   382b4:	f000 fa81 	bl	387ba <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   382b8:	4620      	mov	r0, r4
   382ba:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   382bc:	2400      	movs	r4, #0
   382be:	e7fb      	b.n	382b8 <_copy+0x12>

000382c0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   382c0:	f000 ba86 	b.w	387d0 <memset>

000382c4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   382c4:	09c3      	lsrs	r3, r0, #7
   382c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   382ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   382ce:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   382d2:	b2c0      	uxtb	r0, r0
   382d4:	4770      	bx	lr

000382d6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   382d6:	78cb      	ldrb	r3, [r1, #3]
   382d8:	7802      	ldrb	r2, [r0, #0]
   382da:	4053      	eors	r3, r2
   382dc:	7003      	strb	r3, [r0, #0]
   382de:	884b      	ldrh	r3, [r1, #2]
   382e0:	7842      	ldrb	r2, [r0, #1]
   382e2:	4053      	eors	r3, r2
   382e4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   382e6:	680a      	ldr	r2, [r1, #0]
   382e8:	7883      	ldrb	r3, [r0, #2]
   382ea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   382ee:	7083      	strb	r3, [r0, #2]
   382f0:	680a      	ldr	r2, [r1, #0]
   382f2:	78c3      	ldrb	r3, [r0, #3]
   382f4:	4053      	eors	r3, r2
   382f6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   382f8:	79cb      	ldrb	r3, [r1, #7]
   382fa:	7902      	ldrb	r2, [r0, #4]
   382fc:	4053      	eors	r3, r2
   382fe:	7103      	strb	r3, [r0, #4]
   38300:	88cb      	ldrh	r3, [r1, #6]
   38302:	7942      	ldrb	r2, [r0, #5]
   38304:	4053      	eors	r3, r2
   38306:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   38308:	684a      	ldr	r2, [r1, #4]
   3830a:	7983      	ldrb	r3, [r0, #6]
   3830c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   38310:	7183      	strb	r3, [r0, #6]
   38312:	684a      	ldr	r2, [r1, #4]
   38314:	79c3      	ldrb	r3, [r0, #7]
   38316:	4053      	eors	r3, r2
   38318:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   3831a:	7acb      	ldrb	r3, [r1, #11]
   3831c:	7a02      	ldrb	r2, [r0, #8]
   3831e:	4053      	eors	r3, r2
   38320:	7203      	strb	r3, [r0, #8]
   38322:	7a42      	ldrb	r2, [r0, #9]
   38324:	894b      	ldrh	r3, [r1, #10]
   38326:	4053      	eors	r3, r2
   38328:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   3832a:	688a      	ldr	r2, [r1, #8]
   3832c:	7a83      	ldrb	r3, [r0, #10]
   3832e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   38332:	7283      	strb	r3, [r0, #10]
   38334:	688a      	ldr	r2, [r1, #8]
   38336:	7ac3      	ldrb	r3, [r0, #11]
   38338:	4053      	eors	r3, r2
   3833a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   3833c:	7bcb      	ldrb	r3, [r1, #15]
   3833e:	7b02      	ldrb	r2, [r0, #12]
   38340:	4053      	eors	r3, r2
   38342:	7303      	strb	r3, [r0, #12]
   38344:	89cb      	ldrh	r3, [r1, #14]
   38346:	7b42      	ldrb	r2, [r0, #13]
   38348:	4053      	eors	r3, r2
   3834a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   3834c:	68ca      	ldr	r2, [r1, #12]
   3834e:	7b83      	ldrb	r3, [r0, #14]
   38350:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   38354:	7383      	strb	r3, [r0, #14]
   38356:	68ca      	ldr	r2, [r1, #12]
   38358:	7bc3      	ldrb	r3, [r0, #15]
   3835a:	4053      	eors	r3, r2
   3835c:	73c3      	strb	r3, [r0, #15]
}
   3835e:	4770      	bx	lr

00038360 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   38360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   38362:	7802      	ldrb	r2, [r0, #0]
   38364:	f88d 2000 	strb.w	r2, [sp]
   38368:	7942      	ldrb	r2, [r0, #5]
   3836a:	f88d 2001 	strb.w	r2, [sp, #1]
   3836e:	7a82      	ldrb	r2, [r0, #10]
   38370:	f88d 2002 	strb.w	r2, [sp, #2]
   38374:	7bc2      	ldrb	r2, [r0, #15]
   38376:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   3837a:	7902      	ldrb	r2, [r0, #4]
   3837c:	f88d 2004 	strb.w	r2, [sp, #4]
   38380:	7a42      	ldrb	r2, [r0, #9]
   38382:	f88d 2005 	strb.w	r2, [sp, #5]
   38386:	7b82      	ldrb	r2, [r0, #14]
   38388:	f88d 2006 	strb.w	r2, [sp, #6]
   3838c:	78c2      	ldrb	r2, [r0, #3]
   3838e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   38392:	7a02      	ldrb	r2, [r0, #8]
   38394:	f88d 2008 	strb.w	r2, [sp, #8]
   38398:	7b42      	ldrb	r2, [r0, #13]
   3839a:	f88d 2009 	strb.w	r2, [sp, #9]
   3839e:	7882      	ldrb	r2, [r0, #2]
   383a0:	f88d 200a 	strb.w	r2, [sp, #10]
   383a4:	79c2      	ldrb	r2, [r0, #7]
   383a6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   383aa:	7b02      	ldrb	r2, [r0, #12]
   383ac:	f88d 200c 	strb.w	r2, [sp, #12]
   383b0:	7842      	ldrb	r2, [r0, #1]
   383b2:	7ac3      	ldrb	r3, [r0, #11]
   383b4:	f88d 200d 	strb.w	r2, [sp, #13]
   383b8:	7982      	ldrb	r2, [r0, #6]
   383ba:	f88d 200e 	strb.w	r2, [sp, #14]
   383be:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   383c2:	2310      	movs	r3, #16
   383c4:	466a      	mov	r2, sp
   383c6:	4619      	mov	r1, r3
   383c8:	f7ff ff6d 	bl	382a6 <_copy>
}
   383cc:	b005      	add	sp, #20
   383ce:	f85d fb04 	ldr.w	pc, [sp], #4

000383d2 <mult_row_column>:
{
   383d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   383d4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   383d6:	7808      	ldrb	r0, [r1, #0]
{
   383d8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   383da:	f7ff ff73 	bl	382c4 <_double_byte>
   383de:	4605      	mov	r5, r0
   383e0:	7860      	ldrb	r0, [r4, #1]
   383e2:	f7ff ff6f 	bl	382c4 <_double_byte>
   383e6:	78a2      	ldrb	r2, [r4, #2]
   383e8:	7863      	ldrb	r3, [r4, #1]
   383ea:	4053      	eors	r3, r2
   383ec:	78e2      	ldrb	r2, [r4, #3]
   383ee:	4053      	eors	r3, r2
   383f0:	405d      	eors	r5, r3
   383f2:	4068      	eors	r0, r5
   383f4:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   383f6:	7860      	ldrb	r0, [r4, #1]
   383f8:	7827      	ldrb	r7, [r4, #0]
   383fa:	f7ff ff63 	bl	382c4 <_double_byte>
   383fe:	4605      	mov	r5, r0
   38400:	78a0      	ldrb	r0, [r4, #2]
   38402:	f7ff ff5f 	bl	382c4 <_double_byte>
   38406:	78a3      	ldrb	r3, [r4, #2]
   38408:	405f      	eors	r7, r3
   3840a:	78e3      	ldrb	r3, [r4, #3]
   3840c:	405f      	eors	r7, r3
   3840e:	407d      	eors	r5, r7
   38410:	4068      	eors	r0, r5
   38412:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   38414:	7863      	ldrb	r3, [r4, #1]
   38416:	7827      	ldrb	r7, [r4, #0]
   38418:	78a0      	ldrb	r0, [r4, #2]
   3841a:	405f      	eors	r7, r3
   3841c:	f7ff ff52 	bl	382c4 <_double_byte>
   38420:	4605      	mov	r5, r0
   38422:	78e0      	ldrb	r0, [r4, #3]
   38424:	f7ff ff4e 	bl	382c4 <_double_byte>
   38428:	78e3      	ldrb	r3, [r4, #3]
   3842a:	405f      	eors	r7, r3
   3842c:	407d      	eors	r5, r7
   3842e:	4068      	eors	r0, r5
   38430:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   38432:	7820      	ldrb	r0, [r4, #0]
   38434:	f7ff ff46 	bl	382c4 <_double_byte>
   38438:	7862      	ldrb	r2, [r4, #1]
   3843a:	7823      	ldrb	r3, [r4, #0]
   3843c:	4053      	eors	r3, r2
   3843e:	78a2      	ldrb	r2, [r4, #2]
   38440:	4053      	eors	r3, r2
   38442:	ea80 0503 	eor.w	r5, r0, r3
   38446:	78e0      	ldrb	r0, [r4, #3]
   38448:	f7ff ff3c 	bl	382c4 <_double_byte>
   3844c:	b2ed      	uxtb	r5, r5
   3844e:	4045      	eors	r5, r0
   38450:	70f5      	strb	r5, [r6, #3]
}
   38452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038454 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   38454:	b570      	push	{r4, r5, r6, lr}
   38456:	4614      	mov	r4, r2
   38458:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   3845a:	4605      	mov	r5, r0
   3845c:	2800      	cmp	r0, #0
   3845e:	d049      	beq.n	384f4 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   38460:	2900      	cmp	r1, #0
   38462:	d049      	beq.n	384f8 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   38464:	2a00      	cmp	r2, #0
   38466:	d049      	beq.n	384fc <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   38468:	2310      	movs	r3, #16
   3846a:	460a      	mov	r2, r1
   3846c:	4668      	mov	r0, sp
   3846e:	4619      	mov	r1, r3
   38470:	f7ff ff19 	bl	382a6 <_copy>
	add_round_key(state, s->words);
   38474:	4621      	mov	r1, r4
   38476:	4668      	mov	r0, sp
   38478:	f7ff ff2d 	bl	382d6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   3847c:	3410      	adds	r4, #16
   3847e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   38482:	4668      	mov	r0, sp
   38484:	f7ec fe18 	bl	250b8 <sub_bytes>
		shift_rows(state);
   38488:	4668      	mov	r0, sp
   3848a:	f7ff ff69 	bl	38360 <shift_rows>
	mult_row_column(t, s);
   3848e:	4669      	mov	r1, sp
   38490:	a804      	add	r0, sp, #16
   38492:	f7ff ff9e 	bl	383d2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   38496:	a901      	add	r1, sp, #4
   38498:	a805      	add	r0, sp, #20
   3849a:	f7ff ff9a 	bl	383d2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   3849e:	a902      	add	r1, sp, #8
   384a0:	a806      	add	r0, sp, #24
   384a2:	f7ff ff96 	bl	383d2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   384a6:	a903      	add	r1, sp, #12
   384a8:	a807      	add	r0, sp, #28
   384aa:	f7ff ff92 	bl	383d2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   384ae:	2310      	movs	r3, #16
   384b0:	4619      	mov	r1, r3
   384b2:	eb0d 0203 	add.w	r2, sp, r3
   384b6:	4668      	mov	r0, sp
   384b8:	f7ff fef5 	bl	382a6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   384bc:	4621      	mov	r1, r4
   384be:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   384c0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   384c2:	f7ff ff08 	bl	382d6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   384c6:	42b4      	cmp	r4, r6
   384c8:	d1db      	bne.n	38482 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   384ca:	f7ec fdf5 	bl	250b8 <sub_bytes>
	shift_rows(state);
   384ce:	4668      	mov	r0, sp
   384d0:	f7ff ff46 	bl	38360 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   384d4:	4621      	mov	r1, r4
   384d6:	4668      	mov	r0, sp
   384d8:	f7ff fefd 	bl	382d6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   384dc:	2310      	movs	r3, #16
   384de:	4619      	mov	r1, r3
   384e0:	466a      	mov	r2, sp
   384e2:	4628      	mov	r0, r5
   384e4:	f7ff fedf 	bl	382a6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   384e8:	4668      	mov	r0, sp
   384ea:	2210      	movs	r2, #16
   384ec:	2100      	movs	r1, #0
   384ee:	f7ff fee7 	bl	382c0 <_set>

	return TC_CRYPTO_SUCCESS;
   384f2:	2001      	movs	r0, #1
}
   384f4:	b008      	add	sp, #32
   384f6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   384f8:	4608      	mov	r0, r1
   384fa:	e7fb      	b.n	384f4 <tc_aes_encrypt+0xa0>
   384fc:	4610      	mov	r0, r2
   384fe:	e7f9      	b.n	384f4 <tc_aes_encrypt+0xa0>

00038500 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   38500:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   38502:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   38504:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   38506:	f912 3b10 	ldrsb.w	r3, [r2], #16
   3850a:	2b00      	cmp	r3, #0
   3850c:	bfac      	ite	ge
   3850e:	2300      	movge	r3, #0
   38510:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   38512:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   38516:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   3851a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   3851c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   38520:	d002      	beq.n	38528 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   38522:	7813      	ldrb	r3, [r2, #0]
   38524:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   38526:	e7f4      	b.n	38512 <gf_double+0x12>
	}
}
   38528:	bd10      	pop	{r4, pc}

0003852a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   3852a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   3852c:	b120      	cbz	r0, 38538 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   3852e:	2258      	movs	r2, #88	; 0x58
   38530:	2100      	movs	r1, #0
   38532:	f7ff fec5 	bl	382c0 <_set>
   38536:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   38538:	bd08      	pop	{r3, pc}

0003853a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   3853a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   3853c:	4604      	mov	r4, r0
   3853e:	b188      	cbz	r0, 38564 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   38540:	2210      	movs	r2, #16
   38542:	2100      	movs	r1, #0
   38544:	f7ff febc 	bl	382c0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   38548:	2210      	movs	r2, #16
   3854a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   3854e:	2100      	movs	r1, #0
   38550:	f7ff feb6 	bl	382c0 <_set>
	s->leftover_offset = 0;
   38554:	2300      	movs	r3, #0
   38556:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   38558:	2200      	movs	r2, #0
   3855a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3855e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   38562:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   38564:	bd10      	pop	{r4, pc}

00038566 <tc_cmac_setup>:
{
   38566:	b570      	push	{r4, r5, r6, lr}
   38568:	4604      	mov	r4, r0
   3856a:	460d      	mov	r5, r1
   3856c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   3856e:	b310      	cbz	r0, 385b6 <tc_cmac_setup+0x50>
   38570:	b311      	cbz	r1, 385b8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   38572:	2258      	movs	r2, #88	; 0x58
   38574:	2100      	movs	r1, #0
   38576:	f7ff fea3 	bl	382c0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   3857a:	4629      	mov	r1, r5
	s->sched = sched;
   3857c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   3857e:	4630      	mov	r0, r6
   38580:	f7ec fda6 	bl	250d0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   38584:	2210      	movs	r2, #16
   38586:	2100      	movs	r1, #0
   38588:	4620      	mov	r0, r4
   3858a:	f7ff fe99 	bl	382c0 <_set>
	gf_double (s->K1, s->iv);
   3858e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   38592:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   38594:	4621      	mov	r1, r4
   38596:	4620      	mov	r0, r4
   38598:	f7ff ff5c 	bl	38454 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   3859c:	4621      	mov	r1, r4
   3859e:	4628      	mov	r0, r5
   385a0:	f7ff ffae 	bl	38500 <gf_double>
	gf_double (s->K2, s->K1);
   385a4:	4629      	mov	r1, r5
   385a6:	f104 0020 	add.w	r0, r4, #32
   385aa:	f7ff ffa9 	bl	38500 <gf_double>
	tc_cmac_init(s);
   385ae:	4620      	mov	r0, r4
   385b0:	f7ff ffc3 	bl	3853a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   385b4:	2001      	movs	r0, #1
}
   385b6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   385b8:	4608      	mov	r0, r1
   385ba:	e7fc      	b.n	385b6 <tc_cmac_setup+0x50>

000385bc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   385bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   385c0:	460e      	mov	r6, r1
   385c2:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   385c4:	4604      	mov	r4, r0
   385c6:	2800      	cmp	r0, #0
   385c8:	d060      	beq.n	3868c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   385ca:	b1fa      	cbz	r2, 3860c <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   385cc:	2900      	cmp	r1, #0
   385ce:	d05d      	beq.n	3868c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   385d0:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   385d4:	ea53 0102 	orrs.w	r1, r3, r2
   385d8:	d058      	beq.n	3868c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   385da:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   385dc:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   385e0:	f142 32ff 	adc.w	r2, r2, #4294967295
   385e4:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   385e8:	f1b8 0f00 	cmp.w	r8, #0
   385ec:	d02c      	beq.n	38648 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   385ee:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   385f2:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   385f6:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   385f8:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   385fa:	d20a      	bcs.n	38612 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   385fc:	462b      	mov	r3, r5
   385fe:	4632      	mov	r2, r6
   38600:	4629      	mov	r1, r5
   38602:	f7ff fe50 	bl	382a6 <_copy>
			s->leftover_offset += data_length;
   38606:	6c63      	ldr	r3, [r4, #68]	; 0x44
   38608:	442b      	add	r3, r5
   3860a:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   3860c:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   3860e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   38612:	463b      	mov	r3, r7
   38614:	4632      	mov	r2, r6
   38616:	4639      	mov	r1, r7
   38618:	f7ff fe45 	bl	382a6 <_copy>
		data_length -= remaining_space;
   3861c:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   3861e:	2300      	movs	r3, #0
   38620:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   38622:	4445      	add	r5, r8
		data += remaining_space;
   38624:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   38626:	1e63      	subs	r3, r4, #1
   38628:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   3862c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   38630:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   38634:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   38636:	ea82 0200 	eor.w	r2, r2, r0
   3863a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3863c:	d1f6      	bne.n	3862c <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   3863e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   38640:	4621      	mov	r1, r4
   38642:	4620      	mov	r0, r4
   38644:	f7ff ff06 	bl	38454 <tc_aes_encrypt>
   38648:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   3864c:	2d10      	cmp	r5, #16
   3864e:	d80a      	bhi.n	38666 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   38650:	2d00      	cmp	r5, #0
   38652:	d0db      	beq.n	3860c <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   38654:	462b      	mov	r3, r5
   38656:	4632      	mov	r2, r6
   38658:	4629      	mov	r1, r5
   3865a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   3865e:	f7ff fe22 	bl	382a6 <_copy>
		s->leftover_offset = data_length;
   38662:	6465      	str	r5, [r4, #68]	; 0x44
   38664:	e7d2      	b.n	3860c <tc_cmac_update+0x50>
   38666:	1e63      	subs	r3, r4, #1
   38668:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   3866a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   3866e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   38672:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   38674:	ea82 0200 	eor.w	r2, r2, r0
   38678:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   3867a:	d1f6      	bne.n	3866a <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   3867c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   3867e:	4621      	mov	r1, r4
   38680:	4620      	mov	r0, r4
   38682:	f7ff fee7 	bl	38454 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   38686:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   38688:	3d10      	subs	r5, #16
   3868a:	e7df      	b.n	3864c <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   3868c:	2000      	movs	r0, #0
   3868e:	e7be      	b.n	3860e <tc_cmac_update+0x52>

00038690 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   38690:	b570      	push	{r4, r5, r6, lr}
   38692:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   38694:	4605      	mov	r5, r0
   38696:	b1e8      	cbz	r0, 386d4 <tc_cmac_final+0x44>
   38698:	b369      	cbz	r1, 386f6 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   3869a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   3869c:	2a10      	cmp	r2, #16
   3869e:	d11a      	bne.n	386d6 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   386a0:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   386a2:	1e63      	subs	r3, r4, #1
   386a4:	3901      	subs	r1, #1
   386a6:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   386aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   386ae:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   386b2:	4072      	eors	r2, r6
   386b4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   386b8:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   386ba:	ea82 0206 	eor.w	r2, r2, r6
   386be:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   386c0:	d1f3      	bne.n	386aa <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   386c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   386c4:	4621      	mov	r1, r4
   386c6:	4628      	mov	r0, r5
   386c8:	f7ff fec4 	bl	38454 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   386cc:	4620      	mov	r0, r4
   386ce:	f7ff ff2c 	bl	3852a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   386d2:	2001      	movs	r0, #1
}
   386d4:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   386d6:	f102 0030 	add.w	r0, r2, #48	; 0x30
   386da:	2100      	movs	r1, #0
   386dc:	f1c2 0210 	rsb	r2, r2, #16
   386e0:	4420      	add	r0, r4
   386e2:	f7ff fded 	bl	382c0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   386e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   386e8:	4423      	add	r3, r4
   386ea:	2280      	movs	r2, #128	; 0x80
   386ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   386f0:	f104 0120 	add.w	r1, r4, #32
   386f4:	e7d5      	b.n	386a2 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   386f6:	4608      	mov	r0, r1
   386f8:	e7ec      	b.n	386d4 <tc_cmac_final+0x44>

000386fa <abort_function>:
{
   386fa:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   386fc:	2000      	movs	r0, #0
   386fe:	f7ec f955 	bl	249ac <sys_reboot>

00038702 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   38702:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   38704:	6800      	ldr	r0, [r0, #0]
   38706:	f7ec be41 	b.w	2538c <z_arm_fatal_error>

0003870a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3870a:	2100      	movs	r1, #0
   3870c:	2001      	movs	r0, #1
   3870e:	f7ec be3d 	b.w	2538c <z_arm_fatal_error>

00038712 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   38712:	b508      	push	{r3, lr}
	handler();
   38714:	f7ec fed0 	bl	254b8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   38718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3871c:	f7ec bfac 	b.w	25678 <z_arm_exc_exit>

00038720 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   38720:	3901      	subs	r1, #1
   38722:	4603      	mov	r3, r0
   38724:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   38728:	b90a      	cbnz	r2, 3872e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   3872a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   3872c:	4770      	bx	lr
		*d = *s;
   3872e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   38732:	e7f7      	b.n	38724 <strcpy+0x4>

00038734 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   38734:	4603      	mov	r3, r0
	size_t n = 0;
   38736:	2000      	movs	r0, #0

	while (*s != '\0') {
   38738:	5c1a      	ldrb	r2, [r3, r0]
   3873a:	b902      	cbnz	r2, 3873e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   3873c:	4770      	bx	lr
		n++;
   3873e:	3001      	adds	r0, #1
   38740:	e7fa      	b.n	38738 <strlen+0x4>

00038742 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   38742:	4603      	mov	r3, r0
	size_t n = 0;
   38744:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   38746:	5c1a      	ldrb	r2, [r3, r0]
   38748:	b10a      	cbz	r2, 3874e <strnlen+0xc>
   3874a:	4288      	cmp	r0, r1
   3874c:	d100      	bne.n	38750 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   3874e:	4770      	bx	lr
		n++;
   38750:	3001      	adds	r0, #1
   38752:	e7f8      	b.n	38746 <strnlen+0x4>

00038754 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   38754:	1e43      	subs	r3, r0, #1
   38756:	3901      	subs	r1, #1
   38758:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   3875c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   38760:	4282      	cmp	r2, r0
   38762:	d101      	bne.n	38768 <strcmp+0x14>
   38764:	2a00      	cmp	r2, #0
   38766:	d1f7      	bne.n	38758 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   38768:	1a10      	subs	r0, r2, r0
   3876a:	4770      	bx	lr

0003876c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   3876c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   3876e:	b15a      	cbz	r2, 38788 <memcmp+0x1c>
   38770:	3901      	subs	r1, #1
   38772:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   38774:	f810 2b01 	ldrb.w	r2, [r0], #1
   38778:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   3877c:	42a0      	cmp	r0, r4
   3877e:	d001      	beq.n	38784 <memcmp+0x18>
   38780:	429a      	cmp	r2, r3
   38782:	d0f7      	beq.n	38774 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   38784:	1ad0      	subs	r0, r2, r3
}
   38786:	bd10      	pop	{r4, pc}
		return 0;
   38788:	4610      	mov	r0, r2
   3878a:	e7fc      	b.n	38786 <memcmp+0x1a>

0003878c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   3878c:	1a43      	subs	r3, r0, r1
   3878e:	4293      	cmp	r3, r2
{
   38790:	b510      	push	{r4, lr}
   38792:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   38796:	d308      	bcc.n	387aa <memmove+0x1e>
   38798:	3901      	subs	r1, #1
	char *dest = d;
   3879a:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   3879c:	429a      	cmp	r2, r3
   3879e:	d00b      	beq.n	387b8 <memmove+0x2c>
			*dest = *src;
   387a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   387a4:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   387a8:	e7f8      	b.n	3879c <memmove+0x10>
   387aa:	440a      	add	r2, r1
			dest[n] = src[n];
   387ac:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   387b0:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   387b4:	428a      	cmp	r2, r1
   387b6:	d1f9      	bne.n	387ac <memmove+0x20>
		}
	}

	return d;
}
   387b8:	bd10      	pop	{r4, pc}

000387ba <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   387ba:	b510      	push	{r4, lr}
   387bc:	1e43      	subs	r3, r0, #1
   387be:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   387c0:	4291      	cmp	r1, r2
   387c2:	d100      	bne.n	387c6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   387c4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   387c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   387ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   387ce:	e7f7      	b.n	387c0 <memcpy+0x6>

000387d0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   387d0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   387d2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   387d4:	4603      	mov	r3, r0
	while (n > 0) {
   387d6:	4293      	cmp	r3, r2
   387d8:	d100      	bne.n	387dc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   387da:	4770      	bx	lr
		*(d_byte++) = c_byte;
   387dc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   387e0:	e7f9      	b.n	387d6 <memset+0x6>

000387e2 <_stdout_hook_default>:
}
   387e2:	f04f 30ff 	mov.w	r0, #4294967295
   387e6:	4770      	bx	lr

000387e8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   387e8:	684b      	ldr	r3, [r1, #4]
   387ea:	2b01      	cmp	r3, #1
   387ec:	dd07      	ble.n	387fe <sprintf_out+0x16>
		*(p->ptr) = c;
   387ee:	680b      	ldr	r3, [r1, #0]
   387f0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   387f2:	680b      	ldr	r3, [r1, #0]
   387f4:	3301      	adds	r3, #1
   387f6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   387f8:	684b      	ldr	r3, [r1, #4]
   387fa:	3b01      	subs	r3, #1
   387fc:	604b      	str	r3, [r1, #4]
}
   387fe:	2000      	movs	r0, #0
   38800:	4770      	bx	lr

00038802 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   38802:	2806      	cmp	r0, #6
   38804:	d108      	bne.n	38818 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   38806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3880a:	2201      	movs	r2, #1
   3880c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   38810:	f3bf 8f4f 	dsb	sy
        __WFE();
   38814:	bf20      	wfe
    while (true)
   38816:	e7fd      	b.n	38814 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   38818:	4770      	bx	lr

0003881a <pm_state_exit_post_ops>:
   3881a:	2300      	movs	r3, #0
   3881c:	f383 8811 	msr	BASEPRI, r3
   38820:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   38824:	4770      	bx	lr

00038826 <bmd345_fem_init>:

#define MODE_PIN_NRF   NRF_GPIO_PIN_MAP(GPIO1_PORT, PA_MODE_PIN) 
#define A_SEL_PIN_NRF  NRF_GPIO_PIN_MAP(GPIO1_PORT, PA_A_SEL_PIN) 

static int bmd345_fem_init(const struct device *dev)
{
   38826:	b573      	push	{r0, r1, r4, r5, r6, lr}
   38828:	2422      	movs	r4, #34	; 0x22
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3882a:	a801      	add	r0, sp, #4
   3882c:	9401      	str	r4, [sp, #4]
   3882e:	f7ed fb57 	bl	25ee0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   38832:	9b01      	ldr	r3, [sp, #4]
   38834:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   38838:	2603      	movs	r6, #3
   3883a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   3883e:	2524      	movs	r5, #36	; 0x24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   38840:	a801      	add	r0, sp, #4
   38842:	9501      	str	r5, [sp, #4]
   38844:	f7ed fb4c 	bl	25ee0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   38848:	9b01      	ldr	r3, [sp, #4]
   3884a:	9401      	str	r4, [sp, #4]
   3884c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   38850:	2401      	movs	r4, #1
    reg->PIN_CNF[pin_number] = cnf;
   38852:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   38856:	a801      	add	r0, sp, #4
   38858:	f7ed fb42 	bl	25ee0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3885c:	9b01      	ldr	r3, [sp, #4]
   3885e:	9501      	str	r5, [sp, #4]
   38860:	fa04 f303 	lsl.w	r3, r4, r3
    p_reg->OUTCLR = clr_mask;
   38864:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   38868:	a801      	add	r0, sp, #4
   3886a:	f7ed fb39 	bl	25ee0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3886e:	9b01      	ldr	r3, [sp, #4]
   38870:	409c      	lsls	r4, r3
    p_reg->OUTCLR = clr_mask;
   38872:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
	nrf_gpio_pin_clear(A_SEL_PIN_NRF);
	
	return 0;

#endif
}
   38876:	2000      	movs	r0, #0
   38878:	b002      	add	sp, #8
   3887a:	bd70      	pop	{r4, r5, r6, pc}

0003887c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   3887c:	b510      	push	{r4, lr}
   3887e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   38880:	7801      	ldrb	r1, [r0, #0]
   38882:	7822      	ldrb	r2, [r4, #0]
   38884:	428a      	cmp	r2, r1
{
   38886:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   38888:	d00f      	beq.n	388aa <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   3888a:	4669      	mov	r1, sp
   3888c:	f7ed fbb2 	bl	25ff4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   38890:	a905      	add	r1, sp, #20
   38892:	4620      	mov	r0, r4
   38894:	f7ed fbae 	bl	25ff4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   38898:	2210      	movs	r2, #16
   3889a:	f10d 0115 	add.w	r1, sp, #21
   3889e:	f10d 0001 	add.w	r0, sp, #1
   388a2:	f7ff ff63 	bl	3876c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   388a6:	b00a      	add	sp, #40	; 0x28
   388a8:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   388aa:	2a01      	cmp	r2, #1
   388ac:	d006      	beq.n	388bc <bt_uuid_cmp+0x40>
   388ae:	2a02      	cmp	r2, #2
   388b0:	d007      	beq.n	388c2 <bt_uuid_cmp+0x46>
   388b2:	b972      	cbnz	r2, 388d2 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   388b4:	8840      	ldrh	r0, [r0, #2]
   388b6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   388b8:	1ac0      	subs	r0, r0, r3
   388ba:	e7f4      	b.n	388a6 <bt_uuid_cmp+0x2a>
   388bc:	6840      	ldr	r0, [r0, #4]
   388be:	6863      	ldr	r3, [r4, #4]
   388c0:	e7fa      	b.n	388b8 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   388c2:	2210      	movs	r2, #16
   388c4:	1c61      	adds	r1, r4, #1
   388c6:	3001      	adds	r0, #1
}
   388c8:	b00a      	add	sp, #40	; 0x28
   388ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   388ce:	f7ff bf4d 	b.w	3876c <memcmp>
	switch (u1->type) {
   388d2:	f06f 0015 	mvn.w	r0, #21
   388d6:	e7e6      	b.n	388a6 <bt_uuid_cmp+0x2a>

000388d8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   388d8:	2a04      	cmp	r2, #4
{
   388da:	b510      	push	{r4, lr}
	switch (data_len) {
   388dc:	d00a      	beq.n	388f4 <bt_uuid_create+0x1c>
   388de:	2a10      	cmp	r2, #16
   388e0:	d00d      	beq.n	388fe <bt_uuid_create+0x26>
   388e2:	2a02      	cmp	r2, #2
   388e4:	f04f 0300 	mov.w	r3, #0
   388e8:	d10f      	bne.n	3890a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   388ea:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   388ec:	880b      	ldrh	r3, [r1, #0]
   388ee:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   388f0:	2001      	movs	r0, #1
}
   388f2:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   388f4:	2301      	movs	r3, #1
   388f6:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   388f8:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   388fa:	6043      	str	r3, [r0, #4]
		break;
   388fc:	e7f8      	b.n	388f0 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   388fe:	2302      	movs	r3, #2
   38900:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   38904:	f7ff ff59 	bl	387ba <memcpy>
		break;
   38908:	e7f2      	b.n	388f0 <bt_uuid_create+0x18>
	switch (data_len) {
   3890a:	4618      	mov	r0, r3
   3890c:	e7f1      	b.n	388f2 <bt_uuid_create+0x1a>

0003890e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   3890e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   38910:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   38912:	2106      	movs	r1, #6
{
   38914:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   38916:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   3891a:	f7f6 fbc1 	bl	2f0a0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   3891e:	b918      	cbnz	r0, 38928 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   38920:	79a3      	ldrb	r3, [r4, #6]
   38922:	f063 033f 	orn	r3, r3, #63	; 0x3f
   38926:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   38928:	bd10      	pop	{r4, pc}

0003892a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   3892a:	280f      	cmp	r0, #15
   3892c:	d807      	bhi.n	3893e <bt_hci_evt_get_flags+0x14>
   3892e:	280d      	cmp	r0, #13
   38930:	d80b      	bhi.n	3894a <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   38932:	2805      	cmp	r0, #5
   38934:	bf08      	it	eq
   38936:	2003      	moveq	r0, #3
   38938:	bf18      	it	ne
   3893a:	2002      	movne	r0, #2
   3893c:	4770      	bx	lr
	switch (evt) {
   3893e:	2813      	cmp	r0, #19
   38940:	d003      	beq.n	3894a <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   38942:	281a      	cmp	r0, #26
   38944:	bf08      	it	eq
   38946:	2001      	moveq	r0, #1
   38948:	e7f6      	b.n	38938 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   3894a:	2001      	movs	r0, #1
	}
}
   3894c:	4770      	bx	lr

0003894e <hci_data_buf_overflow>:
}
   3894e:	4770      	bx	lr

00038950 <atomic_or>:
{
   38950:	b510      	push	{r4, lr}
   38952:	4603      	mov	r3, r0
}
   38954:	f3bf 8f5b 	dmb	ish
   38958:	e853 0f00 	ldrex	r0, [r3]
   3895c:	ea40 0201 	orr.w	r2, r0, r1
   38960:	e843 2400 	strex	r4, r2, [r3]
   38964:	2c00      	cmp	r4, #0
   38966:	d1f7      	bne.n	38958 <atomic_or+0x8>
   38968:	f3bf 8f5b 	dmb	ish
   3896c:	bd10      	pop	{r4, pc}

0003896e <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3896e:	f3bf 8f5b 	dmb	ish
   38972:	e850 3f00 	ldrex	r3, [r0]
   38976:	400b      	ands	r3, r1
   38978:	e840 3200 	strex	r2, r3, [r0]
   3897c:	2a00      	cmp	r2, #0
   3897e:	d1f8      	bne.n	38972 <atomic_and.isra.0+0x4>
   38980:	f3bf 8f5b 	dmb	ish
}
   38984:	4770      	bx	lr

00038986 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   38986:	4770      	bx	lr

00038988 <bt_hci_disconnect>:
{
   38988:	b570      	push	{r4, r5, r6, lr}
   3898a:	4606      	mov	r6, r0
   3898c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   3898e:	f240 4006 	movw	r0, #1030	; 0x406
   38992:	2103      	movs	r1, #3
   38994:	f7ed feb6 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   38998:	4604      	mov	r4, r0
   3899a:	b168      	cbz	r0, 389b8 <bt_hci_disconnect+0x30>
   3899c:	2103      	movs	r1, #3
   3899e:	300c      	adds	r0, #12
   389a0:	f7f3 fd44 	bl	2c42c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   389a4:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   389a6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   389a8:	4621      	mov	r1, r4
   389aa:	2200      	movs	r2, #0
}
   389ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   389b0:	f240 4006 	movw	r0, #1030	; 0x406
   389b4:	f7ed bef0 	b.w	26798 <bt_hci_cmd_send_sync>
}
   389b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   389bc:	bd70      	pop	{r4, r5, r6, pc}

000389be <bt_le_set_data_len>:
{
   389be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   389c0:	4607      	mov	r7, r0
   389c2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   389c4:	f242 0022 	movw	r0, #8226	; 0x2022
   389c8:	2106      	movs	r1, #6
{
   389ca:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   389cc:	f7ed fe9a 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   389d0:	4604      	mov	r4, r0
   389d2:	b178      	cbz	r0, 389f4 <bt_le_set_data_len+0x36>
   389d4:	2106      	movs	r1, #6
   389d6:	300c      	adds	r0, #12
   389d8:	f7f3 fd28 	bl	2c42c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   389dc:	883b      	ldrh	r3, [r7, #0]
   389de:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   389e0:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   389e2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   389e4:	4621      	mov	r1, r4
   389e6:	2200      	movs	r2, #0
}
   389e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   389ec:	f242 0022 	movw	r0, #8226	; 0x2022
   389f0:	f7ed bed2 	b.w	26798 <bt_hci_cmd_send_sync>
}
   389f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   389f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000389fa <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   389fa:	68c0      	ldr	r0, [r0, #12]
   389fc:	f7ed bf9e 	b.w	2693c <bt_hci_le_enh_conn_complete>

00038a00 <bt_le_conn_params_valid>:
{
   38a00:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   38a02:	8803      	ldrh	r3, [r0, #0]
   38a04:	8842      	ldrh	r2, [r0, #2]
   38a06:	4293      	cmp	r3, r2
   38a08:	d819      	bhi.n	38a3e <bt_le_conn_params_valid+0x3e>
   38a0a:	2b05      	cmp	r3, #5
   38a0c:	d917      	bls.n	38a3e <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   38a0e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   38a12:	d814      	bhi.n	38a3e <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   38a14:	8883      	ldrh	r3, [r0, #4]
   38a16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   38a1a:	d210      	bcs.n	38a3e <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   38a1c:	88c0      	ldrh	r0, [r0, #6]
   38a1e:	f1a0 010a 	sub.w	r1, r0, #10
   38a22:	b289      	uxth	r1, r1
   38a24:	f640 4476 	movw	r4, #3190	; 0xc76
   38a28:	42a1      	cmp	r1, r4
   38a2a:	d808      	bhi.n	38a3e <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   38a2c:	3301      	adds	r3, #1
   38a2e:	b29b      	uxth	r3, r3
   38a30:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   38a32:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   38a36:	bf34      	ite	cc
   38a38:	2001      	movcc	r0, #1
   38a3a:	2000      	movcs	r0, #0
}
   38a3c:	bd10      	pop	{r4, pc}
		return false;
   38a3e:	2000      	movs	r0, #0
   38a40:	e7fc      	b.n	38a3c <bt_le_conn_params_valid+0x3c>

00038a42 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   38a42:	2000      	movs	r0, #0
   38a44:	4770      	bx	lr

00038a46 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   38a46:	2000      	movs	r0, #0
   38a48:	4770      	bx	lr

00038a4a <bt_addr_le_eq>:
{
   38a4a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   38a4c:	2207      	movs	r2, #7
   38a4e:	f7ff fe8d 	bl	3876c <memcmp>
}
   38a52:	fab0 f080 	clz	r0, r0
   38a56:	0940      	lsrs	r0, r0, #5
   38a58:	bd08      	pop	{r3, pc}

00038a5a <bt_lookup_id_addr>:
	return addr;
   38a5a:	2800      	cmp	r0, #0
}
   38a5c:	bf0c      	ite	eq
   38a5e:	4608      	moveq	r0, r1
   38a60:	2000      	movne	r0, #0
   38a62:	4770      	bx	lr

00038a64 <bt_id_set_adv_random_addr>:
{
   38a64:	b570      	push	{r4, r5, r6, lr}
   38a66:	460d      	mov	r5, r1
	CHECKIF(adv == NULL || addr == NULL) {
   38a68:	4604      	mov	r4, r0
   38a6a:	2800      	cmp	r0, #0
   38a6c:	d042      	beq.n	38af4 <bt_id_set_adv_random_addr+0x90>
   38a6e:	2900      	cmp	r1, #0
   38a70:	d040      	beq.n	38af4 <bt_id_set_adv_random_addr+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38a72:	f3bf 8f5b 	dmb	ish
   38a76:	6903      	ldr	r3, [r0, #16]
   38a78:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_PARAMS_SET)) {
   38a7c:	079b      	lsls	r3, r3, #30
   38a7e:	f100 0610 	add.w	r6, r0, #16
   38a82:	d413      	bmi.n	38aac <bt_id_set_adv_random_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   38a84:	2206      	movs	r2, #6
   38a86:	3003      	adds	r0, #3
   38a88:	f7ff fe97 	bl	387ba <memcpy>
		adv->random_addr.type = BT_ADDR_LE_RANDOM;
   38a8c:	2301      	movs	r3, #1
   38a8e:	70a3      	strb	r3, [r4, #2]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38a90:	f3bf 8f5b 	dmb	ish
   38a94:	e856 3f00 	ldrex	r3, [r6]
   38a98:	f043 0308 	orr.w	r3, r3, #8
   38a9c:	e846 3200 	strex	r2, r3, [r6]
   38aa0:	2a00      	cmp	r2, #0
   38aa2:	d1f7      	bne.n	38a94 <bt_id_set_adv_random_addr+0x30>
   38aa4:	f3bf 8f5b 	dmb	ish
	return 0;
   38aa8:	2000      	movs	r0, #0
}
   38aaa:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR,
   38aac:	2107      	movs	r1, #7
   38aae:	f242 0035 	movw	r0, #8245	; 0x2035
   38ab2:	f7ed fe27 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   38ab6:	4606      	mov	r6, r0
   38ab8:	b1f8      	cbz	r0, 38afa <bt_id_set_adv_random_addr+0x96>
   38aba:	2107      	movs	r1, #7
   38abc:	300c      	adds	r0, #12
   38abe:	f7f3 fcb5 	bl	2c42c <net_buf_simple_add>
	cp->handle = adv->handle;
   38ac2:	7863      	ldrb	r3, [r4, #1]
   38ac4:	f800 3b01 	strb.w	r3, [r0], #1
   38ac8:	2206      	movs	r2, #6
   38aca:	4629      	mov	r1, r5
   38acc:	f7ff fe75 	bl	387ba <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_SET_RANDOM_ADDR, buf,
   38ad0:	2200      	movs	r2, #0
   38ad2:	4631      	mov	r1, r6
   38ad4:	f242 0035 	movw	r0, #8245	; 0x2035
   38ad8:	f7ed fe5e 	bl	26798 <bt_hci_cmd_send_sync>
	if (err) {
   38adc:	2800      	cmp	r0, #0
   38ade:	d1e4      	bne.n	38aaa <bt_id_set_adv_random_addr+0x46>
	if (&adv->random_addr.a != addr) {
   38ae0:	1ce0      	adds	r0, r4, #3
   38ae2:	4285      	cmp	r5, r0
   38ae4:	d003      	beq.n	38aee <bt_id_set_adv_random_addr+0x8a>
   38ae6:	2206      	movs	r2, #6
   38ae8:	4629      	mov	r1, r5
   38aea:	f7ff fe66 	bl	387ba <memcpy>
	adv->random_addr.type = BT_ADDR_LE_RANDOM;
   38aee:	2301      	movs	r3, #1
   38af0:	70a3      	strb	r3, [r4, #2]
	return 0;
   38af2:	e7d9      	b.n	38aa8 <bt_id_set_adv_random_addr+0x44>
		return -EINVAL;
   38af4:	f06f 0015 	mvn.w	r0, #21
   38af8:	e7d7      	b.n	38aaa <bt_id_set_adv_random_addr+0x46>
		return -ENOBUFS;
   38afa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38afe:	e7d4      	b.n	38aaa <bt_id_set_adv_random_addr+0x46>

00038b00 <bt_id_set_adv_private_addr>:
{
   38b00:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   38b02:	4604      	mov	r4, r0
   38b04:	b180      	cbz	r0, 38b28 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   38b06:	2106      	movs	r1, #6
   38b08:	4668      	mov	r0, sp
   38b0a:	f7f6 fac9 	bl	2f0a0 <bt_rand>
	if (err) {
   38b0e:	b948      	cbnz	r0, 38b24 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   38b10:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   38b14:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   38b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   38b1a:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   38b1c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   38b20:	f7ff ffa0 	bl	38a64 <bt_id_set_adv_random_addr>
}
   38b24:	b002      	add	sp, #8
   38b26:	bd10      	pop	{r4, pc}
		return -EINVAL;
   38b28:	f06f 0015 	mvn.w	r0, #21
   38b2c:	e7fa      	b.n	38b24 <bt_id_set_adv_private_addr+0x24>

00038b2e <bt_id_adv_limited_stopped>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38b2e:	3010      	adds	r0, #16
   38b30:	f3bf 8f5b 	dmb	ish
   38b34:	e850 3f00 	ldrex	r3, [r0]
   38b38:	f023 0310 	bic.w	r3, r3, #16
   38b3c:	e840 3200 	strex	r2, r3, [r0]
   38b40:	2a00      	cmp	r2, #0
   38b42:	d1f7      	bne.n	38b34 <bt_id_adv_limited_stopped+0x6>
   38b44:	f3bf 8f5b 	dmb	ish
}
   38b48:	4770      	bx	lr

00038b4a <get_adv_channel_map>:
{
   38b4a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   38b4c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   38b50:	bf0c      	ite	eq
   38b52:	2007      	moveq	r0, #7
   38b54:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   38b56:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   38b58:	bf48      	it	mi
   38b5a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   38b5e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   38b60:	bf48      	it	mi
   38b62:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   38b66:	4770      	bx	lr

00038b68 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38b68:	f3bf 8f5b 	dmb	ish
   38b6c:	6800      	ldr	r0, [r0, #0]
   38b6e:	f3bf 8f5b 	dmb	ish
}
   38b72:	4770      	bx	lr

00038b74 <atomic_test_bit>:
{
   38b74:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   38b76:	f7ff fff7 	bl	38b68 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   38b7a:	4108      	asrs	r0, r1
}
   38b7c:	f000 0001 	and.w	r0, r0, #1
   38b80:	bd08      	pop	{r3, pc}

00038b82 <atomic_and>:
{
   38b82:	b510      	push	{r4, lr}
   38b84:	4603      	mov	r3, r0
}
   38b86:	f3bf 8f5b 	dmb	ish
   38b8a:	e853 0f00 	ldrex	r0, [r3]
   38b8e:	ea00 0201 	and.w	r2, r0, r1
   38b92:	e843 2400 	strex	r4, r2, [r3]
   38b96:	2c00      	cmp	r4, #0
   38b98:	d1f7      	bne.n	38b8a <atomic_and+0x8>
   38b9a:	f3bf 8f5b 	dmb	ish
   38b9e:	bd10      	pop	{r4, pc}

00038ba0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   38ba0:	2207      	movs	r2, #7
   38ba2:	f7ff be0a 	b.w	387ba <memcpy>

00038ba6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   38ba6:	2301      	movs	r3, #1
{
   38ba8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   38baa:	fa03 f101 	lsl.w	r1, r3, r1
{
   38bae:	4604      	mov	r4, r0
	if (val) {
   38bb0:	b162      	cbz	r2, 38bcc <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38bb2:	f3bf 8f5b 	dmb	ish
   38bb6:	e854 3f00 	ldrex	r3, [r4]
   38bba:	430b      	orrs	r3, r1
   38bbc:	e844 3200 	strex	r2, r3, [r4]
   38bc0:	2a00      	cmp	r2, #0
   38bc2:	d1f8      	bne.n	38bb6 <atomic_set_bit_to+0x10>
   38bc4:	f3bf 8f5b 	dmb	ish
	}
}
   38bc8:	bc10      	pop	{r4}
   38bca:	4770      	bx	lr
   38bcc:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   38bce:	43c9      	mvns	r1, r1
   38bd0:	f7ff bfd7 	b.w	38b82 <atomic_and>

00038bd4 <le_adv_update>:
{
   38bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38bd8:	b087      	sub	sp, #28
   38bda:	4604      	mov	r4, r0
   38bdc:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
   38be0:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   38be4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   38be8:	460f      	mov	r7, r1
   38bea:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
   38bec:	2100      	movs	r1, #0
   38bee:	2210      	movs	r2, #16
   38bf0:	a802      	add	r0, sp, #8
{
   38bf2:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   38bf4:	f7ff fdec 	bl	387d0 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   38bf8:	bb85      	cbnz	r5, 38c5c <le_adv_update+0x88>
	if (!(ext_adv && scannable)) {
   38bfa:	f1bb 0f00 	cmp.w	fp, #0
   38bfe:	d002      	beq.n	38c06 <le_adv_update+0x32>
   38c00:	f1b8 0f00 	cmp.w	r8, #0
   38c04:	d11d      	bne.n	38c42 <le_adv_update+0x6e>
		d[0].len = ad_len;
   38c06:	e9cd 7a02 	strd	r7, sl, [sp, #8]
		d_len = 1;
   38c0a:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_ADV_DATA,
   38c0c:	aa02      	add	r2, sp, #8
   38c0e:	f242 0137 	movw	r1, #8247	; 0x2037
   38c12:	4620      	mov	r0, r4
   38c14:	f7ee fe20 	bl	27858 <hci_set_ad_ext>
		if (err) {
   38c18:	b980      	cbnz	r0, 38c3c <le_adv_update+0x68>
	if (scannable) {
   38c1a:	f1b8 0f00 	cmp.w	r8, #0
   38c1e:	d132      	bne.n	38c86 <le_adv_update+0xb2>
   38c20:	3410      	adds	r4, #16
   38c22:	f3bf 8f5b 	dmb	ish
   38c26:	e854 3f00 	ldrex	r3, [r4]
   38c2a:	f043 0304 	orr.w	r3, r3, #4
   38c2e:	e844 3200 	strex	r2, r3, [r4]
   38c32:	2a00      	cmp	r2, #0
   38c34:	d1f7      	bne.n	38c26 <le_adv_update+0x52>
   38c36:	f3bf 8f5b 	dmb	ish
	return 0;
   38c3a:	2000      	movs	r0, #0
}
   38c3c:	b007      	add	sp, #28
   38c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d[0].len = sd_len;
   38c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   38c44:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   38c46:	9303      	str	r3, [sp, #12]
		d_len = 1;
   38c48:	2301      	movs	r3, #1
		return hci_set_ad_ext(adv, BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA,
   38c4a:	aa02      	add	r2, sp, #8
   38c4c:	f242 0138 	movw	r1, #8248	; 0x2038
   38c50:	4620      	mov	r0, r4
   38c52:	f7ee fe01 	bl	27858 <hci_set_ad_ext>
		if (err) {
   38c56:	2800      	cmp	r0, #0
   38c58:	d0e2      	beq.n	38c20 <le_adv_update+0x4c>
   38c5a:	e7ef      	b.n	38c3c <le_adv_update+0x68>
		const char *name = bt_get_name();
   38c5c:	f7ee fc14 	bl	27488 <bt_get_name>
   38c60:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   38c62:	bb27      	cbnz	r7, 38cae <le_adv_update+0xda>
   38c64:	bb7e      	cbnz	r6, 38cc6 <le_adv_update+0xf2>
		data = (struct bt_data)BT_DATA(
   38c66:	4648      	mov	r0, r9
   38c68:	f7ff fd64 	bl	38734 <strlen>
   38c6c:	2209      	movs	r2, #9
   38c6e:	f88d 2000 	strb.w	r2, [sp]
   38c72:	f88d 0001 	strb.w	r0, [sp, #1]
   38c76:	f8cd 9004 	str.w	r9, [sp, #4]
	if (!(ext_adv && scannable)) {
   38c7a:	f1bb 0f00 	cmp.w	fp, #0
   38c7e:	d024      	beq.n	38cca <le_adv_update+0xf6>
   38c80:	f1b8 0f00 	cmp.w	r8, #0
   38c84:	d021      	beq.n	38cca <le_adv_update+0xf6>
		d[0].len = sd_len;
   38c86:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   38c88:	9602      	str	r6, [sp, #8]
		if (name_type == ADV_NAME_TYPE_SD) {
   38c8a:	2d02      	cmp	r5, #2
		d[0].len = sd_len;
   38c8c:	9303      	str	r3, [sp, #12]
		if (name_type == ADV_NAME_TYPE_SD) {
   38c8e:	d1db      	bne.n	38c48 <le_adv_update+0x74>
			d[1].len = 1;
   38c90:	2301      	movs	r3, #1
   38c92:	9305      	str	r3, [sp, #20]
			d[1].data = &data;
   38c94:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   38c98:	462b      	mov	r3, r5
   38c9a:	e7d6      	b.n	38c4a <le_adv_update+0x76>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   38c9c:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   38ca0:	3908      	subs	r1, #8
   38ca2:	2901      	cmp	r1, #1
   38ca4:	d91a      	bls.n	38cdc <le_adv_update+0x108>
	for (i = 0; i < ad_len; i++) {
   38ca6:	3201      	adds	r2, #1
   38ca8:	4592      	cmp	sl, r2
   38caa:	d1f7      	bne.n	38c9c <le_adv_update+0xc8>
   38cac:	e7da      	b.n	38c64 <le_adv_update+0x90>
   38cae:	2200      	movs	r2, #0
   38cb0:	e7fa      	b.n	38ca8 <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   38cb2:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   38cb6:	3908      	subs	r1, #8
   38cb8:	2901      	cmp	r1, #1
   38cba:	d90f      	bls.n	38cdc <le_adv_update+0x108>
	for (i = 0; i < ad_len; i++) {
   38cbc:	3201      	adds	r2, #1
   38cbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   38cc0:	4293      	cmp	r3, r2
   38cc2:	d1f6      	bne.n	38cb2 <le_adv_update+0xde>
   38cc4:	e7cf      	b.n	38c66 <le_adv_update+0x92>
   38cc6:	2200      	movs	r2, #0
   38cc8:	e7f9      	b.n	38cbe <le_adv_update+0xea>
		if (name_type == ADV_NAME_TYPE_AD) {
   38cca:	2d01      	cmp	r5, #1
		d[0].len = ad_len;
   38ccc:	e9cd 7a02 	strd	r7, sl, [sp, #8]
		if (name_type == ADV_NAME_TYPE_AD) {
   38cd0:	d19b      	bne.n	38c0a <le_adv_update+0x36>
			d[1].data = &data;
   38cd2:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   38cd6:	9505      	str	r5, [sp, #20]
			d_len = 2;
   38cd8:	2302      	movs	r3, #2
   38cda:	e797      	b.n	38c0c <le_adv_update+0x38>
			return -EINVAL;
   38cdc:	f06f 0015 	mvn.w	r0, #21
   38ce0:	e7ac      	b.n	38c3c <le_adv_update+0x68>

00038ce2 <get_adv_name_type>:
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   38ce2:	f100 0210 	add.w	r2, r0, #16
{
   38ce6:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   38ce8:	2109      	movs	r1, #9
   38cea:	4610      	mov	r0, r2
   38cec:	f7ff ff42 	bl	38b74 <atomic_test_bit>
   38cf0:	b928      	cbnz	r0, 38cfe <get_adv_name_type+0x1c>
}
   38cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   38cf6:	2108      	movs	r1, #8
   38cf8:	4610      	mov	r0, r2
   38cfa:	f7ff bf3b 	b.w	38b74 <atomic_test_bit>
}
   38cfe:	2002      	movs	r0, #2
   38d00:	bd08      	pop	{r3, pc}

00038d02 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   38d02:	6843      	ldr	r3, [r0, #4]
   38d04:	f013 0008 	ands.w	r0, r3, #8
   38d08:	d00a      	beq.n	38d20 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   38d0a:	035a      	lsls	r2, r3, #13
   38d0c:	d407      	bmi.n	38d1e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   38d0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   38d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   38d16:	bf14      	ite	ne
   38d18:	2002      	movne	r0, #2
   38d1a:	2001      	moveq	r0, #1
   38d1c:	4770      	bx	lr
   38d1e:	2001      	movs	r0, #1
}
   38d20:	4770      	bx	lr

00038d22 <bt_le_adv_set_enable_ext>:
{
   38d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38d26:	4680      	mov	r8, r0
   38d28:	b086      	sub	sp, #24
   38d2a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   38d2c:	f242 0039 	movw	r0, #8249	; 0x2039
   38d30:	2106      	movs	r1, #6
{
   38d32:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 6);
   38d34:	f7ed fce6 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   38d38:	4606      	mov	r6, r0
   38d3a:	b388      	cbz	r0, 38da0 <bt_le_adv_set_enable_ext+0x7e>
	return net_buf_simple_add_u8(&buf->b, val);
   38d3c:	f100 050c 	add.w	r5, r0, #12
	if (enable) {
   38d40:	b337      	cbz	r7, 38d90 <bt_le_adv_set_enable_ext+0x6e>
   38d42:	2101      	movs	r1, #1
   38d44:	4628      	mov	r0, r5
   38d46:	f001 fadc 	bl	3a302 <net_buf_simple_add_u8>
   38d4a:	2101      	movs	r1, #1
   38d4c:	4628      	mov	r0, r5
   38d4e:	f001 fad8 	bl	3a302 <net_buf_simple_add_u8>
   38d52:	f898 1001 	ldrb.w	r1, [r8, #1]
   38d56:	4628      	mov	r0, r5
   38d58:	f001 fad3 	bl	3a302 <net_buf_simple_add_u8>
	net_buf_add_le16(buf, param ? param->timeout : 0);
   38d5c:	b1d4      	cbz	r4, 38d94 <bt_le_adv_set_enable_ext+0x72>
	net_buf_simple_add_le16(&buf->b, val);
   38d5e:	8821      	ldrh	r1, [r4, #0]
   38d60:	4628      	mov	r0, r5
   38d62:	f001 fad5 	bl	3a310 <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   38d66:	78a1      	ldrb	r1, [r4, #2]
	return net_buf_simple_add_u8(&buf->b, val);
   38d68:	4628      	mov	r0, r5
   38d6a:	f001 faca 	bl	3a302 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   38d6e:	f108 0210 	add.w	r2, r8, #16
   38d72:	a903      	add	r1, sp, #12
   38d74:	4630      	mov	r0, r6
   38d76:	9700      	str	r7, [sp, #0]
   38d78:	2307      	movs	r3, #7
   38d7a:	f7ed fcb1 	bl	266e0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
   38d7e:	2200      	movs	r2, #0
   38d80:	4631      	mov	r1, r6
   38d82:	f242 0039 	movw	r0, #8249	; 0x2039
   38d86:	f7ed fd07 	bl	26798 <bt_hci_cmd_send_sync>
}
   38d8a:	b006      	add	sp, #24
   38d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38d90:	4639      	mov	r1, r7
   38d92:	e7d7      	b.n	38d44 <bt_le_adv_set_enable_ext+0x22>
	net_buf_simple_add_le16(&buf->b, val);
   38d94:	4621      	mov	r1, r4
   38d96:	4628      	mov	r0, r5
   38d98:	f001 faba 	bl	3a310 <net_buf_simple_add_le16>
	net_buf_add_u8(buf, param ? param->num_events : 0);
   38d9c:	4621      	mov	r1, r4
   38d9e:	e7e3      	b.n	38d68 <bt_le_adv_set_enable_ext+0x46>
		return -ENOBUFS;
   38da0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38da4:	e7f1      	b.n	38d8a <bt_le_adv_set_enable_ext+0x68>

00038da6 <bt_le_adv_set_enable>:
		return bt_le_adv_set_enable_ext(adv, enable, NULL);
   38da6:	2200      	movs	r2, #0
   38da8:	f7ff bfbb 	b.w	38d22 <bt_le_adv_set_enable_ext>

00038dac <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   38dac:	3020      	adds	r0, #32
   38dae:	f7f9 bf7d 	b.w	32cac <k_work_cancel_delayable>

00038db2 <bt_le_ext_adv_set_data>:
{
   38db2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   38db6:	4615      	mov	r5, r2
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   38db8:	f100 0210 	add.w	r2, r0, #16
{
   38dbc:	4604      	mov	r4, r0
   38dbe:	4688      	mov	r8, r1
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   38dc0:	4610      	mov	r0, r2
   38dc2:	210c      	movs	r1, #12
{
   38dc4:	4699      	mov	r9, r3
   38dc6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   38dca:	f7ff fed3 	bl	38b74 <atomic_test_bit>
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   38dce:	210b      	movs	r1, #11
	ext_adv = atomic_test_bit(adv->flags, BT_ADV_EXT_ADV);
   38dd0:	4606      	mov	r6, r0
	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);
   38dd2:	4610      	mov	r0, r2
   38dd4:	f7ff fece 	bl	38b74 <atomic_test_bit>
   38dd8:	4607      	mov	r7, r0
	if (ext_adv) {
   38dda:	b146      	cbz	r6, 38dee <bt_le_ext_adv_set_data+0x3c>
		if ((scannable && ad_len) ||
   38ddc:	b928      	cbnz	r0, 38dea <bt_le_ext_adv_set_data+0x38>
		    (!scannable && sd_len)) {
   38dde:	f1ba 0f00 	cmp.w	sl, #0
   38de2:	d004      	beq.n	38dee <bt_le_ext_adv_set_data+0x3c>
			return -ENOTSUP;
   38de4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   38de8:	e00e      	b.n	38e08 <bt_le_ext_adv_set_data+0x56>
		if ((scannable && ad_len) ||
   38dea:	2d00      	cmp	r5, #0
   38dec:	d1fa      	bne.n	38de4 <bt_le_ext_adv_set_data+0x32>
	return le_adv_update(adv, ad, ad_len, sd, sd_len, ext_adv, scannable,
   38dee:	4620      	mov	r0, r4
   38df0:	f7ff ff77 	bl	38ce2 <get_adv_name_type>
   38df4:	e9cd a600 	strd	sl, r6, [sp]
   38df8:	e9cd 7002 	strd	r7, r0, [sp, #8]
   38dfc:	464b      	mov	r3, r9
   38dfe:	462a      	mov	r2, r5
   38e00:	4641      	mov	r1, r8
   38e02:	4620      	mov	r0, r4
   38e04:	f7ff fee6 	bl	38bd4 <le_adv_update>
}
   38e08:	b004      	add	sp, #16
   38e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00038e0e <tx_complete_work>:
	tx_notify(conn);
   38e0e:	3828      	subs	r0, #40	; 0x28
   38e10:	f7ef ba50 	b.w	282b4 <tx_notify>

00038e14 <bt_conn_reset_rx_state>:
{
   38e14:	b510      	push	{r4, lr}
   38e16:	4604      	mov	r4, r0
	if (!conn->rx) {
   38e18:	6900      	ldr	r0, [r0, #16]
   38e1a:	b118      	cbz	r0, 38e24 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   38e1c:	f7f3 fa00 	bl	2c220 <net_buf_unref>
	conn->rx = NULL;
   38e20:	2300      	movs	r3, #0
   38e22:	6123      	str	r3, [r4, #16]
}
   38e24:	bd10      	pop	{r4, pc}

00038e26 <conn_lookup_handle>:
{
   38e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38e2a:	4607      	mov	r7, r0
   38e2c:	460e      	mov	r6, r1
   38e2e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   38e30:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   38e32:	f04f 09d0 	mov.w	r9, #208	; 0xd0
	for (i = 0; i < size; i++) {
   38e36:	42b4      	cmp	r4, r6
   38e38:	d103      	bne.n	38e42 <conn_lookup_handle+0x1c>
	return NULL;
   38e3a:	2300      	movs	r3, #0
}
   38e3c:	4618      	mov	r0, r3
   38e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   38e42:	fb09 7004 	mla	r0, r9, r4, r7
   38e46:	f7ef fcaf 	bl	287a8 <bt_conn_ref>
   38e4a:	4603      	mov	r3, r0
		if (!conn) {
   38e4c:	b158      	cbz	r0, 38e66 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   38e4e:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   38e50:	2d01      	cmp	r5, #1
   38e52:	d002      	beq.n	38e5a <conn_lookup_handle+0x34>
   38e54:	3d07      	subs	r5, #7
   38e56:	2d01      	cmp	r5, #1
   38e58:	d803      	bhi.n	38e62 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   38e5a:	881a      	ldrh	r2, [r3, #0]
   38e5c:	4542      	cmp	r2, r8
   38e5e:	d0ed      	beq.n	38e3c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   38e60:	4618      	mov	r0, r3
   38e62:	f7ef fccd 	bl	28800 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   38e66:	3401      	adds	r4, #1
   38e68:	e7e5      	b.n	38e36 <conn_lookup_handle+0x10>

00038e6a <bt_conn_connected>:
{
   38e6a:	b510      	push	{r4, lr}
   38e6c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   38e6e:	f7f0 f973 	bl	29158 <bt_l2cap_connected>
	notify_connected(conn);
   38e72:	4620      	mov	r0, r4
}
   38e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   38e78:	f7ef b9ee 	b.w	28258 <notify_connected>

00038e7c <bt_conn_get_security>:
}
   38e7c:	2001      	movs	r0, #1
   38e7e:	4770      	bx	lr

00038e80 <bt_conn_is_peer_addr_le>:
{
   38e80:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   38e82:	7a03      	ldrb	r3, [r0, #8]
   38e84:	428b      	cmp	r3, r1
{
   38e86:	4604      	mov	r4, r0
   38e88:	4615      	mov	r5, r2
	if (id != conn->id) {
   38e8a:	d115      	bne.n	38eb8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   38e8c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   38e90:	2207      	movs	r2, #7
   38e92:	4628      	mov	r0, r5
   38e94:	f7ff fc6a 	bl	3876c <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   38e98:	b180      	cbz	r0, 38ebc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   38e9a:	78e3      	ldrb	r3, [r4, #3]
   38e9c:	2207      	movs	r2, #7
   38e9e:	b943      	cbnz	r3, 38eb2 <bt_conn_is_peer_addr_le+0x32>
   38ea0:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   38ea4:	4628      	mov	r0, r5
   38ea6:	f7ff fc61 	bl	3876c <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   38eaa:	fab0 f080 	clz	r0, r0
   38eae:	0940      	lsrs	r0, r0, #5
}
   38eb0:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   38eb2:	f104 0197 	add.w	r1, r4, #151	; 0x97
   38eb6:	e7f5      	b.n	38ea4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   38eb8:	2000      	movs	r0, #0
   38eba:	e7f9      	b.n	38eb0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   38ebc:	2001      	movs	r0, #1
   38ebe:	e7f7      	b.n	38eb0 <bt_conn_is_peer_addr_le+0x30>

00038ec0 <bt_conn_exists_le>:
{
   38ec0:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   38ec2:	f7ef fecd 	bl	28c60 <bt_conn_lookup_addr_le>
	if (conn) {
   38ec6:	b110      	cbz	r0, 38ece <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   38ec8:	f7ef fc9a 	bl	28800 <bt_conn_unref>
		return true;
   38ecc:	2001      	movs	r0, #1
}
   38ece:	bd08      	pop	{r3, pc}

00038ed0 <bt_conn_get_dst>:
}
   38ed0:	3090      	adds	r0, #144	; 0x90
   38ed2:	4770      	bx	lr

00038ed4 <bt_conn_le_conn_update>:
{
   38ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38ed6:	4607      	mov	r7, r0
   38ed8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   38eda:	f242 0013 	movw	r0, #8211	; 0x2013
   38ede:	210e      	movs	r1, #14
   38ee0:	f7ed fc10 	bl	26704 <bt_hci_cmd_create>
	if (!buf) {
   38ee4:	4606      	mov	r6, r0
   38ee6:	b1d0      	cbz	r0, 38f1e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   38ee8:	210e      	movs	r1, #14
   38eea:	300c      	adds	r0, #12
   38eec:	f7f3 fa9e 	bl	2c42c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   38ef0:	220e      	movs	r2, #14
   38ef2:	4604      	mov	r4, r0
   38ef4:	2100      	movs	r1, #0
   38ef6:	f7ff fc6b 	bl	387d0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   38efa:	883b      	ldrh	r3, [r7, #0]
   38efc:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   38efe:	882b      	ldrh	r3, [r5, #0]
   38f00:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   38f02:	886b      	ldrh	r3, [r5, #2]
   38f04:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   38f06:	88ab      	ldrh	r3, [r5, #4]
   38f08:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   38f0a:	88eb      	ldrh	r3, [r5, #6]
   38f0c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   38f0e:	4631      	mov	r1, r6
   38f10:	2200      	movs	r2, #0
}
   38f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   38f16:	f242 0013 	movw	r0, #8211	; 0x2013
   38f1a:	f7ed bc3d 	b.w	26798 <bt_hci_cmd_send_sync>
}
   38f1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038f24 <l2cap_connected>:
}
   38f24:	4770      	bx	lr

00038f26 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   38f26:	4770      	bx	lr

00038f28 <bt_l2cap_chan_del>:
{
   38f28:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   38f2a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   38f2e:	4604      	mov	r4, r0
	if (!chan->conn) {
   38f30:	b123      	cbz	r3, 38f3c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   38f32:	686b      	ldr	r3, [r5, #4]
   38f34:	b103      	cbz	r3, 38f38 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   38f36:	4798      	blx	r3
	chan->conn = NULL;
   38f38:	2300      	movs	r3, #0
   38f3a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   38f3c:	68e3      	ldr	r3, [r4, #12]
   38f3e:	b10b      	cbz	r3, 38f44 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   38f40:	4620      	mov	r0, r4
   38f42:	4798      	blx	r3
	if (ops->released) {
   38f44:	6a2b      	ldr	r3, [r5, #32]
   38f46:	b11b      	cbz	r3, 38f50 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   38f48:	4620      	mov	r0, r4
}
   38f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   38f4e:	4718      	bx	r3
}
   38f50:	bd70      	pop	{r4, r5, r6, pc}

00038f52 <bt_l2cap_disconnected>:
{
   38f52:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   38f54:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   38f56:	b130      	cbz	r0, 38f66 <bt_l2cap_disconnected+0x14>
	return node->next;
   38f58:	f850 4908 	ldr.w	r4, [r0], #-8
   38f5c:	b104      	cbz	r4, 38f60 <bt_l2cap_disconnected+0xe>
   38f5e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   38f60:	f7ff ffe2 	bl	38f28 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   38f64:	b904      	cbnz	r4, 38f68 <bt_l2cap_disconnected+0x16>
}
   38f66:	bd38      	pop	{r3, r4, r5, pc}
   38f68:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   38f6a:	b12d      	cbz	r5, 38f78 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   38f6c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   38f6e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   38f70:	f7ff ffda 	bl	38f28 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   38f74:	462c      	mov	r4, r5
   38f76:	e7f7      	b.n	38f68 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   38f78:	4620      	mov	r0, r4
}
   38f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   38f7e:	f7ff bfd3 	b.w	38f28 <bt_l2cap_chan_del>

00038f82 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   38f82:	3104      	adds	r1, #4
   38f84:	f7ef bd48 	b.w	28a18 <bt_conn_create_pdu_timeout>

00038f88 <bt_l2cap_send_cb>:
{
   38f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38f8c:	4614      	mov	r4, r2
   38f8e:	4605      	mov	r5, r0
   38f90:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   38f92:	f102 000c 	add.w	r0, r2, #12
   38f96:	2104      	movs	r1, #4
   38f98:	461e      	mov	r6, r3
   38f9a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   38f9e:	f7f3 f9f5 	bl	2c38c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   38fa2:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   38fa4:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   38fa6:	3a04      	subs	r2, #4
   38fa8:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   38faa:	4643      	mov	r3, r8
   38fac:	4632      	mov	r2, r6
   38fae:	4621      	mov	r1, r4
   38fb0:	4628      	mov	r0, r5
}
   38fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   38fb6:	f7ef bb67 	b.w	28688 <bt_conn_send_cb>

00038fba <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   38fba:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   38fbc:	b130      	cbz	r0, 38fcc <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   38fbe:	8983      	ldrh	r3, [r0, #12]
   38fc0:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   38fc2:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   38fc6:	d001      	beq.n	38fcc <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   38fc8:	6880      	ldr	r0, [r0, #8]
   38fca:	e7f7      	b.n	38fbc <bt_l2cap_le_lookup_rx_cid+0x2>
}
   38fcc:	4770      	bx	lr

00038fce <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   38fce:	4770      	bx	lr

00038fd0 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   38fd0:	4603      	mov	r3, r0
	return list->head;
   38fd2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   38fd4:	b128      	cbz	r0, 38fe2 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   38fd6:	6859      	ldr	r1, [r3, #4]
	return node->next;
   38fd8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   38fda:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   38fdc:	4288      	cmp	r0, r1
	list->tail = node;
   38fde:	bf08      	it	eq
   38fe0:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   38fe2:	4770      	bx	lr

00038fe4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   38fe4:	4603      	mov	r3, r0
	size_t bytes = 0;
   38fe6:	2000      	movs	r0, #0

	while (buf) {
   38fe8:	b903      	cbnz	r3, 38fec <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   38fea:	4770      	bx	lr
		bytes += buf->len;
   38fec:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   38fee:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   38ff0:	4410      	add	r0, r2
		buf = buf->frags;
   38ff2:	e7f9      	b.n	38fe8 <net_buf_frags_len+0x4>

00038ff4 <attr_read_type_cb>:
{
   38ff4:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   38ff6:	68d4      	ldr	r4, [r2, #12]
   38ff8:	7823      	ldrb	r3, [r4, #0]
   38ffa:	3102      	adds	r1, #2
   38ffc:	b913      	cbnz	r3, 39004 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   38ffe:	7021      	strb	r1, [r4, #0]
	return true;
   39000:	2001      	movs	r0, #1
}
   39002:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   39004:	428b      	cmp	r3, r1
   39006:	d0fb      	beq.n	39000 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   39008:	8a03      	ldrh	r3, [r0, #16]
   3900a:	3b02      	subs	r3, #2
   3900c:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   3900e:	2000      	movs	r0, #0
   39010:	6110      	str	r0, [r2, #16]
		return false;
   39012:	e7f6      	b.n	39002 <attr_read_type_cb+0xe>

00039014 <att_prepare_write_req>:
}
   39014:	2006      	movs	r0, #6
   39016:	4770      	bx	lr

00039018 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39018:	f3bf 8f5b 	dmb	ish
   3901c:	6800      	ldr	r0, [r0, #0]
   3901e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   39022:	4108      	asrs	r0, r1
}
   39024:	f000 0001 	and.w	r0, r0, #1
   39028:	4770      	bx	lr

0003902a <write_cb>:
{
   3902a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3902c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   3902e:	4601      	mov	r1, r0
{
   39030:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   39032:	f44f 7295 	mov.w	r2, #298	; 0x12a
   39036:	6820      	ldr	r0, [r4, #0]
   39038:	f000 feae 	bl	39d98 <bt_gatt_check_perm>
   3903c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   3903e:	bb00      	cbnz	r0, 39082 <write_cb+0x58>
	if (!data->req) {
   39040:	7a23      	ldrb	r3, [r4, #8]
   39042:	b1b3      	cbz	r3, 39072 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   39044:	f1a3 0218 	sub.w	r2, r3, #24
   39048:	4253      	negs	r3, r2
   3904a:	4153      	adcs	r3, r2
   3904c:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   3904e:	9301      	str	r3, [sp, #4]
   39050:	8a63      	ldrh	r3, [r4, #18]
   39052:	9300      	str	r3, [sp, #0]
   39054:	68ae      	ldr	r6, [r5, #8]
   39056:	8a23      	ldrh	r3, [r4, #16]
   39058:	68e2      	ldr	r2, [r4, #12]
   3905a:	6820      	ldr	r0, [r4, #0]
   3905c:	4629      	mov	r1, r5
   3905e:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   39060:	2800      	cmp	r0, #0
   39062:	db08      	blt.n	39076 <write_cb+0x4c>
   39064:	8a23      	ldrh	r3, [r4, #16]
   39066:	4298      	cmp	r0, r3
   39068:	d10e      	bne.n	39088 <write_cb+0x5e>
	data->err = 0U;
   3906a:	2300      	movs	r3, #0
   3906c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   3906e:	2001      	movs	r0, #1
   39070:	e008      	b.n	39084 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   39072:	2302      	movs	r3, #2
   39074:	e7eb      	b.n	3904e <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   39076:	f110 0fff 	cmn.w	r0, #255	; 0xff
   3907a:	d305      	bcc.n	39088 <write_cb+0x5e>
		return -err;
   3907c:	4240      	negs	r0, r0
   3907e:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   39080:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   39082:	2000      	movs	r0, #0
}
   39084:	b002      	add	sp, #8
   39086:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   39088:	200e      	movs	r0, #14
   3908a:	e7f9      	b.n	39080 <write_cb+0x56>

0003908c <bt_gatt_foreach_attr>:
{
   3908c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   3908e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   39092:	2300      	movs	r3, #0
   39094:	9300      	str	r3, [sp, #0]
   39096:	461a      	mov	r2, r3
   39098:	f7f1 fb24 	bl	2a6e4 <bt_gatt_foreach_attr_type>
}
   3909c:	b005      	add	sp, #20
   3909e:	f85d fb04 	ldr.w	pc, [sp], #4

000390a2 <find_type_cb>:
{
   390a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   390a6:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   390a8:	f8d2 9000 	ldr.w	r9, [r2]
{
   390ac:	4607      	mov	r7, r0
   390ae:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   390b0:	2500      	movs	r5, #0
   390b2:	f642 0301 	movw	r3, #10241	; 0x2801
   390b6:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   390b8:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   390bc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   390c0:	a90b      	add	r1, sp, #44	; 0x2c
{
   390c2:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   390c4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   390c8:	f7ff fbd8 	bl	3887c <bt_uuid_cmp>
   390cc:	2800      	cmp	r0, #0
   390ce:	d079      	beq.n	391c4 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   390d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   390d4:	6838      	ldr	r0, [r7, #0]
   390d6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   390da:	a90b      	add	r1, sp, #44	; 0x2c
   390dc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   390e0:	f7ff fbcc 	bl	3887c <bt_uuid_cmp>
   390e4:	b138      	cbz	r0, 390f6 <find_type_cb+0x54>
		if (data->group &&
   390e6:	68a3      	ldr	r3, [r4, #8]
   390e8:	b11b      	cbz	r3, 390f2 <find_type_cb+0x50>
   390ea:	885a      	ldrh	r2, [r3, #2]
   390ec:	42b2      	cmp	r2, r6
   390ee:	d200      	bcs.n	390f2 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   390f0:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   390f2:	2001      	movs	r0, #1
   390f4:	e009      	b.n	3910a <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   390f6:	6861      	ldr	r1, [r4, #4]
   390f8:	4608      	mov	r0, r1
   390fa:	f7ff ff73 	bl	38fe4 <net_buf_frags_len>
   390fe:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   39102:	1a1b      	subs	r3, r3, r0
   39104:	2b03      	cmp	r3, #3
   39106:	d803      	bhi.n	39110 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   39108:	2000      	movs	r0, #0
}
   3910a:	b011      	add	sp, #68	; 0x44
   3910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   39110:	4608      	mov	r0, r1
   39112:	f7f3 f8dd 	bl	2c2d0 <net_buf_frag_last>
   39116:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   39118:	6860      	ldr	r0, [r4, #4]
   3911a:	f7ff ff63 	bl	38fe4 <net_buf_frags_len>
   3911e:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   39122:	f105 0b0c 	add.w	fp, r5, #12
   39126:	ebaa 0a00 	sub.w	sl, sl, r0
   3912a:	4658      	mov	r0, fp
   3912c:	f001 f8d5 	bl	3a2da <net_buf_simple_tailroom>
   39130:	4582      	cmp	sl, r0
   39132:	d23f      	bcs.n	391b4 <find_type_cb+0x112>
   39134:	6860      	ldr	r0, [r4, #4]
   39136:	f7ff ff55 	bl	38fe4 <net_buf_frags_len>
   3913a:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   3913e:	1a18      	subs	r0, r3, r0
	if (!len) {
   39140:	b970      	cbnz	r0, 39160 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   39142:	6863      	ldr	r3, [r4, #4]
   39144:	7a98      	ldrb	r0, [r3, #10]
   39146:	f7f2 fe89 	bl	2be5c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   3914a:	2200      	movs	r2, #0
   3914c:	2300      	movs	r3, #0
   3914e:	f001 f8b1 	bl	3a2b4 <net_buf_alloc_fixed>
		if (!frag) {
   39152:	4605      	mov	r5, r0
   39154:	2800      	cmp	r0, #0
   39156:	d0d7      	beq.n	39108 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   39158:	4601      	mov	r1, r0
   3915a:	6860      	ldr	r0, [r4, #4]
   3915c:	f7f3 f8f6 	bl	2c34c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   39160:	2300      	movs	r3, #0
   39162:	9300      	str	r3, [sp, #0]
   39164:	f8d7 9004 	ldr.w	r9, [r7, #4]
   39168:	4639      	mov	r1, r7
   3916a:	2310      	movs	r3, #16
   3916c:	aa02      	add	r2, sp, #8
   3916e:	4640      	mov	r0, r8
   39170:	47c8      	blx	r9
	if (read < 0) {
   39172:	1e07      	subs	r7, r0, #0
   39174:	db26      	blt.n	391c4 <find_type_cb+0x122>
	if (read != data->value_len) {
   39176:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   39178:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   3917a:	42ba      	cmp	r2, r7
   3917c:	d01e      	beq.n	391bc <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   3917e:	4601      	mov	r1, r0
   39180:	a80b      	add	r0, sp, #44	; 0x2c
   39182:	f7ff fba9 	bl	388d8 <bt_uuid_create>
   39186:	b1e8      	cbz	r0, 391c4 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   39188:	b2fa      	uxtb	r2, r7
   3918a:	a902      	add	r1, sp, #8
   3918c:	a806      	add	r0, sp, #24
   3918e:	f7ff fba3 	bl	388d8 <bt_uuid_create>
   39192:	b1b8      	cbz	r0, 391c4 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   39194:	a906      	add	r1, sp, #24
   39196:	a80b      	add	r0, sp, #44	; 0x2c
   39198:	f7ff fb70 	bl	3887c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   3919c:	b990      	cbnz	r0, 391c4 <find_type_cb+0x122>
	data->err = 0x00;
   3919e:	2300      	movs	r3, #0
   391a0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   391a2:	2104      	movs	r1, #4
   391a4:	f105 000c 	add.w	r0, r5, #12
   391a8:	f7f3 f940 	bl	2c42c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   391ac:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   391ae:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   391b0:	68a3      	ldr	r3, [r4, #8]
   391b2:	e79d      	b.n	390f0 <find_type_cb+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   391b4:	4658      	mov	r0, fp
   391b6:	f001 f890 	bl	3a2da <net_buf_simple_tailroom>
   391ba:	e7c1      	b.n	39140 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   391bc:	a902      	add	r1, sp, #8
   391be:	f7ff fad5 	bl	3876c <memcmp>
   391c2:	e7eb      	b.n	3919c <find_type_cb+0xfa>
	data->group = NULL;
   391c4:	2300      	movs	r3, #0
   391c6:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   391c8:	e793      	b.n	390f2 <find_type_cb+0x50>

000391ca <find_info_cb>:
{
   391ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   391cc:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   391ce:	6817      	ldr	r7, [r2, #0]
{
   391d0:	4605      	mov	r5, r0
   391d2:	460e      	mov	r6, r1
   391d4:	4614      	mov	r4, r2
	if (!data->rsp) {
   391d6:	b963      	cbnz	r3, 391f2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   391d8:	6850      	ldr	r0, [r2, #4]
   391da:	2101      	movs	r1, #1
   391dc:	300c      	adds	r0, #12
   391de:	f7f3 f925 	bl	2c42c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   391e2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   391e4:	682b      	ldr	r3, [r5, #0]
   391e6:	781b      	ldrb	r3, [r3, #0]
   391e8:	2b00      	cmp	r3, #0
   391ea:	bf14      	ite	ne
   391ec:	2302      	movne	r3, #2
   391ee:	2301      	moveq	r3, #1
   391f0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   391f2:	68a3      	ldr	r3, [r4, #8]
   391f4:	781b      	ldrb	r3, [r3, #0]
   391f6:	2b01      	cmp	r3, #1
   391f8:	d003      	beq.n	39202 <find_info_cb+0x38>
   391fa:	2b02      	cmp	r3, #2
   391fc:	d019      	beq.n	39232 <find_info_cb+0x68>
   391fe:	2000      	movs	r0, #0
   39200:	e016      	b.n	39230 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   39202:	682b      	ldr	r3, [r5, #0]
   39204:	781b      	ldrb	r3, [r3, #0]
   39206:	2b00      	cmp	r3, #0
   39208:	d1f9      	bne.n	391fe <find_info_cb+0x34>
   3920a:	6860      	ldr	r0, [r4, #4]
   3920c:	2104      	movs	r1, #4
   3920e:	300c      	adds	r0, #12
   39210:	f7f3 f90c 	bl	2c42c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   39214:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   39216:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   39218:	682a      	ldr	r2, [r5, #0]
   3921a:	68e3      	ldr	r3, [r4, #12]
   3921c:	8852      	ldrh	r2, [r2, #2]
   3921e:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   39220:	6863      	ldr	r3, [r4, #4]
   39222:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   39224:	8a1b      	ldrh	r3, [r3, #16]
   39226:	1ac0      	subs	r0, r0, r3
   39228:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   3922a:	bf94      	ite	ls
   3922c:	2000      	movls	r0, #0
   3922e:	2001      	movhi	r0, #1
}
   39230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   39232:	682b      	ldr	r3, [r5, #0]
   39234:	781b      	ldrb	r3, [r3, #0]
   39236:	2b02      	cmp	r3, #2
   39238:	d1e1      	bne.n	391fe <find_info_cb+0x34>
   3923a:	6860      	ldr	r0, [r4, #4]
   3923c:	2112      	movs	r1, #18
   3923e:	300c      	adds	r0, #12
   39240:	f7f3 f8f4 	bl	2c42c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   39244:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   39246:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   39248:	6829      	ldr	r1, [r5, #0]
   3924a:	68e0      	ldr	r0, [r4, #12]
   3924c:	2210      	movs	r2, #16
   3924e:	3101      	adds	r1, #1
   39250:	3002      	adds	r0, #2
   39252:	f7ff fab2 	bl	387ba <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   39256:	6863      	ldr	r3, [r4, #4]
   39258:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   3925a:	8a1b      	ldrh	r3, [r3, #16]
   3925c:	1ac0      	subs	r0, r0, r3
   3925e:	2812      	cmp	r0, #18
   39260:	e7e3      	b.n	3922a <find_info_cb+0x60>

00039262 <att_chan_mtu_updated>:
{
   39262:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   39264:	6805      	ldr	r5, [r0, #0]
	return list->head;
   39266:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39268:	b352      	cbz	r2, 392c0 <att_chan_mtu_updated+0x5e>
	return node->next;
   3926a:	6813      	ldr	r3, [r2, #0]
   3926c:	b103      	cbz	r3, 39270 <att_chan_mtu_updated+0xe>
   3926e:	3bf0      	subs	r3, #240	; 0xf0
   39270:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   39274:	2200      	movs	r2, #0
   39276:	4611      	mov	r1, r2
   39278:	e000      	b.n	3927c <att_chan_mtu_updated+0x1a>
   3927a:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   3927c:	4284      	cmp	r4, r0
   3927e:	d007      	beq.n	39290 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   39280:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   39282:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   39284:	42b1      	cmp	r1, r6
   39286:	bf38      	it	cc
   39288:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   3928a:	42a2      	cmp	r2, r4
   3928c:	bf38      	it	cc
   3928e:	4622      	movcc	r2, r4
   39290:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39292:	b12b      	cbz	r3, 392a0 <att_chan_mtu_updated+0x3e>
   39294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   39298:	2b00      	cmp	r3, #0
   3929a:	d1ee      	bne.n	3927a <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   3929c:	4284      	cmp	r4, r0
   3929e:	d1ef      	bne.n	39280 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   392a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   392a2:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   392a4:	428b      	cmp	r3, r1
   392a6:	d801      	bhi.n	392ac <att_chan_mtu_updated+0x4a>
   392a8:	4290      	cmp	r0, r2
   392aa:	d90b      	bls.n	392c4 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   392ac:	4282      	cmp	r2, r0
   392ae:	bf38      	it	cc
   392b0:	4602      	movcc	r2, r0
   392b2:	4299      	cmp	r1, r3
   392b4:	6828      	ldr	r0, [r5, #0]
   392b6:	bf38      	it	cc
   392b8:	4619      	movcc	r1, r3
}
   392ba:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   392bc:	f7f1 beaa 	b.w	2b014 <bt_gatt_att_max_mtu_changed>
   392c0:	4611      	mov	r1, r2
   392c2:	e7ed      	b.n	392a0 <att_chan_mtu_updated+0x3e>
}
   392c4:	bc70      	pop	{r4, r5, r6}
   392c6:	4770      	bx	lr

000392c8 <attr_read_group_cb>:
	if (!data->rsp->len) {
   392c8:	68d0      	ldr	r0, [r2, #12]
   392ca:	7803      	ldrb	r3, [r0, #0]
   392cc:	3104      	adds	r1, #4
   392ce:	b913      	cbnz	r3, 392d6 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   392d0:	7001      	strb	r1, [r0, #0]
	return true;
   392d2:	2001      	movs	r0, #1
   392d4:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   392d6:	428b      	cmp	r3, r1
   392d8:	d0fb      	beq.n	392d2 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   392da:	6891      	ldr	r1, [r2, #8]
   392dc:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   392de:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   392e0:	3b04      	subs	r3, #4
   392e2:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   392e4:	6110      	str	r0, [r2, #16]
}
   392e6:	4770      	bx	lr

000392e8 <chan_req_send>:
{
   392e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   392ea:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   392ec:	6888      	ldr	r0, [r1, #8]
   392ee:	f7ff fe79 	bl	38fe4 <net_buf_frags_len>
   392f2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   392f4:	4283      	cmp	r3, r0
{
   392f6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   392f8:	d30d      	bcc.n	39316 <chan_req_send+0x2e>
	chan->req = req;
   392fa:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   392fe:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   39300:	2600      	movs	r6, #0
   39302:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   39304:	4628      	mov	r0, r5
   39306:	4639      	mov	r1, r7
   39308:	f7f0 f8be 	bl	29488 <chan_send>
	if (err) {
   3930c:	b110      	cbz	r0, 39314 <chan_req_send+0x2c>
		req->buf = buf;
   3930e:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   39310:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   39314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   39316:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3931a:	e7fb      	b.n	39314 <chan_req_send+0x2c>

0003931c <bt_att_chan_send_rsp>:
{
   3931c:	b538      	push	{r3, r4, r5, lr}
   3931e:	4604      	mov	r4, r0
   39320:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   39322:	f7f0 f8b1 	bl	29488 <chan_send>
	if (err) {
   39326:	b130      	cbz	r0, 39336 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   39328:	4629      	mov	r1, r5
   3932a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   3932e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   39332:	f7f2 bf55 	b.w	2c1e0 <net_buf_put>
}
   39336:	bd38      	pop	{r3, r4, r5, pc}

00039338 <process_queue>:
{
   39338:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   3933a:	2200      	movs	r2, #0
{
   3933c:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   3933e:	2300      	movs	r3, #0
   39340:	4608      	mov	r0, r1
{
   39342:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   39344:	f000 ffbb 	bl	3a2be <net_buf_get>
	if (buf) {
   39348:	4605      	mov	r5, r0
   3934a:	b158      	cbz	r0, 39364 <process_queue+0x2c>
	return chan_send(chan, buf);
   3934c:	4601      	mov	r1, r0
   3934e:	4620      	mov	r0, r4
   39350:	f7f0 f89a 	bl	29488 <chan_send>
		if (err) {
   39354:	4604      	mov	r4, r0
   39356:	b118      	cbz	r0, 39360 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   39358:	4629      	mov	r1, r5
   3935a:	4630      	mov	r0, r6
   3935c:	f002 f8e1 	bl	3b522 <k_queue_prepend>
}
   39360:	4620      	mov	r0, r4
   39362:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   39364:	f06f 0401 	mvn.w	r4, #1
   39368:	e7fa      	b.n	39360 <process_queue+0x28>

0003936a <att_chan_read>:
{
   3936a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3936e:	4680      	mov	r8, r0
   39370:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   39372:	4610      	mov	r0, r2
{
   39374:	4699      	mov	r9, r3
   39376:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   39378:	f7ff fe34 	bl	38fe4 <net_buf_frags_len>
   3937c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   39380:	4283      	cmp	r3, r0
{
   39382:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   39384:	d97a      	bls.n	3947c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   39386:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3938a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   3938c:	4630      	mov	r0, r6
   3938e:	f7f2 ff9f 	bl	2c2d0 <net_buf_frag_last>
	size_t len, total = 0;
   39392:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   39396:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39398:	4630      	mov	r0, r6
   3939a:	f7ff fe23 	bl	38fe4 <net_buf_frags_len>
   3939e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   393a2:	f105 070c 	add.w	r7, r5, #12
   393a6:	1a24      	subs	r4, r4, r0
   393a8:	4638      	mov	r0, r7
   393aa:	f000 ff96 	bl	3a2da <net_buf_simple_tailroom>
   393ae:	4284      	cmp	r4, r0
   393b0:	d211      	bcs.n	393d6 <att_chan_read+0x6c>
   393b2:	4630      	mov	r0, r6
   393b4:	f7ff fe16 	bl	38fe4 <net_buf_frags_len>
   393b8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   393bc:	1a24      	subs	r4, r4, r0
		if (!len) {
   393be:	bb34      	cbnz	r4, 3940e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   393c0:	7ab0      	ldrb	r0, [r6, #10]
   393c2:	f7f2 fd4b 	bl	2be5c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   393c6:	2200      	movs	r2, #0
   393c8:	2300      	movs	r3, #0
   393ca:	f000 ff73 	bl	3a2b4 <net_buf_alloc_fixed>
			if (!frag) {
   393ce:	4605      	mov	r5, r0
   393d0:	b930      	cbnz	r0, 393e0 <att_chan_read+0x76>
	return total;
   393d2:	4657      	mov	r7, sl
   393d4:	e02c      	b.n	39430 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   393d6:	4638      	mov	r0, r7
   393d8:	f000 ff7f 	bl	3a2da <net_buf_simple_tailroom>
   393dc:	4604      	mov	r4, r0
   393de:	e7ee      	b.n	393be <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   393e0:	4601      	mov	r1, r0
   393e2:	4630      	mov	r0, r6
   393e4:	f7f2 ffb2 	bl	2c34c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   393e8:	4630      	mov	r0, r6
   393ea:	f7ff fdfb 	bl	38fe4 <net_buf_frags_len>
   393ee:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   393f2:	f105 070c 	add.w	r7, r5, #12
   393f6:	1a24      	subs	r4, r4, r0
   393f8:	4638      	mov	r0, r7
   393fa:	f000 ff6e 	bl	3a2da <net_buf_simple_tailroom>
   393fe:	4284      	cmp	r4, r0
   39400:	d21a      	bcs.n	39438 <att_chan_read+0xce>
   39402:	4630      	mov	r0, r6
   39404:	f7ff fdee 	bl	38fe4 <net_buf_frags_len>
   39408:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   3940c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   3940e:	68e9      	ldr	r1, [r5, #12]
   39410:	8a2a      	ldrh	r2, [r5, #16]
   39412:	f8cd 9000 	str.w	r9, [sp]
   39416:	f8db 7004 	ldr.w	r7, [fp, #4]
   3941a:	9803      	ldr	r0, [sp, #12]
   3941c:	440a      	add	r2, r1
   3941e:	b2a3      	uxth	r3, r4
   39420:	4659      	mov	r1, fp
   39422:	47b8      	blx	r7
		if (read < 0) {
   39424:	1e07      	subs	r7, r0, #0
   39426:	da0c      	bge.n	39442 <att_chan_read+0xd8>
				return total;
   39428:	f1ba 0f00 	cmp.w	sl, #0
   3942c:	bf18      	it	ne
   3942e:	4657      	movne	r7, sl
}
   39430:	4638      	mov	r0, r7
   39432:	b005      	add	sp, #20
   39434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39438:	4638      	mov	r0, r7
   3943a:	f000 ff4e 	bl	3a2da <net_buf_simple_tailroom>
   3943e:	4604      	mov	r4, r0
   39440:	e7e5      	b.n	3940e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   39442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39444:	b993      	cbnz	r3, 3946c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   39446:	4639      	mov	r1, r7
   39448:	f105 000c 	add.w	r0, r5, #12
   3944c:	f7f2 ffee 	bl	2c42c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   39450:	4630      	mov	r0, r6
   39452:	f7ff fdc7 	bl	38fe4 <net_buf_frags_len>
   39456:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   3945a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   3945c:	4283      	cmp	r3, r0
		total += read;
   3945e:	44ba      	add	sl, r7
		offset += read;
   39460:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   39464:	d9b5      	bls.n	393d2 <att_chan_read+0x68>
   39466:	42a7      	cmp	r7, r4
   39468:	d096      	beq.n	39398 <att_chan_read+0x2e>
   3946a:	e7b2      	b.n	393d2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   3946c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3946e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39470:	4639      	mov	r1, r7
   39472:	4628      	mov	r0, r5
   39474:	4798      	blx	r3
   39476:	2800      	cmp	r0, #0
   39478:	d1e5      	bne.n	39446 <att_chan_read+0xdc>
   3947a:	e7aa      	b.n	393d2 <att_chan_read+0x68>
		return 0;
   3947c:	2700      	movs	r7, #0
   3947e:	e7d7      	b.n	39430 <att_chan_read+0xc6>

00039480 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   39480:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   39482:	2200      	movs	r2, #0
   39484:	b903      	cbnz	r3, 39488 <sys_slist_find_and_remove.isra.0+0x8>
   39486:	4770      	bx	lr
   39488:	428b      	cmp	r3, r1
   3948a:	d10f      	bne.n	394ac <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   3948c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   3948e:	b93a      	cbnz	r2, 394a0 <sys_slist_find_and_remove.isra.0+0x20>
   39490:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   39492:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   39494:	4291      	cmp	r1, r2
   39496:	d100      	bne.n	3949a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   39498:	6043      	str	r3, [r0, #4]
	parent->next = child;
   3949a:	2300      	movs	r3, #0
   3949c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   3949e:	4770      	bx	lr
	parent->next = child;
   394a0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   394a2:	6843      	ldr	r3, [r0, #4]
   394a4:	4299      	cmp	r1, r3
	list->tail = node;
   394a6:	bf08      	it	eq
   394a8:	6042      	streq	r2, [r0, #4]
}
   394aa:	e7f6      	b.n	3949a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   394ac:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   394ae:	681b      	ldr	r3, [r3, #0]
   394b0:	e7e8      	b.n	39484 <sys_slist_find_and_remove.isra.0+0x4>

000394b2 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   394b2:	2006      	movs	r0, #6
   394b4:	4770      	bx	lr

000394b6 <atomic_test_and_set_bit>:
{
   394b6:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   394b8:	2301      	movs	r3, #1
   394ba:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   394be:	f3bf 8f5b 	dmb	ish
   394c2:	e850 3f00 	ldrex	r3, [r0]
   394c6:	ea43 0201 	orr.w	r2, r3, r1
   394ca:	e840 2400 	strex	r4, r2, [r0]
   394ce:	2c00      	cmp	r4, #0
   394d0:	d1f7      	bne.n	394c2 <atomic_test_and_set_bit+0xc>
   394d2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   394d6:	4219      	tst	r1, r3
}
   394d8:	bf14      	ite	ne
   394da:	2001      	movne	r0, #1
   394dc:	2000      	moveq	r0, #0
   394de:	bd10      	pop	{r4, pc}

000394e0 <read_cb>:
{
   394e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   394e2:	6816      	ldr	r6, [r2, #0]
{
   394e4:	4605      	mov	r5, r0
	data->err = 0x00;
   394e6:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   394e8:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   394ea:	7313      	strb	r3, [r2, #12]
{
   394ec:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   394ee:	4629      	mov	r1, r5
   394f0:	2295      	movs	r2, #149	; 0x95
   394f2:	f000 fc51 	bl	39d98 <bt_gatt_check_perm>
   394f6:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   394f8:	b980      	cbnz	r0, 3951c <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   394fa:	e9cd 0000 	strd	r0, r0, [sp]
   394fe:	4629      	mov	r1, r5
   39500:	88a3      	ldrh	r3, [r4, #4]
   39502:	68a2      	ldr	r2, [r4, #8]
   39504:	4630      	mov	r0, r6
   39506:	f7ff ff30 	bl	3936a <att_chan_read>
	if (ret < 0) {
   3950a:	2800      	cmp	r0, #0
   3950c:	da09      	bge.n	39522 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   3950e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   39512:	bf26      	itte	cs
   39514:	4240      	negcs	r0, r0
   39516:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   39518:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   3951a:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   3951c:	2000      	movs	r0, #0
}
   3951e:	b002      	add	sp, #8
   39520:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   39522:	2001      	movs	r0, #1
   39524:	e7fb      	b.n	3951e <read_cb+0x3e>

00039526 <read_vl_cb>:
{
   39526:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   3952a:	f8d2 8000 	ldr.w	r8, [r2]
{
   3952e:	4606      	mov	r6, r0
	data->err = 0x00;
   39530:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   39532:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   39536:	7313      	strb	r3, [r2, #12]
{
   39538:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   3953a:	4631      	mov	r1, r6
   3953c:	2295      	movs	r2, #149	; 0x95
   3953e:	f000 fc2b 	bl	39d98 <bt_gatt_check_perm>
   39542:	4605      	mov	r5, r0
   39544:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   39546:	b9e0      	cbnz	r0, 39582 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   39548:	68a0      	ldr	r0, [r4, #8]
   3954a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   3954e:	8a02      	ldrh	r2, [r0, #16]
   39550:	1a9b      	subs	r3, r3, r2
   39552:	2b01      	cmp	r3, #1
   39554:	dd15      	ble.n	39582 <read_vl_cb+0x5c>
   39556:	2102      	movs	r1, #2
   39558:	300c      	adds	r0, #12
   3955a:	f7f2 ff67 	bl	2c42c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   3955e:	e9cd 5500 	strd	r5, r5, [sp]
   39562:	4607      	mov	r7, r0
   39564:	88a3      	ldrh	r3, [r4, #4]
   39566:	68a2      	ldr	r2, [r4, #8]
   39568:	4631      	mov	r1, r6
   3956a:	4640      	mov	r0, r8
   3956c:	f7ff fefd 	bl	3936a <att_chan_read>
	if (read < 0) {
   39570:	1e03      	subs	r3, r0, #0
   39572:	da0a      	bge.n	3958a <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   39574:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   39578:	bf26      	itte	cs
   3957a:	425b      	negcs	r3, r3
   3957c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   3957e:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   39580:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   39582:	2000      	movs	r0, #0
}
   39584:	b002      	add	sp, #8
   39586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   3958a:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   3958c:	2001      	movs	r0, #1
   3958e:	e7f9      	b.n	39584 <read_vl_cb+0x5e>

00039590 <bt_att_sent>:
{
   39590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39592:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   39594:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   39596:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   3959a:	f850 4c04 	ldr.w	r4, [r0, #-4]
   3959e:	f3bf 8f5b 	dmb	ish
   395a2:	e853 1f00 	ldrex	r1, [r3]
   395a6:	f021 0110 	bic.w	r1, r1, #16
   395aa:	e843 1200 	strex	r2, r1, [r3]
   395ae:	2a00      	cmp	r2, #0
   395b0:	d1f7      	bne.n	395a2 <bt_att_sent+0x12>
   395b2:	f3bf 8f5b 	dmb	ish
	if (!att) {
   395b6:	b30c      	cbz	r4, 395fc <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   395b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   395bc:	b98b      	cbnz	r3, 395e2 <bt_att_sent+0x52>
   395be:	6863      	ldr	r3, [r4, #4]
   395c0:	b17b      	cbz	r3, 395e2 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   395c2:	1d20      	adds	r0, r4, #4
   395c4:	f7ff fd04 	bl	38fd0 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   395c8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   395ca:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   395cc:	4638      	mov	r0, r7
   395ce:	f7ff fe8b 	bl	392e8 <chan_req_send>
   395d2:	2800      	cmp	r0, #0
   395d4:	da12      	bge.n	395fc <bt_att_sent+0x6c>
	return list->head;
   395d6:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   395d8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   395da:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   395dc:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   395de:	b903      	cbnz	r3, 395e2 <bt_att_sent+0x52>
	list->tail = node;
   395e0:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   395e2:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   395e6:	4638      	mov	r0, r7
   395e8:	f7ff fea6 	bl	39338 <process_queue>
	if (!err) {
   395ec:	b130      	cbz	r0, 395fc <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   395ee:	f104 010c 	add.w	r1, r4, #12
   395f2:	4638      	mov	r0, r7
}
   395f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   395f8:	f7ff be9e 	b.w	39338 <process_queue>
}
   395fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000395fe <att_req_send_process>:
{
   395fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   39602:	6a84      	ldr	r4, [r0, #40]	; 0x28
   39604:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39606:	2c00      	cmp	r4, #0
   39608:	d03b      	beq.n	39682 <att_req_send_process+0x84>
	return node->next;
   3960a:	f854 69f0 	ldr.w	r6, [r4], #-240
   3960e:	b106      	cbz	r6, 39612 <att_req_send_process+0x14>
   39610:	3ef0      	subs	r6, #240	; 0xf0
{
   39612:	2300      	movs	r3, #0
   39614:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   39616:	f108 0704 	add.w	r7, r8, #4
   3961a:	e013      	b.n	39644 <att_req_send_process+0x46>
		if (!req && prev &&
   3961c:	b1c3      	cbz	r3, 39650 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   3961e:	2103      	movs	r1, #3
   39620:	f104 0098 	add.w	r0, r4, #152	; 0x98
   39624:	f7ff fcf8 	bl	39018 <atomic_test_bit>
   39628:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   3962a:	f103 0098 	add.w	r0, r3, #152	; 0x98
   3962e:	f7ff fcf3 	bl	39018 <atomic_test_bit>
		if (!req && prev &&
   39632:	4282      	cmp	r2, r0
   39634:	d10c      	bne.n	39650 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39636:	b326      	cbz	r6, 39682 <att_req_send_process+0x84>
   39638:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   3963c:	b102      	cbz	r2, 39640 <att_req_send_process+0x42>
   3963e:	3af0      	subs	r2, #240	; 0xf0
{
   39640:	4634      	mov	r4, r6
   39642:	4616      	mov	r6, r2
		if (chan->req) {
   39644:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   39648:	2a00      	cmp	r2, #0
   3964a:	d1f4      	bne.n	39636 <att_req_send_process+0x38>
		if (!req && prev &&
   3964c:	2d00      	cmp	r5, #0
   3964e:	d0e5      	beq.n	3961c <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   39650:	4638      	mov	r0, r7
   39652:	f7ff fcbd 	bl	38fd0 <sys_slist_get>
	if (node) {
   39656:	4605      	mov	r5, r0
   39658:	b908      	cbnz	r0, 3965e <att_req_send_process+0x60>
   3965a:	4623      	mov	r3, r4
   3965c:	e7eb      	b.n	39636 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   3965e:	4601      	mov	r1, r0
   39660:	4620      	mov	r0, r4
   39662:	f7ef ff71 	bl	29548 <bt_att_chan_req_send>
   39666:	2800      	cmp	r0, #0
   39668:	da0b      	bge.n	39682 <att_req_send_process+0x84>
	return list->head;
   3966a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   3966e:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   39670:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   39674:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   39678:	2b00      	cmp	r3, #0
   3967a:	d1ee      	bne.n	3965a <att_req_send_process+0x5c>
	list->tail = node;
   3967c:	f8c8 5008 	str.w	r5, [r8, #8]
}
   39680:	e7eb      	b.n	3965a <att_req_send_process+0x5c>
}
   39682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039686 <bt_att_status>:
{
   39686:	b538      	push	{r3, r4, r5, lr}
   39688:	4605      	mov	r5, r0
   3968a:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   3968c:	2100      	movs	r1, #0
   3968e:	f7ff fcc3 	bl	39018 <atomic_test_bit>
   39692:	b1c0      	cbz	r0, 396c6 <bt_att_status+0x40>
	if (!chan->att) {
   39694:	f855 0c04 	ldr.w	r0, [r5, #-4]
   39698:	b1a8      	cbz	r0, 396c6 <bt_att_status+0x40>
	if (chan->req) {
   3969a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   3969e:	b993      	cbnz	r3, 396c6 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   396a0:	3004      	adds	r0, #4
   396a2:	f7ff fc95 	bl	38fd0 <sys_slist_get>
	if (!node) {
   396a6:	4604      	mov	r4, r0
   396a8:	b168      	cbz	r0, 396c6 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   396aa:	4601      	mov	r1, r0
   396ac:	1f28      	subs	r0, r5, #4
   396ae:	f7ef ff4b 	bl	29548 <bt_att_chan_req_send>
   396b2:	2800      	cmp	r0, #0
   396b4:	da07      	bge.n	396c6 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   396b6:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   396ba:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   396bc:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   396be:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   396c0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   396c2:	b902      	cbnz	r2, 396c6 <bt_att_status+0x40>
	list->tail = node;
   396c4:	609c      	str	r4, [r3, #8]
}
   396c6:	bd38      	pop	{r3, r4, r5, pc}

000396c8 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   396c8:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   396ca:	6883      	ldr	r3, [r0, #8]
   396cc:	699b      	ldr	r3, [r3, #24]
   396ce:	b10b      	cbz	r3, 396d4 <att_sent+0xc>
		chan->ops->sent(chan);
   396d0:	3004      	adds	r0, #4
   396d2:	4718      	bx	r3
}
   396d4:	4770      	bx	lr

000396d6 <att_tx_complete>:
{
   396d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   396da:	4606      	mov	r6, r0
   396dc:	460d      	mov	r5, r1
	if (!err) {
   396de:	4614      	mov	r4, r2
   396e0:	b122      	cbz	r2, 396ec <att_tx_complete+0x16>
}
   396e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   396e6:	4608      	mov	r0, r1
   396e8:	f7ef beb2 	b.w	29450 <tx_meta_data_free>
		att_sent(conn, user_data);
   396ec:	f7ff ffec 	bl	396c8 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   396f0:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   396f2:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   396f6:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   396fa:	4628      	mov	r0, r5
   396fc:	f7ef fea8 	bl	29450 <tx_meta_data_free>
	if (!err && func) {
   39700:	b92f      	cbnz	r7, 3970e <att_tx_complete+0x38>
}
   39702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   39706:	4649      	mov	r1, r9
   39708:	4630      	mov	r0, r6
   3970a:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   3970c:	3401      	adds	r4, #1
   3970e:	b2a3      	uxth	r3, r4
   39710:	4543      	cmp	r3, r8
   39712:	d3f8      	bcc.n	39706 <att_tx_complete+0x30>
   39714:	e7f5      	b.n	39702 <att_tx_complete+0x2c>

00039716 <att_req_sent>:
{
   39716:	b510      	push	{r4, lr}
   39718:	460c      	mov	r4, r1
	if (!err) {
   3971a:	b90a      	cbnz	r2, 39720 <att_req_sent+0xa>
		att_sent(conn, user_data);
   3971c:	f7ff ffd4 	bl	396c8 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   39720:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   39722:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   39726:	b12b      	cbz	r3, 39734 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   39728:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   3972c:	2300      	movs	r3, #0
   3972e:	30c0      	adds	r0, #192	; 0xc0
   39730:	f7f9 fab6 	bl	32ca0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   39734:	4620      	mov	r0, r4
}
   39736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   3973a:	f7ef be89 	b.w	29450 <tx_meta_data_free>

0003973e <att_cfm_sent>:
{
   3973e:	b510      	push	{r4, lr}
   39740:	460c      	mov	r4, r1
	if (!err) {
   39742:	b90a      	cbnz	r2, 39748 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   39744:	f7ff ffc0 	bl	396c8 <att_sent>
   39748:	6823      	ldr	r3, [r4, #0]
   3974a:	f3bf 8f5b 	dmb	ish
   3974e:	3398      	adds	r3, #152	; 0x98
   39750:	e853 1f00 	ldrex	r1, [r3]
   39754:	f021 0102 	bic.w	r1, r1, #2
   39758:	e843 1200 	strex	r2, r1, [r3]
   3975c:	2a00      	cmp	r2, #0
   3975e:	d1f7      	bne.n	39750 <att_cfm_sent+0x12>
   39760:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   39764:	4620      	mov	r0, r4
}
   39766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   3976a:	f7ef be71 	b.w	29450 <tx_meta_data_free>

0003976e <att_rsp_sent>:
{
   3976e:	b510      	push	{r4, lr}
   39770:	460c      	mov	r4, r1
	if (!err) {
   39772:	b90a      	cbnz	r2, 39778 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   39774:	f7ff ffa8 	bl	396c8 <att_sent>
   39778:	6823      	ldr	r3, [r4, #0]
   3977a:	f3bf 8f5b 	dmb	ish
   3977e:	3398      	adds	r3, #152	; 0x98
   39780:	e853 1f00 	ldrex	r1, [r3]
   39784:	f021 0101 	bic.w	r1, r1, #1
   39788:	e843 1200 	strex	r2, r1, [r3]
   3978c:	2a00      	cmp	r2, #0
   3978e:	d1f7      	bne.n	39780 <att_rsp_sent+0x12>
   39790:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   39794:	4620      	mov	r0, r4
}
   39796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   3979a:	f7ef be59 	b.w	29450 <tx_meta_data_free>

0003979e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   3979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   397a2:	4688      	mov	r8, r1
   397a4:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   397a6:	2101      	movs	r1, #1
   397a8:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   397aa:	4605      	mov	r5, r0
   397ac:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   397ae:	f7f0 f831 	bl	29814 <bt_att_chan_create_pdu>
	if (!buf) {
   397b2:	4604      	mov	r4, r0
   397b4:	b170      	cbz	r0, 397d4 <send_err_rsp.part.0+0x36>
   397b6:	2104      	movs	r1, #4
   397b8:	300c      	adds	r0, #12
   397ba:	f7f2 fe37 	bl	2c42c <net_buf_simple_add>
	rsp->request = req;
   397be:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   397c2:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   397c6:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   397c8:	4621      	mov	r1, r4
   397ca:	4628      	mov	r0, r5
}
   397cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   397d0:	f7ff bda4 	b.w	3931c <bt_att_chan_send_rsp>
}
   397d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000397d8 <att_write_req>:
{
   397d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   397da:	460c      	mov	r4, r1
   397dc:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   397de:	f101 000c 	add.w	r0, r1, #12
   397e2:	f000 fd6e 	bl	3a2c2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   397e6:	8a22      	ldrh	r2, [r4, #16]
   397e8:	9201      	str	r2, [sp, #4]
   397ea:	68e2      	ldr	r2, [r4, #12]
   397ec:	9200      	str	r2, [sp, #0]
   397ee:	4603      	mov	r3, r0
   397f0:	2213      	movs	r2, #19
   397f2:	2112      	movs	r1, #18
   397f4:	4628      	mov	r0, r5
   397f6:	f7f0 f8b3 	bl	29960 <att_write_rsp.constprop.0>
}
   397fa:	b003      	add	sp, #12
   397fc:	bd30      	pop	{r4, r5, pc}

000397fe <att_write_cmd>:
{
   397fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   39800:	460c      	mov	r4, r1
   39802:	4605      	mov	r5, r0
   39804:	f101 000c 	add.w	r0, r1, #12
   39808:	f000 fd5b 	bl	3a2c2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   3980c:	8a22      	ldrh	r2, [r4, #16]
   3980e:	9201      	str	r2, [sp, #4]
   39810:	68e2      	ldr	r2, [r4, #12]
   39812:	9200      	str	r2, [sp, #0]
   39814:	2200      	movs	r2, #0
   39816:	4603      	mov	r3, r0
   39818:	4611      	mov	r1, r2
   3981a:	4628      	mov	r0, r5
   3981c:	f7f0 f8a0 	bl	29960 <att_write_rsp.constprop.0>
}
   39820:	b003      	add	sp, #12
   39822:	bd30      	pop	{r4, r5, pc}

00039824 <bt_att_create_pdu>:
{
   39824:	b538      	push	{r3, r4, r5, lr}
   39826:	460d      	mov	r5, r1
   39828:	4614      	mov	r4, r2
	att = att_get(conn);
   3982a:	f7ef fde9 	bl	29400 <att_get>
	if (!att) {
   3982e:	b158      	cbz	r0, 39848 <bt_att_create_pdu+0x24>
	return list->head;
   39830:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39832:	b14b      	cbz	r3, 39848 <bt_att_create_pdu+0x24>
   39834:	4618      	mov	r0, r3
	return node->next;
   39836:	f850 39f0 	ldr.w	r3, [r0], #-240
   3983a:	b103      	cbz	r3, 3983e <bt_att_create_pdu+0x1a>
   3983c:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   3983e:	1c62      	adds	r2, r4, #1
   39840:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   39842:	428a      	cmp	r2, r1
   39844:	d90c      	bls.n	39860 <bt_att_create_pdu+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39846:	b90b      	cbnz	r3, 3984c <bt_att_create_pdu+0x28>
}
   39848:	2000      	movs	r0, #0
   3984a:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3984c:	4618      	mov	r0, r3
   3984e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   39852:	2b00      	cmp	r3, #0
   39854:	d0f4      	beq.n	39840 <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   39856:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   39858:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3985a:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   3985e:	d8f5      	bhi.n	3984c <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   39860:	4622      	mov	r2, r4
   39862:	4629      	mov	r1, r5
}
   39864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   39868:	f7ef bfd4 	b.w	29814 <bt_att_chan_create_pdu>

0003986c <att_read_blob_req>:
{
   3986c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   3986e:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   39870:	8813      	ldrh	r3, [r2, #0]
   39872:	8852      	ldrh	r2, [r2, #2]
   39874:	9200      	str	r2, [sp, #0]
   39876:	210c      	movs	r1, #12
   39878:	220d      	movs	r2, #13
   3987a:	f7f0 f9fb 	bl	29c74 <att_read_rsp>
}
   3987e:	b003      	add	sp, #12
   39880:	f85d fb04 	ldr.w	pc, [sp], #4

00039884 <att_read_req>:
{
   39884:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   39886:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   39888:	2200      	movs	r2, #0
   3988a:	881b      	ldrh	r3, [r3, #0]
   3988c:	9200      	str	r2, [sp, #0]
   3988e:	210a      	movs	r1, #10
   39890:	220b      	movs	r2, #11
   39892:	f7f0 f9ef 	bl	29c74 <att_read_rsp>
}
   39896:	b003      	add	sp, #12
   39898:	f85d fb04 	ldr.w	pc, [sp], #4

0003989c <att_mtu_req>:
{
   3989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3989e:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   398a0:	f850 2b98 	ldr.w	r2, [r0], #152
{
   398a4:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   398a6:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   398a8:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   398aa:	f7ff fbb5 	bl	39018 <atomic_test_bit>
   398ae:	4604      	mov	r4, r0
   398b0:	b9d8      	cbnz	r0, 398ea <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   398b2:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   398b4:	881b      	ldrh	r3, [r3, #0]
   398b6:	2b16      	cmp	r3, #22
   398b8:	d919      	bls.n	398ee <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   398ba:	4630      	mov	r0, r6
   398bc:	2202      	movs	r2, #2
   398be:	f7ff ffb1 	bl	39824 <bt_att_create_pdu>
	if (!pdu) {
   398c2:	4606      	mov	r6, r0
   398c4:	b1a8      	cbz	r0, 398f2 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   398c6:	2102      	movs	r1, #2
   398c8:	300c      	adds	r0, #12
   398ca:	f7f2 fdaf 	bl	2c42c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   398ce:	2717      	movs	r7, #23
   398d0:	7007      	strb	r7, [r0, #0]
   398d2:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   398d4:	4631      	mov	r1, r6
   398d6:	4628      	mov	r0, r5
   398d8:	f7ff fd20 	bl	3931c <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   398dc:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   398de:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   398e0:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   398e2:	f7ff fcbe 	bl	39262 <att_chan_mtu_updated>
	return 0;
   398e6:	4620      	mov	r0, r4
}
   398e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   398ea:	2006      	movs	r0, #6
   398ec:	e7fc      	b.n	398e8 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   398ee:	2004      	movs	r0, #4
   398f0:	e7fa      	b.n	398e8 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   398f2:	200e      	movs	r0, #14
   398f4:	e7f8      	b.n	398e8 <att_mtu_req+0x4c>

000398f6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   398f6:	8a0a      	ldrh	r2, [r1, #16]
   398f8:	68c9      	ldr	r1, [r1, #12]
   398fa:	2300      	movs	r3, #0
   398fc:	f7f0 bb62 	b.w	29fc4 <att_handle_rsp>

00039900 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   39900:	2001      	movs	r0, #1
   39902:	4770      	bx	lr

00039904 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   39904:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   39906:	f7ef fd7b 	bl	29400 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   3990a:	b198      	cbz	r0, 39934 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   3990c:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3990e:	b18b      	cbz	r3, 39934 <bt_att_clear_out_of_sync_sent+0x30>
   39910:	f3bf 8f5b 	dmb	ish
   39914:	3bf0      	subs	r3, #240	; 0xf0
   39916:	f103 0298 	add.w	r2, r3, #152	; 0x98
   3991a:	e852 0f00 	ldrex	r0, [r2]
   3991e:	f020 0020 	bic.w	r0, r0, #32
   39922:	e842 0100 	strex	r1, r0, [r2]
   39926:	2900      	cmp	r1, #0
   39928:	d1f7      	bne.n	3991a <bt_att_clear_out_of_sync_sent+0x16>
   3992a:	f3bf 8f5b 	dmb	ish
	return node->next;
   3992e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   39932:	e7ec      	b.n	3990e <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   39934:	bd08      	pop	{r3, pc}

00039936 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   39936:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   39938:	2104      	movs	r1, #4
   3993a:	f7ff fb3e 	bl	38fba <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   3993e:	b128      	cbz	r0, 3994c <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   39940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   39944:	2105      	movs	r1, #5
   39946:	3094      	adds	r0, #148	; 0x94
   39948:	f7ff bb66 	b.w	39018 <atomic_test_bit>
}
   3994c:	bd08      	pop	{r3, pc}

0003994e <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   3994e:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   39950:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   39954:	2201      	movs	r2, #1
   39956:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   39958:	7403      	strb	r3, [r0, #16]
}
   3995a:	4770      	bx	lr

0003995c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   3995c:	6010      	str	r0, [r2, #0]
}
   3995e:	2000      	movs	r0, #0
   39960:	4770      	bx	lr

00039962 <gatt_ccc_changed>:
{
   39962:	460b      	mov	r3, r1
   39964:	8909      	ldrh	r1, [r1, #8]
   39966:	8a5a      	ldrh	r2, [r3, #18]
   39968:	4291      	cmp	r1, r2
   3996a:	bf38      	it	cc
   3996c:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   3996e:	8a9a      	ldrh	r2, [r3, #20]
   39970:	428a      	cmp	r2, r1
   39972:	d003      	beq.n	3997c <gatt_ccc_changed+0x1a>
		ccc->value = value;
   39974:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   39976:	699b      	ldr	r3, [r3, #24]
   39978:	b103      	cbz	r3, 3997c <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   3997a:	4718      	bx	r3
}
   3997c:	4770      	bx	lr

0003997e <gatt_indicate_rsp>:
{
   3997e:	b510      	push	{r4, lr}
   39980:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   39982:	68a3      	ldr	r3, [r4, #8]
{
   39984:	460a      	mov	r2, r1
	if (params->func) {
   39986:	b10b      	cbz	r3, 3998c <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   39988:	4621      	mov	r1, r4
   3998a:	4798      	blx	r3
	params->_ref--;
   3998c:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   3998e:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   39990:	3b01      	subs	r3, #1
   39992:	b2db      	uxtb	r3, r3
   39994:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   39996:	b122      	cbz	r2, 399a2 <gatt_indicate_rsp+0x24>
   39998:	b91b      	cbnz	r3, 399a2 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   3999a:	4620      	mov	r0, r4
}
   3999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   399a0:	4710      	bx	r2
}
   399a2:	bd10      	pop	{r4, pc}

000399a4 <match_uuid>:
	data->attr = attr;
   399a4:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   399a6:	8091      	strh	r1, [r2, #4]
}
   399a8:	2000      	movs	r0, #0
   399aa:	4770      	bx	lr

000399ac <gen_hash_m>:
{
   399ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   399ae:	6807      	ldr	r7, [r0, #0]
   399b0:	783d      	ldrb	r5, [r7, #0]
{
   399b2:	b089      	sub	sp, #36	; 0x24
   399b4:	4606      	mov	r6, r0
   399b6:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   399b8:	b9dd      	cbnz	r5, 399f2 <gen_hash_m+0x46>
	switch (u16->val) {
   399ba:	887b      	ldrh	r3, [r7, #2]
   399bc:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   399c0:	d004      	beq.n	399cc <gen_hash_m+0x20>
   399c2:	d810      	bhi.n	399e6 <gen_hash_m+0x3a>
   399c4:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   399c8:	2b03      	cmp	r3, #3
   399ca:	d812      	bhi.n	399f2 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   399cc:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   399d0:	2202      	movs	r2, #2
   399d2:	f10d 010a 	add.w	r1, sp, #10
   399d6:	4620      	mov	r0, r4
   399d8:	f7fe fdf0 	bl	385bc <tc_cmac_update>
   399dc:	b968      	cbnz	r0, 399fa <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   399de:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   399e2:	65a2      	str	r2, [r4, #88]	; 0x58
   399e4:	e006      	b.n	399f4 <gen_hash_m+0x48>
	switch (u16->val) {
   399e6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   399ea:	33ff      	adds	r3, #255	; 0xff
   399ec:	b29b      	uxth	r3, r3
   399ee:	2b04      	cmp	r3, #4
   399f0:	d91e      	bls.n	39a30 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   399f2:	2501      	movs	r5, #1
}
   399f4:	4628      	mov	r0, r5
   399f6:	b009      	add	sp, #36	; 0x24
   399f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   399fa:	887b      	ldrh	r3, [r7, #2]
   399fc:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   39a00:	2202      	movs	r2, #2
   39a02:	f10d 010a 	add.w	r1, sp, #10
   39a06:	4620      	mov	r0, r4
   39a08:	f7fe fdd8 	bl	385bc <tc_cmac_update>
   39a0c:	2800      	cmp	r0, #0
   39a0e:	d0e6      	beq.n	399de <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   39a10:	2000      	movs	r0, #0
   39a12:	9000      	str	r0, [sp, #0]
   39a14:	aa03      	add	r2, sp, #12
   39a16:	6877      	ldr	r7, [r6, #4]
   39a18:	2313      	movs	r3, #19
   39a1a:	4631      	mov	r1, r6
   39a1c:	47b8      	blx	r7
		if (len < 0) {
   39a1e:	1e02      	subs	r2, r0, #0
   39a20:	dbdf      	blt.n	399e2 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   39a22:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   39a24:	4620      	mov	r0, r4
   39a26:	f7fe fdc9 	bl	385bc <tc_cmac_update>
   39a2a:	2800      	cmp	r0, #0
   39a2c:	d1e1      	bne.n	399f2 <gen_hash_m+0x46>
   39a2e:	e7d6      	b.n	399de <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   39a30:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   39a34:	2202      	movs	r2, #2
   39a36:	f10d 010a 	add.w	r1, sp, #10
   39a3a:	4620      	mov	r0, r4
   39a3c:	f7fe fdbe 	bl	385bc <tc_cmac_update>
   39a40:	2800      	cmp	r0, #0
   39a42:	d0cc      	beq.n	399de <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   39a44:	887b      	ldrh	r3, [r7, #2]
   39a46:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   39a4a:	2202      	movs	r2, #2
   39a4c:	f10d 010a 	add.w	r1, sp, #10
   39a50:	e7e8      	b.n	39a24 <gen_hash_m+0x78>

00039a52 <bt_addr_le_eq>:
{
   39a52:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   39a54:	2207      	movs	r2, #7
   39a56:	f7fe fe89 	bl	3876c <memcmp>
}
   39a5a:	fab0 f080 	clz	r0, r0
   39a5e:	0940      	lsrs	r0, r0, #5
   39a60:	bd08      	pop	{r3, pc}

00039a62 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   39a62:	2207      	movs	r2, #7
   39a64:	f7fe bea9 	b.w	387ba <memcpy>

00039a68 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   39a68:	2301      	movs	r3, #1
   39a6a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   39a6c:	f3bf 8f5b 	dmb	ish
   39a70:	e850 2f00 	ldrex	r2, [r0]
   39a74:	431a      	orrs	r2, r3
   39a76:	e840 2100 	strex	r1, r2, [r0]
   39a7a:	2900      	cmp	r1, #0
   39a7c:	d1f8      	bne.n	39a70 <atomic_set_bit+0x8>
   39a7e:	f3bf 8f5b 	dmb	ish
}
   39a82:	4770      	bx	lr

00039a84 <cf_write>:
{
   39a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39a88:	461f      	mov	r7, r3
   39a8a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   39a8e:	2b01      	cmp	r3, #1
{
   39a90:	4606      	mov	r6, r0
   39a92:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   39a94:	d82e      	bhi.n	39af4 <cf_write+0x70>
	if (offset + len > sizeof(cfg->data)) {
   39a96:	443b      	add	r3, r7
   39a98:	2b01      	cmp	r3, #1
   39a9a:	463d      	mov	r5, r7
   39a9c:	dc2d      	bgt.n	39afa <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   39a9e:	f7f0 fbc3 	bl	2a228 <find_cf_cfg>
	if (!cfg) {
   39aa2:	4604      	mov	r4, r0
   39aa4:	b918      	cbnz	r0, 39aae <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   39aa6:	f7f0 fbbf 	bl	2a228 <find_cf_cfg>
	if (!cfg) {
   39aaa:	4604      	mov	r4, r0
   39aac:	b340      	cbz	r0, 39b00 <cf_write+0x7c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   39aae:	b197      	cbz	r7, 39ad6 <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   39ab0:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   39ab2:	f898 2000 	ldrb.w	r2, [r8]
   39ab6:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   39ab8:	fa21 f003 	lsr.w	r0, r1, r3
   39abc:	07c7      	lsls	r7, r0, #31
   39abe:	d503      	bpl.n	39ac8 <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   39ac0:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   39ac4:	07c0      	lsls	r0, r0, #31
   39ac6:	d51e      	bpl.n	39b06 <cf_write+0x82>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   39ac8:	3301      	adds	r3, #1
   39aca:	2b03      	cmp	r3, #3
   39acc:	d1f4      	bne.n	39ab8 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   39ace:	f002 0207 	and.w	r2, r2, #7
   39ad2:	4311      	orrs	r1, r2
   39ad4:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   39ad6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   39ada:	1c60      	adds	r0, r4, #1
   39adc:	f7ff ffc1 	bl	39a62 <bt_addr_le_copy>
	cfg->id = conn->id;
   39ae0:	4620      	mov	r0, r4
   39ae2:	7a33      	ldrb	r3, [r6, #8]
   39ae4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   39ae8:	2100      	movs	r1, #0
   39aea:	f7ff ffbd 	bl	39a68 <atomic_set_bit>
}
   39aee:	4628      	mov	r0, r5
   39af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39af4:	f06f 0506 	mvn.w	r5, #6
   39af8:	e7f9      	b.n	39aee <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   39afa:	f06f 050c 	mvn.w	r5, #12
   39afe:	e7f6      	b.n	39aee <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   39b00:	f06f 0510 	mvn.w	r5, #16
   39b04:	e7f3      	b.n	39aee <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   39b06:	f06f 0512 	mvn.w	r5, #18
   39b0a:	e7f0      	b.n	39aee <cf_write+0x6a>

00039b0c <sc_restore_rsp>:
{
   39b0c:	b538      	push	{r3, r4, r5, lr}
   39b0e:	4604      	mov	r4, r0
   39b10:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   39b12:	f7ff fef5 	bl	39900 <bt_att_fixed_chan_only>
   39b16:	b150      	cbz	r0, 39b2e <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   39b18:	4620      	mov	r0, r4
   39b1a:	f7f0 fb85 	bl	2a228 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   39b1e:	b130      	cbz	r0, 39b2e <sc_restore_rsp+0x22>
   39b20:	7a03      	ldrb	r3, [r0, #8]
   39b22:	07db      	lsls	r3, r3, #31
   39b24:	d503      	bpl.n	39b2e <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   39b26:	2100      	movs	r1, #0
   39b28:	300c      	adds	r0, #12
   39b2a:	f7ff ff9d 	bl	39a68 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   39b2e:	b965      	cbnz	r5, 39b4a <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   39b30:	7a20      	ldrb	r0, [r4, #8]
   39b32:	f104 0190 	add.w	r1, r4, #144	; 0x90
   39b36:	f7f0 fba5 	bl	2a284 <find_sc_cfg>
		if (sc_cfg) {
   39b3a:	b130      	cbz	r0, 39b4a <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   39b3c:	4629      	mov	r1, r5
   39b3e:	2204      	movs	r2, #4
}
   39b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   39b44:	3008      	adds	r0, #8
   39b46:	f7fe be43 	b.w	387d0 <memset>
}
   39b4a:	bd38      	pop	{r3, r4, r5, pc}

00039b4c <sc_clear>:
{
   39b4c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   39b4e:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   39b52:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   39b54:	4631      	mov	r1, r6
   39b56:	7a00      	ldrb	r0, [r0, #8]
   39b58:	f7fe ff75 	bl	38a46 <bt_addr_le_is_bonded>
   39b5c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   39b5e:	4631      	mov	r1, r6
   39b60:	f7f0 fb90 	bl	2a284 <find_sc_cfg>
	if (!cfg) {
   39b64:	b128      	cbz	r0, 39b72 <sc_clear+0x26>
}
   39b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   39b6a:	220c      	movs	r2, #12
   39b6c:	2100      	movs	r1, #0
   39b6e:	f7fe be2f 	b.w	387d0 <memset>
}
   39b72:	bd70      	pop	{r4, r5, r6, pc}

00039b74 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   39b74:	2a02      	cmp	r2, #2
{
   39b76:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   39b78:	d108      	bne.n	39b8c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   39b7a:	2300      	movs	r3, #0
   39b7c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   39b80:	461a      	mov	r2, r3
   39b82:	7a00      	ldrb	r0, [r0, #8]
   39b84:	f7f0 fbe0 	bl	2a348 <sc_save>
}
   39b88:	2002      	movs	r0, #2
   39b8a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   39b8c:	f7ff ffde 	bl	39b4c <sc_clear>
   39b90:	e7fa      	b.n	39b88 <sc_ccc_cfg_write+0x14>

00039b92 <read_appearance>:
{
   39b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   39b94:	4615      	mov	r5, r2
   39b96:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   39b9a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   39b9c:	f7fe ff51 	bl	38a42 <bt_get_appearance>
	if (offset > value_len) {
   39ba0:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   39ba2:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   39ba6:	d80e      	bhi.n	39bc6 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   39ba8:	f1c6 0402 	rsb	r4, r6, #2
   39bac:	42bc      	cmp	r4, r7
   39bae:	bfa8      	it	ge
   39bb0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   39bb2:	f10d 0306 	add.w	r3, sp, #6
   39bb6:	4622      	mov	r2, r4
   39bb8:	1999      	adds	r1, r3, r6
   39bba:	4628      	mov	r0, r5
   39bbc:	f7fe fdfd 	bl	387ba <memcpy>
}
   39bc0:	4620      	mov	r0, r4
   39bc2:	b003      	add	sp, #12
   39bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39bc6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   39bca:	e7f9      	b.n	39bc0 <read_appearance+0x2e>

00039bcc <read_name>:
{
   39bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39bd0:	4698      	mov	r8, r3
   39bd2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   39bd6:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   39bd8:	f7ed fc56 	bl	27488 <bt_get_name>
   39bdc:	4607      	mov	r7, r0
				 strlen(name));
   39bde:	f7fe fda9 	bl	38734 <strlen>
	if (offset > value_len) {
   39be2:	b283      	uxth	r3, r0
   39be4:	42b3      	cmp	r3, r6
   39be6:	d30c      	bcc.n	39c02 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   39be8:	1b9c      	subs	r4, r3, r6
   39bea:	4544      	cmp	r4, r8
   39bec:	bfa8      	it	ge
   39bee:	4644      	movge	r4, r8
   39bf0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   39bf2:	4622      	mov	r2, r4
   39bf4:	19b9      	adds	r1, r7, r6
   39bf6:	4628      	mov	r0, r5
   39bf8:	f7fe fddf 	bl	387ba <memcpy>
}
   39bfc:	4620      	mov	r0, r4
   39bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39c02:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   39c06:	e7f9      	b.n	39bfc <read_name+0x30>

00039c08 <cf_read>:
{
   39c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   39c0a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   39c0c:	2300      	movs	r3, #0
{
   39c0e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   39c12:	f88d 3004 	strb.w	r3, [sp, #4]
{
   39c16:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   39c18:	f7f0 fb06 	bl	2a228 <find_cf_cfg>
	if (cfg) {
   39c1c:	b128      	cbz	r0, 39c2a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   39c1e:	f100 0108 	add.w	r1, r0, #8
   39c22:	2201      	movs	r2, #1
   39c24:	a801      	add	r0, sp, #4
   39c26:	f7fe fdc8 	bl	387ba <memcpy>
	if (offset > value_len) {
   39c2a:	2e01      	cmp	r6, #1
   39c2c:	d80d      	bhi.n	39c4a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   39c2e:	f1c6 0401 	rsb	r4, r6, #1
   39c32:	42bc      	cmp	r4, r7
   39c34:	bfa8      	it	ge
   39c36:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   39c38:	ab01      	add	r3, sp, #4
   39c3a:	4622      	mov	r2, r4
   39c3c:	1999      	adds	r1, r3, r6
   39c3e:	4628      	mov	r0, r5
   39c40:	f7fe fdbb 	bl	387ba <memcpy>
}
   39c44:	4620      	mov	r0, r4
   39c46:	b003      	add	sp, #12
   39c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39c4a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   39c4e:	e7f9      	b.n	39c44 <cf_read+0x3c>

00039c50 <bt_gatt_attr_read_service>:
{
   39c50:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   39c52:	68c9      	ldr	r1, [r1, #12]
{
   39c54:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   39c56:	780a      	ldrb	r2, [r1, #0]
{
   39c58:	461c      	mov	r4, r3
   39c5a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   39c5e:	b992      	cbnz	r2, 39c86 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   39c60:	884a      	ldrh	r2, [r1, #2]
   39c62:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   39c66:	2b02      	cmp	r3, #2
   39c68:	d818      	bhi.n	39c9c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   39c6a:	f1c3 0202 	rsb	r2, r3, #2
   39c6e:	4294      	cmp	r4, r2
   39c70:	bfa8      	it	ge
   39c72:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   39c74:	4622      	mov	r2, r4
   39c76:	f10d 0106 	add.w	r1, sp, #6
   39c7a:	4419      	add	r1, r3
   39c7c:	f7fe fd9d 	bl	387ba <memcpy>
}
   39c80:	4620      	mov	r0, r4
   39c82:	b002      	add	sp, #8
   39c84:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   39c86:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   39c88:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   39c8c:	d806      	bhi.n	39c9c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   39c8e:	f1c3 0210 	rsb	r2, r3, #16
   39c92:	4294      	cmp	r4, r2
   39c94:	bfa8      	it	ge
   39c96:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   39c98:	4622      	mov	r2, r4
   39c9a:	e7ee      	b.n	39c7a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39c9c:	f06f 0406 	mvn.w	r4, #6
   39ca0:	e7ee      	b.n	39c80 <bt_gatt_attr_read_service+0x30>

00039ca2 <bt_gatt_attr_read_ccc>:
{
   39ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   39ca4:	68c9      	ldr	r1, [r1, #12]
{
   39ca6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   39caa:	4615      	mov	r5, r2
   39cac:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   39cae:	f7f0 fb0b 	bl	2a2c8 <find_ccc_cfg>
	if (cfg) {
   39cb2:	b100      	cbz	r0, 39cb6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   39cb4:	8900      	ldrh	r0, [r0, #8]
   39cb6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   39cba:	2e02      	cmp	r6, #2
   39cbc:	d80e      	bhi.n	39cdc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   39cbe:	f1c6 0402 	rsb	r4, r6, #2
   39cc2:	42bc      	cmp	r4, r7
   39cc4:	bfa8      	it	ge
   39cc6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   39cc8:	f10d 0306 	add.w	r3, sp, #6
   39ccc:	4622      	mov	r2, r4
   39cce:	1999      	adds	r1, r3, r6
   39cd0:	4628      	mov	r0, r5
   39cd2:	f7fe fd72 	bl	387ba <memcpy>
}
   39cd6:	4620      	mov	r0, r4
   39cd8:	b003      	add	sp, #12
   39cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39cdc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   39ce0:	e7f9      	b.n	39cd6 <bt_gatt_attr_read_ccc+0x34>

00039ce2 <bt_gatt_attr_value_handle>:
{
   39ce2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   39ce4:	4604      	mov	r4, r0
   39ce6:	b910      	cbnz	r0, 39cee <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   39ce8:	2000      	movs	r0, #0
}
   39cea:	b002      	add	sp, #8
   39cec:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   39cee:	2300      	movs	r3, #0
   39cf0:	f88d 3004 	strb.w	r3, [sp, #4]
   39cf4:	6800      	ldr	r0, [r0, #0]
   39cf6:	f642 0303 	movw	r3, #10243	; 0x2803
   39cfa:	a901      	add	r1, sp, #4
   39cfc:	f8ad 3006 	strh.w	r3, [sp, #6]
   39d00:	f7fe fdbc 	bl	3887c <bt_uuid_cmp>
   39d04:	2800      	cmp	r0, #0
   39d06:	d1ef      	bne.n	39ce8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   39d08:	68e3      	ldr	r3, [r4, #12]
   39d0a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   39d0c:	2800      	cmp	r0, #0
   39d0e:	d1ec      	bne.n	39cea <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   39d10:	4620      	mov	r0, r4
   39d12:	f7f0 fca7 	bl	2a664 <bt_gatt_attr_get_handle>
   39d16:	3001      	adds	r0, #1
   39d18:	b280      	uxth	r0, r0
	return handle;
   39d1a:	e7e6      	b.n	39cea <bt_gatt_attr_value_handle+0x8>

00039d1c <bt_gatt_attr_read_chrc>:
{
   39d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   39d1e:	68cc      	ldr	r4, [r1, #12]
{
   39d20:	b087      	sub	sp, #28
   39d22:	4608      	mov	r0, r1
   39d24:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   39d26:	79a3      	ldrb	r3, [r4, #6]
   39d28:	f88d 3004 	strb.w	r3, [sp, #4]
{
   39d2c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   39d30:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   39d32:	f7ff ffd6 	bl	39ce2 <bt_gatt_attr_value_handle>
   39d36:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   39d3a:	6821      	ldr	r1, [r4, #0]
   39d3c:	780b      	ldrb	r3, [r1, #0]
   39d3e:	b99b      	cbnz	r3, 39d68 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   39d40:	884b      	ldrh	r3, [r1, #2]
   39d42:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   39d46:	2405      	movs	r4, #5
	if (offset > value_len) {
   39d48:	42b4      	cmp	r4, r6
   39d4a:	d315      	bcc.n	39d78 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   39d4c:	1ba4      	subs	r4, r4, r6
   39d4e:	42bc      	cmp	r4, r7
   39d50:	bfa8      	it	ge
   39d52:	463c      	movge	r4, r7
   39d54:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   39d56:	ab01      	add	r3, sp, #4
   39d58:	4622      	mov	r2, r4
   39d5a:	1999      	adds	r1, r3, r6
   39d5c:	4628      	mov	r0, r5
   39d5e:	f7fe fd2c 	bl	387ba <memcpy>
}
   39d62:	4620      	mov	r0, r4
   39d64:	b007      	add	sp, #28
   39d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   39d68:	2210      	movs	r2, #16
   39d6a:	3101      	adds	r1, #1
   39d6c:	f10d 0007 	add.w	r0, sp, #7
   39d70:	f7fe fd23 	bl	387ba <memcpy>
		value_len += 16U;
   39d74:	2413      	movs	r4, #19
   39d76:	e7e7      	b.n	39d48 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   39d78:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   39d7c:	e7f1      	b.n	39d62 <bt_gatt_attr_read_chrc+0x46>

00039d7e <bt_gatt_foreach_attr>:
{
   39d7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   39d80:	e9cd 2301 	strd	r2, r3, [sp, #4]
   39d84:	2300      	movs	r3, #0
   39d86:	9300      	str	r3, [sp, #0]
   39d88:	461a      	mov	r2, r3
   39d8a:	f7f0 fcab 	bl	2a6e4 <bt_gatt_foreach_attr_type>
}
   39d8e:	b005      	add	sp, #20
   39d90:	f85d fb04 	ldr.w	pc, [sp], #4

00039d94 <db_hash_process>:
	db_hash_gen(true);
   39d94:	f7f0 bd0e 	b.w	2a7b4 <db_hash_gen.constprop.0>

00039d98 <bt_gatt_check_perm>:
{
   39d98:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   39d9a:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   39d9c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   39d9e:	d504      	bpl.n	39daa <bt_gatt_check_perm+0x12>
   39da0:	f013 0f95 	tst.w	r3, #149	; 0x95
   39da4:	d01d      	beq.n	39de2 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   39da6:	684c      	ldr	r4, [r1, #4]
   39da8:	b1dc      	cbz	r4, 39de2 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   39daa:	0794      	lsls	r4, r2, #30
   39dac:	d504      	bpl.n	39db8 <bt_gatt_check_perm+0x20>
   39dae:	f413 7f95 	tst.w	r3, #298	; 0x12a
   39db2:	d018      	beq.n	39de6 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   39db4:	6889      	ldr	r1, [r1, #8]
   39db6:	b1b1      	cbz	r1, 39de6 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   39db8:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   39dbc:	f414 7fc0 	tst.w	r4, #384	; 0x180
   39dc0:	d001      	beq.n	39dc6 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   39dc2:	2005      	movs	r0, #5
}
   39dc4:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   39dc6:	f014 0f30 	tst.w	r4, #48	; 0x30
   39dca:	d105      	bne.n	39dd8 <bt_gatt_check_perm+0x40>
	return 0;
   39dcc:	f014 0f0c 	tst.w	r4, #12
   39dd0:	bf14      	ite	ne
   39dd2:	200f      	movne	r0, #15
   39dd4:	2000      	moveq	r0, #0
   39dd6:	e7f5      	b.n	39dc4 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   39dd8:	f7ff f850 	bl	38e7c <bt_conn_get_security>
   39ddc:	2802      	cmp	r0, #2
   39dde:	d8f5      	bhi.n	39dcc <bt_gatt_check_perm+0x34>
   39de0:	e7ef      	b.n	39dc2 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   39de2:	2002      	movs	r0, #2
   39de4:	e7ee      	b.n	39dc4 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   39de6:	2003      	movs	r0, #3
   39de8:	e7ec      	b.n	39dc4 <bt_gatt_check_perm+0x2c>

00039dea <gatt_notify>:
{
   39dea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39dee:	4614      	mov	r4, r2
   39df0:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   39df2:	2294      	movs	r2, #148	; 0x94
   39df4:	6861      	ldr	r1, [r4, #4]
{
   39df6:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   39df8:	f7ff ffce 	bl	39d98 <bt_gatt_check_perm>
   39dfc:	bb58      	cbnz	r0, 39e56 <gatt_notify+0x6c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   39dfe:	6861      	ldr	r1, [r4, #4]
   39e00:	2201      	movs	r2, #1
   39e02:	4630      	mov	r0, r6
   39e04:	f7f0 fd70 	bl	2a8e8 <bt_gatt_is_subscribed>
   39e08:	b348      	cbz	r0, 39e5e <gatt_notify+0x74>
				sizeof(*nfy) + params->len);
   39e0a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   39e0c:	211b      	movs	r1, #27
   39e0e:	3202      	adds	r2, #2
   39e10:	4630      	mov	r0, r6
   39e12:	f7ff fd07 	bl	39824 <bt_att_create_pdu>
	if (!buf) {
   39e16:	4605      	mov	r5, r0
   39e18:	b320      	cbz	r0, 39e64 <gatt_notify+0x7a>
   39e1a:	f100 090c 	add.w	r9, r0, #12
   39e1e:	2102      	movs	r1, #2
   39e20:	4648      	mov	r0, r9
   39e22:	f7f2 fb03 	bl	2c42c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   39e26:	4607      	mov	r7, r0
   39e28:	4648      	mov	r0, r9
   39e2a:	f827 8b02 	strh.w	r8, [r7], #2
   39e2e:	89a1      	ldrh	r1, [r4, #12]
   39e30:	f7f2 fafc 	bl	2c42c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   39e34:	89a2      	ldrh	r2, [r4, #12]
   39e36:	68a1      	ldr	r1, [r4, #8]
   39e38:	4638      	mov	r0, r7
   39e3a:	f7fe fcbe 	bl	387ba <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   39e3e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   39e42:	4628      	mov	r0, r5
   39e44:	2301      	movs	r3, #1
   39e46:	f7ff fd82 	bl	3994e <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   39e4a:	4629      	mov	r1, r5
   39e4c:	4630      	mov	r0, r6
}
   39e4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   39e52:	f7f0 b961 	b.w	2a118 <bt_att_send>
		return -EPERM;
   39e56:	f04f 30ff 	mov.w	r0, #4294967295
}
   39e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   39e5e:	f06f 0015 	mvn.w	r0, #21
   39e62:	e7fa      	b.n	39e5a <gatt_notify+0x70>
		return -ENOMEM;
   39e64:	f06f 000b 	mvn.w	r0, #11
   39e68:	e7f7      	b.n	39e5a <gatt_notify+0x70>

00039e6a <bt_gatt_change_aware>:
{
   39e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39e6c:	4606      	mov	r6, r0
   39e6e:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   39e70:	f7f0 f9da 	bl	2a228 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   39e74:	b318      	cbz	r0, 39ebe <bt_gatt_change_aware+0x54>
   39e76:	7a03      	ldrb	r3, [r0, #8]
   39e78:	07db      	lsls	r3, r3, #31
   39e7a:	d520      	bpl.n	39ebe <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39e7c:	f3bf 8f5b 	dmb	ish
   39e80:	68c5      	ldr	r5, [r0, #12]
   39e82:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   39e86:	f015 0501 	ands.w	r5, r5, #1
   39e8a:	f100 040c 	add.w	r4, r0, #12
   39e8e:	d116      	bne.n	39ebe <bt_gatt_change_aware+0x54>
	if (!req) {
   39e90:	b1b7      	cbz	r7, 39ec0 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   39e92:	f3bf 8f5b 	dmb	ish
   39e96:	e854 1f00 	ldrex	r1, [r4]
   39e9a:	f021 0302 	bic.w	r3, r1, #2
   39e9e:	e844 3200 	strex	r2, r3, [r4]
   39ea2:	2a00      	cmp	r2, #0
   39ea4:	d1f7      	bne.n	39e96 <bt_gatt_change_aware+0x2c>
   39ea6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   39eaa:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   39eae:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   39eb0:	d008      	beq.n	39ec4 <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   39eb2:	f7ff fd27 	bl	39904 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   39eb6:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   39eb8:	4620      	mov	r0, r4
   39eba:	f7ff fdd5 	bl	39a68 <atomic_set_bit>
		return true;
   39ebe:	2501      	movs	r5, #1
}
   39ec0:	4628      	mov	r0, r5
   39ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   39ec4:	f7ff fd1c 	bl	39900 <bt_att_fixed_chan_only>
   39ec8:	2800      	cmp	r0, #0
   39eca:	d0f9      	beq.n	39ec0 <bt_gatt_change_aware+0x56>
   39ecc:	4630      	mov	r0, r6
   39ece:	f7ff fd32 	bl	39936 <bt_att_out_of_sync_sent_on_fixed>
   39ed2:	2800      	cmp	r0, #0
   39ed4:	d0f4      	beq.n	39ec0 <bt_gatt_change_aware+0x56>
   39ed6:	f3bf 8f5b 	dmb	ish
   39eda:	e854 3f00 	ldrex	r3, [r4]
   39ede:	f023 0302 	bic.w	r3, r3, #2
   39ee2:	e844 3200 	strex	r2, r3, [r4]
   39ee6:	2a00      	cmp	r2, #0
   39ee8:	d1f7      	bne.n	39eda <bt_gatt_change_aware+0x70>
   39eea:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   39eee:	4630      	mov	r0, r6
   39ef0:	f7ff fd08 	bl	39904 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   39ef4:	4639      	mov	r1, r7
   39ef6:	e7df      	b.n	39eb8 <bt_gatt_change_aware+0x4e>

00039ef8 <bt_smp_recv>:
{
   39ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   39efa:	2100      	movs	r1, #0
   39efc:	f04f 32ff 	mov.w	r2, #4294967295
   39f00:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   39f04:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   39f06:	4608      	mov	r0, r1
   39f08:	f7ff f83b 	bl	38f82 <bt_l2cap_create_pdu_timeout>
   39f0c:	f100 060c 	add.w	r6, r0, #12
   39f10:	4604      	mov	r4, r0
   39f12:	2101      	movs	r1, #1
   39f14:	4630      	mov	r0, r6
   39f16:	f7f2 fa89 	bl	2c42c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   39f1a:	2505      	movs	r5, #5
   39f1c:	7005      	strb	r5, [r0, #0]
   39f1e:	2101      	movs	r1, #1
   39f20:	4630      	mov	r0, r6
   39f22:	f7f2 fa83 	bl	2c42c <net_buf_simple_add>
   39f26:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   39f28:	7005      	strb	r5, [r0, #0]
   39f2a:	4622      	mov	r2, r4
   39f2c:	9300      	str	r3, [sp, #0]
   39f2e:	2106      	movs	r1, #6
   39f30:	4638      	mov	r0, r7
   39f32:	f7ff f829 	bl	38f88 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   39f36:	b110      	cbz	r0, 39f3e <bt_smp_recv+0x46>
		net_buf_unref(buf);
   39f38:	4620      	mov	r0, r4
   39f3a:	f7f2 f971 	bl	2c220 <net_buf_unref>
}
   39f3e:	2000      	movs	r0, #0
   39f40:	b003      	add	sp, #12
   39f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00039f44 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   39f44:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39f48:	4770      	bx	lr

00039f4a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   39f4a:	2000      	movs	r0, #0
   39f4c:	4770      	bx	lr

00039f4e <zcbor_map_decode_bulk>:

#include <mgmt/mcumgr/util/zcbor_bulk.h>

int zcbor_map_decode_bulk(zcbor_state_t *zsd, struct zcbor_map_decode_key_val *map,
	size_t map_size, size_t *matched)
{
   39f4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f52:	4605      	mov	r5, r0
   39f54:	460e      	mov	r6, r1
   39f56:	4690      	mov	r8, r2
   39f58:	461f      	mov	r7, r3
	bool ok;
	struct zcbor_map_decode_key_val *dptr = map;

	if (!zcbor_map_start_decode(zsd)) {
   39f5a:	f001 f945 	bl	3b1e8 <zcbor_map_start_decode>
   39f5e:	b920      	cbnz	r0, 39f6a <zcbor_map_decode_bulk+0x1c>
		return -EBADMSG;
   39f60:	f06f 004c 	mvn.w	r0, #76	; 0x4c
			ok = zcbor_any_skip(zsd, NULL);
		}
	} while (ok);

	return zcbor_map_end_decode(zsd) ? 0 : -EBADMSG;
}
   39f64:	b003      	add	sp, #12
   39f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*matched = 0;
   39f6a:	2300      	movs	r3, #0
			if (dptr >= (map + map_size)) {
   39f6c:	f04f 0914 	mov.w	r9, #20
	*matched = 0;
   39f70:	603b      	str	r3, [r7, #0]
			if (dptr >= (map + map_size)) {
   39f72:	fb09 6908 	mla	r9, r9, r8, r6
	struct zcbor_map_decode_key_val *dptr = map;
   39f76:	4634      	mov	r4, r6
				dptr->found = true;
   39f78:	f04f 0b01 	mov.w	fp, #1
		ok = zcbor_tstr_decode(zsd, &key);
   39f7c:	4669      	mov	r1, sp
   39f7e:	4628      	mov	r0, r5
   39f80:	f001 f92f 	bl	3b1e2 <zcbor_tstr_decode>
		while (ok && map_count < map_size) {
   39f84:	bb60      	cbnz	r0, 39fe0 <zcbor_map_decode_bulk+0x92>
	return zcbor_map_end_decode(zsd) ? 0 : -EBADMSG;
   39f86:	4628      	mov	r0, r5
   39f88:	f001 f948 	bl	3b21c <zcbor_map_end_decode>
   39f8c:	2800      	cmp	r0, #0
   39f8e:	d0e7      	beq.n	39f60 <zcbor_map_decode_bulk+0x12>
   39f90:	2000      	movs	r0, #0
   39f92:	e7e7      	b.n	39f64 <zcbor_map_decode_bulk+0x16>
				dptr = map;
   39f94:	45a1      	cmp	r9, r4
   39f96:	bf98      	it	ls
   39f98:	4634      	movls	r4, r6
			if (key.len == dptr->key.len		&&
   39f9a:	9a01      	ldr	r2, [sp, #4]
   39f9c:	6863      	ldr	r3, [r4, #4]
   39f9e:	429a      	cmp	r2, r3
   39fa0:	d112      	bne.n	39fc8 <zcbor_map_decode_bulk+0x7a>
			    memcmp(key.value, dptr->key.value, key.len) == 0) {
   39fa2:	6821      	ldr	r1, [r4, #0]
   39fa4:	9800      	ldr	r0, [sp, #0]
   39fa6:	f7fe fbe1 	bl	3876c <memcmp>
			if (key.len == dptr->key.len		&&
   39faa:	b968      	cbnz	r0, 39fc8 <zcbor_map_decode_bulk+0x7a>
				if (dptr->found) {
   39fac:	7c23      	ldrb	r3, [r4, #16]
   39fae:	b9d3      	cbnz	r3, 39fe6 <zcbor_map_decode_bulk+0x98>
				if (!dptr->decoder(zsd, dptr->value_ptr)) {
   39fb0:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   39fb4:	4628      	mov	r0, r5
   39fb6:	4798      	blx	r3
   39fb8:	b1c0      	cbz	r0, 39fec <zcbor_map_decode_bulk+0x9e>
				dptr->found = true;
   39fba:	f884 b010 	strb.w	fp, [r4, #16]
				++(*matched);
   39fbe:	683b      	ldr	r3, [r7, #0]
   39fc0:	3301      	adds	r3, #1
				++dptr;
   39fc2:	3414      	adds	r4, #20
				++(*matched);
   39fc4:	603b      	str	r3, [r7, #0]
	} while (ok);
   39fc6:	e7d9      	b.n	39f7c <zcbor_map_decode_bulk+0x2e>
			++dptr;
   39fc8:	3414      	adds	r4, #20
			++map_count;
   39fca:	f10a 0a01 	add.w	sl, sl, #1
		while (ok && map_count < map_size) {
   39fce:	45c2      	cmp	sl, r8
   39fd0:	d1e0      	bne.n	39f94 <zcbor_map_decode_bulk+0x46>
			ok = zcbor_any_skip(zsd, NULL);
   39fd2:	2100      	movs	r1, #0
   39fd4:	4628      	mov	r0, r5
   39fd6:	f7f7 f9c3 	bl	31360 <zcbor_any_skip>
	} while (ok);
   39fda:	2800      	cmp	r0, #0
   39fdc:	d1ce      	bne.n	39f7c <zcbor_map_decode_bulk+0x2e>
   39fde:	e7d2      	b.n	39f86 <zcbor_map_decode_bulk+0x38>
		size_t map_count = 0;
   39fe0:	f04f 0a00 	mov.w	sl, #0
   39fe4:	e7f3      	b.n	39fce <zcbor_map_decode_bulk+0x80>
					return -EADDRINUSE;
   39fe6:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   39fea:	e7bb      	b.n	39f64 <zcbor_map_decode_bulk+0x16>
					return -ENOMSG;
   39fec:	f06f 0022 	mvn.w	r0, #34	; 0x22
   39ff0:	e7b8      	b.n	39f64 <zcbor_map_decode_bulk+0x16>

00039ff2 <img_mgmt_flash_area_id>:
	switch (slot) {
   39ff2:	b120      	cbz	r0, 39ffe <img_mgmt_flash_area_id+0xc>
		fa_id = -1;
   39ff4:	2801      	cmp	r0, #1
   39ff6:	bf0c      	ite	eq
   39ff8:	2005      	moveq	r0, #5
   39ffa:	20ff      	movne	r0, #255	; 0xff
   39ffc:	4770      	bx	lr
		fa_id = FIXED_PARTITION_ID(SLOT0_PARTITION);
   39ffe:	2002      	movs	r0, #2
}
   3a000:	4770      	bx	lr

0003a002 <img_mgmt_vercmp>:
	if (a->iv_major < b->iv_major) {
   3a002:	7802      	ldrb	r2, [r0, #0]
   3a004:	780b      	ldrb	r3, [r1, #0]
   3a006:	429a      	cmp	r2, r3
   3a008:	d30f      	bcc.n	3a02a <img_mgmt_vercmp+0x28>
	} else if (a->iv_major > b->iv_major) {
   3a00a:	d80c      	bhi.n	3a026 <img_mgmt_vercmp+0x24>
	if (a->iv_minor < b->iv_minor) {
   3a00c:	7842      	ldrb	r2, [r0, #1]
   3a00e:	784b      	ldrb	r3, [r1, #1]
   3a010:	429a      	cmp	r2, r3
   3a012:	d30a      	bcc.n	3a02a <img_mgmt_vercmp+0x28>
	} else if (a->iv_minor > b->iv_minor) {
   3a014:	d807      	bhi.n	3a026 <img_mgmt_vercmp+0x24>
	if (a->iv_revision < b->iv_revision) {
   3a016:	8842      	ldrh	r2, [r0, #2]
   3a018:	884b      	ldrh	r3, [r1, #2]
   3a01a:	429a      	cmp	r2, r3
   3a01c:	d305      	bcc.n	3a02a <img_mgmt_vercmp+0x28>
	} else if (a->iv_revision > b->iv_revision) {
   3a01e:	bf8c      	ite	hi
   3a020:	2001      	movhi	r0, #1
   3a022:	2000      	movls	r0, #0
   3a024:	4770      	bx	lr
		return 1;
   3a026:	2001      	movs	r0, #1
   3a028:	4770      	bx	lr
		return -1;
   3a02a:	f04f 30ff 	mov.w	r0, #4294967295
}
   3a02e:	4770      	bx	lr

0003a030 <img_mgmt_erase_slot>:
{
   3a030:	b513      	push	{r0, r1, r4, lr}
	int area_id = img_mgmt_flash_area_id(slot);
   3a032:	f7ff ffde 	bl	39ff2 <img_mgmt_flash_area_id>
	if (area_id < 0) {
   3a036:	2800      	cmp	r0, #0
   3a038:	da02      	bge.n	3a040 <img_mgmt_erase_slot+0x10>
		return MGMT_ERR_EUNKNOWN;
   3a03a:	2001      	movs	r0, #1
}
   3a03c:	b002      	add	sp, #8
   3a03e:	bd10      	pop	{r4, pc}
	rc = flash_area_open(area_id, &fa);
   3a040:	a901      	add	r1, sp, #4
   3a042:	b2c0      	uxtb	r0, r0
   3a044:	f7ea fcc8 	bl	249d8 <flash_area_open>
	if (rc < 0) {
   3a048:	2800      	cmp	r0, #0
   3a04a:	dbf6      	blt.n	3a03a <img_mgmt_erase_slot+0xa>
	rc = img_mgmt_flash_check_empty_inner(fa);
   3a04c:	9801      	ldr	r0, [sp, #4]
   3a04e:	f7f1 f865 	bl	2b11c <img_mgmt_flash_check_empty_inner>
	if (rc == 0) {
   3a052:	4604      	mov	r4, r0
   3a054:	b928      	cbnz	r0, 3a062 <img_mgmt_erase_slot+0x32>
		rc = flash_area_erase(fa, 0, fa->fa_size);
   3a056:	9801      	ldr	r0, [sp, #4]
   3a058:	4621      	mov	r1, r4
   3a05a:	6882      	ldr	r2, [r0, #8]
   3a05c:	f7fe f82d 	bl	380ba <flash_area_erase>
   3a060:	4604      	mov	r4, r0
	flash_area_close(fa);
   3a062:	9801      	ldr	r0, [sp, #4]
   3a064:	f7fd fffe 	bl	38064 <flash_area_close>
	return (rc >= 0 ? MGMT_ERR_EOK : MGMT_ERR_EUNKNOWN);
   3a068:	0fe0      	lsrs	r0, r4, #31
   3a06a:	e7e7      	b.n	3a03c <img_mgmt_erase_slot+0xc>

0003a06c <img_mgmt_write_pending>:
	if (slot != 1 && !(CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   3a06c:	2801      	cmp	r0, #1
{
   3a06e:	b508      	push	{r3, lr}
	if (slot != 1 && !(CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER == 2 && slot == 3)) {
   3a070:	d106      	bne.n	3a080 <img_mgmt_write_pending+0x14>
	rc = boot_request_upgrade_multi(img_mgmt_slot_to_image(slot), permanent);
   3a072:	2000      	movs	r0, #0
   3a074:	f000 f90d 	bl	3a292 <boot_request_upgrade_multi>
	if (rc != 0) {
   3a078:	3800      	subs	r0, #0
   3a07a:	bf18      	it	ne
   3a07c:	2001      	movne	r0, #1
}
   3a07e:	bd08      	pop	{r3, pc}
		return MGMT_ERR_EINVAL;
   3a080:	2003      	movs	r0, #3
   3a082:	e7fc      	b.n	3a07e <img_mgmt_write_pending+0x12>

0003a084 <img_mgmt_write_confirmed>:
{
   3a084:	b508      	push	{r3, lr}
	rc = boot_write_img_confirmed();
   3a086:	f000 f90c 	bl	3a2a2 <boot_write_img_confirmed>
}
   3a08a:	3800      	subs	r0, #0
   3a08c:	bf18      	it	ne
   3a08e:	2001      	movne	r0, #1
   3a090:	bd08      	pop	{r3, pc}

0003a092 <img_mgmt_read>:
{
   3a092:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int area_id = img_mgmt_flash_area_id(slot);
   3a094:	f7ff ffad 	bl	39ff2 <img_mgmt_flash_area_id>
	if (area_id < 0) {
   3a098:	2800      	cmp	r0, #0
{
   3a09a:	460c      	mov	r4, r1
   3a09c:	4615      	mov	r5, r2
   3a09e:	461e      	mov	r6, r3
	if (area_id < 0) {
   3a0a0:	da02      	bge.n	3a0a8 <img_mgmt_read+0x16>
		return MGMT_ERR_EUNKNOWN;
   3a0a2:	2001      	movs	r0, #1
}
   3a0a4:	b002      	add	sp, #8
   3a0a6:	bd70      	pop	{r4, r5, r6, pc}
	rc = flash_area_open(area_id, &fa);
   3a0a8:	a901      	add	r1, sp, #4
   3a0aa:	b2c0      	uxtb	r0, r0
   3a0ac:	f7ea fc94 	bl	249d8 <flash_area_open>
	if (rc != 0) {
   3a0b0:	2800      	cmp	r0, #0
   3a0b2:	d1f6      	bne.n	3a0a2 <img_mgmt_read+0x10>
	rc = flash_area_read(fa, offset, dst, num_bytes);
   3a0b4:	4621      	mov	r1, r4
   3a0b6:	4633      	mov	r3, r6
   3a0b8:	462a      	mov	r2, r5
   3a0ba:	9801      	ldr	r0, [sp, #4]
   3a0bc:	f7fd ffd3 	bl	38066 <flash_area_read>
   3a0c0:	4604      	mov	r4, r0
	flash_area_close(fa);
   3a0c2:	9801      	ldr	r0, [sp, #4]
   3a0c4:	f7fd ffce 	bl	38064 <flash_area_close>
	if (rc != 0) {
   3a0c8:	1e20      	subs	r0, r4, #0
   3a0ca:	bf18      	it	ne
   3a0cc:	2001      	movne	r0, #1
   3a0ce:	e7e9      	b.n	3a0a4 <img_mgmt_read+0x12>

0003a0d0 <img_mgmt_erased_val>:

int
img_mgmt_erased_val(int slot, uint8_t *erased_val)
{
   3a0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct flash_area *fa;
	int rc;
	int area_id = img_mgmt_flash_area_id(slot);
   3a0d2:	f7ff ff8e 	bl	39ff2 <img_mgmt_flash_area_id>

	if (area_id < 0) {
   3a0d6:	2800      	cmp	r0, #0
{
   3a0d8:	460d      	mov	r5, r1
	if (area_id < 0) {
   3a0da:	da03      	bge.n	3a0e4 <img_mgmt_erased_val+0x14>
		return MGMT_ERR_EUNKNOWN;
   3a0dc:	2401      	movs	r4, #1

	*erased_val = flash_area_erased_val(fa);
	flash_area_close(fa);

	return 0;
}
   3a0de:	4620      	mov	r0, r4
   3a0e0:	b003      	add	sp, #12
   3a0e2:	bd30      	pop	{r4, r5, pc}
	rc = flash_area_open(area_id, &fa);
   3a0e4:	a901      	add	r1, sp, #4
   3a0e6:	b2c0      	uxtb	r0, r0
   3a0e8:	f7ea fc76 	bl	249d8 <flash_area_open>
	if (rc != 0) {
   3a0ec:	4604      	mov	r4, r0
   3a0ee:	2800      	cmp	r0, #0
   3a0f0:	d1f4      	bne.n	3a0dc <img_mgmt_erased_val+0xc>
	*erased_val = flash_area_erased_val(fa);
   3a0f2:	9801      	ldr	r0, [sp, #4]
   3a0f4:	f7fd fffe 	bl	380f4 <flash_area_erased_val>
   3a0f8:	7028      	strb	r0, [r5, #0]
	flash_area_close(fa);
   3a0fa:	9801      	ldr	r0, [sp, #4]
   3a0fc:	f7fd ffb2 	bl	38064 <flash_area_close>
	return 0;
   3a100:	e7ed      	b.n	3a0de <img_mgmt_erased_val+0xe>

0003a102 <zcbor_tstr_encode_ptr>:
{
   3a102:	b507      	push	{r0, r1, r2, lr}
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   3a104:	e9cd 1200 	strd	r1, r2, [sp]
	return zcbor_tstr_encode(state, &zs);
   3a108:	4669      	mov	r1, sp
   3a10a:	f001 f969 	bl	3b3e0 <zcbor_tstr_encode>
}
   3a10e:	b003      	add	sp, #12
   3a110:	f85d fb04 	ldr.w	pc, [sp], #4

0003a114 <img_mgmt_state_flags>:
{
   3a114:	b510      	push	{r4, lr}
   3a116:	4604      	mov	r4, r0
	swap_type = img_mgmt_swap_type(query_slot);
   3a118:	f7f1 f8ce 	bl	2b2b8 <img_mgmt_swap_type>
	switch (swap_type) {
   3a11c:	2803      	cmp	r0, #3
   3a11e:	d80f      	bhi.n	3a140 <img_mgmt_state_flags+0x2c>
   3a120:	e8df f000 	tbb	[pc, r0]
   3a124:	0b080502 	.word	0x0b080502
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   3a128:	b17c      	cbz	r4, 3a14a <img_mgmt_state_flags+0x36>
	flags = 0;
   3a12a:	2000      	movs	r0, #0
   3a12c:	e001      	b.n	3a132 <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   3a12e:	b174      	cbz	r4, 3a14e <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING;
   3a130:	2001      	movs	r0, #1
}
   3a132:	bd10      	pop	{r4, pc}
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   3a134:	b15c      	cbz	r4, 3a14e <img_mgmt_state_flags+0x3a>
			flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   3a136:	2009      	movs	r0, #9
   3a138:	e7fb      	b.n	3a132 <img_mgmt_state_flags+0x1e>
		if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   3a13a:	b154      	cbz	r4, 3a152 <img_mgmt_state_flags+0x3e>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   3a13c:	2002      	movs	r0, #2
   3a13e:	e7f8      	b.n	3a132 <img_mgmt_state_flags+0x1e>
	if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   3a140:	2c00      	cmp	r4, #0
   3a142:	d1f2      	bne.n	3a12a <img_mgmt_state_flags+0x16>
		flags |= IMG_MGMT_STATE_F_ACTIVE;
   3a144:	f044 0004 	orr.w	r0, r4, #4
   3a148:	e7f3      	b.n	3a132 <img_mgmt_state_flags+0x1e>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   3a14a:	2406      	movs	r4, #6
   3a14c:	e7fa      	b.n	3a144 <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_CONFIRMED;
   3a14e:	2402      	movs	r4, #2
   3a150:	e7f8      	b.n	3a144 <img_mgmt_state_flags+0x30>
			flags |= IMG_MGMT_STATE_F_ACTIVE;
   3a152:	2404      	movs	r4, #4
   3a154:	e7f6      	b.n	3a144 <img_mgmt_state_flags+0x30>

0003a156 <img_mgmt_state_any_pending>:
{
   3a156:	b508      	push	{r3, lr}
	return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   3a158:	2000      	movs	r0, #0
   3a15a:	f7ff ffdb 	bl	3a114 <img_mgmt_state_flags>
   3a15e:	f010 0f01 	tst.w	r0, #1
   3a162:	f04f 0001 	mov.w	r0, #1
   3a166:	d103      	bne.n	3a170 <img_mgmt_state_any_pending+0x1a>
		   img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   3a168:	f7ff ffd4 	bl	3a114 <img_mgmt_state_flags>
   3a16c:	f000 0001 	and.w	r0, r0, #1
}
   3a170:	bd08      	pop	{r3, pc}

0003a172 <img_mgmt_slot_in_use>:
{
   3a172:	b508      	push	{r3, lr}
	state_flags = img_mgmt_state_flags(slot);
   3a174:	f7ff ffce 	bl	3a114 <img_mgmt_state_flags>
}
   3a178:	f010 0007 	ands.w	r0, r0, #7
   3a17c:	bf18      	it	ne
   3a17e:	2001      	movne	r0, #1
   3a180:	bd08      	pop	{r3, pc}

0003a182 <img_mgmt_state_set_pending>:
{
   3a182:	b530      	push	{r4, r5, lr}
   3a184:	b089      	sub	sp, #36	; 0x24
   3a186:	4604      	mov	r4, r0
   3a188:	460d      	mov	r5, r1
	state_flags = img_mgmt_state_flags(slot);
   3a18a:	f7ff ffc3 	bl	3a114 <img_mgmt_state_flags>
	if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   3a18e:	0783      	lsls	r3, r0, #30
   3a190:	d500      	bpl.n	3a194 <img_mgmt_state_set_pending+0x12>
   3a192:	b98c      	cbnz	r4, 3a1b8 <img_mgmt_state_set_pending+0x36>
	rc = img_mgmt_write_pending(slot, permanent);
   3a194:	1e29      	subs	r1, r5, #0
   3a196:	bf18      	it	ne
   3a198:	2101      	movne	r1, #1
   3a19a:	4620      	mov	r0, r4
   3a19c:	f7ff ff66 	bl	3a06c <img_mgmt_write_pending>
	if (rc != 0) {
   3a1a0:	1e05      	subs	r5, r0, #0
   3a1a2:	bf18      	it	ne
   3a1a4:	2501      	movne	r5, #1
	if (img_mgmt_read_info(slot, NULL, hash, NULL)) {
   3a1a6:	2300      	movs	r3, #0
   3a1a8:	466a      	mov	r2, sp
   3a1aa:	4619      	mov	r1, r3
   3a1ac:	4620      	mov	r0, r4
   3a1ae:	f7f1 faa3 	bl	2b6f8 <img_mgmt_read_info>
}
   3a1b2:	4628      	mov	r0, r5
   3a1b4:	b009      	add	sp, #36	; 0x24
   3a1b6:	bd30      	pop	{r4, r5, pc}
		rc = MGMT_ERR_EBADSTATE;
   3a1b8:	2506      	movs	r5, #6
   3a1ba:	e7f4      	b.n	3a1a6 <img_mgmt_state_set_pending+0x24>

0003a1bc <img_mgmt_state_confirm>:
{
   3a1bc:	b508      	push	{r3, lr}
	if (img_mgmt_state_any_pending()) {
   3a1be:	f7ff ffca 	bl	3a156 <img_mgmt_state_any_pending>
   3a1c2:	b908      	cbnz	r0, 3a1c8 <img_mgmt_state_confirm+0xc>
	rc = img_mgmt_write_confirmed();
   3a1c4:	f7ff ff5e 	bl	3a084 <img_mgmt_write_confirmed>
}
   3a1c8:	2000      	movs	r0, #0
   3a1ca:	bd08      	pop	{r3, pc}

0003a1cc <img_mgmt_find_by_hash>:
{
   3a1cc:	b570      	push	{r4, r5, r6, lr}
   3a1ce:	4605      	mov	r5, r0
   3a1d0:	b088      	sub	sp, #32
   3a1d2:	460e      	mov	r6, r1
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   3a1d4:	2400      	movs	r4, #0
		if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   3a1d6:	2300      	movs	r3, #0
   3a1d8:	466a      	mov	r2, sp
   3a1da:	4631      	mov	r1, r6
   3a1dc:	4620      	mov	r0, r4
   3a1de:	f7f1 fa8b 	bl	2b6f8 <img_mgmt_read_info>
   3a1e2:	b138      	cbz	r0, 3a1f4 <img_mgmt_find_by_hash+0x28>
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   3a1e4:	b124      	cbz	r4, 3a1f0 <img_mgmt_find_by_hash+0x24>
	return -1;
   3a1e6:	f04f 34ff 	mov.w	r4, #4294967295
}
   3a1ea:	4620      	mov	r0, r4
   3a1ec:	b008      	add	sp, #32
   3a1ee:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < 2 * CONFIG_IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   3a1f0:	2401      	movs	r4, #1
   3a1f2:	e7f0      	b.n	3a1d6 <img_mgmt_find_by_hash+0xa>
		if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   3a1f4:	2220      	movs	r2, #32
   3a1f6:	4629      	mov	r1, r5
   3a1f8:	4668      	mov	r0, sp
   3a1fa:	f7fe fab7 	bl	3876c <memcmp>
   3a1fe:	2800      	cmp	r0, #0
   3a200:	d1f0      	bne.n	3a1e4 <img_mgmt_find_by_hash+0x18>
   3a202:	e7f2      	b.n	3a1ea <img_mgmt_find_by_hash+0x1e>

0003a204 <img_mgmt_my_version>:
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   3a204:	2300      	movs	r3, #0
{
   3a206:	4601      	mov	r1, r0
	return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   3a208:	461a      	mov	r2, r3
   3a20a:	4618      	mov	r0, r3
   3a20c:	f7f1 ba74 	b.w	2b6f8 <img_mgmt_read_info>

0003a210 <os_mgmt_reset_work_handler>:
{
   3a210:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   3a212:	2000      	movs	r0, #0
   3a214:	f7ea fbca 	bl	249ac <sys_reboot>

0003a218 <stats_mgmt_count_plus_one>:
	(*counter)++;
   3a218:	680b      	ldr	r3, [r1, #0]
   3a21a:	3301      	adds	r3, #1
   3a21c:	600b      	str	r3, [r1, #0]
}
   3a21e:	2000      	movs	r0, #0
   3a220:	4770      	bx	lr

0003a222 <stat_mgmt_walk_cb>:
{
   3a222:	b530      	push	{r4, r5, lr}
   3a224:	460c      	mov	r4, r1
	switch (hdr->s_size) {
   3a226:	7901      	ldrb	r1, [r0, #4]
   3a228:	2904      	cmp	r1, #4
{
   3a22a:	b085      	sub	sp, #20
	stat_val = (uint8_t *)hdr + off;
   3a22c:	eb00 0503 	add.w	r5, r0, r3
	switch (hdr->s_size) {
   3a230:	d00e      	beq.n	3a250 <stat_mgmt_walk_cb+0x2e>
   3a232:	2908      	cmp	r1, #8
   3a234:	d00e      	beq.n	3a254 <stat_mgmt_walk_cb+0x32>
   3a236:	2902      	cmp	r1, #2
   3a238:	d10f      	bne.n	3a25a <stat_mgmt_walk_cb+0x38>
		entry.value = *(uint16_t *) stat_val;
   3a23a:	5ac1      	ldrh	r1, [r0, r3]
		entry.value = *(uint32_t *) stat_val;
   3a23c:	2300      	movs	r3, #0
		entry.value = *(uint16_t *) stat_val;
   3a23e:	e9cd 1302 	strd	r1, r3, [sp, #8]
	return walk_arg->cb(walk_arg->zse, &entry);
   3a242:	6860      	ldr	r0, [r4, #4]
   3a244:	6823      	ldr	r3, [r4, #0]
	entry.name = name;
   3a246:	9200      	str	r2, [sp, #0]
	return walk_arg->cb(walk_arg->zse, &entry);
   3a248:	4669      	mov	r1, sp
   3a24a:	4798      	blx	r3
}
   3a24c:	b005      	add	sp, #20
   3a24e:	bd30      	pop	{r4, r5, pc}
		entry.value = *(uint32_t *) stat_val;
   3a250:	58c1      	ldr	r1, [r0, r3]
   3a252:	e7f3      	b.n	3a23c <stat_mgmt_walk_cb+0x1a>
		entry.value = *(uint64_t *) stat_val;
   3a254:	58c1      	ldr	r1, [r0, r3]
   3a256:	686b      	ldr	r3, [r5, #4]
		break;
   3a258:	e7f1      	b.n	3a23e <stat_mgmt_walk_cb+0x1c>
	switch (hdr->s_size) {
   3a25a:	2003      	movs	r0, #3
   3a25c:	e7f6      	b.n	3a24c <stat_mgmt_walk_cb+0x2a>

0003a25e <stat_mgmt_cb_encode>:
{
   3a25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bool ok = zcbor_tstr_put_term(zse, entry->name) &&
   3a260:	680e      	ldr	r6, [r1, #0]
{
   3a262:	4604      	mov	r4, r0
	bool ok = zcbor_tstr_put_term(zse, entry->name) &&
   3a264:	4630      	mov	r0, r6
{
   3a266:	460d      	mov	r5, r1
	bool ok = zcbor_tstr_put_term(zse, entry->name) &&
   3a268:	f7fe fa64 	bl	38734 <strlen>
	return zcbor_tstr_encode(state, &zs);
   3a26c:	4669      	mov	r1, sp
	const struct zcbor_string zs = { .value = (const uint8_t *)ptr, .len = len };
   3a26e:	e9cd 6000 	strd	r6, r0, [sp]
	return zcbor_tstr_encode(state, &zs);
   3a272:	4620      	mov	r0, r4
   3a274:	f001 f8b4 	bl	3b3e0 <zcbor_tstr_encode>
   3a278:	b120      	cbz	r0, 3a284 <stat_mgmt_cb_encode+0x26>
		  zcbor_uint32_put(zse, entry->value);
   3a27a:	68a9      	ldr	r1, [r5, #8]
   3a27c:	4620      	mov	r0, r4
   3a27e:	f001 f89e 	bl	3b3be <zcbor_uint32_put>
	bool ok = zcbor_tstr_put_term(zse, entry->name) &&
   3a282:	b910      	cbnz	r0, 3a28a <stat_mgmt_cb_encode+0x2c>
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   3a284:	2007      	movs	r0, #7
}
   3a286:	b002      	add	sp, #8
   3a288:	bd70      	pop	{r4, r5, r6, pc}
	return ok ? MGMT_ERR_EOK : MGMT_ERR_EMSGSIZE;
   3a28a:	2000      	movs	r0, #0
   3a28c:	e7fb      	b.n	3a286 <stat_mgmt_cb_encode+0x28>

0003a28e <mcuboot_swap_type_multi>:
	return 0;
}

int mcuboot_swap_type_multi(int image_index)
{
	return boot_swap_type_multi(image_index);
   3a28e:	f7f5 bbdb 	b.w	2fa48 <boot_swap_type_multi>

0003a292 <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   3a292:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   3a294:	f7f5 fc4e 	bl	2fb34 <boot_set_pending_multi>
	if (rc) {
		return -EFAULT;
   3a298:	2800      	cmp	r0, #0
	}
	return 0;
}
   3a29a:	bf18      	it	ne
   3a29c:	f06f 000d 	mvnne.w	r0, #13
   3a2a0:	bd08      	pop	{r3, pc}

0003a2a2 <boot_write_img_confirmed>:

	return state.image_ok == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   3a2a2:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3a2a4:	f000 fd21 	bl	3acea <boot_set_confirmed>
	if (rc) {
		return -EIO;
   3a2a8:	2800      	cmp	r0, #0
	}

	return 0;
}
   3a2aa:	bf18      	it	ne
   3a2ac:	f06f 0004 	mvnne.w	r0, #4
   3a2b0:	bd08      	pop	{r3, pc}

0003a2b2 <fixed_data_unref>:
}
   3a2b2:	4770      	bx	lr

0003a2b4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3a2b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   3a2b6:	6849      	ldr	r1, [r1, #4]
   3a2b8:	6809      	ldr	r1, [r1, #0]
   3a2ba:	f7f1 be01 	b.w	2bec0 <net_buf_alloc_len>

0003a2be <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   3a2be:	f7f8 b803 	b.w	322c8 <z_impl_k_queue_get>

0003a2c2 <net_buf_simple_pull_le16>:
{
   3a2c2:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   3a2c4:	6803      	ldr	r3, [r0, #0]
   3a2c6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   3a2c8:	2102      	movs	r1, #2
   3a2ca:	f7f2 f87b 	bl	2c3c4 <net_buf_simple_pull>
}
   3a2ce:	4620      	mov	r0, r4
   3a2d0:	bd10      	pop	{r4, pc}

0003a2d2 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   3a2d2:	6802      	ldr	r2, [r0, #0]
   3a2d4:	6880      	ldr	r0, [r0, #8]
}
   3a2d6:	1a10      	subs	r0, r2, r0
   3a2d8:	4770      	bx	lr

0003a2da <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   3a2da:	8883      	ldrh	r3, [r0, #4]
   3a2dc:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   3a2de:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   3a2e0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   3a2e2:	6803      	ldr	r3, [r0, #0]
   3a2e4:	1a5b      	subs	r3, r3, r1
}
   3a2e6:	1ad0      	subs	r0, r2, r3
   3a2e8:	4770      	bx	lr

0003a2ea <net_buf_simple_add_mem>:
{
   3a2ea:	b538      	push	{r3, r4, r5, lr}
   3a2ec:	460d      	mov	r5, r1
   3a2ee:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3a2f0:	4611      	mov	r1, r2
   3a2f2:	f7f2 f89b 	bl	2c42c <net_buf_simple_add>
   3a2f6:	4622      	mov	r2, r4
   3a2f8:	4629      	mov	r1, r5
}
   3a2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3a2fe:	f7fe ba5c 	b.w	387ba <memcpy>

0003a302 <net_buf_simple_add_u8>:
{
   3a302:	b510      	push	{r4, lr}
   3a304:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   3a306:	2101      	movs	r1, #1
   3a308:	f7f2 f890 	bl	2c42c <net_buf_simple_add>
	*u8 = val;
   3a30c:	7004      	strb	r4, [r0, #0]
}
   3a30e:	bd10      	pop	{r4, pc}

0003a310 <net_buf_simple_add_le16>:
{
   3a310:	b510      	push	{r4, lr}
   3a312:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   3a314:	2102      	movs	r1, #2
   3a316:	f7f2 f889 	bl	2c42c <net_buf_simple_add>
	dst[0] = val;
   3a31a:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   3a31c:	0a24      	lsrs	r4, r4, #8
   3a31e:	7044      	strb	r4, [r0, #1]
}
   3a320:	bd10      	pop	{r4, pc}

0003a322 <adc_context_on_timer_expired>:
{
   3a322:	b410      	push	{r4}
   3a324:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3a326:	3808      	subs	r0, #8
   3a328:	f3bf 8f5b 	dmb	ish
   3a32c:	e850 2f00 	ldrex	r2, [r0]
   3a330:	1c51      	adds	r1, r2, #1
   3a332:	e840 1400 	strex	r4, r1, [r0]
   3a336:	2c00      	cmp	r4, #0
   3a338:	d1f8      	bne.n	3a32c <adc_context_on_timer_expired+0xa>
   3a33a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   3a33e:	b912      	cbnz	r2, 3a346 <adc_context_on_timer_expired+0x24>
}
   3a340:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   3a342:	f7f2 b89d 	b.w	2c480 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   3a346:	f06f 020f 	mvn.w	r2, #15
}
   3a34a:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   3a34c:	669a      	str	r2, [r3, #104]	; 0x68
}
   3a34e:	4770      	bx	lr

0003a350 <set_on_state>:
	__asm__ volatile(
   3a350:	f04f 0340 	mov.w	r3, #64	; 0x40
   3a354:	f3ef 8211 	mrs	r2, BASEPRI
   3a358:	f383 8812 	msr	BASEPRI_MAX, r3
   3a35c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3a360:	6803      	ldr	r3, [r0, #0]
   3a362:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3a366:	f043 0302 	orr.w	r3, r3, #2
   3a36a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3a36c:	f382 8811 	msr	BASEPRI, r2
   3a370:	f3bf 8f6f 	isb	sy
}
   3a374:	4770      	bx	lr

0003a376 <async_start>:
{
   3a376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a378:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   3a37a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   3a37c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   3a37e:	f04f 0540 	mov.w	r5, #64	; 0x40
   3a382:	f3ef 8611 	mrs	r6, BASEPRI
   3a386:	f385 8812 	msr	BASEPRI_MAX, r5
   3a38a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3a38e:	250c      	movs	r5, #12
   3a390:	4369      	muls	r1, r5
   3a392:	440c      	add	r4, r1
   3a394:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3a396:	f005 0c07 	and.w	ip, r5, #7
   3a39a:	f1bc 0f01 	cmp.w	ip, #1
   3a39e:	d10b      	bne.n	3a3b8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3a3a0:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   3a3a2:	f386 8811 	msr	BASEPRI, r6
   3a3a6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   3a3aa:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3a3ae:	6843      	ldr	r3, [r0, #4]
   3a3b0:	585b      	ldr	r3, [r3, r1]
   3a3b2:	4798      	blx	r3
	return 0;
   3a3b4:	2000      	movs	r0, #0
}
   3a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3a3b8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   3a3bc:	42af      	cmp	r7, r5
   3a3be:	f386 8811 	msr	BASEPRI, r6
   3a3c2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   3a3c6:	bf0c      	ite	eq
   3a3c8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   3a3cc:	f04f 30ff 	movne.w	r0, #4294967295
   3a3d0:	e7f1      	b.n	3a3b6 <async_start+0x40>

0003a3d2 <api_start>:
{
   3a3d2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3a3d4:	2480      	movs	r4, #128	; 0x80
   3a3d6:	9400      	str	r4, [sp, #0]
   3a3d8:	f7ff ffcd 	bl	3a376 <async_start>
}
   3a3dc:	b002      	add	sp, #8
   3a3de:	bd10      	pop	{r4, pc}

0003a3e0 <onoff_started_callback>:
	return &data->mgr[type];
   3a3e0:	6900      	ldr	r0, [r0, #16]
   3a3e2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3a3e4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3a3e8:	2100      	movs	r1, #0
   3a3ea:	4710      	bx	r2

0003a3ec <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3a3ec:	2000      	movs	r0, #0
   3a3ee:	f7f5 b8f5 	b.w	2f5dc <nrfx_clock_start>

0003a3f2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3a3f2:	2000      	movs	r0, #0
   3a3f4:	f7f5 b912 	b.w	2f61c <nrfx_clock_stop>

0003a3f8 <blocking_start_callback>:
{
   3a3f8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3a3fa:	f7f7 bfbd 	b.w	32378 <z_impl_k_sem_give>

0003a3fe <api_stop>:
	return stop(dev, subsys, CTX_API);
   3a3fe:	2280      	movs	r2, #128	; 0x80
   3a400:	f7f2 ba6e 	b.w	2c8e0 <stop>

0003a404 <led_pwm_blink>:
{
   3a404:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct led_pwm_config *config = dev->config;
   3a406:	6845      	ldr	r5, [r0, #4]
	if (led >= config->num_leds) {
   3a408:	6828      	ldr	r0, [r5, #0]
   3a40a:	4288      	cmp	r0, r1
   3a40c:	d906      	bls.n	3a41c <led_pwm_blink+0x18>
	return __builtin_add_overflow(a, b, result);
   3a40e:	18d3      	adds	r3, r2, r3
   3a410:	d204      	bcs.n	3a41c <led_pwm_blink+0x18>
	return __builtin_mul_overflow(a, b, result);
}

static inline bool u32_mul_overflow(uint32_t a, uint32_t b, uint32_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   3a412:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3a416:	fba3 0304 	umull	r0, r3, r3, r4
   3a41a:	b113      	cbz	r3, 3a422 <led_pwm_blink+0x1e>
		return -EINVAL;
   3a41c:	f06f 0015 	mvn.w	r0, #21
   3a420:	e010      	b.n	3a444 <led_pwm_blink+0x40>
   3a422:	fba2 3204 	umull	r3, r2, r2, r4
   3a426:	2a00      	cmp	r2, #0
   3a428:	d1f8      	bne.n	3a41c <led_pwm_blink+0x18>
	dt_led = &config->led[led];
   3a42a:	686d      	ldr	r5, [r5, #4]
   3a42c:	010e      	lsls	r6, r1, #4
   3a42e:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_dt(const struct pwm_dt_spec *spec, uint32_t period,
			     uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, period, pulse, spec->flags);
   3a432:	4363      	muls	r3, r4
   3a434:	898a      	ldrh	r2, [r1, #12]
   3a436:	9200      	str	r2, [sp, #0]
   3a438:	6849      	ldr	r1, [r1, #4]
   3a43a:	fb04 f200 	mul.w	r2, r4, r0
   3a43e:	59a8      	ldr	r0, [r5, r6]
   3a440:	f7e9 f846 	bl	234d0 <pwm_set>
}
   3a444:	b002      	add	sp, #8
   3a446:	bd70      	pop	{r4, r5, r6, pc}

0003a448 <led_pwm_set_brightness>:
{
   3a448:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3a44a:	4613      	mov	r3, r2
	const struct led_pwm_config *config = dev->config;
   3a44c:	6842      	ldr	r2, [r0, #4]
	if (led >= config->num_leds || value > 100) {
   3a44e:	6810      	ldr	r0, [r2, #0]
   3a450:	4288      	cmp	r0, r1
   3a452:	d912      	bls.n	3a47a <led_pwm_set_brightness+0x32>
   3a454:	2b64      	cmp	r3, #100	; 0x64
   3a456:	d810      	bhi.n	3a47a <led_pwm_set_brightness+0x32>
	dt_led = &config->led[led];
   3a458:	6850      	ldr	r0, [r2, #4]
   3a45a:	010c      	lsls	r4, r1, #4
   3a45c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
				dt_led->period * value / 100);
   3a460:	688a      	ldr	r2, [r1, #8]
 * @see pwm_set_pulse_dt()
 */
static inline int pwm_set_pulse_dt(const struct pwm_dt_spec *spec,
				   uint32_t pulse)
{
	return pwm_set(spec->dev, spec->channel, spec->period, pulse,
   3a462:	898d      	ldrh	r5, [r1, #12]
   3a464:	9500      	str	r5, [sp, #0]
   3a466:	4353      	muls	r3, r2
   3a468:	2564      	movs	r5, #100	; 0x64
   3a46a:	6849      	ldr	r1, [r1, #4]
   3a46c:	5900      	ldr	r0, [r0, r4]
   3a46e:	fbb3 f3f5 	udiv	r3, r3, r5
   3a472:	f7e9 f82d 	bl	234d0 <pwm_set>
}
   3a476:	b003      	add	sp, #12
   3a478:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3a47a:	f06f 0015 	mvn.w	r0, #21
   3a47e:	e7fa      	b.n	3a476 <led_pwm_set_brightness+0x2e>

0003a480 <led_pwm_on>:
	return led_pwm_set_brightness(dev, led, 100);
   3a480:	2264      	movs	r2, #100	; 0x64
   3a482:	f7ff bfe1 	b.w	3a448 <led_pwm_set_brightness>

0003a486 <led_pwm_off>:
	return led_pwm_set_brightness(dev, led, 0);
   3a486:	2200      	movs	r2, #0
   3a488:	f7ff bfde 	b.w	3a448 <led_pwm_set_brightness>

0003a48c <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   3a48c:	b513      	push	{r0, r1, r4, lr}
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   3a48e:	aa01      	add	r2, sp, #4
{
   3a490:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   3a492:	f000 fa19 	bl	3a8c8 <pinctrl_lookup_state>
	if (ret < 0) {
   3a496:	2800      	cmp	r0, #0
   3a498:	db05      	blt.n	3a4a6 <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   3a49a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3a49c:	6822      	ldr	r2, [r4, #0]
   3a49e:	7919      	ldrb	r1, [r3, #4]
   3a4a0:	6818      	ldr	r0, [r3, #0]
   3a4a2:	f000 fa24 	bl	3a8ee <pinctrl_configure_pins>
}
   3a4a6:	b002      	add	sp, #8
   3a4a8:	bd10      	pop	{r4, pc}

0003a4aa <pwm_nrfx_pm_action>:
	memset(dev->data, 0, sizeof(struct pwm_nrfx_data));
}

static int pwm_nrfx_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   3a4aa:	b570      	push	{r4, r5, r6, lr}
   3a4ac:	4604      	mov	r4, r0
#ifdef CONFIG_PINCTRL
	const struct pwm_nrfx_config *config = dev->config;
   3a4ae:	6846      	ldr	r6, [r0, #4]
#endif
	int ret = 0;

	switch (action) {
   3a4b0:	460d      	mov	r5, r1
   3a4b2:	b161      	cbz	r1, 3a4ce <pwm_nrfx_pm_action+0x24>
   3a4b4:	2901      	cmp	r1, #1
   3a4b6:	d118      	bne.n	3a4ea <pwm_nrfx_pm_action+0x40>
	case PM_DEVICE_ACTION_RESUME:
#ifdef CONFIG_PINCTRL
		ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   3a4b8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3a4ba:	2100      	movs	r1, #0
   3a4bc:	f7ff ffe6 	bl	3a48c <pinctrl_apply_state>
		if (ret < 0) {
   3a4c0:	2800      	cmp	r0, #0
   3a4c2:	db14      	blt.n	3a4ee <pwm_nrfx_pm_action+0x44>
			return ret;
		}
#endif
		ret = pwm_nrfx_init(dev);
   3a4c4:	4620      	mov	r0, r4
	default:
		return -ENOTSUP;
	}

	return ret;
}
   3a4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = pwm_nrfx_init(dev);
   3a4ca:	f7f2 bd17 	b.w	2cefc <pwm_nrfx_init>
	nrfx_pwm_uninit(&config->pwm);
   3a4ce:	4630      	mov	r0, r6
   3a4d0:	f7f6 fa82 	bl	309d8 <nrfx_pwm_uninit>
	memset(dev->data, 0, sizeof(struct pwm_nrfx_data));
   3a4d4:	4629      	mov	r1, r5
   3a4d6:	6920      	ldr	r0, [r4, #16]
   3a4d8:	2210      	movs	r2, #16
   3a4da:	f7fe f979 	bl	387d0 <memset>
		ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_SLEEP);
   3a4de:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3a4e0:	2101      	movs	r1, #1
}
   3a4e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_SLEEP);
   3a4e6:	f7ff bfd1 	b.w	3a48c <pinctrl_apply_state>
	switch (action) {
   3a4ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   3a4ee:	bd70      	pop	{r4, r5, r6, pc}

0003a4f0 <k_sem_give>:
   3a4f0:	f7f7 bf42 	b.w	32378 <z_impl_k_sem_give>

0003a4f4 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   3a4f4:	b918      	cbnz	r0, 3a4fe <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   3a4f6:	f101 0030 	add.w	r0, r1, #48	; 0x30
   3a4fa:	f7ff bff9 	b.w	3a4f0 <k_sem_give>
}
   3a4fe:	4770      	bx	lr

0003a500 <pinctrl_apply_state>:
{
   3a500:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   3a502:	aa01      	add	r2, sp, #4
{
   3a504:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   3a506:	f000 f9df 	bl	3a8c8 <pinctrl_lookup_state>
	if (ret < 0) {
   3a50a:	2800      	cmp	r0, #0
   3a50c:	db05      	blt.n	3a51a <pinctrl_apply_state+0x1a>
	return pinctrl_apply_state_direct(config, state);
   3a50e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3a510:	6822      	ldr	r2, [r4, #0]
   3a512:	7919      	ldrb	r1, [r3, #4]
   3a514:	6818      	ldr	r0, [r3, #0]
   3a516:	f000 f9ea 	bl	3a8ee <pinctrl_configure_pins>
}
   3a51a:	b002      	add	sp, #8
   3a51c:	bd10      	pop	{r4, pc}

0003a51e <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   3a51e:	f04f 32ff 	mov.w	r2, #4294967295
   3a522:	f04f 33ff 	mov.w	r3, #4294967295
   3a526:	3018      	adds	r0, #24
   3a528:	f7f7 bf62 	b.w	323f0 <z_impl_k_sem_take>

0003a52c <qspi_trans_lock.isra.0>:
   3a52c:	f04f 32ff 	mov.w	r2, #4294967295
   3a530:	f04f 33ff 	mov.w	r3, #4294967295
   3a534:	f7f7 bf5c 	b.w	323f0 <z_impl_k_sem_take>

0003a538 <qspi_nor_write_protection_set>:
{
   3a538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   3a53a:	2200      	movs	r2, #0
   3a53c:	4291      	cmp	r1, r2
   3a53e:	bf0c      	ite	eq
   3a540:	2306      	moveq	r3, #6
   3a542:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   3a544:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   3a546:	e9cd 2201 	strd	r2, r2, [sp, #4]
   3a54a:	9203      	str	r2, [sp, #12]
   3a54c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   3a550:	f7f2 fd72 	bl	2d038 <qspi_send_cmd>
		ret = -EIO;
   3a554:	2800      	cmp	r0, #0
}
   3a556:	bf18      	it	ne
   3a558:	f06f 0004 	mvnne.w	r0, #4
   3a55c:	b005      	add	sp, #20
   3a55e:	f85d fb04 	ldr.w	pc, [sp], #4

0003a562 <exit_dpd>:
{
   3a562:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		struct qspi_cmd cmd = {
   3a564:	2400      	movs	r4, #0
   3a566:	23ab      	movs	r3, #171	; 0xab
		ret = qspi_send_cmd(dev, &cmd, false);
   3a568:	4622      	mov	r2, r4
   3a56a:	a901      	add	r1, sp, #4
		struct qspi_cmd cmd = {
   3a56c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3a570:	9403      	str	r4, [sp, #12]
   3a572:	f88d 3004 	strb.w	r3, [sp, #4]
		ret = qspi_send_cmd(dev, &cmd, false);
   3a576:	f7f2 fd5f 	bl	2d038 <qspi_send_cmd>
		if (ret < 0) {
   3a57a:	2800      	cmp	r0, #0
   3a57c:	db03      	blt.n	3a586 <exit_dpd+0x24>
	z_impl_k_busy_wait(usec_to_wait);
   3a57e:	2023      	movs	r0, #35	; 0x23
   3a580:	f001 f884 	bl	3b68c <z_impl_k_busy_wait>
	return 0;
   3a584:	4620      	mov	r0, r4
}
   3a586:	b004      	add	sp, #16
   3a588:	bd10      	pop	{r4, pc}

0003a58a <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   3a58a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   3a58c:	23ff      	movs	r3, #255	; 0xff
   3a58e:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   3a592:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   3a596:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   3a598:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   3a59a:	2301      	movs	r3, #1
   3a59c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   3a5a0:	2305      	movs	r3, #5
   3a5a2:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
   3a5a6:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   3a5a8:	ab01      	add	r3, sp, #4
   3a5aa:	9204      	str	r2, [sp, #16]
   3a5ac:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   3a5ae:	f7f2 fd43 	bl	2d038 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   3a5b2:	2800      	cmp	r0, #0
   3a5b4:	bfa8      	it	ge
   3a5b6:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   3a5ba:	b007      	add	sp, #28
   3a5bc:	f85d fb04 	ldr.w	pc, [sp], #4

0003a5c0 <is_regular_addr_valid>:
{
   3a5c0:	b538      	push	{r3, r4, r5, lr}
   3a5c2:	4605      	mov	r5, r0
   3a5c4:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   3a5c6:	f000 fc32 	bl	3ae2e <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   3a5ca:	2d00      	cmp	r5, #0
   3a5cc:	db07      	blt.n	3a5de <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   3a5ce:	42a8      	cmp	r0, r5
   3a5d0:	d905      	bls.n	3a5de <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   3a5d2:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   3a5d4:	4284      	cmp	r4, r0
   3a5d6:	bf8c      	ite	hi
   3a5d8:	2000      	movhi	r0, #0
   3a5da:	2001      	movls	r0, #1
}
   3a5dc:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   3a5de:	2000      	movs	r0, #0
   3a5e0:	e7fc      	b.n	3a5dc <is_regular_addr_valid+0x1c>

0003a5e2 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3a5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3a5e4:	461c      	mov	r4, r3
   3a5e6:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3a5e8:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   3a5ea:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   3a5ec:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   3a5ee:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   3a5f0:	6913      	ldr	r3, [r2, #16]
{
   3a5f2:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   3a5f4:	aa01      	add	r2, sp, #4
   3a5f6:	4669      	mov	r1, sp
   3a5f8:	4798      	blx	r3

	while (layout_size--) {
   3a5fa:	9b01      	ldr	r3, [sp, #4]
   3a5fc:	1e5a      	subs	r2, r3, #1
   3a5fe:	9201      	str	r2, [sp, #4]
   3a600:	b91b      	cbnz	r3, 3a60a <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3a602:	f06f 0015 	mvn.w	r0, #21
}
   3a606:	b003      	add	sp, #12
   3a608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   3a60a:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   3a60c:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   3a60e:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   3a610:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   3a612:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   3a614:	b985      	cbnz	r5, 3a638 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   3a616:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   3a618:	f8d0 c000 	ldr.w	ip, [r0]
   3a61c:	4563      	cmp	r3, ip
   3a61e:	bf28      	it	cs
   3a620:	4663      	movcs	r3, ip
		info->index += index_jmp;
   3a622:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   3a624:	fb03 1107 	mla	r1, r3, r7, r1
   3a628:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   3a62a:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3a62c:	6802      	ldr	r2, [r0, #0]
   3a62e:	429a      	cmp	r2, r3
   3a630:	d806      	bhi.n	3a640 <flash_get_page_info+0x5e>
		layout++;
   3a632:	3008      	adds	r0, #8
   3a634:	9000      	str	r0, [sp, #0]
   3a636:	e7e0      	b.n	3a5fa <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   3a638:	1a6b      	subs	r3, r5, r1
   3a63a:	fbb3 f3f7 	udiv	r3, r3, r7
   3a63e:	e7eb      	b.n	3a618 <flash_get_page_info+0x36>
			return 0;
   3a640:	2000      	movs	r0, #0
   3a642:	e7e0      	b.n	3a606 <flash_get_page_info+0x24>

0003a644 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3a644:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3a646:	2200      	movs	r2, #0
   3a648:	f7ff bfcb 	b.w	3a5e2 <flash_get_page_info>

0003a64c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3a64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   3a650:	6883      	ldr	r3, [r0, #8]
{
   3a652:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   3a654:	691b      	ldr	r3, [r3, #16]
{
   3a656:	4688      	mov	r8, r1
   3a658:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3a65a:	a901      	add	r1, sp, #4
   3a65c:	aa02      	add	r2, sp, #8
   3a65e:	4798      	blx	r3
	off_t off = 0;
   3a660:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   3a662:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3a664:	4625      	mov	r5, r4
   3a666:	9b02      	ldr	r3, [sp, #8]
   3a668:	42ab      	cmp	r3, r5
   3a66a:	d802      	bhi.n	3a672 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3a66c:	b006      	add	sp, #24
   3a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   3a672:	9f01      	ldr	r7, [sp, #4]
   3a674:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   3a678:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   3a67a:	687b      	ldr	r3, [r7, #4]
   3a67c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3a67e:	683a      	ldr	r2, [r7, #0]
   3a680:	42b2      	cmp	r2, r6
   3a682:	eb0a 0306 	add.w	r3, sl, r6
   3a686:	d802      	bhi.n	3a68e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3a688:	3501      	adds	r5, #1
   3a68a:	469a      	mov	sl, r3
   3a68c:	e7eb      	b.n	3a666 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   3a68e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3a690:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3a692:	4649      	mov	r1, r9
   3a694:	a803      	add	r0, sp, #12
   3a696:	47c0      	blx	r8
   3a698:	2800      	cmp	r0, #0
   3a69a:	d0e7      	beq.n	3a66c <flash_page_foreach+0x20>
			off += page_info.size;
   3a69c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3a69e:	3601      	adds	r6, #1
			off += page_info.size;
   3a6a0:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3a6a2:	e7ec      	b.n	3a67e <flash_page_foreach+0x32>

0003a6a4 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   3a6a4:	6902      	ldr	r2, [r0, #16]
{
   3a6a6:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   3a6a8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3a6ac:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3a6b0:	2000      	movs	r0, #0
   3a6b2:	4770      	bx	lr

0003a6b4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3a6b4:	6843      	ldr	r3, [r0, #4]
   3a6b6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3a6b8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3a6bc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3a6c0:	4770      	bx	lr

0003a6c2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3a6c2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   3a6c4:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3a6c6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a6c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3a6cc:	b150      	cbz	r0, 3a6e4 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   3a6ce:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3a6d0:	2000      	movs	r0, #0
   3a6d2:	7812      	ldrb	r2, [r2, #0]
   3a6d4:	700a      	strb	r2, [r1, #0]
   3a6d6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3a6da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a6de:	2201      	movs	r2, #1
   3a6e0:	601a      	str	r2, [r3, #0]
	return 0;
   3a6e2:	4770      	bx	lr
		return -1;
   3a6e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   3a6e8:	4770      	bx	lr

0003a6ea <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3a6ea:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   3a6ec:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a6ee:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3a6f2:	b940      	cbnz	r0, 3a706 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3a6f4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3a6f6:	079b      	lsls	r3, r3, #30
   3a6f8:	d406      	bmi.n	3a708 <is_tx_ready.isra.0+0x1e>
   3a6fa:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   3a6fe:	3800      	subs	r0, #0
   3a700:	bf18      	it	ne
   3a702:	2001      	movne	r0, #1
   3a704:	4770      	bx	lr
   3a706:	2001      	movs	r0, #1
}
   3a708:	4770      	bx	lr

0003a70a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   3a70a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   3a70c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   3a70e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3a712:	05c9      	lsls	r1, r1, #23
   3a714:	d518      	bpl.n	3a748 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a716:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3a71a:	b1a9      	cbz	r1, 3a748 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   3a71c:	f04f 0040 	mov.w	r0, #64	; 0x40
   3a720:	f3ef 8111 	mrs	r1, BASEPRI
   3a724:	f380 8812 	msr	BASEPRI_MAX, r0
   3a728:	f3bf 8f6f 	isb	sy
   3a72c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3a730:	b130      	cbz	r0, 3a740 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3a732:	2000      	movs	r0, #0
   3a734:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   3a738:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a73c:	2001      	movs	r0, #1
   3a73e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   3a740:	f381 8811 	msr	BASEPRI, r1
   3a744:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3a748:	6852      	ldr	r2, [r2, #4]
   3a74a:	06d2      	lsls	r2, r2, #27
   3a74c:	d515      	bpl.n	3a77a <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   3a74e:	f04f 0140 	mov.w	r1, #64	; 0x40
   3a752:	f3ef 8211 	mrs	r2, BASEPRI
   3a756:	f381 8812 	msr	BASEPRI_MAX, r1
   3a75a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a75e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3a762:	b111      	cbz	r1, 3a76a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3a764:	2100      	movs	r1, #0
   3a766:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   3a76a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3a76e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   3a772:	f382 8811 	msr	BASEPRI, r2
   3a776:	f3bf 8f6f 	isb	sy
}
   3a77a:	4770      	bx	lr

0003a77c <pinctrl_apply_state>:
{
   3a77c:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   3a77e:	aa01      	add	r2, sp, #4
{
   3a780:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   3a782:	f000 f8a1 	bl	3a8c8 <pinctrl_lookup_state>
	if (ret < 0) {
   3a786:	2800      	cmp	r0, #0
   3a788:	db05      	blt.n	3a796 <pinctrl_apply_state+0x1a>
	return pinctrl_apply_state_direct(config, state);
   3a78a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3a78c:	6822      	ldr	r2, [r4, #0]
   3a78e:	7919      	ldrb	r1, [r3, #4]
   3a790:	6818      	ldr	r0, [r3, #0]
   3a792:	f000 f8ac 	bl	3a8ee <pinctrl_configure_pins>
}
   3a796:	b002      	add	sp, #8
   3a798:	bd10      	pop	{r4, pc}

0003a79a <uarte_nrfx_pm_action>:
{
   3a79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   3a79e:	6845      	ldr	r5, [r0, #4]
{
   3a7a0:	4606      	mov	r6, r0
	return config->uarte_regs;
   3a7a2:	682c      	ldr	r4, [r5, #0]
	switch (action) {
   3a7a4:	b1c9      	cbz	r1, 3a7da <uarte_nrfx_pm_action+0x40>
   3a7a6:	2901      	cmp	r1, #1
   3a7a8:	d16e      	bne.n	3a888 <uarte_nrfx_pm_action+0xee>
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   3a7aa:	686b      	ldr	r3, [r5, #4]
   3a7ac:	07da      	lsls	r2, r3, #31
   3a7ae:	d40c      	bmi.n	3a7ca <uarte_nrfx_pm_action+0x30>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3a7b0:	2308      	movs	r3, #8
   3a7b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   3a7b6:	7a2b      	ldrb	r3, [r5, #8]
   3a7b8:	b92b      	cbnz	r3, 3a7c6 <uarte_nrfx_pm_action+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3a7ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3a7be:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a7c2:	2301      	movs	r3, #1
   3a7c4:	6023      	str	r3, [r4, #0]
	return 0;
   3a7c6:	2000      	movs	r0, #0
   3a7c8:	e005      	b.n	3a7d6 <uarte_nrfx_pm_action+0x3c>
			ret = pinctrl_apply_state(cfg->pcfg,
   3a7ca:	68e8      	ldr	r0, [r5, #12]
   3a7cc:	2100      	movs	r1, #0
   3a7ce:	f7ff ffd5 	bl	3a77c <pinctrl_apply_state>
			if (ret < 0) {
   3a7d2:	2800      	cmp	r0, #0
   3a7d4:	daec      	bge.n	3a7b0 <uarte_nrfx_pm_action+0x16>
}
   3a7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a7da:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   3a7de:	b1ab      	cbz	r3, 3a80c <uarte_nrfx_pm_action+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a7e0:	2301      	movs	r3, #1
   3a7e2:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a7e4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
						      NRF_UARTE_EVENT_RXTO) &&
   3a7e8:	b91b      	cbnz	r3, 3a7f2 <uarte_nrfx_pm_action+0x58>
   3a7ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   3a7ee:	2b00      	cmp	r3, #0
   3a7f0:	d0f8      	beq.n	3a7e4 <uarte_nrfx_pm_action+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3a7f2:	2300      	movs	r3, #0
   3a7f4:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3a7f8:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   3a7fc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   3a800:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   3a804:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3a808:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	const struct uarte_nrfx_config *config = dev->config;
   3a80c:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
   3a80e:	e9d2 4300 	ldrd	r4, r3, [r2]
	if (!ppi_endtx) {
   3a812:	f013 0802 	ands.w	r8, r3, #2
   3a816:	d117      	bne.n	3a848 <uarte_nrfx_pm_action+0xae>
    p_reg->INTENCLR = mask;
   3a818:	f44f 7380 	mov.w	r3, #256	; 0x100
   3a81c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   3a820:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   3a824:	6870      	ldr	r0, [r6, #4]
   3a826:	f7ff ff60 	bl	3a6ea <is_tx_ready.isra.0>
   3a82a:	b920      	cbnz	r0, 3a836 <uarte_nrfx_pm_action+0x9c>
   3a82c:	2001      	movs	r0, #1
   3a82e:	f000 fa60 	bl	3acf2 <nrfx_busy_wait>
   3a832:	3f01      	subs	r7, #1
   3a834:	d1f6      	bne.n	3a824 <uarte_nrfx_pm_action+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a836:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3a83a:	b92b      	cbnz	r3, 3a848 <uarte_nrfx_pm_action+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3a83c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   3a840:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a844:	2301      	movs	r3, #1
   3a846:	60e3      	str	r3, [r4, #12]
    p_reg->INTENCLR = mask;
   3a848:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3a84c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED),
   3a850:	b923      	cbnz	r3, 3a85c <uarte_nrfx_pm_action+0xc2>
   3a852:	2001      	movs	r0, #1
   3a854:	f000 fa4d 	bl	3acf2 <nrfx_busy_wait>
   3a858:	3f01      	subs	r7, #1
   3a85a:	d1f7      	bne.n	3a84c <uarte_nrfx_pm_action+0xb2>
	if (!ppi_endtx) {
   3a85c:	f1b8 0f00 	cmp.w	r8, #0
   3a860:	d103      	bne.n	3a86a <uarte_nrfx_pm_action+0xd0>
    p_reg->INTENSET = mask;
   3a862:	f44f 7380 	mov.w	r3, #256	; 0x100
   3a866:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return config->uarte_regs;
   3a86a:	6873      	ldr	r3, [r6, #4]
   3a86c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3a86e:	2200      	movs	r2, #0
   3a870:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   3a874:	686b      	ldr	r3, [r5, #4]
   3a876:	07db      	lsls	r3, r3, #31
   3a878:	d5a5      	bpl.n	3a7c6 <uarte_nrfx_pm_action+0x2c>
			ret = pinctrl_apply_state(cfg->pcfg,
   3a87a:	68e8      	ldr	r0, [r5, #12]
   3a87c:	2101      	movs	r1, #1
   3a87e:	f7ff ff7d 	bl	3a77c <pinctrl_apply_state>
			if (ret < 0) {
   3a882:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   3a886:	e7a6      	b.n	3a7d6 <uarte_nrfx_pm_action+0x3c>
	switch (action) {
   3a888:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a88c:	e7a3      	b.n	3a7d6 <uarte_nrfx_pm_action+0x3c>

0003a88e <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   3a88e:	2000      	movs	r0, #0
   3a890:	4770      	bx	lr

0003a892 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   3a892:	b538      	push	{r3, r4, r5, lr}
   3a894:	460c      	mov	r4, r1
   3a896:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   3a898:	f7ec fdea 	bl	27470 <bt_is_ready>
   3a89c:	b128      	cbz	r0, 3a8aa <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   3a89e:	4629      	mov	r1, r5
   3a8a0:	4620      	mov	r0, r4
}
   3a8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   3a8a6:	f7eb bfef 	b.w	26888 <bt_hci_le_rand>
}
   3a8aa:	f06f 000a 	mvn.w	r0, #10
   3a8ae:	bd38      	pop	{r3, r4, r5, pc}

0003a8b0 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   3a8b0:	2200      	movs	r2, #0
{
   3a8b2:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   3a8b4:	4611      	mov	r1, r2
   3a8b6:	4610      	mov	r0, r2
   3a8b8:	f7fa fcb0 	bl	3521c <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   3a8bc:	2800      	cmp	r0, #0
	}

	return 0;
}
   3a8be:	bf18      	it	ne
   3a8c0:	f06f 0015 	mvnne.w	r0, #21
   3a8c4:	bd08      	pop	{r3, pc}

0003a8c6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3a8c6:	4770      	bx	lr

0003a8c8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3a8c8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   3a8ca:	6843      	ldr	r3, [r0, #4]
   3a8cc:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   3a8ce:	7a05      	ldrb	r5, [r0, #8]
   3a8d0:	6844      	ldr	r4, [r0, #4]
   3a8d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   3a8d6:	42a3      	cmp	r3, r4
   3a8d8:	d302      	bcc.n	3a8e0 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   3a8da:	f06f 0001 	mvn.w	r0, #1
}
   3a8de:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   3a8e0:	795c      	ldrb	r4, [r3, #5]
   3a8e2:	428c      	cmp	r4, r1
   3a8e4:	d001      	beq.n	3a8ea <pinctrl_lookup_state+0x22>
		(*state)++;
   3a8e6:	3308      	adds	r3, #8
   3a8e8:	e7f0      	b.n	3a8cc <pinctrl_lookup_state+0x4>
			return 0;
   3a8ea:	2000      	movs	r0, #0
   3a8ec:	e7f7      	b.n	3a8de <pinctrl_lookup_state+0x16>

0003a8ee <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   3a8ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a8f2:	4615      	mov	r5, r2
   3a8f4:	b085      	sub	sp, #20
   3a8f6:	4682      	mov	sl, r0
   3a8f8:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3a8fc:	f04f 0901 	mov.w	r9, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3a900:	45d0      	cmp	r8, sl
   3a902:	d103      	bne.n	3a90c <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   3a904:	2000      	movs	r0, #0
}
   3a906:	b005      	add	sp, #20
   3a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3a90c:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   3a910:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3a914:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   3a918:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   3a91a:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   3a91e:	bf08      	it	eq
   3a920:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   3a924:	2b22      	cmp	r3, #34	; 0x22
   3a926:	f200 808e 	bhi.w	3aa46 <pinctrl_configure_pins+0x158>
   3a92a:	e8df f003 	tbb	[pc, r3]
   3a92e:	1f12      	.short	0x1f12
   3a930:	36273a24 	.word	0x36273a24
   3a934:	8c8c8c3a 	.word	0x8c8c8c3a
   3a938:	8c623d8c 	.word	0x8c623d8c
   3a93c:	8c8c8c8c 	.word	0x8c8c8c8c
   3a940:	8c8c8c8c 	.word	0x8c8c8c8c
   3a944:	74716e65 	.word	0x74716e65
   3a948:	778c8c8c 	.word	0x778c8c8c
   3a94c:	8683807d 	.word	0x8683807d
   3a950:	89          	.byte	0x89
   3a951:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   3a952:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3a956:	a803      	add	r0, sp, #12
   3a958:	9403      	str	r4, [sp, #12]
   3a95a:	f7f3 fd7d 	bl	2e458 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3a95e:	9b03      	ldr	r3, [sp, #12]
   3a960:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   3a964:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   3a968:	2601      	movs	r6, #1
   3a96a:	e002      	b.n	3a972 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   3a96c:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3a970:	2600      	movs	r6, #0
   3a972:	46b3      	mov	fp, r6
   3a974:	e01f      	b.n	3a9b6 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   3a976:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   3a97a:	e7ec      	b.n	3a956 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   3a97c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3a980:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3a982:	a803      	add	r0, sp, #12
   3a984:	9403      	str	r4, [sp, #12]
   3a986:	f7f3 fd67 	bl	2e458 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3a98a:	9b03      	ldr	r3, [sp, #12]
   3a98c:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   3a990:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   3a994:	f04f 0b01 	mov.w	fp, #1
   3a998:	e00d      	b.n	3a9b6 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   3a99a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   3a99e:	2601      	movs	r6, #1
   3a9a0:	e7ef      	b.n	3a982 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   3a9a2:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   3a9a6:	e7e3      	b.n	3a970 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   3a9a8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   3a9ac:	2f00      	cmp	r7, #0
   3a9ae:	d1df      	bne.n	3a970 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3a9b0:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   3a9b2:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
   3a9b4:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   3a9b6:	f85a 3b04 	ldr.w	r3, [sl], #4
   3a9ba:	9301      	str	r3, [sp, #4]
   3a9bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3a9c0:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3a9c2:	a803      	add	r0, sp, #12
   3a9c4:	bf1c      	itt	ne
   3a9c6:	2601      	movne	r6, #1
   3a9c8:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   3a9cc:	9403      	str	r4, [sp, #12]
   3a9ce:	f7f3 fd43 	bl	2e458 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3a9d2:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3a9d4:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3a9d6:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   3a9da:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   3a9de:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3a9e0:	ea47 070b 	orr.w	r7, r7, fp
    reg->PIN_CNF[pin_number] = cnf;
   3a9e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3a9e8:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   3a9ec:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3a9f0:	e786      	b.n	3a900 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   3a9f2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   3a9f6:	e7d9      	b.n	3a9ac <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   3a9f8:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   3a9fc:	f8da 3000 	ldr.w	r3, [sl]
   3aa00:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   3aa04:	2b00      	cmp	r3, #0
   3aa06:	d0ca      	beq.n	3a99e <pinctrl_configure_pins+0xb0>
   3aa08:	e7a5      	b.n	3a956 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   3aa0a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   3aa0e:	e7f5      	b.n	3a9fc <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   3aa10:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   3aa14:	e7f2      	b.n	3a9fc <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   3aa16:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   3aa1a:	e7ef      	b.n	3a9fc <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   3aa1c:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3aa20:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   3aa22:	f04f 0b00 	mov.w	fp, #0
   3aa26:	e7c6      	b.n	3a9b6 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   3aa28:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   3aa2c:	e793      	b.n	3a956 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   3aa2e:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   3aa32:	e7f5      	b.n	3aa20 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   3aa34:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   3aa38:	e7f2      	b.n	3aa20 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   3aa3a:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   3aa3e:	e7ef      	b.n	3aa20 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   3aa40:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   3aa44:	e7ec      	b.n	3aa20 <pinctrl_configure_pins+0x132>
		switch (NRF_GET_FUN(pins[i])) {
   3aa46:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3aa4a:	e75c      	b.n	3a906 <pinctrl_configure_pins+0x18>

0003aa4c <hci_driver_close>:
{
   3aa4c:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   3aa4e:	f7f4 fc81 	bl	2f354 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   3aa52:	f04f 30ff 	mov.w	r0, #4294967295
   3aa56:	f04f 31ff 	mov.w	r1, #4294967295
   3aa5a:	f7f3 fd27 	bl	2e4ac <multithreading_lock_acquire>
	if (err) {
   3aa5e:	4604      	mov	r4, r0
   3aa60:	b920      	cbnz	r0, 3aa6c <hci_driver_close+0x20>
	err = sdc_disable();
   3aa62:	f7d2 f98b 	bl	cd7c <sdc_disable>
	if (err) {
   3aa66:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   3aa68:	f7f3 fd28 	bl	2e4bc <multithreading_lock_release>
}
   3aa6c:	4620      	mov	r0, r4
   3aa6e:	bd10      	pop	{r4, pc}

0003aa70 <hci_driver_send>:
{
   3aa70:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   3aa72:	8a03      	ldrh	r3, [r0, #16]
{
   3aa74:	4605      	mov	r5, r0
	if (!buf->len) {
   3aa76:	b373      	cbz	r3, 3aad6 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   3aa78:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   3aa7a:	b1a3      	cbz	r3, 3aaa6 <hci_driver_send+0x36>
   3aa7c:	2b02      	cmp	r3, #2
   3aa7e:	d12a      	bne.n	3aad6 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   3aa80:	f04f 30ff 	mov.w	r0, #4294967295
   3aa84:	f04f 31ff 	mov.w	r1, #4294967295
   3aa88:	f7f3 fd10 	bl	2e4ac <multithreading_lock_acquire>
	if (!errcode) {
   3aa8c:	4604      	mov	r4, r0
   3aa8e:	b940      	cbnz	r0, 3aaa2 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   3aa90:	68e8      	ldr	r0, [r5, #12]
   3aa92:	f7e3 ff09 	bl	1e8a8 <sdc_hci_data_put>
   3aa96:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   3aa98:	f7f3 fd10 	bl	2e4bc <multithreading_lock_release>
		if (errcode) {
   3aa9c:	b1b4      	cbz	r4, 3aacc <hci_driver_send+0x5c>
			receive_signal_raise();
   3aa9e:	f7f3 fe39 	bl	2e714 <receive_signal_raise>
}
   3aaa2:	4620      	mov	r0, r4
   3aaa4:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   3aaa6:	f04f 30ff 	mov.w	r0, #4294967295
   3aaaa:	f04f 31ff 	mov.w	r1, #4294967295
   3aaae:	f7f3 fcfd 	bl	2e4ac <multithreading_lock_acquire>
	if (!errcode) {
   3aab2:	4604      	mov	r4, r0
   3aab4:	2800      	cmp	r0, #0
   3aab6:	d1f4      	bne.n	3aaa2 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   3aab8:	68e8      	ldr	r0, [r5, #12]
   3aaba:	f7f3 fec7 	bl	2e84c <hci_internal_cmd_put>
   3aabe:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   3aac0:	f7f3 fcfc 	bl	2e4bc <multithreading_lock_release>
	if (errcode) {
   3aac4:	2c00      	cmp	r4, #0
   3aac6:	d1ec      	bne.n	3aaa2 <hci_driver_send+0x32>
	receive_signal_raise();
   3aac8:	f7f3 fe24 	bl	2e714 <receive_signal_raise>
		net_buf_unref(buf);
   3aacc:	4628      	mov	r0, r5
   3aace:	f7f1 fba7 	bl	2c220 <net_buf_unref>
   3aad2:	2400      	movs	r4, #0
   3aad4:	e7e5      	b.n	3aaa2 <hci_driver_send+0x32>
	switch (type) {
   3aad6:	f06f 0415 	mvn.w	r4, #21
   3aada:	e7e2      	b.n	3aaa2 <hci_driver_send+0x32>

0003aadc <receive_work_handler>:
	hci_driver_receive_process();
   3aadc:	f7f3 be42 	b.w	2e764 <hci_driver_receive_process>

0003aae0 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   3aae0:	2100      	movs	r1, #0
   3aae2:	f7f4 bc59 	b.w	2f398 <cmd_le_generate_dhkey>

0003aae6 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   3aae6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   3aaea:	2901      	cmp	r1, #1
   3aaec:	d801      	bhi.n	3aaf2 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   3aaee:	f7f4 bc53 	b.w	2f398 <cmd_le_generate_dhkey>
}
   3aaf2:	2012      	movs	r0, #18
   3aaf4:	4770      	bx	lr

0003aaf6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3aaf6:	4668      	mov	r0, sp
   3aaf8:	f020 0107 	bic.w	r1, r0, #7
   3aafc:	468d      	mov	sp, r1
   3aafe:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   3ab00:	f7e1 fc04 	bl	1c30c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   3ab04:	f7ea fcca 	bl	2549c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3ab08:	f7ea fdb6 	bl	25678 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   3ab0c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ab10:	4685      	mov	sp, r0
   3ab12:	4770      	bx	lr

0003ab14 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3ab14:	4668      	mov	r0, sp
   3ab16:	f020 0107 	bic.w	r1, r0, #7
   3ab1a:	468d      	mov	sp, r1
   3ab1c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   3ab1e:	f7e1 fb6b 	bl	1c1f8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   3ab22:	f7ea fcbb 	bl	2549c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3ab26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ab2a:	4685      	mov	sp, r0
   3ab2c:	4770      	bx	lr

0003ab2e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   3ab2e:	4668      	mov	r0, sp
   3ab30:	f020 0107 	bic.w	r1, r0, #7
   3ab34:	468d      	mov	sp, r1
   3ab36:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   3ab38:	f7df f88a 	bl	19c50 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   3ab3c:	f7ea fcae 	bl	2549c <_arch_isr_direct_pm>
   3ab40:	f7ea fd9a 	bl	25678 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   3ab44:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ab48:	4685      	mov	sp, r0
   3ab4a:	4770      	bx	lr

0003ab4c <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   3ab4c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   3ab4e:	f7e8 fbe1 	bl	23314 <mpsl_fem_init>

	return 0;
}
   3ab52:	2000      	movs	r0, #0
   3ab54:	bd08      	pop	{r3, pc}

0003ab56 <nrfx_clock_enable>:
}
   3ab56:	4770      	bx	lr

0003ab58 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   3ab58:	f7e2 b876 	b.w	1cc48 <MPSL_IRQ_CLOCK_Handler>

0003ab5c <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   3ab5c:	f7e2 bc4e 	b.w	1d3fc <mpsl_is_initialized>

0003ab60 <nrf_flash_sync_get_timestamp_begin>:
}
   3ab60:	4770      	bx	lr

0003ab62 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   3ab62:	f7fa bb05 	b.w	35170 <nrf_cc3xx_platform_init>

0003ab66 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   3ab66:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   3ab68:	f7ea fb04 	bl	25174 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   3ab6c:	f7ea fbd8 	bl	25320 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   3ab70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   3ab74:	f7fa bafc 	b.w	35170 <nrf_cc3xx_platform_init>

0003ab78 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3ab78:	6880      	ldr	r0, [r0, #8]
   3ab7a:	3818      	subs	r0, #24
   3ab7c:	f020 0007 	bic.w	r0, r0, #7
}
   3ab80:	3810      	subs	r0, #16
   3ab82:	4770      	bx	lr

0003ab84 <boot_magic_compatible_check>:
    switch (tbl_val) {
   3ab84:	2804      	cmp	r0, #4
   3ab86:	d009      	beq.n	3ab9c <boot_magic_compatible_check+0x18>
   3ab88:	2805      	cmp	r0, #5
   3ab8a:	d103      	bne.n	3ab94 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   3ab8c:	1e48      	subs	r0, r1, #1
   3ab8e:	bf18      	it	ne
   3ab90:	2001      	movne	r0, #1
   3ab92:	4770      	bx	lr
        return tbl_val == val;
   3ab94:	1a43      	subs	r3, r0, r1
   3ab96:	4258      	negs	r0, r3
   3ab98:	4158      	adcs	r0, r3
   3ab9a:	4770      	bx	lr
    switch (tbl_val) {
   3ab9c:	2001      	movs	r0, #1
}
   3ab9e:	4770      	bx	lr

0003aba0 <bootutil_buffer_is_erased>:
{
   3aba0:	b538      	push	{r3, r4, r5, lr}
   3aba2:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
   3aba4:	460c      	mov	r4, r1
   3aba6:	b161      	cbz	r1, 3abc2 <bootutil_buffer_is_erased+0x22>
   3aba8:	b15a      	cbz	r2, 3abc2 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
   3abaa:	f7fd faa3 	bl	380f4 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3abae:	4425      	add	r5, r4
   3abb0:	4621      	mov	r1, r4
        if (u8b[i] != erased_val) {
   3abb2:	f811 3b01 	ldrb.w	r3, [r1], #1
   3abb6:	4283      	cmp	r3, r0
   3abb8:	d103      	bne.n	3abc2 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3abba:	42a9      	cmp	r1, r5
   3abbc:	d1f9      	bne.n	3abb2 <bootutil_buffer_is_erased+0x12>
    return true;
   3abbe:	2001      	movs	r0, #1
}
   3abc0:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   3abc2:	2000      	movs	r0, #0
   3abc4:	e7fc      	b.n	3abc0 <bootutil_buffer_is_erased+0x20>

0003abc6 <boot_read_flag>:
{
   3abc6:	b538      	push	{r3, r4, r5, lr}
   3abc8:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3abca:	2301      	movs	r3, #1
{
   3abcc:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3abce:	4622      	mov	r2, r4
{
   3abd0:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3abd2:	f7fd fa48 	bl	38066 <flash_area_read>
    if (rc < 0) {
   3abd6:	2800      	cmp	r0, #0
   3abd8:	db0f      	blt.n	3abfa <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3abda:	2201      	movs	r2, #1
   3abdc:	4621      	mov	r1, r4
   3abde:	4628      	mov	r0, r5
   3abe0:	f7ff ffde 	bl	3aba0 <bootutil_buffer_is_erased>
   3abe4:	b938      	cbnz	r0, 3abf6 <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
   3abe6:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
   3abe8:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
   3abea:	bf14      	ite	ne
   3abec:	2302      	movne	r3, #2
   3abee:	2301      	moveq	r3, #1
   3abf0:	7023      	strb	r3, [r4, #0]
   3abf2:	2000      	movs	r0, #0
}
   3abf4:	bd38      	pop	{r3, r4, r5, pc}
   3abf6:	2303      	movs	r3, #3
   3abf8:	e7fa      	b.n	3abf0 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
   3abfa:	2001      	movs	r0, #1
   3abfc:	e7fa      	b.n	3abf4 <boot_read_flag+0x2e>

0003abfe <boot_write_trailer>:
{
   3abfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3ac02:	461d      	mov	r5, r3
   3ac04:	4606      	mov	r6, r0
   3ac06:	460f      	mov	r7, r1
   3ac08:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   3ac0a:	f7fd fa6a 	bl	380e2 <flash_area_align>
    align = ALIGN_UP(inlen, align);
   3ac0e:	1e6c      	subs	r4, r5, #1
   3ac10:	4404      	add	r4, r0
   3ac12:	4240      	negs	r0, r0
   3ac14:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
   3ac16:	2c08      	cmp	r4, #8
   3ac18:	d81a      	bhi.n	3ac50 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
   3ac1a:	4630      	mov	r0, r6
   3ac1c:	f7fd fa6a 	bl	380f4 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
   3ac20:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
   3ac22:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   3ac24:	4641      	mov	r1, r8
   3ac26:	4668      	mov	r0, sp
   3ac28:	f7fd fdc7 	bl	387ba <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   3ac2c:	1b62      	subs	r2, r4, r5
   3ac2e:	4649      	mov	r1, r9
   3ac30:	eb0d 0005 	add.w	r0, sp, r5
   3ac34:	f7fd fdcc 	bl	387d0 <memset>
    rc = flash_area_write(fap, off, buf, align);
   3ac38:	4623      	mov	r3, r4
   3ac3a:	466a      	mov	r2, sp
   3ac3c:	4639      	mov	r1, r7
   3ac3e:	4630      	mov	r0, r6
   3ac40:	f7fd fa26 	bl	38090 <flash_area_write>
    if (rc != 0) {
   3ac44:	3800      	subs	r0, #0
   3ac46:	bf18      	it	ne
   3ac48:	2001      	movne	r0, #1
}
   3ac4a:	b003      	add	sp, #12
   3ac4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   3ac50:	f04f 30ff 	mov.w	r0, #4294967295
   3ac54:	e7f9      	b.n	3ac4a <boot_write_trailer+0x4c>

0003ac56 <boot_write_trailer_flag>:
{
   3ac56:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   3ac58:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   3ac5a:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   3ac5e:	aa01      	add	r2, sp, #4
   3ac60:	f7ff ffcd 	bl	3abfe <boot_write_trailer>
}
   3ac64:	b003      	add	sp, #12
   3ac66:	f85d fb04 	ldr.w	pc, [sp], #4

0003ac6a <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3ac6a:	6882      	ldr	r2, [r0, #8]
   3ac6c:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   3ac6e:	f022 0207 	bic.w	r2, r2, #7
   3ac72:	f7ff bfa8 	b.w	3abc6 <boot_read_flag>

0003ac76 <boot_read_swap_state_by_id>:
{
   3ac76:	b513      	push	{r0, r1, r4, lr}
   3ac78:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   3ac7a:	b2c0      	uxtb	r0, r0
   3ac7c:	a901      	add	r1, sp, #4
   3ac7e:	f7e9 feab 	bl	249d8 <flash_area_open>
    if (rc != 0) {
   3ac82:	b950      	cbnz	r0, 3ac9a <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
   3ac84:	4621      	mov	r1, r4
   3ac86:	9801      	ldr	r0, [sp, #4]
   3ac88:	f7f4 fe54 	bl	2f934 <boot_read_swap_state>
   3ac8c:	4604      	mov	r4, r0
    flash_area_close(fap);
   3ac8e:	9801      	ldr	r0, [sp, #4]
   3ac90:	f7fd f9e8 	bl	38064 <flash_area_close>
}
   3ac94:	4620      	mov	r0, r4
   3ac96:	b002      	add	sp, #8
   3ac98:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   3ac9a:	2401      	movs	r4, #1
   3ac9c:	e7fa      	b.n	3ac94 <boot_read_swap_state_by_id+0x1e>

0003ac9e <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   3ac9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   3aca0:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3aca2:	a901      	add	r1, sp, #4
   3aca4:	2002      	movs	r0, #2
    const struct flash_area *fap = NULL;
   3aca6:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3aca8:	f7e9 fe96 	bl	249d8 <flash_area_open>
    if (rc != 0) {
   3acac:	b9d8      	cbnz	r0, 3ace6 <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   3acae:	9801      	ldr	r0, [sp, #4]
   3acb0:	a902      	add	r1, sp, #8
   3acb2:	f7f4 fe3f 	bl	2f934 <boot_read_swap_state>
    if (rc != 0) {
   3acb6:	4604      	mov	r4, r0
   3acb8:	b968      	cbnz	r0, 3acd6 <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   3acba:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3acbe:	2b02      	cmp	r3, #2
   3acc0:	d00f      	beq.n	3ace2 <boot_set_confirmed_multi+0x44>
   3acc2:	2b03      	cmp	r3, #3
   3acc4:	d007      	beq.n	3acd6 <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   3acc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   3acca:	2b03      	cmp	r3, #3
   3accc:	d103      	bne.n	3acd6 <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   3acce:	9801      	ldr	r0, [sp, #4]
   3acd0:	f7f4 fe16 	bl	2f900 <boot_write_image_ok>
   3acd4:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   3acd6:	9801      	ldr	r0, [sp, #4]
   3acd8:	f7fd f9c4 	bl	38064 <flash_area_close>
    return rc;
}
   3acdc:	4620      	mov	r0, r4
   3acde:	b004      	add	sp, #16
   3ace0:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   3ace2:	2404      	movs	r4, #4
   3ace4:	e7f7      	b.n	3acd6 <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   3ace6:	2401      	movs	r4, #1
   3ace8:	e7f8      	b.n	3acdc <boot_set_confirmed_multi+0x3e>

0003acea <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   3acea:	2000      	movs	r0, #0
   3acec:	f7ff bfd7 	b.w	3ac9e <boot_set_confirmed_multi>

0003acf0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3acf0:	4700      	bx	r0

0003acf2 <nrfx_busy_wait>:
   3acf2:	f000 bccb 	b.w	3b68c <z_impl_k_busy_wait>

0003acf6 <nrf_gpio_pin_present_check>:
    switch (port)
   3acf6:	0943      	lsrs	r3, r0, #5
   3acf8:	d00b      	beq.n	3ad12 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   3acfa:	2b01      	cmp	r3, #1
   3acfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3ad00:	bf18      	it	ne
   3ad02:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   3ad04:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3ad08:	fa23 f000 	lsr.w	r0, r3, r0
}
   3ad0c:	f000 0001 	and.w	r0, r0, #1
   3ad10:	4770      	bx	lr
    switch (port)
   3ad12:	f04f 33ff 	mov.w	r3, #4294967295
   3ad16:	e7f5      	b.n	3ad04 <nrf_gpio_pin_present_check+0xe>

0003ad18 <pin_is_task_output>:
{
   3ad18:	b508      	push	{r3, lr}
   3ad1a:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3ad1c:	f7f5 f8a8 	bl	2fe70 <pin_is_output>
   3ad20:	b110      	cbz	r0, 3ad28 <pin_is_task_output+0x10>
   3ad22:	4610      	mov	r0, r2
   3ad24:	f7f5 f88e 	bl	2fe44 <pin_in_use_by_te>
}
   3ad28:	f000 0001 	and.w	r0, r0, #1
   3ad2c:	bd08      	pop	{r3, pc}

0003ad2e <nrf_gpio_reconfigure>:
{
   3ad2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3ad32:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ad34:	a801      	add	r0, sp, #4
{
   3ad36:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   3ad3a:	460c      	mov	r4, r1
   3ad3c:	4617      	mov	r7, r2
   3ad3e:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ad40:	f7f5 f8fa 	bl	2ff38 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3ad44:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3ad46:	1e39      	subs	r1, r7, #0
   3ad48:	bf18      	it	ne
   3ad4a:	2101      	movne	r1, #1
   3ad4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3ad50:	1e23      	subs	r3, r4, #0
   3ad52:	bf18      	it	ne
   3ad54:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3ad56:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3ad58:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3ad5c:	bf14      	ite	ne
   3ad5e:	210c      	movne	r1, #12
   3ad60:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3ad62:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3ad64:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3ad68:	bf14      	ite	ne
   3ad6a:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   3ad6e:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3ad70:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3ad74:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3ad78:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3ad7c:	bf14      	ite	ne
   3ad7e:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   3ad82:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3ad84:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   3ad86:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3ad8a:	b104      	cbz	r4, 3ad8e <nrf_gpio_reconfigure+0x60>
   3ad8c:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3ad8e:	b10f      	cbz	r7, 3ad94 <nrf_gpio_reconfigure+0x66>
   3ad90:	783f      	ldrb	r7, [r7, #0]
   3ad92:	007f      	lsls	r7, r7, #1
   3ad94:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3ad96:	b10e      	cbz	r6, 3ad9c <nrf_gpio_reconfigure+0x6e>
   3ad98:	7836      	ldrb	r6, [r6, #0]
   3ad9a:	00b6      	lsls	r6, r6, #2
   3ad9c:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3ad9e:	b18d      	cbz	r5, 3adc4 <nrf_gpio_reconfigure+0x96>
   3ada0:	7829      	ldrb	r1, [r5, #0]
   3ada2:	0209      	lsls	r1, r1, #8
   3ada4:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   3ada6:	f1b8 0f00 	cmp.w	r8, #0
   3adaa:	d003      	beq.n	3adb4 <nrf_gpio_reconfigure+0x86>
   3adac:	f898 8000 	ldrb.w	r8, [r8]
   3adb0:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3adb4:	4321      	orrs	r1, r4
   3adb6:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   3adba:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   3adbe:	b002      	add	sp, #8
   3adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3adc4:	4629      	mov	r1, r5
   3adc6:	e7ed      	b.n	3ada4 <nrf_gpio_reconfigure+0x76>

0003adc8 <nrf_gpio_cfg_sense_set>:
{
   3adc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3adca:	f10d 030f 	add.w	r3, sp, #15
   3adce:	9301      	str	r3, [sp, #4]
   3add0:	2300      	movs	r3, #0
{
   3add2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3add6:	9300      	str	r3, [sp, #0]
   3add8:	461a      	mov	r2, r3
   3adda:	4619      	mov	r1, r3
   3addc:	f7ff ffa7 	bl	3ad2e <nrf_gpio_reconfigure>
}
   3ade0:	b005      	add	sp, #20
   3ade2:	f85d fb04 	ldr.w	pc, [sp], #4

0003ade6 <nrfx_gpiote_out_task_addr_get>:
{
   3ade6:	b508      	push	{r3, lr}
    nrf_gpiote_task_t task = nrfx_gpiote_out_task_get(pin);
   3ade8:	f7f5 fa88 	bl	302fc <nrfx_gpiote_out_task_get>
}
   3adec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   3adf0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   3adf4:	bd08      	pop	{r3, pc}

0003adf6 <nrfx_gpiote_in_event_addr_get>:
{
   3adf6:	b508      	push	{r3, lr}
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
   3adf8:	f7f5 fb10 	bl	3041c <nrfx_gpiote_in_event_get>
}
   3adfc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   3ae00:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   3ae04:	bd08      	pop	{r3, pc}

0003ae06 <is_valid_address>:
{
   3ae06:	4603      	mov	r3, r0
   3ae08:	4608      	mov	r0, r1
   3ae0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   3ae0e:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   3ae10:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   3ae12:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3ae14:	4293      	cmp	r3, r2
   3ae16:	d308      	bcc.n	3ae2a <is_valid_address+0x24>
    if (uicr_allowed &&
   3ae18:	b140      	cbz	r0, 3ae2c <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   3ae1a:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   3ae1e:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
   3ae22:	bf2c      	ite	cs
   3ae24:	2000      	movcs	r0, #0
   3ae26:	2001      	movcc	r0, #1
   3ae28:	4770      	bx	lr
        return true;
   3ae2a:	2001      	movs	r0, #1
}
   3ae2c:	4770      	bx	lr

0003ae2e <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   3ae2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3ae32:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   3ae34:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3ae36:	4350      	muls	r0, r2
   3ae38:	4770      	bx	lr

0003ae3a <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   3ae3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3ae3e:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3ae40:	4770      	bx	lr

0003ae42 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   3ae42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3ae46:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3ae48:	4770      	bx	lr

0003ae4a <start_playback>:
{
   3ae4a:	b510      	push	{r4, lr}
   3ae4c:	4604      	mov	r4, r0
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   3ae4e:	2002      	movs	r0, #2
   3ae50:	7208      	strb	r0, [r1, #8]
    p_cb->flags = flags;
   3ae52:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   3ae54:	6809      	ldr	r1, [r1, #0]
   3ae56:	b179      	cbz	r1, 3ae78 <start_playback+0x2e>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   3ae58:	f012 0f04 	tst.w	r2, #4
   3ae5c:	bf0c      	ite	eq
   3ae5e:	2182      	moveq	r1, #130	; 0x82
   3ae60:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   3ae62:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   3ae64:	bf48      	it	mi
   3ae66:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   3ae6a:	06d0      	lsls	r0, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
   3ae6c:	6820      	ldr	r0, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   3ae6e:	bf48      	it	mi
   3ae70:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   3ae74:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
   3ae78:	6821      	ldr	r1, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ae7a:	2000      	movs	r0, #0
   3ae7c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   3ae80:	f012 0f80 	tst.w	r2, #128	; 0x80
   3ae84:	6822      	ldr	r2, [r4, #0]
   3ae86:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ae8a:	bf06      	itte	eq
   3ae8c:	2101      	moveq	r1, #1
   3ae8e:	50d1      	streq	r1, [r2, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   3ae90:	18d0      	addne	r0, r2, r3
}
   3ae92:	bd10      	pop	{r4, pc}

0003ae94 <nrf_gpio_cfg_default>:
{
   3ae94:	b507      	push	{r0, r1, r2, lr}
   3ae96:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ae98:	a801      	add	r0, sp, #4
   3ae9a:	f7f5 fea1 	bl	30be0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3ae9e:	9b01      	ldr	r3, [sp, #4]
   3aea0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3aea4:	2202      	movs	r2, #2
   3aea6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   3aeaa:	b003      	add	sp, #12
   3aeac:	f85d fb04 	ldr.w	pc, [sp], #4

0003aeb0 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   3aeb0:	2302      	movs	r3, #2
   3aeb2:	f7f5 bebf 	b.w	30c34 <qspi_xfer>

0003aeb6 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   3aeb6:	2303      	movs	r3, #3
   3aeb8:	f7f5 bebc 	b.w	30c34 <qspi_xfer>

0003aebc <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   3aebc:	2100      	movs	r1, #0
   3aebe:	2002      	movs	r0, #2
   3aec0:	f7f6 b9a0 	b.w	31204 <nrfx_qspi_erase>

0003aec4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   3aec4:	f7f6 ba16 	b.w	312f4 <_DoInit>

0003aec8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   3aec8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   3aeca:	f7ff fffb 	bl	3aec4 <SEGGER_RTT_Init>

	return 0;
}
   3aece:	2000      	movs	r0, #0
   3aed0:	bd08      	pop	{r3, pc}

0003aed2 <zcbor_new_backup>:

_Static_assert((sizeof(zcbor_state_t) >= sizeof(struct zcbor_state_constant)),
	"This code needs zcbor_state_t to be at least as large as zcbor_backups_t.");

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
   3aed2:	b538      	push	{r3, r4, r5, lr}
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
   3aed4:	6943      	ldr	r3, [r0, #20]
{
   3aed6:	460d      	mov	r5, r1
	if ((state->constant_state->current_backup)
   3aed8:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
   3aedc:	4291      	cmp	r1, r2
{
   3aede:	4604      	mov	r4, r0
   3aee0:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
   3aee4:	d302      	bcc.n	3aeec <zcbor_new_backup+0x1a>
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		if (state->constant_state) {
			state->constant_state->error = err;
   3aee6:	2201      	movs	r2, #1
   3aee8:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
   3aeea:	bd38      	pop	{r3, r4, r5, pc}
	state->payload_moved = false;
   3aeec:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
   3aeee:	685a      	ldr	r2, [r3, #4]
   3aef0:	3201      	adds	r2, #1
   3aef2:	605a      	str	r2, [r3, #4]
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
   3aef4:	6963      	ldr	r3, [r4, #20]
   3aef6:	6858      	ldr	r0, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
   3aef8:	681b      	ldr	r3, [r3, #0]
   3aefa:	2218      	movs	r2, #24
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
   3aefc:	3801      	subs	r0, #1
	memcpy(&state->constant_state->backup_list[i], state,
   3aefe:	4621      	mov	r1, r4
   3af00:	fb02 3000 	mla	r0, r2, r0, r3
   3af04:	f7fd fc59 	bl	387ba <memcpy>
	state->elem_count = new_elem_count;
   3af08:	60a5      	str	r5, [r4, #8]
	return true;
   3af0a:	2001      	movs	r0, #1
   3af0c:	e7ed      	b.n	3aeea <zcbor_new_backup+0x18>

0003af0e <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		uint_fast32_t max_elem_count)
{
   3af0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3af12:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
   3af14:	6942      	ldr	r2, [r0, #20]
	const uint8_t *payload = state->payload;
   3af16:	6807      	ldr	r7, [r0, #0]
	if (state->constant_state->current_backup == 0) {
   3af18:	6853      	ldr	r3, [r2, #4]
	const uint_fast32_t elem_count = state->elem_count;
   3af1a:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   3af1e:	4604      	mov	r4, r0
   3af20:	460d      	mov	r5, r1
	if (state->constant_state->current_backup == 0) {
   3af22:	b923      	cbnz	r3, 3af2e <zcbor_process_backup+0x20>
   3af24:	2302      	movs	r3, #2
   3af26:	60d3      	str	r3, [r2, #12]
		zcbor_print("No backups available.\r\n");
		ZCBOR_ERR(ZCBOR_ERR_NO_BACKUP_ACTIVE);
   3af28:	2000      	movs	r0, #0
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
   3af2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
   3af2e:	07e9      	lsls	r1, r5, #31
   3af30:	d50d      	bpl.n	3af4e <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
   3af32:	6811      	ldr	r1, [r2, #0]
		uint_fast32_t i = state->constant_state->current_backup - 1;
   3af34:	3b01      	subs	r3, #1
			if (state->constant_state->backup_list[i].payload_moved) {
   3af36:	2218      	movs	r2, #24
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
   3af38:	0768      	lsls	r0, r5, #29
			if (state->constant_state->backup_list[i].payload_moved) {
   3af3a:	fb02 1103 	mla	r1, r2, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
   3af3e:	d402      	bmi.n	3af46 <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
   3af40:	7c4b      	ldrb	r3, [r1, #17]
   3af42:	2b00      	cmp	r3, #0
   3af44:	d1f0      	bne.n	3af28 <zcbor_process_backup+0x1a>
		memcpy(state, &state->constant_state->backup_list[i],
   3af46:	2218      	movs	r2, #24
   3af48:	4620      	mov	r0, r4
   3af4a:	f7fd fc36 	bl	387ba <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
   3af4e:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
   3af50:	bf41      	itttt	mi
   3af52:	6962      	ldrmi	r2, [r4, #20]
   3af54:	6853      	ldrmi	r3, [r2, #4]
   3af56:	f103 33ff 	addmi.w	r3, r3, #4294967295
   3af5a:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
   3af5c:	45b0      	cmp	r8, r6
   3af5e:	d905      	bls.n	3af6c <zcbor_process_backup+0x5e>
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
   3af60:	6963      	ldr	r3, [r4, #20]
		if (state->constant_state) {
   3af62:	2b00      	cmp	r3, #0
   3af64:	d0e0      	beq.n	3af28 <zcbor_process_backup+0x1a>
			state->constant_state->error = err;
   3af66:	2204      	movs	r2, #4
   3af68:	60da      	str	r2, [r3, #12]
   3af6a:	e7dd      	b.n	3af28 <zcbor_process_backup+0x1a>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
   3af6c:	076b      	lsls	r3, r5, #29
   3af6e:	d401      	bmi.n	3af74 <zcbor_process_backup+0x66>
	return true;
   3af70:	2001      	movs	r0, #1
   3af72:	e7da      	b.n	3af2a <zcbor_process_backup+0x1c>
		state->payload = payload;
   3af74:	6027      	str	r7, [r4, #0]
   3af76:	e7fb      	b.n	3af70 <zcbor_process_backup+0x62>

0003af78 <zcbor_error.isra.0>:
		if (state->constant_state) {
   3af78:	b100      	cbz	r0, 3af7c <zcbor_error.isra.0+0x4>
			state->constant_state->error = err;
   3af7a:	60c1      	str	r1, [r0, #12]
		}
	}
}
   3af7c:	4770      	bx	lr

0003af7e <initial_checks>:
{
   3af7e:	b508      	push	{r3, lr}
	ZCBOR_CHECK_PAYLOAD();
   3af80:	6802      	ldr	r2, [r0, #0]
   3af82:	68c3      	ldr	r3, [r0, #12]
   3af84:	429a      	cmp	r2, r3
   3af86:	d305      	bcc.n	3af94 <initial_checks+0x16>
   3af88:	6940      	ldr	r0, [r0, #20]
   3af8a:	2108      	movs	r1, #8
   3af8c:	f7ff fff4 	bl	3af78 <zcbor_error.isra.0>
   3af90:	2000      	movs	r0, #0
}
   3af92:	bd08      	pop	{r3, pc}
	return true;
   3af94:	2001      	movs	r0, #1
   3af96:	e7fc      	b.n	3af92 <initial_checks+0x14>

0003af98 <type_check>:
{
   3af98:	b538      	push	{r3, r4, r5, lr}
   3af9a:	4604      	mov	r4, r0
   3af9c:	460d      	mov	r5, r1
	if (!initial_checks(state)) {
   3af9e:	f7ff ffee 	bl	3af7e <initial_checks>
   3afa2:	b140      	cbz	r0, 3afb6 <type_check+0x1e>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
   3afa4:	6823      	ldr	r3, [r4, #0]
   3afa6:	781b      	ldrb	r3, [r3, #0]
	if (major_type != exp_major_type) {
   3afa8:	ebb5 1f53 	cmp.w	r5, r3, lsr #5
   3afac:	d004      	beq.n	3afb8 <type_check+0x20>
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
   3afae:	6960      	ldr	r0, [r4, #20]
   3afb0:	210a      	movs	r1, #10
   3afb2:	f7ff ffe1 	bl	3af78 <zcbor_error.isra.0>
		ZCBOR_FAIL();
   3afb6:	2000      	movs	r0, #0
}
   3afb8:	bd38      	pop	{r3, r4, r5, pc}

0003afba <list_map_end_decode>:
{
   3afba:	b510      	push	{r4, lr}
	if (state->indefinite_length_array) {
   3afbc:	7c02      	ldrb	r2, [r0, #16]
{
   3afbe:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
   3afc0:	b192      	cbz	r2, 3afe8 <list_map_end_decode+0x2e>
	INITIAL_CHECKS();
   3afc2:	f7ff ffdc 	bl	3af7e <initial_checks>
   3afc6:	b138      	cbz	r0, 3afd8 <list_map_end_decode+0x1e>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
   3afc8:	6823      	ldr	r3, [r4, #0]
   3afca:	781a      	ldrb	r2, [r3, #0]
   3afcc:	2aff      	cmp	r2, #255	; 0xff
   3afce:	d005      	beq.n	3afdc <list_map_end_decode+0x22>
   3afd0:	6960      	ldr	r0, [r4, #20]
   3afd2:	210a      	movs	r1, #10
   3afd4:	f7ff ffd0 	bl	3af78 <zcbor_error.isra.0>
}
   3afd8:	2000      	movs	r0, #0
   3afda:	bd10      	pop	{r4, pc}
	state->payload++;
   3afdc:	3301      	adds	r3, #1
   3afde:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
   3afe0:	2300      	movs	r3, #0
   3afe2:	7423      	strb	r3, [r4, #16]
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
   3afe4:	f04f 32ff 	mov.w	r2, #4294967295
	if (!zcbor_process_backup(state,
   3afe8:	4620      	mov	r0, r4
   3afea:	2107      	movs	r1, #7
}
   3afec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
   3aff0:	f7ff bf8d 	b.w	3af0e <zcbor_process_backup>

0003aff4 <value_extract>:
{
   3aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3aff8:	4604      	mov	r4, r0
   3affa:	460d      	mov	r5, r1
	zcbor_assert_state(result_len != 0, "0-length result not supported.\r\n");
   3affc:	4690      	mov	r8, r2
   3affe:	b922      	cbnz	r2, 3b00a <value_extract+0x16>
   3b000:	210e      	movs	r1, #14
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
   3b002:	6960      	ldr	r0, [r4, #20]
   3b004:	f7ff ffb8 	bl	3af78 <zcbor_error.isra.0>
   3b008:	e005      	b.n	3b016 <value_extract+0x22>
	zcbor_assert_state(result != NULL, NULL);
   3b00a:	2900      	cmp	r1, #0
   3b00c:	d0f8      	beq.n	3b000 <value_extract+0xc>
	INITIAL_CHECKS();
   3b00e:	f7ff ffb6 	bl	3af7e <initial_checks>
   3b012:	4607      	mov	r7, r0
   3b014:	b918      	cbnz	r0, 3b01e <value_extract+0x2a>
	zcbor_assert_state(result_len != 0, "0-length result not supported.\r\n");
   3b016:	2700      	movs	r7, #0
}
   3b018:	4638      	mov	r0, r7
   3b01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
   3b01e:	68a3      	ldr	r3, [r4, #8]
   3b020:	b90b      	cbnz	r3, 3b026 <value_extract+0x32>
   3b022:	2103      	movs	r1, #3
   3b024:	e7ed      	b.n	3b002 <value_extract+0xe>
	uint8_t additional = ADDITIONAL(*state->payload);
   3b026:	6823      	ldr	r3, [r4, #0]
   3b028:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
   3b02a:	6063      	str	r3, [r4, #4]
	(state->payload)++;
   3b02c:	3301      	adds	r3, #1
	uint8_t additional = ADDITIONAL(*state->payload);
   3b02e:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
   3b032:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
   3b034:	4642      	mov	r2, r8
   3b036:	2100      	movs	r1, #0
   3b038:	4628      	mov	r0, r5
   3b03a:	f7fd fbc9 	bl	387d0 <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
   3b03e:	2e17      	cmp	r6, #23
   3b040:	d804      	bhi.n	3b04c <value_extract+0x58>
		u8_result[0] = additional;
   3b042:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
   3b044:	68a3      	ldr	r3, [r4, #8]
   3b046:	3b01      	subs	r3, #1
   3b048:	60a3      	str	r3, [r4, #8]
	return true;
   3b04a:	e7e5      	b.n	3b018 <value_extract+0x24>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
   3b04c:	3e18      	subs	r6, #24
   3b04e:	b2f2      	uxtb	r2, r6
   3b050:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
   3b052:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
   3b054:	d807      	bhi.n	3b066 <value_extract+0x72>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
   3b056:	2101      	movs	r1, #1
   3b058:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
   3b05a:	4588      	cmp	r8, r1
   3b05c:	d207      	bcs.n	3b06e <value_extract+0x7a>
   3b05e:	3b01      	subs	r3, #1
   3b060:	6023      	str	r3, [r4, #0]
   3b062:	2105      	movs	r1, #5
   3b064:	e7cd      	b.n	3b002 <value_extract+0xe>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
   3b066:	3b01      	subs	r3, #1
   3b068:	6023      	str	r3, [r4, #0]
   3b06a:	2107      	movs	r1, #7
   3b06c:	e7c9      	b.n	3b002 <value_extract+0xe>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
   3b06e:	68e0      	ldr	r0, [r4, #12]
   3b070:	185a      	adds	r2, r3, r1
   3b072:	4290      	cmp	r0, r2
   3b074:	d203      	bcs.n	3b07e <value_extract+0x8a>
   3b076:	3b01      	subs	r3, #1
   3b078:	6023      	str	r3, [r4, #0]
   3b07a:	2108      	movs	r1, #8
   3b07c:	e7c1      	b.n	3b002 <value_extract+0xe>
   3b07e:	1e4b      	subs	r3, r1, #1
   3b080:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
   3b082:	6822      	ldr	r2, [r4, #0]
   3b084:	5cd2      	ldrb	r2, [r2, r3]
   3b086:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
   3b08a:	3b01      	subs	r3, #1
   3b08c:	d2f9      	bcs.n	3b082 <value_extract+0x8e>
		(state->payload) += len;
   3b08e:	6823      	ldr	r3, [r4, #0]
   3b090:	440b      	add	r3, r1
   3b092:	6023      	str	r3, [r4, #0]
   3b094:	e7d6      	b.n	3b044 <value_extract+0x50>

0003b096 <str_start_decode>:
{
   3b096:	b538      	push	{r3, r4, r5, lr}
   3b098:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
   3b09a:	4611      	mov	r1, r2
{
   3b09c:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
   3b09e:	f7ff ff7b 	bl	3af98 <type_check>
   3b0a2:	b908      	cbnz	r0, 3b0a8 <str_start_decode+0x12>
   3b0a4:	2000      	movs	r0, #0
}
   3b0a6:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
   3b0a8:	2204      	movs	r2, #4
   3b0aa:	18a1      	adds	r1, r4, r2
   3b0ac:	4628      	mov	r0, r5
   3b0ae:	f7ff ffa1 	bl	3aff4 <value_extract>
   3b0b2:	2800      	cmp	r0, #0
   3b0b4:	d0f6      	beq.n	3b0a4 <str_start_decode+0xe>
	result->value = state->payload;
   3b0b6:	682b      	ldr	r3, [r5, #0]
   3b0b8:	6023      	str	r3, [r4, #0]
	return true;
   3b0ba:	e7f4      	b.n	3b0a6 <str_start_decode+0x10>

0003b0bc <primx_expect>:
{
   3b0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3b0be:	460d      	mov	r5, r1
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_PRIM);
   3b0c0:	2107      	movs	r1, #7
{
   3b0c2:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_PRIM);
   3b0c4:	f7ff ff68 	bl	3af98 <type_check>
   3b0c8:	b190      	cbz	r0, 3b0f0 <primx_expect+0x34>
	if (!value_extract(state, &value, sizeof(value))) {
   3b0ca:	2204      	movs	r2, #4
   3b0cc:	eb0d 0102 	add.w	r1, sp, r2
   3b0d0:	4620      	mov	r0, r4
   3b0d2:	f7ff ff8f 	bl	3aff4 <value_extract>
   3b0d6:	b158      	cbz	r0, 3b0f0 <primx_expect+0x34>
	if (value != result) {
   3b0d8:	9b01      	ldr	r3, [sp, #4]
   3b0da:	429d      	cmp	r5, r3
   3b0dc:	d009      	beq.n	3b0f2 <primx_expect+0x36>
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
   3b0de:	6863      	ldr	r3, [r4, #4]
   3b0e0:	6023      	str	r3, [r4, #0]
   3b0e2:	68a3      	ldr	r3, [r4, #8]
   3b0e4:	6960      	ldr	r0, [r4, #20]
   3b0e6:	3301      	adds	r3, #1
   3b0e8:	60a3      	str	r3, [r4, #8]
   3b0ea:	210b      	movs	r1, #11
   3b0ec:	f7ff ff44 	bl	3af78 <zcbor_error.isra.0>
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_PRIM);
   3b0f0:	2000      	movs	r0, #0
}
   3b0f2:	b003      	add	sp, #12
   3b0f4:	bd30      	pop	{r4, r5, pc}

0003b0f6 <zcbor_tag_decode>:


bool zcbor_tag_decode(zcbor_state_t *state, uint32_t *result)
{
   3b0f6:	b538      	push	{r3, r4, r5, lr}
   3b0f8:	460d      	mov	r5, r1
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_TAG);
   3b0fa:	2106      	movs	r1, #6
{
   3b0fc:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_TAG);
   3b0fe:	f7ff ff4b 	bl	3af98 <type_check>
   3b102:	b908      	cbnz	r0, 3b108 <zcbor_tag_decode+0x12>
   3b104:	2000      	movs	r0, #0
	if (!value_extract(state, result, sizeof(*result))) {
		ZCBOR_FAIL();
	}
	state->elem_count++;
	return true;
}
   3b106:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, result, sizeof(*result))) {
   3b108:	2204      	movs	r2, #4
   3b10a:	4629      	mov	r1, r5
   3b10c:	4620      	mov	r0, r4
   3b10e:	f7ff ff71 	bl	3aff4 <value_extract>
   3b112:	2800      	cmp	r0, #0
   3b114:	d0f6      	beq.n	3b104 <zcbor_tag_decode+0xe>
	state->elem_count++;
   3b116:	68a3      	ldr	r3, [r4, #8]
   3b118:	3301      	adds	r3, #1
   3b11a:	60a3      	str	r3, [r4, #8]
	return true;
   3b11c:	e7f3      	b.n	3b106 <zcbor_tag_decode+0x10>

0003b11e <list_map_start_decode>:
{
   3b11e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3b120:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
   3b122:	f7ff ff39 	bl	3af98 <type_check>
   3b126:	4605      	mov	r5, r0
   3b128:	b170      	cbz	r0, 3b148 <list_map_start_decode+0x2a>
	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
   3b12a:	6822      	ldr	r2, [r4, #0]
   3b12c:	7813      	ldrb	r3, [r2, #0]
   3b12e:	f003 031f 	and.w	r3, r3, #31
   3b132:	2b1f      	cmp	r3, #31
   3b134:	d11a      	bne.n	3b16c <list_map_start_decode+0x4e>
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
   3b136:	f06f 0310 	mvn.w	r3, #16
   3b13a:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
   3b13c:	68a3      	ldr	r3, [r4, #8]
   3b13e:	b933      	cbnz	r3, 3b14e <list_map_start_decode+0x30>
   3b140:	6960      	ldr	r0, [r4, #20]
   3b142:	2103      	movs	r1, #3
   3b144:	f7ff ff18 	bl	3af78 <zcbor_error.isra.0>
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
   3b148:	2000      	movs	r0, #0
}
   3b14a:	b003      	add	sp, #12
   3b14c:	bd30      	pop	{r4, r5, pc}
		state->payload++;
   3b14e:	3201      	adds	r2, #1
		state->elem_count--;
   3b150:	3b01      	subs	r3, #1
		state->payload++;
   3b152:	6022      	str	r2, [r4, #0]
		state->elem_count--;
   3b154:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
   3b156:	9901      	ldr	r1, [sp, #4]
   3b158:	4620      	mov	r0, r4
   3b15a:	f7ff feba 	bl	3aed2 <zcbor_new_backup>
   3b15e:	b978      	cbnz	r0, 3b180 <list_map_start_decode+0x62>
		FAIL_RESTORE();
   3b160:	6863      	ldr	r3, [r4, #4]
   3b162:	6023      	str	r3, [r4, #0]
   3b164:	68a3      	ldr	r3, [r4, #8]
   3b166:	3301      	adds	r3, #1
   3b168:	60a3      	str	r3, [r4, #8]
   3b16a:	e7ed      	b.n	3b148 <list_map_start_decode+0x2a>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
   3b16c:	2204      	movs	r2, #4
   3b16e:	eb0d 0102 	add.w	r1, sp, r2
   3b172:	4620      	mov	r0, r4
   3b174:	f7ff ff3e 	bl	3aff4 <value_extract>
   3b178:	2800      	cmp	r0, #0
   3b17a:	d0e5      	beq.n	3b148 <list_map_start_decode+0x2a>
	bool indefinite_length_array = false;
   3b17c:	2500      	movs	r5, #0
   3b17e:	e7ea      	b.n	3b156 <list_map_start_decode+0x38>
	state->indefinite_length_array = indefinite_length_array;
   3b180:	7425      	strb	r5, [r4, #16]
	return true;
   3b182:	e7e2      	b.n	3b14a <list_map_start_decode+0x2c>

0003b184 <str_decode>:
{
   3b184:	b538      	push	{r3, r4, r5, lr}
   3b186:	4604      	mov	r4, r0
   3b188:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
   3b18a:	f7ff ff84 	bl	3b096 <str_start_decode>
   3b18e:	b188      	cbz	r0, 3b1b4 <str_decode+0x30>
	if (result->len > (state->payload_end - state->payload)) {
   3b190:	6823      	ldr	r3, [r4, #0]
   3b192:	68e2      	ldr	r2, [r4, #12]
   3b194:	6869      	ldr	r1, [r5, #4]
   3b196:	1ad2      	subs	r2, r2, r3
   3b198:	4291      	cmp	r1, r2
   3b19a:	d802      	bhi.n	3b1a2 <str_decode+0x1e>
	state->payload += result->len;
   3b19c:	440b      	add	r3, r1
   3b19e:	6023      	str	r3, [r4, #0]
}
   3b1a0:	bd38      	pop	{r3, r4, r5, pc}
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
   3b1a2:	6863      	ldr	r3, [r4, #4]
   3b1a4:	6023      	str	r3, [r4, #0]
   3b1a6:	68a3      	ldr	r3, [r4, #8]
   3b1a8:	6960      	ldr	r0, [r4, #20]
   3b1aa:	3301      	adds	r3, #1
   3b1ac:	60a3      	str	r3, [r4, #8]
   3b1ae:	2108      	movs	r1, #8
   3b1b0:	f7ff fee2 	bl	3af78 <zcbor_error.isra.0>
		ZCBOR_FAIL();
   3b1b4:	2000      	movs	r0, #0
   3b1b6:	e7f3      	b.n	3b1a0 <str_decode+0x1c>

0003b1b8 <zcbor_uint32_decode>:
{
   3b1b8:	b538      	push	{r3, r4, r5, lr}
   3b1ba:	460d      	mov	r5, r1
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_PINT);
   3b1bc:	2100      	movs	r1, #0
{
   3b1be:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(ZCBOR_MAJOR_TYPE_PINT);
   3b1c0:	f7ff feea 	bl	3af98 <type_check>
   3b1c4:	b130      	cbz	r0, 3b1d4 <zcbor_uint32_decode+0x1c>
	if (!value_extract(state, result, sizeof(*result))) {
   3b1c6:	4629      	mov	r1, r5
   3b1c8:	4620      	mov	r0, r4
   3b1ca:	2204      	movs	r2, #4
}
   3b1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!value_extract(state, result, sizeof(*result))) {
   3b1d0:	f7ff bf10 	b.w	3aff4 <value_extract>
}
   3b1d4:	bd38      	pop	{r3, r4, r5, pc}

0003b1d6 <zcbor_size_decode>:
	return value_extract(state, result, sizeof(size_t));
   3b1d6:	2204      	movs	r2, #4
   3b1d8:	f7ff bf0c 	b.w	3aff4 <value_extract>

0003b1dc <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
   3b1dc:	2202      	movs	r2, #2
   3b1de:	f7ff bfd1 	b.w	3b184 <str_decode>

0003b1e2 <zcbor_tstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_TSTR);
   3b1e2:	2203      	movs	r2, #3
   3b1e4:	f7ff bfce 	b.w	3b184 <str_decode>

0003b1e8 <zcbor_map_start_decode>:
{
   3b1e8:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
   3b1ea:	2105      	movs	r1, #5
{
   3b1ec:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
   3b1ee:	f7ff ff96 	bl	3b11e <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
   3b1f2:	b170      	cbz	r0, 3b212 <zcbor_map_start_decode+0x2a>
   3b1f4:	7c23      	ldrb	r3, [r4, #16]
   3b1f6:	b96b      	cbnz	r3, 3b214 <zcbor_map_start_decode+0x2c>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
   3b1f8:	68a3      	ldr	r3, [r4, #8]
   3b1fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   3b1fe:	4293      	cmp	r3, r2
   3b200:	d309      	bcc.n	3b216 <zcbor_map_start_decode+0x2e>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
   3b202:	6862      	ldr	r2, [r4, #4]
   3b204:	6960      	ldr	r0, [r4, #20]
   3b206:	6022      	str	r2, [r4, #0]
   3b208:	3301      	adds	r3, #1
   3b20a:	60a3      	str	r3, [r4, #8]
   3b20c:	2105      	movs	r1, #5
   3b20e:	f7ff feb3 	bl	3af78 <zcbor_error.isra.0>
   3b212:	2000      	movs	r0, #0
}
   3b214:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
   3b216:	005b      	lsls	r3, r3, #1
   3b218:	60a3      	str	r3, [r4, #8]
   3b21a:	e7fb      	b.n	3b214 <zcbor_map_start_decode+0x2c>

0003b21c <zcbor_map_end_decode>:
bool zcbor_map_end_decode(zcbor_state_t *state)
   3b21c:	f7ff becd 	b.w	3afba <list_map_end_decode>

0003b220 <zcbor_bool_decode>:
{
   3b220:	b538      	push	{r3, r4, r5, lr}
   3b222:	460d      	mov	r5, r1
	if (!primx_expect(state, (uint8_t)(!!result) + ZCBOR_BOOL_TO_PRIM)) {
   3b224:	2114      	movs	r1, #20
{
   3b226:	4604      	mov	r4, r0
	if (!primx_expect(state, (uint8_t)(!!result) + ZCBOR_BOOL_TO_PRIM)) {
   3b228:	f7ff ff48 	bl	3b0bc <primx_expect>
	if (zcbor_bool_expect(state, false)) {
   3b22c:	b118      	cbz	r0, 3b236 <zcbor_bool_decode+0x16>
   3b22e:	2000      	movs	r0, #0
		*result = false;
   3b230:	7028      	strb	r0, [r5, #0]
	return true;
   3b232:	2001      	movs	r0, #1
}
   3b234:	bd38      	pop	{r3, r4, r5, pc}
	if (!primx_expect(state, (uint8_t)(!!result) + ZCBOR_BOOL_TO_PRIM)) {
   3b236:	2115      	movs	r1, #21
   3b238:	4620      	mov	r0, r4
   3b23a:	f7ff ff3f 	bl	3b0bc <primx_expect>
	} else if (zcbor_bool_expect(state, true)) {
   3b23e:	2800      	cmp	r0, #0
   3b240:	d1f6      	bne.n	3b230 <zcbor_bool_decode+0x10>
   3b242:	e7f7      	b.n	3b234 <zcbor_bool_decode+0x14>

0003b244 <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
   3b244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b248:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   3b24c:	4682      	mov	sl, r0
   3b24e:	4689      	mov	r9, r1
   3b250:	4690      	mov	r8, r2
   3b252:	469b      	mov	fp, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
   3b254:	2400      	movs	r4, #0
   3b256:	454c      	cmp	r4, r9
   3b258:	d103      	bne.n	3b262 <zcbor_multi_decode+0x1e>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
   3b25a:	f8c8 4000 	str.w	r4, [r8]
			return true;
   3b25e:	2601      	movs	r6, #1
   3b260:	e016      	b.n	3b290 <zcbor_multi_decode+0x4c>
		uint8_t const *payload_bak = state->payload;
   3b262:	682a      	ldr	r2, [r5, #0]
		uint_fast32_t elem_count_bak = state->elem_count;
   3b264:	68ab      	ldr	r3, [r5, #8]
		uint8_t const *payload_bak = state->payload;
   3b266:	9201      	str	r2, [sp, #4]
		if (!decoder(state,
   3b268:	4639      	mov	r1, r7
   3b26a:	4628      	mov	r0, r5
		uint_fast32_t elem_count_bak = state->elem_count;
   3b26c:	9300      	str	r3, [sp, #0]
		if (!decoder(state,
   3b26e:	47d8      	blx	fp
   3b270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3b272:	4606      	mov	r6, r0
   3b274:	441f      	add	r7, r3
   3b276:	e9dd 3200 	ldrd	r3, r2, [sp]
   3b27a:	b968      	cbnz	r0, 3b298 <zcbor_multi_decode+0x54>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
   3b27c:	4554      	cmp	r4, sl
			*num_decode = i;
   3b27e:	f8c8 4000 	str.w	r4, [r8]
			state->payload = payload_bak;
   3b282:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
   3b284:	60ab      	str	r3, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
   3b286:	d2ea      	bcs.n	3b25e <zcbor_multi_decode+0x1a>
   3b288:	6968      	ldr	r0, [r5, #20]
   3b28a:	210d      	movs	r1, #13
   3b28c:	f7ff fe74 	bl	3af78 <zcbor_error.isra.0>
	return true;
}
   3b290:	4630      	mov	r0, r6
   3b292:	b003      	add	sp, #12
   3b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
   3b298:	3401      	adds	r4, #1
   3b29a:	e7dc      	b.n	3b256 <zcbor_multi_decode+0x12>

0003b29c <zcbor_error.isra.0>:
		if (state->constant_state) {
   3b29c:	b100      	cbz	r0, 3b2a0 <zcbor_error.isra.0+0x4>
			state->constant_state->error = err;
   3b29e:	60c1      	str	r1, [r0, #12]
}
   3b2a0:	4770      	bx	lr

0003b2a2 <encode_header_byte>:
{
   3b2a2:	b510      	push	{r4, lr}
	ZCBOR_CHECK_PAYLOAD();
   3b2a4:	6803      	ldr	r3, [r0, #0]
   3b2a6:	68c4      	ldr	r4, [r0, #12]
   3b2a8:	42a3      	cmp	r3, r4
   3b2aa:	d305      	bcc.n	3b2b8 <encode_header_byte+0x16>
   3b2ac:	2108      	movs	r1, #8
	zcbor_assert_state(additional < 32, NULL);
   3b2ae:	6940      	ldr	r0, [r0, #20]
   3b2b0:	f7ff fff4 	bl	3b29c <zcbor_error.isra.0>
	ZCBOR_CHECK_PAYLOAD();
   3b2b4:	2000      	movs	r0, #0
}
   3b2b6:	bd10      	pop	{r4, pc}
	zcbor_assert_state(additional < 32, NULL);
   3b2b8:	2a1f      	cmp	r2, #31
   3b2ba:	d901      	bls.n	3b2c0 <encode_header_byte+0x1e>
   3b2bc:	210e      	movs	r1, #14
   3b2be:	e7f6      	b.n	3b2ae <encode_header_byte+0xc>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
   3b2c0:	1c5c      	adds	r4, r3, #1
   3b2c2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   3b2c6:	6004      	str	r4, [r0, #0]
   3b2c8:	701a      	strb	r2, [r3, #0]
	return true;
   3b2ca:	2001      	movs	r0, #1
   3b2cc:	e7f3      	b.n	3b2b6 <encode_header_byte+0x14>

0003b2ce <value_encode.part.0>:
	}
	return result_len;
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
   3b2ce:	b570      	push	{r4, r5, r6, lr}
   3b2d0:	4605      	mov	r5, r0
   3b2d2:	460e      	mov	r6, r1
		const void *const input, uint_fast32_t max_result_len)
{
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
   3b2d4:	4610      	mov	r0, r2
   3b2d6:	4619      	mov	r1, r3
static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
   3b2d8:	4614      	mov	r4, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
   3b2da:	f7f6 f8d3 	bl	31484 <get_result_len>
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
   3b2de:	4622      	mov	r2, r4
	uint_fast32_t result_len = get_result_len(input, max_result_len);
   3b2e0:	4603      	mov	r3, r0
	return value_encode_len(state, major_type, result, result_len);
   3b2e2:	4631      	mov	r1, r6
   3b2e4:	4628      	mov	r0, r5
}
   3b2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return value_encode_len(state, major_type, result, result_len);
   3b2ea:	f7f6 b8e1 	b.w	314b0 <value_encode_len>

0003b2ee <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
   3b2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
   3b2f2:	f8d0 900c 	ldr.w	r9, [r0, #12]
   3b2f6:	6805      	ldr	r5, [r0, #0]
   3b2f8:	f8d1 a004 	ldr.w	sl, [r1, #4]
   3b2fc:	eba9 0305 	sub.w	r3, r9, r5
   3b300:	459a      	cmp	sl, r3
{
   3b302:	4604      	mov	r4, r0
   3b304:	460e      	mov	r6, r1
   3b306:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
   3b308:	d907      	bls.n	3b31a <str_encode+0x2c>
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
   3b30a:	6960      	ldr	r0, [r4, #20]
   3b30c:	2108      	movs	r1, #8
   3b30e:	f7ff ffc5 	bl	3b29c <zcbor_error.isra.0>
   3b312:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
   3b314:	4628      	mov	r0, r5
   3b316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
   3b31a:	460f      	mov	r7, r1
   3b31c:	f857 3b04 	ldr.w	r3, [r7], #4
   3b320:	b143      	cbz	r3, 3b334 <str_encode+0x46>
   3b322:	2104      	movs	r1, #4
   3b324:	4638      	mov	r0, r7
   3b326:	f7f6 f8ad 	bl	31484 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
   3b32a:	4455      	add	r5, sl
   3b32c:	3501      	adds	r5, #1
   3b32e:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
   3b330:	45a9      	cmp	r9, r5
   3b332:	d3ea      	bcc.n	3b30a <str_encode+0x1c>
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3b334:	2304      	movs	r3, #4
   3b336:	463a      	mov	r2, r7
   3b338:	4641      	mov	r1, r8
   3b33a:	4620      	mov	r0, r4
   3b33c:	f7ff ffc7 	bl	3b2ce <value_encode.part.0>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
   3b340:	4605      	mov	r5, r0
   3b342:	2800      	cmp	r0, #0
   3b344:	d0e5      	beq.n	3b312 <str_encode+0x24>
	if (state->payload_mut != input->value) {
   3b346:	6820      	ldr	r0, [r4, #0]
   3b348:	6831      	ldr	r1, [r6, #0]
   3b34a:	4288      	cmp	r0, r1
   3b34c:	d002      	beq.n	3b354 <str_encode+0x66>
		memmove(state->payload_mut, input->value, input->len);
   3b34e:	6872      	ldr	r2, [r6, #4]
   3b350:	f7fd fa1c 	bl	3878c <memmove>
	state->payload += input->len;
   3b354:	6823      	ldr	r3, [r4, #0]
   3b356:	6872      	ldr	r2, [r6, #4]
   3b358:	4413      	add	r3, r2
   3b35a:	6023      	str	r3, [r4, #0]
	return true;
   3b35c:	e7da      	b.n	3b314 <str_encode+0x26>

0003b35e <zcbor_int_encode>:
	if (int_size > sizeof(int64_t)) {
   3b35e:	2a08      	cmp	r2, #8
{
   3b360:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3b362:	4613      	mov	r3, r2
   3b364:	460c      	mov	r4, r1
	if (int_size > sizeof(int64_t)) {
   3b366:	d906      	bls.n	3b376 <zcbor_int_encode+0x18>
		ZCBOR_ERR(ZCBOR_ERR_INT_SIZE);
   3b368:	2105      	movs	r1, #5
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3b36a:	6940      	ldr	r0, [r0, #20]
   3b36c:	f7ff ff96 	bl	3b29c <zcbor_error.isra.0>
		ZCBOR_ERR(ZCBOR_ERR_INT_SIZE);
   3b370:	2000      	movs	r0, #0
}
   3b372:	b002      	add	sp, #8
   3b374:	bd70      	pop	{r4, r5, r6, pc}
	if (input_int8[int_size - 1] < 0) {
   3b376:	188e      	adds	r6, r1, r2
   3b378:	f916 2c01 	ldrsb.w	r2, [r6, #-1]
   3b37c:	2a00      	cmp	r2, #0
   3b37e:	da0e      	bge.n	3b39e <zcbor_int_encode+0x40>
   3b380:	460a      	mov	r2, r1
   3b382:	4669      	mov	r1, sp
   3b384:	460c      	mov	r4, r1
		for (int i = 0; i < int_size; i++) {
   3b386:	42b2      	cmp	r2, r6
   3b388:	d103      	bne.n	3b392 <zcbor_int_encode+0x34>
		major_type = ZCBOR_MAJOR_TYPE_NINT;
   3b38a:	2101      	movs	r1, #1
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3b38c:	b94b      	cbnz	r3, 3b3a2 <zcbor_int_encode+0x44>
   3b38e:	210e      	movs	r1, #14
   3b390:	e7eb      	b.n	3b36a <zcbor_int_encode+0xc>
			input_buf[i] = (uint8_t)~input_uint8[i];
   3b392:	f812 5b01 	ldrb.w	r5, [r2], #1
   3b396:	43ed      	mvns	r5, r5
   3b398:	f801 5b01 	strb.w	r5, [r1], #1
		for (int i = 0; i < int_size; i++) {
   3b39c:	e7f3      	b.n	3b386 <zcbor_int_encode+0x28>
		major_type = ZCBOR_MAJOR_TYPE_PINT;
   3b39e:	2100      	movs	r1, #0
   3b3a0:	e7f4      	b.n	3b38c <zcbor_int_encode+0x2e>
   3b3a2:	4622      	mov	r2, r4
   3b3a4:	f7ff ff93 	bl	3b2ce <value_encode.part.0>
   3b3a8:	e7e3      	b.n	3b372 <zcbor_int_encode+0x14>

0003b3aa <zcbor_int32_put>:
{
   3b3aa:	b507      	push	{r0, r1, r2, lr}
	return zcbor_int_encode(state, &input, sizeof(input));
   3b3ac:	2204      	movs	r2, #4
{
   3b3ae:	9101      	str	r1, [sp, #4]
	return zcbor_int_encode(state, &input, sizeof(input));
   3b3b0:	eb0d 0102 	add.w	r1, sp, r2
   3b3b4:	f7ff ffd3 	bl	3b35e <zcbor_int_encode>
}
   3b3b8:	b003      	add	sp, #12
   3b3ba:	f85d fb04 	ldr.w	pc, [sp], #4

0003b3be <zcbor_uint32_put>:
{
   3b3be:	b507      	push	{r0, r1, r2, lr}
   3b3c0:	460b      	mov	r3, r1
	return zcbor_uint64_put(state, input);
   3b3c2:	2100      	movs	r1, #0
   3b3c4:	e9cd 3100 	strd	r3, r1, [sp]
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3b3c8:	466a      	mov	r2, sp
   3b3ca:	2308      	movs	r3, #8
   3b3cc:	f7ff ff7f 	bl	3b2ce <value_encode.part.0>
}
   3b3d0:	b003      	add	sp, #12
   3b3d2:	f85d fb04 	ldr.w	pc, [sp], #4

0003b3d6 <zcbor_size_put>:
bool zcbor_size_put(zcbor_state_t *state, size_t input)
   3b3d6:	f7ff bff2 	b.w	3b3be <zcbor_uint32_put>

0003b3da <zcbor_bstr_encode>:


bool zcbor_bstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_BSTR);
   3b3da:	2202      	movs	r2, #2
   3b3dc:	f7ff bf87 	b.w	3b2ee <str_encode>

0003b3e0 <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
   3b3e0:	2203      	movs	r2, #3
   3b3e2:	f7ff bf84 	b.w	3b2ee <str_encode>

0003b3e6 <zcbor_list_start_encode>:
	if (!value_encode(state, major_type, &max_num, sizeof(max_num))) {
		ZCBOR_FAIL();
	}
	state->elem_count--; /* Because of dummy header. */
#else
	if (!encode_header_byte(state, major_type, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
   3b3e6:	221f      	movs	r2, #31
   3b3e8:	2104      	movs	r1, #4
   3b3ea:	f7ff bf5a 	b.w	3b2a2 <encode_header_byte>

0003b3ee <zcbor_map_start_encode>:
   3b3ee:	221f      	movs	r2, #31
   3b3f0:	2105      	movs	r1, #5
   3b3f2:	f7ff bf56 	b.w	3b2a2 <encode_header_byte>

0003b3f6 <zcbor_list_end_encode>:
	} else {
		/* Reset payload pointer to end of list */
		state->payload = payload;
	}
#else
	if (!encode_header_byte(state, ZCBOR_MAJOR_TYPE_PRIM, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
   3b3f6:	221f      	movs	r2, #31
   3b3f8:	2107      	movs	r1, #7
   3b3fa:	f7ff bf52 	b.w	3b2a2 <encode_header_byte>

0003b3fe <zcbor_map_end_encode>:
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
   3b3fe:	f7ff bffa 	b.w	3b3f6 <zcbor_list_end_encode>

0003b402 <zcbor_bool_put>:
	return true;
}


bool zcbor_bool_put(zcbor_state_t *state, bool input)
{
   3b402:	b507      	push	{r0, r1, r2, lr}
   3b404:	2304      	movs	r3, #4
	if (!primitive_put(state, (uint32_t)(input + ZCBOR_BOOL_TO_PRIM))) {
   3b406:	3114      	adds	r1, #20
   3b408:	9101      	str	r1, [sp, #4]
	zcbor_assert_state(max_result_len != 0, "0-length result not supported.\r\n");
   3b40a:	eb0d 0203 	add.w	r2, sp, r3
   3b40e:	2107      	movs	r1, #7
   3b410:	f7ff ff5d 	bl	3b2ce <value_encode.part.0>
		ZCBOR_FAIL();
	}
	return true;
}
   3b414:	b003      	add	sp, #12
   3b416:	f85d fb04 	ldr.w	pc, [sp], #4

0003b41a <z_device_state_init>:
}
   3b41a:	4770      	bx	lr

0003b41c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3b41c:	b140      	cbz	r0, 3b430 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3b41e:	68c3      	ldr	r3, [r0, #12]
   3b420:	7858      	ldrb	r0, [r3, #1]
   3b422:	f010 0001 	ands.w	r0, r0, #1
   3b426:	bf1e      	ittt	ne
   3b428:	7818      	ldrbne	r0, [r3, #0]
   3b42a:	fab0 f080 	clzne	r0, r0
   3b42e:	0940      	lsrne	r0, r0, #5
}
   3b430:	4770      	bx	lr

0003b432 <z_early_memset>:
	(void) memset(dst, c, n);
   3b432:	f7fd b9cd 	b.w	387d0 <memset>

0003b436 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   3b436:	f7fd b9c0 	b.w	387ba <memcpy>

0003b43a <k_heap_init>:
{
   3b43a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   3b43c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3b440:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3b444:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   3b446:	f7e8 bc1f 	b.w	23c88 <sys_heap_init>

0003b44a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3b44a:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   3b44e:	4313      	orrs	r3, r2
   3b450:	f013 0303 	ands.w	r3, r3, #3
   3b454:	d10c      	bne.n	3b470 <create_free_list+0x26>
	slab->free_list = NULL;
   3b456:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3b458:	68c1      	ldr	r1, [r0, #12]
   3b45a:	4299      	cmp	r1, r3
   3b45c:	d801      	bhi.n	3b462 <create_free_list+0x18>
	return 0;
   3b45e:	2000      	movs	r0, #0
   3b460:	4770      	bx	lr
		*(char **)p = slab->free_list;
   3b462:	6981      	ldr	r1, [r0, #24]
   3b464:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   3b466:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   3b468:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3b46a:	3301      	adds	r3, #1
		p += slab->block_size;
   3b46c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   3b46e:	e7f3      	b.n	3b458 <create_free_list+0xe>
		return -EINVAL;
   3b470:	f06f 0015 	mvn.w	r0, #21
}
   3b474:	4770      	bx	lr

0003b476 <k_mem_slab_init>:
{
   3b476:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   3b478:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
   3b47c:	2300      	movs	r3, #0
	slab->buffer = buffer;
   3b47e:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   3b480:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   3b482:	6083      	str	r3, [r0, #8]
{
   3b484:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   3b486:	f7ff ffe0 	bl	3b44a <create_free_list>
	if (rc < 0) {
   3b48a:	2800      	cmp	r0, #0
   3b48c:	bfa8      	it	ge
   3b48e:	e9c4 4400 	strdge	r4, r4, [r4]
}
   3b492:	bd10      	pop	{r4, pc}

0003b494 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3b494:	f3ef 8005 	mrs	r0, IPSR
}
   3b498:	3800      	subs	r0, #0
   3b49a:	bf18      	it	ne
   3b49c:	2001      	movne	r0, #1
   3b49e:	4770      	bx	lr

0003b4a0 <z_impl_k_thread_name_set>:
}
   3b4a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3b4a4:	4770      	bx	lr

0003b4a6 <k_thread_name_get>:
}
   3b4a6:	2000      	movs	r0, #0
   3b4a8:	4770      	bx	lr

0003b4aa <z_impl_k_thread_start>:
	z_sched_start(thread);
   3b4aa:	f7f7 be2f 	b.w	3310c <z_sched_start>

0003b4ae <z_pm_save_idle_exit>:
{
   3b4ae:	b508      	push	{r3, lr}
	pm_system_resume();
   3b4b0:	f7e9 fbe0 	bl	24c74 <pm_system_resume>
}
   3b4b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3b4b8:	f7ff ba05 	b.w	3a8c6 <sys_clock_idle_exit>

0003b4bc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   3b4bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3b4c0:	428b      	cmp	r3, r1
   3b4c2:	d001      	beq.n	3b4c8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   3b4c4:	f7f8 b89c 	b.w	33600 <z_set_prio>
}
   3b4c8:	2000      	movs	r0, #0
   3b4ca:	4770      	bx	lr

0003b4cc <z_impl_k_mutex_init>:
{
   3b4cc:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3b4ce:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   3b4d0:	e9c3 0002 	strd	r0, r0, [r3, #8]
   3b4d4:	e9c3 3300 	strd	r3, r3, [r3]
}
   3b4d8:	4770      	bx	lr

0003b4da <z_queue_node_peek>:
{
   3b4da:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3b4dc:	4604      	mov	r4, r0
   3b4de:	b130      	cbz	r0, 3b4ee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3b4e0:	6802      	ldr	r2, [r0, #0]
   3b4e2:	0793      	lsls	r3, r2, #30
   3b4e4:	d003      	beq.n	3b4ee <z_queue_node_peek+0x14>
		ret = anode->data;
   3b4e6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3b4e8:	b109      	cbz	r1, 3b4ee <z_queue_node_peek+0x14>
			k_free(anode);
   3b4ea:	f000 f9b3 	bl	3b854 <k_free>
}
   3b4ee:	4620      	mov	r0, r4
   3b4f0:	bd10      	pop	{r4, pc}

0003b4f2 <z_impl_k_queue_init>:
	list->head = NULL;
   3b4f2:	2300      	movs	r3, #0
	list->tail = NULL;
   3b4f4:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   3b4f8:	6083      	str	r3, [r0, #8]
   3b4fa:	f100 030c 	add.w	r3, r0, #12
   3b4fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   3b502:	f100 0314 	add.w	r3, r0, #20
   3b506:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   3b50a:	4770      	bx	lr

0003b50c <k_queue_append>:
{
   3b50c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3b50e:	2301      	movs	r3, #1
   3b510:	9300      	str	r3, [sp, #0]
   3b512:	2300      	movs	r3, #0
{
   3b514:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3b516:	4619      	mov	r1, r3
   3b518:	f7f6 fe4c 	bl	321b4 <queue_insert>
}
   3b51c:	b003      	add	sp, #12
   3b51e:	f85d fb04 	ldr.w	pc, [sp], #4

0003b522 <k_queue_prepend>:
{
   3b522:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   3b524:	2300      	movs	r3, #0
{
   3b526:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   3b528:	9300      	str	r3, [sp, #0]
   3b52a:	4619      	mov	r1, r3
   3b52c:	f7f6 fe42 	bl	321b4 <queue_insert>
}
   3b530:	b003      	add	sp, #12
   3b532:	f85d fb04 	ldr.w	pc, [sp], #4

0003b536 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3b536:	b15a      	cbz	r2, 3b550 <z_impl_k_sem_init+0x1a>
   3b538:	428a      	cmp	r2, r1
   3b53a:	d309      	bcc.n	3b550 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3b53c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3b540:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3b544:	e9c0 0000 	strd	r0, r0, [r0]
   3b548:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3b54c:	2000      	movs	r0, #0
   3b54e:	4770      	bx	lr
		return -EINVAL;
   3b550:	f06f 0015 	mvn.w	r0, #21
}
   3b554:	4770      	bx	lr

0003b556 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   3b556:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   3b558:	2301      	movs	r3, #1
   3b55a:	408b      	lsls	r3, r1
   3b55c:	ea22 0303 	bic.w	r3, r2, r3
   3b560:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   3b562:	fa22 f001 	lsr.w	r0, r2, r1
}
   3b566:	f000 0001 	and.w	r0, r0, #1
   3b56a:	4770      	bx	lr

0003b56c <unschedule_locked>:
{
   3b56c:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3b56e:	2103      	movs	r1, #3
{
   3b570:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3b572:	300c      	adds	r0, #12
   3b574:	f7ff ffef 	bl	3b556 <flag_test_and_clear>
   3b578:	4604      	mov	r4, r0
   3b57a:	b118      	cbz	r0, 3b584 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   3b57c:	f105 0010 	add.w	r0, r5, #16
   3b580:	f7f8 fd78 	bl	34074 <z_abort_timeout>
}
   3b584:	4620      	mov	r0, r4
   3b586:	bd38      	pop	{r3, r4, r5, pc}

0003b588 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   3b588:	b120      	cbz	r0, 3b594 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3b58a:	2200      	movs	r2, #0
   3b58c:	4611      	mov	r1, r2
   3b58e:	30a0      	adds	r0, #160	; 0xa0
   3b590:	f7f8 bbfe 	b.w	33d90 <z_sched_wake>
}
   3b594:	4770      	bx	lr

0003b596 <cancel_async_locked>:
{
   3b596:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   3b598:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3b59a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   3b59e:	079b      	lsls	r3, r3, #30
{
   3b5a0:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3b5a2:	d416      	bmi.n	3b5d2 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   3b5a4:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3b5a6:	2102      	movs	r1, #2
   3b5a8:	300c      	adds	r0, #12
   3b5aa:	f7ff ffd4 	bl	3b556 <flag_test_and_clear>
   3b5ae:	b180      	cbz	r0, 3b5d2 <cancel_async_locked+0x3c>
	return list->head;
   3b5b0:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3b5b4:	b16a      	cbz	r2, 3b5d2 <cancel_async_locked+0x3c>
   3b5b6:	4294      	cmp	r4, r2
   3b5b8:	d11d      	bne.n	3b5f6 <cancel_async_locked+0x60>
	return node->next;
   3b5ba:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   3b5bc:	b99e      	cbnz	r6, 3b5e6 <cancel_async_locked+0x50>
   3b5be:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
	list->head = node;
   3b5c2:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
Z_GENLIST_REMOVE(slist, snode)
   3b5c6:	429c      	cmp	r4, r3
   3b5c8:	d101      	bne.n	3b5ce <cancel_async_locked+0x38>
	list->tail = node;
   3b5ca:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	parent->next = child;
   3b5ce:	2300      	movs	r3, #0
   3b5d0:	6023      	str	r3, [r4, #0]
	return *flagp;
   3b5d2:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   3b5d4:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   3b5d8:	bf1e      	ittt	ne
   3b5da:	f043 0302 	orrne.w	r3, r3, #2
   3b5de:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3b5e0:	f040 0002 	orrne.w	r0, r0, #2
}
   3b5e4:	bd70      	pop	{r4, r5, r6, pc}
   3b5e6:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   3b5e8:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   3b5ec:	4294      	cmp	r4, r2
	list->tail = node;
   3b5ee:	bf08      	it	eq
   3b5f0:	f8c5 609c 	streq.w	r6, [r5, #156]	; 0x9c
}
   3b5f4:	e7eb      	b.n	3b5ce <cancel_async_locked+0x38>
	return node->next;
   3b5f6:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3b5f8:	6812      	ldr	r2, [r2, #0]
   3b5fa:	e7db      	b.n	3b5b4 <cancel_async_locked+0x1e>

0003b5fc <k_work_submit_to_queue>:
{
   3b5fc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   3b5fe:	f7f7 f9a3 	bl	32948 <z_work_submit_to_queue>
	if (ret > 0) {
   3b602:	1e04      	subs	r4, r0, #0
   3b604:	dd09      	ble.n	3b61a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   3b606:	f04f 0340 	mov.w	r3, #64	; 0x40
   3b60a:	f3ef 8011 	mrs	r0, BASEPRI
   3b60e:	f383 8812 	msr	BASEPRI_MAX, r3
   3b612:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3b616:	f000 f80d 	bl	3b634 <z_reschedule_irqlock>
}
   3b61a:	4620      	mov	r0, r4
   3b61c:	bd10      	pop	{r4, pc}

0003b61e <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   3b61e:	f7f7 b95f 	b.w	328e0 <k_work_busy_get>

0003b622 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3b622:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3b626:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3b62a:	4283      	cmp	r3, r0
		return b2 - b1;
   3b62c:	bf14      	ite	ne
   3b62e:	1ac0      	subne	r0, r0, r3
	return 0;
   3b630:	2000      	moveq	r0, #0
}
   3b632:	4770      	bx	lr

0003b634 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3b634:	4603      	mov	r3, r0
   3b636:	b920      	cbnz	r0, 3b642 <z_reschedule_irqlock+0xe>
   3b638:	f3ef 8205 	mrs	r2, IPSR
   3b63c:	b90a      	cbnz	r2, 3b642 <z_reschedule_irqlock+0xe>
   3b63e:	f7e9 bf5b 	b.w	254f8 <arch_swap>
	__asm__ volatile(
   3b642:	f383 8811 	msr	BASEPRI, r3
   3b646:	f3bf 8f6f 	isb	sy
}
   3b64a:	4770      	bx	lr

0003b64c <z_reschedule_unlocked>:
	__asm__ volatile(
   3b64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   3b650:	f3ef 8011 	mrs	r0, BASEPRI
   3b654:	f383 8812 	msr	BASEPRI_MAX, r3
   3b658:	f3bf 8f6f 	isb	sy
   3b65c:	f7ff bfea 	b.w	3b634 <z_reschedule_irqlock>

0003b660 <z_unpend_all>:
{
   3b660:	b538      	push	{r3, r4, r5, lr}
   3b662:	4605      	mov	r5, r0
	int need_sched = 0;
   3b664:	2000      	movs	r0, #0
	return list->head == list;
   3b666:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b668:	42a5      	cmp	r5, r4
   3b66a:	d000      	beq.n	3b66e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3b66c:	b904      	cbnz	r4, 3b670 <z_unpend_all+0x10>
}
   3b66e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3b670:	4620      	mov	r0, r4
   3b672:	f7f8 f8b5 	bl	337e0 <z_unpend_thread>
		z_ready_thread(thread);
   3b676:	4620      	mov	r0, r4
   3b678:	f7f7 fcac 	bl	32fd4 <z_ready_thread>
		need_sched = 1;
   3b67c:	2001      	movs	r0, #1
   3b67e:	e7f2      	b.n	3b666 <z_unpend_all+0x6>

0003b680 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3b680:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3b682:	f7f8 fe31 	bl	342e8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3b686:	bd08      	pop	{r3, pc}

0003b688 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3b688:	f7f8 be2e 	b.w	342e8 <sys_clock_tick_get>

0003b68c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3b68c:	b108      	cbz	r0, 3b692 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3b68e:	f7ea bc1d 	b.w	25ecc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3b692:	4770      	bx	lr

0003b694 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3b694:	f1b1 3fff 	cmp.w	r1, #4294967295
   3b698:	bf08      	it	eq
   3b69a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   3b69e:	b538      	push	{r3, r4, r5, lr}
   3b6a0:	460c      	mov	r4, r1
   3b6a2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3b6a4:	d014      	beq.n	3b6d0 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3b6a6:	4308      	orrs	r0, r1
   3b6a8:	d103      	bne.n	3b6b2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3b6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   3b6ae:	f7f8 be1b 	b.w	342e8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3b6b2:	f06f 0001 	mvn.w	r0, #1
   3b6b6:	1b40      	subs	r0, r0, r5
   3b6b8:	f04f 33ff 	mov.w	r3, #4294967295
   3b6bc:	eb63 0101 	sbc.w	r1, r3, r1
   3b6c0:	2900      	cmp	r1, #0
   3b6c2:	da04      	bge.n	3b6ce <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   3b6c4:	f7f8 fe10 	bl	342e8 <sys_clock_tick_get>
   3b6c8:	1940      	adds	r0, r0, r5
   3b6ca:	eb41 0104 	adc.w	r1, r1, r4
}
   3b6ce:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   3b6d0:	f04f 30ff 	mov.w	r0, #4294967295
   3b6d4:	4601      	mov	r1, r0
   3b6d6:	e7fa      	b.n	3b6ce <sys_clock_timeout_end_calc+0x3a>

0003b6d8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3b6d8:	b510      	push	{r4, lr}
   3b6da:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   3b6dc:	f7f8 fcca 	bl	34074 <z_abort_timeout>

	if (inactive) {
   3b6e0:	b9b0      	cbnz	r0, 3b710 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   3b6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b6e4:	b10b      	cbz	r3, 3b6ea <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3b6e6:	4620      	mov	r0, r4
   3b6e8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3b6ea:	f104 0018 	add.w	r0, r4, #24
   3b6ee:	f7f8 f8f5 	bl	338dc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3b6f2:	b168      	cbz	r0, 3b710 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   3b6f4:	f7f7 fc6e 	bl	32fd4 <z_ready_thread>
   3b6f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   3b6fc:	f3ef 8011 	mrs	r0, BASEPRI
   3b700:	f383 8812 	msr	BASEPRI_MAX, r3
   3b704:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   3b708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b70c:	f7ff bf92 	b.w	3b634 <z_reschedule_irqlock>
   3b710:	bd10      	pop	{r4, pc}

0003b712 <add_event>:
{
   3b712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b714:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3b716:	e9d0 1300 	ldrd	r1, r3, [r0]
   3b71a:	4288      	cmp	r0, r1
   3b71c:	4604      	mov	r4, r0
   3b71e:	d105      	bne.n	3b72c <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   3b720:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3b722:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   3b726:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3b728:	6065      	str	r5, [r4, #4]
   3b72a:	e01d      	b.n	3b768 <add_event+0x56>
	if ((pending == NULL) ||
   3b72c:	2b00      	cmp	r3, #0
   3b72e:	d0f7      	beq.n	3b720 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3b730:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3b732:	b100      	cbz	r0, 3b736 <add_event+0x24>
   3b734:	3860      	subs	r0, #96	; 0x60
   3b736:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3b73a:	4639      	mov	r1, r7
   3b73c:	f7ff ff71 	bl	3b622 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3b740:	2800      	cmp	r0, #0
   3b742:	dced      	bgt.n	3b720 <add_event+0xe>
	return list->head == list;
   3b744:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b746:	42b4      	cmp	r4, r6
   3b748:	d0ea      	beq.n	3b720 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3b74a:	2e00      	cmp	r6, #0
   3b74c:	d0e8      	beq.n	3b720 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   3b74e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3b750:	b101      	cbz	r1, 3b754 <add_event+0x42>
   3b752:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3b754:	4638      	mov	r0, r7
   3b756:	f7ff ff64 	bl	3b622 <z_sched_prio_cmp>
   3b75a:	2800      	cmp	r0, #0
   3b75c:	dd05      	ble.n	3b76a <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   3b75e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3b760:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3b764:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3b766:	6075      	str	r5, [r6, #4]
}
   3b768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3b76a:	6863      	ldr	r3, [r4, #4]
   3b76c:	429e      	cmp	r6, r3
   3b76e:	d0d7      	beq.n	3b720 <add_event+0xe>
   3b770:	6836      	ldr	r6, [r6, #0]
   3b772:	e7ea      	b.n	3b74a <add_event+0x38>

0003b774 <signal_poll_event>:
{
   3b774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   3b778:	6884      	ldr	r4, [r0, #8]
{
   3b77a:	4605      	mov	r5, r0
   3b77c:	460e      	mov	r6, r1
	if (poller != NULL) {
   3b77e:	b144      	cbz	r4, 3b792 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3b780:	7863      	ldrb	r3, [r4, #1]
   3b782:	2b01      	cmp	r3, #1
   3b784:	d12e      	bne.n	3b7e4 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   3b786:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3b78a:	f013 0302 	ands.w	r3, r3, #2
   3b78e:	d10a      	bne.n	3b7a6 <signal_poll_event+0x32>
		poller->is_polling = false;
   3b790:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   3b792:	68eb      	ldr	r3, [r5, #12]
   3b794:	f3c3 3286 	ubfx	r2, r3, #14, #7
   3b798:	4316      	orrs	r6, r2
	event->poller = NULL;
   3b79a:	2000      	movs	r0, #0
	event->state |= state;
   3b79c:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   3b7a0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   3b7a2:	60eb      	str	r3, [r5, #12]
	return retcode;
   3b7a4:	e03e      	b.n	3b824 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   3b7a6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   3b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
   3b7ae:	bf08      	it	eq
   3b7b0:	f112 0f02 	cmneq.w	r2, #2
   3b7b4:	d032      	beq.n	3b81c <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3b7b6:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   3b7ba:	4640      	mov	r0, r8
   3b7bc:	f7f8 f810 	bl	337e0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3b7c0:	2e08      	cmp	r6, #8
   3b7c2:	bf0c      	ite	eq
   3b7c4:	f06f 0303 	mvneq.w	r3, #3
   3b7c8:	2300      	movne	r3, #0
   3b7ca:	6323      	str	r3, [r4, #48]	; 0x30
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3b7cc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3b7d0:	06db      	lsls	r3, r3, #27
   3b7d2:	d109      	bne.n	3b7e8 <signal_poll_event+0x74>
   3b7d4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   3b7d8:	b937      	cbnz	r7, 3b7e8 <signal_poll_event+0x74>
	z_ready_thread(thread);
   3b7da:	4640      	mov	r0, r8
   3b7dc:	f7f7 fbfa 	bl	32fd4 <z_ready_thread>
		poller->is_polling = false;
   3b7e0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   3b7e2:	e7d6      	b.n	3b792 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   3b7e4:	2b02      	cmp	r3, #2
   3b7e6:	d001      	beq.n	3b7ec <signal_poll_event+0x78>
		poller->is_polling = false;
   3b7e8:	2300      	movs	r3, #0
   3b7ea:	e7d1      	b.n	3b790 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3b7ec:	7823      	ldrb	r3, [r4, #0]
   3b7ee:	2b00      	cmp	r3, #0
   3b7f0:	d0cf      	beq.n	3b792 <signal_poll_event+0x1e>
   3b7f2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   3b7f6:	2f00      	cmp	r7, #0
   3b7f8:	d0f2      	beq.n	3b7e0 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   3b7fa:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   3b7fe:	f1a4 0914 	sub.w	r9, r4, #20
   3b802:	f104 0014 	add.w	r0, r4, #20
   3b806:	f7f8 fc35 	bl	34074 <z_abort_timeout>
		twork->poll_result = 0;
   3b80a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   3b80e:	4649      	mov	r1, r9
   3b810:	4638      	mov	r0, r7
   3b812:	f7f7 f899 	bl	32948 <z_work_submit_to_queue>
		poller->is_polling = false;
   3b816:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   3b81a:	e7ba      	b.n	3b792 <signal_poll_event+0x1e>
		poller->is_polling = false;
   3b81c:	2300      	movs	r3, #0
   3b81e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   3b820:	f06f 000a 	mvn.w	r0, #10
}
   3b824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003b828 <z_handle_obj_poll_events>:
{
   3b828:	4603      	mov	r3, r0
	return list->head == list;
   3b82a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3b82c:	4283      	cmp	r3, r0
   3b82e:	d008      	beq.n	3b842 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3b830:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3b834:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3b836:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3b838:	2300      	movs	r3, #0
	node->prev = NULL;
   3b83a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3b83e:	f7ff bf99 	b.w	3b774 <signal_poll_event>
}
   3b842:	4770      	bx	lr

0003b844 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   3b844:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   3b846:	e9c0 0000 	strd	r0, r0, [r0]
   3b84a:	6083      	str	r3, [r0, #8]
}
   3b84c:	4770      	bx	lr

0003b84e <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   3b84e:	2300      	movs	r3, #0
   3b850:	6083      	str	r3, [r0, #8]
}
   3b852:	4770      	bx	lr

0003b854 <k_free>:
	if (ptr != NULL) {
   3b854:	b120      	cbz	r0, 3b860 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   3b856:	1f01      	subs	r1, r0, #4
   3b858:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3b85c:	f7f6 b864 	b.w	31928 <k_heap_free>
}
   3b860:	4770      	bx	lr

0003b862 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3b862:	4770      	bx	lr

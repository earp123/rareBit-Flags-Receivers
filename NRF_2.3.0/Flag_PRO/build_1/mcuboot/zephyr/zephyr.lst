
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	40 45 00 20 61 21 00 00 d1 72 00 00 35 21 00 00     @E. a!...r..5!..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	35 21 00 00 35 21 00 00 35 21 00 00 00 00 00 00     5!..5!..5!......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	95 1c 00 00 35 21 00 00 00 00 00 00 35 21 00 00     ....5!......5!..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	35 21 00 00                                         5!..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
			switch (*fmt) {
  c0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  d0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  e0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  f0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				align = VA_STACK_ALIGN(void *);
     120:	f000 f808 	bl	134 <__udivmoddi4>
			switch (*fmt) {
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
		buf = (void *) ROUND_UP(buf, align);
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xd0>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
		if (is_str_arg) {
     162:	4095      	lsls	r5, r2
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	ea43 0c0c 	orr.w	ip, r3, ip
			int v = va_arg(ap, int);
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
				arg_idx--;
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     17a:	fb08 f900 	mul.w	r9, r8, r0
				continue;
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
				if (fmt[-1] == 'l') {
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
					if (fmt[-2] == 'l') {
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
				parsing = false;
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
					if (fmt[-2] == 'l') {
     192:	f1a8 0702 	sub.w	r7, r8, #2
						align = VA_STACK_ALIGN(long long);
     196:	442b      	add	r3, r5
				size = sizeof(void *);
     198:	eba3 0309 	sub.w	r3, r3, r9
					v.ld = va_arg(ap, long double);
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
				buf = (void *) ROUND_UP(buf, align);
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				if (buf0 != NULL) {
     1ae:	42a0      	cmp	r0, r4
					if (BUF_OFFSET + size > len) {
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
						*(long double *)buf = v.ld;
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
				buf += size;
     1be:	f1ac 0302 	sub.w	r3, ip, #2
				parsing = false;
     1c2:	442c      	add	r4, r5
			switch (*fmt) {
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			if (*++fmt == '\0') {
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
			if (!parsing) {
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
				if (*fmt == '%') {
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
					arg_idx++;
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x48>
     1e2:	1b43      	subs	r3, r0, r5
					parsing = true;
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				align = VA_STACK_ALIGN(size_t);
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
			switch (*fmt) {
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
				parsing = false;
     1f6:	fb0c f807 	mul.w	r8, ip, r7

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
					return -EINVAL;
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xc8>
			long long v = va_arg(ap, long long);
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x14>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x14>

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	f1ac 0002 	sub.w	r0, ip, #2
				}
			}
			buf += sizeof(long long);
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
		if (is_str_arg) {
     218:	b2a4      	uxth	r4, r4
		} else if (size == sizeof(int)) {
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
			int v = va_arg(ap, int);
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
			if (buf0 != NULL) {
     222:	fb0c f707 	mul.w	r7, ip, r7
		} else if (size == sizeof(long long)) {
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xcc>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
			if (buf0 != NULL) {
     234:	d204      	bcs.n	240 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x40>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x40>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
			s = va_arg(ap, char *);
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (is_ro && !do_ro) {
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25e:	b2af      	uxth	r7, r5
				if (buf0 != NULL) {
     260:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
					str_ptr_arg[s_idx] = arg_idx;
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
					if (is_ro) {
     278:	d922      	bls.n	2c0 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xc0>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     280:	d204      	bcs.n	28c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8c>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8c>
						s_ro_cnt++;
     286:	f1ac 0002 	sub.w	r0, ip, #2
				s_idx++;
     28a:	4429      	add	r1, r5
					if (BUF_OFFSET + size > len) {
     28c:	eba1 0108 	sub.w	r1, r1, r8
			buf += sizeof(char *);
     290:	b29b      	uxth	r3, r3
					if (BUF_OFFSET + size > len) {
     292:	fbb1 fcfe 	udiv	ip, r1, lr
			switch (*fmt) {
     296:	fb0e 111c 	mls	r1, lr, ip, r1
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
				} else if (is_ro) {
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xc4>
					len += 1;
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
					len += 2;
     2ac:	d204      	bcs.n	2b8 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xb8>
				} else if (rws_pos_en) {
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xb8>
					len += strlen(s) + 1 + 1;
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8c>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xb8>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x14>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	4663      	mov	r3, ip
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ce:	e7b7      	b.n	240 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x40>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xe2>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xdc>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7f9      	b.n	2d6 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xd6>
	*(char **)buf0 = NULL;
     2e2:	fab3 f783 	clz	r7, r3
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xf0>
	if (rws_pos_en) {
     2ec:	4572      	cmp	r2, lr
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	d808      	bhi.n	302 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2>
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
		for (i = 0; i < s_idx; i++) {
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6>
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
		for (i = 0; i < s_idx; i++) {
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xfc>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xfe>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     310:	40bb      	lsls	r3, r7
		if (BUF_OFFSET + 1 + size > len) {
     312:	fa22 f40c 	lsr.w	r4, r2, ip
			*buf++ = str_ptr_arg[i];
     316:	431c      	orrs	r4, r3
	for (i = 0; i < s_idx; i++) {
     318:	fa2e f10c 	lsr.w	r1, lr, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	40b8      	lsls	r0, r7
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	4301      	orrs	r1, r0
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
			if (BUF_OFFSET + 1 > len) {
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     334:	fb09 3018 	mls	r0, r9, r8, r3
			if (BUF_OFFSET + 1 > len) {
     338:	0c0b      	lsrs	r3, r1, #16
			*buf++ = pos;
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
		for (i = 0; i < s_idx; i++) {
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xcc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
		if (rws_pos_en) {
     350:	d204      	bcs.n	35c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x5c>
     352:	459a      	cmp	sl, r3
			*buf++ = str_ptr_arg[i];
     354:	d902      	bls.n	35c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x5c>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
			size = 0;
     35c:	eba3 030a 	sub.w	r3, r3, sl
		if (BUF_OFFSET + 1 + size > len) {
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
		*buf++ = str_ptr_pos[i];
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
		memcpy(buf, s, size);
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd0>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
		buf += size;
     37c:	d204      	bcs.n	388 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x88>
     37e:	458e      	cmp	lr, r1
	for (i = 0; i < s_idx; i++) {
     380:	d902      	bls.n	388 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x88>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
			size = strlen(s) + 1;
     39a:	d302      	bcc.n	3a2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa2>
     39c:	d106      	bne.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
		return -EFAULT;
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xfe>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xfe>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x5c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x88>

000003d4 <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3d6:	4b2d      	ldr	r3, [pc, #180]	; (48c <FIH_LABEL_FIH_CALL_END_235+0x7e>)
     3d8:	4a2d      	ldr	r2, [pc, #180]	; (490 <FIH_LABEL_FIH_CALL_END_235+0x82>)
     3da:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     3de:	482d      	ldr	r0, [pc, #180]	; (494 <FIH_LABEL_FIH_CALL_END_235+0x86>)
     3e0:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
{
     3e4:	b085      	sub	sp, #20
     3e6:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
    BOOT_LOG_INF("Starting bootloader");
     3ea:	2149      	movs	r1, #73	; 0x49
     3ec:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     3f0:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     3f4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     3f8:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     3fc:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     400:	f006 fedb 	bl	71ba <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     404:	f006 fa83 	bl	690e <os_heap_init>

00000408 <FIH_LABEL_FIH_CALL_START_223>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     408:	a801      	add	r0, sp, #4
     40a:	f000 fc7b 	bl	d04 <boot_go>

0000040e <FIH_LABEL_FIH_CALL_END_235>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     40e:	4b22      	ldr	r3, [pc, #136]	; (498 <FIH_LABEL_FIH_CALL_END_235+0x8a>)
     410:	681b      	ldr	r3, [r3, #0]
     412:	4283      	cmp	r3, r0
     414:	d004      	beq.n	420 <FIH_LABEL_FIH_CALL_END_235+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     416:	4821      	ldr	r0, [pc, #132]	; (49c <FIH_LABEL_FIH_CALL_END_235+0x8e>)
     418:	2145      	movs	r1, #69	; 0x45
     41a:	f006 fece 	bl	71ba <z_log_minimal_printk>

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     41e:	e7fe      	b.n	41e <FIH_LABEL_FIH_CALL_END_235+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     420:	9a03      	ldr	r2, [sp, #12]
     422:	481f      	ldr	r0, [pc, #124]	; (4a0 <FIH_LABEL_FIH_CALL_END_235+0x92>)
     424:	2149      	movs	r1, #73	; 0x49
     426:	f006 fec8 	bl	71ba <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     42a:	481e      	ldr	r0, [pc, #120]	; (4a4 <FIH_LABEL_FIH_CALL_END_235+0x96>)
     42c:	2149      	movs	r1, #73	; 0x49
     42e:	f006 fec4 	bl	71ba <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     432:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     436:	2000      	movs	r0, #0
     438:	f007 f9f7 	bl	782a <fprotect_area>

    if (rc != 0) {
     43c:	4604      	mov	r4, r0
     43e:	b120      	cbz	r0, 44a <FIH_LABEL_FIH_CALL_END_235+0x3c>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     440:	4819      	ldr	r0, [pc, #100]	; (4a8 <FIH_LABEL_FIH_CALL_END_235+0x9a>)
     442:	2145      	movs	r1, #69	; 0x45
     444:	f006 feb9 	bl	71ba <z_log_minimal_printk>
        while (1)
     448:	e7fe      	b.n	448 <FIH_LABEL_FIH_CALL_END_235+0x3a>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     44a:	4669      	mov	r1, sp
     44c:	f89d 0008 	ldrb.w	r0, [sp, #8]
     450:	f000 f82e 	bl	4b0 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     454:	9b00      	ldr	r3, [sp, #0]
     456:	9d03      	ldr	r5, [sp, #12]
     458:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     45a:	9b01      	ldr	r3, [sp, #4]
     45c:	891e      	ldrh	r6, [r3, #8]
    nrf_cleanup_peripheral();
     45e:	f000 ff65 	bl	132c <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     462:	19af      	adds	r7, r5, r6
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     464:	f000 ff38 	bl	12d8 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     468:	f001 fea4 	bl	21b4 <z_arm_clear_arm_mpu_config>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     46c:	59ab      	ldr	r3, [r5, r6]
     46e:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     472:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     476:	f3bf 8f6f 	isb	sy
     47a:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     47e:	687b      	ldr	r3, [r7, #4]
     480:	4798      	blx	r3

    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
     482:	480a      	ldr	r0, [pc, #40]	; (4ac <FIH_LABEL_FIH_CALL_END_235+0x9e>)
     484:	2145      	movs	r1, #69	; 0x45
     486:	f006 fe98 	bl	71ba <z_log_minimal_printk>
    while (1)
     48a:	e7fe      	b.n	48a <FIH_LABEL_FIH_CALL_END_235+0x7c>
     48c:	40010000 	.word	0x40010000
     490:	6e524635 	.word	0x6e524635
     494:	000082de 	.word	0x000082de
     498:	200001d0 	.word	0x200001d0
     49c:	000082f7 	.word	0x000082f7
     4a0:	0000831a 	.word	0x0000831a
     4a4:	00008349 	.word	0x00008349
     4a8:	0000836e 	.word	0x0000836e
     4ac:	000083a1 	.word	0x000083a1

000004b0 <flash_device_base>:
#endif

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     4b0:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     4b2:	4602      	mov	r2, r0
     4b4:	b138      	cbz	r0, 4c6 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     4b6:	4805      	ldr	r0, [pc, #20]	; (4cc <flash_device_base+0x1c>)
     4b8:	2300      	movs	r3, #0
     4ba:	2145      	movs	r1, #69	; 0x45
     4bc:	f006 fe7d 	bl	71ba <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     4c0:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     4c4:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     4c6:	6008      	str	r0, [r1, #0]
    return 0;
     4c8:	e7fc      	b.n	4c4 <flash_device_base+0x14>
     4ca:	bf00      	nop
     4cc:	000083c4 	.word	0x000083c4

000004d0 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     4d2:	460c      	mov	r4, r1
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     4d4:	4601      	mov	r1, r0
     4d6:	aa01      	add	r2, sp, #4
     4d8:	4804      	ldr	r0, [pc, #16]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4da:	f007 f8ac 	bl	7636 <z_impl_flash_get_page_info_by_offs>
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
    if (rc) {
     4de:	b918      	cbnz	r0, 4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
        return rc;
    }

    sector->fs_off = page.start_offset;
     4e0:	9b01      	ldr	r3, [sp, #4]
     4e2:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     4e4:	9b02      	ldr	r3, [sp, #8]
     4e6:	6063      	str	r3, [r4, #4]

    return rc;
}
     4e8:	b004      	add	sp, #16
     4ea:	bd10      	pop	{r4, pc}
     4ec:	00007ca0 	.word	0x00007ca0

000004f0 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f4:	461e      	mov	r6, r3
     4f6:	b0db      	sub	sp, #364	; 0x16c
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     4f8:	4b82      	ldr	r3, [pc, #520]	; (704 <FIH_LABEL_FIH_CALL_END_1006+0x20>)
{
     4fa:	f8dd b1a0 	ldr.w	fp, [sp, #416]	; 0x1a0
    fih_int valid_signature = FIH_FAILURE;
     4fe:	f8d3 8000 	ldr.w	r8, [r3]
{
     502:	e9dd 5766 	ldrd	r5, r7, [sp, #408]	; 0x198
     506:	4614      	mov	r4, r2
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     508:	f000 feb0 	bl	126c <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     50c:	4b7e      	ldr	r3, [pc, #504]	; (708 <FIH_LABEL_FIH_CALL_END_1006+0x24>)
     50e:	2201      	movs	r2, #1
     510:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     514:	a83a      	add	r0, sp, #232	; 0xe8
     516:	f005 f92f 	bl	5778 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     51a:	b135      	cbz	r5, 52a <bootutil_img_validate+0x3a>
     51c:	2f00      	cmp	r7, #0
     51e:	dd04      	ble.n	52a <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     520:	463a      	mov	r2, r7
     522:	4629      	mov	r1, r5
     524:	a83a      	add	r0, sp, #232	; 0xe8
     526:	f006 fd43 	bl	6fb0 <cc310_sha256_update>
    size += hdr->ih_protect_tlv_size;
     52a:	8963      	ldrh	r3, [r4, #10]
    size = hdr_size = hdr->ih_hdr_size;
     52c:	8927      	ldrh	r7, [r4, #8]
     52e:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     530:	68e3      	ldr	r3, [r4, #12]
    for (off = 0; off < size; off += blk_sz) {
     532:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     536:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     538:	454f      	cmp	r7, r9
     53a:	d825      	bhi.n	588 <bootutil_img_validate+0x98>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     53c:	a90d      	add	r1, sp, #52	; 0x34
     53e:	a83a      	add	r0, sp, #232	; 0xe8
     540:	f005 f98c 	bl	585c <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     544:	4b70      	ldr	r3, [pc, #448]	; (708 <FIH_LABEL_FIH_CALL_END_1006+0x24>)
     546:	2200      	movs	r2, #0
     548:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     54c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     550:	f1bb 0f00 	cmp.w	fp, #0
     554:	d004      	beq.n	560 <bootutil_img_validate+0x70>
        memcpy(out_hash, hash, 32);
     556:	2220      	movs	r2, #32
     558:	a90d      	add	r1, sp, #52	; 0x34
     55a:	4658      	mov	r0, fp
     55c:	f006 fef7 	bl	734e <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     560:	2300      	movs	r3, #0
     562:	9300      	str	r3, [sp, #0]
     564:	4632      	mov	r2, r6
     566:	f64f 73ff 	movw	r3, #65535	; 0xffff
     56a:	4621      	mov	r1, r4
     56c:	a807      	add	r0, sp, #28
     56e:	f006 f9cf 	bl	6910 <bootutil_tlv_iter_begin>
    if (rc) {
     572:	4605      	mov	r5, r0
     574:	b9d0      	cbnz	r0, 5ac <bootutil_img_validate+0xbc>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     576:	4630      	mov	r0, r6
     578:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     57a:	f000 f983 	bl	884 <bootutil_max_image_size>
     57e:	4284      	cmp	r4, r0
     580:	d91f      	bls.n	5c2 <bootutil_img_validate+0xd2>
        rc = -1;
     582:	f04f 35ff 	mov.w	r5, #4294967295
     586:	e011      	b.n	5ac <bootutil_img_validate+0xbc>
        if (blk_sz > tmp_buf_sz) {
     588:	9b65      	ldr	r3, [sp, #404]	; 0x194
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     58a:	9a64      	ldr	r2, [sp, #400]	; 0x190
        blk_sz = size - off;
     58c:	eba7 0a09 	sub.w	sl, r7, r9
     590:	459a      	cmp	sl, r3
     592:	bf28      	it	cs
     594:	469a      	movcs	sl, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     596:	4653      	mov	r3, sl
     598:	4649      	mov	r1, r9
     59a:	4630      	mov	r0, r6
     59c:	f006 fe1b 	bl	71d6 <flash_area_read>
        if (rc) {
     5a0:	4605      	mov	r5, r0
     5a2:	b138      	cbz	r0, 5b4 <bootutil_img_validate+0xc4>
     5a4:	4b58      	ldr	r3, [pc, #352]	; (708 <FIH_LABEL_FIH_CALL_END_1006+0x24>)
     5a6:	2200      	movs	r2, #0
     5a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     5ac:	4628      	mov	r0, r5
     5ae:	b05b      	add	sp, #364	; 0x16c
     5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5b4:	9964      	ldr	r1, [sp, #400]	; 0x190
     5b6:	4652      	mov	r2, sl
     5b8:	a83a      	add	r0, sp, #232	; 0xe8
     5ba:	f006 fcf9 	bl	6fb0 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     5be:	44d1      	add	r9, sl
     5c0:	e7ba      	b.n	538 <bootutil_img_validate+0x48>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5c2:	f8df b150 	ldr.w	fp, [pc, #336]	; 714 <FIH_LABEL_FIH_CALL_END_1006+0x30>
     5c6:	f8df 9140 	ldr.w	r9, [pc, #320]	; 708 <FIH_LABEL_FIH_CALL_END_1006+0x24>
    int key_id = -1;
     5ca:	f04f 37ff 	mov.w	r7, #4294967295
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5ce:	f10d 0316 	add.w	r3, sp, #22
     5d2:	aa05      	add	r2, sp, #20
     5d4:	a906      	add	r1, sp, #24
     5d6:	a807      	add	r0, sp, #28
     5d8:	f006 f9e8 	bl	69ac <bootutil_tlv_iter_next>
        if (rc < 0) {
     5dc:	1e04      	subs	r4, r0, #0
     5de:	f2c0 808f 	blt.w	700 <FIH_LABEL_FIH_CALL_END_1006+0x1c>
        } else if (rc > 0) {
     5e2:	f040 8082 	bne.w	6ea <FIH_LABEL_FIH_CALL_END_1006+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5e6:	f8bd a016 	ldrh.w	sl, [sp, #22]
     5ea:	f1ba 0f10 	cmp.w	sl, #16
     5ee:	d118      	bne.n	622 <FIH_LABEL_FIH_CALL_END_689+0xc>
            if (len != sizeof(hash)) {
     5f0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
     5f4:	2d20      	cmp	r5, #32
     5f6:	d1c4      	bne.n	582 <bootutil_img_validate+0x92>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5f8:	9906      	ldr	r1, [sp, #24]
     5fa:	462b      	mov	r3, r5
     5fc:	aa3a      	add	r2, sp, #232	; 0xe8
     5fe:	4630      	mov	r0, r6
     600:	f006 fde9 	bl	71d6 <flash_area_read>
            if (rc) {
     604:	4604      	mov	r4, r0
     606:	2800      	cmp	r0, #0
     608:	d17a      	bne.n	700 <FIH_LABEL_FIH_CALL_END_1006+0x1c>

0000060a <FIH_LABEL_FIH_CALL_START_672>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     60a:	462a      	mov	r2, r5
     60c:	a93a      	add	r1, sp, #232	; 0xe8
     60e:	a80d      	add	r0, sp, #52	; 0x34
     610:	f006 fa44 	bl	6a9c <boot_fih_memequal>
     614:	4605      	mov	r5, r0

00000616 <FIH_LABEL_FIH_CALL_END_689>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     616:	4b3d      	ldr	r3, [pc, #244]	; (70c <FIH_LABEL_FIH_CALL_END_1006+0x28>)
     618:	681b      	ldr	r3, [r3, #0]
     61a:	4283      	cmp	r3, r0
     61c:	d1c6      	bne.n	5ac <bootutil_img_validate+0xbc>
            sha256_valid = 1;
     61e:	2501      	movs	r5, #1
     620:	e7d5      	b.n	5ce <bootutil_img_validate+0xde>
        } else if (type == IMAGE_TLV_KEYHASH) {
     622:	f1ba 0f01 	cmp.w	sl, #1
     626:	d13e      	bne.n	6a6 <FIH_LABEL_FIH_CALL_END_689+0x90>
            if (len > 32) {
     628:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     62c:	2b20      	cmp	r3, #32
     62e:	d8a8      	bhi.n	582 <bootutil_img_validate+0x92>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     630:	9906      	ldr	r1, [sp, #24]
     632:	aa3a      	add	r2, sp, #232	; 0xe8
     634:	4630      	mov	r0, r6
     636:	f006 fdce 	bl	71d6 <flash_area_read>
            if (rc) {
     63a:	4604      	mov	r4, r0
     63c:	2800      	cmp	r0, #0
     63e:	d15f      	bne.n	700 <FIH_LABEL_FIH_CALL_END_1006+0x1c>
            key_id = bootutil_find_key(buf, len);
     640:	f89d 3014 	ldrb.w	r3, [sp, #20]
     644:	9302      	str	r3, [sp, #8]
    if (keyhash_len > 32) {
     646:	2b20      	cmp	r3, #32
     648:	d809      	bhi.n	65e <FIH_LABEL_FIH_CALL_END_689+0x48>
    for (i = 0; i < bootutil_key_cnt; i++) {
     64a:	f8db 3000 	ldr.w	r3, [fp]
     64e:	4f30      	ldr	r7, [pc, #192]	; (710 <FIH_LABEL_FIH_CALL_END_1006+0x2c>)
     650:	9303      	str	r3, [sp, #12]
     652:	9b03      	ldr	r3, [sp, #12]
     654:	429c      	cmp	r4, r3
     656:	db05      	blt.n	664 <FIH_LABEL_FIH_CALL_END_689+0x4e>
     658:	2300      	movs	r3, #0
     65a:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500
        return -1;
     65e:	f04f 34ff 	mov.w	r4, #4294967295
     662:	e01c      	b.n	69e <FIH_LABEL_FIH_CALL_END_689+0x88>
    cc310_init();
     664:	f000 fe02 	bl	126c <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     668:	f8c9 a500 	str.w	sl, [r9, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     66c:	a81d      	add	r0, sp, #116	; 0x74
     66e:	f005 f883 	bl	5778 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     672:	687a      	ldr	r2, [r7, #4]
     674:	f857 1b08 	ldr.w	r1, [r7], #8
     678:	6812      	ldr	r2, [r2, #0]
     67a:	a81d      	add	r0, sp, #116	; 0x74
     67c:	f006 fc98 	bl	6fb0 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     680:	a915      	add	r1, sp, #84	; 0x54
     682:	a81d      	add	r0, sp, #116	; 0x74
     684:	f005 f8ea 	bl	585c <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     688:	2200      	movs	r2, #0
     68a:	f8c9 2500 	str.w	r2, [r9, #1280]	; 0x500
        if (!memcmp(hash, keyhash, keyhash_len)) {
     68e:	9a02      	ldr	r2, [sp, #8]
     690:	a93a      	add	r1, sp, #232	; 0xe8
     692:	a815      	add	r0, sp, #84	; 0x54
     694:	f006 fe34 	bl	7300 <memcmp>
     698:	b918      	cbnz	r0, 6a2 <FIH_LABEL_FIH_CALL_END_689+0x8c>
     69a:	f8c9 0500 	str.w	r0, [r9, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     69e:	4627      	mov	r7, r4
     6a0:	e795      	b.n	5ce <bootutil_img_validate+0xde>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6a2:	3401      	adds	r4, #1
     6a4:	e7d5      	b.n	652 <FIH_LABEL_FIH_CALL_END_689+0x3c>
        } else if (type == EXPECTED_SIG_TLV) {
     6a6:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
     6aa:	d190      	bne.n	5ce <bootutil_img_validate+0xde>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6ac:	1c7b      	adds	r3, r7, #1
     6ae:	d08e      	beq.n	5ce <bootutil_img_validate+0xde>
     6b0:	f8db 3000 	ldr.w	r3, [fp]
     6b4:	42bb      	cmp	r3, r7
     6b6:	dd15      	ble.n	6e4 <FIH_LABEL_FIH_CALL_END_1006>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6bc:	2b80      	cmp	r3, #128	; 0x80
     6be:	f63f af60 	bhi.w	582 <bootutil_img_validate+0x92>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6c2:	9906      	ldr	r1, [sp, #24]
     6c4:	aa3a      	add	r2, sp, #232	; 0xe8
     6c6:	4630      	mov	r0, r6
     6c8:	f006 fd85 	bl	71d6 <flash_area_read>
            if (rc) {
     6cc:	4604      	mov	r4, r0
     6ce:	b9b8      	cbnz	r0, 700 <FIH_LABEL_FIH_CALL_END_1006+0x1c>

000006d0 <FIH_LABEL_FIH_CALL_START_985>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6d0:	b2ff      	uxtb	r7, r7
     6d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6d6:	9700      	str	r7, [sp, #0]
     6d8:	aa3a      	add	r2, sp, #232	; 0xe8
     6da:	2120      	movs	r1, #32
     6dc:	a80d      	add	r0, sp, #52	; 0x34
     6de:	f000 f81b 	bl	718 <bootutil_verify_sig>
     6e2:	4680      	mov	r8, r0

000006e4 <FIH_LABEL_FIH_CALL_END_1006>:
            key_id = -1;
     6e4:	f04f 37ff 	mov.w	r7, #4294967295
     6e8:	e771      	b.n	5ce <bootutil_img_validate+0xde>
    if (rc) {
     6ea:	b145      	cbz	r5, 6fe <FIH_LABEL_FIH_CALL_END_1006+0x1a>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <FIH_LABEL_FIH_CALL_END_1006+0x28>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     6ee:	681b      	ldr	r3, [r3, #0]
     6f0:	4543      	cmp	r3, r8
        return FIH_FAILURE;
     6f2:	bf1c      	itt	ne
     6f4:	4b03      	ldrne	r3, [pc, #12]	; (704 <FIH_LABEL_FIH_CALL_END_1006+0x20>)
     6f6:	f8d3 8000 	ldrne.w	r8, [r3]
        return -1;
     6fa:	4645      	mov	r5, r8
     6fc:	e756      	b.n	5ac <bootutil_img_validate+0xbc>
    rc = !sha256_valid;
     6fe:	2401      	movs	r4, #1
        return -1;
     700:	4625      	mov	r5, r4
     702:	e753      	b.n	5ac <bootutil_img_validate+0xbc>
     704:	20000000 	.word	0x20000000
     708:	5002a000 	.word	0x5002a000
     70c:	200001d0 	.word	0x200001d0
     710:	00007f0c 	.word	0x00007f0c
     714:	00007f08 	.word	0x00007f08

00000718 <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     71c:	b096      	sub	sp, #88	; 0x58
     71e:	4617      	mov	r7, r2
     720:	461d      	mov	r5, r3
     722:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     726:	4b35      	ldr	r3, [pc, #212]	; (7fc <bootutil_verify_sig+0xe4>)
{
     728:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     72a:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
     72e:	9101      	str	r1, [sp, #4]
    end = pubkey + *bootutil_keys[key_id].len;
     730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
{
     734:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     736:	685b      	ldr	r3, [r3, #4]
     738:	6818      	ldr	r0, [r3, #0]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     73a:	aa02      	add	r2, sp, #8
     73c:	4401      	add	r1, r0
     73e:	2330      	movs	r3, #48	; 0x30
     740:	a801      	add	r0, sp, #4
     742:	f006 fbc3 	bl	6ecc <mbedtls_asn1_get_tag>
     746:	b120      	cbz	r0, 752 <bootutil_verify_sig+0x3a>
    rc = bootutil_parse_eckey(&ctx, &pubkey, end);
#else
    rc = bootutil_import_key(&pubkey, end);
#endif
    if (rc) {
        return -1;
     748:	f04f 30ff 	mov.w	r0, #4294967295
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     74c:	b016      	add	sp, #88	; 0x58
     74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    end = *cp + len;
     752:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     756:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     758:	aa03      	add	r2, sp, #12
     75a:	ab06      	add	r3, sp, #24
     75c:	4621      	mov	r1, r4
     75e:	a801      	add	r0, sp, #4
     760:	f006 fbdc 	bl	6f1c <mbedtls_asn1_get_alg>
     764:	2800      	cmp	r0, #0
     766:	d1ef      	bne.n	748 <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     768:	9a04      	ldr	r2, [sp, #16]
     76a:	2a07      	cmp	r2, #7
     76c:	d1ec      	bne.n	748 <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     76e:	4924      	ldr	r1, [pc, #144]	; (800 <CONFIG_ISR_STACK_SIZE>)
     770:	9805      	ldr	r0, [sp, #20]
     772:	f006 fdc5 	bl	7300 <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     776:	2800      	cmp	r0, #0
     778:	d1e6      	bne.n	748 <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     77a:	9a07      	ldr	r2, [sp, #28]
     77c:	2a08      	cmp	r2, #8
     77e:	d1e3      	bne.n	748 <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     780:	4920      	ldr	r1, [pc, #128]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     782:	9808      	ldr	r0, [sp, #32]
     784:	f006 fdbc 	bl	7300 <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     788:	2800      	cmp	r0, #0
     78a:	d1dd      	bne.n	748 <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     78c:	aa02      	add	r2, sp, #8
     78e:	4621      	mov	r1, r4
     790:	a801      	add	r0, sp, #4
     792:	f006 fbaf 	bl	6ef4 <mbedtls_asn1_get_bitstring_null>
     796:	2800      	cmp	r0, #0
     798:	d1d6      	bne.n	748 <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     79a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     79e:	4413      	add	r3, r2
     7a0:	429c      	cmp	r4, r3
     7a2:	d1d1      	bne.n	748 <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     7a4:	2a41      	cmp	r2, #65	; 0x41
     7a6:	d1cf      	bne.n	748 <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     7a8:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     7aa:	2330      	movs	r3, #48	; 0x30
     7ac:	aa03      	add	r2, sp, #12
     7ae:	4629      	mov	r1, r5
     7b0:	a802      	add	r0, sp, #8
     7b2:	9702      	str	r7, [sp, #8]
     7b4:	f006 fb8a 	bl	6ecc <mbedtls_asn1_get_tag>
    if (rc) {
     7b8:	2800      	cmp	r0, #0
     7ba:	d1c5      	bne.n	748 <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     7bc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     7c0:	4413      	add	r3, r2
     7c2:	429d      	cmp	r5, r3
     7c4:	d3c0      	bcc.n	748 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     7c6:	462a      	mov	r2, r5
     7c8:	a902      	add	r1, sp, #8
     7ca:	a806      	add	r0, sp, #24
     7cc:	f006 f93a 	bl	6a44 <bootutil_read_bigint>
    if (rc) {
     7d0:	2800      	cmp	r0, #0
     7d2:	d1b9      	bne.n	748 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     7d4:	462a      	mov	r2, r5
     7d6:	a902      	add	r1, sp, #8
     7d8:	a80e      	add	r0, sp, #56	; 0x38
     7da:	f006 f933 	bl	6a44 <bootutil_read_bigint>
    if (rc) {
     7de:	2800      	cmp	r0, #0
     7e0:	d1b2      	bne.n	748 <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     7e2:	2e20      	cmp	r6, #32
     7e4:	d1b0      	bne.n	748 <bootutil_verify_sig+0x30>
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     7e6:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     7e8:	780b      	ldrb	r3, [r1, #0]
     7ea:	2b04      	cmp	r3, #4
     7ec:	d1ac      	bne.n	748 <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     7ee:	4633      	mov	r3, r6
     7f0:	aa06      	add	r2, sp, #24
     7f2:	3101      	adds	r1, #1
     7f4:	4640      	mov	r0, r8
     7f6:	f000 fd51 	bl	129c <cc310_ecdsa_verify_secp256r1>
     7fa:	e7a7      	b.n	74c <bootutil_verify_sig+0x34>
     7fc:	00007f0c 	.word	0x00007f0c
     800:	000083f3 	.word	0x000083f3
     804:	000083ea 	.word	0x000083ea

00000808 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     80c:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     80e:	2302      	movs	r3, #2
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     810:	f8df 806c 	ldr.w	r8, [pc, #108]	; 880 <__z_interrupt_stack_SIZEOF+0x40>
    uint8_t areas[2] = {
     814:	f8ad 3000 	strh.w	r3, [sp]
{
     818:	460d      	mov	r5, r1
     81a:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     81c:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     81e:	f817 0b01 	ldrb.w	r0, [r7], #1
     822:	a901      	add	r1, sp, #4
     824:	f001 f910 	bl	1a48 <flash_area_open>
        if (rc != 0) {
     828:	4604      	mov	r4, r0
     82a:	b9a0      	cbnz	r0, 856 <__z_interrupt_stack_SIZEOF+0x16>
        off = boot_magic_off(*fap);
     82c:	9801      	ldr	r0, [sp, #4]
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     82e:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     830:	2310      	movs	r3, #16
     832:	aa02      	add	r2, sp, #8
     834:	3910      	subs	r1, #16
     836:	f006 fcce 	bl	71d6 <flash_area_read>
     83a:	4604      	mov	r4, r0
        flash_area_close(*fap);
     83c:	9801      	ldr	r0, [sp, #4]
     83e:	f006 fcc9 	bl	71d4 <flash_area_close>
        if (rc != 0) {
     842:	b944      	cbnz	r4, 856 <__z_interrupt_stack_SIZEOF+0x16>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     844:	2210      	movs	r2, #16
     846:	4641      	mov	r1, r8
     848:	a802      	add	r0, sp, #8
     84a:	f006 fd59 	bl	7300 <memcmp>
     84e:	b140      	cbz	r0, 862 <__z_interrupt_stack_SIZEOF+0x22>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     850:	b12e      	cbz	r6, 85e <__z_interrupt_stack_SIZEOF+0x1e>
    return -1;
     852:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     856:	4620      	mov	r0, r4
     858:	b006      	add	sp, #24
     85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     85e:	2601      	movs	r6, #1
     860:	e7dd      	b.n	81e <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     862:	9801      	ldr	r0, [sp, #4]
     864:	f006 ffef 	bl	7846 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     868:	2304      	movs	r3, #4
     86a:	f1a0 0108 	sub.w	r1, r0, #8
     86e:	462a      	mov	r2, r5
     870:	9801      	ldr	r0, [sp, #4]
     872:	f006 fcb0 	bl	71d6 <flash_area_read>
     876:	4604      	mov	r4, r0
        flash_area_close(fap);
     878:	9801      	ldr	r0, [sp, #4]
     87a:	f006 fcab 	bl	71d4 <flash_area_close>
     87e:	e7ea      	b.n	856 <__z_interrupt_stack_SIZEOF+0x16>
     880:	000082ce 	.word	0x000082ce

00000884 <bootutil_max_image_size>:
    return 0;
}
#endif

uint32_t bootutil_max_image_size(const struct flash_area *fap)
{
     884:	b507      	push	{r0, r1, r2, lr}
#if defined(MCUBOOT_SWAP_USING_SCRATCH)
    return boot_status_off(fap);
#elif defined(MCUBOOT_SWAP_USING_MOVE)
    struct flash_sector sector;
    /* get the last sector offset */
    int rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
     886:	f006 f91d 	bl	6ac4 <boot_status_off>
     88a:	4669      	mov	r1, sp
     88c:	f7ff fe20 	bl	4d0 <flash_area_sector_from_off>
    if (rc) {
     890:	b138      	cbz	r0, 8a2 <bootutil_max_image_size+0x1e>
        BOOT_LOG_ERR("Unable to determine flash sector of the image trailer");
     892:	4805      	ldr	r0, [pc, #20]	; (8a8 <bootutil_max_image_size+0x24>)
     894:	2145      	movs	r1, #69	; 0x45
     896:	f006 fc90 	bl	71ba <z_log_minimal_printk>
        return 0; /* Returning of zero here should cause any check which uses
     89a:	2000      	movs	r0, #0
#elif defined(MCUBOOT_DIRECT_XIP)
    return boot_swap_info_off(fap);
#elif defined(MCUBOOT_RAM_LOAD)
    return boot_swap_info_off(fap);
#endif
}
     89c:	b003      	add	sp, #12
     89e:	f85d fb04 	ldr.w	pc, [sp], #4
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
     8a2:	9800      	ldr	r0, [sp, #0]
    return flash_sector_get_off(&sector);
     8a4:	e7fa      	b.n	89c <bootutil_max_image_size+0x18>
     8a6:	bf00      	nop
     8a8:	000083fb 	.word	0x000083fb

000008ac <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     8b0:	4b35      	ldr	r3, [pc, #212]	; (988 <FIH_LABEL_FIH_CALL_END_437+0x76>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     8b2:	b088      	sub	sp, #32
     8b4:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8b6:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     8b8:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     8ba:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8bc:	f006 f81c 	bl	68f8 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     8c0:	a906      	add	r1, sp, #24
     8c2:	b2c0      	uxtb	r0, r0
     8c4:	f001 f8c0 	bl	1a48 <flash_area_open>
    if (rc != 0) {
     8c8:	2800      	cmp	r0, #0
     8ca:	d157      	bne.n	97c <FIH_LABEL_FIH_CALL_END_437+0x6a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8cc:	4621      	mov	r1, r4
     8ce:	f006 f813 	bl	68f8 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     8d2:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     8d4:	a907      	add	r1, sp, #28
     8d6:	b2c0      	uxtb	r0, r0
     8d8:	fb05 6504 	mla	r5, r5, r4, r6
     8dc:	f001 f8b4 	bl	1a48 <flash_area_open>
    if (rc != 0) {
     8e0:	2800      	cmp	r0, #0
     8e2:	d033      	beq.n	94c <FIH_LABEL_FIH_CALL_END_437+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     8e4:	272c      	movs	r7, #44	; 0x2c
     8e6:	4367      	muls	r7, r4
     8e8:	eb06 0807 	add.w	r8, r6, r7
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     8ec:	9b06      	ldr	r3, [sp, #24]
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     8ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     8f2:	f011 0110 	ands.w	r1, r1, #16
     8f6:	d138      	bne.n	96a <FIH_LABEL_FIH_CALL_END_437+0x58>

000008f8 <FIH_LABEL_FIH_CALL_START_388>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     8f8:	f44f 7280 	mov.w	r2, #256	; 0x100
     8fc:	9201      	str	r2, [sp, #4]
     8fe:	4a23      	ldr	r2, [pc, #140]	; (98c <FIH_LABEL_FIH_CALL_END_437+0x7a>)
     900:	9200      	str	r2, [sp, #0]
     902:	e9cd 1103 	strd	r1, r1, [sp, #12]
     906:	462a      	mov	r2, r5
     908:	9102      	str	r1, [sp, #8]
     90a:	4608      	mov	r0, r1
     90c:	f7ff fdf0 	bl	4f0 <bootutil_img_validate>
     910:	4605      	mov	r5, r0

00000912 <FIH_LABEL_FIH_CALL_END_437>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     912:	4b1f      	ldr	r3, [pc, #124]	; (990 <FIH_LABEL_FIH_CALL_END_437+0x7e>)
     914:	59f2      	ldr	r2, [r6, r7]
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     916:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     918:	429a      	cmp	r2, r3
     91a:	d10c      	bne.n	936 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     91c:	f8d8 200c 	ldr.w	r2, [r8, #12]
     920:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     924:	189b      	adds	r3, r3, r2
     926:	d206      	bcs.n	936 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (size >= flash_area_get_size(fap)) {
     928:	6882      	ldr	r2, [r0, #8]
     92a:	4293      	cmp	r3, r2
     92c:	d203      	bcs.n	936 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     92e:	4b19      	ldr	r3, [pc, #100]	; (994 <FIH_LABEL_FIH_CALL_END_437+0x82>)
     930:	681b      	ldr	r3, [r3, #0]
     932:	42ab      	cmp	r3, r5
     934:	d01f      	beq.n	976 <FIH_LABEL_FIH_CALL_END_437+0x64>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     936:	b32c      	cbz	r4, 984 <FIH_LABEL_FIH_CALL_END_437+0x72>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     938:	6882      	ldr	r2, [r0, #8]
     93a:	2100      	movs	r1, #0
     93c:	f006 fc75 	bl	722a <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     940:	4a15      	ldr	r2, [pc, #84]	; (998 <FIH_LABEL_FIH_CALL_END_437+0x86>)
     942:	4816      	ldr	r0, [pc, #88]	; (99c <FIH_LABEL_FIH_CALL_END_437+0x8a>)
     944:	2145      	movs	r1, #69	; 0x45
     946:	f006 fc38 	bl	71ba <z_log_minimal_printk>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
        goto out;
     94a:	e013      	b.n	974 <FIH_LABEL_FIH_CALL_END_437+0x62>
    erased_val = flash_area_erased_val(fap);
     94c:	9807      	ldr	r0, [sp, #28]
     94e:	f006 fc89 	bl	7264 <flash_area_erased_val>
     952:	4607      	mov	r7, r0
    flash_area_close(fap);
     954:	9807      	ldr	r0, [sp, #28]
     956:	f006 fc3d 	bl	71d4 <flash_area_close>
    for (i = 0; i < len; i++) {
     95a:	1e6b      	subs	r3, r5, #1
     95c:	1cea      	adds	r2, r5, #3
        if (val != p[i]) {
     95e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     962:	42b9      	cmp	r1, r7
     964:	d1be      	bne.n	8e4 <boot_validate_slot.isra.0+0x38>
    for (i = 0; i < len; i++) {
     966:	4293      	cmp	r3, r2
     968:	d1f9      	bne.n	95e <FIH_LABEL_FIH_CALL_END_437+0x4c>
        if (slot != BOOT_PRIMARY_SLOT) {
     96a:	b11c      	cbz	r4, 974 <FIH_LABEL_FIH_CALL_END_437+0x62>
            swap_erase_trailer_sectors(state, fap);
     96c:	9906      	ldr	r1, [sp, #24]
     96e:	4630      	mov	r0, r6
     970:	f006 f98c 	bl	6c8c <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     974:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     976:	9806      	ldr	r0, [sp, #24]
     978:	f006 fc2c 	bl	71d4 <flash_area_close>

    FIH_RET(fih_rc);
}
     97c:	4628      	mov	r0, r5
     97e:	b008      	add	sp, #32
     980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     984:	4a06      	ldr	r2, [pc, #24]	; (9a0 <FIH_LABEL_FIH_CALL_END_437+0x8e>)
     986:	e7dc      	b.n	942 <FIH_LABEL_FIH_CALL_END_437+0x30>
     988:	20000000 	.word	0x20000000
     98c:	20000fd0 	.word	0x20000fd0
     990:	96f3b83d 	.word	0x96f3b83d
     994:	200001d0 	.word	0x200001d0
     998:	0000843e 	.word	0x0000843e
     99c:	00008448 	.word	0x00008448
     9a0:	00008436 	.word	0x00008436

000009a4 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     9a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     9a6:	460d      	mov	r5, r1
     9a8:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     9aa:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     9ac:	4628      	mov	r0, r5
    size = copy_size = 0;
     9ae:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     9b2:	f006 f92a 	bl	6c0a <boot_status_is_reset>
     9b6:	b330      	cbz	r0, a06 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9b8:	4e16      	ldr	r6, [pc, #88]	; (a14 <boot_swap_image+0x70>)
     9ba:	6823      	ldr	r3, [r4, #0]
     9bc:	42b3      	cmp	r3, r6
     9be:	d103      	bne.n	9c8 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     9c0:	aa01      	add	r2, sp, #4
     9c2:	4620      	mov	r0, r4
     9c4:	f006 f8b6 	bl	6b34 <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9ca:	42b3      	cmp	r3, r6
     9cc:	d104      	bne.n	9d8 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     9ce:	466a      	mov	r2, sp
     9d0:	2101      	movs	r1, #1
     9d2:	4620      	mov	r0, r4
     9d4:	f006 f8ae 	bl	6b34 <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     9d8:	e9dd 3200 	ldrd	r3, r2, [sp]
     9dc:	4293      	cmp	r3, r2
            copy_size = size;
     9de:	bf88      	it	hi
     9e0:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     9e2:	9b01      	ldr	r3, [sp, #4]
     9e4:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     9e6:	9a01      	ldr	r2, [sp, #4]
     9e8:	4629      	mov	r1, r5
     9ea:	4620      	mov	r0, r4
     9ec:	f000 fb34 	bl	1058 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     9f0:	4b09      	ldr	r3, [pc, #36]	; (a18 <boot_swap_image+0x74>)
     9f2:	681a      	ldr	r2, [r3, #0]
     9f4:	2a00      	cmp	r2, #0
     9f6:	dd03      	ble.n	a00 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     9f8:	4808      	ldr	r0, [pc, #32]	; (a1c <boot_swap_image+0x78>)
     9fa:	2157      	movs	r1, #87	; 0x57
     9fc:	f006 fbdd 	bl	71ba <z_log_minimal_printk>
#endif
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
                        BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT), size);

    return 0;
}
     a00:	2000      	movs	r0, #0
     a02:	b002      	add	sp, #8
     a04:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a06:	f105 0108 	add.w	r1, r5, #8
     a0a:	f7ff fefd 	bl	808 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a0e:	68ab      	ldr	r3, [r5, #8]
     a10:	9301      	str	r3, [sp, #4]
     a12:	e7e8      	b.n	9e6 <boot_swap_image+0x42>
     a14:	96f3b83d 	.word	0x96f3b83d
     a18:	20000e34 	.word	0x20000e34
     a1c:	00008470 	.word	0x00008470

00000a20 <boot_copy_region>:
{
     a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a24:	f8df b078 	ldr.w	fp, [pc, #120]	; aa0 <boot_copy_region+0x80>
     a28:	4c1b      	ldr	r4, [pc, #108]	; (a98 <boot_copy_region+0x78>)
     a2a:	4d1c      	ldr	r5, [pc, #112]	; (a9c <boot_copy_region+0x7c>)
{
     a2c:	4688      	mov	r8, r1
     a2e:	4691      	mov	r9, r2
     a30:	469a      	mov	sl, r3
    bytes_copied = 0;
     a32:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a36:	429e      	cmp	r6, r3
     a38:	d301      	bcc.n	a3e <boot_copy_region+0x1e>
    return 0;
     a3a:	2000      	movs	r0, #0
     a3c:	e00f      	b.n	a5e <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a40:	4a17      	ldr	r2, [pc, #92]	; (aa0 <boot_copy_region+0x80>)
        if (sz - bytes_copied > sizeof buf) {
     a42:	1b9f      	subs	r7, r3, r6
     a44:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a48:	bf28      	it	cs
     a4a:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a4e:	463b      	mov	r3, r7
     a50:	eb06 010a 	add.w	r1, r6, sl
     a54:	4640      	mov	r0, r8
     a56:	f006 fbbe 	bl	71d6 <flash_area_read>
        if (rc != 0) {
     a5a:	b110      	cbz	r0, a62 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     a5c:	2001      	movs	r0, #1
}
     a5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a62:	990a      	ldr	r1, [sp, #40]	; 0x28
     a64:	463b      	mov	r3, r7
     a66:	465a      	mov	r2, fp
     a68:	1871      	adds	r1, r6, r1
     a6a:	4648      	mov	r0, r9
     a6c:	f006 fbc8 	bl	7200 <flash_area_write>
        if (rc != 0) {
     a70:	2800      	cmp	r0, #0
     a72:	d1f3      	bne.n	a5c <boot_copy_region+0x3c>
     a74:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     a78:	443e      	add	r6, r7
     a7a:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     a7e:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     a82:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     a86:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     a8a:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     a8e:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     a92:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     a96:	e7cd      	b.n	a34 <boot_copy_region+0x14>
     a98:	40010000 	.word	0x40010000
     a9c:	6e524635 	.word	0x6e524635
     aa0:	200009d4 	.word	0x200009d4

00000aa4 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     aa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     aa8:	4b8f      	ldr	r3, [pc, #572]	; (ce8 <FIH_LABEL_FIH_CALL_END_2278+0x42>)
     aaa:	6243      	str	r3, [r0, #36]	; 0x24
{
     aac:	460e      	mov	r6, r1
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     aae:	4b8f      	ldr	r3, [pc, #572]	; (cec <FIH_LABEL_FIH_CALL_END_2278+0x46>)
     ab0:	6503      	str	r3, [r0, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ab2:	2100      	movs	r1, #0
{
     ab4:	4604      	mov	r4, r0
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ab6:	4608      	mov	r0, r1
     ab8:	f005 ff1e 	bl	68f8 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     abc:	f104 0120 	add.w	r1, r4, #32
     ac0:	b2c0      	uxtb	r0, r0
     ac2:	f000 ffc1 	bl	1a48 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ac6:	2101      	movs	r1, #1
     ac8:	2000      	movs	r0, #0
     aca:	f005 ff15 	bl	68f8 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ace:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     ad2:	b2c0      	uxtb	r0, r0
     ad4:	f000 ffb8 	bl	1a48 <flash_area_open>
     ad8:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     ada:	4620      	mov	r0, r4
     adc:	f006 f86b 	bl	6bb6 <boot_read_sectors>
    if (rc != 0) {
     ae0:	4607      	mov	r7, r0
     ae2:	b968      	cbnz	r0, b00 <context_boot_go+0x5c>
    rc = boot_read_image_headers(state, false, NULL);
     ae4:	2200      	movs	r2, #0
     ae6:	4611      	mov	r1, r2
     ae8:	4620      	mov	r0, r4
     aea:	f006 f80d 	bl	6b08 <boot_read_image_headers>
    if (rc != 0) {
     aee:	4607      	mov	r7, r0
     af0:	b300      	cbz	r0, b34 <context_boot_go+0x90>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     af2:	487f      	ldr	r0, [pc, #508]	; (cf0 <FIH_LABEL_FIH_CALL_END_2278+0x4a>)
     af4:	2200      	movs	r2, #0
     af6:	2157      	movs	r1, #87	; 0x57
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     af8:	f006 fb5f 	bl	71ba <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     afc:	2301      	movs	r3, #1
     afe:	e08f      	b.n	c20 <FIH_LABEL_FIH_CALL_END_2027+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b00:	487c      	ldr	r0, [pc, #496]	; (cf4 <FIH_LABEL_FIH_CALL_END_2278+0x4e>)
     b02:	2280      	movs	r2, #128	; 0x80
     b04:	2157      	movs	r1, #87	; 0x57
     b06:	f006 fb58 	bl	71ba <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b0a:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b0c:	429f      	cmp	r7, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b0e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b12:	d1e7      	bne.n	ae4 <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b14:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     b18:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     b1c:	2b04      	cmp	r3, #4
     b1e:	f200 8082 	bhi.w	c26 <FIH_LABEL_FIH_CALL_END_2027+0x14>
     b22:	2b01      	cmp	r3, #1
     b24:	f200 8085 	bhi.w	c32 <FIH_LABEL_FIH_CALL_END_2027+0x20>
     b28:	f000 809c 	beq.w	c64 <FIH_LABEL_FIH_CALL_END_2027+0x52>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b2c:	23ff      	movs	r3, #255	; 0xff
     b2e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     b32:	e097      	b.n	c64 <FIH_LABEL_FIH_CALL_END_2027+0x52>
    if (boot_slots_compatible(state)) {
     b34:	4620      	mov	r0, r4
     b36:	f000 f9a7 	bl	e88 <boot_slots_compatible>
     b3a:	2800      	cmp	r0, #0
     b3c:	d0de      	beq.n	afc <context_boot_go+0x58>
        boot_status_reset(bs);
     b3e:	4668      	mov	r0, sp
     b40:	f006 f85a 	bl	6bf8 <boot_status_reset>
        rc = swap_read_status(state, bs);
     b44:	4669      	mov	r1, sp
     b46:	4620      	mov	r0, r4
     b48:	f006 f8f5 	bl	6d36 <swap_read_status>
        if (rc != 0) {
     b4c:	b118      	cbz	r0, b56 <context_boot_go+0xb2>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b4e:	486a      	ldr	r0, [pc, #424]	; (cf8 <FIH_LABEL_FIH_CALL_END_2278+0x52>)
     b50:	463a      	mov	r2, r7
     b52:	2157      	movs	r1, #87	; 0x57
     b54:	e7d0      	b.n	af8 <context_boot_go+0x54>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     b56:	4668      	mov	r0, sp
     b58:	f006 f857 	bl	6c0a <boot_status_is_reset>
     b5c:	f080 0101 	eor.w	r1, r0, #1
     b60:	466a      	mov	r2, sp
     b62:	b2c9      	uxtb	r1, r1
     b64:	4620      	mov	r0, r4
     b66:	f005 ffcf 	bl	6b08 <boot_read_image_headers>
        if (rc != 0) {
     b6a:	4602      	mov	r2, r0
     b6c:	2800      	cmp	r0, #0
     b6e:	d1c0      	bne.n	af2 <context_boot_go+0x4e>
        if (!boot_status_is_reset(bs)) {
     b70:	4668      	mov	r0, sp
     b72:	f006 f84a 	bl	6c0a <boot_status_is_reset>
     b76:	4607      	mov	r7, r0
     b78:	bb60      	cbnz	r0, bd4 <context_boot_go+0x130>
    rc = boot_swap_image(state, bs);
     b7a:	4669      	mov	r1, sp
     b7c:	4620      	mov	r0, r4
     b7e:	f7ff ff11 	bl	9a4 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     b82:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b86:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     b8a:	3b03      	subs	r3, #3
     b8c:	2b01      	cmp	r3, #1
     b8e:	d806      	bhi.n	b9e <context_boot_go+0xfa>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     b90:	4638      	mov	r0, r7
     b92:	f006 f91e 	bl	6dd2 <swap_set_image_ok>
        if (rc != 0) {
     b96:	b110      	cbz	r0, b9e <context_boot_go+0xfa>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b98:	23ff      	movs	r3, #255	; 0xff
     b9a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     b9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba2:	3b02      	subs	r3, #2
     ba4:	2b02      	cmp	r3, #2
     ba6:	d80b      	bhi.n	bc0 <context_boot_go+0x11c>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     ba8:	2000      	movs	r0, #0
     baa:	f006 f900 	bl	6dae <swap_set_copy_done>
        if (rc != 0) {
     bae:	b138      	cbz	r0, bc0 <context_boot_go+0x11c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bb0:	23ff      	movs	r3, #255	; 0xff
     bb2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     bb6:	4851      	ldr	r0, [pc, #324]	; (cfc <FIH_LABEL_FIH_CALL_END_2278+0x56>)
     bb8:	2145      	movs	r1, #69	; 0x45
     bba:	f006 fafe 	bl	71ba <z_log_minimal_printk>
        while (1) {}
     bbe:	e7fe      	b.n	bbe <context_boot_go+0x11a>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     bc0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     bc4:	2bff      	cmp	r3, #255	; 0xff
     bc6:	d0f6      	beq.n	bb6 <context_boot_go+0x112>
            rc = boot_read_image_headers(state, false, bs);
     bc8:	466a      	mov	r2, sp
     bca:	2100      	movs	r1, #0
     bcc:	4620      	mov	r0, r4
     bce:	f005 ff9b 	bl	6b08 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bd2:	e793      	b.n	afc <context_boot_go+0x58>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     bd4:	f89d 8007 	ldrb.w	r8, [sp, #7]
     bd8:	f1b8 0f01 	cmp.w	r8, #1
     bdc:	d115      	bne.n	c0a <FIH_LABEL_FIH_CALL_START_2012>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bde:	4610      	mov	r0, r2
     be0:	f002 fff8 	bl	3bd4 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     be4:	1e83      	subs	r3, r0, #2
     be6:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     be8:	4607      	mov	r7, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     bea:	d80b      	bhi.n	c04 <FIH_LABEL_FIH_CALL_END_1976+0x10>

00000bec <FIH_LABEL_FIH_CALL_START_1961>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     bec:	4641      	mov	r1, r8
     bee:	4620      	mov	r0, r4
     bf0:	f7ff fe5c 	bl	8ac <boot_validate_slot.isra.0>

00000bf4 <FIH_LABEL_FIH_CALL_END_1976>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     bf4:	4b42      	ldr	r3, [pc, #264]	; (d00 <FIH_LABEL_FIH_CALL_END_2278+0x5a>)
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	4298      	cmp	r0, r3
     bfa:	d003      	beq.n	c04 <FIH_LABEL_FIH_CALL_END_1976+0x10>
                swap_type = BOOT_SWAP_TYPE_NONE;
     bfc:	2801      	cmp	r0, #1
     bfe:	bf14      	ite	ne
     c00:	2705      	movne	r7, #5
     c02:	2701      	moveq	r7, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c04:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
     c08:	e784      	b.n	b14 <context_boot_go+0x70>

00000c0a <FIH_LABEL_FIH_CALL_START_2012>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c0a:	2101      	movs	r1, #1
     c0c:	4620      	mov	r0, r4
     c0e:	f7ff fe4d 	bl	8ac <boot_validate_slot.isra.0>

00000c12 <FIH_LABEL_FIH_CALL_END_2027>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c12:	4b3b      	ldr	r3, [pc, #236]	; (d00 <FIH_LABEL_FIH_CALL_END_2278+0x5a>)
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c18:	bf0c      	ite	eq
     c1a:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c1e:	2305      	movne	r3, #5
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c20:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c24:	e776      	b.n	b14 <context_boot_go+0x70>
        switch (BOOT_SWAP_TYPE(state)) {
     c26:	2b05      	cmp	r3, #5
     c28:	d180      	bne.n	b2c <context_boot_go+0x88>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c2a:	2000      	movs	r0, #0
     c2c:	f006 f8d1 	bl	6dd2 <swap_set_image_ok>
     c30:	e013      	b.n	c5a <FIH_LABEL_FIH_CALL_END_2027+0x48>
        rc = boot_swap_image(state, bs);
     c32:	4669      	mov	r1, sp
     c34:	4620      	mov	r0, r4
     c36:	f7ff feb5 	bl	9a4 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     c3a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c3e:	1eda      	subs	r2, r3, #3
     c40:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     c42:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c44:	d80c      	bhi.n	c60 <FIH_LABEL_FIH_CALL_END_2027+0x4e>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c46:	2000      	movs	r0, #0
     c48:	f006 f8c3 	bl	6dd2 <swap_set_image_ok>
        if (rc != 0) {
     c4c:	4605      	mov	r5, r0
     c4e:	2800      	cmp	r0, #0
     c50:	f47f af6c 	bne.w	b2c <context_boot_go+0x88>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c54:	2000      	movs	r0, #0
     c56:	f006 f8aa 	bl	6dae <swap_set_copy_done>
            if (rc != 0) {
     c5a:	4605      	mov	r5, r0
     c5c:	b110      	cbz	r0, c64 <FIH_LABEL_FIH_CALL_END_2027+0x52>
     c5e:	e765      	b.n	b2c <context_boot_go+0x88>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c60:	2b02      	cmp	r3, #2
     c62:	d0f7      	beq.n	c54 <FIH_LABEL_FIH_CALL_END_2027+0x42>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c64:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c68:	2bff      	cmp	r3, #255	; 0xff
     c6a:	d104      	bne.n	c76 <FIH_LABEL_FIH_CALL_END_2027+0x64>
            BOOT_LOG_ERR("panic!");
     c6c:	4823      	ldr	r0, [pc, #140]	; (cfc <FIH_LABEL_FIH_CALL_END_2278+0x56>)
     c6e:	2145      	movs	r1, #69	; 0x45
     c70:	f006 faa3 	bl	71ba <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     c74:	e7fe      	b.n	c74 <FIH_LABEL_FIH_CALL_END_2027+0x62>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     c76:	2b01      	cmp	r3, #1
     c78:	d010      	beq.n	c9c <FIH_LABEL_FIH_CALL_START_2263>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     c7a:	466a      	mov	r2, sp
     c7c:	2100      	movs	r1, #0
     c7e:	4620      	mov	r0, r4
     c80:	f005 ff42 	bl	6b08 <boot_read_image_headers>
            if (rc != 0) {
     c84:	4605      	mov	r5, r0
     c86:	b148      	cbz	r0, c9c <FIH_LABEL_FIH_CALL_START_2263>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     c88:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     c8a:	f006 faa3 	bl	71d4 <flash_area_close>
     c8e:	6a20      	ldr	r0, [r4, #32]
     c90:	f006 faa0 	bl	71d4 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     c94:	4628      	mov	r0, r5
     c96:	b004      	add	sp, #16
     c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000c9c <FIH_LABEL_FIH_CALL_START_2263>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     c9c:	2100      	movs	r1, #0
     c9e:	4620      	mov	r0, r4
     ca0:	f7ff fe04 	bl	8ac <boot_validate_slot.isra.0>
     ca4:	4607      	mov	r7, r0

00000ca6 <FIH_LABEL_FIH_CALL_END_2278>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     ca6:	f8df 8058 	ldr.w	r8, [pc, #88]	; d00 <FIH_LABEL_FIH_CALL_END_2278+0x5a>
     caa:	f8d8 3000 	ldr.w	r3, [r8]
     cae:	4298      	cmp	r0, r3
     cb0:	d10f      	bne.n	cd2 <FIH_LABEL_FIH_CALL_END_2278+0x2c>
    memset(&bs, 0, sizeof(struct boot_status));
     cb2:	2210      	movs	r2, #16
     cb4:	2100      	movs	r1, #0
     cb6:	4668      	mov	r0, sp
     cb8:	f006 fb54 	bl	7364 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     cbc:	6a20      	ldr	r0, [r4, #32]
     cbe:	f005 fe24 	bl	690a <flash_area_get_device_id>
     cc2:	7130      	strb	r0, [r6, #4]
	return (uint32_t)fa->fa_off;
     cc4:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     cc6:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     cc8:	6034      	str	r4, [r6, #0]
    fih_rc = FIH_SUCCESS;
     cca:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     cce:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     cd0:	e7da      	b.n	c88 <FIH_LABEL_FIH_CALL_END_2027+0x76>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     cd2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     cd4:	f006 fa7e 	bl	71d4 <flash_area_close>
     cd8:	6a20      	ldr	r0, [r4, #32]
     cda:	f006 fa7b 	bl	71d4 <flash_area_close>
    if (rc) {
     cde:	2d00      	cmp	r5, #0
     ce0:	bf08      	it	eq
     ce2:	463d      	moveq	r5, r7
     ce4:	e7d6      	b.n	c94 <FIH_LABEL_FIH_CALL_END_2027+0x82>
     ce6:	bf00      	nop
     ce8:	200005d4 	.word	0x200005d4
     cec:	200001d4 	.word	0x200001d4
     cf0:	000084e1 	.word	0x000084e1
     cf4:	0000849f 	.word	0x0000849f
     cf8:	0000850d 	.word	0x0000850d
     cfc:	00008537 	.word	0x00008537
     d00:	200001d0 	.word	0x200001d0

00000d04 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d04:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d06:	4d06      	ldr	r5, [pc, #24]	; (d20 <FIH_LABEL_FIH_CALL_END_2900+0x4>)
{
     d08:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d0a:	2260      	movs	r2, #96	; 0x60
     d0c:	2100      	movs	r1, #0
     d0e:	4628      	mov	r0, r5
     d10:	f006 fb28 	bl	7364 <memset>

00000d14 <FIH_LABEL_FIH_CALL_START_2886>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d14:	4621      	mov	r1, r4
     d16:	4628      	mov	r0, r5
     d18:	f7ff fec4 	bl	aa4 <context_boot_go>

00000d1c <FIH_LABEL_FIH_CALL_END_2900>:
}
     d1c:	bd38      	pop	{r3, r4, r5, pc}
     d1e:	bf00      	nop
     d20:	20000dd4 	.word	0x20000dd4

00000d24 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d26:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d28:	461d      	mov	r5, r3
     d2a:	b143      	cbz	r3, d3e <boot_read_image_header+0x1a>
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d2c:	795b      	ldrb	r3, [r3, #5]
     d2e:	2b01      	cmp	r3, #1
     d30:	d107      	bne.n	d42 <boot_read_image_header+0x1e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d32:	b921      	cbnz	r1, d3e <boot_read_image_header+0x1a>
     d34:	4b20      	ldr	r3, [pc, #128]	; (db8 <boot_read_image_header+0x94>)
     d36:	682a      	ldr	r2, [r5, #0]
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	429a      	cmp	r2, r3
     d3c:	d817      	bhi.n	d6e <boot_read_image_header+0x4a>
    off = 0;
     d3e:	2400      	movs	r4, #0
     d40:	e018      	b.n	d74 <boot_read_image_header+0x50>
                /* second sector */
                off = sz;
            }
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     d42:	2b02      	cmp	r3, #2
     d44:	d1fb      	bne.n	d3e <boot_read_image_header+0x1a>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     d46:	682b      	ldr	r3, [r5, #0]
     d48:	2b01      	cmp	r3, #1
     d4a:	d907      	bls.n	d5c <boot_read_image_header+0x38>
     d4c:	4a1a      	ldr	r2, [pc, #104]	; (db8 <boot_read_image_header+0x94>)
     d4e:	6812      	ldr	r2, [r2, #0]
     d50:	4293      	cmp	r3, r2
     d52:	d8f4      	bhi.n	d3e <boot_read_image_header+0x1a>
                if (slot == 0) {
     d54:	fab1 f181 	clz	r1, r1
     d58:	0949      	lsrs	r1, r1, #5
     d5a:	e7f0      	b.n	d3e <boot_read_image_header+0x1a>
                    slot = 1;
                } else {
                    slot = 0;
                }
            } else if (bs->idx == 1) {
     d5c:	d1ef      	bne.n	d3e <boot_read_image_header+0x1a>
                if (slot == 0) {
     d5e:	b131      	cbz	r1, d6e <boot_read_image_header+0x4a>
                    off = sz;
                }
                if (slot == 1 && bs->state == 2) {
     d60:	2901      	cmp	r1, #1
     d62:	d1ec      	bne.n	d3e <boot_read_image_header+0x1a>
     d64:	7929      	ldrb	r1, [r5, #4]
     d66:	3902      	subs	r1, #2
     d68:	bf18      	it	ne
     d6a:	2101      	movne	r1, #1
     d6c:	e7e7      	b.n	d3e <boot_read_image_header+0x1a>
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     d6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d70:	685c      	ldr	r4, [r3, #4]
     d72:	2100      	movs	r1, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d74:	2000      	movs	r0, #0
     d76:	f005 fdbf 	bl	68f8 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d7a:	a901      	add	r1, sp, #4
     d7c:	b2c0      	uxtb	r0, r0
     d7e:	f000 fe63 	bl	1a48 <flash_area_open>
    if (rc != 0) {
     d82:	b130      	cbz	r0, d92 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     d84:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     d86:	9801      	ldr	r0, [sp, #4]
     d88:	f006 fa24 	bl	71d4 <flash_area_close>
    return rc;
}
     d8c:	4620      	mov	r0, r4
     d8e:	b002      	add	sp, #8
     d90:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     d92:	4621      	mov	r1, r4
     d94:	9801      	ldr	r0, [sp, #4]
     d96:	2320      	movs	r3, #32
     d98:	4632      	mov	r2, r6
     d9a:	f006 fa1c 	bl	71d6 <flash_area_read>
    if (rc != 0) {
     d9e:	4604      	mov	r4, r0
     da0:	2800      	cmp	r0, #0
     da2:	d1ef      	bne.n	d84 <boot_read_image_header+0x60>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     da4:	2d00      	cmp	r5, #0
     da6:	d0ee      	beq.n	d86 <boot_read_image_header+0x62>
     da8:	6834      	ldr	r4, [r6, #0]
     daa:	4b04      	ldr	r3, [pc, #16]	; (dbc <boot_read_image_header+0x98>)
     dac:	1ae4      	subs	r4, r4, r3
     dae:	bf18      	it	ne
     db0:	f04f 34ff 	movne.w	r4, #4294967295
     db4:	e7e7      	b.n	d86 <boot_read_image_header+0x62>
     db6:	bf00      	nop
     db8:	20000004 	.word	0x20000004
     dbc:	96f3b83d 	.word	0x96f3b83d

00000dc0 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dc4:	4607      	mov	r7, r0
     dc6:	b085      	sub	sp, #20
     dc8:	460c      	mov	r4, r1
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     dca:	4601      	mov	r1, r0
     dcc:	2000      	movs	r0, #0
{
     dce:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     dd0:	f005 fe6b 	bl	6aaa <boot_status_entries>
    if (max_entries < 0) {
     dd4:	1e05      	subs	r5, r0, #0
     dd6:	db50      	blt.n	e7a <swap_read_status_bytes+0xba>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     dd8:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     dda:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     ddc:	f005 fe72 	bl	6ac4 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     de0:	fa5f f984 	uxtb.w	r9, r4
     de4:	1e6b      	subs	r3, r5, #1
     de6:	fb09 0803 	mla	r8, r9, r3, r0
    erased_sections = 0;
     dea:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     dee:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     df2:	f04f 34ff 	mov.w	r4, #4294967295
    for (i = max_entries; i > 0; i--) {
     df6:	b99d      	cbnz	r5, e20 <swap_read_status_bytes+0x60>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     df8:	f1ba 0f01 	cmp.w	sl, #1
     dfc:	dd03      	ble.n	e06 <swap_read_status_bytes+0x46>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     dfe:	4821      	ldr	r0, [pc, #132]	; (e84 <swap_read_status_bytes+0xc4>)
     e00:	2145      	movs	r1, #69	; 0x45
     e02:	f006 f9da 	bl	71ba <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     e06:	1c63      	adds	r3, r4, #1
     e08:	d006      	beq.n	e18 <swap_read_status_bytes+0x58>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     e0a:	2c7f      	cmp	r4, #127	; 0x7f
     e0c:	dc2a      	bgt.n	e64 <swap_read_status_bytes+0xa4>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e0e:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e10:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e14:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e16:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     e18:	4628      	mov	r0, r5
     e1a:	b005      	add	sp, #20
     e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     e20:	1e6b      	subs	r3, r5, #1
     e22:	9300      	str	r3, [sp, #0]
     e24:	f10d 020f 	add.w	r2, sp, #15
     e28:	2301      	movs	r3, #1
     e2a:	4641      	mov	r1, r8
     e2c:	4638      	mov	r0, r7
     e2e:	f006 f9d2 	bl	71d6 <flash_area_read>
        if (rc < 0) {
     e32:	1e03      	subs	r3, r0, #0
     e34:	9301      	str	r3, [sp, #4]
     e36:	db22      	blt.n	e7e <swap_read_status_bytes+0xbe>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     e38:	2201      	movs	r2, #1
     e3a:	f10d 010f 	add.w	r1, sp, #15
     e3e:	4638      	mov	r0, r7
     e40:	f006 fd15 	bl	786e <bootutil_buffer_is_erased>
     e44:	9b01      	ldr	r3, [sp, #4]
     e46:	b140      	cbz	r0, e5a <swap_read_status_bytes+0x9a>
            if (rc != last_rc) {
     e48:	455b      	cmp	r3, fp
     e4a:	d001      	beq.n	e50 <swap_read_status_bytes+0x90>
                erased_sections++;
     e4c:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     e50:	9d00      	ldr	r5, [sp, #0]
     e52:	eba8 0809 	sub.w	r8, r8, r9
     e56:	469b      	mov	fp, r3
     e58:	e7cd      	b.n	df6 <swap_read_status_bytes+0x36>
     e5a:	f1b4 3fff 	cmp.w	r4, #4294967295
     e5e:	bf08      	it	eq
     e60:	462c      	moveq	r4, r5
     e62:	e7f5      	b.n	e50 <swap_read_status_bytes+0x90>
        bs->op = BOOT_STATUS_OP_SWAP;
     e64:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e66:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     e68:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e6a:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e6c:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e70:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e72:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e74:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e76:	7134      	strb	r4, [r6, #4]
     e78:	e7ce      	b.n	e18 <swap_read_status_bytes+0x58>
        return BOOT_EBADARGS;
     e7a:	2507      	movs	r5, #7
     e7c:	e7cc      	b.n	e18 <swap_read_status_bytes+0x58>
            return BOOT_EFLASH;
     e7e:	2501      	movs	r5, #1
     e80:	e7ca      	b.n	e18 <swap_read_status_bytes+0x58>
     e82:	bf00      	nop
     e84:	00008543 	.word	0x00008543

00000e88 <boot_slots_compatible>:
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     e88:	b538      	push	{r3, r4, r5, lr}
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     e8a:	6a81      	ldr	r1, [r0, #40]	; 0x28
     e8c:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     e8e:	4291      	cmp	r1, r2
     e90:	d008      	beq.n	ea4 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     e92:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     e94:	428b      	cmp	r3, r1
     e96:	d005      	beq.n	ea4 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     e98:	4813      	ldr	r0, [pc, #76]	; (ee8 <boot_slots_compatible+0x60>)
     e9a:	2157      	movs	r1, #87	; 0x57
        return 0;
    }

    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     e9c:	f006 f98d 	bl	71ba <z_log_minimal_printk>
        return 0;
     ea0:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     ea2:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     ea4:	2980      	cmp	r1, #128	; 0x80
     ea6:	d91c      	bls.n	ee2 <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ea8:	4810      	ldr	r0, [pc, #64]	; (eec <boot_slots_compatible+0x64>)
     eaa:	2157      	movs	r1, #87	; 0x57
     eac:	e7f6      	b.n	e9c <boot_slots_compatible+0x14>
     eae:	6a44      	ldr	r4, [r0, #36]	; 0x24
     eb0:	6d05      	ldr	r5, [r0, #80]	; 0x50
     eb2:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     eb6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     eba:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     ebc:	686d      	ldr	r5, [r5, #4]
     ebe:	42ac      	cmp	r4, r5
     ec0:	d002      	beq.n	ec8 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ec2:	480b      	ldr	r0, [pc, #44]	; (ef0 <boot_slots_compatible+0x68>)
     ec4:	2157      	movs	r1, #87	; 0x57
     ec6:	e7e9      	b.n	e9c <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     ec8:	3301      	adds	r3, #1
     eca:	429a      	cmp	r2, r3
     ecc:	d1ef      	bne.n	eae <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     ece:	4291      	cmp	r1, r2
     ed0:	d905      	bls.n	ede <boot_slots_compatible+0x56>
     ed2:	6a43      	ldr	r3, [r0, #36]	; 0x24
     ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     ed8:	685b      	ldr	r3, [r3, #4]
     eda:	42a3      	cmp	r3, r4
     edc:	d1f1      	bne.n	ec2 <boot_slots_compatible+0x3a>
    return 1;
     ede:	2001      	movs	r0, #1
     ee0:	e7df      	b.n	ea2 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     ee2:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     ee4:	461c      	mov	r4, r3
     ee6:	e7f0      	b.n	eca <boot_slots_compatible+0x42>
     ee8:	00008566 	.word	0x00008566
     eec:	0000859e 	.word	0x0000859e
     ef0:	000085cd 	.word	0x000085cd

00000ef4 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     ef4:	b500      	push	{lr}
     ef6:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     ef8:	a904      	add	r1, sp, #16
     efa:	2002      	movs	r0, #2
     efc:	f006 fd29 	bl	7952 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f00:	f89d 2010 	ldrb.w	r2, [sp, #16]
     f04:	2a01      	cmp	r2, #1
     f06:	d041      	beq.n	f8c <swap_status_source+0x98>
     f08:	4b25      	ldr	r3, [pc, #148]	; (fa0 <swap_status_source+0xac>)
     f0a:	4926      	ldr	r1, [pc, #152]	; (fa4 <swap_status_source+0xb0>)
     f0c:	2a03      	cmp	r2, #3
     f0e:	bf08      	it	eq
     f10:	460b      	moveq	r3, r1
     f12:	f89d 2013 	ldrb.w	r2, [sp, #19]
     f16:	9202      	str	r2, [sp, #8]
     f18:	f89d 2012 	ldrb.w	r2, [sp, #18]
     f1c:	9201      	str	r2, [sp, #4]
     f1e:	f89d 2011 	ldrb.w	r2, [sp, #17]
     f22:	4821      	ldr	r0, [pc, #132]	; (fa8 <swap_status_source+0xb4>)
     f24:	9200      	str	r2, [sp, #0]
     f26:	2149      	movs	r1, #73	; 0x49
     f28:	4a20      	ldr	r2, [pc, #128]	; (fac <swap_status_source+0xb8>)
     f2a:	f006 f946 	bl	71ba <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f2e:	a906      	add	r1, sp, #24
     f30:	2005      	movs	r0, #5
     f32:	f006 fd0e 	bl	7952 <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     f36:	f89d 2018 	ldrb.w	r2, [sp, #24]
     f3a:	2a01      	cmp	r2, #1
     f3c:	d028      	beq.n	f90 <swap_status_source+0x9c>
     f3e:	4b18      	ldr	r3, [pc, #96]	; (fa0 <swap_status_source+0xac>)
     f40:	4918      	ldr	r1, [pc, #96]	; (fa4 <swap_status_source+0xb0>)
     f42:	2a03      	cmp	r2, #3
     f44:	bf08      	it	eq
     f46:	460b      	moveq	r3, r1
     f48:	f89d 201b 	ldrb.w	r2, [sp, #27]
     f4c:	9202      	str	r2, [sp, #8]
     f4e:	f89d 201a 	ldrb.w	r2, [sp, #26]
     f52:	9201      	str	r2, [sp, #4]
     f54:	f89d 2019 	ldrb.w	r2, [sp, #25]
     f58:	9200      	str	r2, [sp, #0]
     f5a:	4813      	ldr	r0, [pc, #76]	; (fa8 <swap_status_source+0xb4>)
     f5c:	4a14      	ldr	r2, [pc, #80]	; (fb0 <swap_status_source+0xbc>)
     f5e:	2149      	movs	r1, #73	; 0x49
     f60:	f006 f92b 	bl	71ba <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     f64:	f89d 3010 	ldrb.w	r3, [sp, #16]
     f68:	2b01      	cmp	r3, #1
     f6a:	d113      	bne.n	f94 <swap_status_source+0xa0>
     f6c:	f89d 3012 	ldrb.w	r3, [sp, #18]
     f70:	2b03      	cmp	r3, #3
     f72:	d10f      	bne.n	f94 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
     f74:	f89d 3018 	ldrb.w	r3, [sp, #24]
     f78:	2b01      	cmp	r3, #1
     f7a:	d00b      	beq.n	f94 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
     f7c:	480d      	ldr	r0, [pc, #52]	; (fb4 <swap_status_source+0xc0>)
     f7e:	2149      	movs	r1, #73	; 0x49
     f80:	f006 f91b 	bl	71ba <z_log_minimal_printk>
        return source;
     f84:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
     f86:	b009      	add	sp, #36	; 0x24
     f88:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f8c:	4b0a      	ldr	r3, [pc, #40]	; (fb8 <swap_status_source+0xc4>)
     f8e:	e7c0      	b.n	f12 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     f90:	4b09      	ldr	r3, [pc, #36]	; (fb8 <swap_status_source+0xc4>)
     f92:	e7d9      	b.n	f48 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
     f94:	4809      	ldr	r0, [pc, #36]	; (fbc <swap_status_source+0xc8>)
     f96:	2149      	movs	r1, #73	; 0x49
     f98:	f006 f90f 	bl	71ba <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
     f9c:	2000      	movs	r0, #0
     f9e:	e7f2      	b.n	f86 <swap_status_source+0x92>
     fa0:	000085f9 	.word	0x000085f9
     fa4:	00008602 	.word	0x00008602
     fa8:	00008616 	.word	0x00008616
     fac:	00008608 	.word	0x00008608
     fb0:	00008657 	.word	0x00008657
     fb4:	00008667 	.word	0x00008667
     fb8:	000085fd 	.word	0x000085fd
     fbc:	00008686 	.word	0x00008686

00000fc0 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
     fc0:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fc2:	684b      	ldr	r3, [r1, #4]
{
     fc4:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fc6:	4a1e      	ldr	r2, [pc, #120]	; (1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
     fc8:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
     fcc:	4293      	cmp	r3, r2
{
     fce:	b086      	sub	sp, #24
     fd0:	4606      	mov	r6, r0
     fd2:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fd4:	d12f      	bne.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
        bs->op != BOOT_STATUS_OP_MOVE ||
     fd6:	680b      	ldr	r3, [r1, #0]
     fd8:	2b01      	cmp	r3, #1
     fda:	d12c      	bne.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
     fdc:	a904      	add	r1, sp, #16
     fde:	4620      	mov	r0, r4
     fe0:	f002 fda2 	bl	3b28 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
     fe4:	f89d 2010 	ldrb.w	r2, [sp, #16]
     fe8:	2a01      	cmp	r2, #1
     fea:	d026      	beq.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
     fec:	4b15      	ldr	r3, [pc, #84]	; (1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>)
     fee:	4916      	ldr	r1, [pc, #88]	; (1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>)
     ff0:	2a03      	cmp	r2, #3
     ff2:	bf08      	it	eq
     ff4:	460b      	moveq	r3, r1
     ff6:	f89d 2013 	ldrb.w	r2, [sp, #19]
     ffa:	9202      	str	r2, [sp, #8]
     ffc:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1000:	9201      	str	r2, [sp, #4]
    1002:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1006:	9200      	str	r2, [sp, #0]
    1008:	4810      	ldr	r0, [pc, #64]	; (104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>)
    100a:	4a11      	ldr	r2, [pc, #68]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
    100c:	2149      	movs	r1, #73	; 0x49
    100e:	f006 f8d4 	bl	71ba <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1012:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1016:	2b03      	cmp	r3, #3
    1018:	d10d      	bne.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    101a:	4621      	mov	r1, r4
    101c:	4630      	mov	r0, r6
    101e:	f005 fe35 	bl	6c8c <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    1022:	4620      	mov	r0, r4
    1024:	f006 fc88 	bl	7938 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1028:	68a9      	ldr	r1, [r5, #8]
    102a:	4620      	mov	r0, r4
    102c:	f005 fd5d 	bl	6aea <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1030:	4620      	mov	r0, r4
    1032:	f002 fd59 	bl	3ae8 <boot_write_magic>
        assert(rc == 0);
    }
}
    1036:	b006      	add	sp, #24
    1038:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    103a:	4b06      	ldr	r3, [pc, #24]	; (1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    103c:	e7db      	b.n	ff6 <fixup_revert+0x36>
    103e:	bf00      	nop
    1040:	04000100 	.word	0x04000100
    1044:	000085f9 	.word	0x000085f9
    1048:	00008602 	.word	0x00008602
    104c:	00008616 	.word	0x00008616
    1050:	00008657 	.word	0x00008657
    1054:	000085fd 	.word	0x000085fd

00001058 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    105c:	4605      	mov	r5, r0
    105e:	b089      	sub	sp, #36	; 0x24
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");
    1060:	487d      	ldr	r0, [pc, #500]	; (1258 <swap_run+0x200>)
{
    1062:	460c      	mov	r4, r1
    BOOT_LOG_INF("Starting swap using move algorithm.");
    1064:	2149      	movs	r1, #73	; 0x49
{
    1066:	4617      	mov	r7, r2
    BOOT_LOG_INF("Starting swap using move algorithm.");
    1068:	f006 f8a7 	bl	71ba <z_log_minimal_printk>
    106c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    106e:	2201      	movs	r2, #1
    1070:	685e      	ldr	r6, [r3, #4]

    sz = 0;
    1072:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    1074:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    1076:	42bb      	cmp	r3, r7
    1078:	4611      	mov	r1, r2
    107a:	f102 0201 	add.w	r2, r2, #1
    107e:	d3f9      	bcc.n	1074 <swap_run+0x1c>
    1080:	4f76      	ldr	r7, [pc, #472]	; (125c <swap_run+0x204>)
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    1082:	4620      	mov	r0, r4
    1084:	6039      	str	r1, [r7, #0]
    1086:	f005 fdc0 	bl	6c0a <boot_status_is_reset>
    108a:	b308      	cbz	r0, 10d0 <swap_run+0x78>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    108c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    108e:	f005 fd07 	bl	6aa0 <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1092:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1094:	f103 38ff 	add.w	r8, r3, #4294967295
        sz = 0;
    1098:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    109a:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    109c:	4283      	cmp	r3, r0
    109e:	d202      	bcs.n	10a6 <swap_run+0x4e>
                break;
            }
            first_trailer_idx--;
    10a0:	f108 38ff 	add.w	r8, r8, #4294967295
            sz += sector_sz;
    10a4:	e7f9      	b.n	109a <swap_run+0x42>
        }

        if (g_last_idx >= first_trailer_idx) {
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	4543      	cmp	r3, r8
    10aa:	d311      	bcc.n	10d0 <swap_run+0x78>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    10ac:	486c      	ldr	r0, [pc, #432]	; (1260 <swap_run+0x208>)
    10ae:	2157      	movs	r1, #87	; 0x57
    10b0:	f006 f883 	bl	71ba <z_log_minimal_printk>
            BOOT_LOG_WRN("required %d bytes but only %d are available",
    10b4:	683a      	ldr	r2, [r7, #0]
    10b6:	486b      	ldr	r0, [pc, #428]	; (1264 <swap_run+0x20c>)
    10b8:	fb08 f306 	mul.w	r3, r8, r6
    10bc:	fb02 6206 	mla	r2, r2, r6, r6
    10c0:	2157      	movs	r1, #87	; 0x57
    10c2:	f006 f87a 	bl	71ba <z_log_minimal_printk>
                         (g_last_idx + 1) * sector_sz ,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    10c6:	2301      	movs	r3, #1
    10c8:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    10ca:	b009      	add	sp, #36	; 0x24
    10cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    10d0:	a906      	add	r1, sp, #24
    10d2:	2002      	movs	r0, #2
    10d4:	f000 fcb8 	bl	1a48 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    10d8:	a907      	add	r1, sp, #28
    10da:	2005      	movs	r0, #5
    10dc:	f000 fcb4 	bl	1a48 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    10e0:	9a07      	ldr	r2, [sp, #28]
    10e2:	4621      	mov	r1, r4
    10e4:	4628      	mov	r0, r5
    10e6:	f7ff ff6b 	bl	fc0 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    10ea:	7963      	ldrb	r3, [r4, #5]
    10ec:	2b01      	cmp	r3, #1
    10ee:	d10b      	bne.n	1108 <swap_run+0xb0>
        idx = g_last_idx;
    10f0:	f8d7 8000 	ldr.w	r8, [r7]
    BOOT_STATUS_ASSERT(rc == 0);
    10f4:	f8df b170 	ldr.w	fp, [pc, #368]	; 1268 <swap_run+0x210>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    10f8:	683b      	ldr	r3, [r7, #0]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    10fa:	f8dd 9018 	ldr.w	r9, [sp, #24]
        while (idx > 0) {
    10fe:	f1b8 0f00 	cmp.w	r8, #0
    1102:	d111      	bne.n	1128 <swap_run+0xd0>
        bs->idx = BOOT_STATUS_IDX_0;
    1104:	2301      	movs	r3, #1
    1106:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1108:	2302      	movs	r3, #2
    110a:	7163      	strb	r3, [r4, #5]
    idx = 1;
    110c:	f04f 0801 	mov.w	r8, #1
    while (idx <= g_last_idx) {
    1110:	683b      	ldr	r3, [r7, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1112:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
    1116:	4598      	cmp	r8, r3
    1118:	d949      	bls.n	11ae <swap_run+0x156>
    flash_area_close(fap_pri);
    111a:	4650      	mov	r0, sl
    111c:	f006 f85a 	bl	71d4 <flash_area_close>
    flash_area_close(fap_sec);
    1120:	9807      	ldr	r0, [sp, #28]
    1122:	f006 f857 	bl	71d4 <flash_area_close>
    1126:	e7d0      	b.n	10ca <swap_run+0x72>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1128:	6822      	ldr	r2, [r4, #0]
    112a:	3301      	adds	r3, #1
    112c:	1a9b      	subs	r3, r3, r2
    112e:	4598      	cmp	r8, r3
    1130:	d83a      	bhi.n	11a8 <swap_run+0x150>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    1132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return fs->fs_off;
    1134:	6819      	ldr	r1, [r3, #0]
    1136:	f853 0038 	ldr.w	r0, [r3, r8, lsl #3]
    113a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
    113e:	2a01      	cmp	r2, #1
    1140:	f853 3c08 	ldr.w	r3, [r3, #-8]
    1144:	eba3 0301 	sub.w	r3, r3, r1
    1148:	eba0 0a01 	sub.w	sl, r0, r1
    114c:	9304      	str	r3, [sp, #16]
    114e:	d111      	bne.n	1174 <swap_run+0x11c>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1150:	9b07      	ldr	r3, [sp, #28]
    1152:	9303      	str	r3, [sp, #12]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1154:	68e3      	ldr	r3, [r4, #12]
    1156:	2b02      	cmp	r3, #2
    1158:	d008      	beq.n	116c <swap_run+0x114>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    115a:	4649      	mov	r1, r9
    115c:	4628      	mov	r0, r5
    115e:	f005 fd95 	bl	6c8c <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    1162:	4622      	mov	r2, r4
    1164:	4649      	mov	r1, r9
    1166:	4628      	mov	r0, r5
    1168:	f005 fdc6 	bl	6cf8 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    116c:	9903      	ldr	r1, [sp, #12]
    116e:	4628      	mov	r0, r5
    1170:	f005 fd8c 	bl	6c8c <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    1174:	4632      	mov	r2, r6
    1176:	4651      	mov	r1, sl
    1178:	4648      	mov	r0, r9
    117a:	f005 fd85 	bl	6c88 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    117e:	9b04      	ldr	r3, [sp, #16]
    1180:	464a      	mov	r2, r9
    1182:	4649      	mov	r1, r9
    1184:	e9cd a600 	strd	sl, r6, [sp]
    1188:	4628      	mov	r0, r5
    118a:	f7ff fc49 	bl	a20 <boot_copy_region>
    rc = boot_write_status(state, bs);
    118e:	4621      	mov	r1, r4
    1190:	4628      	mov	r0, r5
    1192:	f005 fd47 	bl	6c24 <boot_write_status>
    bs->idx++;
    1196:	6823      	ldr	r3, [r4, #0]
    1198:	3301      	adds	r3, #1
    119a:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    119c:	b120      	cbz	r0, 11a8 <swap_run+0x150>
    119e:	f8db 3000 	ldr.w	r3, [fp]
    11a2:	3301      	adds	r3, #1
    11a4:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    11a8:	f108 38ff 	add.w	r8, r8, #4294967295
    11ac:	e7a4      	b.n	10f8 <swap_run+0xa0>
        if (idx >= bs->idx) {
    11ae:	6823      	ldr	r3, [r4, #0]
    11b0:	4598      	cmp	r8, r3
    11b2:	d34e      	bcc.n	1252 <swap_run+0x1fa>
    11b4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
    11ba:	f852 1038 	ldr.w	r1, [r2, r8, lsl #3]
    11be:	9104      	str	r1, [sp, #16]
    11c0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    11c4:	3b08      	subs	r3, #8
    11c6:	6811      	ldr	r1, [r2, #0]
    11c8:	9103      	str	r1, [sp, #12]
    11ca:	58d1      	ldr	r1, [r2, r3]
    11cc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    11ce:	58d0      	ldr	r0, [r2, r3]
    11d0:	6813      	ldr	r3, [r2, #0]
    11d2:	eba0 0903 	sub.w	r9, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
    11d6:	7923      	ldrb	r3, [r4, #4]
    11d8:	2b01      	cmp	r3, #1
    11da:	d138      	bne.n	124e <swap_run+0x1f6>
    11dc:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    11de:	4632      	mov	r2, r6
    11e0:	1ac9      	subs	r1, r1, r3
    11e2:	4650      	mov	r0, sl
    11e4:	9105      	str	r1, [sp, #20]
    11e6:	f005 fd4f 	bl	6c88 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    11ea:	9905      	ldr	r1, [sp, #20]
    11ec:	9100      	str	r1, [sp, #0]
    11ee:	464b      	mov	r3, r9
    11f0:	4652      	mov	r2, sl
    11f2:	4659      	mov	r1, fp
    11f4:	9601      	str	r6, [sp, #4]
    11f6:	4628      	mov	r0, r5
    11f8:	f7ff fc12 	bl	a20 <boot_copy_region>
        rc = boot_write_status(state, bs);
    11fc:	4621      	mov	r1, r4
    11fe:	4628      	mov	r0, r5
    1200:	f005 fd10 	bl	6c24 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1204:	2302      	movs	r3, #2
    1206:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1208:	b118      	cbz	r0, 1212 <swap_run+0x1ba>
    120a:	4a17      	ldr	r2, [pc, #92]	; (1268 <swap_run+0x210>)
    120c:	6813      	ldr	r3, [r2, #0]
    120e:	3301      	adds	r3, #1
    1210:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    1212:	4632      	mov	r2, r6
    1214:	4649      	mov	r1, r9
    1216:	4658      	mov	r0, fp
    1218:	f005 fd36 	bl	6c88 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    121c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    1220:	4651      	mov	r1, sl
    1222:	1a9b      	subs	r3, r3, r2
    1224:	e9cd 9600 	strd	r9, r6, [sp]
    1228:	465a      	mov	r2, fp
    122a:	4628      	mov	r0, r5
    122c:	f7ff fbf8 	bl	a20 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1230:	4621      	mov	r1, r4
    1232:	4628      	mov	r0, r5
    1234:	f005 fcf6 	bl	6c24 <boot_write_status>
        bs->idx++;
    1238:	6823      	ldr	r3, [r4, #0]
    123a:	3301      	adds	r3, #1
    123c:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    123e:	2301      	movs	r3, #1
    1240:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1242:	b130      	cbz	r0, 1252 <swap_run+0x1fa>
    1244:	4a08      	ldr	r2, [pc, #32]	; (1268 <swap_run+0x210>)
    1246:	6813      	ldr	r3, [r2, #0]
    1248:	3301      	adds	r3, #1
    124a:	6013      	str	r3, [r2, #0]
    124c:	e001      	b.n	1252 <swap_run+0x1fa>
    if (bs->state == BOOT_STATUS_STATE_1) {
    124e:	2b02      	cmp	r3, #2
    1250:	d0df      	beq.n	1212 <swap_run+0x1ba>
        idx++;
    1252:	f108 0801 	add.w	r8, r8, #1
    1256:	e75b      	b.n	1110 <swap_run+0xb8>
    1258:	0000869d 	.word	0x0000869d
    125c:	20000004 	.word	0x20000004
    1260:	000086c6 	.word	0x000086c6
    1264:	000086f5 	.word	0x000086f5
    1268:	20000e34 	.word	0x20000e34

0000126c <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    126c:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    126e:	4d09      	ldr	r5, [pc, #36]	; (1294 <cc310_init+0x28>)
    1270:	782b      	ldrb	r3, [r5, #0]
    1272:	b10b      	cbz	r3, 1278 <cc310_init+0xc>
        }
        initialized = true;
        nrf_cc310_disable();
    }

    return 0;
    1274:	2000      	movs	r0, #0
}
    1276:	bd70      	pop	{r4, r5, r6, pc}
    NRF_CRYPTOCELL->ENABLE=1;
    1278:	4c07      	ldr	r4, [pc, #28]	; (1298 <cc310_init+0x2c>)
    127a:	2601      	movs	r6, #1
    127c:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        if (nrf_cc310_bl_init() != 0) {
    1280:	f004 fb1c 	bl	58bc <nrf_cc310_bl_init>
    1284:	b918      	cbnz	r0, 128e <cc310_init+0x22>
        initialized = true;
    1286:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    1288:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
}
    128c:	e7f2      	b.n	1274 <cc310_init+0x8>
            return -1;
    128e:	f04f 30ff 	mov.w	r0, #4294967295
    1292:	e7f0      	b.n	1276 <cc310_init+0xa>
    1294:	200010d0 	.word	0x200010d0
    1298:	5002a000 	.word	0x5002a000

0000129c <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRF_CRYPTOCELL->ENABLE=1;
    12a0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 12d4 <cc310_ecdsa_verify_secp256r1+0x38>
    12a4:	b0ac      	sub	sp, #176	; 0xb0
    12a6:	461f      	mov	r7, r3
    12a8:	4606      	mov	r6, r0
    12aa:	460c      	mov	r4, r1
    12ac:	4615      	mov	r5, r2
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    12ae:	f7ff ffdd 	bl	126c <cc310_init>
    12b2:	2301      	movs	r3, #1
    12b4:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    12b8:	462a      	mov	r2, r5
    12ba:	4633      	mov	r3, r6
    12bc:	9700      	str	r7, [sp, #0]
    12be:	4621      	mov	r1, r4
    12c0:	a803      	add	r0, sp, #12
    12c2:	f006 fc59 	bl	7b78 <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    12c6:	2300      	movs	r3, #0
    12c8:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    12cc:	b02c      	add	sp, #176	; 0xb0
    12ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12d2:	bf00      	nop
    12d4:	5002a000 	.word	0x5002a000

000012d8 <cleanup_arm_nvic>:
    12d8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    12dc:	b672      	cpsid	i
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    12de:	4b12      	ldr	r3, [pc, #72]	; (1328 <cleanup_arm_nvic+0x50>)
    12e0:	f04f 32ff 	mov.w	r2, #4294967295
    12e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    12e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    12ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    12f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    12f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    12f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    12fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1300:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1304:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1308:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    130c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1310:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1314:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1318:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    131c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1320:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	}
}
    1324:	4770      	bx	lr
    1326:	bf00      	nop
    1328:	e000e100 	.word	0xe000e100

0000132c <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    132c:	4a16      	ldr	r2, [pc, #88]	; (1388 <nrf_cleanup_peripheral+0x5c>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    132e:	f04f 33ff 	mov.w	r3, #4294967295
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1332:	2101      	movs	r1, #1
    1334:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1336:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    133a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    133e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    1342:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1344:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1348:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    134c:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
    1350:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1352:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1356:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    135a:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    135e:	2100      	movs	r1, #0
    1360:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1364:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1368:	f502 3218 	add.w	r2, r2, #155648	; 0x26000
    136c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1370:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    }
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable_all(NRF_PPI_Type * p_reg)
{
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
    1374:	f5a2 4210 	sub.w	r2, r2, #36864	; 0x9000
    1378:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    137c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1380:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1384:	4770      	bx	lr
    1386:	bf00      	nop
    1388:	4000b000 	.word	0x4000b000

0000138c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    138c:	4b01      	ldr	r3, [pc, #4]	; (1394 <char_out+0x8>)
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	4718      	bx	r3
    1392:	bf00      	nop
    1394:	20000008 	.word	0x20000008

00001398 <__printk_hook_install>:
	_char_out = fn;
    1398:	4b01      	ldr	r3, [pc, #4]	; (13a0 <__printk_hook_install+0x8>)
    139a:	6018      	str	r0, [r3, #0]
}
    139c:	4770      	bx	lr
    139e:	bf00      	nop
    13a0:	20000008 	.word	0x20000008

000013a4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    13a4:	b507      	push	{r0, r1, r2, lr}
    13a6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    13a8:	2100      	movs	r1, #0
    13aa:	4602      	mov	r2, r0
    13ac:	9100      	str	r1, [sp, #0]
    13ae:	4803      	ldr	r0, [pc, #12]	; (13bc <vprintk+0x18>)
    13b0:	f000 f914 	bl	15dc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    13b4:	b003      	add	sp, #12
    13b6:	f85d fb04 	ldr.w	pc, [sp], #4
    13ba:	bf00      	nop
    13bc:	0000138d 	.word	0x0000138d

000013c0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13c4:	8b05      	ldrh	r5, [r0, #24]
{
    13c6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13c8:	0728      	lsls	r0, r5, #28
{
    13ca:	4690      	mov	r8, r2
	if (processing) {
    13cc:	d411      	bmi.n	13f2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    13ce:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13d0:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    13d4:	f040 80cd 	bne.w	1572 <process_event+0x1b2>
			evt = process_recheck(mgr);
    13d8:	4620      	mov	r0, r4
    13da:	f005 fe13 	bl	7004 <process_recheck>
		}

		if (evt == EVT_NOP) {
    13de:	b178      	cbz	r0, 1400 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    13e0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13e2:	8b21      	ldrh	r1, [r4, #24]
    13e4:	2804      	cmp	r0, #4
    13e6:	d811      	bhi.n	140c <process_event+0x4c>
    13e8:	e8df f000 	tbb	[pc, r0]
    13ec:	856d10c3 	.word	0x856d10c3
    13f0:	95          	.byte	0x95
    13f1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    13f2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13f4:	bf0c      	ite	eq
    13f6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13fa:	f045 0520 	orrne.w	r5, r5, #32
    13fe:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1400:	f388 8811 	msr	BASEPRI, r8
    1404:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    140c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1410:	45aa      	cmp	sl, r5
    1412:	f000 80a6 	beq.w	1562 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1416:	2700      	movs	r7, #0
    1418:	46b9      	mov	r9, r7
    141a:	463e      	mov	r6, r7
    141c:	68a3      	ldr	r3, [r4, #8]
    141e:	2b00      	cmp	r3, #0
    1420:	f000 80bd 	beq.w	159e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1424:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1428:	8321      	strh	r1, [r4, #24]
    142a:	f388 8811 	msr	BASEPRI, r8
    142e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1432:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1434:	2900      	cmp	r1, #0
    1436:	f000 80bb 	beq.w	15b0 <process_event+0x1f0>
	return node->next;
    143a:	680d      	ldr	r5, [r1, #0]
    143c:	2900      	cmp	r1, #0
    143e:	f000 80b7 	beq.w	15b0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1442:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1446:	4633      	mov	r3, r6
    1448:	4652      	mov	r2, sl
    144a:	4620      	mov	r0, r4
    144c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    144e:	2d00      	cmp	r5, #0
    1450:	d076      	beq.n	1540 <process_event+0x180>
    1452:	682b      	ldr	r3, [r5, #0]
    1454:	4629      	mov	r1, r5
    1456:	461d      	mov	r5, r3
    1458:	e7f0      	b.n	143c <process_event+0x7c>
    145a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    145e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1460:	2a01      	cmp	r2, #1
    1462:	d81b      	bhi.n	149c <process_event+0xdc>
	list->head = NULL;
    1464:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1466:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    146a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    146c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    146e:	b289      	uxth	r1, r1
	list->tail = NULL;
    1470:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1474:	d109      	bne.n	148a <process_event+0xca>
    1476:	463b      	mov	r3, r7
    1478:	e003      	b.n	1482 <process_event+0xc2>
				mgr->refs += 1U;
    147a:	8b62      	ldrh	r2, [r4, #26]
    147c:	3201      	adds	r2, #1
    147e:	8362      	strh	r2, [r4, #26]
	return node->next;
    1480:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1482:	2b00      	cmp	r3, #0
    1484:	d1f9      	bne.n	147a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1486:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    148a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    148c:	4620      	mov	r0, r4
    148e:	f005 fdb9 	bl	7004 <process_recheck>
    1492:	2800      	cmp	r0, #0
    1494:	d07b      	beq.n	158e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1496:	f041 0120 	orr.w	r1, r1, #32
    149a:	e077      	b.n	158c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    149c:	2b04      	cmp	r3, #4
    149e:	d10a      	bne.n	14b6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a0:	f021 0107 	bic.w	r1, r1, #7
    14a4:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    14a6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14a8:	4620      	mov	r0, r4
    14aa:	f005 fdab 	bl	7004 <process_recheck>
    14ae:	b110      	cbz	r0, 14b6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14b0:	f041 0120 	orr.w	r1, r1, #32
    14b4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14b6:	8b21      	ldrh	r1, [r4, #24]
    14b8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    14bc:	45aa      	cmp	sl, r5
    14be:	d050      	beq.n	1562 <process_event+0x1a2>
    14c0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    14c2:	46b9      	mov	r9, r7
    14c4:	e7aa      	b.n	141c <process_event+0x5c>
			transit = mgr->transitions->start;
    14c6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14c8:	f021 0107 	bic.w	r1, r1, #7
    14cc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    14d0:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    14d2:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    14d6:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    14d8:	d12d      	bne.n	1536 <process_event+0x176>
		    || (transit != NULL)) {
    14da:	f1b9 0f00 	cmp.w	r9, #0
    14de:	d040      	beq.n	1562 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14e0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14e4:	8321      	strh	r1, [r4, #24]
    14e6:	f388 8811 	msr	BASEPRI, r8
    14ea:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    14ee:	493a      	ldr	r1, [pc, #232]	; (15d8 <process_event+0x218>)
    14f0:	4620      	mov	r0, r4
    14f2:	47c8      	blx	r9
    14f4:	e029      	b.n	154a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    14fa:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14fc:	f041 0104 	orr.w	r1, r1, #4
    1500:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1502:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1504:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1508:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    150a:	d0e6      	beq.n	14da <process_event+0x11a>
    150c:	2700      	movs	r7, #0
		res = 0;
    150e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1510:	f04f 0a04 	mov.w	sl, #4
    1514:	e782      	b.n	141c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1516:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    151a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    151c:	f041 0105 	orr.w	r1, r1, #5
    1520:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1522:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1524:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1528:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    152a:	d0d6      	beq.n	14da <process_event+0x11a>
    152c:	2700      	movs	r7, #0
		res = 0;
    152e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1530:	f04f 0a05 	mov.w	sl, #5
    1534:	e772      	b.n	141c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1536:	2700      	movs	r7, #0
		res = 0;
    1538:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    153a:	f04f 0a06 	mov.w	sl, #6
    153e:	e76d      	b.n	141c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1540:	462b      	mov	r3, r5
    1542:	e787      	b.n	1454 <process_event+0x94>
			if (transit != NULL) {
    1544:	f1b9 0f00 	cmp.w	r9, #0
    1548:	d1d1      	bne.n	14ee <process_event+0x12e>
	__asm__ volatile(
    154a:	f04f 0320 	mov.w	r3, #32
    154e:	f3ef 8811 	mrs	r8, BASEPRI
    1552:	f383 8812 	msr	BASEPRI_MAX, r3
    1556:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    155a:	8b23      	ldrh	r3, [r4, #24]
    155c:	f023 0308 	bic.w	r3, r3, #8
    1560:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1562:	8b25      	ldrh	r5, [r4, #24]
    1564:	06ea      	lsls	r2, r5, #27
    1566:	d52e      	bpl.n	15c6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1568:	f025 0310 	bic.w	r3, r5, #16
    156c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    156e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1572:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1574:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1576:	2e00      	cmp	r6, #0
    1578:	f6bf af6f 	bge.w	145a <process_event+0x9a>
	list->head = NULL;
    157c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    157e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1580:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1584:	f021 0107 	bic.w	r1, r1, #7
    1588:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    158c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    158e:	8b21      	ldrh	r1, [r4, #24]
    1590:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1594:	45aa      	cmp	sl, r5
    1596:	f04f 0900 	mov.w	r9, #0
    159a:	f47f af3f 	bne.w	141c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    159e:	2f00      	cmp	r7, #0
    15a0:	d09b      	beq.n	14da <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    15a2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    15a6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    15a8:	f388 8811 	msr	BASEPRI, r8
    15ac:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    15b0:	2f00      	cmp	r7, #0
    15b2:	d0c7      	beq.n	1544 <process_event+0x184>
	return node->next;
    15b4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    15b6:	4639      	mov	r1, r7
    15b8:	4633      	mov	r3, r6
    15ba:	4652      	mov	r2, sl
    15bc:	4620      	mov	r0, r4
    15be:	f005 fd4d 	bl	705c <notify_one>
	list->head = node;
    15c2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    15c4:	e7f4      	b.n	15b0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    15c6:	06ab      	lsls	r3, r5, #26
    15c8:	f57f af1a 	bpl.w	1400 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15cc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    15d0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    15d2:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    15d6:	e6ff      	b.n	13d8 <process_event+0x18>
    15d8:	00007089 	.word	0x00007089

000015dc <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    15dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15e0:	b08d      	sub	sp, #52	; 0x34
    15e2:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    15e4:	1e53      	subs	r3, r2, #1
{
    15e6:	4682      	mov	sl, r0
    15e8:	9101      	str	r1, [sp, #4]
	fmt--;
    15ea:	9303      	str	r3, [sp, #12]
	size_t count = 0;
    15ec:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
    15f0:	9b03      	ldr	r3, [sp, #12]
    15f2:	7858      	ldrb	r0, [r3, #1]
    15f4:	2825      	cmp	r0, #37	; 0x25
    15f6:	f103 0401 	add.w	r4, r3, #1
    15fa:	d119      	bne.n	1630 <z_cbvprintf_impl+0x54>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
    15fc:	461e      	mov	r6, r3
	special = 0;
    15fe:	2000      	movs	r0, #0
	precision = -1;
    1600:	f04f 38ff 	mov.w	r8, #4294967295
	for (fmt++ ; ; fmt++) {
    1604:	3602      	adds	r6, #2
	length_mod = 0;
    1606:	4603      	mov	r3, r0
	padding_mode = 0;
    1608:	9002      	str	r0, [sp, #8]
	min_width = -1;
    160a:	4644      	mov	r4, r8
		switch (*fmt) {
    160c:	7831      	ldrb	r1, [r6, #0]
    160e:	9603      	str	r6, [sp, #12]
    1610:	2939      	cmp	r1, #57	; 0x39
    1612:	d854      	bhi.n	16be <z_cbvprintf_impl+0xe2>
    1614:	291f      	cmp	r1, #31
    1616:	d814      	bhi.n	1642 <z_cbvprintf_impl+0x66>
    1618:	2900      	cmp	r1, #0
    161a:	f000 81ed 	beq.w	19f8 <z_cbvprintf_impl+0x41c>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    161e:	9901      	ldr	r1, [sp, #4]
    1620:	2025      	movs	r0, #37	; 0x25
    1622:	47d0      	blx	sl
			OUTC(*fmt);
    1624:	9901      	ldr	r1, [sp, #4]
    1626:	7830      	ldrb	r0, [r6, #0]
    1628:	47d0      	blx	sl
    162a:	f109 0902 	add.w	r9, r9, #2
			goto start;
    162e:	e7df      	b.n	15f0 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    1630:	2800      	cmp	r0, #0
    1632:	f000 81e1 	beq.w	19f8 <z_cbvprintf_impl+0x41c>
		OUTC(*fmt);
    1636:	9901      	ldr	r1, [sp, #4]
    1638:	47d0      	blx	sl
    163a:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    163e:	9403      	str	r4, [sp, #12]
    1640:	e7d6      	b.n	15f0 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    1642:	f1a1 0220 	sub.w	r2, r1, #32
    1646:	2a19      	cmp	r2, #25
    1648:	d8e9      	bhi.n	161e <z_cbvprintf_impl+0x42>
    164a:	a701      	add	r7, pc, #4	; (adr r7, 1650 <z_cbvprintf_impl+0x74>)
    164c:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1650:	000016b9 	.word	0x000016b9
    1654:	0000161f 	.word	0x0000161f
    1658:	0000161f 	.word	0x0000161f
    165c:	000016b9 	.word	0x000016b9
    1660:	0000161f 	.word	0x0000161f
    1664:	00001739 	.word	0x00001739
    1668:	0000161f 	.word	0x0000161f
    166c:	0000161f 	.word	0x0000161f
    1670:	0000161f 	.word	0x0000161f
    1674:	0000161f 	.word	0x0000161f
    1678:	00001785 	.word	0x00001785
    167c:	000016b9 	.word	0x000016b9
    1680:	0000161f 	.word	0x0000161f
    1684:	00001799 	.word	0x00001799
    1688:	00001745 	.word	0x00001745
    168c:	0000161f 	.word	0x0000161f
    1690:	00001753 	.word	0x00001753
    1694:	00001773 	.word	0x00001773
    1698:	00001773 	.word	0x00001773
    169c:	00001773 	.word	0x00001773
    16a0:	00001773 	.word	0x00001773
    16a4:	00001773 	.word	0x00001773
    16a8:	00001773 	.word	0x00001773
    16ac:	00001773 	.word	0x00001773
    16b0:	00001773 	.word	0x00001773
    16b4:	00001773 	.word	0x00001773
    16b8:	4608      	mov	r0, r1
    16ba:	3601      	adds	r6, #1
    16bc:	e7a6      	b.n	160c <z_cbvprintf_impl+0x30>
    16be:	2958      	cmp	r1, #88	; 0x58
    16c0:	f000 80eb 	beq.w	189a <z_cbvprintf_impl+0x2be>
    16c4:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    16c8:	b2d7      	uxtb	r7, r2
    16ca:	2f17      	cmp	r7, #23
    16cc:	d8a7      	bhi.n	161e <z_cbvprintf_impl+0x42>
    16ce:	2a17      	cmp	r2, #23
    16d0:	d8a5      	bhi.n	161e <z_cbvprintf_impl+0x42>
    16d2:	a701      	add	r7, pc, #4	; (adr r7, 16d8 <z_cbvprintf_impl+0xfc>)
    16d4:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    16d8:	00001941 	.word	0x00001941
    16dc:	000017bf 	.word	0x000017bf
    16e0:	0000161f 	.word	0x0000161f
    16e4:	0000161f 	.word	0x0000161f
    16e8:	0000161f 	.word	0x0000161f
    16ec:	0000179f 	.word	0x0000179f
    16f0:	000017bf 	.word	0x000017bf
    16f4:	0000161f 	.word	0x0000161f
    16f8:	0000161f 	.word	0x0000161f
    16fc:	0000179f 	.word	0x0000179f
    1700:	0000161f 	.word	0x0000161f
    1704:	0000161f 	.word	0x0000161f
    1708:	0000161f 	.word	0x0000161f
    170c:	00001875 	.word	0x00001875
    1710:	0000161f 	.word	0x0000161f
    1714:	0000161f 	.word	0x0000161f
    1718:	00001915 	.word	0x00001915
    171c:	0000161f 	.word	0x0000161f
    1720:	000017bf 	.word	0x000017bf
    1724:	0000161f 	.word	0x0000161f
    1728:	0000161f 	.word	0x0000161f
    172c:	00001875 	.word	0x00001875
    1730:	0000161f 	.word	0x0000161f
    1734:	0000179f 	.word	0x0000179f
			OUTC('%');
    1738:	9901      	ldr	r1, [sp, #4]
    173a:	2025      	movs	r0, #37	; 0x25
    173c:	47d0      	blx	sl
    173e:	f109 0901 	add.w	r9, r9, #1
			goto start;
    1742:	e755      	b.n	15f0 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1744:	9a02      	ldr	r2, [sp, #8]
    1746:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    174a:	9202      	str	r2, [sp, #8]
			precision = 0;
    174c:	f04f 0800 	mov.w	r8, #0
			continue;
    1750:	e7b3      	b.n	16ba <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1752:	2c00      	cmp	r4, #0
    1754:	da0d      	bge.n	1772 <z_cbvprintf_impl+0x196>
    1756:	f1b8 0f00 	cmp.w	r8, #0
    175a:	da0d      	bge.n	1778 <z_cbvprintf_impl+0x19c>
    175c:	9a02      	ldr	r2, [sp, #8]
    175e:	2a00      	cmp	r2, #0
    1760:	f000 8142 	beq.w	19e8 <z_cbvprintf_impl+0x40c>
				if (min_width < 0) {
    1764:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1768:	220a      	movs	r2, #10
    176a:	fb02 1404 	mla	r4, r2, r4, r1
    176e:	3c30      	subs	r4, #48	; 0x30
    1770:	e7a3      	b.n	16ba <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1772:	f1b8 0f00 	cmp.w	r8, #0
    1776:	dbf5      	blt.n	1764 <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1778:	220a      	movs	r2, #10
    177a:	fb02 1208 	mla	r2, r2, r8, r1
    177e:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    1782:	e79a      	b.n	16ba <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1784:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1788:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    178c:	f280 812e 	bge.w	19ec <z_cbvprintf_impl+0x410>
				if (min_width < 0) {
    1790:	2a00      	cmp	r2, #0
    1792:	f280 812d 	bge.w	19f0 <z_cbvprintf_impl+0x414>
					min_width = -min_width;
    1796:	4254      	negs	r4, r2
		switch (*fmt) {
    1798:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    179a:	9202      	str	r2, [sp, #8]
    179c:	e78d      	b.n	16ba <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    179e:	2968      	cmp	r1, #104	; 0x68
    17a0:	d103      	bne.n	17aa <z_cbvprintf_impl+0x1ce>
    17a2:	2b68      	cmp	r3, #104	; 0x68
    17a4:	d106      	bne.n	17b4 <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
    17a6:	2348      	movs	r3, #72	; 0x48
    17a8:	e787      	b.n	16ba <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    17aa:	296c      	cmp	r1, #108	; 0x6c
    17ac:	d102      	bne.n	17b4 <z_cbvprintf_impl+0x1d8>
    17ae:	2b6c      	cmp	r3, #108	; 0x6c
    17b0:	f000 8120 	beq.w	19f4 <z_cbvprintf_impl+0x418>
			} else if (length_mod == '\0') {
    17b4:	2b00      	cmp	r3, #0
    17b6:	f47f af32 	bne.w	161e <z_cbvprintf_impl+0x42>
		switch (*fmt) {
    17ba:	460b      	mov	r3, r1
    17bc:	e77d      	b.n	16ba <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    17be:	2b7a      	cmp	r3, #122	; 0x7a
    17c0:	d106      	bne.n	17d0 <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
    17c2:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    17c4:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    17c8:	d114      	bne.n	17f4 <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
    17ca:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    17ce:	e00c      	b.n	17ea <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
    17d0:	2b6c      	cmp	r3, #108	; 0x6c
    17d2:	d0f6      	beq.n	17c2 <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
    17d4:	2b4c      	cmp	r3, #76	; 0x4c
    17d6:	d1f4      	bne.n	17c2 <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
    17d8:	3507      	adds	r5, #7
    17da:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    17de:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    17e0:	e9d3 6b00 	ldrd	r6, fp, [r3]
    17e4:	f103 0508 	add.w	r5, r3, #8
				if (*fmt == 'u') {
    17e8:	d106      	bne.n	17f8 <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
    17ea:	2820      	cmp	r0, #32
    17ec:	d13b      	bne.n	1866 <z_cbvprintf_impl+0x28a>
				prefix = " ";
    17ee:	4f84      	ldr	r7, [pc, #528]	; (1a00 <z_cbvprintf_impl+0x424>)
				min_width--;
    17f0:	3c01      	subs	r4, #1
    17f2:	e009      	b.n	1808 <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
    17f4:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    17f8:	f1bb 0f00 	cmp.w	fp, #0
    17fc:	daf5      	bge.n	17ea <z_cbvprintf_impl+0x20e>
				d = -d;
    17fe:	4276      	negs	r6, r6
				prefix = "-";
    1800:	4f80      	ldr	r7, [pc, #512]	; (1a04 <z_cbvprintf_impl+0x428>)
				d = -d;
    1802:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1806:	3c01      	subs	r4, #1
	int i = 0;
    1808:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    180c:	9305      	str	r3, [sp, #20]
    180e:	2300      	movs	r3, #0
    1810:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1812:	4630      	mov	r0, r6
    1814:	4659      	mov	r1, fp
    1816:	220a      	movs	r2, #10
    1818:	2300      	movs	r3, #0
    181a:	f7fe fc71 	bl	100 <__aeabi_uldivmod>
    181e:	9b04      	ldr	r3, [sp, #16]
    1820:	468e      	mov	lr, r1
		buftop[--i] = c + '0';
    1822:	1e59      	subs	r1, r3, #1
    1824:	9104      	str	r1, [sp, #16]
    1826:	9905      	ldr	r1, [sp, #20]
    1828:	3230      	adds	r2, #48	; 0x30
    182a:	46b4      	mov	ip, r6
    182c:	f801 2d01 	strb.w	r2, [r1, #-1]!
	} while (num);
    1830:	f1bc 0f0a 	cmp.w	ip, #10
    1834:	465a      	mov	r2, fp
    1836:	f172 0200 	sbcs.w	r2, r2, #0
		buftop[--i] = c + '0';
    183a:	9105      	str	r1, [sp, #20]
		num /= base;
    183c:	4606      	mov	r6, r0
    183e:	46f3      	mov	fp, lr
	} while (num);
    1840:	d2e7      	bcs.n	1812 <z_cbvprintf_impl+0x236>
	return -i;
    1842:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1846:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1848:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    184c:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    1850:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1854:	da6d      	bge.n	1932 <z_cbvprintf_impl+0x356>
    1856:	9b02      	ldr	r3, [sp, #8]
    1858:	07d9      	lsls	r1, r3, #31
    185a:	d47c      	bmi.n	1956 <z_cbvprintf_impl+0x37a>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    185c:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1860:	eba4 040b 	sub.w	r4, r4, fp
    1864:	e013      	b.n	188e <z_cbvprintf_impl+0x2b2>
			} else if (special == '+') {
    1866:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1868:	bf0a      	itet	eq
    186a:	4f67      	ldreq	r7, [pc, #412]	; (1a08 <z_cbvprintf_impl+0x42c>)
	prefix = "";
    186c:	4f67      	ldrne	r7, [pc, #412]	; (1a0c <z_cbvprintf_impl+0x430>)
				min_width--;
    186e:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1872:	e7c9      	b.n	1808 <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
    1874:	2970      	cmp	r1, #112	; 0x70
    1876:	d10f      	bne.n	1898 <z_cbvprintf_impl+0x2bc>
				x = (uintptr_t)va_arg(ap, void *);
    1878:	f855 2b04 	ldr.w	r2, [r5], #4
    187c:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    187e:	b9fa      	cbnz	r2, 18c0 <z_cbvprintf_impl+0x2e4>
					data = "(nil)";
    1880:	4e63      	ldr	r6, [pc, #396]	; (1a10 <z_cbvprintf_impl+0x434>)
		min_width -= data_len;
    1882:	3c05      	subs	r4, #5
		precision -= data_len;
    1884:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1888:	f04f 0b05 	mov.w	fp, #5
	prefix = "";
    188c:	4f5f      	ldr	r7, [pc, #380]	; (1a0c <z_cbvprintf_impl+0x430>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    188e:	9a02      	ldr	r2, [sp, #8]
    1890:	0792      	lsls	r2, r2, #30
    1892:	d46f      	bmi.n	1974 <z_cbvprintf_impl+0x398>
    1894:	46a0      	mov	r8, r4
    1896:	e065      	b.n	1964 <z_cbvprintf_impl+0x388>
		switch (*fmt) {
    1898:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    189a:	2b6c      	cmp	r3, #108	; 0x6c
    189c:	d103      	bne.n	18a6 <z_cbvprintf_impl+0x2ca>
				x = va_arg(ap, unsigned int);
    189e:	f855 2b04 	ldr.w	r2, [r5], #4
    18a2:	2300      	movs	r3, #0
    18a4:	e008      	b.n	18b8 <z_cbvprintf_impl+0x2dc>
			} else if (length_mod == 'L') {
    18a6:	2b4c      	cmp	r3, #76	; 0x4c
    18a8:	d1f9      	bne.n	189e <z_cbvprintf_impl+0x2c2>
				unsigned long long llx =
    18aa:	3507      	adds	r5, #7
    18ac:	f025 0307 	bic.w	r3, r5, #7
    18b0:	461d      	mov	r5, r3
    18b2:	685b      	ldr	r3, [r3, #4]
    18b4:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    18b8:	2823      	cmp	r0, #35	; 0x23
    18ba:	d125      	bne.n	1908 <z_cbvprintf_impl+0x32c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18bc:	0688      	lsls	r0, r1, #26
    18be:	d521      	bpl.n	1904 <z_cbvprintf_impl+0x328>
    18c0:	4f54      	ldr	r7, [pc, #336]	; (1a14 <z_cbvprintf_impl+0x438>)
				min_width -= 2;
    18c2:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    18c4:	f001 0160 	and.w	r1, r1, #96	; 0x60
    18c8:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    18cc:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
    18d0:	2600      	movs	r6, #0
		unsigned int c = num % base;
    18d2:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    18d6:	2909      	cmp	r1, #9
			c += alpha;
    18d8:	bf88      	it	hi
    18da:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    18dc:	3130      	adds	r1, #48	; 0x30
    18de:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    18e2:	2a10      	cmp	r2, #16
		num /= base;
    18e4:	ea4f 1112 	mov.w	r1, r2, lsr #4
    18e8:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    18ec:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    18f0:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    18f4:	f106 3cff 	add.w	ip, r6, #4294967295
	} while (num);
    18f8:	d208      	bcs.n	190c <z_cbvprintf_impl+0x330>
	return -i;
    18fa:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    18fe:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1902:	e7a1      	b.n	1848 <z_cbvprintf_impl+0x26c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1904:	4f44      	ldr	r7, [pc, #272]	; (1a18 <z_cbvprintf_impl+0x43c>)
    1906:	e7dc      	b.n	18c2 <z_cbvprintf_impl+0x2e6>
	prefix = "";
    1908:	4f40      	ldr	r7, [pc, #256]	; (1a0c <z_cbvprintf_impl+0x430>)
    190a:	e7db      	b.n	18c4 <z_cbvprintf_impl+0x2e8>
		buftop[--i] = c + '0';
    190c:	4666      	mov	r6, ip
		num /= base;
    190e:	460a      	mov	r2, r1
    1910:	4603      	mov	r3, r0
    1912:	e7de      	b.n	18d2 <z_cbvprintf_impl+0x2f6>
			data = va_arg(ap, char *);
    1914:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    1918:	4630      	mov	r0, r6
    191a:	f005 fcea 	bl	72f2 <strlen>
			if (precision >= 0 && data_len > precision) {
    191e:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    1922:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1924:	db02      	blt.n	192c <z_cbvprintf_impl+0x350>
    1926:	4540      	cmp	r0, r8
    1928:	bfa8      	it	ge
    192a:	46c3      	movge	fp, r8
	prefix = "";
    192c:	4f37      	ldr	r7, [pc, #220]	; (1a0c <z_cbvprintf_impl+0x430>)
			precision = 0;
    192e:	f04f 0800 	mov.w	r8, #0
		precision -= data_len;
    1932:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    1936:	2b00      	cmp	r3, #0
    1938:	dd92      	ble.n	1860 <z_cbvprintf_impl+0x284>
			min_width -= precision;
    193a:	eba4 0408 	sub.w	r4, r4, r8
    193e:	e7a6      	b.n	188e <z_cbvprintf_impl+0x2b2>
			buf[0] = c;
    1940:	f855 3b04 	ldr.w	r3, [r5], #4
    1944:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1948:	3c01      	subs	r4, #1
		precision -= data_len;
    194a:	f04f 33ff 	mov.w	r3, #4294967295
			data_len = 1;
    194e:	f04f 0b01 	mov.w	fp, #1
			data = buf;
    1952:	ae06      	add	r6, sp, #24
    1954:	e79a      	b.n	188c <z_cbvprintf_impl+0x2b0>
    1956:	46a0      	mov	r8, r4
    1958:	e7eb      	b.n	1932 <z_cbvprintf_impl+0x356>
    195a:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    195c:	9901      	ldr	r1, [sp, #4]
    195e:	2020      	movs	r0, #32
    1960:	47d0      	blx	sl
    1962:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1964:	f1b8 0801 	subs.w	r8, r8, #1
    1968:	d5f7      	bpl.n	195a <z_cbvprintf_impl+0x37e>
    196a:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    196e:	3c01      	subs	r4, #1
    1970:	4491      	add	r9, r2
    1972:	1aa4      	subs	r4, r4, r2
    1974:	46b8      	mov	r8, r7
    1976:	e006      	b.n	1986 <z_cbvprintf_impl+0x3aa>
    1978:	9304      	str	r3, [sp, #16]
    197a:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    197c:	9901      	ldr	r1, [sp, #4]
    197e:	47d0      	blx	sl
    1980:	9a02      	ldr	r2, [sp, #8]
    1982:	9b04      	ldr	r3, [sp, #16]
    1984:	4690      	mov	r8, r2
		while (*prefix) {
    1986:	4642      	mov	r2, r8
    1988:	f812 0b01 	ldrb.w	r0, [r2], #1
    198c:	2800      	cmp	r0, #0
    198e:	d1f3      	bne.n	1978 <z_cbvprintf_impl+0x39c>
    1990:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1992:	3a01      	subs	r2, #1
    1994:	d515      	bpl.n	19c2 <z_cbvprintf_impl+0x3e6>
    1996:	2b00      	cmp	r3, #0
    1998:	bfac      	ite	ge
    199a:	ebc7 0703 	rsbge	r7, r7, r3
    199e:	427f      	neglt	r7, r7
    19a0:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    19a2:	3b01      	subs	r3, #1
    19a4:	d515      	bpl.n	19d2 <z_cbvprintf_impl+0x3f6>
    19a6:	f1bb 0f00 	cmp.w	fp, #0
    19aa:	bfa8      	it	ge
    19ac:	445f      	addge	r7, fp
    19ae:	444f      	add	r7, r9
    19b0:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    19b2:	3e01      	subs	r6, #1
    19b4:	d514      	bpl.n	19e0 <z_cbvprintf_impl+0x404>
    19b6:	2c00      	cmp	r4, #0
    19b8:	bfa8      	it	ge
    19ba:	193f      	addge	r7, r7, r4
    19bc:	eb07 0908 	add.w	r9, r7, r8
    19c0:	e616      	b.n	15f0 <z_cbvprintf_impl+0x14>
    19c2:	9304      	str	r3, [sp, #16]
    19c4:	9202      	str	r2, [sp, #8]
			OUTC('0');
    19c6:	9901      	ldr	r1, [sp, #4]
    19c8:	2030      	movs	r0, #48	; 0x30
    19ca:	47d0      	blx	sl
    19cc:	9b04      	ldr	r3, [sp, #16]
    19ce:	9a02      	ldr	r2, [sp, #8]
    19d0:	e7df      	b.n	1992 <z_cbvprintf_impl+0x3b6>
    19d2:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    19d4:	9901      	ldr	r1, [sp, #4]
    19d6:	f816 0b01 	ldrb.w	r0, [r6], #1
    19da:	47d0      	blx	sl
    19dc:	9b02      	ldr	r3, [sp, #8]
    19de:	e7e0      	b.n	19a2 <z_cbvprintf_impl+0x3c6>
			OUTC(' ');
    19e0:	9901      	ldr	r1, [sp, #4]
    19e2:	2020      	movs	r0, #32
    19e4:	47d0      	blx	sl
    19e6:	e7e4      	b.n	19b2 <z_cbvprintf_impl+0x3d6>
				padding_mode = PAD_ZERO;
    19e8:	2201      	movs	r2, #1
    19ea:	e6d6      	b.n	179a <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    19ec:	4690      	mov	r8, r2
    19ee:	e664      	b.n	16ba <z_cbvprintf_impl+0xde>
    19f0:	4614      	mov	r4, r2
    19f2:	e662      	b.n	16ba <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    19f4:	234c      	movs	r3, #76	; 0x4c
    19f6:	e660      	b.n	16ba <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    19f8:	4648      	mov	r0, r9
    19fa:	b00d      	add	sp, #52	; 0x34
    19fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a00:	00008b37 	.word	0x00008b37
    1a04:	00008792 	.word	0x00008792
    1a08:	00008794 	.word	0x00008794
    1a0c:	0000910d 	.word	0x0000910d
    1a10:	0000879c 	.word	0x0000879c
    1a14:	00008796 	.word	0x00008796
    1a18:	00008799 	.word	0x00008799

00001a1c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1a1c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1a1e:	f04f 0220 	mov.w	r2, #32
    1a22:	f3ef 8311 	mrs	r3, BASEPRI
    1a26:	f382 8812 	msr	BASEPRI_MAX, r2
    1a2a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1a2e:	f000 fccb 	bl	23c8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1a32:	4803      	ldr	r0, [pc, #12]	; (1a40 <sys_reboot+0x24>)
    1a34:	f005 fad9 	bl	6fea <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1a38:	f000 f86a 	bl	1b10 <arch_cpu_idle>
    1a3c:	e7fc      	b.n	1a38 <sys_reboot+0x1c>
    1a3e:	bf00      	nop
    1a40:	000087a2 	.word	0x000087a2

00001a44 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1a44:	f002 b956 	b.w	3cf4 <SystemInit>

00001a48 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1a48:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1a4a:	4b11      	ldr	r3, [pc, #68]	; (1a90 <flash_area_open+0x48>)
    1a4c:	681c      	ldr	r4, [r3, #0]
{
    1a4e:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1a50:	b1dc      	cbz	r4, 1a8a <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1a52:	4b10      	ldr	r3, [pc, #64]	; (1a94 <flash_area_open+0x4c>)
    1a54:	6819      	ldr	r1, [r3, #0]
    1a56:	2300      	movs	r3, #0
    1a58:	428b      	cmp	r3, r1
    1a5a:	db02      	blt.n	1a62 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1a5c:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1a60:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1a62:	4622      	mov	r2, r4
    1a64:	f812 6b10 	ldrb.w	r6, [r2], #16
    1a68:	4286      	cmp	r6, r0
    1a6a:	d002      	beq.n	1a72 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1a6c:	3301      	adds	r3, #1
    1a6e:	4614      	mov	r4, r2
    1a70:	e7f2      	b.n	1a58 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1a72:	68e0      	ldr	r0, [r4, #12]
    1a74:	b910      	cbnz	r0, 1a7c <flash_area_open+0x34>
		return -ENODEV;
    1a76:	f06f 0012 	mvn.w	r0, #18
    1a7a:	e7f1      	b.n	1a60 <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1a7c:	f006 f862 	bl	7b44 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1a80:	2800      	cmp	r0, #0
    1a82:	d0f8      	beq.n	1a76 <flash_area_open+0x2e>
	*fap = area;
    1a84:	602c      	str	r4, [r5, #0]
	return 0;
    1a86:	2000      	movs	r0, #0
    1a88:	e7ea      	b.n	1a60 <flash_area_open+0x18>
		return -EACCES;
    1a8a:	f06f 000c 	mvn.w	r0, #12
    1a8e:	e7e7      	b.n	1a60 <flash_area_open+0x18>
    1a90:	2000000c 	.word	0x2000000c
    1a94:	00007f18 	.word	0x00007f18

00001a98 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1a98:	b570      	push	{r4, r5, r6, lr}
    1a9a:	b088      	sub	sp, #32
    1a9c:	4605      	mov	r5, r0
    1a9e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1aa0:	b2c0      	uxtb	r0, r0
    1aa2:	4669      	mov	r1, sp
{
    1aa4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1aa6:	f7ff ffcf 	bl	1a48 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1aaa:	2800      	cmp	r0, #0
    1aac:	db1b      	blt.n	1ae6 <flash_area_get_sectors+0x4e>
    1aae:	9800      	ldr	r0, [sp, #0]
    1ab0:	b1c8      	cbz	r0, 1ae6 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1ab2:	6843      	ldr	r3, [r0, #4]
    1ab4:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1ab6:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    1ab8:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
    1aba:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1abc:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1ac0:	2300      	movs	r3, #0
	cb_data->status = 0;
    1ac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1ac6:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1ac8:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1aca:	f005 fb83 	bl	71d4 <flash_area_close>
	if (flash_dev == NULL) {
    1ace:	b16d      	cbz	r5, 1aec <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1ad0:	4628      	mov	r0, r5
    1ad2:	4908      	ldr	r1, [pc, #32]	; (1af4 <flash_area_get_sectors+0x5c>)
    1ad4:	aa01      	add	r2, sp, #4
    1ad6:	f005 fdb2 	bl	763e <flash_page_foreach>
	if (cb_data->status == 0) {
    1ada:	9807      	ldr	r0, [sp, #28]
    1adc:	b908      	cbnz	r0, 1ae2 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1ade:	9b05      	ldr	r3, [sp, #20]
    1ae0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1ae2:	b008      	add	sp, #32
    1ae4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1ae6:	f06f 0015 	mvn.w	r0, #21
    1aea:	e7fa      	b.n	1ae2 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1aec:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1af0:	e7f7      	b.n	1ae2 <flash_area_get_sectors+0x4a>
    1af2:	bf00      	nop
    1af4:	00007273 	.word	0x00007273

00001af8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1af8:	4801      	ldr	r0, [pc, #4]	; (1b00 <nrf_cc3xx_platform_abort_init+0x8>)
    1afa:	f003 bb85 	b.w	5208 <nrf_cc3xx_platform_set_abort>
    1afe:	bf00      	nop
    1b00:	00007f7c 	.word	0x00007f7c

00001b04 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1b04:	4901      	ldr	r1, [pc, #4]	; (1b0c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1b06:	2210      	movs	r2, #16
	str	r2, [r1]
    1b08:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1b0a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1b0c:	e000ed10 	.word	0xe000ed10

00001b10 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1b10:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1b12:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1b14:	f380 8811 	msr	BASEPRI, r0
	isb
    1b18:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1b1c:	f3bf 8f4f 	dsb	sy
    1b20:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1b22:	b662      	cpsie	i
	isb
    1b24:	f3bf 8f6f 	isb	sy

	bx	lr
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop

00001b2c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1b2c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1b2e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1b30:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1b34:	f3bf 8f4f 	dsb	sy
    1b38:	bf20      	wfe

	msr	BASEPRI, r0
    1b3a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1b3e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1b40:	4770      	bx	lr
    1b42:	bf00      	nop

00001b44 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1b46:	4605      	mov	r5, r0

	if (esf != NULL) {
    1b48:	460c      	mov	r4, r1
    1b4a:	b1c9      	cbz	r1, 1b80 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1b4c:	688b      	ldr	r3, [r1, #8]
    1b4e:	9300      	str	r3, [sp, #0]
    1b50:	e9d1 2300 	ldrd	r2, r3, [r1]
    1b54:	480e      	ldr	r0, [pc, #56]	; (1b90 <z_arm_fatal_error+0x4c>)
    1b56:	2145      	movs	r1, #69	; 0x45
    1b58:	f005 fb2f 	bl	71ba <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1b5c:	6963      	ldr	r3, [r4, #20]
    1b5e:	9300      	str	r3, [sp, #0]
    1b60:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1b64:	480b      	ldr	r0, [pc, #44]	; (1b94 <z_arm_fatal_error+0x50>)
    1b66:	2145      	movs	r1, #69	; 0x45
    1b68:	f005 fb27 	bl	71ba <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1b6c:	69e2      	ldr	r2, [r4, #28]
    1b6e:	480a      	ldr	r0, [pc, #40]	; (1b98 <z_arm_fatal_error+0x54>)
    1b70:	2145      	movs	r1, #69	; 0x45
    1b72:	f005 fb22 	bl	71ba <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1b76:	69a2      	ldr	r2, [r4, #24]
    1b78:	4808      	ldr	r0, [pc, #32]	; (1b9c <z_arm_fatal_error+0x58>)
    1b7a:	2145      	movs	r1, #69	; 0x45
    1b7c:	f005 fb1d 	bl	71ba <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1b80:	4621      	mov	r1, r4
    1b82:	4628      	mov	r0, r5
}
    1b84:	b003      	add	sp, #12
    1b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1b8a:	f003 b971 	b.w	4e70 <z_fatal_error>
    1b8e:	bf00      	nop
    1b90:	000087cb 	.word	0x000087cb
    1b94:	000087ff 	.word	0x000087ff
    1b98:	00008833 	.word	0x00008833
    1b9c:	00008847 	.word	0x00008847

00001ba0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1ba0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ba2:	2800      	cmp	r0, #0
    1ba4:	db07      	blt.n	1bb6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ba6:	4a04      	ldr	r2, [pc, #16]	; (1bb8 <arch_irq_enable+0x18>)
    1ba8:	0941      	lsrs	r1, r0, #5
    1baa:	2301      	movs	r3, #1
    1bac:	f000 001f 	and.w	r0, r0, #31
    1bb0:	4083      	lsls	r3, r0
    1bb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1bb6:	4770      	bx	lr
    1bb8:	e000e100 	.word	0xe000e100

00001bbc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1bbc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1bbe:	2800      	cmp	r0, #0
    1bc0:	db0c      	blt.n	1bdc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bc2:	0943      	lsrs	r3, r0, #5
    1bc4:	4906      	ldr	r1, [pc, #24]	; (1be0 <arch_irq_disable+0x24>)
    1bc6:	f000 001f 	and.w	r0, r0, #31
    1bca:	3320      	adds	r3, #32
    1bcc:	2201      	movs	r2, #1
    1bce:	4082      	lsls	r2, r0
    1bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bd8:	f3bf 8f6f 	isb	sy
}
    1bdc:	4770      	bx	lr
    1bde:	bf00      	nop
    1be0:	e000e100 	.word	0xe000e100

00001be4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1be4:	4b05      	ldr	r3, [pc, #20]	; (1bfc <arch_irq_is_enabled+0x18>)
    1be6:	0942      	lsrs	r2, r0, #5
    1be8:	f000 001f 	and.w	r0, r0, #31
    1bec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1bf0:	2301      	movs	r3, #1
    1bf2:	fa03 f000 	lsl.w	r0, r3, r0
}
    1bf6:	4010      	ands	r0, r2
    1bf8:	4770      	bx	lr
    1bfa:	bf00      	nop
    1bfc:	e000e100 	.word	0xe000e100

00001c00 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c00:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1c02:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c04:	bfa8      	it	ge
    1c06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1c0a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c0e:	bfb8      	it	lt
    1c10:	4b06      	ldrlt	r3, [pc, #24]	; (1c2c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c12:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1c16:	bfac      	ite	ge
    1c18:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c1c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c20:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c22:	bfb4      	ite	lt
    1c24:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c26:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    1c2a:	4770      	bx	lr
    1c2c:	e000ed14 	.word	0xe000ed14

00001c30 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1c30:	bf30      	wfi
    b z_SysNmiOnReset
    1c32:	f7ff bffd 	b.w	1c30 <z_SysNmiOnReset>
    1c36:	bf00      	nop

00001c38 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c38:	4a14      	ldr	r2, [pc, #80]	; (1c8c <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1c3a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c3c:	4b14      	ldr	r3, [pc, #80]	; (1c90 <z_arm_prep_c+0x58>)
    1c3e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1c42:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c48:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c50:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1c58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    1c64:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1c68:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    1c6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c70:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    1c74:	2300      	movs	r3, #0
    1c76:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1c7a:	f003 f971 	bl	4f60 <z_bss_zero>
	z_data_copy();
    1c7e:	f003 f9b7 	bl	4ff0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1c82:	f000 fa61 	bl	2148 <z_arm_interrupt_init>
	z_cstart();
    1c86:	f003 f977 	bl	4f78 <z_cstart>
    1c8a:	bf00      	nop
    1c8c:	00000000 	.word	0x00000000
    1c90:	e000ed00 	.word	0xe000ed00

00001c94 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1c94:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1c98:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1c9a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1c9e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1ca2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1ca4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1ca8:	2902      	cmp	r1, #2
    beq _oops
    1caa:	d0ff      	beq.n	1cac <_oops>

00001cac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1cac:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1cae:	f005 fb07 	bl	72c0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1cb2:	bd01      	pop	{r0, pc}

00001cb4 <z_check_thread_stack_fail>:
			fault_addr, psp)) {
		/* Thread stack corruption */
		return thread->stack_info.start;
	}
#else
	if (IS_MPU_GUARD_VIOLATION((uint32_t)z_main_stack,
    1cb4:	f110 0f16 	cmn.w	r0, #22
    1cb8:	4b07      	ldr	r3, [pc, #28]	; (1cd8 <z_check_thread_stack_fail+0x24>)
    1cba:	d008      	beq.n	1cce <z_check_thread_stack_fail+0x1a>
    1cbc:	4298      	cmp	r0, r3
    1cbe:	d308      	bcc.n	1cd2 <z_check_thread_stack_fail+0x1e>
    1cc0:	3340      	adds	r3, #64	; 0x40
    1cc2:	4283      	cmp	r3, r0
    1cc4:	d905      	bls.n	1cd2 <z_check_thread_stack_fail+0x1e>
    1cc6:	428b      	cmp	r3, r1
    1cc8:	d903      	bls.n	1cd2 <z_check_thread_stack_fail+0x1e>
			guard_len,
			fault_addr, psp)) {
		/* Thread stack corruption */
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
    1cca:	4804      	ldr	r0, [pc, #16]	; (1cdc <z_check_thread_stack_fail+0x28>)
    1ccc:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION((uint32_t)z_main_stack,
    1cce:	3340      	adds	r3, #64	; 0x40
    1cd0:	e7f9      	b.n	1cc6 <z_check_thread_stack_fail+0x12>
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1cd2:	2000      	movs	r0, #0
}
    1cd4:	4770      	bx	lr
    1cd6:	bf00      	nop
    1cd8:	20001d40 	.word	0x20001d40
    1cdc:	20001d80 	.word	0x20001d80

00001ce0 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    1ce0:	4604      	mov	r4, r0
    1ce2:	4608      	mov	r0, r1
    1ce4:	4611      	mov	r1, r2
    1ce6:	461a      	mov	r2, r3
    1ce8:	2300      	movs	r3, #0
    1cea:	eee1 3a10 	vmsr	fpscr, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    1cee:	4b08      	ldr	r3, [pc, #32]	; (1d10 <loop+0x2>)
    1cf0:	2520      	movs	r5, #32
    1cf2:	f383 8809 	msr	PSP, r3
    1cf6:	b663      	cpsie	if
    1cf8:	f04f 0300 	mov.w	r3, #0
    1cfc:	f383 8811 	msr	BASEPRI, r3
    1d00:	f3bf 8f6f 	isb	sy
    1d04:	47a0      	blx	r4
    1d06:	f385 8811 	msr	BASEPRI, r5
    1d0a:	f3bf 8f6f 	isb	sy

00001d0e <loop>:
    1d0e:	e7fe      	b.n	1d0e <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1d10:	20004580 	.word	0x20004580

00001d14 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1d14:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1d16:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d1a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d1e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1d22:	4904      	ldr	r1, [pc, #16]	; (1d34 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d24:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d26:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d28:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d2e:	4902      	ldr	r1, [pc, #8]	; (1d38 <_isr_wrapper+0x24>)
	bx r1
    1d30:	4708      	bx	r1
    1d32:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1d34:	00007cd0 	.word	0x00007cd0
	ldr r1, =z_arm_int_exit
    1d38:	00001d3d 	.word	0x00001d3d

00001d3c <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1d3c:	4770      	bx	lr
    1d3e:	bf00      	nop

00001d40 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1d44:	4c32      	ldr	r4, [pc, #200]	; (1e10 <mem_manage_fault+0xd0>)
{
    1d46:	4607      	mov	r7, r0
    1d48:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1d4a:	4832      	ldr	r0, [pc, #200]	; (1e14 <mem_manage_fault+0xd4>)
    1d4c:	2145      	movs	r1, #69	; 0x45
{
    1d4e:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    1d50:	f005 fa33 	bl	71ba <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d56:	06de      	lsls	r6, r3, #27
    1d58:	d503      	bpl.n	1d62 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1d5a:	482f      	ldr	r0, [pc, #188]	; (1e18 <mem_manage_fault+0xd8>)
    1d5c:	2145      	movs	r1, #69	; 0x45
    1d5e:	f005 fa2c 	bl	71ba <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1d62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d64:	0718      	lsls	r0, r3, #28
    1d66:	d503      	bpl.n	1d70 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    1d68:	482c      	ldr	r0, [pc, #176]	; (1e1c <mem_manage_fault+0xdc>)
    1d6a:	2145      	movs	r1, #69	; 0x45
    1d6c:	f005 fa25 	bl	71ba <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1d70:	4c27      	ldr	r4, [pc, #156]	; (1e10 <mem_manage_fault+0xd0>)
    1d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d74:	0799      	lsls	r1, r3, #30
    1d76:	d428      	bmi.n	1dca <mem_manage_fault+0x8a>
	uint32_t mmfar = -EINVAL;
    1d78:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1d7c:	4c24      	ldr	r4, [pc, #144]	; (1e10 <mem_manage_fault+0xd0>)
    1d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d80:	07db      	lsls	r3, r3, #31
    1d82:	d503      	bpl.n	1d8c <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    1d84:	4826      	ldr	r0, [pc, #152]	; (1e20 <mem_manage_fault+0xe0>)
    1d86:	2145      	movs	r1, #69	; 0x45
    1d88:	f005 fa17 	bl	71ba <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d8e:	069c      	lsls	r4, r3, #26
    1d90:	d503      	bpl.n	1d9a <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    1d92:	4824      	ldr	r0, [pc, #144]	; (1e24 <mem_manage_fault+0xe4>)
    1d94:	2145      	movs	r1, #69	; 0x45
    1d96:	f005 fa10 	bl	71ba <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d9a:	4c1d      	ldr	r4, [pc, #116]	; (1e10 <mem_manage_fault+0xd0>)
    1d9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d9e:	06d8      	lsls	r0, r3, #27
    1da0:	d428      	bmi.n	1df4 <mem_manage_fault+0xb4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1da2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1da4:	0799      	lsls	r1, r3, #30
    1da6:	d425      	bmi.n	1df4 <mem_manage_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1da8:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1dac:	4a18      	ldr	r2, [pc, #96]	; (1e10 <mem_manage_fault+0xd0>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1dae:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1db0:	bf42      	ittt	mi
    1db2:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    1db4:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    1db8:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1dba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1dbc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1dc0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1dc2:	2300      	movs	r3, #0
    1dc4:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    1dca:	4817      	ldr	r0, [pc, #92]	; (1e28 <mem_manage_fault+0xe8>)
    1dcc:	2145      	movs	r1, #69	; 0x45
    1dce:	f005 f9f4 	bl	71ba <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1dd2:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1dd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dd6:	061a      	lsls	r2, r3, #24
    1dd8:	d5ce      	bpl.n	1d78 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1dda:	4814      	ldr	r0, [pc, #80]	; (1e2c <mem_manage_fault+0xec>)
    1ddc:	4632      	mov	r2, r6
    1dde:	2145      	movs	r1, #69	; 0x45
    1de0:	f005 f9eb 	bl	71ba <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1de4:	f1b8 0f00 	cmp.w	r8, #0
    1de8:	d0c8      	beq.n	1d7c <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1df0:	62a3      	str	r3, [r4, #40]	; 0x28
    1df2:	e7c3      	b.n	1d7c <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1df4:	6863      	ldr	r3, [r4, #4]
    1df6:	051a      	lsls	r2, r3, #20
    1df8:	d5d6      	bpl.n	1da8 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1dfa:	4639      	mov	r1, r7
    1dfc:	4630      	mov	r0, r6
    1dfe:	f7ff ff59 	bl	1cb4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1e02:	2800      	cmp	r0, #0
    1e04:	d0d0      	beq.n	1da8 <mem_manage_fault+0x68>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1e06:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1e0a:	2002      	movs	r0, #2
    1e0c:	e7cd      	b.n	1daa <mem_manage_fault+0x6a>
    1e0e:	bf00      	nop
    1e10:	e000ed00 	.word	0xe000ed00
    1e14:	0000887a 	.word	0x0000887a
    1e18:	00008895 	.word	0x00008895
    1e1c:	000088cd 	.word	0x000088cd
    1e20:	0000891d 	.word	0x0000891d
    1e24:	00008941 	.word	0x00008941
    1e28:	000088e5 	.word	0x000088e5
    1e2c:	00008902 	.word	0x00008902

00001e30 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1e30:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e32:	4c1d      	ldr	r4, [pc, #116]	; (1ea8 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1e34:	481d      	ldr	r0, [pc, #116]	; (1eac <usage_fault.constprop.0+0x7c>)
    1e36:	2145      	movs	r1, #69	; 0x45
    1e38:	f005 f9bf 	bl	71ba <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e3e:	019b      	lsls	r3, r3, #6
    1e40:	d503      	bpl.n	1e4a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1e42:	481b      	ldr	r0, [pc, #108]	; (1eb0 <usage_fault.constprop.0+0x80>)
    1e44:	2145      	movs	r1, #69	; 0x45
    1e46:	f005 f9b8 	bl	71ba <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e4c:	01dc      	lsls	r4, r3, #7
    1e4e:	d503      	bpl.n	1e58 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1e50:	4818      	ldr	r0, [pc, #96]	; (1eb4 <usage_fault.constprop.0+0x84>)
    1e52:	2145      	movs	r1, #69	; 0x45
    1e54:	f005 f9b1 	bl	71ba <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e58:	4c13      	ldr	r4, [pc, #76]	; (1ea8 <usage_fault.constprop.0+0x78>)
    1e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e5c:	0318      	lsls	r0, r3, #12
    1e5e:	d503      	bpl.n	1e68 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    1e60:	4815      	ldr	r0, [pc, #84]	; (1eb8 <usage_fault.constprop.0+0x88>)
    1e62:	2145      	movs	r1, #69	; 0x45
    1e64:	f005 f9a9 	bl	71ba <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e6a:	0359      	lsls	r1, r3, #13
    1e6c:	d503      	bpl.n	1e76 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1e6e:	4813      	ldr	r0, [pc, #76]	; (1ebc <usage_fault.constprop.0+0x8c>)
    1e70:	2145      	movs	r1, #69	; 0x45
    1e72:	f005 f9a2 	bl	71ba <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e76:	4c0c      	ldr	r4, [pc, #48]	; (1ea8 <usage_fault.constprop.0+0x78>)
    1e78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e7a:	039a      	lsls	r2, r3, #14
    1e7c:	d503      	bpl.n	1e86 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1e7e:	4810      	ldr	r0, [pc, #64]	; (1ec0 <usage_fault.constprop.0+0x90>)
    1e80:	2145      	movs	r1, #69	; 0x45
    1e82:	f005 f99a 	bl	71ba <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e88:	03db      	lsls	r3, r3, #15
    1e8a:	d503      	bpl.n	1e94 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1e8c:	480d      	ldr	r0, [pc, #52]	; (1ec4 <usage_fault.constprop.0+0x94>)
    1e8e:	2145      	movs	r1, #69	; 0x45
    1e90:	f005 f993 	bl	71ba <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1e94:	4a04      	ldr	r2, [pc, #16]	; (1ea8 <usage_fault.constprop.0+0x78>)
    1e96:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e98:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1e9c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1ea0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1ea2:	2000      	movs	r0, #0
    1ea4:	bd10      	pop	{r4, pc}
    1ea6:	bf00      	nop
    1ea8:	e000ed00 	.word	0xe000ed00
    1eac:	00008975 	.word	0x00008975
    1eb0:	00008992 	.word	0x00008992
    1eb4:	000089aa 	.word	0x000089aa
    1eb8:	000089c9 	.word	0x000089c9
    1ebc:	000089ec 	.word	0x000089ec
    1ec0:	00008a16 	.word	0x00008a16
    1ec4:	00008a35 	.word	0x00008a35

00001ec8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1ec8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1eca:	4c23      	ldr	r4, [pc, #140]	; (1f58 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1ecc:	4606      	mov	r6, r0
    1ece:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1ed0:	4822      	ldr	r0, [pc, #136]	; (1f5c <bus_fault.constprop.0+0x94>)
    1ed2:	2145      	movs	r1, #69	; 0x45
    1ed4:	f005 f971 	bl	71ba <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1ed8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eda:	04d9      	lsls	r1, r3, #19
    1edc:	d503      	bpl.n	1ee6 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1ede:	4820      	ldr	r0, [pc, #128]	; (1f60 <bus_fault.constprop.0+0x98>)
    1ee0:	2145      	movs	r1, #69	; 0x45
    1ee2:	f005 f96a 	bl	71ba <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ee8:	051a      	lsls	r2, r3, #20
    1eea:	d503      	bpl.n	1ef4 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1eec:	481d      	ldr	r0, [pc, #116]	; (1f64 <bus_fault.constprop.0+0x9c>)
    1eee:	2145      	movs	r1, #69	; 0x45
    1ef0:	f005 f963 	bl	71ba <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1ef4:	4c18      	ldr	r4, [pc, #96]	; (1f58 <bus_fault.constprop.0+0x90>)
    1ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ef8:	059b      	lsls	r3, r3, #22
    1efa:	d510      	bpl.n	1f1e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1efc:	481a      	ldr	r0, [pc, #104]	; (1f68 <bus_fault.constprop.0+0xa0>)
    1efe:	2145      	movs	r1, #69	; 0x45
    1f00:	f005 f95b 	bl	71ba <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1f04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f08:	0418      	lsls	r0, r3, #16
    1f0a:	d508      	bpl.n	1f1e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1f0c:	4817      	ldr	r0, [pc, #92]	; (1f6c <bus_fault.constprop.0+0xa4>)
    1f0e:	2145      	movs	r1, #69	; 0x45
    1f10:	f005 f953 	bl	71ba <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1f14:	b11e      	cbz	r6, 1f1e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1f1c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1f1e:	4c0e      	ldr	r4, [pc, #56]	; (1f58 <bus_fault.constprop.0+0x90>)
    1f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f22:	0559      	lsls	r1, r3, #21
    1f24:	d503      	bpl.n	1f2e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1f26:	4812      	ldr	r0, [pc, #72]	; (1f70 <bus_fault.constprop.0+0xa8>)
    1f28:	2145      	movs	r1, #69	; 0x45
    1f2a:	f005 f946 	bl	71ba <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f30:	05da      	lsls	r2, r3, #23
    1f32:	d50b      	bpl.n	1f4c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1f34:	480f      	ldr	r0, [pc, #60]	; (1f74 <bus_fault.constprop.0+0xac>)
    1f36:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1f38:	f005 f93f 	bl	71ba <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1f3c:	4a06      	ldr	r2, [pc, #24]	; (1f58 <bus_fault.constprop.0+0x90>)
    1f3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1f40:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1f42:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1f46:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1f48:	7028      	strb	r0, [r5, #0]
}
    1f4a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1f4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f4e:	049b      	lsls	r3, r3, #18
    1f50:	d5f4      	bpl.n	1f3c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1f52:	4809      	ldr	r0, [pc, #36]	; (1f78 <bus_fault.constprop.0+0xb0>)
    1f54:	2145      	movs	r1, #69	; 0x45
    1f56:	e7ef      	b.n	1f38 <bus_fault.constprop.0+0x70>
    1f58:	e000ed00 	.word	0xe000ed00
    1f5c:	00008a65 	.word	0x00008a65
    1f60:	00008a80 	.word	0x00008a80
    1f64:	000088cd 	.word	0x000088cd
    1f68:	00008a96 	.word	0x00008a96
    1f6c:	00008ab4 	.word	0x00008ab4
    1f70:	00008ace 	.word	0x00008ace
    1f74:	00008aee 	.word	0x00008aee
    1f78:	00008941 	.word	0x00008941

00001f7c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f80:	4b5d      	ldr	r3, [pc, #372]	; (20f8 <z_arm_fault+0x17c>)
    1f82:	685f      	ldr	r7, [r3, #4]
{
    1f84:	b08a      	sub	sp, #40	; 0x28
    1f86:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f88:	f3c7 0408 	ubfx	r4, r7, #0, #9
	__asm__ volatile(
    1f8c:	2600      	movs	r6, #0
    1f8e:	f386 8811 	msr	BASEPRI, r6
    1f92:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1f96:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1f9a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1f9e:	d107      	bne.n	1fb0 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1fa0:	f002 030c 	and.w	r3, r2, #12
    1fa4:	2b08      	cmp	r3, #8
    1fa6:	d114      	bne.n	1fd2 <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1fa8:	4854      	ldr	r0, [pc, #336]	; (20fc <z_arm_fault+0x180>)
    1faa:	2145      	movs	r1, #69	; 0x45
    1fac:	f005 f905 	bl	71ba <z_log_minimal_printk>
	*nested_exc = false;
    1fb0:	2600      	movs	r6, #0
		return NULL;
    1fb2:	4635      	mov	r5, r6
	*recoverable = false;
    1fb4:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    1fb8:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    1fba:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    1fbe:	2b09      	cmp	r3, #9
    1fc0:	f200 8087 	bhi.w	20d2 <z_arm_fault+0x156>
    1fc4:	e8df f003 	tbb	[pc, r3]
    1fc8:	767e7a0a 	.word	0x767e7a0a
    1fcc:	85858585 	.word	0x85858585
    1fd0:	8285      	.short	0x8285
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1fd2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1fd4:	bf4c      	ite	mi
    1fd6:	460d      	movmi	r5, r1
			*nested_exc = true;
    1fd8:	2601      	movpl	r6, #1
    1fda:	e7eb      	b.n	1fb4 <z_arm_fault+0x38>
	PR_FAULT_INFO("***** HARD FAULT *****");
    1fdc:	4848      	ldr	r0, [pc, #288]	; (2100 <z_arm_fault+0x184>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fde:	4c46      	ldr	r4, [pc, #280]	; (20f8 <z_arm_fault+0x17c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1fe0:	2145      	movs	r1, #69	; 0x45
    1fe2:	f005 f8ea 	bl	71ba <z_log_minimal_printk>
	*recoverable = false;
    1fe6:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1fec:	079a      	lsls	r2, r3, #30
    1fee:	d505      	bpl.n	1ffc <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    1ff0:	4844      	ldr	r0, [pc, #272]	; (2104 <z_arm_fault+0x188>)
    1ff2:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    1ff4:	f005 f8e1 	bl	71ba <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1ff8:	2400      	movs	r4, #0
    1ffa:	e033      	b.n	2064 <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ffe:	2b00      	cmp	r3, #0
    2000:	da02      	bge.n	2008 <z_arm_fault+0x8c>
		PR_EXC("  Debug event");
    2002:	4841      	ldr	r0, [pc, #260]	; (2108 <z_arm_fault+0x18c>)
    2004:	2145      	movs	r1, #69	; 0x45
    2006:	e7f5      	b.n	1ff4 <z_arm_fault+0x78>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    200a:	005b      	lsls	r3, r3, #1
    200c:	d5f4      	bpl.n	1ff8 <z_arm_fault+0x7c>
		PR_EXC("  Fault escalation (see below)");
    200e:	483f      	ldr	r0, [pc, #252]	; (210c <z_arm_fault+0x190>)
    2010:	2145      	movs	r1, #69	; 0x45
    2012:	f005 f8d2 	bl	71ba <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2016:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2018:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    201e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2020:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2024:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2028:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    202a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    202e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2032:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2034:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2038:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    203c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2040:	429a      	cmp	r2, r3
    2042:	d009      	beq.n	2058 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2044:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2046:	b2db      	uxtb	r3, r3
    2048:	b333      	cbz	r3, 2098 <z_arm_fault+0x11c>
			reason = mem_manage_fault(esf, 1, recoverable);
    204a:	f10d 0207 	add.w	r2, sp, #7
    204e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2050:	4628      	mov	r0, r5
    2052:	f7ff fe75 	bl	1d40 <mem_manage_fault>
    2056:	e02f      	b.n	20b8 <z_arm_fault+0x13c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2058:	682a      	ldr	r2, [r5, #0]
    205a:	482d      	ldr	r0, [pc, #180]	; (2110 <z_arm_fault+0x194>)
    205c:	2145      	movs	r1, #69	; 0x45
    205e:	f005 f8ac 	bl	71ba <z_log_minimal_printk>
			reason = esf->basic.r0;
    2062:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2064:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2068:	b99b      	cbnz	r3, 2092 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    206a:	2220      	movs	r2, #32
    206c:	4629      	mov	r1, r5
    206e:	a802      	add	r0, sp, #8
    2070:	f005 f96d 	bl	734e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2074:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2076:	2e00      	cmp	r6, #0
    2078:	d038      	beq.n	20ec <z_arm_fault+0x170>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    207a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    207e:	b922      	cbnz	r2, 208a <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2080:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2084:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2088:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    208a:	a902      	add	r1, sp, #8
    208c:	4620      	mov	r0, r4
    208e:	f7ff fd59 	bl	1b44 <z_arm_fatal_error>
}
    2092:	b00a      	add	sp, #40	; 0x28
    2094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2098:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    209a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    209e:	d005      	beq.n	20ac <z_arm_fault+0x130>
			reason = bus_fault(esf, 1, recoverable);
    20a0:	f10d 0107 	add.w	r1, sp, #7
    20a4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    20a6:	f7ff ff0f 	bl	1ec8 <bus_fault.constprop.0>
    20aa:	e005      	b.n	20b8 <z_arm_fault+0x13c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    20ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    20b2:	d3a1      	bcc.n	1ff8 <z_arm_fault+0x7c>
			reason = usage_fault(esf);
    20b4:	f7ff febc 	bl	1e30 <usage_fault.constprop.0>
    20b8:	4604      	mov	r4, r0
    20ba:	e7d3      	b.n	2064 <z_arm_fault+0xe8>
		reason = mem_manage_fault(esf, 0, recoverable);
    20bc:	f10d 0207 	add.w	r2, sp, #7
    20c0:	2100      	movs	r1, #0
    20c2:	e7c5      	b.n	2050 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
    20c4:	f10d 0107 	add.w	r1, sp, #7
    20c8:	2000      	movs	r0, #0
    20ca:	e7ec      	b.n	20a6 <z_arm_fault+0x12a>
	PR_FAULT_INFO(
    20cc:	4811      	ldr	r0, [pc, #68]	; (2114 <z_arm_fault+0x198>)
    20ce:	2145      	movs	r1, #69	; 0x45
    20d0:	e790      	b.n	1ff4 <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    20d2:	4911      	ldr	r1, [pc, #68]	; (2118 <z_arm_fault+0x19c>)
    20d4:	4a11      	ldr	r2, [pc, #68]	; (211c <z_arm_fault+0x1a0>)
    20d6:	4812      	ldr	r0, [pc, #72]	; (2120 <z_arm_fault+0x1a4>)
    20d8:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    20dc:	bf08      	it	eq
    20de:	460a      	moveq	r2, r1
    20e0:	f1a4 0310 	sub.w	r3, r4, #16
    20e4:	2145      	movs	r1, #69	; 0x45
    20e6:	f005 f868 	bl	71ba <z_log_minimal_printk>
}
    20ea:	e785      	b.n	1ff8 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    20ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    20f0:	f023 0301 	bic.w	r3, r3, #1
    20f4:	e7c8      	b.n	2088 <z_arm_fault+0x10c>
    20f6:	bf00      	nop
    20f8:	e000ed00 	.word	0xe000ed00
    20fc:	00008b39 	.word	0x00008b39
    2100:	00008b69 	.word	0x00008b69
    2104:	00008b85 	.word	0x00008b85
    2108:	00008bab 	.word	0x00008bab
    210c:	00008bbe 	.word	0x00008bbe
    2110:	00008be2 	.word	0x00008be2
    2114:	00008c03 	.word	0x00008c03
    2118:	00008b0b 	.word	0x00008b0b
    211c:	00008b20 	.word	0x00008b20
    2120:	00008c2c 	.word	0x00008c2c

00002124 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2124:	4a02      	ldr	r2, [pc, #8]	; (2130 <z_arm_fault_init+0xc>)
    2126:	6953      	ldr	r3, [r2, #20]
    2128:	f043 0310 	orr.w	r3, r3, #16
    212c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    212e:	4770      	bx	lr
    2130:	e000ed00 	.word	0xe000ed00

00002134 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2134:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2138:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    213c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    213e:	4672      	mov	r2, lr
	bl z_arm_fault
    2140:	f7ff ff1c 	bl	1f7c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2144:	bd01      	pop	{r0, pc}
    2146:	bf00      	nop

00002148 <z_arm_interrupt_init>:
    2148:	4804      	ldr	r0, [pc, #16]	; (215c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    214a:	2300      	movs	r3, #0
    214c:	2120      	movs	r1, #32
    214e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2150:	3301      	adds	r3, #1
    2152:	2b30      	cmp	r3, #48	; 0x30
    2154:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2158:	d1f9      	bne.n	214e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    215a:	4770      	bx	lr
    215c:	e000e100 	.word	0xe000e100

00002160 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2160:	2000      	movs	r0, #0
    msr CONTROL, r0
    2162:	f380 8814 	msr	CONTROL, r0
    isb
    2166:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    216a:	f7ff fc6b 	bl	1a44 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    216e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2170:	490d      	ldr	r1, [pc, #52]	; (21a8 <__start+0x48>)
    str r0, [r1]
    2172:	6008      	str	r0, [r1, #0]
    dsb
    2174:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2178:	480c      	ldr	r0, [pc, #48]	; (21ac <__start+0x4c>)
    msr msp, r0
    217a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    217e:	f000 f82b 	bl	21d8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2182:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2184:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2188:	4809      	ldr	r0, [pc, #36]	; (21b0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    218a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    218e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2190:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2194:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2198:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    219a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    219c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    21a0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    21a4:	f7ff fd48 	bl	1c38 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    21a8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    21ac:	20004540 	.word	0x20004540
    ldr r0, =z_interrupt_stacks
    21b0:	20001500 	.word	0x20001500

000021b4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    21b4:	4907      	ldr	r1, [pc, #28]	; (21d4 <z_arm_clear_arm_mpu_config+0x20>)
    21b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    21ba:	2300      	movs	r3, #0
	int num_regions =
    21bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    21c0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    21c2:	4293      	cmp	r3, r2
    21c4:	db00      	blt.n	21c8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    21c6:	4770      	bx	lr
  MPU->RNR = rnr;
    21c8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    21cc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    21d0:	3301      	adds	r3, #1
    21d2:	e7f6      	b.n	21c2 <z_arm_clear_arm_mpu_config+0xe>
    21d4:	e000ed00 	.word	0xe000ed00

000021d8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    21d8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    21da:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    21dc:	2300      	movs	r3, #0
    21de:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    21e2:	f7ff ffe7 	bl	21b4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    21e6:	4b14      	ldr	r3, [pc, #80]	; (2238 <z_arm_init_arch_hw_at_boot+0x60>)
    21e8:	f04f 32ff 	mov.w	r2, #4294967295
    21ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    21f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    21f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    21f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    21fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2200:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2204:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2208:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    220c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2210:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2214:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2218:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    221c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2220:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2224:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2228:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    222c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    222e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2232:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2236:	bd08      	pop	{r3, pc}
    2238:	e000e100 	.word	0xe000e100

0000223c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    223c:	4b02      	ldr	r3, [pc, #8]	; (2248 <z_arm_configure_static_mpu_regions+0xc>)
    223e:	4a03      	ldr	r2, [pc, #12]	; (224c <z_arm_configure_static_mpu_regions+0x10>)
    2240:	4803      	ldr	r0, [pc, #12]	; (2250 <z_arm_configure_static_mpu_regions+0x14>)
    2242:	2102      	movs	r1, #2
    2244:	f000 b86c 	b.w	2320 <arm_core_mpu_configure_static_mpu_regions>
    2248:	20040000 	.word	0x20040000
    224c:	20000000 	.word	0x20000000
    2250:	00007f84 	.word	0x00007f84

00002254 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2256:	4e24      	ldr	r6, [pc, #144]	; (22e8 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2258:	2500      	movs	r5, #0
    225a:	428d      	cmp	r5, r1
    225c:	da0f      	bge.n	227e <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    225e:	6844      	ldr	r4, [r0, #4]
    2260:	2c00      	cmp	r4, #0
    2262:	d03e      	beq.n	22e2 <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2264:	b19b      	cbz	r3, 228e <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2266:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    226a:	ea14 0f0c 	tst.w	r4, ip
    226e:	d008      	beq.n	2282 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2270:	481e      	ldr	r0, [pc, #120]	; (22ec <mpu_configure_regions+0x98>)
    2272:	462a      	mov	r2, r5
    2274:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2276:	f004 ffa0 	bl	71ba <z_log_minimal_printk>
			return -EINVAL;
    227a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    227e:	4610      	mov	r0, r2
    2280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2282:	2c1f      	cmp	r4, #31
    2284:	d9f4      	bls.n	2270 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    2286:	6807      	ldr	r7, [r0, #0]
		&&
    2288:	ea1c 0f07 	tst.w	ip, r7
    228c:	d1f0      	bne.n	2270 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    228e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2290:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2292:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2296:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    229a:	d910      	bls.n	22be <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
    229c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    22a0:	d80f      	bhi.n	22c2 <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    22a2:	3c01      	subs	r4, #1
    22a4:	fab4 f484 	clz	r4, r4
    22a8:	f1c4 041f 	rsb	r4, r4, #31
    22ac:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    22ae:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    22b2:	ea4c 0c04 	orr.w	ip, ip, r4
    22b6:	d906      	bls.n	22c6 <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    22b8:	480d      	ldr	r0, [pc, #52]	; (22f0 <mpu_configure_regions+0x9c>)
    22ba:	2145      	movs	r1, #69	; 0x45
    22bc:	e7db      	b.n	2276 <mpu_configure_regions+0x22>
		return REGION_32B;
    22be:	2408      	movs	r4, #8
    22c0:	e7f5      	b.n	22ae <mpu_configure_regions+0x5a>
		return REGION_4G;
    22c2:	243e      	movs	r4, #62	; 0x3e
    22c4:	e7f3      	b.n	22ae <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22c6:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    22ca:	4314      	orrs	r4, r2
    22cc:	f044 0410 	orr.w	r4, r4, #16
    22d0:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    22d4:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    22d8:	f04c 0401 	orr.w	r4, ip, #1
    22dc:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    22e0:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    22e2:	3501      	adds	r5, #1
    22e4:	300c      	adds	r0, #12
    22e6:	e7b8      	b.n	225a <mpu_configure_regions+0x6>
    22e8:	e000ed00 	.word	0xe000ed00
    22ec:	00008c48 	.word	0x00008c48
    22f0:	00008c70 	.word	0x00008c70

000022f4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    22f4:	4b04      	ldr	r3, [pc, #16]	; (2308 <arm_core_mpu_enable+0x14>)
    22f6:	2205      	movs	r2, #5
    22f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    22fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2300:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2304:	4770      	bx	lr
    2306:	bf00      	nop
    2308:	e000ed00 	.word	0xe000ed00

0000230c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    230c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2310:	4b02      	ldr	r3, [pc, #8]	; (231c <arm_core_mpu_disable+0x10>)
    2312:	2200      	movs	r2, #0
    2314:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2318:	4770      	bx	lr
    231a:	bf00      	nop
    231c:	e000ed00 	.word	0xe000ed00

00002320 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2320:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2322:	4c03      	ldr	r4, [pc, #12]	; (2330 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2324:	2301      	movs	r3, #1
    2326:	7822      	ldrb	r2, [r4, #0]
    2328:	f7ff ff94 	bl	2254 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    232c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    232e:	bd10      	pop	{r4, pc}
    2330:	200010d1 	.word	0x200010d1

00002334 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2334:	4914      	ldr	r1, [pc, #80]	; (2388 <z_arm_mpu_init+0x54>)
    2336:	6808      	ldr	r0, [r1, #0]
    2338:	2808      	cmp	r0, #8
{
    233a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    233c:	d821      	bhi.n	2382 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    233e:	f7ff ffe5 	bl	230c <arm_core_mpu_disable>
    2342:	4c12      	ldr	r4, [pc, #72]	; (238c <z_arm_mpu_init+0x58>)
    2344:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2346:	2200      	movs	r2, #0
    2348:	4290      	cmp	r0, r2
    234a:	f101 010c 	add.w	r1, r1, #12
    234e:	d105      	bne.n	235c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2350:	4b0f      	ldr	r3, [pc, #60]	; (2390 <z_arm_mpu_init+0x5c>)
    2352:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2354:	f7ff ffce 	bl	22f4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2358:	2000      	movs	r0, #0
}
    235a:	bd10      	pop	{r4, pc}
    235c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2360:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2364:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2368:	4313      	orrs	r3, r2
    236a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    236e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2372:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2376:	f043 0301 	orr.w	r3, r3, #1
    237a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    237e:	3201      	adds	r2, #1
    2380:	e7e2      	b.n	2348 <z_arm_mpu_init+0x14>
		return -1;
    2382:	f04f 30ff 	mov.w	r0, #4294967295
    2386:	e7e8      	b.n	235a <z_arm_mpu_init+0x26>
    2388:	00007f9c 	.word	0x00007f9c
    238c:	e000ed00 	.word	0xe000ed00
    2390:	200010d1 	.word	0x200010d1

00002394 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2394:	4b01      	ldr	r3, [pc, #4]	; (239c <__stdout_hook_install+0x8>)
    2396:	6018      	str	r0, [r3, #0]
}
    2398:	4770      	bx	lr
    239a:	bf00      	nop
    239c:	20000010 	.word	0x20000010

000023a0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    23a0:	f04f 0220 	mov.w	r2, #32
    23a4:	f3ef 8311 	mrs	r3, BASEPRI
    23a8:	f382 8812 	msr	BASEPRI_MAX, r2
    23ac:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    23b0:	4a04      	ldr	r2, [pc, #16]	; (23c4 <nordicsemi_nrf52_init+0x24>)
    23b2:	2101      	movs	r1, #1
    23b4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    23b8:	f383 8811 	msr	BASEPRI, r3
    23bc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    23c0:	2000      	movs	r0, #0
    23c2:	4770      	bx	lr
    23c4:	4001e000 	.word	0x4001e000

000023c8 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    23c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23cc:	b2c0      	uxtb	r0, r0
    23ce:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    23d2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    23d6:	4905      	ldr	r1, [pc, #20]	; (23ec <sys_arch_reboot+0x24>)
    23d8:	4b05      	ldr	r3, [pc, #20]	; (23f0 <sys_arch_reboot+0x28>)
    23da:	68ca      	ldr	r2, [r1, #12]
    23dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    23e0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    23e2:	60cb      	str	r3, [r1, #12]
    23e4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    23e8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    23ea:	e7fd      	b.n	23e8 <sys_arch_reboot+0x20>
    23ec:	e000ed00 	.word	0xe000ed00
    23f0:	05fa0004 	.word	0x05fa0004

000023f4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    23f4:	b120      	cbz	r0, 2400 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    23f6:	4b03      	ldr	r3, [pc, #12]	; (2404 <arch_busy_wait+0x10>)
    23f8:	0180      	lsls	r0, r0, #6
    23fa:	f043 0301 	orr.w	r3, r3, #1
    23fe:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2400:	4770      	bx	lr
    2402:	bf00      	nop
    2404:	00007f00 	.word	0x00007f00

00002408 <z_impl_gpio_pin_configure.constprop.0>:
 */
__syscall int gpio_pin_configure(const struct device *port,
				 gpio_pin_t pin,
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
    2408:	b430      	push	{r4, r5}
    240a:	4601      	mov	r1, r0
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
    240c:	4806      	ldr	r0, [pc, #24]	; (2428 <z_impl_gpio_pin_configure.constprop.0+0x20>)
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    240e:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    2410:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    2412:	6823      	ldr	r3, [r4, #0]
    2414:	2201      	movs	r2, #1
    2416:	408a      	lsls	r2, r1
    2418:	ea23 0302 	bic.w	r3, r3, r2
    241c:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    241e:	682b      	ldr	r3, [r5, #0]
    2420:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
}
    2424:	bc30      	pop	{r4, r5}
	return api->pin_configure(port, pin, flags);
    2426:	4718      	bx	r3
    2428:	00007c58 	.word	0x00007c58

0000242c <bmd345_fem_init>:

#define MODE_PIN_NRF   NRF_GPIO_PIN_MAP(GPIO1_PORT, PA_MODE_PIN) 
#define A_SEL_PIN_NRF  NRF_GPIO_PIN_MAP(GPIO1_PORT, PA_A_SEL_PIN) 

static int bmd345_fem_init(const struct device *dev)
{
    242c:	b508      	push	{r3, lr}
    242e:	4809      	ldr	r0, [pc, #36]	; (2454 <bmd345_fem_init+0x28>)
    2430:	f005 fb88 	bl	7b44 <z_device_is_ready>
	int ret;
	const struct device *mode_asel_port_dev;

	mode_asel_port_dev = DEVICE_DT_GET(DT_NODELABEL(gpio1));

	if (!device_is_ready(mode_asel_port_dev)) {
    2434:	b150      	cbz	r0, 244c <bmd345_fem_init+0x20>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    2436:	2004      	movs	r0, #4
    2438:	f7ff ffe6 	bl	2408 <z_impl_gpio_pin_configure.constprop.0>
		return -ENODEV;
	}

	ret = gpio_pin_configure(mode_asel_port_dev, MODE_PIN, GPIO_OUTPUT_LOW);
	if (ret < 0) {
    243c:	2800      	cmp	r0, #0
    243e:	db04      	blt.n	244a <bmd345_fem_init+0x1e>
    2440:	2002      	movs	r0, #2
    2442:	f7ff ffe1 	bl	2408 <z_impl_gpio_pin_configure.constprop.0>
		return ret;
	}

	ret = gpio_pin_configure(mode_asel_port_dev, A_SEL_PIN, GPIO_OUTPUT_LOW);
	if (ret < 0) {
    2446:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	nrf_gpio_pin_clear(A_SEL_PIN_NRF);
	
	return 0;

#endif
}
    244a:	bd08      	pop	{r3, pc}
		return -ENODEV;
    244c:	f06f 0012 	mvn.w	r0, #18
    2450:	e7fb      	b.n	244a <bmd345_fem_init+0x1e>
    2452:	bf00      	nop
    2454:	00007c58 	.word	0x00007c58

00002458 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2458:	4b08      	ldr	r3, [pc, #32]	; (247c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    245a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    245c:	1ac3      	subs	r3, r0, r3
{
    245e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2460:	4907      	ldr	r1, [pc, #28]	; (2480 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2462:	109b      	asrs	r3, r3, #2
{
    2464:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2466:	4359      	muls	r1, r3
    2468:	4806      	ldr	r0, [pc, #24]	; (2484 <onoff_stop+0x2c>)
    246a:	2240      	movs	r2, #64	; 0x40
    246c:	f004 ffa2 	bl	73b4 <stop>
	notify(mgr, res);
    2470:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2472:	4601      	mov	r1, r0
	notify(mgr, res);
    2474:	4620      	mov	r0, r4
}
    2476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    247a:	4718      	bx	r3
    247c:	20000e4c 	.word	0x20000e4c
    2480:	b6db6db7 	.word	0xb6db6db7
    2484:	00007c40 	.word	0x00007c40

00002488 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2488:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    248a:	4c0c      	ldr	r4, [pc, #48]	; (24bc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    248c:	4a0c      	ldr	r2, [pc, #48]	; (24c0 <onoff_start+0x38>)
    248e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2490:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2492:	9300      	str	r3, [sp, #0]
{
    2494:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2496:	460b      	mov	r3, r1
    2498:	490a      	ldr	r1, [pc, #40]	; (24c4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    249a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    249c:	4361      	muls	r1, r4
{
    249e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    24a0:	4809      	ldr	r0, [pc, #36]	; (24c8 <onoff_start+0x40>)
    24a2:	f004 ffb3 	bl	740c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    24a6:	1e01      	subs	r1, r0, #0
    24a8:	da05      	bge.n	24b6 <onoff_start+0x2e>
		notify(mgr, err);
    24aa:	4630      	mov	r0, r6
    24ac:	462b      	mov	r3, r5
	}
}
    24ae:	b002      	add	sp, #8
    24b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    24b4:	4718      	bx	r3
}
    24b6:	b002      	add	sp, #8
    24b8:	bd70      	pop	{r4, r5, r6, pc}
    24ba:	bf00      	nop
    24bc:	20000e4c 	.word	0x20000e4c
    24c0:	0000747d 	.word	0x0000747d
    24c4:	b6db6db7 	.word	0xb6db6db7
    24c8:	00007c40 	.word	0x00007c40

000024cc <generic_hfclk_stop>:
{
    24cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    24ce:	f04f 0320 	mov.w	r3, #32
    24d2:	f3ef 8411 	mrs	r4, BASEPRI
    24d6:	f383 8812 	msr	BASEPRI_MAX, r3
    24da:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    24de:	4a07      	ldr	r2, [pc, #28]	; (24fc <generic_hfclk_stop+0x30>)
    24e0:	6813      	ldr	r3, [r2, #0]
    24e2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    24e6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    24e8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    24ea:	d402      	bmi.n	24f2 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    24ec:	2001      	movs	r0, #1
    24ee:	f005 faa1 	bl	7a34 <nrfx_clock_stop>
	__asm__ volatile(
    24f2:	f384 8811 	msr	BASEPRI, r4
    24f6:	f3bf 8f6f 	isb	sy
}
    24fa:	bd10      	pop	{r4, pc}
    24fc:	20000e9c 	.word	0x20000e9c

00002500 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2500:	2200      	movs	r2, #0
{
    2502:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2504:	2101      	movs	r1, #1
{
    2506:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2508:	4610      	mov	r0, r2
    250a:	f7ff fb79 	bl	1c00 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    250e:	480f      	ldr	r0, [pc, #60]	; (254c <clk_init+0x4c>)
    2510:	f001 fd88 	bl	4024 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2514:	4b0e      	ldr	r3, [pc, #56]	; (2550 <clk_init+0x50>)
    2516:	4298      	cmp	r0, r3
    2518:	d115      	bne.n	2546 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    251a:	f005 fa42 	bl	79a2 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    251e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2520:	490c      	ldr	r1, [pc, #48]	; (2554 <clk_init+0x54>)
    2522:	4630      	mov	r0, r6
    2524:	f004 fdbf 	bl	70a6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2528:	2800      	cmp	r0, #0
    252a:	db0b      	blt.n	2544 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    252c:	2501      	movs	r5, #1
    252e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    2530:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2532:	4908      	ldr	r1, [pc, #32]	; (2554 <clk_init+0x54>)
    2534:	f104 001c 	add.w	r0, r4, #28
    2538:	f004 fdb5 	bl	70a6 <onoff_manager_init>
		if (err < 0) {
    253c:	2800      	cmp	r0, #0
    253e:	db01      	blt.n	2544 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2540:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2542:	2000      	movs	r0, #0
}
    2544:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2546:	f06f 0004 	mvn.w	r0, #4
    254a:	e7fb      	b.n	2544 <clk_init+0x44>
    254c:	0000258d 	.word	0x0000258d
    2550:	0bad0000 	.word	0x0bad0000
    2554:	00007fbc 	.word	0x00007fbc

00002558 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2558:	b570      	push	{r4, r5, r6, lr}
    255a:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    255c:	230c      	movs	r3, #12
    255e:	4809      	ldr	r0, [pc, #36]	; (2584 <clkstarted_handle.constprop.0+0x2c>)
    2560:	434b      	muls	r3, r1
    2562:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2564:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2568:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    256a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    256c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    256e:	4418      	add	r0, r3
    2570:	f004 ff0d 	bl	738e <set_on_state>
	if (callback) {
    2574:	b12d      	cbz	r5, 2582 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2576:	4632      	mov	r2, r6
    2578:	462b      	mov	r3, r5
    257a:	4803      	ldr	r0, [pc, #12]	; (2588 <clkstarted_handle.constprop.0+0x30>)
}
    257c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2580:	4718      	bx	r3
}
    2582:	bd70      	pop	{r4, r5, r6, pc}
    2584:	20000e4c 	.word	0x20000e4c
    2588:	00007c40 	.word	0x00007c40

0000258c <clock_event_handler>:
	switch (event) {
    258c:	b110      	cbz	r0, 2594 <clock_event_handler+0x8>
    258e:	2801      	cmp	r0, #1
    2590:	d004      	beq.n	259c <clock_event_handler+0x10>
    2592:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2594:	4b03      	ldr	r3, [pc, #12]	; (25a4 <clock_event_handler+0x18>)
    2596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2598:	075b      	lsls	r3, r3, #29
    259a:	d101      	bne.n	25a0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    259c:	f7ff bfdc 	b.w	2558 <clkstarted_handle.constprop.0>
}
    25a0:	4770      	bx	lr
    25a2:	bf00      	nop
    25a4:	20000e4c 	.word	0x20000e4c

000025a8 <generic_hfclk_start>:
{
    25a8:	b508      	push	{r3, lr}
	__asm__ volatile(
    25aa:	f04f 0320 	mov.w	r3, #32
    25ae:	f3ef 8111 	mrs	r1, BASEPRI
    25b2:	f383 8812 	msr	BASEPRI_MAX, r3
    25b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    25ba:	4a12      	ldr	r2, [pc, #72]	; (2604 <generic_hfclk_start+0x5c>)
    25bc:	6813      	ldr	r3, [r2, #0]
    25be:	f043 0002 	orr.w	r0, r3, #2
    25c2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    25c4:	07da      	lsls	r2, r3, #31
    25c6:	d408      	bmi.n	25da <generic_hfclk_start+0x32>
	__asm__ volatile(
    25c8:	f381 8811 	msr	BASEPRI, r1
    25cc:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    25d0:	2001      	movs	r0, #1
}
    25d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    25d6:	f005 b9f1 	b.w	79bc <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    25da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25de:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    25e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    25e6:	07d3      	lsls	r3, r2, #31
    25e8:	d5ee      	bpl.n	25c8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    25ea:	4807      	ldr	r0, [pc, #28]	; (2608 <generic_hfclk_start+0x60>)
    25ec:	f004 fecf 	bl	738e <set_on_state>
    25f0:	f381 8811 	msr	BASEPRI, r1
    25f4:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    25f8:	2000      	movs	r0, #0
}
    25fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    25fe:	f7ff bfab 	b.w	2558 <clkstarted_handle.constprop.0>
    2602:	bf00      	nop
    2604:	20000e9c 	.word	0x20000e9c
    2608:	20000e8c 	.word	0x20000e8c

0000260c <z_nrf_clock_control_lf_on>:
{
    260c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2610:	4936      	ldr	r1, [pc, #216]	; (26ec <z_nrf_clock_control_lf_on+0xe0>)
    2612:	f3bf 8f5b 	dmb	ish
    2616:	4607      	mov	r7, r0
    2618:	2201      	movs	r2, #1
    261a:	e851 3f00 	ldrex	r3, [r1]
    261e:	e841 2000 	strex	r0, r2, [r1]
    2622:	2800      	cmp	r0, #0
    2624:	d1f9      	bne.n	261a <z_nrf_clock_control_lf_on+0xe>
    2626:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    262a:	b933      	cbnz	r3, 263a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    262c:	4930      	ldr	r1, [pc, #192]	; (26f0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    262e:	4831      	ldr	r0, [pc, #196]	; (26f4 <z_nrf_clock_control_lf_on+0xe8>)
    2630:	604b      	str	r3, [r1, #4]
    2632:	60cb      	str	r3, [r1, #12]
    2634:	608a      	str	r2, [r1, #8]
    2636:	f004 fd49 	bl	70cc <onoff_request>
	switch (start_mode) {
    263a:	1e7b      	subs	r3, r7, #1
    263c:	2b01      	cmp	r3, #1
    263e:	d82d      	bhi.n	269c <z_nrf_clock_control_lf_on+0x90>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2640:	2f01      	cmp	r7, #1
    2642:	d107      	bne.n	2654 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2648:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    264c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2650:	2b01      	cmp	r3, #1
    2652:	d023      	beq.n	269c <z_nrf_clock_control_lf_on+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2654:	f005 fa85 	bl	7b62 <k_is_in_isr>
    2658:	4605      	mov	r5, r0
    265a:	bb08      	cbnz	r0, 26a0 <z_nrf_clock_control_lf_on+0x94>
	return !z_sys_post_kernel;
    265c:	4b26      	ldr	r3, [pc, #152]	; (26f8 <z_nrf_clock_control_lf_on+0xec>)
    265e:	781b      	ldrb	r3, [r3, #0]
    2660:	b1f3      	cbz	r3, 26a0 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2666:	2202      	movs	r2, #2
    2668:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    266c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    266e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 26fc <z_nrf_clock_control_lf_on+0xf0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2672:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    p_reg->LFCLKSRC = (uint32_t)(source);
    2676:	f04f 0801 	mov.w	r8, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    267a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    267e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    2682:	03d2      	lsls	r2, r2, #15
    2684:	d516      	bpl.n	26b4 <z_nrf_clock_control_lf_on+0xa8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2686:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    268a:	2b01      	cmp	r3, #1
    268c:	d001      	beq.n	2692 <z_nrf_clock_control_lf_on+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    268e:	2f01      	cmp	r7, #1
    2690:	d110      	bne.n	26b4 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    2692:	b32d      	cbz	r5, 26e0 <z_nrf_clock_control_lf_on+0xd4>
    2694:	f386 8811 	msr	BASEPRI, r6
    2698:	f3bf 8f6f 	isb	sy
}
    269c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    26a0:	f04f 0320 	mov.w	r3, #32
    26a4:	f3ef 8611 	mrs	r6, BASEPRI
    26a8:	f383 8812 	msr	BASEPRI_MAX, r3
    26ac:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    26b0:	2501      	movs	r5, #1
    26b2:	e7dc      	b.n	266e <z_nrf_clock_control_lf_on+0x62>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    26b4:	4630      	mov	r0, r6
    26b6:	f7ff fa39 	bl	1b2c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    26ba:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    26be:	2b00      	cmp	r3, #0
    26c0:	d1db      	bne.n	267a <z_nrf_clock_control_lf_on+0x6e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26c2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    26c6:	2a00      	cmp	r2, #0
    26c8:	d0d7      	beq.n	267a <z_nrf_clock_control_lf_on+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26ca:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    26ce:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    26d2:	f8c4 8518 	str.w	r8, [r4, #1304]	; 0x518
    26d6:	f8c9 8180 	str.w	r8, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26da:	f8c4 8008 	str.w	r8, [r4, #8]
}
    26de:	e7cc      	b.n	267a <z_nrf_clock_control_lf_on+0x6e>
    p_reg->INTENSET = mask;
    26e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26e4:	2202      	movs	r2, #2
    26e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    26ea:	e7d7      	b.n	269c <z_nrf_clock_control_lf_on+0x90>
    26ec:	20000e48 	.word	0x20000e48
    26f0:	20000e38 	.word	0x20000e38
    26f4:	20000e68 	.word	0x20000e68
    26f8:	200014e7 	.word	0x200014e7
    26fc:	e000e100 	.word	0xe000e100

00002700 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2700:	b508      	push	{r3, lr}
    2702:	4807      	ldr	r0, [pc, #28]	; (2720 <uart_console_init+0x20>)
    2704:	f005 fa1e 	bl	7b44 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    2708:	b138      	cbz	r0, 271a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    270a:	4806      	ldr	r0, [pc, #24]	; (2724 <uart_console_init+0x24>)
    270c:	f7ff fe42 	bl	2394 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2710:	4804      	ldr	r0, [pc, #16]	; (2724 <uart_console_init+0x24>)
    2712:	f7fe fe41 	bl	1398 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2716:	2000      	movs	r0, #0
}
    2718:	bd08      	pop	{r3, pc}
		return -ENODEV;
    271a:	f06f 0012 	mvn.w	r0, #18
    271e:	e7fb      	b.n	2718 <uart_console_init+0x18>
    2720:	00007c88 	.word	0x00007c88
    2724:	00002729 	.word	0x00002729

00002728 <console_out>:
	if ('\n' == c) {
    2728:	280a      	cmp	r0, #10
{
    272a:	b538      	push	{r3, r4, r5, lr}
    272c:	4d07      	ldr	r5, [pc, #28]	; (274c <console_out+0x24>)
    272e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2730:	d104      	bne.n	273c <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2732:	68ab      	ldr	r3, [r5, #8]
    2734:	210d      	movs	r1, #13
    2736:	685b      	ldr	r3, [r3, #4]
    2738:	4628      	mov	r0, r5
    273a:	4798      	blx	r3
    273c:	68ab      	ldr	r3, [r5, #8]
    273e:	4803      	ldr	r0, [pc, #12]	; (274c <console_out+0x24>)
    2740:	685b      	ldr	r3, [r3, #4]
    2742:	b2e1      	uxtb	r1, r4
    2744:	4798      	blx	r3
}
    2746:	4620      	mov	r0, r4
    2748:	bd38      	pop	{r3, r4, r5, pc}
    274a:	bf00      	nop
    274c:	00007c88 	.word	0x00007c88

00002750 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2750:	b530      	push	{r4, r5, lr}
	return port->config;
    2752:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2754:	7b05      	ldrb	r5, [r0, #12]
    2756:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    275a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    275e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2760:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2764:	d105      	bne.n	2772 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2766:	4620      	mov	r0, r4
    2768:	f001 fee0 	bl	452c <nrfx_gpiote_trigger_disable>

		return 0;
    276c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    276e:	b005      	add	sp, #20
    2770:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2772:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2774:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2778:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    277c:	d114      	bne.n	27a8 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    277e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2782:	bf0c      	ite	eq
    2784:	2304      	moveq	r3, #4
    2786:	2305      	movne	r3, #5
    2788:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    278c:	2300      	movs	r3, #0
    278e:	4619      	mov	r1, r3
    2790:	aa02      	add	r2, sp, #8
    2792:	4620      	mov	r0, r4
    2794:	f001 fd08 	bl	41a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2798:	4b1f      	ldr	r3, [pc, #124]	; (2818 <CONFIG_MAIN_STACK_SIZE+0x18>)
    279a:	4298      	cmp	r0, r3
    279c:	d139      	bne.n	2812 <CONFIG_MAIN_STACK_SIZE+0x12>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    279e:	2101      	movs	r1, #1
    27a0:	4620      	mov	r0, r4
    27a2:	f001 fe7b 	bl	449c <nrfx_gpiote_trigger_enable>
	return 0;
    27a6:	e7e1      	b.n	276c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    27a8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    27ac:	d026      	beq.n	27fc <gpio_nrfx_pin_interrupt_configure+0xac>
    27ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    27b2:	bf14      	ite	ne
    27b4:	2301      	movne	r3, #1
    27b6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    27b8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    27bc:	6883      	ldr	r3, [r0, #8]
    27be:	40cb      	lsrs	r3, r1
    27c0:	07d9      	lsls	r1, r3, #31
    27c2:	d4e3      	bmi.n	278c <gpio_nrfx_pin_interrupt_configure+0x3c>
    27c4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    27c8:	d1e0      	bne.n	278c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    27ca:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    27cc:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    27ce:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    27d2:	4a12      	ldr	r2, [pc, #72]	; (281c <CONFIG_MAIN_STACK_SIZE+0x1c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    27d4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    27d8:	bf18      	it	ne
    27da:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    27de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    27e2:	07db      	lsls	r3, r3, #31
    27e4:	d4d2      	bmi.n	278c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    27e6:	f10d 0507 	add.w	r5, sp, #7
    27ea:	4629      	mov	r1, r5
    27ec:	4620      	mov	r0, r4
    27ee:	f001 fe01 	bl	43f4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    27f2:	4b0b      	ldr	r3, [pc, #44]	; (2820 <CONFIG_MAIN_STACK_SIZE+0x20>)
    27f4:	4298      	cmp	r0, r3
    27f6:	d003      	beq.n	2800 <CONFIG_MAIN_STACK_SIZE>
		trigger_config.p_in_channel = &ch;
    27f8:	9503      	str	r5, [sp, #12]
    27fa:	e7c7      	b.n	278c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    27fc:	2303      	movs	r3, #3
    27fe:	e7db      	b.n	27b8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2800:	4628      	mov	r0, r5
    2802:	f001 fe45 	bl	4490 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2806:	4b04      	ldr	r3, [pc, #16]	; (2818 <CONFIG_MAIN_STACK_SIZE+0x18>)
    2808:	4298      	cmp	r0, r3
    280a:	d0f5      	beq.n	27f8 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    280c:	f06f 000b 	mvn.w	r0, #11
    2810:	e7ad      	b.n	276e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2812:	f06f 0015 	mvn.w	r0, #21
    2816:	e7aa      	b.n	276e <gpio_nrfx_pin_interrupt_configure+0x1e>
    2818:	0bad0000 	.word	0x0bad0000
    281c:	50000300 	.word	0x50000300
    2820:	0bad0004 	.word	0x0bad0004

00002824 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2824:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2826:	f001 fe23 	bl	4470 <nrfx_gpiote_is_init>
    282a:	4604      	mov	r4, r0
    282c:	b968      	cbnz	r0, 284a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    282e:	f001 fdf7 	bl	4420 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2832:	4b08      	ldr	r3, [pc, #32]	; (2854 <gpio_nrfx_init+0x30>)
    2834:	4298      	cmp	r0, r3
    2836:	d10a      	bne.n	284e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2838:	4807      	ldr	r0, [pc, #28]	; (2858 <gpio_nrfx_init+0x34>)
    283a:	4621      	mov	r1, r4
    283c:	f001 fdd4 	bl	43e8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2840:	4622      	mov	r2, r4
    2842:	2105      	movs	r1, #5
    2844:	2006      	movs	r0, #6
    2846:	f7ff f9db 	bl	1c00 <z_arm_irq_priority_set>
		return 0;
    284a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    284c:	bd10      	pop	{r4, pc}
		return -EIO;
    284e:	f06f 0004 	mvn.w	r0, #4
    2852:	e7fb      	b.n	284c <gpio_nrfx_init+0x28>
    2854:	0bad0000 	.word	0x0bad0000
    2858:	0000285d 	.word	0x0000285d

0000285c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    285c:	0942      	lsrs	r2, r0, #5
{
    285e:	b570      	push	{r4, r5, r6, lr}
    2860:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2862:	d002      	beq.n	286a <nrfx_gpio_handler+0xe>
    2864:	2a01      	cmp	r2, #1
    2866:	d017      	beq.n	2898 <nrfx_gpio_handler+0x3c>
}
    2868:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    286a:	4e0d      	ldr	r6, [pc, #52]	; (28a0 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    286c:	6932      	ldr	r2, [r6, #16]
    286e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2870:	2900      	cmp	r1, #0
    2872:	d0f9      	beq.n	2868 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2874:	f003 031f 	and.w	r3, r3, #31
    2878:	2501      	movs	r5, #1
	return node->next;
    287a:	680c      	ldr	r4, [r1, #0]
    287c:	409d      	lsls	r5, r3
    287e:	2900      	cmp	r1, #0
    2880:	d0f2      	beq.n	2868 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    2882:	688a      	ldr	r2, [r1, #8]
    2884:	402a      	ands	r2, r5
    2886:	d002      	beq.n	288e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2888:	684b      	ldr	r3, [r1, #4]
    288a:	4630      	mov	r0, r6
    288c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    288e:	b12c      	cbz	r4, 289c <nrfx_gpio_handler+0x40>
    2890:	6823      	ldr	r3, [r4, #0]
    2892:	4621      	mov	r1, r4
    2894:	461c      	mov	r4, r3
    2896:	e7f2      	b.n	287e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2898:	4e02      	ldr	r6, [pc, #8]	; (28a4 <nrfx_gpio_handler+0x48>)
    289a:	e7e7      	b.n	286c <nrfx_gpio_handler+0x10>
    289c:	4623      	mov	r3, r4
    289e:	e7f8      	b.n	2892 <nrfx_gpio_handler+0x36>
    28a0:	00007c70 	.word	0x00007c70
    28a4:	00007c58 	.word	0x00007c58

000028a8 <gpio_nrfx_pin_configure>:
{
    28a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    28ac:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28ae:	7b3b      	ldrb	r3, [r7, #12]
    28b0:	f001 051f 	and.w	r5, r1, #31
    28b4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    28b8:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28ba:	4628      	mov	r0, r5
    28bc:	f10d 0103 	add.w	r1, sp, #3
{
    28c0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28c2:	f001 fd97 	bl	43f4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    28c6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28ca:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    28cc:	d10b      	bne.n	28e6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    28ce:	4628      	mov	r0, r5
    28d0:	f001 fe54 	bl	457c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    28d4:	4b3d      	ldr	r3, [pc, #244]	; (29cc <gpio_nrfx_pin_configure+0x124>)
    28d6:	4598      	cmp	r8, r3
    28d8:	d103      	bne.n	28e2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    28da:	f89d 0003 	ldrb.w	r0, [sp, #3]
    28de:	f001 fdd1 	bl	4484 <nrfx_gpiote_channel_free>
		return 0;
    28e2:	2000      	movs	r0, #0
    28e4:	e00c      	b.n	2900 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    28e6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    28e8:	4619      	mov	r1, r3
    28ea:	aa02      	add	r2, sp, #8
    28ec:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    28ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    28f2:	f001 fc59 	bl	41a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    28f6:	4b35      	ldr	r3, [pc, #212]	; (29cc <gpio_nrfx_pin_configure+0x124>)
    28f8:	4298      	cmp	r0, r3
    28fa:	d004      	beq.n	2906 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    28fc:	f06f 0015 	mvn.w	r0, #21
}
    2900:	b004      	add	sp, #16
    2902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2906:	4580      	cmp	r8, r0
    2908:	d103      	bne.n	2912 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    290a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    290e:	f001 fdb9 	bl	4484 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2912:	03a3      	lsls	r3, r4, #14
    2914:	d54b      	bpl.n	29ae <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2916:	f240 3306 	movw	r3, #774	; 0x306
    291a:	4023      	ands	r3, r4
    291c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    2920:	d019      	beq.n	2956 <gpio_nrfx_pin_configure+0xae>
    2922:	d80c      	bhi.n	293e <gpio_nrfx_pin_configure+0x96>
    2924:	2b06      	cmp	r3, #6
    2926:	d017      	beq.n	2958 <gpio_nrfx_pin_configure+0xb0>
    2928:	d804      	bhi.n	2934 <gpio_nrfx_pin_configure+0x8c>
    292a:	b1ab      	cbz	r3, 2958 <gpio_nrfx_pin_configure+0xb0>
    292c:	2b02      	cmp	r3, #2
    292e:	d1e5      	bne.n	28fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    2930:	2304      	movs	r3, #4
    2932:	e011      	b.n	2958 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2938:	d1e0      	bne.n	28fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    293a:	2301      	movs	r3, #1
    293c:	e00c      	b.n	2958 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    293e:	f240 2202 	movw	r2, #514	; 0x202
    2942:	4293      	cmp	r3, r2
    2944:	d027      	beq.n	2996 <gpio_nrfx_pin_configure+0xee>
    2946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    294a:	d026      	beq.n	299a <gpio_nrfx_pin_configure+0xf2>
    294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2950:	d1d4      	bne.n	28fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    2952:	2302      	movs	r3, #2
    2954:	e000      	b.n	2958 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    2956:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2958:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    295c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2960:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2964:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2966:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    296a:	bf54      	ite	pl
    296c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2970:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2972:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2974:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2978:	d511      	bpl.n	299e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    297a:	687a      	ldr	r2, [r7, #4]
    297c:	2301      	movs	r3, #1
    297e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2980:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2984:	2200      	movs	r2, #0
    2986:	a901      	add	r1, sp, #4
    2988:	4628      	mov	r0, r5
    298a:	f001 fcbb 	bl	4304 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    298e:	4b0f      	ldr	r3, [pc, #60]	; (29cc <gpio_nrfx_pin_configure+0x124>)
    2990:	4298      	cmp	r0, r3
    2992:	d0a6      	beq.n	28e2 <gpio_nrfx_pin_configure+0x3a>
    2994:	e7b2      	b.n	28fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2996:	2305      	movs	r3, #5
    2998:	e7de      	b.n	2958 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    299a:	2303      	movs	r3, #3
    299c:	e7dc      	b.n	2958 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    299e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    29a0:	bf41      	itttt	mi
    29a2:	2301      	movmi	r3, #1
    29a4:	687a      	ldrmi	r2, [r7, #4]
    29a6:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    29a8:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    29ac:	e7ea      	b.n	2984 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    29ae:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    29b0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    29b4:	bf54      	ite	pl
    29b6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    29ba:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    29bc:	461a      	mov	r2, r3
    29be:	a901      	add	r1, sp, #4
    29c0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    29c2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    29c6:	f001 fbef 	bl	41a8 <nrfx_gpiote_input_configure>
    29ca:	e7e0      	b.n	298e <gpio_nrfx_pin_configure+0xe6>
    29cc:	0bad0000 	.word	0x0bad0000

000029d0 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    29d0:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    29d4:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    29d8:	280a      	cmp	r0, #10
    29da:	bf9a      	itte	ls
    29dc:	4b02      	ldrls	r3, [pc, #8]	; (29e8 <qspi_get_zephyr_ret_code+0x18>)
    29de:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    29e2:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    29e6:	4770      	bx	lr
    29e8:	000082b8 	.word	0x000082b8

000029ec <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    29ec:	4b02      	ldr	r3, [pc, #8]	; (29f8 <qspi_nor_pages_layout+0xc>)
    29ee:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    29f0:	2301      	movs	r3, #1
    29f2:	6013      	str	r3, [r2, #0]
}
    29f4:	4770      	bx	lr
    29f6:	bf00      	nop
    29f8:	000080ac 	.word	0x000080ac

000029fc <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    29fc:	4800      	ldr	r0, [pc, #0]	; (2a00 <qspi_flash_get_parameters+0x4>)
    29fe:	4770      	bx	lr
    2a00:	00008040 	.word	0x00008040

00002a04 <qspi_device_init>:
{
    2a04:	b510      	push	{r4, lr}
	if (!qspi_initialized) {
    2a06:	4c08      	ldr	r4, [pc, #32]	; (2a28 <qspi_device_init+0x24>)
    2a08:	7823      	ldrb	r3, [r4, #0]
    2a0a:	b95b      	cbnz	r3, 2a24 <qspi_device_init+0x20>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    2a0c:	6902      	ldr	r2, [r0, #16]
    2a0e:	4907      	ldr	r1, [pc, #28]	; (2a2c <qspi_device_init+0x28>)
    2a10:	6840      	ldr	r0, [r0, #4]
    2a12:	f001 fffb 	bl	4a0c <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    2a16:	f7ff ffdb 	bl	29d0 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    2a1a:	fab0 f380 	clz	r3, r0
    2a1e:	095b      	lsrs	r3, r3, #5
    2a20:	7023      	strb	r3, [r4, #0]
}
    2a22:	bd10      	pop	{r4, pc}
	int ret = 0;
    2a24:	2000      	movs	r0, #0
	return ret;
    2a26:	e7fc      	b.n	2a22 <qspi_device_init+0x1e>
    2a28:	200010d3 	.word	0x200010d3
    2a2c:	00007547 	.word	0x00007547

00002a30 <qspi_send_cmd.constprop.0>:
static int qspi_send_cmd(const struct device *dev, const struct qspi_cmd *cmd,
    2a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2a32:	460d      	mov	r5, r1
	if (cmd->tx_buf) {
    2a34:	6841      	ldr	r1, [r0, #4]
    2a36:	b1b1      	cbz	r1, 2a66 <qspi_send_cmd.constprop.0+0x36>
		tx_buf = cmd->tx_buf->buf;
    2a38:	e9d1 1300 	ldrd	r1, r3, [r1]
	if (cmd->rx_buf) {
    2a3c:	6884      	ldr	r4, [r0, #8]
    2a3e:	b1a4      	cbz	r4, 2a6a <qspi_send_cmd.constprop.0+0x3a>
		rx_len = cmd->rx_buf->len;
    2a40:	e9d4 2400 	ldrd	r2, r4, [r4]
	if ((rx_len != 0) && (tx_len != 0)) {
    2a44:	b194      	cbz	r4, 2a6c <qspi_send_cmd.constprop.0+0x3c>
    2a46:	b18b      	cbz	r3, 2a6c <qspi_send_cmd.constprop.0+0x3c>
		if (rx_len != tx_len) {
    2a48:	429c      	cmp	r4, r3
    2a4a:	d108      	bne.n	2a5e <qspi_send_cmd.constprop.0+0x2e>
		xfer_len += tx_len;
    2a4c:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    2a4e:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
    2a50:	7800      	ldrb	r0, [r0, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    2a52:	d90e      	bls.n	2a72 <qspi_send_cmd.constprop.0+0x42>
		LOG_WRN("cinstr %02x transfer too long: %zu",
    2a54:	4602      	mov	r2, r0
    2a56:	2157      	movs	r1, #87	; 0x57
    2a58:	4810      	ldr	r0, [pc, #64]	; (2a9c <qspi_send_cmd.constprop.0+0x6c>)
    2a5a:	f004 fbae 	bl	71ba <z_log_minimal_printk>
}
    2a5e:	f06f 0015 	mvn.w	r0, #21
    2a62:	b003      	add	sp, #12
    2a64:	bd30      	pop	{r4, r5, pc}
	size_t tx_len = 0;
    2a66:	460b      	mov	r3, r1
    2a68:	e7e8      	b.n	2a3c <qspi_send_cmd.constprop.0+0xc>
	void *rx_buf = NULL;
    2a6a:	4622      	mov	r2, r4
		xfer_len += tx_len + rx_len;
    2a6c:	3301      	adds	r3, #1
    2a6e:	4423      	add	r3, r4
    2a70:	e7ed      	b.n	2a4e <qspi_send_cmd.constprop.0+0x1e>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    2a72:	f88d 3001 	strb.w	r3, [sp, #1]
    2a76:	f240 1301 	movw	r3, #257	; 0x101
    2a7a:	f88d 0000 	strb.w	r0, [sp]
    2a7e:	f8ad 3002 	strh.w	r3, [sp, #2]
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    2a82:	4668      	mov	r0, sp
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    2a84:	2300      	movs	r3, #0
    2a86:	f88d 3004 	strb.w	r3, [sp, #4]
    2a8a:	f88d 5005 	strb.w	r5, [sp, #5]
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    2a8e:	f002 f89d 	bl	4bcc <nrfx_qspi_cinstr_xfer>
}
    2a92:	b003      	add	sp, #12
    2a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return qspi_get_zephyr_ret_code(res);
    2a98:	f7ff bf9a 	b.w	29d0 <qspi_get_zephyr_ret_code>
    2a9c:	00008cf3 	.word	0x00008cf3

00002aa0 <qspi_device_uninit.constprop.0>:
static void qspi_device_uninit(const struct device *dev)
    2aa0:	b510      	push	{r4, lr}
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    2aa2:	4c08      	ldr	r4, [pc, #32]	; (2ac4 <qspi_device_uninit.constprop.0+0x24>)
    2aa4:	f002 f8d2 	bl	4c4c <nrfx_qspi_mem_busy_check>
    2aa8:	42a0      	cmp	r0, r4
    2aaa:	d105      	bne.n	2ab8 <qspi_device_uninit.constprop.0+0x18>
		nrfx_qspi_uninit();
    2aac:	f002 f8f0 	bl	4c90 <nrfx_qspi_uninit>
		qspi_initialized = false;
    2ab0:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <qspi_device_uninit.constprop.0+0x28>)
    2ab2:	2200      	movs	r2, #0
    2ab4:	701a      	strb	r2, [r3, #0]
}
    2ab6:	bd10      	pop	{r4, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2ab8:	f24c 3050 	movw	r0, #50000	; 0xc350
    2abc:	f005 f857 	bl	7b6e <z_impl_k_busy_wait>
}
    2ac0:	e7f0      	b.n	2aa4 <qspi_device_uninit.constprop.0+0x4>
    2ac2:	bf00      	nop
    2ac4:	0bad0000 	.word	0x0bad0000
    2ac8:	200010d3 	.word	0x200010d3

00002acc <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    2acc:	4b0c      	ldr	r3, [pc, #48]	; (2b00 <qspi_wait_for_completion.isra.0+0x34>)
    2ace:	4299      	cmp	r1, r3
static inline void qspi_wait_for_completion(const struct device *dev,
    2ad0:	b510      	push	{r4, lr}
    2ad2:	4604      	mov	r4, r0
	if (res == NRFX_SUCCESS) {
    2ad4:	d10f      	bne.n	2af6 <qspi_wait_for_completion.isra.0+0x2a>
    2ad6:	f04f 0320 	mov.w	r3, #32
    2ada:	f3ef 8011 	mrs	r0, BASEPRI
    2ade:	f383 8812 	msr	BASEPRI_MAX, r3
    2ae2:	f3bf 8f6f 	isb	sy
		while (!dev_data->ready) {
    2ae6:	7823      	ldrb	r3, [r4, #0]
    2ae8:	b133      	cbz	r3, 2af8 <qspi_wait_for_completion.isra.0+0x2c>
		dev_data->ready = false;
    2aea:	2300      	movs	r3, #0
    2aec:	7023      	strb	r3, [r4, #0]
	__asm__ volatile(
    2aee:	f380 8811 	msr	BASEPRI, r0
    2af2:	f3bf 8f6f 	isb	sy
}
    2af6:	bd10      	pop	{r4, pc}
    2af8:	f7ff f818 	bl	1b2c <arch_cpu_atomic_idle>
    2afc:	e7eb      	b.n	2ad6 <qspi_wait_for_completion.isra.0+0xa>
    2afe:	bf00      	nop
    2b00:	0bad0000 	.word	0x0bad0000

00002b04 <qspi_nor_read>:
{
    2b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b08:	4681      	mov	r9, r0
    2b0a:	b085      	sub	sp, #20
    2b0c:	460e      	mov	r6, r1
    2b0e:	461c      	mov	r4, r3
	if (!dest) {
    2b10:	4690      	mov	r8, r2
    2b12:	b17a      	cbz	r2, 2b34 <qspi_nor_read+0x30>
	if (!size) {
    2b14:	2b00      	cmp	r3, #0
    2b16:	f000 8092 	beq.w	2c3e <qspi_nor_read+0x13a>
	if (addr < 0 ||
    2b1a:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    2b1c:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    2b1e:	db03      	blt.n	2b28 <qspi_nor_read+0x24>
    2b20:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    2b22:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    2b24:	4293      	cmp	r3, r2
    2b26:	d90b      	bls.n	2b40 <qspi_nor_read+0x3c>
		LOG_ERR("read error: address or size "
    2b28:	4846      	ldr	r0, [pc, #280]	; (2c44 <qspi_nor_read+0x140>)
    2b2a:	4623      	mov	r3, r4
    2b2c:	4632      	mov	r2, r6
    2b2e:	2145      	movs	r1, #69	; 0x45
    2b30:	f004 fb43 	bl	71ba <z_log_minimal_printk>
		return -EINVAL;
    2b34:	f06f 0515 	mvn.w	r5, #21
}
    2b38:	4628      	mov	r0, r5
    2b3a:	b005      	add	sp, #20
    2b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
    2b40:	f7ff ff60 	bl	2a04 <qspi_device_init>
	if (rc != 0) {
    2b44:	4605      	mov	r5, r0
    2b46:	2800      	cmp	r0, #0
    2b48:	d176      	bne.n	2c38 <qspi_nor_read+0x134>
	if (flash_prefix > size) {
    2b4a:	4275      	negs	r5, r6
    2b4c:	f005 0503 	and.w	r5, r5, #3
    2b50:	42a5      	cmp	r5, r4
    2b52:	bf28      	it	cs
    2b54:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    2b56:	f1d8 0300 	rsbs	r3, r8, #0
    2b5a:	f003 0303 	and.w	r3, r3, #3
    2b5e:	f008 0703 	and.w	r7, r8, #3
    2b62:	bf58      	it	pl
    2b64:	425f      	negpl	r7, r3
    2b66:	427f      	negs	r7, r7
    2b68:	f007 0703 	and.w	r7, r7, #3
    2b6c:	42a7      	cmp	r7, r4
    2b6e:	bf28      	it	cs
    2b70:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    2b72:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    2b74:	1be4      	subs	r4, r4, r7
    2b76:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    2b7a:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
    2b7e:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
    2b80:	bfc8      	it	gt
    2b82:	46a2      	movgt	sl, r4
    2b84:	f003 0b03 	and.w	fp, r3, #3
    2b88:	bfc8      	it	gt
    2b8a:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
    2b8e:	f1ba 0f00 	cmp.w	sl, #0
    2b92:	d019      	beq.n	2bc8 <qspi_nor_read+0xc4>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    2b94:	eb08 0307 	add.w	r3, r8, r7
    2b98:	1972      	adds	r2, r6, r5
    2b9a:	4651      	mov	r1, sl
    2b9c:	4618      	mov	r0, r3
    2b9e:	9301      	str	r3, [sp, #4]
    2ba0:	f004 ffc1 	bl	7b26 <nrfx_qspi_read>
    2ba4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    2ba6:	4601      	mov	r1, r0
    2ba8:	f8d9 0010 	ldr.w	r0, [r9, #16]
    2bac:	f7ff ff8e 	bl	2acc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    2bb0:	4a25      	ldr	r2, [pc, #148]	; (2c48 <qspi_nor_read+0x144>)
    2bb2:	4294      	cmp	r4, r2
    2bb4:	d13c      	bne.n	2c30 <qspi_nor_read+0x12c>
		if (flash_prefix != dest_prefix) {
    2bb6:	42bd      	cmp	r5, r7
    2bb8:	d006      	beq.n	2bc8 <qspi_nor_read+0xc4>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    2bba:	9b01      	ldr	r3, [sp, #4]
    2bbc:	4652      	mov	r2, sl
    2bbe:	4619      	mov	r1, r3
    2bc0:	eb08 0005 	add.w	r0, r8, r5
    2bc4:	f004 fbac 	bl	7320 <memmove>
	if (flash_prefix != 0) {
    2bc8:	b1bd      	cbz	r5, 2bfa <qspi_nor_read+0xf6>
				     (WORD_SIZE - flash_prefix));
    2bca:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    2bce:	1bf2      	subs	r2, r6, r7
    2bd0:	2104      	movs	r1, #4
    2bd2:	a802      	add	r0, sp, #8
    2bd4:	f004 ffa7 	bl	7b26 <nrfx_qspi_read>
    2bd8:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    2bda:	4601      	mov	r1, r0
    2bdc:	f8d9 0010 	ldr.w	r0, [r9, #16]
    2be0:	f7ff ff74 	bl	2acc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    2be4:	4b18      	ldr	r3, [pc, #96]	; (2c48 <qspi_nor_read+0x144>)
    2be6:	429c      	cmp	r4, r3
    2be8:	d122      	bne.n	2c30 <qspi_nor_read+0x12c>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    2bea:	f107 0308 	add.w	r3, r7, #8
    2bee:	462a      	mov	r2, r5
    2bf0:	eb0d 0103 	add.w	r1, sp, r3
    2bf4:	4640      	mov	r0, r8
    2bf6:	f004 fbaa 	bl	734e <memcpy>
	if (flash_suffix != 0) {
    2bfa:	f1bb 0f00 	cmp.w	fp, #0
    2bfe:	d016      	beq.n	2c2e <qspi_nor_read+0x12a>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    2c00:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    2c02:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    2c04:	4452      	add	r2, sl
    2c06:	eb0d 0001 	add.w	r0, sp, r1
    2c0a:	f004 ff8c 	bl	7b26 <nrfx_qspi_read>
    2c0e:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    2c10:	4601      	mov	r1, r0
    2c12:	f8d9 0010 	ldr.w	r0, [r9, #16]
    2c16:	f7ff ff59 	bl	2acc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    2c1a:	4b0b      	ldr	r3, [pc, #44]	; (2c48 <qspi_nor_read+0x144>)
    2c1c:	429c      	cmp	r4, r3
    2c1e:	d107      	bne.n	2c30 <qspi_nor_read+0x12c>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    2c20:	eb0a 0005 	add.w	r0, sl, r5
    2c24:	465a      	mov	r2, fp
    2c26:	a902      	add	r1, sp, #8
    2c28:	4440      	add	r0, r8
    2c2a:	f004 fb90 	bl	734e <memcpy>
	return res;
    2c2e:	4c06      	ldr	r4, [pc, #24]	; (2c48 <qspi_nor_read+0x144>)
	rc = qspi_get_zephyr_ret_code(res);
    2c30:	4620      	mov	r0, r4
    2c32:	f7ff fecd 	bl	29d0 <qspi_get_zephyr_ret_code>
    2c36:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    2c38:	f7ff ff32 	bl	2aa0 <qspi_device_uninit.constprop.0>
	return rc;
    2c3c:	e77c      	b.n	2b38 <qspi_nor_read+0x34>
		return 0;
    2c3e:	461d      	mov	r5, r3
    2c40:	e77a      	b.n	2b38 <qspi_nor_read+0x34>
    2c42:	bf00      	nop
    2c44:	00008d1b 	.word	0x00008d1b
    2c48:	0bad0000 	.word	0x0bad0000

00002c4c <qspi_nor_write>:
{
    2c4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    2c50:	4606      	mov	r6, r0
    2c52:	460f      	mov	r7, r1
    2c54:	461d      	mov	r5, r3
	if (!src) {
    2c56:	4690      	mov	r8, r2
    2c58:	b19a      	cbz	r2, 2c82 <qspi_nor_write+0x36>
	if ((size == 0)
    2c5a:	b193      	cbz	r3, 2c82 <qspi_nor_write+0x36>
	    || ((size > 4) && ((size % 4U) != 0))) {
    2c5c:	2b04      	cmp	r3, #4
    2c5e:	d901      	bls.n	2c64 <qspi_nor_write+0x18>
    2c60:	079a      	lsls	r2, r3, #30
    2c62:	d10e      	bne.n	2c82 <qspi_nor_write+0x36>
	if ((addr % 4U) != 0) {
    2c64:	07bb      	lsls	r3, r7, #30
    2c66:	d10c      	bne.n	2c82 <qspi_nor_write+0x36>
	if (addr < 0 ||
    2c68:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    2c6a:	6872      	ldr	r2, [r6, #4]
	if (addr < 0 ||
    2c6c:	db03      	blt.n	2c76 <qspi_nor_write+0x2a>
    2c6e:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    2c70:	197b      	adds	r3, r7, r5
	if (addr < 0 ||
    2c72:	4293      	cmp	r3, r2
    2c74:	d90b      	bls.n	2c8e <qspi_nor_write+0x42>
		LOG_ERR("write error: address or size "
    2c76:	4837      	ldr	r0, [pc, #220]	; (2d54 <qspi_nor_write+0x108>)
    2c78:	462b      	mov	r3, r5
    2c7a:	463a      	mov	r2, r7
    2c7c:	2145      	movs	r1, #69	; 0x45
    2c7e:	f004 fa9c 	bl	71ba <z_log_minimal_printk>
		return -EINVAL;
    2c82:	f06f 0415 	mvn.w	r4, #21
}
    2c86:	4620      	mov	r0, r4
    2c88:	b002      	add	sp, #8
    2c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
    2c8e:	4630      	mov	r0, r6
    2c90:	f7ff feb8 	bl	2a04 <qspi_device_init>
	if (rc != 0) {
    2c94:	4604      	mov	r4, r0
    2c96:	b950      	cbnz	r0, 2cae <qspi_nor_write+0x62>
	res = qspi_nor_write_protection_set(dev, false);
    2c98:	f004 fc74 	bl	7584 <qspi_nor_write_protection_set.isra.0>
	if (!res) {
    2c9c:	4604      	mov	r4, r0
    2c9e:	b148      	cbz	r0, 2cb4 <qspi_nor_write+0x68>
	int res2 = qspi_nor_write_protection_set(dev, true);
    2ca0:	2001      	movs	r0, #1
    2ca2:	f004 fc6f 	bl	7584 <qspi_nor_write_protection_set.isra.0>
	rc = qspi_get_zephyr_ret_code(res);
    2ca6:	4620      	mov	r0, r4
    2ca8:	f7ff fe92 	bl	29d0 <qspi_get_zephyr_ret_code>
    2cac:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    2cae:	f7ff fef7 	bl	2aa0 <qspi_device_uninit.constprop.0>
	return rc;
    2cb2:	e7e8      	b.n	2c86 <qspi_nor_write+0x3a>
		if (size < 4U) {
    2cb4:	2d03      	cmp	r5, #3
    2cb6:	d81e      	bhi.n	2cf6 <qspi_nor_write+0xaa>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    2cb8:	2104      	movs	r1, #4
    2cba:	463a      	mov	r2, r7
    2cbc:	eb0d 0001 	add.w	r0, sp, r1
    2cc0:	f004 ff31 	bl	7b26 <nrfx_qspi_read>
    2cc4:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    2cc6:	4601      	mov	r1, r0
    2cc8:	6930      	ldr	r0, [r6, #16]
    2cca:	f7ff feff 	bl	2acc <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    2cce:	4b22      	ldr	r3, [pc, #136]	; (2d58 <qspi_nor_write+0x10c>)
    2cd0:	429c      	cmp	r4, r3
    2cd2:	d133      	bne.n	2d3c <qspi_nor_write+0xf0>
		memcpy(buf, sptr, slen);
    2cd4:	462a      	mov	r2, r5
    2cd6:	4641      	mov	r1, r8
    2cd8:	a801      	add	r0, sp, #4
    2cda:	f004 fb38 	bl	734e <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    2cde:	2104      	movs	r1, #4
    2ce0:	463a      	mov	r2, r7
    2ce2:	eb0d 0001 	add.w	r0, sp, r1
			res = nrfx_qspi_write(src, size, addr);
    2ce6:	f004 ff1b 	bl	7b20 <nrfx_qspi_write>
    2cea:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    2cec:	4601      	mov	r1, r0
    2cee:	6930      	ldr	r0, [r6, #16]
    2cf0:	f7ff feec 	bl	2acc <qspi_wait_for_completion.isra.0>
    2cf4:	e022      	b.n	2d3c <qspi_nor_write+0xf0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2cf6:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    2cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2cfe:	d024      	beq.n	2d4a <qspi_nor_write+0xfe>
			if (res == NRFX_SUCCESS) {
    2d00:	f8df a054 	ldr.w	sl, [pc, #84]	; 2d58 <qspi_nor_write+0x10c>
			size_t len = MIN(slen, sizeof(buf));
    2d04:	2d04      	cmp	r5, #4
    2d06:	46a9      	mov	r9, r5
    2d08:	bf28      	it	cs
    2d0a:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
    2d0e:	464a      	mov	r2, r9
    2d10:	4641      	mov	r1, r8
    2d12:	a801      	add	r0, sp, #4
    2d14:	f004 fb1b 	bl	734e <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    2d18:	2104      	movs	r1, #4
    2d1a:	463a      	mov	r2, r7
    2d1c:	eb0d 0001 	add.w	r0, sp, r1
    2d20:	f004 fefe 	bl	7b20 <nrfx_qspi_write>
    2d24:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    2d26:	4601      	mov	r1, r0
    2d28:	6930      	ldr	r0, [r6, #16]
    2d2a:	f7ff fecf 	bl	2acc <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    2d2e:	4554      	cmp	r4, sl
    2d30:	d104      	bne.n	2d3c <qspi_nor_write+0xf0>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    2d32:	ebb5 0509 	subs.w	r5, r5, r9
				sp += len;
    2d36:	44c8      	add	r8, r9
				addr += len;
    2d38:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    2d3a:	d1e3      	bne.n	2d04 <qspi_nor_write+0xb8>
	int res2 = qspi_nor_write_protection_set(dev, true);
    2d3c:	2001      	movs	r0, #1
    2d3e:	f004 fc21 	bl	7584 <qspi_nor_write_protection_set.isra.0>
		res = res2;
    2d42:	2c00      	cmp	r4, #0
    2d44:	bf08      	it	eq
    2d46:	4604      	moveq	r4, r0
    2d48:	e7ad      	b.n	2ca6 <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
    2d4a:	463a      	mov	r2, r7
    2d4c:	4629      	mov	r1, r5
    2d4e:	4640      	mov	r0, r8
    2d50:	e7c9      	b.n	2ce6 <qspi_nor_write+0x9a>
    2d52:	bf00      	nop
    2d54:	00008d69 	.word	0x00008d69
    2d58:	0bad0000 	.word	0x0bad0000

00002d5c <qspi_nor_erase>:
{
    2d5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d60:	4615      	mov	r5, r2
	if (addr < 0 ||
    2d62:	1e0a      	subs	r2, r1, #0
	const struct qspi_nor_config *params = dev->config;
    2d64:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
    2d68:	4680      	mov	r8, r0
	if (addr < 0 ||
    2d6a:	db05      	blt.n	2d78 <qspi_nor_erase+0x1c>
    2d6c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
    2d70:	1951      	adds	r1, r2, r5
	if (addr < 0 ||
    2d72:	4299      	cmp	r1, r3
	    (addr + size) > params->size) {
    2d74:	4617      	mov	r7, r2
	if (addr < 0 ||
    2d76:	d909      	bls.n	2d8c <qspi_nor_erase+0x30>
		LOG_ERR("erase error: address or size "
    2d78:	4834      	ldr	r0, [pc, #208]	; (2e4c <qspi_nor_erase+0xf0>)
    2d7a:	462b      	mov	r3, r5
    2d7c:	2145      	movs	r1, #69	; 0x45
    2d7e:	f004 fa1c 	bl	71ba <z_log_minimal_printk>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    2d82:	f06f 0415 	mvn.w	r4, #21
}
    2d86:	4620      	mov	r0, r4
    2d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
    2d8c:	f3c2 020b 	ubfx	r2, r2, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    2d90:	2d00      	cmp	r5, #0
    2d92:	d0f6      	beq.n	2d82 <qspi_nor_erase+0x26>
    2d94:	f3c5 030b 	ubfx	r3, r5, #0, #12
    2d98:	4313      	orrs	r3, r2
    2d9a:	d1f2      	bne.n	2d82 <qspi_nor_erase+0x26>
	rv = qspi_device_init(dev);
    2d9c:	f7ff fe32 	bl	2a04 <qspi_device_init>
	if (rv != 0) {
    2da0:	4604      	mov	r4, r0
    2da2:	b9f0      	cbnz	r0, 2de2 <qspi_nor_erase+0x86>
	rv = qspi_nor_write_protection_set(dev, false);
    2da4:	f004 fbee 	bl	7584 <qspi_nor_write_protection_set.isra.0>
	if (rv != 0) {
    2da8:	4604      	mov	r4, r0
    2daa:	b9d0      	cbnz	r0, 2de2 <qspi_nor_erase+0x86>
		if (res == NRFX_SUCCESS) {
    2dac:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 2e5c <qspi_nor_erase+0x100>
		if (size == params->size) {
    2db0:	f8d9 3018 	ldr.w	r3, [r9, #24]
    2db4:	42ab      	cmp	r3, r5
    2db6:	d117      	bne.n	2de8 <qspi_nor_erase+0x8c>
			res = nrfx_qspi_chip_erase();
    2db8:	f004 feb8 	bl	7b2c <nrfx_qspi_chip_erase>
    2dbc:	46ab      	mov	fp, r5
    2dbe:	4606      	mov	r6, r0
		qspi_wait_for_completion(dev, res);
    2dc0:	f8d8 0010 	ldr.w	r0, [r8, #16]
    2dc4:	4631      	mov	r1, r6
    2dc6:	f7ff fe81 	bl	2acc <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    2dca:	4556      	cmp	r6, sl
    2dcc:	d132      	bne.n	2e34 <qspi_nor_erase+0xd8>
	while (size > 0) {
    2dce:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
    2dd2:	445f      	add	r7, fp
	while (size > 0) {
    2dd4:	d1ec      	bne.n	2db0 <qspi_nor_erase+0x54>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    2dd6:	2001      	movs	r0, #1
    2dd8:	f004 fbd4 	bl	7584 <qspi_nor_write_protection_set.isra.0>
    2ddc:	2c00      	cmp	r4, #0
    2dde:	bf08      	it	eq
    2de0:	4604      	moveq	r4, r0
	qspi_device_uninit(dev);
    2de2:	f7ff fe5d 	bl	2aa0 <qspi_device_uninit.constprop.0>
	return rv;
    2de6:	e7ce      	b.n	2d86 <qspi_nor_erase+0x2a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    2de8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    2dec:	d309      	bcc.n	2e02 <qspi_nor_erase+0xa6>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    2dee:	b2bb      	uxth	r3, r7
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    2df0:	b953      	cbnz	r3, 2e08 <qspi_nor_erase+0xac>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    2df2:	4639      	mov	r1, r7
    2df4:	2001      	movs	r0, #1
    2df6:	f001 ff9f 	bl	4d38 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    2dfa:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    2dfe:	4606      	mov	r6, r0
			adj = QSPI_BLOCK_SIZE;
    2e00:	e7de      	b.n	2dc0 <qspi_nor_erase+0x64>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    2e02:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    2e06:	d309      	bcc.n	2e1c <qspi_nor_erase+0xc0>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    2e08:	f3c7 000b 	ubfx	r0, r7, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    2e0c:	b930      	cbnz	r0, 2e1c <qspi_nor_erase+0xc0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    2e0e:	4639      	mov	r1, r7
    2e10:	f001 ff92 	bl	4d38 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    2e14:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    2e18:	4606      	mov	r6, r0
			adj = QSPI_SECTOR_SIZE;
    2e1a:	e7d1      	b.n	2dc0 <qspi_nor_erase+0x64>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
    2e1c:	480c      	ldr	r0, [pc, #48]	; (2e50 <qspi_nor_erase+0xf4>)
			res = NRFX_ERROR_INVALID_PARAM;
    2e1e:	4e0d      	ldr	r6, [pc, #52]	; (2e54 <qspi_nor_erase+0xf8>)
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
    2e20:	462b      	mov	r3, r5
    2e22:	463a      	mov	r2, r7
    2e24:	2145      	movs	r1, #69	; 0x45
    2e26:	f004 f9c8 	bl	71ba <z_log_minimal_printk>
		qspi_wait_for_completion(dev, res);
    2e2a:	490a      	ldr	r1, [pc, #40]	; (2e54 <qspi_nor_erase+0xf8>)
    2e2c:	f8d8 0010 	ldr.w	r0, [r8, #16]
    2e30:	f7ff fe4c 	bl	2acc <qspi_wait_for_completion.isra.0>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
    2e34:	4808      	ldr	r0, [pc, #32]	; (2e58 <qspi_nor_erase+0xfc>)
    2e36:	462b      	mov	r3, r5
    2e38:	463a      	mov	r2, r7
    2e3a:	2145      	movs	r1, #69	; 0x45
    2e3c:	f004 f9bd 	bl	71ba <z_log_minimal_printk>
			rv = qspi_get_zephyr_ret_code(res);
    2e40:	4630      	mov	r0, r6
    2e42:	f7ff fdc5 	bl	29d0 <qspi_get_zephyr_ret_code>
    2e46:	4604      	mov	r4, r0
			break;
    2e48:	e7c5      	b.n	2dd6 <qspi_nor_erase+0x7a>
    2e4a:	bf00      	nop
    2e4c:	00008db8 	.word	0x00008db8
    2e50:	00008e07 	.word	0x00008e07
    2e54:	0bad0004 	.word	0x0bad0004
    2e58:	00008e2a 	.word	0x00008e2a
    2e5c:	0bad0000 	.word	0x0bad0000

00002e60 <qspi_nor_init>:
{
    2e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    2e64:	6843      	ldr	r3, [r0, #4]
    2e66:	6a1e      	ldr	r6, [r3, #32]
{
    2e68:	b08a      	sub	sp, #40	; 0x28
    2e6a:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2e6c:	aa07      	add	r2, sp, #28
    2e6e:	2100      	movs	r1, #0
    2e70:	4630      	mov	r0, r6
    2e72:	f004 fc88 	bl	7786 <pinctrl_lookup_state>
	if (ret < 0) {
    2e76:	1e04      	subs	r4, r0, #0
    2e78:	db2e      	blt.n	2ed8 <qspi_nor_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2e7a:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2e7c:	6832      	ldr	r2, [r6, #0]
    2e7e:	7919      	ldrb	r1, [r3, #4]
    2e80:	6818      	ldr	r0, [r3, #0]
    2e82:	f000 fd4f 	bl	3924 <pinctrl_configure_pins>
	if (ret < 0) {
    2e86:	1e04      	subs	r4, r0, #0
    2e88:	db26      	blt.n	2ed8 <qspi_nor_init+0x78>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    2e8a:	2200      	movs	r2, #0
    2e8c:	2101      	movs	r1, #1
    2e8e:	2029      	movs	r0, #41	; 0x29
    2e90:	f7fe feb6 	bl	1c00 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
    2e94:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    2e96:	692a      	ldr	r2, [r5, #16]
    2e98:	4947      	ldr	r1, [pc, #284]	; (2fb8 <qspi_nor_init+0x158>)
    2e9a:	4630      	mov	r0, r6
    2e9c:	f001 fdb6 	bl	4a0c <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
    2ea0:	f7ff fd96 	bl	29d0 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    2ea4:	1e04      	subs	r4, r0, #0
    2ea6:	db17      	blt.n	2ed8 <qspi_nor_init+0x78>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    2ea8:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    2eaa:	3b02      	subs	r3, #2
    2eac:	2b01      	cmp	r3, #1
    2eae:	d917      	bls.n	2ee0 <qspi_nor_init+0x80>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
    2eb0:	f896 800a 	ldrb.w	r8, [r6, #10]
    2eb4:	f1a8 0803 	sub.w	r8, r8, #3
    2eb8:	f1b8 0f01 	cmp.w	r8, #1
    2ebc:	bf8c      	ite	hi
    2ebe:	f04f 0800 	movhi.w	r8, #0
    2ec2:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
    2ec6:	f004 fb42 	bl	754e <qspi_rdsr.constprop.0.isra.0>
		if (ret < 0) {
    2eca:	1e04      	subs	r4, r0, #0
    2ecc:	da0b      	bge.n	2ee6 <qspi_nor_init+0x86>
			LOG_ERR("RDSR failed: %d", ret);
    2ece:	483b      	ldr	r0, [pc, #236]	; (2fbc <qspi_nor_init+0x15c>)
    2ed0:	4622      	mov	r2, r4
    2ed2:	2145      	movs	r1, #69	; 0x45
    2ed4:	f004 f971 	bl	71ba <z_log_minimal_printk>
}
    2ed8:	4620      	mov	r0, r4
    2eda:	b00a      	add	sp, #40	; 0x28
    2edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    2ee0:	f04f 0801 	mov.w	r8, #1
    2ee4:	e7ef      	b.n	2ec6 <qspi_nor_init+0x66>
		uint8_t sr = (uint8_t)ret;
    2ee6:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
    2ee8:	f3c4 1480 	ubfx	r4, r4, #6, #1
    2eec:	45a0      	cmp	r8, r4
    2eee:	ae04      	add	r6, sp, #16
    2ef0:	af05      	add	r7, sp, #20
    2ef2:	d026      	beq.n	2f42 <qspi_nor_init+0xe2>
	uint8_t sr_array[2] = {0};
    2ef4:	2300      	movs	r3, #0
	const struct qspi_buf sr_buf = {
    2ef6:	2101      	movs	r1, #1
			sr ^= qe_mask;
    2ef8:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	ret = qspi_send_cmd(dev, &cmd, true);
    2efc:	a807      	add	r0, sp, #28
	struct qspi_cmd cmd = {
    2efe:	e9cd 1306 	strd	r1, r3, [sp, #24]
	uint8_t sr_array[2] = {0};
    2f02:	f8ad 3010 	strh.w	r3, [sp, #16]
	const struct qspi_buf sr_buf = {
    2f06:	9605      	str	r6, [sp, #20]
		sr_array[0] = sr_val;
    2f08:	f88d 2010 	strb.w	r2, [sp, #16]
	struct qspi_cmd cmd = {
    2f0c:	9309      	str	r3, [sp, #36]	; 0x24
    2f0e:	f88d 101c 	strb.w	r1, [sp, #28]
    2f12:	9708      	str	r7, [sp, #32]
	ret = qspi_send_cmd(dev, &cmd, true);
    2f14:	f7ff fd8c 	bl	2a30 <qspi_send_cmd.constprop.0>
	if (ret == 0) {
    2f18:	1e04      	subs	r4, r0, #0
    2f1a:	d00c      	beq.n	2f36 <qspi_nor_init+0xd6>
		if (ret < 0) {
    2f1c:	dadc      	bge.n	2ed8 <qspi_nor_init+0x78>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
    2f1e:	4928      	ldr	r1, [pc, #160]	; (2fc0 <qspi_nor_init+0x160>)
    2f20:	4a28      	ldr	r2, [pc, #160]	; (2fc4 <qspi_nor_init+0x164>)
    2f22:	4829      	ldr	r0, [pc, #164]	; (2fc8 <qspi_nor_init+0x168>)
    2f24:	f1b8 0f00 	cmp.w	r8, #0
    2f28:	bf08      	it	eq
    2f2a:	460a      	moveq	r2, r1
    2f2c:	4623      	mov	r3, r4
    2f2e:	2145      	movs	r1, #69	; 0x45
    2f30:	f004 f943 	bl	71ba <z_log_minimal_printk>
	if (ret != 0) {
    2f34:	e7d0      	b.n	2ed8 <qspi_nor_init+0x78>
		ret = qspi_rdsr(dev, 1);
    2f36:	f004 fb0a 	bl	754e <qspi_rdsr.constprop.0.isra.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    2f3a:	1e04      	subs	r4, r0, #0
    2f3c:	dbef      	blt.n	2f1e <qspi_nor_init+0xbe>
    2f3e:	07e3      	lsls	r3, r4, #31
    2f40:	d4f9      	bmi.n	2f36 <qspi_nor_init+0xd6>
	qspi_device_uninit(dev);
    2f42:	f7ff fdad 	bl	2aa0 <qspi_device_uninit.constprop.0>
	const struct qspi_cmd cmd = {
    2f46:	f04f 0803 	mov.w	r8, #3
    2f4a:	2300      	movs	r3, #0
    2f4c:	e9cd 8306 	strd	r8, r3, [sp, #24]
    2f50:	9308      	str	r3, [sp, #32]
	int ret = qspi_device_init(dev);
    2f52:	4628      	mov	r0, r5
	const struct qspi_cmd cmd = {
    2f54:	239f      	movs	r3, #159	; 0x9f
	const struct qspi_buf rx_buf = {
    2f56:	9605      	str	r6, [sp, #20]
	const struct qspi_cmd cmd = {
    2f58:	f88d 301c 	strb.w	r3, [sp, #28]
    2f5c:	9709      	str	r7, [sp, #36]	; 0x24
	int ret = qspi_device_init(dev);
    2f5e:	f7ff fd51 	bl	2a04 <qspi_device_init>
	if (ret == 0) {
    2f62:	4601      	mov	r1, r0
    2f64:	b120      	cbz	r0, 2f70 <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
    2f66:	f7ff fd9b 	bl	2aa0 <qspi_device_uninit.constprop.0>
		return -ENODEV;
    2f6a:	f06f 0412 	mvn.w	r4, #18
    2f6e:	e7b3      	b.n	2ed8 <qspi_nor_init+0x78>
		ret = qspi_send_cmd(dev, &cmd, false);
    2f70:	a807      	add	r0, sp, #28
    2f72:	f7ff fd5d 	bl	2a30 <qspi_send_cmd.constprop.0>
    2f76:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    2f78:	f7ff fd92 	bl	2aa0 <qspi_device_uninit.constprop.0>
	if (ret != 0) {
    2f7c:	2c00      	cmp	r4, #0
    2f7e:	d1f4      	bne.n	2f6a <qspi_nor_init+0x10a>
	const struct qspi_nor_config *qnc = dev->config;
    2f80:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    2f82:	4642      	mov	r2, r8
    2f84:	4631      	mov	r1, r6
    2f86:	f105 001c 	add.w	r0, r5, #28
    2f8a:	f004 f9b9 	bl	7300 <memcmp>
    2f8e:	4604      	mov	r4, r0
    2f90:	2800      	cmp	r0, #0
    2f92:	d0a1      	beq.n	2ed8 <qspi_nor_init+0x78>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
    2f94:	7fab      	ldrb	r3, [r5, #30]
    2f96:	9303      	str	r3, [sp, #12]
    2f98:	7f6b      	ldrb	r3, [r5, #29]
    2f9a:	9302      	str	r3, [sp, #8]
    2f9c:	7f2b      	ldrb	r3, [r5, #28]
    2f9e:	9301      	str	r3, [sp, #4]
    2fa0:	f89d 3012 	ldrb.w	r3, [sp, #18]
    2fa4:	9300      	str	r3, [sp, #0]
    2fa6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2faa:	f89d 3011 	ldrb.w	r3, [sp, #17]
    2fae:	4807      	ldr	r0, [pc, #28]	; (2fcc <qspi_nor_init+0x16c>)
    2fb0:	2145      	movs	r1, #69	; 0x45
    2fb2:	f004 f902 	bl	71ba <z_log_minimal_printk>
		return -ENODEV;
    2fb6:	e7d8      	b.n	2f6a <qspi_nor_init+0x10a>
    2fb8:	00007547 	.word	0x00007547
    2fbc:	00008e53 	.word	0x00008e53
    2fc0:	00008e4d 	.word	0x00008e4d
    2fc4:	00008604 	.word	0x00008604
    2fc8:	00008e68 	.word	0x00008e68
    2fcc:	00008e7e 	.word	0x00008e7e

00002fd0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2fd0:	4b02      	ldr	r3, [pc, #8]	; (2fdc <flash_nrf_pages_layout+0xc>)
    2fd2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2fd4:	2301      	movs	r3, #1
    2fd6:	6013      	str	r3, [r2, #0]
}
    2fd8:	4770      	bx	lr
    2fda:	bf00      	nop
    2fdc:	20000eb8 	.word	0x20000eb8

00002fe0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2fe0:	4800      	ldr	r0, [pc, #0]	; (2fe4 <flash_nrf_get_parameters+0x4>)
    2fe2:	4770      	bx	lr
    2fe4:	000080c8 	.word	0x000080c8

00002fe8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2fe8:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2fea:	f004 fd87 	bl	7afc <nrfx_nvmc_flash_page_count_get>
    2fee:	4c03      	ldr	r4, [pc, #12]	; (2ffc <nrf_flash_init+0x14>)
    2ff0:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2ff2:	f004 fd7f 	bl	7af4 <nrfx_nvmc_flash_page_size_get>
    2ff6:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2ff8:	2000      	movs	r0, #0
    2ffa:	bd10      	pop	{r4, pc}
    2ffc:	20000eb8 	.word	0x20000eb8

00003000 <flash_nrf_read>:
{
    3000:	b570      	push	{r4, r5, r6, lr}
    3002:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    3004:	4628      	mov	r0, r5
    3006:	4619      	mov	r1, r3
{
    3008:	4616      	mov	r6, r2
    300a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    300c:	f004 facf 	bl	75ae <is_regular_addr_valid>
    3010:	b940      	cbnz	r0, 3024 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3012:	4808      	ldr	r0, [pc, #32]	; (3034 <flash_nrf_read+0x34>)
    3014:	4623      	mov	r3, r4
    3016:	462a      	mov	r2, r5
    3018:	2145      	movs	r1, #69	; 0x45
    301a:	f004 f8ce 	bl	71ba <z_log_minimal_printk>
    301e:	f06f 0015 	mvn.w	r0, #21
}
    3022:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    3024:	b124      	cbz	r4, 3030 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
    3026:	4622      	mov	r2, r4
    3028:	4629      	mov	r1, r5
    302a:	4630      	mov	r0, r6
    302c:	f004 f98f 	bl	734e <memcpy>
		return 0;
    3030:	2000      	movs	r0, #0
    3032:	e7f6      	b.n	3022 <flash_nrf_read+0x22>
    3034:	00008ecb 	.word	0x00008ecb

00003038 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    3038:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    303c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    3040:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    3044:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    3048:	f023 031f 	bic.w	r3, r3, #31
    304c:	430b      	orrs	r3, r1
    pofcon |=
    304e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    3052:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    3056:	4b02      	ldr	r3, [pc, #8]	; (3060 <restore_pofwarn.part.0+0x28>)
    3058:	2200      	movs	r2, #0
    305a:	701a      	strb	r2, [r3, #0]
	}
}
    305c:	4770      	bx	lr
    305e:	bf00      	nop
    3060:	200010d4 	.word	0x200010d4

00003064 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3068:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    306c:	2b08      	cmp	r3, #8
    306e:	d120      	bne.n	30b2 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
    3070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3074:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
    3078:	07cb      	lsls	r3, r1, #31
    307a:	d51a      	bpl.n	30b2 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
    307c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    3080:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    3084:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
    3088:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
    308a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    308e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    3092:	b15b      	cbz	r3, 30ac <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
    3094:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    3098:	f023 031f 	bic.w	r3, r3, #31
    309c:	430b      	orrs	r3, r1
    pofcon |=
    309e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    30a2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
    30a6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
    30aa:	4770      	bx	lr
		pofcon_enabled = enabled;
    30ac:	4b02      	ldr	r3, [pc, #8]	; (30b8 <suspend_pofwarn+0x54>)
    30ae:	2201      	movs	r2, #1
    30b0:	701a      	strb	r2, [r3, #0]
		return 0;
    30b2:	2000      	movs	r0, #0
}
    30b4:	4770      	bx	lr
    30b6:	bf00      	nop
    30b8:	200010d4 	.word	0x200010d4

000030bc <flash_nrf_erase>:
{
    30bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c0:	460f      	mov	r7, r1
    30c2:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    30c4:	f004 fd16 	bl	7af4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    30c8:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    30ca:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    30cc:	4638      	mov	r0, r7
    30ce:	f004 fa6e 	bl	75ae <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    30d2:	46b8      	mov	r8, r7
	if (is_regular_addr_valid(addr, size)) {
    30d4:	b360      	cbz	r0, 3130 <flash_nrf_erase+0x74>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    30d6:	fbb7 f3f6 	udiv	r3, r7, r6
    30da:	fb06 7313 	mls	r3, r6, r3, r7
    30de:	b923      	cbnz	r3, 30ea <flash_nrf_erase+0x2e>
    30e0:	fbb5 f4f6 	udiv	r4, r5, r6
    30e4:	fb06 5414 	mls	r4, r6, r4, r5
    30e8:	b144      	cbz	r4, 30fc <flash_nrf_erase+0x40>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    30ea:	4814      	ldr	r0, [pc, #80]	; (313c <flash_nrf_erase+0x80>)
    30ec:	462b      	mov	r3, r5
    30ee:	463a      	mov	r2, r7
    30f0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
    30f2:	f004 f862 	bl	71ba <z_log_minimal_printk>
			return -EINVAL;
    30f6:	f06f 0415 	mvn.w	r4, #21
    30fa:	e013      	b.n	3124 <flash_nrf_erase+0x68>
		if (!n_pages) {
    30fc:	42ae      	cmp	r6, r5
    30fe:	d811      	bhi.n	3124 <flash_nrf_erase+0x68>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3100:	f004 fcf8 	bl	7af4 <nrfx_nvmc_flash_page_size_get>
	if (pofcon_enabled) {
    3104:	4f0e      	ldr	r7, [pc, #56]	; (3140 <flash_nrf_erase+0x84>)
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3106:	4606      	mov	r6, r0
		if (SUSPEND_POFWARN()) {
    3108:	f7ff ffac 	bl	3064 <suspend_pofwarn>
    310c:	4604      	mov	r4, r0
    310e:	b960      	cbnz	r0, 312a <flash_nrf_erase+0x6e>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    3110:	4640      	mov	r0, r8
    3112:	f001 fb41 	bl	4798 <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    3116:	783b      	ldrb	r3, [r7, #0]
    3118:	b10b      	cbz	r3, 311e <flash_nrf_erase+0x62>
    311a:	f7ff ff8d 	bl	3038 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    311e:	1bad      	subs	r5, r5, r6
    3120:	44b0      	add	r8, r6
    3122:	d1f1      	bne.n	3108 <flash_nrf_erase+0x4c>
}
    3124:	4620      	mov	r0, r4
    3126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ECANCELED;
    312a:	f06f 048b 	mvn.w	r4, #139	; 0x8b
	return ret;
    312e:	e7f9      	b.n	3124 <flash_nrf_erase+0x68>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3130:	4804      	ldr	r0, [pc, #16]	; (3144 <flash_nrf_erase+0x88>)
    3132:	462b      	mov	r3, r5
    3134:	463a      	mov	r2, r7
    3136:	2145      	movs	r1, #69	; 0x45
    3138:	e7db      	b.n	30f2 <flash_nrf_erase+0x36>
    313a:	bf00      	nop
    313c:	00008eed 	.word	0x00008eed
    3140:	200010d4 	.word	0x200010d4
    3144:	00008ecb 	.word	0x00008ecb

00003148 <flash_nrf_write>:
{
    3148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    314c:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    314e:	4630      	mov	r0, r6
    3150:	4619      	mov	r1, r3
{
    3152:	4617      	mov	r7, r2
    3154:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3156:	f004 fa2a 	bl	75ae <is_regular_addr_valid>
    315a:	b948      	cbnz	r0, 3170 <flash_nrf_write+0x28>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    315c:	481b      	ldr	r0, [pc, #108]	; (31cc <flash_nrf_write+0x84>)
    315e:	4623      	mov	r3, r4
    3160:	4632      	mov	r2, r6
    3162:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3164:	f004 f829 	bl	71ba <z_log_minimal_printk>
		return -EINVAL;
    3168:	f06f 0015 	mvn.w	r0, #21
}
    316c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3170:	ea46 0504 	orr.w	r5, r6, r4
    3174:	f015 0503 	ands.w	r5, r5, #3
    3178:	d004      	beq.n	3184 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    317a:	4815      	ldr	r0, [pc, #84]	; (31d0 <flash_nrf_write+0x88>)
    317c:	4623      	mov	r3, r4
    317e:	4632      	mov	r2, r6
    3180:	2145      	movs	r1, #69	; 0x45
    3182:	e7ef      	b.n	3164 <flash_nrf_write+0x1c>
	if (!len) {
    3184:	b1fc      	cbz	r4, 31c6 <flash_nrf_write+0x7e>
	if (pofcon_enabled) {
    3186:	f8df 9050 	ldr.w	r9, [pc, #80]	; 31d8 <flash_nrf_write+0x90>
	while (w_ctx->len >= sizeof(uint32_t)) {
    318a:	192b      	adds	r3, r5, r4
    318c:	2b03      	cmp	r3, #3
    318e:	eba6 0805 	sub.w	r8, r6, r5
    3192:	d806      	bhi.n	31a2 <flash_nrf_write+0x5a>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3194:	4a0f      	ldr	r2, [pc, #60]	; (31d4 <flash_nrf_write+0x8c>)
    3196:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    319a:	07db      	lsls	r3, r3, #31
    319c:	d5fb      	bpl.n	3196 <flash_nrf_write+0x4e>
	return FLASH_OP_DONE;
    319e:	2000      	movs	r0, #0
    31a0:	e7e4      	b.n	316c <flash_nrf_write+0x24>
		if (SUSPEND_POFWARN()) {
    31a2:	f7ff ff5f 	bl	3064 <suspend_pofwarn>
    31a6:	b958      	cbnz	r0, 31c0 <flash_nrf_write+0x78>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    31a8:	1b7b      	subs	r3, r7, r5
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    31aa:	4640      	mov	r0, r8
    31ac:	6819      	ldr	r1, [r3, #0]
    31ae:	f001 fb13 	bl	47d8 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    31b2:	f899 3000 	ldrb.w	r3, [r9]
    31b6:	b10b      	cbz	r3, 31bc <flash_nrf_write+0x74>
    31b8:	f7ff ff3e 	bl	3038 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    31bc:	3d04      	subs	r5, #4
}
    31be:	e7e4      	b.n	318a <flash_nrf_write+0x42>
			return -ECANCELED;
    31c0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return ret;
    31c4:	e7d2      	b.n	316c <flash_nrf_write+0x24>
		return 0;
    31c6:	4620      	mov	r0, r4
    31c8:	e7d0      	b.n	316c <flash_nrf_write+0x24>
    31ca:	bf00      	nop
    31cc:	00008ecb 	.word	0x00008ecb
    31d0:	00008f11 	.word	0x00008f11
    31d4:	4001e000 	.word	0x4001e000
    31d8:	200010d4 	.word	0x200010d4

000031dc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    31dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31de:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    31e0:	6907      	ldr	r7, [r0, #16]
{
    31e2:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    31e4:	f004 fcbd 	bl	7b62 <k_is_in_isr>
    31e8:	b990      	cbnz	r0, 3210 <uarte_nrfx_poll_out+0x34>
	return !z_sys_post_kernel;
    31ea:	4b2c      	ldr	r3, [pc, #176]	; (329c <uarte_nrfx_poll_out+0xc0>)
    31ec:	781b      	ldrb	r3, [r3, #0]
    31ee:	b17b      	cbz	r3, 3210 <uarte_nrfx_poll_out+0x34>
{
    31f0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    31f2:	6860      	ldr	r0, [r4, #4]
    31f4:	f004 fa72 	bl	76dc <is_tx_ready.isra.0>
    31f8:	b9e0      	cbnz	r0, 3234 <uarte_nrfx_poll_out+0x58>
    31fa:	2001      	movs	r0, #1
    31fc:	f004 fbcf 	bl	799e <nrfx_busy_wait>
    3200:	3e01      	subs	r6, #1
    3202:	d1f6      	bne.n	31f2 <uarte_nrfx_poll_out+0x16>
    3204:	e7f4      	b.n	31f0 <uarte_nrfx_poll_out+0x14>
    3206:	f386 8811 	msr	BASEPRI, r6
    320a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    320e:	e7ef      	b.n	31f0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3210:	f04f 0320 	mov.w	r3, #32
    3214:	f3ef 8611 	mrs	r6, BASEPRI
    3218:	f383 8812 	msr	BASEPRI_MAX, r3
    321c:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3220:	6860      	ldr	r0, [r4, #4]
    3222:	4631      	mov	r1, r6
    3224:	f004 fa5a 	bl	76dc <is_tx_ready.isra.0>
    3228:	b990      	cbnz	r0, 3250 <uarte_nrfx_poll_out+0x74>
	__asm__ volatile(
    322a:	f386 8811 	msr	BASEPRI, r6
    322e:	f3bf 8f6f 	isb	sy
}
    3232:	e7ed      	b.n	3210 <uarte_nrfx_poll_out+0x34>
	__asm__ volatile(
    3234:	f04f 0320 	mov.w	r3, #32
    3238:	f3ef 8611 	mrs	r6, BASEPRI
    323c:	f383 8812 	msr	BASEPRI_MAX, r3
    3240:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3244:	6860      	ldr	r0, [r4, #4]
    3246:	4631      	mov	r1, r6
    3248:	f004 fa48 	bl	76dc <is_tx_ready.isra.0>
    324c:	2800      	cmp	r0, #0
    324e:	d0da      	beq.n	3206 <uarte_nrfx_poll_out+0x2a>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
    3250:	693b      	ldr	r3, [r7, #16]
    3252:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    3254:	6862      	ldr	r2, [r4, #4]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3256:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    3258:	6813      	ldr	r3, [r2, #0]
    325a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    325e:	2001      	movs	r0, #1
    3260:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3264:	2000      	movs	r0, #0
    3266:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    326a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    326e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3272:	6852      	ldr	r2, [r2, #4]
    3274:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    3278:	06d2      	lsls	r2, r2, #27
    327a:	d508      	bpl.n	328e <uarte_nrfx_poll_out+0xb2>
	return config->uarte_regs;
    327c:	6862      	ldr	r2, [r4, #4]
    327e:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3280:	2008      	movs	r0, #8
    3282:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3286:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    328a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    328e:	2201      	movs	r2, #1
    3290:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3292:	f381 8811 	msr	BASEPRI, r1
    3296:	f3bf 8f6f 	isb	sy
	tx_start(dev, data->char_out, 1);

	irq_unlock(key);
}
    329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    329c:	200014e7 	.word	0x200014e7

000032a0 <uarte_nrfx_configure>:
{
    32a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    32a2:	794b      	ldrb	r3, [r1, #5]
    32a4:	2b01      	cmp	r3, #1
    32a6:	d026      	beq.n	32f6 <uarte_nrfx_configure+0x56>
    32a8:	2b03      	cmp	r3, #3
    32aa:	d121      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    32ac:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    32ae:	798b      	ldrb	r3, [r1, #6]
    32b0:	2b03      	cmp	r3, #3
    32b2:	d11d      	bne.n	32f0 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    32b4:	79ce      	ldrb	r6, [r1, #7]
    32b6:	b10e      	cbz	r6, 32bc <uarte_nrfx_configure+0x1c>
    32b8:	2e01      	cmp	r6, #1
    32ba:	d119      	bne.n	32f0 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    32bc:	790a      	ldrb	r2, [r1, #4]
    32be:	b112      	cbz	r2, 32c6 <uarte_nrfx_configure+0x26>
    32c0:	2a02      	cmp	r2, #2
    32c2:	d115      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    32c4:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    32c6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    32c8:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    32ca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    32ce:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    32d0:	d067      	beq.n	33a2 <uarte_nrfx_configure+0x102>
    32d2:	d82d      	bhi.n	3330 <uarte_nrfx_configure+0x90>
    32d4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    32d8:	d066      	beq.n	33a8 <uarte_nrfx_configure+0x108>
    32da:	d816      	bhi.n	330a <uarte_nrfx_configure+0x6a>
    32dc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    32e0:	d064      	beq.n	33ac <uarte_nrfx_configure+0x10c>
    32e2:	d80a      	bhi.n	32fa <uarte_nrfx_configure+0x5a>
    32e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    32e8:	d063      	beq.n	33b2 <uarte_nrfx_configure+0x112>
    32ea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    32ee:	d063      	beq.n	33b8 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    32f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    32f4:	e054      	b.n	33a0 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    32f6:	2500      	movs	r5, #0
    32f8:	e7d9      	b.n	32ae <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    32fa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    32fe:	d05e      	beq.n	33be <uarte_nrfx_configure+0x11e>
    3300:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3304:	d1f4      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3306:	4b38      	ldr	r3, [pc, #224]	; (33e8 <uarte_nrfx_configure+0x148>)
    3308:	e03c      	b.n	3384 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    330a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    330e:	d059      	beq.n	33c4 <uarte_nrfx_configure+0x124>
    3310:	d807      	bhi.n	3322 <uarte_nrfx_configure+0x82>
    3312:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3316:	d057      	beq.n	33c8 <uarte_nrfx_configure+0x128>
    3318:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    331c:	d1e8      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    331e:	4b33      	ldr	r3, [pc, #204]	; (33ec <uarte_nrfx_configure+0x14c>)
    3320:	e030      	b.n	3384 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3322:	f647 2412 	movw	r4, #31250	; 0x7a12
    3326:	42a3      	cmp	r3, r4
    3328:	d1e2      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    332a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    332e:	e029      	b.n	3384 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3330:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3334:	d04a      	beq.n	33cc <uarte_nrfx_configure+0x12c>
    3336:	d813      	bhi.n	3360 <uarte_nrfx_configure+0xc0>
    3338:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    333c:	d049      	beq.n	33d2 <uarte_nrfx_configure+0x132>
    333e:	d809      	bhi.n	3354 <uarte_nrfx_configure+0xb4>
    3340:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3344:	42a3      	cmp	r3, r4
    3346:	d046      	beq.n	33d6 <uarte_nrfx_configure+0x136>
    3348:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    334c:	d1d0      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    334e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3352:	e017      	b.n	3384 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3354:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3358:	d1ca      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    335a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    335e:	e011      	b.n	3384 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3360:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3364:	d03a      	beq.n	33dc <uarte_nrfx_configure+0x13c>
    3366:	d808      	bhi.n	337a <uarte_nrfx_configure+0xda>
    3368:	4c21      	ldr	r4, [pc, #132]	; (33f0 <uarte_nrfx_configure+0x150>)
    336a:	42a3      	cmp	r3, r4
    336c:	d039      	beq.n	33e2 <uarte_nrfx_configure+0x142>
    336e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3372:	d1bd      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3374:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3378:	e004      	b.n	3384 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    337a:	4c1e      	ldr	r4, [pc, #120]	; (33f4 <uarte_nrfx_configure+0x154>)
    337c:	42a3      	cmp	r3, r4
    337e:	d1b7      	bne.n	32f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3380:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3384:	6904      	ldr	r4, [r0, #16]
    p_reg->BAUDRATE = baudrate;
    3386:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    338a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    338c:	4335      	orrs	r5, r6
    338e:	681b      	ldr	r3, [r3, #0]
    3390:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3392:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
    3396:	c903      	ldmia	r1, {r0, r1}
    3398:	1d23      	adds	r3, r4, #4
    339a:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    339e:	2000      	movs	r0, #0
}
    33a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    33a2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    33a6:	e7ed      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    33a8:	4b13      	ldr	r3, [pc, #76]	; (33f8 <uarte_nrfx_configure+0x158>)
    33aa:	e7eb      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    33ac:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    33b0:	e7e8      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    33b2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    33b6:	e7e5      	b.n	3384 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33b8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    33bc:	e7e2      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    33be:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    33c2:	e7df      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    33c4:	4b0d      	ldr	r3, [pc, #52]	; (33fc <uarte_nrfx_configure+0x15c>)
    33c6:	e7dd      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    33c8:	4b0d      	ldr	r3, [pc, #52]	; (3400 <uarte_nrfx_configure+0x160>)
    33ca:	e7db      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    33cc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    33d0:	e7d8      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    33d2:	4b0c      	ldr	r3, [pc, #48]	; (3404 <uarte_nrfx_configure+0x164>)
    33d4:	e7d6      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    33d6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    33da:	e7d3      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    33dc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    33e0:	e7d0      	b.n	3384 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    33e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    33e6:	e7cd      	b.n	3384 <uarte_nrfx_configure+0xe4>
    33e8:	0013b000 	.word	0x0013b000
    33ec:	004ea000 	.word	0x004ea000
    33f0:	0003d090 	.word	0x0003d090
    33f4:	000f4240 	.word	0x000f4240
    33f8:	00275000 	.word	0x00275000
    33fc:	0075c000 	.word	0x0075c000
    3400:	003af000 	.word	0x003af000
    3404:	013a9000 	.word	0x013a9000

00003408 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    340c:	4680      	mov	r8, r0
    340e:	2200      	movs	r2, #0
    3410:	2101      	movs	r1, #1
    3412:	2002      	movs	r0, #2
    3414:	f7fe fbf4 	bl	1c00 <z_arm_irq_priority_set>
    3418:	2002      	movs	r0, #2
    341a:	f7fe fbc1 	bl	1ba0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    341e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    3422:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    3426:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3428:	2100      	movs	r1, #0
    342a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    342e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3432:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    3436:	aa01      	add	r2, sp, #4
    3438:	4648      	mov	r0, r9
    343a:	f004 f9a4 	bl	7786 <pinctrl_lookup_state>
	if (ret < 0) {
    343e:	1e05      	subs	r5, r0, #0
    3440:	db1e      	blt.n	3480 <uarte_0_init+0x78>
	return pinctrl_apply_state_direct(config, state);
    3442:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3444:	f8d9 2000 	ldr.w	r2, [r9]
    3448:	7919      	ldrb	r1, [r3, #4]
    344a:	6818      	ldr	r0, [r3, #0]
    344c:	f000 fa6a 	bl	3924 <pinctrl_configure_pins>
	if (err < 0) {
    3450:	1e05      	subs	r5, r0, #0
    3452:	db15      	blt.n	3480 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    3454:	1d31      	adds	r1, r6, #4
    3456:	4640      	mov	r0, r8
    3458:	f7ff ff22 	bl	32a0 <uarte_nrfx_configure>
	if (err) {
    345c:	4605      	mov	r5, r0
    345e:	b978      	cbnz	r0, 3480 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3460:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3462:	0799      	lsls	r1, r3, #30
    3464:	d524      	bpl.n	34b0 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3466:	f106 0018 	add.w	r0, r6, #24
    346a:	f001 f9c3 	bl	47f4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    346e:	4b24      	ldr	r3, [pc, #144]	; (3500 <uarte_0_init+0xf8>)
    3470:	4298      	cmp	r0, r3
    3472:	d009      	beq.n	3488 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    3474:	4823      	ldr	r0, [pc, #140]	; (3504 <uarte_0_init+0xfc>)
    3476:	2145      	movs	r1, #69	; 0x45
    3478:	f003 fe9f 	bl	71ba <z_log_minimal_printk>
		return -EIO;
    347c:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    3480:	4628      	mov	r0, r5
    3482:	b003      	add	sp, #12
    3484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3488:	7e33      	ldrb	r3, [r6, #24]
    348a:	00db      	lsls	r3, r3, #3
    348c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3490:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3494:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3498:	f504 7190 	add.w	r1, r4, #288	; 0x120
    349c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    34a0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    34a4:	7e32      	ldrb	r2, [r6, #24]
    34a6:	2301      	movs	r3, #1
    34a8:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    34aa:	4a17      	ldr	r2, [pc, #92]	; (3508 <uarte_0_init+0x100>)
    34ac:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    34b0:	2308      	movs	r3, #8
    34b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    34b6:	7a3b      	ldrb	r3, [r7, #8]
    34b8:	b953      	cbnz	r3, 34d0 <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    34be:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    34c2:	6973      	ldr	r3, [r6, #20]
    34c4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    34c8:	2301      	movs	r3, #1
    34ca:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34ce:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    34d4:	bf5c      	itt	pl
    34d6:	f44f 7380 	movpl.w	r3, #256	; 0x100
    34da:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	06db      	lsls	r3, r3, #27
    34e2:	bf44      	itt	mi
    34e4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    34e8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    34ec:	6933      	ldr	r3, [r6, #16]
    34ee:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    34f2:	2300      	movs	r3, #0
    34f4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34f8:	2301      	movs	r3, #1
    34fa:	60a3      	str	r3, [r4, #8]
    34fc:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    34fe:	e7bf      	b.n	3480 <uarte_0_init+0x78>
    3500:	0bad0000 	.word	0x0bad0000
    3504:	00008f58 	.word	0x00008f58
    3508:	4001f000 	.word	0x4001f000

0000350c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    350c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    350e:	2301      	movs	r3, #1
    3510:	4083      	lsls	r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3512:	4a0e      	ldr	r2, [pc, #56]	; (354c <compare_int_lock+0x40>)
    3514:	f3bf 8f5b 	dmb	ish
    3518:	43dc      	mvns	r4, r3
    351a:	e852 1f00 	ldrex	r1, [r2]
    351e:	ea01 0504 	and.w	r5, r1, r4
    3522:	e842 5600 	strex	r6, r5, [r2]
    3526:	2e00      	cmp	r6, #0
    3528:	d1f7      	bne.n	351a <compare_int_lock+0xe>
    352a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    352e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3532:	4082      	lsls	r2, r0
    3534:	4806      	ldr	r0, [pc, #24]	; (3550 <compare_int_lock+0x44>)
    3536:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    353a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    353e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3542:	420b      	tst	r3, r1
}
    3544:	bf14      	ite	ne
    3546:	2001      	movne	r0, #1
    3548:	2000      	moveq	r0, #0
    354a:	bd70      	pop	{r4, r5, r6, pc}
    354c:	20000ec4 	.word	0x20000ec4
    3550:	40011000 	.word	0x40011000

00003554 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3554:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3556:	490e      	ldr	r1, [pc, #56]	; (3590 <sys_clock_timeout_handler+0x3c>)
    3558:	e9d1 3400 	ldrd	r3, r4, [r1]
    355c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    355e:	18c3      	adds	r3, r0, r3
    3560:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    3564:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    3568:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    356c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3570:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3574:	d209      	bcs.n	358a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3576:	4b07      	ldr	r3, [pc, #28]	; (3594 <sys_clock_timeout_handler+0x40>)
    3578:	681b      	ldr	r3, [r3, #0]
    357a:	0a1a      	lsrs	r2, r3, #8
    357c:	061b      	lsls	r3, r3, #24
    357e:	199c      	adds	r4, r3, r6
    3580:	4b05      	ldr	r3, [pc, #20]	; (3598 <sys_clock_timeout_handler+0x44>)
    3582:	f142 0500 	adc.w	r5, r2, #0
    3586:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    358a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    358c:	f001 bd90 	b.w	50b0 <sys_clock_announce>
    3590:	20000138 	.word	0x20000138
    3594:	20000ec8 	.word	0x20000ec8
    3598:	20000140 	.word	0x20000140

0000359c <compare_int_unlock>:
	if (key) {
    359c:	b311      	cbz	r1, 35e4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    359e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    35a2:	2301      	movs	r3, #1
    35a4:	4a10      	ldr	r2, [pc, #64]	; (35e8 <compare_int_unlock+0x4c>)
    35a6:	4083      	lsls	r3, r0
    35a8:	e852 cf00 	ldrex	ip, [r2]
    35ac:	ea4c 0c03 	orr.w	ip, ip, r3
    35b0:	e842 c100 	strex	r1, ip, [r2]
    35b4:	2900      	cmp	r1, #0
    35b6:	d1f7      	bne.n	35a8 <compare_int_unlock+0xc>
    35b8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    35bc:	4a0b      	ldr	r2, [pc, #44]	; (35ec <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    35c2:	4083      	lsls	r3, r0
    35c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    35c8:	4b09      	ldr	r3, [pc, #36]	; (35f0 <compare_int_unlock+0x54>)
    35ca:	f3bf 8f5b 	dmb	ish
    35ce:	681b      	ldr	r3, [r3, #0]
    35d0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    35d4:	40c3      	lsrs	r3, r0
    35d6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35d8:	bf42      	ittt	mi
    35da:	4b06      	ldrmi	r3, [pc, #24]	; (35f4 <compare_int_unlock+0x58>)
    35dc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    35e0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	20000ec4 	.word	0x20000ec4
    35ec:	40011000 	.word	0x40011000
    35f0:	20000ec0 	.word	0x20000ec0
    35f4:	e000e100 	.word	0xe000e100

000035f8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    35f8:	4b0d      	ldr	r3, [pc, #52]	; (3630 <z_nrf_rtc_timer_read+0x38>)
    35fa:	6818      	ldr	r0, [r3, #0]
    35fc:	0a01      	lsrs	r1, r0, #8
    35fe:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3600:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3604:	4b0b      	ldr	r3, [pc, #44]	; (3634 <z_nrf_rtc_timer_read+0x3c>)
    3606:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    360a:	1818      	adds	r0, r3, r0
    360c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3614:	d20a      	bcs.n	362c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3616:	4b08      	ldr	r3, [pc, #32]	; (3638 <z_nrf_rtc_timer_read+0x40>)
    3618:	e9d3 2300 	ldrd	r2, r3, [r3]
    361c:	4290      	cmp	r0, r2
    361e:	eb71 0303 	sbcs.w	r3, r1, r3
    3622:	d203      	bcs.n	362c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3624:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3628:	f141 0100 	adc.w	r1, r1, #0
}
    362c:	4770      	bx	lr
    362e:	bf00      	nop
    3630:	20000ec8 	.word	0x20000ec8
    3634:	40011000 	.word	0x40011000
    3638:	20000140 	.word	0x20000140

0000363c <compare_set>:
{
    363c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3640:	4616      	mov	r6, r2
    3642:	461f      	mov	r7, r3
    3644:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    3646:	f7ff ff61 	bl	350c <compare_int_lock>
    364a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    364c:	f7ff ffd4 	bl	35f8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3650:	42b0      	cmp	r0, r6
    3652:	eb71 0307 	sbcs.w	r3, r1, r7
    3656:	d251      	bcs.n	36fc <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    3658:	4b3a      	ldr	r3, [pc, #232]	; (3744 <compare_set+0x108>)
    365a:	1a30      	subs	r0, r6, r0
    365c:	eb67 0101 	sbc.w	r1, r7, r1
    3660:	4298      	cmp	r0, r3
    3662:	f171 0100 	sbcs.w	r1, r1, #0
    3666:	d26a      	bcs.n	373e <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    3668:	4b37      	ldr	r3, [pc, #220]	; (3748 <compare_set+0x10c>)
    366a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    366e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3672:	429f      	cmp	r7, r3
    3674:	bf08      	it	eq
    3676:	4296      	cmpeq	r6, r2
    3678:	d04e      	beq.n	3718 <compare_set+0xdc>
    p_reg->EVTENCLR = mask;
    367a:	4934      	ldr	r1, [pc, #208]	; (374c <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    367c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3680:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3684:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3688:	00ad      	lsls	r5, r5, #2
    368a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    368e:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3690:	b2ad      	uxth	r5, r5
    3692:	f004 f86c 	bl	776e <event_clear>
	return absolute_time & COUNTER_MAX;
    3696:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    369a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    369e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    36a2:	4a2b      	ldr	r2, [pc, #172]	; (3750 <compare_set+0x114>)
    36a4:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36a6:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    36aa:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    36ac:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    36b0:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    36b2:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    36b6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    36ba:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    36be:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    36c2:	f06f 0002 	mvn.w	r0, #2
    36c6:	eba0 0008 	sub.w	r0, r0, r8
    36ca:	4460      	add	r0, ip
    36cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    36d0:	4290      	cmp	r0, r2
    36d2:	d921      	bls.n	3718 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36d4:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    36d6:	b160      	cbz	r0, 36f2 <compare_set+0xb6>
     return p_reg->COUNTER;
    36d8:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    36dc:	eba8 000b 	sub.w	r0, r8, fp
    36e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    36e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    36e8:	d916      	bls.n	3718 <compare_set+0xdc>
					event_clear(chan);
    36ea:	4620      	mov	r0, r4
    36ec:	f004 f83f 	bl	776e <event_clear>
    36f0:	4a17      	ldr	r2, [pc, #92]	; (3750 <compare_set+0x114>)
			cc_val = now + cc_inc;
    36f2:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    36f6:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    36fa:	e7d9      	b.n	36b0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    36fc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    36fe:	4a15      	ldr	r2, [pc, #84]	; (3754 <compare_set+0x118>)
    3700:	f3bf 8f5b 	dmb	ish
    3704:	40a3      	lsls	r3, r4
    3706:	e852 0f00 	ldrex	r0, [r2]
    370a:	4318      	orrs	r0, r3
    370c:	e842 0100 	strex	r1, r0, [r2]
    3710:	2900      	cmp	r1, #0
    3712:	d1f8      	bne.n	3706 <compare_set+0xca>
    3714:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3718:	490b      	ldr	r1, [pc, #44]	; (3748 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    371a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    371c:	0123      	lsls	r3, r4, #4
    371e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    3722:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    3726:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    372a:	6053      	str	r3, [r2, #4]
	return ret;
    372c:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    372e:	4620      	mov	r0, r4
    3730:	9900      	ldr	r1, [sp, #0]
    3732:	f7ff ff33 	bl	359c <compare_int_unlock>
}
    3736:	4628      	mov	r0, r5
    3738:	b003      	add	sp, #12
    373a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    373e:	f06f 0515 	mvn.w	r5, #21
    3742:	e7f4      	b.n	372e <compare_set+0xf2>
    3744:	00800001 	.word	0x00800001
    3748:	20000128 	.word	0x20000128
    374c:	40011000 	.word	0x40011000
    3750:	007ffffd 	.word	0x007ffffd
    3754:	20000ec0 	.word	0x20000ec0

00003758 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3758:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    375a:	4b19      	ldr	r3, [pc, #100]	; (37c0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    375c:	4d19      	ldr	r5, [pc, #100]	; (37c4 <sys_clock_driver_init+0x6c>)
    375e:	2400      	movs	r4, #0
    3760:	f04f 30ff 	mov.w	r0, #4294967295
    3764:	f04f 31ff 	mov.w	r1, #4294967295
    3768:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    376c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3774:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3778:	4b13      	ldr	r3, [pc, #76]	; (37c8 <sys_clock_driver_init+0x70>)
    377a:	2602      	movs	r6, #2
    377c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3780:	2101      	movs	r1, #1
    3782:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3786:	2011      	movs	r0, #17
    3788:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    378c:	4622      	mov	r2, r4
    378e:	f7fe fa37 	bl	1c00 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3792:	2011      	movs	r0, #17
    3794:	f7fe fa04 	bl	1ba0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3798:	4a0c      	ldr	r2, [pc, #48]	; (37cc <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    379a:	2301      	movs	r3, #1
    379c:	60ab      	str	r3, [r5, #8]
    379e:	602b      	str	r3, [r5, #0]
    37a0:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    37a2:	4b0b      	ldr	r3, [pc, #44]	; (37d0 <sys_clock_driver_init+0x78>)
    37a4:	4a0b      	ldr	r2, [pc, #44]	; (37d4 <sys_clock_driver_init+0x7c>)
    37a6:	9300      	str	r3, [sp, #0]
    37a8:	9401      	str	r4, [sp, #4]
    37aa:	2300      	movs	r3, #0
    37ac:	4620      	mov	r0, r4
    37ae:	f7ff ff45 	bl	363c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    37b2:	4630      	mov	r0, r6
    37b4:	f7fe ff2a 	bl	260c <z_nrf_clock_control_lf_on>

	return 0;
}
    37b8:	4620      	mov	r0, r4
    37ba:	b002      	add	sp, #8
    37bc:	bd70      	pop	{r4, r5, r6, pc}
    37be:	bf00      	nop
    37c0:	20000128 	.word	0x20000128
    37c4:	40011000 	.word	0x40011000
    37c8:	e000e100 	.word	0xe000e100
    37cc:	20000ec4 	.word	0x20000ec4
    37d0:	00003555 	.word	0x00003555
    37d4:	007fffff 	.word	0x007fffff

000037d8 <rtc_nrf_isr>:
{
    37d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    37dc:	4c2f      	ldr	r4, [pc, #188]	; (389c <rtc_nrf_isr+0xc4>)
    37de:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    37e2:	0799      	lsls	r1, r3, #30
    37e4:	d50b      	bpl.n	37fe <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    37e6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    37ea:	b143      	cbz	r3, 37fe <rtc_nrf_isr+0x26>
		overflow_cnt++;
    37ec:	4a2c      	ldr	r2, [pc, #176]	; (38a0 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    37ee:	2300      	movs	r3, #0
    37f0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    37f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    37f8:	6813      	ldr	r3, [r2, #0]
    37fa:	3301      	adds	r3, #1
    37fc:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    37fe:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3802:	03da      	lsls	r2, r3, #15
    3804:	d52a      	bpl.n	385c <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3806:	f3bf 8f5b 	dmb	ish
    380a:	4b26      	ldr	r3, [pc, #152]	; (38a4 <rtc_nrf_isr+0xcc>)
    380c:	e853 2f00 	ldrex	r2, [r3]
    3810:	f022 0101 	bic.w	r1, r2, #1
    3814:	e843 1000 	strex	r0, r1, [r3]
    3818:	2800      	cmp	r0, #0
    381a:	d1f7      	bne.n	380c <rtc_nrf_isr+0x34>
    381c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    3820:	07d3      	lsls	r3, r2, #31
    3822:	d402      	bmi.n	382a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3824:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3828:	b1c3      	cbz	r3, 385c <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    382a:	2500      	movs	r5, #0
    382c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3830:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    3834:	f7ff fee0 	bl	35f8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3838:	f04f 0320 	mov.w	r3, #32
    383c:	f3ef 8211 	mrs	r2, BASEPRI
    3840:	f383 8812 	msr	BASEPRI_MAX, r3
    3844:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3848:	4b17      	ldr	r3, [pc, #92]	; (38a8 <rtc_nrf_isr+0xd0>)
    384a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    384e:	42b0      	cmp	r0, r6
    3850:	41b9      	sbcs	r1, r7
    3852:	d206      	bcs.n	3862 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    3854:	f382 8811 	msr	BASEPRI, r2
    3858:	f3bf 8f6f 	isb	sy
}
    385c:	b003      	add	sp, #12
    385e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3862:	f04f 38ff 	mov.w	r8, #4294967295
    3866:	f04f 39ff 	mov.w	r9, #4294967295
    386a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    386e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    3872:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    3874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3878:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    387c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3880:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3884:	f382 8811 	msr	BASEPRI, r2
    3888:	f3bf 8f6f 	isb	sy
		if (handler) {
    388c:	2900      	cmp	r1, #0
    388e:	d0e5      	beq.n	385c <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    3890:	9000      	str	r0, [sp, #0]
    3892:	4632      	mov	r2, r6
    3894:	463b      	mov	r3, r7
    3896:	4628      	mov	r0, r5
    3898:	4788      	blx	r1
    389a:	e7df      	b.n	385c <rtc_nrf_isr+0x84>
    389c:	40011000 	.word	0x40011000
    38a0:	20000ec8 	.word	0x20000ec8
    38a4:	20000ec0 	.word	0x20000ec0
    38a8:	20000128 	.word	0x20000128

000038ac <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    38ac:	1c43      	adds	r3, r0, #1
{
    38ae:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    38b0:	d022      	beq.n	38f8 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    38b2:	2801      	cmp	r0, #1
    38b4:	dd22      	ble.n	38fc <sys_clock_set_timeout+0x50>
    38b6:	4a12      	ldr	r2, [pc, #72]	; (3900 <sys_clock_set_timeout+0x54>)
    38b8:	4b12      	ldr	r3, [pc, #72]	; (3904 <sys_clock_set_timeout+0x58>)
    38ba:	4290      	cmp	r0, r2
    38bc:	bfd4      	ite	le
    38be:	4604      	movle	r4, r0
    38c0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    38c2:	f7ff fe99 	bl	35f8 <z_nrf_rtc_timer_read>
    38c6:	4b10      	ldr	r3, [pc, #64]	; (3908 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    38c8:	490e      	ldr	r1, [pc, #56]	; (3904 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    38ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    38ce:	1a80      	subs	r0, r0, r2
		cyc = 0;
    38d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    38d4:	bf28      	it	cs
    38d6:	2400      	movcs	r4, #0
	cyc += unannounced;
    38d8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    38da:	428c      	cmp	r4, r1
    38dc:	bf28      	it	cs
    38de:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    38e0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    38e2:	490a      	ldr	r1, [pc, #40]	; (390c <sys_clock_set_timeout+0x60>)
    38e4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    38e6:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    38ea:	9001      	str	r0, [sp, #4]
    38ec:	f143 0300 	adc.w	r3, r3, #0
    38f0:	f7ff fea4 	bl	363c <compare_set>
}
    38f4:	b002      	add	sp, #8
    38f6:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    38f8:	4c02      	ldr	r4, [pc, #8]	; (3904 <sys_clock_set_timeout+0x58>)
    38fa:	e7e2      	b.n	38c2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    38fc:	2401      	movs	r4, #1
    38fe:	e7e0      	b.n	38c2 <sys_clock_set_timeout+0x16>
    3900:	007ffffe 	.word	0x007ffffe
    3904:	007fffff 	.word	0x007fffff
    3908:	20000138 	.word	0x20000138
    390c:	00003555 	.word	0x00003555

00003910 <sys_clock_elapsed>:
{
    3910:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3912:	f7ff fe71 	bl	35f8 <z_nrf_rtc_timer_read>
    3916:	4b02      	ldr	r3, [pc, #8]	; (3920 <sys_clock_elapsed+0x10>)
    3918:	681b      	ldr	r3, [r3, #0]
}
    391a:	1ac0      	subs	r0, r0, r3
    391c:	bd08      	pop	{r3, pc}
    391e:	bf00      	nop
    3920:	20000138 	.word	0x20000138

00003924 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    3924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    3928:	4e5a      	ldr	r6, [pc, #360]	; (3a94 <pinctrl_configure_pins+0x170>)
    392a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    392e:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3930:	4281      	cmp	r1, r0
    3932:	d102      	bne.n	393a <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    3934:	2000      	movs	r0, #0
}
    3936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    393a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    393c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    3940:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    3944:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    3946:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    394a:	bf08      	it	eq
    394c:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    3950:	2c22      	cmp	r4, #34	; 0x22
    3952:	f200 809b 	bhi.w	3a8c <pinctrl_configure_pins+0x168>
    3956:	e8df f004 	tbb	[pc, r4]
    395a:	2412      	.short	0x2412
    395c:	402c4429 	.word	0x402c4429
    3960:	99999944 	.word	0x99999944
    3964:	99704799 	.word	0x99704799
    3968:	99999999 	.word	0x99999999
    396c:	99999999 	.word	0x99999999
    3970:	817e7b73 	.word	0x817e7b73
    3974:	84999999 	.word	0x84999999
    3978:	93908d8a 	.word	0x93908d8a
    397c:	96          	.byte	0x96
    397d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    397e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    3982:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    3986:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    398a:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    398e:	bf14      	ite	ne
    3990:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    3994:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3996:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    399a:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    399e:	2401      	movs	r4, #1
    39a0:	e002      	b.n	39a8 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    39a2:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    39a6:	2400      	movs	r4, #0
    39a8:	46a6      	mov	lr, r4
    39aa:	e024      	b.n	39f6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    39ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    39b0:	e7e7      	b.n	3982 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    39b2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    39b6:	2400      	movs	r4, #0
    return pin_number >> 5;
    39b8:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    39bc:	f1be 0f01 	cmp.w	lr, #1
    39c0:	bf14      	ite	ne
    39c2:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    39c6:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    39c8:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    39cc:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    39d0:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    39d4:	f04f 0e01 	mov.w	lr, #1
    39d8:	e00d      	b.n	39f6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    39da:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    39de:	2401      	movs	r4, #1
    39e0:	e7ea      	b.n	39b8 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    39e2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    39e6:	e7de      	b.n	39a6 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    39e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    39ec:	2d00      	cmp	r5, #0
    39ee:	d1da      	bne.n	39a6 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    39f0:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    39f2:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    39f4:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    39f6:	f850 cb04 	ldr.w	ip, [r0], #4
    39fa:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    39fe:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3a02:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    3a06:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    3a0a:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    3a0e:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3a12:	bf1c      	itt	ne
    3a14:	2401      	movne	r4, #1
    3a16:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a1a:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    3a1e:	2b01      	cmp	r3, #1
    3a20:	bf0c      	ite	eq
    3a22:	4633      	moveq	r3, r6
    3a24:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a28:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    3a2c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a30:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3a34:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3a38:	e77a      	b.n	3930 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    3a3a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    3a3e:	e7d5      	b.n	39ec <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    3a40:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    3a44:	6804      	ldr	r4, [r0, #0]
    3a46:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    3a4a:	2c00      	cmp	r4, #0
    3a4c:	d0c7      	beq.n	39de <pinctrl_configure_pins+0xba>
    3a4e:	e798      	b.n	3982 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    3a50:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    3a54:	e7f6      	b.n	3a44 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    3a56:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    3a5a:	e7f3      	b.n	3a44 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    3a5c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    3a60:	e7f0      	b.n	3a44 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    3a62:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3a66:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    3a68:	f04f 0e00 	mov.w	lr, #0
    3a6c:	e7c3      	b.n	39f6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    3a6e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    3a72:	e786      	b.n	3982 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    3a74:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    3a78:	e7f5      	b.n	3a66 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    3a7a:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    3a7e:	e7f2      	b.n	3a66 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    3a80:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    3a84:	e7ef      	b.n	3a66 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    3a86:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    3a8a:	e7ec      	b.n	3a66 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    3a8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3a90:	e751      	b.n	3936 <pinctrl_configure_pins+0x12>
    3a92:	bf00      	nop
    3a94:	50000300 	.word	0x50000300

00003a98 <find_free_region>:
#include <zephyr/sys/__assert.h>
#include <zephyr/kernel.h>

/* Find the first unused ACL region. */
static int find_free_region(uint32_t *region_idx)
{
    3a98:	b530      	push	{r4, r5, lr}
    3a9a:	490c      	ldr	r1, [pc, #48]	; (3acc <find_free_region+0x34>)
}

NRF_STATIC_INLINE nrf_acl_perm_t nrf_acl_region_perm_get(NRF_ACL_Type const * p_reg,
                                                         uint32_t             region_id)
{
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    3a9c:	4d0c      	ldr	r5, [pc, #48]	; (3ad0 <find_free_region+0x38>)
    3a9e:	680b      	ldr	r3, [r1, #0]
    3aa0:	4602      	mov	r2, r0
	static uint32_t idx;

	while (nrf_acl_region_perm_get(NRF_ACL, idx) != 0) {
    3aa2:	2400      	movs	r4, #0
    3aa4:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    3aa8:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
    3aac:	b2c0      	uxtb	r0, r0
    3aae:	b918      	cbnz	r0, 3ab8 <find_free_region+0x20>
    3ab0:	b104      	cbz	r4, 3ab4 <find_free_region+0x1c>
    3ab2:	600b      	str	r3, [r1, #0]
			*region_idx = idx;
			return -ENOSPC;
		}
	}
	*region_idx = idx;
	return 0;
    3ab4:	2000      	movs	r0, #0
    3ab6:	e007      	b.n	3ac8 <find_free_region+0x30>
		idx++;
    3ab8:	3301      	adds	r3, #1
		if (idx >= ACL_REGIONS_COUNT) {
    3aba:	2b07      	cmp	r3, #7
    3abc:	f04f 0401 	mov.w	r4, #1
    3ac0:	d9f0      	bls.n	3aa4 <find_free_region+0xc>
    3ac2:	600b      	str	r3, [r1, #0]
			return -ENOSPC;
    3ac4:	f06f 001b 	mvn.w	r0, #27
			*region_idx = idx;
    3ac8:	6013      	str	r3, [r2, #0]
}
    3aca:	bd30      	pop	{r4, r5, pc}
    3acc:	20000ecc 	.word	0x20000ecc
    3ad0:	4001e000 	.word	0x4001e000

00003ad4 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3ad4:	4803      	ldr	r0, [pc, #12]	; (3ae4 <k_sys_fatal_error_handler+0x10>)
{
    3ad6:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    3ad8:	2145      	movs	r1, #69	; 0x45
    3ada:	f003 fb6e 	bl	71ba <z_log_minimal_printk>
		sys_arch_reboot(0);
    3ade:	2000      	movs	r0, #0
    3ae0:	f7fe fc72 	bl	23c8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3ae4:	00008f9a 	.word	0x00008f9a

00003ae8 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3ae8:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3aea:	6881      	ldr	r1, [r0, #8]
{
    3aec:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3aee:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    3af0:	f021 0407 	bic.w	r4, r1, #7
{
    3af4:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    3af6:	f003 fbb5 	bl	7264 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    3afa:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    3afc:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    3afe:	4668      	mov	r0, sp
    3b00:	f003 fc30 	bl	7364 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    3b04:	4907      	ldr	r1, [pc, #28]	; (3b24 <boot_write_magic+0x3c>)
    3b06:	2210      	movs	r2, #16
    3b08:	4668      	mov	r0, sp
    3b0a:	f003 fc20 	bl	734e <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    3b0e:	2310      	movs	r3, #16
    3b10:	466a      	mov	r2, sp
    3b12:	4621      	mov	r1, r4
    3b14:	4628      	mov	r0, r5
    3b16:	f003 fb73 	bl	7200 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3b1a:	3800      	subs	r0, #0
    3b1c:	bf18      	it	ne
    3b1e:	2001      	movne	r0, #1
    3b20:	b005      	add	sp, #20
    3b22:	bd30      	pop	{r4, r5, pc}
    3b24:	000082ce 	.word	0x000082ce

00003b28 <boot_read_swap_state>:
{
    3b28:	b530      	push	{r4, r5, lr}
    3b2a:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3b2c:	6881      	ldr	r1, [r0, #8]
{
    3b2e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3b30:	2310      	movs	r3, #16
    3b32:	aa02      	add	r2, sp, #8
    3b34:	3910      	subs	r1, #16
{
    3b36:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3b38:	f003 fb4d 	bl	71d6 <flash_area_read>
    if (rc < 0) {
    3b3c:	2800      	cmp	r0, #0
    3b3e:	da02      	bge.n	3b46 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    3b40:	2001      	movs	r0, #1
}
    3b42:	b007      	add	sp, #28
    3b44:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3b46:	2210      	movs	r2, #16
    3b48:	a902      	add	r1, sp, #8
    3b4a:	4620      	mov	r0, r4
    3b4c:	f003 fe8f 	bl	786e <bootutil_buffer_is_erased>
    3b50:	2800      	cmp	r0, #0
    3b52:	d13a      	bne.n	3bca <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    3b54:	491e      	ldr	r1, [pc, #120]	; (3bd0 <boot_read_swap_state+0xa8>)
    3b56:	2210      	movs	r2, #16
    3b58:	a802      	add	r0, sp, #8
    3b5a:	f003 fbd1 	bl	7300 <memcmp>
    return BOOT_MAGIC_BAD;
    3b5e:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    3b60:	bf0c      	ite	eq
    3b62:	2301      	moveq	r3, #1
    3b64:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    3b66:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    3b68:	4620      	mov	r0, r4
    3b6a:	f003 fe6c 	bl	7846 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3b6e:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    3b70:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3b72:	f10d 0207 	add.w	r2, sp, #7
    3b76:	4620      	mov	r0, r4
    3b78:	f003 fb2d 	bl	71d6 <flash_area_read>
    if (rc < 0) {
    3b7c:	2800      	cmp	r0, #0
    3b7e:	dbdf      	blt.n	3b40 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3b84:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3b88:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3b8a:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3b8c:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3b8e:	2201      	movs	r2, #1
    3b90:	f10d 0107 	add.w	r1, sp, #7
    3b94:	4620      	mov	r0, r4
    3b96:	f003 fe6a 	bl	786e <bootutil_buffer_is_erased>
    3b9a:	b910      	cbnz	r0, 3ba2 <boot_read_swap_state+0x7a>
    3b9c:	786b      	ldrb	r3, [r5, #1]
    3b9e:	2b04      	cmp	r3, #4
    3ba0:	d903      	bls.n	3baa <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3ba2:	2301      	movs	r3, #1
    3ba4:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    3ba6:	2300      	movs	r3, #0
    3ba8:	712b      	strb	r3, [r5, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    3baa:	68a2      	ldr	r2, [r4, #8]
    3bac:	3a18      	subs	r2, #24
    3bae:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3bb2:	3a08      	subs	r2, #8
    3bb4:	1ca9      	adds	r1, r5, #2
    3bb6:	4620      	mov	r0, r4
    3bb8:	f003 fe6c 	bl	7894 <boot_read_flag>
    if (rc) {
    3bbc:	2800      	cmp	r0, #0
    3bbe:	d1bf      	bne.n	3b40 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    3bc0:	1ce9      	adds	r1, r5, #3
    3bc2:	4620      	mov	r0, r4
    3bc4:	f003 febf 	bl	7946 <boot_read_image_ok>
    3bc8:	e7bb      	b.n	3b42 <boot_read_swap_state+0x1a>
    3bca:	2303      	movs	r3, #3
    3bcc:	e7cb      	b.n	3b66 <boot_read_swap_state+0x3e>
    3bce:	bf00      	nop
    3bd0:	000082ce 	.word	0x000082ce

00003bd4 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3bd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3bd6:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3bd8:	4669      	mov	r1, sp
    3bda:	2002      	movs	r0, #2
    3bdc:	f003 feb9 	bl	7952 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    3be0:	4604      	mov	r4, r0
    3be2:	b110      	cbz	r0, 3bea <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
    3be4:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    3be6:	b004      	add	sp, #16
    3be8:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3bea:	a902      	add	r1, sp, #8
    3bec:	2005      	movs	r0, #5
    3bee:	f003 feb0 	bl	7952 <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    3bf2:	2801      	cmp	r0, #1
    3bf4:	d136      	bne.n	3c64 <boot_swap_type_multi+0x90>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    3bf6:	4829      	ldr	r0, [pc, #164]	; (3c9c <boot_swap_type_multi+0xc8>)
    3bf8:	462a      	mov	r2, r5
    3bfa:	2149      	movs	r1, #73	; 0x49
    3bfc:	f003 fadd 	bl	71ba <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    3c00:	4b27      	ldr	r3, [pc, #156]	; (3ca0 <boot_swap_type_multi+0xcc>)
    3c02:	9302      	str	r3, [sp, #8]
        secondary_slot.image_num = 0;
    3c04:	f88d 400c 	strb.w	r4, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3c08:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3c0c:	f89d 6008 	ldrb.w	r6, [sp, #8]
    3c10:	4c24      	ldr	r4, [pc, #144]	; (3ca4 <boot_swap_type_multi+0xd0>)
    3c12:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3c14:	7820      	ldrb	r0, [r4, #0]
    3c16:	4629      	mov	r1, r5
    3c18:	f003 fe1b 	bl	7852 <boot_magic_compatible_check>
    3c1c:	b348      	cbz	r0, 3c72 <boot_swap_type_multi+0x9e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    3c1e:	7860      	ldrb	r0, [r4, #1]
    3c20:	4631      	mov	r1, r6
    3c22:	f003 fe16 	bl	7852 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3c26:	b320      	cbz	r0, 3c72 <boot_swap_type_multi+0x9e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3c28:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    3c2a:	2b04      	cmp	r3, #4
    3c2c:	d003      	beq.n	3c36 <boot_swap_type_multi+0x62>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3c2e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    3c32:	4299      	cmp	r1, r3
    3c34:	d11d      	bne.n	3c72 <boot_swap_type_multi+0x9e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3c36:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3c38:	2b04      	cmp	r3, #4
    3c3a:	d003      	beq.n	3c44 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3c3c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    3c40:	4299      	cmp	r1, r3
    3c42:	d116      	bne.n	3c72 <boot_swap_type_multi+0x9e>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3c44:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3c46:	2b04      	cmp	r3, #4
    3c48:	d10f      	bne.n	3c6a <boot_swap_type_multi+0x96>
            BOOT_LOG_INF("Swap type: %s",
    3c4a:	7963      	ldrb	r3, [r4, #5]
    3c4c:	2b02      	cmp	r3, #2
    3c4e:	d11b      	bne.n	3c88 <boot_swap_type_multi+0xb4>
    3c50:	4a15      	ldr	r2, [pc, #84]	; (3ca8 <boot_swap_type_multi+0xd4>)
    3c52:	4816      	ldr	r0, [pc, #88]	; (3cac <boot_swap_type_multi+0xd8>)
    3c54:	2149      	movs	r1, #73	; 0x49
    3c56:	f003 fab0 	bl	71ba <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3c5a:	7960      	ldrb	r0, [r4, #5]
    3c5c:	1e83      	subs	r3, r0, #2
    3c5e:	2b02      	cmp	r3, #2
    3c60:	d9c1      	bls.n	3be6 <boot_swap_type_multi+0x12>
    3c62:	e7bf      	b.n	3be4 <boot_swap_type_multi+0x10>
    } else if (rc) {
    3c64:	2800      	cmp	r0, #0
    3c66:	d0cf      	beq.n	3c08 <boot_swap_type_multi+0x34>
    3c68:	e7bc      	b.n	3be4 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3c6a:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3c6e:	4299      	cmp	r1, r3
    3c70:	d0eb      	beq.n	3c4a <boot_swap_type_multi+0x76>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3c72:	3201      	adds	r2, #1
    3c74:	2a03      	cmp	r2, #3
    3c76:	f104 0406 	add.w	r4, r4, #6
    3c7a:	d1cb      	bne.n	3c14 <boot_swap_type_multi+0x40>
    BOOT_LOG_INF("Swap type: none");
    3c7c:	480c      	ldr	r0, [pc, #48]	; (3cb0 <boot_swap_type_multi+0xdc>)
    3c7e:	2149      	movs	r1, #73	; 0x49
    3c80:	f003 fa9b 	bl	71ba <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    3c84:	2001      	movs	r0, #1
    3c86:	e7ae      	b.n	3be6 <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    3c88:	2b03      	cmp	r3, #3
    3c8a:	d005      	beq.n	3c98 <boot_swap_type_multi+0xc4>
    3c8c:	4a09      	ldr	r2, [pc, #36]	; (3cb4 <boot_swap_type_multi+0xe0>)
    3c8e:	490a      	ldr	r1, [pc, #40]	; (3cb8 <boot_swap_type_multi+0xe4>)
    3c90:	2b04      	cmp	r3, #4
    3c92:	bf08      	it	eq
    3c94:	460a      	moveq	r2, r1
    3c96:	e7dc      	b.n	3c52 <boot_swap_type_multi+0x7e>
    3c98:	4a08      	ldr	r2, [pc, #32]	; (3cbc <boot_swap_type_multi+0xe8>)
    3c9a:	e7da      	b.n	3c52 <boot_swap_type_multi+0x7e>
    3c9c:	00008fdf 	.word	0x00008fdf
    3ca0:	03030103 	.word	0x03030103
    3ca4:	00009052 	.word	0x00009052
    3ca8:	00008fc1 	.word	0x00008fc1
    3cac:	0000902a 	.word	0x0000902a
    3cb0:	0000903d 	.word	0x0000903d
    3cb4:	00008fc6 	.word	0x00008fc6
    3cb8:	00008fd8 	.word	0x00008fd8
    3cbc:	00008fbc 	.word	0x00008fbc

00003cc0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3cc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3cc4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3cc8:	2a08      	cmp	r2, #8
    3cca:	d106      	bne.n	3cda <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3ccc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3cd0:	2b05      	cmp	r3, #5
    3cd2:	d802      	bhi.n	3cda <nrf52_errata_103+0x1a>
    3cd4:	4a02      	ldr	r2, [pc, #8]	; (3ce0 <nrf52_errata_103+0x20>)
    3cd6:	5cd0      	ldrb	r0, [r2, r3]
    3cd8:	4770      	bx	lr
                        return false;
    3cda:	2000      	movs	r0, #0
}
    3cdc:	4770      	bx	lr
    3cde:	bf00      	nop
    3ce0:	0000906a 	.word	0x0000906a

00003ce4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3ce4:	4a02      	ldr	r2, [pc, #8]	; (3cf0 <nvmc_wait+0xc>)
    3ce6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3cea:	2b00      	cmp	r3, #0
    3cec:	d0fb      	beq.n	3ce6 <nvmc_wait+0x2>
}
    3cee:	4770      	bx	lr
    3cf0:	4001e000 	.word	0x4001e000

00003cf4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3cf4:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3cfa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3cfe:	2a08      	cmp	r2, #8
    3d00:	d14e      	bne.n	3da0 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    3d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d06:	2100      	movs	r1, #0
    3d08:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3d0c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3d10:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3d14:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    3d18:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    3d1c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3d20:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    3d24:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3d28:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    3d2c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3d30:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    3d34:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3d38:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    3d3c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3d40:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3d44:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3d48:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    3d4c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3d50:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    3d54:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3d58:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    3d5c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3d60:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    3d64:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3d68:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    3d6c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3d70:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    3d74:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3d78:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    3d7c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3d80:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    3d84:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3d88:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    3d8c:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3d90:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    3d94:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3d98:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    3d9c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3da0:	f7ff ff8e 	bl	3cc0 <nrf52_errata_103>
    3da4:	b118      	cbz	r0, 3dae <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3da6:	4b43      	ldr	r3, [pc, #268]	; (3eb4 <SystemInit+0x1c0>)
    3da8:	4a43      	ldr	r2, [pc, #268]	; (3eb8 <SystemInit+0x1c4>)
    3daa:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3dae:	f7ff ff87 	bl	3cc0 <nrf52_errata_103>
    3db2:	b118      	cbz	r0, 3dbc <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3db4:	4b41      	ldr	r3, [pc, #260]	; (3ebc <SystemInit+0x1c8>)
    3db6:	22fb      	movs	r2, #251	; 0xfb
    3db8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3dbc:	f7ff ff80 	bl	3cc0 <nrf52_errata_103>
    3dc0:	b170      	cbz	r0, 3de0 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3dc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3dc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3dca:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    3dce:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3dd2:	f022 020f 	bic.w	r2, r2, #15
    3dd6:	f003 030f 	and.w	r3, r3, #15
    3dda:	4313      	orrs	r3, r2
    3ddc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3de0:	f7ff ff6e 	bl	3cc0 <nrf52_errata_103>
    3de4:	b120      	cbz	r0, 3df0 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3de6:	4b36      	ldr	r3, [pc, #216]	; (3ec0 <SystemInit+0x1cc>)
    3de8:	f44f 7200 	mov.w	r2, #512	; 0x200
    3dec:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3df4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    3df8:	2b08      	cmp	r3, #8
    3dfa:	d109      	bne.n	3e10 <SystemInit+0x11c>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3e04:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3e06:	bf44      	itt	mi
    3e08:	f06f 0201 	mvnmi.w	r2, #1
    3e0c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    3e10:	4a2c      	ldr	r2, [pc, #176]	; (3ec4 <SystemInit+0x1d0>)
    3e12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    3e16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    3e1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    3e1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e22:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3e26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3e2a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3e2e:	2a08      	cmp	r2, #8
    3e30:	d10e      	bne.n	3e50 <SystemInit+0x15c>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3e32:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    3e36:	2b05      	cmp	r3, #5
    3e38:	d802      	bhi.n	3e40 <SystemInit+0x14c>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3e3a:	4a23      	ldr	r2, [pc, #140]	; (3ec8 <SystemInit+0x1d4>)
    3e3c:	5cd3      	ldrb	r3, [r2, r3]
    3e3e:	b13b      	cbz	r3, 3e50 <SystemInit+0x15c>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3e40:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3e44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e4c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3e50:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3e54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3e58:	2a00      	cmp	r2, #0
    3e5a:	db03      	blt.n	3e64 <SystemInit+0x170>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3e5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3e60:	2b00      	cmp	r3, #0
    3e62:	da22      	bge.n	3eaa <SystemInit+0x1b6>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3e64:	4919      	ldr	r1, [pc, #100]	; (3ecc <SystemInit+0x1d8>)
    3e66:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3e68:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3e6c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3e70:	2412      	movs	r4, #18
    nvmc_wait();
    3e72:	f7ff ff37 	bl	3ce4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3e76:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3e7a:	f7ff ff33 	bl	3ce4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3e7e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3e82:	f7ff ff2f 	bl	3ce4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3e86:	2300      	movs	r3, #0
    3e88:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3e8c:	f7ff ff2a 	bl	3ce4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3e90:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3e94:	490b      	ldr	r1, [pc, #44]	; (3ec4 <SystemInit+0x1d0>)
    3e96:	4b0e      	ldr	r3, [pc, #56]	; (3ed0 <SystemInit+0x1dc>)
    3e98:	68ca      	ldr	r2, [r1, #12]
    3e9a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3e9e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3ea0:	60cb      	str	r3, [r1, #12]
    3ea2:	f3bf 8f4f 	dsb	sy
    __NOP();
    3ea6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3ea8:	e7fd      	b.n	3ea6 <SystemInit+0x1b2>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3eaa:	4b0a      	ldr	r3, [pc, #40]	; (3ed4 <SystemInit+0x1e0>)
    3eac:	4a0a      	ldr	r2, [pc, #40]	; (3ed8 <SystemInit+0x1e4>)
    3eae:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3eb0:	bd10      	pop	{r4, pc}
    3eb2:	bf00      	nop
    3eb4:	40005000 	.word	0x40005000
    3eb8:	00038148 	.word	0x00038148
    3ebc:	4000f000 	.word	0x4000f000
    3ec0:	40029000 	.word	0x40029000
    3ec4:	e000ed00 	.word	0xe000ed00
    3ec8:	00009064 	.word	0x00009064
    3ecc:	4001e000 	.word	0x4001e000
    3ed0:	05fa0004 	.word	0x05fa0004
    3ed4:	20000030 	.word	0x20000030
    3ed8:	03d09000 	.word	0x03d09000

00003edc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3edc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3ede:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3ee0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3ee2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    3ee6:	fab2 f382 	clz	r3, r2
    3eea:	f1c3 031f 	rsb	r3, r3, #31
    3eee:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3ef0:	fa05 f403 	lsl.w	r4, r5, r3
    3ef4:	ea22 0404 	bic.w	r4, r2, r4
    3ef8:	e850 6f00 	ldrex	r6, [r0]
    3efc:	4296      	cmp	r6, r2
    3efe:	d104      	bne.n	3f0a <nrfx_flag32_alloc+0x2e>
    3f00:	e840 4c00 	strex	ip, r4, [r0]
    3f04:	f1bc 0f00 	cmp.w	ip, #0
    3f08:	d1f6      	bne.n	3ef8 <nrfx_flag32_alloc+0x1c>
    3f0a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3f0e:	d1e7      	bne.n	3ee0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    3f10:	4801      	ldr	r0, [pc, #4]	; (3f18 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    3f12:	700b      	strb	r3, [r1, #0]
}
    3f14:	bd70      	pop	{r4, r5, r6, pc}
    3f16:	bf00      	nop
    3f18:	0bad0000 	.word	0x0bad0000

00003f1c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    3f1c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3f1e:	6803      	ldr	r3, [r0, #0]
    3f20:	40cb      	lsrs	r3, r1
    3f22:	07db      	lsls	r3, r3, #31
    3f24:	d414      	bmi.n	3f50 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3f26:	2301      	movs	r3, #1
    3f28:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    3f2a:	6802      	ldr	r2, [r0, #0]
    3f2c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3f30:	ea43 0102 	orr.w	r1, r3, r2
    3f34:	e850 4f00 	ldrex	r4, [r0]
    3f38:	4294      	cmp	r4, r2
    3f3a:	d104      	bne.n	3f46 <nrfx_flag32_free+0x2a>
    3f3c:	e840 1c00 	strex	ip, r1, [r0]
    3f40:	f1bc 0f00 	cmp.w	ip, #0
    3f44:	d1f6      	bne.n	3f34 <nrfx_flag32_free+0x18>
    3f46:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3f4a:	d1ee      	bne.n	3f2a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    3f4c:	4801      	ldr	r0, [pc, #4]	; (3f54 <nrfx_flag32_free+0x38>)
}
    3f4e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3f50:	4801      	ldr	r0, [pc, #4]	; (3f58 <nrfx_flag32_free+0x3c>)
    3f52:	e7fc      	b.n	3f4e <nrfx_flag32_free+0x32>
    3f54:	0bad0000 	.word	0x0bad0000
    3f58:	0bad0004 	.word	0x0bad0004

00003f5c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    3f5e:	4604      	mov	r4, r0
    3f60:	b118      	cbz	r0, 3f6a <clock_stop+0xe>
    3f62:	2801      	cmp	r0, #1
    3f64:	d022      	beq.n	3fac <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3f66:	b003      	add	sp, #12
    3f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    3f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f6e:	2202      	movs	r2, #2
    3f70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f74:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    3f78:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f7c:	2201      	movs	r2, #1
    3f7e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3f80:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3f82:	2301      	movs	r3, #1
    3f84:	f88d 3007 	strb.w	r3, [sp, #7]
    3f88:	f242 7510 	movw	r5, #10000	; 0x2710
    3f8c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3f90:	b1cc      	cbz	r4, 3fc6 <clock_stop+0x6a>
    3f92:	2c01      	cmp	r4, #1
    3f94:	d1e7      	bne.n	3f66 <clock_stop+0xa>
            if (p_clk_src != NULL)
    3f96:	b3c7      	cbz	r7, 400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3f98:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3f9c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3fa0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3fa2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3fa6:	03da      	lsls	r2, r3, #15
    3fa8:	d521      	bpl.n	3fee <clock_stop+0x92>
    3faa:	e016      	b.n	3fda <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    3fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fb0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3fb2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3fba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fbe:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3fc0:	f10d 0707 	add.w	r7, sp, #7
    3fc4:	e7dd      	b.n	3f82 <clock_stop+0x26>
            if (p_clk_src != NULL)
    3fc6:	b1b7      	cbz	r7, 3ff6 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3fc8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3fcc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3fd0:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3fd2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3fd6:	03d8      	lsls	r0, r3, #15
    3fd8:	d5c5      	bpl.n	3f66 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3fda:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3fde:	2801      	cmp	r0, #1
    3fe0:	d103      	bne.n	3fea <clock_stop+0x8e>
    3fe2:	f003 fcdc 	bl	799e <nrfx_busy_wait>
    3fe6:	3d01      	subs	r5, #1
    3fe8:	d1d2      	bne.n	3f90 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3fea:	2c01      	cmp	r4, #1
    3fec:	d1bb      	bne.n	3f66 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    3fee:	4b0c      	ldr	r3, [pc, #48]	; (4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>)
    3ff0:	2200      	movs	r2, #0
    3ff2:	715a      	strb	r2, [r3, #5]
    3ff4:	e7b7      	b.n	3f66 <clock_stop+0xa>
    3ff6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3ffa:	03d9      	lsls	r1, r3, #15
    3ffc:	d5b3      	bpl.n	3f66 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3ffe:	2001      	movs	r0, #1
    4000:	f003 fccd 	bl	799e <nrfx_busy_wait>
    4004:	3d01      	subs	r5, #1
    4006:	d1f6      	bne.n	3ff6 <clock_stop+0x9a>
    4008:	e7ad      	b.n	3f66 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    400a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    400e:	03db      	lsls	r3, r3, #15
    4010:	d5ed      	bpl.n	3fee <clock_stop+0x92>
    4012:	2001      	movs	r0, #1
    4014:	f003 fcc3 	bl	799e <nrfx_busy_wait>
    4018:	3d01      	subs	r5, #1
    401a:	d1f6      	bne.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    401c:	e7e7      	b.n	3fee <clock_stop+0x92>
    401e:	bf00      	nop
    4020:	20000ed0 	.word	0x20000ed0

00004024 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4024:	4b04      	ldr	r3, [pc, #16]	; (4038 <nrfx_clock_init+0x14>)
    4026:	791a      	ldrb	r2, [r3, #4]
    4028:	b922      	cbnz	r2, 4034 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    402a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    402c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    402e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4030:	4802      	ldr	r0, [pc, #8]	; (403c <nrfx_clock_init+0x18>)
    4032:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4034:	4802      	ldr	r0, [pc, #8]	; (4040 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4036:	4770      	bx	lr
    4038:	20000ed0 	.word	0x20000ed0
    403c:	0bad0000 	.word	0x0bad0000
    4040:	0bad000c 	.word	0x0bad000c

00004044 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4044:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    404a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    404e:	b16a      	cbz	r2, 406c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4050:	2200      	movs	r2, #0
    4052:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4056:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    405a:	2201      	movs	r2, #1
    405c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4060:	4b11      	ldr	r3, [pc, #68]	; (40a8 <nrfx_power_clock_irq_handler+0x64>)
    4062:	7958      	ldrb	r0, [r3, #5]
    4064:	b910      	cbnz	r0, 406c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    4066:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4068:	681b      	ldr	r3, [r3, #0]
    406a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    406c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4070:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4074:	b172      	cbz	r2, 4094 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4076:	2200      	movs	r2, #0
    4078:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    407c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4080:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4084:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4088:	0792      	lsls	r2, r2, #30
    408a:	d104      	bne.n	4096 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    408c:	2201      	movs	r2, #1
    408e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4092:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4094:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4096:	2202      	movs	r2, #2
    4098:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    409c:	4b02      	ldr	r3, [pc, #8]	; (40a8 <nrfx_power_clock_irq_handler+0x64>)
}
    409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    40a2:	681b      	ldr	r3, [r3, #0]
    40a4:	2001      	movs	r0, #1
    40a6:	4718      	bx	r3
    40a8:	20000ed0 	.word	0x20000ed0

000040ac <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    40ac:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    40ae:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    40b2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    40b4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    40b6:	6002      	str	r2, [r0, #0]
}
    40b8:	4802      	ldr	r0, [pc, #8]	; (40c4 <nrf_gpio_pin_port_decode+0x18>)
    40ba:	bf18      	it	ne
    40bc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    40c0:	4770      	bx	lr
    40c2:	bf00      	nop
    40c4:	50000300 	.word	0x50000300

000040c8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    40c8:	4b03      	ldr	r3, [pc, #12]	; (40d8 <pin_in_use_by_te+0x10>)
    40ca:	3008      	adds	r0, #8
    40cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    40d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    40d4:	4770      	bx	lr
    40d6:	bf00      	nop
    40d8:	20000034 	.word	0x20000034

000040dc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    40dc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    40de:	f100 0308 	add.w	r3, r0, #8
    40e2:	4c0c      	ldr	r4, [pc, #48]	; (4114 <call_handler+0x38>)
    40e4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    40e8:	05da      	lsls	r2, r3, #23
{
    40ea:	4605      	mov	r5, r0
    40ec:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    40ee:	d507      	bpl.n	4100 <call_handler+0x24>
    40f0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    40f4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    40f8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    40fc:	6852      	ldr	r2, [r2, #4]
    40fe:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4100:	68a3      	ldr	r3, [r4, #8]
    4102:	b12b      	cbz	r3, 4110 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4104:	68e2      	ldr	r2, [r4, #12]
    4106:	4631      	mov	r1, r6
    4108:	4628      	mov	r0, r5
    }
}
    410a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    410e:	4718      	bx	r3
}
    4110:	bd70      	pop	{r4, r5, r6, pc}
    4112:	bf00      	nop
    4114:	20000034 	.word	0x20000034

00004118 <release_handler>:
{
    4118:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    411a:	4a13      	ldr	r2, [pc, #76]	; (4168 <release_handler+0x50>)
    411c:	3008      	adds	r0, #8
    411e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4122:	05d9      	lsls	r1, r3, #23
    4124:	d51c      	bpl.n	4160 <release_handler+0x48>
    4126:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    412a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    412e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4132:	f102 040e 	add.w	r4, r2, #14
    4136:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4138:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    413c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4140:	d003      	beq.n	414a <release_handler+0x32>
    4142:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4146:	4299      	cmp	r1, r3
    4148:	d00a      	beq.n	4160 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    414a:	3001      	adds	r0, #1
    414c:	2830      	cmp	r0, #48	; 0x30
    414e:	d1f3      	bne.n	4138 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4150:	2300      	movs	r3, #0
    4152:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4156:	4805      	ldr	r0, [pc, #20]	; (416c <release_handler+0x54>)
}
    4158:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    415c:	f7ff bede 	b.w	3f1c <nrfx_flag32_free>
}
    4160:	f85d 4b04 	ldr.w	r4, [sp], #4
    4164:	4770      	bx	lr
    4166:	bf00      	nop
    4168:	20000034 	.word	0x20000034
    416c:	200000a8 	.word	0x200000a8

00004170 <pin_handler_trigger_uninit>:
{
    4170:	b538      	push	{r3, r4, r5, lr}
    4172:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4174:	f7ff ffa8 	bl	40c8 <pin_in_use_by_te>
    4178:	4c09      	ldr	r4, [pc, #36]	; (41a0 <pin_handler_trigger_uninit+0x30>)
    417a:	f102 0508 	add.w	r5, r2, #8
    417e:	b140      	cbz	r0, 4192 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4180:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4184:	4907      	ldr	r1, [pc, #28]	; (41a4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4186:	0b5b      	lsrs	r3, r3, #13
    4188:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    418c:	2000      	movs	r0, #0
    418e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4192:	4610      	mov	r0, r2
    4194:	f7ff ffc0 	bl	4118 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4198:	2300      	movs	r3, #0
    419a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    419e:	bd38      	pop	{r3, r4, r5, pc}
    41a0:	20000034 	.word	0x20000034
    41a4:	40006000 	.word	0x40006000

000041a8 <nrfx_gpiote_input_configure>:
{
    41a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    41ac:	4604      	mov	r4, r0
    41ae:	4616      	mov	r6, r2
    41b0:	461d      	mov	r5, r3
    if (p_input_config)
    41b2:	b301      	cbz	r1, 41f6 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    41b4:	4f4e      	ldr	r7, [pc, #312]	; (42f0 <nrfx_gpiote_input_configure+0x148>)
    41b6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    41ba:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    41be:	079b      	lsls	r3, r3, #30
    41c0:	d502      	bpl.n	41c8 <nrfx_gpiote_input_configure+0x20>
    41c2:	f7ff ff81 	bl	40c8 <pin_in_use_by_te>
    41c6:	bb10      	cbnz	r0, 420e <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    41c8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    41ca:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    41ce:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    41d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    41d6:	f10d 020f 	add.w	r2, sp, #15
    41da:	460b      	mov	r3, r1
    41dc:	4620      	mov	r0, r4
    41de:	f10d 010e 	add.w	r1, sp, #14
    41e2:	f003 fc29 	bl	7a38 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    41e6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    41ea:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    41ee:	f043 0301 	orr.w	r3, r3, #1
    41f2:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    41f6:	b346      	cbz	r6, 424a <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    41f8:	4b3d      	ldr	r3, [pc, #244]	; (42f0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    41fa:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    41fe:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4200:	f104 0708 	add.w	r7, r4, #8
    4204:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    4208:	0788      	lsls	r0, r1, #30
    420a:	d502      	bpl.n	4212 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    420c:	b1aa      	cbz	r2, 423a <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    420e:	4839      	ldr	r0, [pc, #228]	; (42f4 <nrfx_gpiote_input_configure+0x14c>)
    4210:	e01d      	b.n	424e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4212:	f021 0120 	bic.w	r1, r1, #32
    4216:	04c9      	lsls	r1, r1, #19
    4218:	0cc9      	lsrs	r1, r1, #19
    421a:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    421e:	b162      	cbz	r2, 423a <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    4220:	f1bc 0f03 	cmp.w	ip, #3
    4224:	d8f3      	bhi.n	420e <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4226:	6872      	ldr	r2, [r6, #4]
    4228:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    422a:	f1bc 0f00 	cmp.w	ip, #0
    422e:	d111      	bne.n	4254 <nrfx_gpiote_input_configure+0xac>
    4230:	4a31      	ldr	r2, [pc, #196]	; (42f8 <nrfx_gpiote_input_configure+0x150>)
    4232:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    4236:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    423a:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    423e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4242:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    4246:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    424a:	bb45      	cbnz	r5, 429e <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    424c:	482b      	ldr	r0, [pc, #172]	; (42fc <nrfx_gpiote_input_configure+0x154>)
}
    424e:	b004      	add	sp, #16
    4250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4254:	00b2      	lsls	r2, r6, #2
    4256:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    425a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    425e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    4262:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4266:	f020 0003 	bic.w	r0, r0, #3
    426a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    426e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4272:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    4276:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    427a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    427e:	0220      	lsls	r0, r4, #8
    4280:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4284:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    4288:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    428c:	ea40 000e 	orr.w	r0, r0, lr
    4290:	f041 0120 	orr.w	r1, r1, #32
    4294:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    4298:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    429c:	e7cd      	b.n	423a <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    429e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    42a2:	4620      	mov	r0, r4
    42a4:	f7ff ff38 	bl	4118 <release_handler>
    if (!handler)
    42a8:	2e00      	cmp	r6, #0
    42aa:	d0cf      	beq.n	424c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    42ac:	4d10      	ldr	r5, [pc, #64]	; (42f0 <nrfx_gpiote_input_configure+0x148>)
    42ae:	e9d5 2300 	ldrd	r2, r3, [r5]
    42b2:	4296      	cmp	r6, r2
    42b4:	d101      	bne.n	42ba <nrfx_gpiote_input_configure+0x112>
    42b6:	429f      	cmp	r7, r3
    42b8:	d018      	beq.n	42ec <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    42ba:	4811      	ldr	r0, [pc, #68]	; (4300 <nrfx_gpiote_input_configure+0x158>)
    42bc:	f10d 010f 	add.w	r1, sp, #15
    42c0:	f7ff fe0c 	bl	3edc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    42c4:	4b0d      	ldr	r3, [pc, #52]	; (42fc <nrfx_gpiote_input_configure+0x154>)
    42c6:	4298      	cmp	r0, r3
    42c8:	d1c1      	bne.n	424e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    42ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    42ce:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    42d2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    42d6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    42d8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    42da:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    42de:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    42e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    42e6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    42ea:	e7af      	b.n	424c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    42ec:	2200      	movs	r2, #0
    42ee:	e7ee      	b.n	42ce <nrfx_gpiote_input_configure+0x126>
    42f0:	20000034 	.word	0x20000034
    42f4:	0bad0004 	.word	0x0bad0004
    42f8:	40006000 	.word	0x40006000
    42fc:	0bad0000 	.word	0x0bad0000
    4300:	200000a8 	.word	0x200000a8

00004304 <nrfx_gpiote_output_configure>:
{
    4304:	b5f0      	push	{r4, r5, r6, r7, lr}
    4306:	4604      	mov	r4, r0
    4308:	b085      	sub	sp, #20
    430a:	4615      	mov	r5, r2
    if (p_config)
    430c:	b319      	cbz	r1, 4356 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    430e:	4e33      	ldr	r6, [pc, #204]	; (43dc <nrfx_gpiote_output_configure+0xd8>)
    4310:	f100 0708 	add.w	r7, r0, #8
    4314:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4318:	0793      	lsls	r3, r2, #30
    431a:	d403      	bmi.n	4324 <nrfx_gpiote_output_configure+0x20>
    431c:	f7ff fed4 	bl	40c8 <pin_in_use_by_te>
    4320:	2800      	cmp	r0, #0
    4322:	d158      	bne.n	43d6 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4324:	f012 0f1c 	tst.w	r2, #28
    4328:	d002      	beq.n	4330 <nrfx_gpiote_output_configure+0x2c>
    432a:	784b      	ldrb	r3, [r1, #1]
    432c:	2b01      	cmp	r3, #1
    432e:	d052      	beq.n	43d6 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4330:	2301      	movs	r3, #1
    4332:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4336:	2300      	movs	r3, #0
    4338:	e9cd 1300 	strd	r1, r3, [sp]
    433c:	1c4a      	adds	r2, r1, #1
    433e:	1c8b      	adds	r3, r1, #2
    4340:	4620      	mov	r0, r4
    4342:	f10d 010f 	add.w	r1, sp, #15
    4346:	f003 fb77 	bl	7a38 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    434a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    434e:	f043 0303 	orr.w	r3, r3, #3
    4352:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4356:	b915      	cbnz	r5, 435e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4358:	4821      	ldr	r0, [pc, #132]	; (43e0 <nrfx_gpiote_output_configure+0xdc>)
}
    435a:	b005      	add	sp, #20
    435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    435e:	4e1f      	ldr	r6, [pc, #124]	; (43dc <nrfx_gpiote_output_configure+0xd8>)
    4360:	f104 0708 	add.w	r7, r4, #8
    4364:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4368:	0783      	lsls	r3, r0, #30
    436a:	d534      	bpl.n	43d6 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    436c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4370:	4661      	mov	r1, ip
    4372:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4374:	f020 0020 	bic.w	r0, r0, #32
    4378:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    437c:	04c0      	lsls	r0, r0, #19
    437e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4382:	0cc0      	lsrs	r0, r0, #19
    4384:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4388:	2300      	movs	r3, #0
    438a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    438e:	786a      	ldrb	r2, [r5, #1]
    4390:	2a00      	cmp	r2, #0
    4392:	d0e1      	beq.n	4358 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4394:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4398:	78ad      	ldrb	r5, [r5, #2]
    439a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    439e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    43a2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43a6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    43aa:	0223      	lsls	r3, r4, #8
    43ac:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    43b0:	0412      	lsls	r2, r2, #16
    43b2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43b6:	ea43 030e 	orr.w	r3, r3, lr
    43ba:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    43bc:	052a      	lsls	r2, r5, #20
    43be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    43c2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43c6:	4313      	orrs	r3, r2
    43c8:	f040 0020 	orr.w	r0, r0, #32
    43cc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    43d0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    43d4:	e7c0      	b.n	4358 <nrfx_gpiote_output_configure+0x54>
{
    43d6:	4803      	ldr	r0, [pc, #12]	; (43e4 <nrfx_gpiote_output_configure+0xe0>)
    43d8:	e7bf      	b.n	435a <nrfx_gpiote_output_configure+0x56>
    43da:	bf00      	nop
    43dc:	20000034 	.word	0x20000034
    43e0:	0bad0000 	.word	0x0bad0000
    43e4:	0bad0004 	.word	0x0bad0004

000043e8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    43e8:	4b01      	ldr	r3, [pc, #4]	; (43f0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    43ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    43ee:	4770      	bx	lr
    43f0:	20000034 	.word	0x20000034

000043f4 <nrfx_gpiote_channel_get>:
{
    43f4:	b508      	push	{r3, lr}
    43f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    43f8:	f7ff fe66 	bl	40c8 <pin_in_use_by_te>
    43fc:	b138      	cbz	r0, 440e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    43fe:	4b05      	ldr	r3, [pc, #20]	; (4414 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4400:	4805      	ldr	r0, [pc, #20]	; (4418 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4402:	3208      	adds	r2, #8
    4404:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4408:	0b5b      	lsrs	r3, r3, #13
    440a:	700b      	strb	r3, [r1, #0]
}
    440c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    440e:	4803      	ldr	r0, [pc, #12]	; (441c <nrfx_gpiote_channel_get+0x28>)
    4410:	e7fc      	b.n	440c <nrfx_gpiote_channel_get+0x18>
    4412:	bf00      	nop
    4414:	20000034 	.word	0x20000034
    4418:	0bad0000 	.word	0x0bad0000
    441c:	0bad0004 	.word	0x0bad0004

00004420 <nrfx_gpiote_init>:
{
    4420:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4422:	4c0f      	ldr	r4, [pc, #60]	; (4460 <nrfx_gpiote_init+0x40>)
    4424:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4428:	b9bd      	cbnz	r5, 445a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    442a:	2260      	movs	r2, #96	; 0x60
    442c:	4629      	mov	r1, r5
    442e:	f104 0010 	add.w	r0, r4, #16
    4432:	f002 ff97 	bl	7364 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4436:	2006      	movs	r0, #6
    4438:	f7fd fbb2 	bl	1ba0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    443c:	4b09      	ldr	r3, [pc, #36]	; (4464 <nrfx_gpiote_init+0x44>)
    return err_code;
    443e:	480a      	ldr	r0, [pc, #40]	; (4468 <nrfx_gpiote_init+0x48>)
    4440:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4444:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4448:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    444c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4450:	2301      	movs	r3, #1
    4452:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4456:	6763      	str	r3, [r4, #116]	; 0x74
}
    4458:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    445a:	4804      	ldr	r0, [pc, #16]	; (446c <nrfx_gpiote_init+0x4c>)
    445c:	e7fc      	b.n	4458 <nrfx_gpiote_init+0x38>
    445e:	bf00      	nop
    4460:	20000034 	.word	0x20000034
    4464:	40006000 	.word	0x40006000
    4468:	0bad0000 	.word	0x0bad0000
    446c:	0bad0005 	.word	0x0bad0005

00004470 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4470:	4b03      	ldr	r3, [pc, #12]	; (4480 <nrfx_gpiote_is_init+0x10>)
    4472:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4476:	3800      	subs	r0, #0
    4478:	bf18      	it	ne
    447a:	2001      	movne	r0, #1
    447c:	4770      	bx	lr
    447e:	bf00      	nop
    4480:	20000034 	.word	0x20000034

00004484 <nrfx_gpiote_channel_free>:
{
    4484:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4486:	4801      	ldr	r0, [pc, #4]	; (448c <nrfx_gpiote_channel_free+0x8>)
    4488:	f7ff bd48 	b.w	3f1c <nrfx_flag32_free>
    448c:	200000a4 	.word	0x200000a4

00004490 <nrfx_gpiote_channel_alloc>:
{
    4490:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4492:	4801      	ldr	r0, [pc, #4]	; (4498 <nrfx_gpiote_channel_alloc+0x8>)
    4494:	f7ff bd22 	b.w	3edc <nrfx_flag32_alloc>
    4498:	200000a4 	.word	0x200000a4

0000449c <nrfx_gpiote_trigger_enable>:
{
    449c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    449e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    44a0:	f7ff fe12 	bl	40c8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    44a4:	f104 0208 	add.w	r2, r4, #8
    44a8:	4b1e      	ldr	r3, [pc, #120]	; (4524 <nrfx_gpiote_trigger_enable+0x88>)
    44aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    44ae:	b1e8      	cbz	r0, 44ec <nrfx_gpiote_trigger_enable+0x50>
    44b0:	f013 0502 	ands.w	r5, r3, #2
    44b4:	d11a      	bne.n	44ec <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    44b6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    44b8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    44ba:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    44be:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    44c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    44c6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    44ca:	6005      	str	r5, [r0, #0]
    44cc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    44ce:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    44d2:	f040 0001 	orr.w	r0, r0, #1
    44d6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    44da:	b129      	cbz	r1, 44e8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    44dc:	2201      	movs	r2, #1
    44de:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    44e2:	4a11      	ldr	r2, [pc, #68]	; (4528 <nrfx_gpiote_trigger_enable+0x8c>)
    44e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    44e8:	b003      	add	sp, #12
    44ea:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    44ec:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    44f0:	2b04      	cmp	r3, #4
    44f2:	d012      	beq.n	451a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    44f4:	2b05      	cmp	r3, #5
    44f6:	d012      	beq.n	451e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    44f8:	a801      	add	r0, sp, #4
    44fa:	9401      	str	r4, [sp, #4]
    44fc:	f7ff fdd6 	bl	40ac <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4500:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4502:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4506:	40d9      	lsrs	r1, r3
    4508:	f001 0101 	and.w	r1, r1, #1
    450c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    450e:	4620      	mov	r0, r4
}
    4510:	b003      	add	sp, #12
    4512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4516:	f003 bad8 	b.w	7aca <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    451a:	2103      	movs	r1, #3
    451c:	e7f7      	b.n	450e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    451e:	2102      	movs	r1, #2
    4520:	e7f5      	b.n	450e <nrfx_gpiote_trigger_enable+0x72>
    4522:	bf00      	nop
    4524:	20000034 	.word	0x20000034
    4528:	40006000 	.word	0x40006000

0000452c <nrfx_gpiote_trigger_disable>:
{
    452c:	b508      	push	{r3, lr}
    452e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4530:	f7ff fdca 	bl	40c8 <pin_in_use_by_te>
    4534:	b1c0      	cbz	r0, 4568 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4536:	f102 0108 	add.w	r1, r2, #8
    453a:	4b0e      	ldr	r3, [pc, #56]	; (4574 <nrfx_gpiote_trigger_disable+0x48>)
    453c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4540:	0799      	lsls	r1, r3, #30
    4542:	d411      	bmi.n	4568 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4544:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4546:	2201      	movs	r2, #1
    4548:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    454a:	009b      	lsls	r3, r3, #2
    454c:	490a      	ldr	r1, [pc, #40]	; (4578 <nrfx_gpiote_trigger_disable+0x4c>)
    454e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4552:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4556:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    455a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    455e:	f022 0203 	bic.w	r2, r2, #3
    4562:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4566:	bd08      	pop	{r3, pc}
    4568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    456c:	2100      	movs	r1, #0
    456e:	4610      	mov	r0, r2
    4570:	f003 baab 	b.w	7aca <nrf_gpio_cfg_sense_set>
    4574:	20000034 	.word	0x20000034
    4578:	40006000 	.word	0x40006000

0000457c <nrfx_gpiote_pin_uninit>:
{
    457c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    457e:	4b0e      	ldr	r3, [pc, #56]	; (45b8 <nrfx_gpiote_pin_uninit+0x3c>)
    4580:	f100 0208 	add.w	r2, r0, #8
{
    4584:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4586:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    458a:	07db      	lsls	r3, r3, #31
    458c:	d511      	bpl.n	45b2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    458e:	f7ff ffcd 	bl	452c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4592:	4620      	mov	r0, r4
    4594:	f7ff fdec 	bl	4170 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4598:	a801      	add	r0, sp, #4
    459a:	9401      	str	r4, [sp, #4]
    459c:	f7ff fd86 	bl	40ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    45a0:	9b01      	ldr	r3, [sp, #4]
    45a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    45a6:	2202      	movs	r2, #2
    45a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    45ac:	4803      	ldr	r0, [pc, #12]	; (45bc <nrfx_gpiote_pin_uninit+0x40>)
}
    45ae:	b002      	add	sp, #8
    45b0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    45b2:	4803      	ldr	r0, [pc, #12]	; (45c0 <nrfx_gpiote_pin_uninit+0x44>)
    45b4:	e7fb      	b.n	45ae <nrfx_gpiote_pin_uninit+0x32>
    45b6:	bf00      	nop
    45b8:	20000034 	.word	0x20000034
    45bc:	0bad0000 	.word	0x0bad0000
    45c0:	0bad0004 	.word	0x0bad0004

000045c4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    45c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45c8:	4b68      	ldr	r3, [pc, #416]	; (476c <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    45ca:	4869      	ldr	r0, [pc, #420]	; (4770 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    45cc:	4969      	ldr	r1, [pc, #420]	; (4774 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    45ce:	2600      	movs	r6, #0
{
    45d0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    45d2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    45d4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45d6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    45d8:	b135      	cbz	r5, 45e8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    45da:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    45de:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    45e0:	bf1e      	ittt	ne
    45e2:	601c      	strne	r4, [r3, #0]
    45e4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    45e6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    45e8:	3304      	adds	r3, #4
    45ea:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    45ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    45f0:	d1f1      	bne.n	45d6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45f2:	f8df 917c 	ldr.w	r9, [pc, #380]	; 4770 <nrfx_gpiote_irq_handler+0x1ac>
    45f6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    45fa:	2b00      	cmp	r3, #0
    45fc:	f000 8099 	beq.w	4732 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    4600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4604:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4608:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    460a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    460e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4612:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4614:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4618:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    461c:	f10d 0a10 	add.w	sl, sp, #16
    4620:	ea4f 1348 	mov.w	r3, r8, lsl #5
    4624:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4626:	f04f 0b01 	mov.w	fp, #1
    462a:	e049      	b.n	46c0 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    462c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    462e:	4a52      	ldr	r2, [pc, #328]	; (4778 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4630:	fa94 f4a4 	rbit	r4, r4
    4634:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4638:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    463a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    463c:	f104 0308 	add.w	r3, r4, #8
    4640:	9403      	str	r4, [sp, #12]
    4642:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    4646:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    464a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    464e:	fa0b f202 	lsl.w	r2, fp, r2
    4652:	ea23 0302 	bic.w	r3, r3, r2
    4656:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    465a:	a803      	add	r0, sp, #12
    465c:	f7ff fd26 	bl	40ac <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4660:	9b03      	ldr	r3, [sp, #12]
    4662:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4666:	08b9      	lsrs	r1, r7, #2
    4668:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    466c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    4670:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4672:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4674:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    4678:	d52c      	bpl.n	46d4 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    467a:	4620      	mov	r0, r4
    467c:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    467e:	b2dd      	uxtb	r5, r3
    4680:	f7ff fd2c 	bl	40dc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4684:	a803      	add	r0, sp, #12
    4686:	9403      	str	r4, [sp, #12]
    4688:	f7ff fd10 	bl	40ac <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    468c:	9b03      	ldr	r3, [sp, #12]
    468e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4692:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4696:	f3c3 4301 	ubfx	r3, r3, #16, #2
    469a:	429d      	cmp	r5, r3
    469c:	d107      	bne.n	46ae <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    469e:	2100      	movs	r1, #0
    46a0:	4620      	mov	r0, r4
    46a2:	f003 fa12 	bl	7aca <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    46a6:	4629      	mov	r1, r5
    46a8:	4620      	mov	r0, r4
    46aa:	f003 fa0e 	bl	7aca <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46ae:	a803      	add	r0, sp, #12
    46b0:	9403      	str	r4, [sp, #12]
    46b2:	f7ff fcfb 	bl	40ac <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    46b6:	9b03      	ldr	r3, [sp, #12]
    46b8:	fa0b f303 	lsl.w	r3, fp, r3
    46bc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    46c0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    46c4:	2c00      	cmp	r4, #0
    46c6:	d1b1      	bne.n	462c <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    46c8:	f1b8 0f00 	cmp.w	r8, #0
    46cc:	d11d      	bne.n	470a <nrfx_gpiote_irq_handler+0x146>
    46ce:	f04f 0801 	mov.w	r8, #1
    46d2:	e7a5      	b.n	4620 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    46d4:	2b02      	cmp	r3, #2
    46d6:	d10c      	bne.n	46f2 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    46d8:	2103      	movs	r1, #3
    46da:	4620      	mov	r0, r4
    46dc:	f003 f9f5 	bl	7aca <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    46e0:	f005 0305 	and.w	r3, r5, #5
    46e4:	2b01      	cmp	r3, #1
    46e6:	d1e2      	bne.n	46ae <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    46e8:	4639      	mov	r1, r7
    46ea:	4620      	mov	r0, r4
    46ec:	f7ff fcf6 	bl	40dc <call_handler>
    46f0:	e7dd      	b.n	46ae <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    46f2:	2102      	movs	r1, #2
    46f4:	4620      	mov	r0, r4
    46f6:	9301      	str	r3, [sp, #4]
    46f8:	f003 f9e7 	bl	7aca <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    46fc:	2d03      	cmp	r5, #3
    46fe:	d0f3      	beq.n	46e8 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4700:	9b01      	ldr	r3, [sp, #4]
    4702:	2b03      	cmp	r3, #3
    4704:	d1d3      	bne.n	46ae <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4706:	2d02      	cmp	r5, #2
    4708:	e7ed      	b.n	46e6 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    470a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    470e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    4712:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    4716:	4919      	ldr	r1, [pc, #100]	; (477c <nrfx_gpiote_irq_handler+0x1b8>)
    4718:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    471c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    471e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4722:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    4726:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    4728:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    472a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    472e:	f47f af73 	bne.w	4618 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    4732:	2401      	movs	r4, #1
    while (mask)
    4734:	b916      	cbnz	r6, 473c <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4736:	b007      	add	sp, #28
    4738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    473c:	fa96 f3a6 	rbit	r3, r6
    4740:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4744:	fa04 f203 	lsl.w	r2, r4, r3
    4748:	009b      	lsls	r3, r3, #2
    474a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    474e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4752:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4756:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    475a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    475e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4762:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4766:	f7ff fcb9 	bl	40dc <call_handler>
    476a:	e7e3      	b.n	4734 <nrfx_gpiote_irq_handler+0x170>
    476c:	40006100 	.word	0x40006100
    4770:	40006000 	.word	0x40006000
    4774:	40006120 	.word	0x40006120
    4778:	20000034 	.word	0x20000034
    477c:	50000300 	.word	0x50000300

00004780 <nvmc_word_write>:
    4780:	4a04      	ldr	r2, [pc, #16]	; (4794 <nvmc_word_write+0x14>)
    4782:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4786:	07db      	lsls	r3, r3, #31
    4788:	d5fb      	bpl.n	4782 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    478a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    478c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    4790:	4770      	bx	lr
    4792:	bf00      	nop
    4794:	4001e000 	.word	0x4001e000

00004798 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    4798:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    479c:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    479e:	fbb0 f3f2 	udiv	r3, r0, r2
    47a2:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    47a6:	b973      	cbnz	r3, 47c6 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    47a8:	4b08      	ldr	r3, [pc, #32]	; (47cc <nrfx_nvmc_page_erase+0x34>)
    47aa:	2202      	movs	r2, #2
    47ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    47b0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    47b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    47b8:	07d2      	lsls	r2, r2, #31
    47ba:	d5fb      	bpl.n	47b4 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    47bc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    47be:	4804      	ldr	r0, [pc, #16]	; (47d0 <nrfx_nvmc_page_erase+0x38>)
    47c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    47c4:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    47c6:	4803      	ldr	r0, [pc, #12]	; (47d4 <nrfx_nvmc_page_erase+0x3c>)
}
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop
    47cc:	4001e000 	.word	0x4001e000
    47d0:	0bad0000 	.word	0x0bad0000
    47d4:	0bad000a 	.word	0x0bad000a

000047d8 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    47d8:	b510      	push	{r4, lr}
    47da:	4c05      	ldr	r4, [pc, #20]	; (47f0 <nrfx_nvmc_word_write+0x18>)
    47dc:	2301      	movs	r3, #1
    47de:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    47e2:	f7ff ffcd 	bl	4780 <nvmc_word_write>
    47e6:	2300      	movs	r3, #0
    47e8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    47ec:	bd10      	pop	{r4, pc}
    47ee:	bf00      	nop
    47f0:	4001e000 	.word	0x4001e000

000047f4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    47f4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    47f6:	4801      	ldr	r0, [pc, #4]	; (47fc <nrfx_ppi_channel_alloc+0x8>)
    47f8:	f7ff bb70 	b.w	3edc <nrfx_flag32_alloc>
    47fc:	200000b0 	.word	0x200000b0

00004800 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4800:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4802:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4806:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    4808:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    480a:	6002      	str	r2, [r0, #0]
}
    480c:	4802      	ldr	r0, [pc, #8]	; (4818 <nrf_gpio_pin_port_decode+0x18>)
    480e:	bf18      	it	ne
    4810:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4814:	4770      	bx	lr
    4816:	bf00      	nop
    4818:	50000300 	.word	0x50000300

0000481c <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    481c:	b570      	push	{r4, r5, r6, lr}
    481e:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    4822:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    4826:	d166      	bne.n	48f6 <qspi_xfer+0xda>
    4828:	0784      	lsls	r4, r0, #30
    482a:	d164      	bne.n	48f6 <qspi_xfer+0xda>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    482c:	4d34      	ldr	r5, [pc, #208]	; (4900 <qspi_xfer+0xe4>)
    482e:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
    4832:	2c01      	cmp	r4, #1
    4834:	d001      	beq.n	483a <qspi_xfer+0x1e>
    4836:	429c      	cmp	r4, r3
    4838:	d15f      	bne.n	48fa <qspi_xfer+0xde>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    483a:	682c      	ldr	r4, [r5, #0]
    483c:	bb04      	cbnz	r4, 4880 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    483e:	2b02      	cmp	r3, #2
    4840:	4b30      	ldr	r3, [pc, #192]	; (4904 <qspi_xfer+0xe8>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    4842:	bf0b      	itete	eq
    4844:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    4848:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    484c:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    4850:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    4854:	bf0b      	itete	eq
    4856:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
    485a:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    485e:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    4860:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4862:	2100      	movs	r1, #0
    4864:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4868:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    486c:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    4870:	2201      	movs	r2, #1
    4872:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4874:	4a23      	ldr	r2, [pc, #140]	; (4904 <qspi_xfer+0xe8>)
    4876:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    487a:	2b00      	cmp	r3, #0
    487c:	d0fb      	beq.n	4876 <qspi_xfer+0x5a>
    487e:	e00d      	b.n	489c <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
    4880:	68ae      	ldr	r6, [r5, #8]
    4882:	4c20      	ldr	r4, [pc, #128]	; (4904 <qspi_xfer+0xe8>)
    4884:	b166      	cbz	r6, 48a0 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    4886:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
    4888:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
    488a:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
    488c:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    488e:	d12b      	bne.n	48e8 <qspi_xfer+0xcc>
    p_reg->WRITE.DST = dest_addr;
    4890:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    4894:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
    4898:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    489c:	481a      	ldr	r0, [pc, #104]	; (4908 <qspi_xfer+0xec>)
}
    489e:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    48a0:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
    48a2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        task = NRF_QSPI_TASK_WRITESTART;
    48a6:	bf0c      	ite	eq
    48a8:	2308      	moveq	r3, #8
        task = NRF_QSPI_TASK_READSTART;
    48aa:	2304      	movne	r3, #4
            m_cb.size_primary     = length;
    48ac:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
    48ae:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
    48b0:	60a8      	str	r0, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    p_reg->WRITE.DST = dest_addr;
    48b6:	bf0b      	itete	eq
    48b8:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
    48bc:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    48c0:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    48c4:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    48c8:	bf0c      	ite	eq
    48ca:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    48ce:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48d2:	490c      	ldr	r1, [pc, #48]	; (4904 <qspi_xfer+0xe8>)
    48d4:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48d6:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48da:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    48de:	2201      	movs	r2, #1
    48e0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48e4:	601a      	str	r2, [r3, #0]
}
    48e6:	e7d9      	b.n	489c <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
    48e8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
    48ec:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
    48f0:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
    48f4:	e7d2      	b.n	489c <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
    48f6:	4805      	ldr	r0, [pc, #20]	; (490c <qspi_xfer+0xf0>)
    48f8:	e7d1      	b.n	489e <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
    48fa:	4805      	ldr	r0, [pc, #20]	; (4910 <qspi_xfer+0xf4>)
    48fc:	e7cf      	b.n	489e <qspi_xfer+0x82>
    48fe:	bf00      	nop
    4900:	20000ed8 	.word	0x20000ed8
    4904:	40029000 	.word	0x40029000
    4908:	0bad0000 	.word	0x0bad0000
    490c:	0bad000a 	.word	0x0bad000a
    4910:	0bad000b 	.word	0x0bad000b

00004914 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    4914:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4916:	4d07      	ldr	r5, [pc, #28]	; (4934 <qspi_ready_wait+0x20>)
    4918:	2464      	movs	r4, #100	; 0x64
    491a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    491e:	b933      	cbnz	r3, 492e <qspi_ready_wait+0x1a>
    4920:	200a      	movs	r0, #10
    4922:	f003 f83c 	bl	799e <nrfx_busy_wait>
    4926:	3c01      	subs	r4, #1
    4928:	d1f7      	bne.n	491a <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    492a:	4803      	ldr	r0, [pc, #12]	; (4938 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    492c:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    492e:	4803      	ldr	r0, [pc, #12]	; (493c <qspi_ready_wait+0x28>)
    4930:	e7fc      	b.n	492c <qspi_ready_wait+0x18>
    4932:	bf00      	nop
    4934:	40029000 	.word	0x40029000
    4938:	0bad0007 	.word	0x0bad0007
    493c:	0bad0000 	.word	0x0bad0000

00004940 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    4940:	4b08      	ldr	r3, [pc, #32]	; (4964 <qspi_event_xfer_handle.constprop.0+0x24>)
    4942:	689a      	ldr	r2, [r3, #8]
    4944:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    4946:	691a      	ldr	r2, [r3, #16]
    4948:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    494a:	699a      	ldr	r2, [r3, #24]
    494c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    494e:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    4950:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    4952:	b132      	cbz	r2, 4962 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    4954:	695a      	ldr	r2, [r3, #20]
    4956:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    4958:	69da      	ldr	r2, [r3, #28]
    495a:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    495c:	2200      	movs	r2, #0
    495e:	60da      	str	r2, [r3, #12]
    4960:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    4962:	4770      	bx	lr
    4964:	20000ed8 	.word	0x20000ed8

00004968 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
    4968:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    496a:	4b0e      	ldr	r3, [pc, #56]	; (49a4 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    496c:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    496e:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    4972:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    4976:	2807      	cmp	r0, #7
    4978:	d813      	bhi.n	49a2 <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
    497a:	e8df f000 	tbb	[pc, r0]
    497e:	0f11      	.short	0x0f11
    4980:	080a0b0d 	.word	0x080a0b0d
    4984:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    4986:	0e10      	lsrs	r0, r2, #24
    4988:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    498a:	0c10      	lsrs	r0, r2, #16
    498c:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    498e:	0a10      	lsrs	r0, r2, #8
    4990:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    4992:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    4994:	0e1a      	lsrs	r2, r3, #24
    4996:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    4998:	0c1a      	lsrs	r2, r3, #16
    499a:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    499c:	0a1a      	lsrs	r2, r3, #8
    499e:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    49a0:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    49a2:	bd10      	pop	{r4, pc}
    49a4:	40029000 	.word	0x40029000

000049a8 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    49a8:	3802      	subs	r0, #2
    49aa:	2807      	cmp	r0, #7
    49ac:	d81f      	bhi.n	49ee <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    49ae:	e8df f000 	tbb	[pc, r0]
    49b2:	2729      	.short	0x2729
    49b4:	21231125 	.word	0x21231125
    49b8:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    49ba:	79cb      	ldrb	r3, [r1, #7]
    49bc:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    49be:	798a      	ldrb	r2, [r1, #6]
    49c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    49c4:	794a      	ldrb	r2, [r1, #5]
    49c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    49ca:	790a      	ldrb	r2, [r1, #4]
    49cc:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    49ce:	4a0e      	ldr	r2, [pc, #56]	; (4a08 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    49d0:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    49d4:	78cb      	ldrb	r3, [r1, #3]
    49d6:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    49d8:	788a      	ldrb	r2, [r1, #2]
    49da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    49de:	784a      	ldrb	r2, [r1, #1]
    49e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    49e4:	780a      	ldrb	r2, [r1, #0]
    49e6:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    49e8:	4a07      	ldr	r2, [pc, #28]	; (4a08 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    49ea:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    49ee:	4770      	bx	lr
    switch (length)
    49f0:	2300      	movs	r3, #0
    49f2:	e7e4      	b.n	49be <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    49f4:	2300      	movs	r3, #0
    49f6:	e7e5      	b.n	49c4 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    49f8:	2300      	movs	r3, #0
    49fa:	e7e6      	b.n	49ca <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    49fc:	2300      	movs	r3, #0
    49fe:	e7eb      	b.n	49d8 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    4a00:	2300      	movs	r3, #0
    4a02:	e7ec      	b.n	49de <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    4a04:	2300      	movs	r3, #0
    4a06:	e7ed      	b.n	49e4 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    4a08:	40029000 	.word	0x40029000

00004a0c <nrfx_qspi_init>:
{
    4a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    4a0e:	4e6b      	ldr	r6, [pc, #428]	; (4bbc <nrfx_qspi_init+0x1b0>)
    4a10:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
{
    4a14:	4604      	mov	r4, r0
    4a16:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    4a18:	2b00      	cmp	r3, #0
    4a1a:	f040 80ca 	bne.w	4bb2 <nrfx_qspi_init+0x1a6>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    4a1e:	7cc2      	ldrb	r2, [r0, #19]
    4a20:	b11a      	cbz	r2, 4a2a <nrfx_qspi_init+0x1e>
    4a22:	7d03      	ldrb	r3, [r0, #20]
    4a24:	2b00      	cmp	r3, #0
    4a26:	f040 8084 	bne.w	4b32 <nrfx_qspi_init+0x126>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    4a2a:	7923      	ldrb	r3, [r4, #4]
    4a2c:	2bff      	cmp	r3, #255	; 0xff
    4a2e:	f000 80c3 	beq.w	4bb8 <nrfx_qspi_init+0x1ac>
    4a32:	7960      	ldrb	r0, [r4, #5]
    4a34:	28ff      	cmp	r0, #255	; 0xff
    4a36:	f000 80bf 	beq.w	4bb8 <nrfx_qspi_init+0x1ac>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    4a3a:	79a0      	ldrb	r0, [r4, #6]
    4a3c:	28ff      	cmp	r0, #255	; 0xff
    4a3e:	f000 80bb 	beq.w	4bb8 <nrfx_qspi_init+0x1ac>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    4a42:	79e0      	ldrb	r0, [r4, #7]
    4a44:	28ff      	cmp	r0, #255	; 0xff
    4a46:	f000 80b7 	beq.w	4bb8 <nrfx_qspi_init+0x1ac>
    if (!p_config->skip_gpio_cfg)
    4a4a:	2a00      	cmp	r2, #0
    4a4c:	d142      	bne.n	4ad4 <nrfx_qspi_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a4e:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    4a50:	9301      	str	r3, [sp, #4]
    4a52:	f7ff fed5 	bl	4800 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a56:	9b01      	ldr	r3, [sp, #4]
    4a58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a5c:	f240 3702 	movw	r7, #770	; 0x302
    4a60:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a64:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    4a66:	7963      	ldrb	r3, [r4, #5]
    4a68:	9301      	str	r3, [sp, #4]
    4a6a:	f7ff fec9 	bl	4800 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a6e:	9b01      	ldr	r3, [sp, #4]
    4a70:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a74:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a78:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    4a7a:	79a3      	ldrb	r3, [r4, #6]
    4a7c:	9301      	str	r3, [sp, #4]
    4a7e:	f7ff febf 	bl	4800 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a82:	9b01      	ldr	r3, [sp, #4]
    4a84:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a88:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a8c:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    4a8e:	79e3      	ldrb	r3, [r4, #7]
    4a90:	9301      	str	r3, [sp, #4]
    4a92:	f7ff feb5 	bl	4800 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a96:	9b01      	ldr	r3, [sp, #4]
    4a98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a9c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    4aa0:	7a23      	ldrb	r3, [r4, #8]
    4aa2:	2bff      	cmp	r3, #255	; 0xff
    4aa4:	d008      	beq.n	4ab8 <nrfx_qspi_init+0xac>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4aa6:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    4aa8:	9301      	str	r3, [sp, #4]
    4aaa:	f7ff fea9 	bl	4800 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4aae:	9b01      	ldr	r3, [sp, #4]
    4ab0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4ab4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    4ab8:	7a63      	ldrb	r3, [r4, #9]
    4aba:	2bff      	cmp	r3, #255	; 0xff
    4abc:	d00a      	beq.n	4ad4 <nrfx_qspi_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4abe:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    4ac0:	9301      	str	r3, [sp, #4]
    4ac2:	f7ff fe9d 	bl	4800 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4ac6:	9b01      	ldr	r3, [sp, #4]
    4ac8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4acc:	f240 3202 	movw	r2, #770	; 0x302
    4ad0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    4ad4:	7d23      	ldrb	r3, [r4, #20]
    4ad6:	bb63      	cbnz	r3, 4b32 <nrfx_qspi_init+0x126>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    4ad8:	7923      	ldrb	r3, [r4, #4]
    4ada:	2bff      	cmp	r3, #255	; 0xff
    4adc:	bf18      	it	ne
    4ade:	461a      	movne	r2, r3
    4ae0:	4b37      	ldr	r3, [pc, #220]	; (4bc0 <nrfx_qspi_init+0x1b4>)
    4ae2:	bf08      	it	eq
    4ae4:	f04f 32ff 	moveq.w	r2, #4294967295
    4ae8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    4aec:	7962      	ldrb	r2, [r4, #5]
    4aee:	2aff      	cmp	r2, #255	; 0xff
    4af0:	bf08      	it	eq
    4af2:	f04f 32ff 	moveq.w	r2, #4294967295
    4af6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    4afa:	79a2      	ldrb	r2, [r4, #6]
    4afc:	2aff      	cmp	r2, #255	; 0xff
    4afe:	bf08      	it	eq
    4b00:	f04f 32ff 	moveq.w	r2, #4294967295
    4b04:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    4b08:	79e2      	ldrb	r2, [r4, #7]
    4b0a:	2aff      	cmp	r2, #255	; 0xff
    4b0c:	bf08      	it	eq
    4b0e:	f04f 32ff 	moveq.w	r2, #4294967295
    4b12:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    4b16:	7a22      	ldrb	r2, [r4, #8]
    4b18:	2aff      	cmp	r2, #255	; 0xff
    4b1a:	bf08      	it	eq
    4b1c:	f04f 32ff 	moveq.w	r2, #4294967295
    4b20:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    4b24:	7a62      	ldrb	r2, [r4, #9]
    4b26:	2aff      	cmp	r2, #255	; 0xff
    4b28:	bf08      	it	eq
    4b2a:	f04f 32ff 	moveq.w	r2, #4294967295
    4b2e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->XIPOFFSET = xip_offset;
    4b32:	4a23      	ldr	r2, [pc, #140]	; (4bc0 <nrfx_qspi_init+0x1b4>)
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    4b34:	6823      	ldr	r3, [r4, #0]
    4b36:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    4b3a:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    4b3c:	7ae7      	ldrb	r7, [r4, #11]
    uint32_t config = p_config->readoc;
    4b3e:	7aa0      	ldrb	r0, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    4b40:	019b      	lsls	r3, r3, #6
    4b42:	ea43 03c7 	orr.w	r3, r3, r7, lsl #3
    4b46:	4303      	orrs	r3, r0
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    4b48:	7b60      	ldrb	r0, [r4, #13]
    4b4a:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
    p_reg->IFCONFIG0 = config;
    4b4e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    4b52:	f8d2 0600 	ldr.w	r0, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
    4b56:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    4b58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4b5c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
    config |= p_config->sck_delay;
    4b60:	4303      	orrs	r3, r0
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    4b62:	7be0      	ldrb	r0, [r4, #15]
    4b64:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
    4b68:	7c20      	ldrb	r0, [r4, #16]
    4b6a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    4b6e:	7c60      	ldrb	r0, [r4, #17]
    4b70:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
    p_reg->IFCONFIG1 = config;
    4b74:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    4b78:	7ce3      	ldrb	r3, [r4, #19]
    4b7a:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
    p_reg->INTENCLR = mask;
    4b7e:	2301      	movs	r3, #1
    m_cb.p_context = p_context;
    4b80:	e9c6 1500 	strd	r1, r5, [r6]
    4b84:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
    4b88:	b111      	cbz	r1, 4b90 <nrfx_qspi_init+0x184>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    4b8a:	2029      	movs	r0, #41	; 0x29
    4b8c:	f7fd f808 	bl	1ba0 <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    4b90:	4b0b      	ldr	r3, [pc, #44]	; (4bc0 <nrfx_qspi_init+0x1b4>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    4b92:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
    4b94:	2100      	movs	r1, #0
    m_cb.p_buffer_secondary = NULL;
    4b96:	e9c6 1102 	strd	r1, r1, [r6, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    4b9a:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    4b9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ba2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ba6:	601a      	str	r2, [r3, #0]
}
    4ba8:	b003      	add	sp, #12
    4baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return qspi_ready_wait();
    4bae:	f7ff beb1 	b.w	4914 <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
    4bb2:	4804      	ldr	r0, [pc, #16]	; (4bc4 <nrfx_qspi_init+0x1b8>)
}
    4bb4:	b003      	add	sp, #12
    4bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4bb8:	4803      	ldr	r0, [pc, #12]	; (4bc8 <nrfx_qspi_init+0x1bc>)
    4bba:	e7fb      	b.n	4bb4 <nrfx_qspi_init+0x1a8>
    4bbc:	20000ed8 	.word	0x20000ed8
    4bc0:	40029000 	.word	0x40029000
    4bc4:	0bad0005 	.word	0x0bad0005
    4bc8:	0bad0004 	.word	0x0bad0004

00004bcc <nrfx_qspi_cinstr_xfer>:
{
    4bcc:	b570      	push	{r4, r5, r6, lr}
    4bce:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    4bd0:	4a19      	ldr	r2, [pc, #100]	; (4c38 <nrfx_qspi_cinstr_xfer+0x6c>)
    4bd2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    4bd6:	2a01      	cmp	r2, #1
{
    4bd8:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    4bda:	d12b      	bne.n	4c34 <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4bdc:	4e17      	ldr	r6, [pc, #92]	; (4c3c <nrfx_qspi_cinstr_xfer+0x70>)
    4bde:	2200      	movs	r2, #0
    4be0:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
    4be4:	b111      	cbz	r1, 4bec <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    4be6:	7840      	ldrb	r0, [r0, #1]
    4be8:	f7ff fede 	bl	49a8 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    4bec:	2301      	movs	r3, #1
    4bee:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    4bf2:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    4bf4:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    4bf6:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    4bf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    4bfc:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    4bfe:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    4c00:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    4c02:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    4c06:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    4c08:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    4c0c:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    4c0e:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    4c12:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    4c16:	f7ff fe7d 	bl	4914 <qspi_ready_wait>
    4c1a:	4b09      	ldr	r3, [pc, #36]	; (4c40 <nrfx_qspi_cinstr_xfer+0x74>)
    4c1c:	4298      	cmp	r0, r3
    4c1e:	d008      	beq.n	4c32 <nrfx_qspi_cinstr_xfer+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c20:	2300      	movs	r3, #0
    4c22:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
    4c26:	b11c      	cbz	r4, 4c30 <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    4c28:	7868      	ldrb	r0, [r5, #1]
    4c2a:	4621      	mov	r1, r4
    4c2c:	f7ff fe9c 	bl	4968 <nrf_qspi_cinstrdata_get.constprop.0>
        return NRFX_ERROR_BUSY;
    4c30:	4804      	ldr	r0, [pc, #16]	; (4c44 <nrfx_qspi_cinstr_xfer+0x78>)
}
    4c32:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
    4c34:	4804      	ldr	r0, [pc, #16]	; (4c48 <nrfx_qspi_cinstr_xfer+0x7c>)
    4c36:	e7fc      	b.n	4c32 <nrfx_qspi_cinstr_xfer+0x66>
    4c38:	20000ed8 	.word	0x20000ed8
    4c3c:	40029000 	.word	0x40029000
    4c40:	0bad0007 	.word	0x0bad0007
    4c44:	0bad0000 	.word	0x0bad0000
    4c48:	0bad000b 	.word	0x0bad000b

00004c4c <nrfx_qspi_mem_busy_check>:
{
    4c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_qspi_cinstr_conf_t const config = {
    4c4e:	4a0d      	ldr	r2, [pc, #52]	; (4c84 <nrfx_qspi_mem_busy_check+0x38>)
    4c50:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    4c52:	f10d 0207 	add.w	r2, sp, #7
    uint8_t status_value = 0;
    4c56:	2300      	movs	r3, #0
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    4c58:	4611      	mov	r1, r2
    4c5a:	a802      	add	r0, sp, #8
    uint8_t status_value = 0;
    4c5c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    4c60:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    4c64:	f7ff ffb2 	bl	4bcc <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    4c68:	4b07      	ldr	r3, [pc, #28]	; (4c88 <nrfx_qspi_mem_busy_check+0x3c>)
    4c6a:	4298      	cmp	r0, r3
    4c6c:	d106      	bne.n	4c7c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    4c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    4c72:	f013 0f01 	tst.w	r3, #1
    4c76:	4b05      	ldr	r3, [pc, #20]	; (4c8c <nrfx_qspi_mem_busy_check+0x40>)
    4c78:	bf18      	it	ne
    4c7a:	4618      	movne	r0, r3
}
    4c7c:	b005      	add	sp, #20
    4c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    4c82:	bf00      	nop
    4c84:	01000205 	.word	0x01000205
    4c88:	0bad0000 	.word	0x0bad0000
    4c8c:	0bad000b 	.word	0x0bad000b

00004c90 <nrfx_qspi_uninit>:
{
    4c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    4c94:	2029      	movs	r0, #41	; 0x29
    4c96:	f7fc ff91 	bl	1bbc <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    4c9a:	4b24      	ldr	r3, [pc, #144]	; (4d2c <nrfx_qspi_uninit+0x9c>)
    if (!m_cb.skip_gpio_cfg)
    4c9c:	4d24      	ldr	r5, [pc, #144]	; (4d30 <nrfx_qspi_uninit+0xa0>)
    4c9e:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    4ca2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    4ca6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
    4caa:	bf04      	itt	eq
    4cac:	4a21      	ldreq	r2, [pc, #132]	; (4d34 <nrfx_qspi_uninit+0xa4>)
    4cae:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4cb2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
    4cb6:	2201      	movs	r2, #1
    4cb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cbc:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
    4cbe:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
    4cc2:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
    4cc4:	bf08      	it	eq
    4cc6:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    4cc8:	4b18      	ldr	r3, [pc, #96]	; (4d2c <nrfx_qspi_uninit+0x9c>)
    4cca:	2200      	movs	r2, #0
    4ccc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    4cd4:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    4cd8:	bb1a      	cbnz	r2, 4d22 <nrfx_qspi_uninit+0x92>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    4cda:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    4cde:	f8d3 8528 	ldr.w	r8, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    4ce2:	f8d3 7530 	ldr.w	r7, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    4ce6:	f8d3 6534 	ldr.w	r6, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    4cea:	f8d3 4538 	ldr.w	r4, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    4cee:	f8d3 153c 	ldr.w	r1, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
    4cf2:	b2c0      	uxtb	r0, r0
    4cf4:	f002 ff06 	bl	7b04 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    4cf8:	fa5f f088 	uxtb.w	r0, r8
    4cfc:	f002 ff02 	bl	7b04 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    4d00:	b2f8      	uxtb	r0, r7
    4d02:	f002 feff 	bl	7b04 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    4d06:	b2f0      	uxtb	r0, r6
    4d08:	f002 fefc 	bl	7b04 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    4d0c:	b2e0      	uxtb	r0, r4
    4d0e:	28ff      	cmp	r0, #255	; 0xff
    4d10:	b2c9      	uxtb	r1, r1
    4d12:	d001      	beq.n	4d18 <nrfx_qspi_uninit+0x88>
        nrf_gpio_cfg_default(pins.io2_pin);
    4d14:	f002 fef6 	bl	7b04 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    4d18:	29ff      	cmp	r1, #255	; 0xff
    4d1a:	d002      	beq.n	4d22 <nrfx_qspi_uninit+0x92>
        nrf_gpio_cfg_default(pins.io3_pin);
    4d1c:	4608      	mov	r0, r1
    4d1e:	f002 fef1 	bl	7b04 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    4d22:	2300      	movs	r3, #0
    4d24:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
    4d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d2c:	40029000 	.word	0x40029000
    4d30:	20000ed8 	.word	0x20000ed8
    4d34:	00030100 	.word	0x00030100

00004d38 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    4d38:	078b      	lsls	r3, r1, #30
    4d3a:	d121      	bne.n	4d80 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    4d3c:	4a12      	ldr	r2, [pc, #72]	; (4d88 <nrfx_qspi_erase+0x50>)
    4d3e:	6813      	ldr	r3, [r2, #0]
    4d40:	b11b      	cbz	r3, 4d4a <nrfx_qspi_erase+0x12>
    4d42:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    4d46:	2b01      	cmp	r3, #1
    4d48:	d11c      	bne.n	4d84 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    4d4a:	2304      	movs	r3, #4
    4d4c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    4d50:	4b0e      	ldr	r3, [pc, #56]	; (4d8c <nrfx_qspi_erase+0x54>)
    4d52:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d56:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    4d58:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d5c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d60:	2101      	movs	r1, #1
    4d62:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    4d64:	6810      	ldr	r0, [r2, #0]
    4d66:	b940      	cbnz	r0, 4d7a <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d68:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    4d6c:	2900      	cmp	r1, #0
    4d6e:	d0fb      	beq.n	4d68 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    4d70:	2301      	movs	r3, #1
    4d72:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
    4d76:	4806      	ldr	r0, [pc, #24]	; (4d90 <nrfx_qspi_erase+0x58>)
    4d78:	4770      	bx	lr
    p_reg->INTENSET = mask;
    4d7a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
    4d7e:	e7fa      	b.n	4d76 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    4d80:	4804      	ldr	r0, [pc, #16]	; (4d94 <nrfx_qspi_erase+0x5c>)
    4d82:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
    4d84:	4804      	ldr	r0, [pc, #16]	; (4d98 <nrfx_qspi_erase+0x60>)
}
    4d86:	4770      	bx	lr
    4d88:	20000ed8 	.word	0x20000ed8
    4d8c:	40029000 	.word	0x40029000
    4d90:	0bad0000 	.word	0x0bad0000
    4d94:	0bad000a 	.word	0x0bad000a
    4d98:	0bad000b 	.word	0x0bad000b

00004d9c <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    4d9c:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d9e:	4b17      	ldr	r3, [pc, #92]	; (4dfc <nrfx_qspi_irq_handler+0x60>)
    4da0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    4da4:	b1e2      	cbz	r2, 4de0 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4da6:	2200      	movs	r2, #0
    switch (m_cb.state)
    4da8:	4c15      	ldr	r4, [pc, #84]	; (4e00 <nrfx_qspi_irq_handler+0x64>)
    4daa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4dae:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    4db2:	2a03      	cmp	r2, #3
    4db4:	d015      	beq.n	4de2 <nrfx_qspi_irq_handler+0x46>
    4db6:	2a04      	cmp	r2, #4
    4db8:	d015      	beq.n	4de6 <nrfx_qspi_irq_handler+0x4a>
    4dba:	2a02      	cmp	r2, #2
    4dbc:	d104      	bne.n	4dc8 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    4dbe:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    4dc0:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    4dc4:	f7ff fdbc 	bl	4940 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    4dc8:	68a3      	ldr	r3, [r4, #8]
    4dca:	b913      	cbnz	r3, 4dd2 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    4dcc:	2301      	movs	r3, #1
    4dce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    4dd2:	e9d4 3100 	ldrd	r3, r1, [r4]
    4dd6:	2000      	movs	r0, #0
    4dd8:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    4dda:	2300      	movs	r3, #0
    4ddc:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    4de0:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    4de2:	2302      	movs	r3, #2
    4de4:	e7ec      	b.n	4dc0 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    4de6:	2203      	movs	r2, #3
    4de8:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    4dec:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    4df0:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    4df2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    4df6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    4dfa:	e7e5      	b.n	4dc8 <nrfx_qspi_irq_handler+0x2c>
    4dfc:	40029000 	.word	0x40029000
    4e00:	20000ed8 	.word	0x20000ed8

00004e04 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4e04:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4e06:	4c14      	ldr	r4, [pc, #80]	; (4e58 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4e08:	4a14      	ldr	r2, [pc, #80]	; (4e5c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4e0a:	4915      	ldr	r1, [pc, #84]	; (4e60 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4e0c:	2303      	movs	r3, #3
    4e0e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4e10:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4e12:	4b14      	ldr	r3, [pc, #80]	; (4e64 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4e14:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4e16:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4e1c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4e1e:	2300      	movs	r3, #0
    4e20:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4e22:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4e24:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4e26:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4e28:	4a0f      	ldr	r2, [pc, #60]	; (4e68 <_DoInit+0x64>)
    4e2a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4e2c:	2210      	movs	r2, #16
    4e2e:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    4e30:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    4e32:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4e34:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4e36:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4e38:	f002 fa51 	bl	72de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e3c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4e40:	490a      	ldr	r1, [pc, #40]	; (4e6c <_DoInit+0x68>)
    4e42:	4620      	mov	r0, r4
    4e44:	f002 fa4b 	bl	72de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e48:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4e4c:	2320      	movs	r3, #32
    4e4e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e50:	f3bf 8f5f 	dmb	sy
}
    4e54:	bd10      	pop	{r4, pc}
    4e56:	bf00      	nop
    4e58:	20000f0c 	.word	0x20000f0c
    4e5c:	00009099 	.word	0x00009099
    4e60:	000090a2 	.word	0x000090a2
    4e64:	200010e7 	.word	0x200010e7
    4e68:	200010d7 	.word	0x200010d7
    4e6c:	000090a6 	.word	0x000090a6

00004e70 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4e72:	4604      	mov	r4, r0
    4e74:	460d      	mov	r5, r1
	__asm__ volatile(
    4e76:	f04f 0320 	mov.w	r3, #32
    4e7a:	f3ef 8611 	mrs	r6, BASEPRI
    4e7e:	f383 8812 	msr	BASEPRI_MAX, r3
    4e82:	f3bf 8f6f 	isb	sy
	switch (reason) {
    4e86:	2804      	cmp	r0, #4
    4e88:	bf96      	itet	ls
    4e8a:	4b12      	ldrls	r3, [pc, #72]	; (4ed4 <z_fatal_error+0x64>)
    4e8c:	4b12      	ldrhi	r3, [pc, #72]	; (4ed8 <z_fatal_error+0x68>)
    4e8e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4e92:	2200      	movs	r2, #0
    4e94:	9200      	str	r2, [sp, #0]
    4e96:	2145      	movs	r1, #69	; 0x45
    4e98:	4602      	mov	r2, r0
    4e9a:	4810      	ldr	r0, [pc, #64]	; (4edc <z_fatal_error+0x6c>)
    4e9c:	f002 f98d 	bl	71ba <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4ea0:	b13d      	cbz	r5, 4eb2 <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4ea2:	69eb      	ldr	r3, [r5, #28]
    4ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4ea8:	b11b      	cbz	r3, 4eb2 <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    4eaa:	480d      	ldr	r0, [pc, #52]	; (4ee0 <z_fatal_error+0x70>)
    4eac:	2145      	movs	r1, #69	; 0x45
    4eae:	f002 f984 	bl	71ba <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4eb2:	4b0c      	ldr	r3, [pc, #48]	; (4ee4 <z_fatal_error+0x74>)
    4eb4:	480c      	ldr	r0, [pc, #48]	; (4ee8 <z_fatal_error+0x78>)
    4eb6:	2200      	movs	r2, #0
    4eb8:	2145      	movs	r1, #69	; 0x45
    4eba:	f002 f97e 	bl	71ba <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4ebe:	4629      	mov	r1, r5
    4ec0:	4620      	mov	r0, r4
    4ec2:	f7fe fe07 	bl	3ad4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4ec6:	f386 8811 	msr	BASEPRI, r6
    4eca:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4ece:	b002      	add	sp, #8
    4ed0:	bd70      	pop	{r4, r5, r6, pc}
    4ed2:	bf00      	nop
    4ed4:	00008118 	.word	0x00008118
    4ed8:	000090ad 	.word	0x000090ad
    4edc:	000090bb 	.word	0x000090bb
    4ee0:	000090e8 	.word	0x000090e8
    4ee4:	0000910e 	.word	0x0000910e
    4ee8:	00009116 	.word	0x00009116

00004eec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4eec:	4b0f      	ldr	r3, [pc, #60]	; (4f2c <z_sys_init_run_level+0x40>)
{
    4eee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4ef0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4ef4:	3001      	adds	r0, #1
    4ef6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4efa:	42a6      	cmp	r6, r4
    4efc:	d800      	bhi.n	4f00 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4efe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4f00:	e9d4 3500 	ldrd	r3, r5, [r4]
    4f04:	4628      	mov	r0, r5
    4f06:	4798      	blx	r3
		if (dev != NULL) {
    4f08:	b16d      	cbz	r5, 4f26 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    4f0a:	b138      	cbz	r0, 4f1c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4f0c:	2800      	cmp	r0, #0
    4f0e:	bfb8      	it	lt
    4f10:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4f12:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    4f14:	28ff      	cmp	r0, #255	; 0xff
    4f16:	bfa8      	it	ge
    4f18:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    4f1a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4f1c:	68ea      	ldr	r2, [r5, #12]
    4f1e:	7853      	ldrb	r3, [r2, #1]
    4f20:	f043 0301 	orr.w	r3, r3, #1
    4f24:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4f26:	3408      	adds	r4, #8
    4f28:	e7e7      	b.n	4efa <z_sys_init_run_level+0xe>
    4f2a:	bf00      	nop
    4f2c:	0000812c 	.word	0x0000812c

00004f30 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4f30:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4f32:	4b09      	ldr	r3, [pc, #36]	; (4f58 <bg_thread_main+0x28>)
    4f34:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4f36:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    4f38:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4f3a:	f7ff ffd7 	bl	4eec <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4f3e:	f000 f913 	bl	5168 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    4f42:	2004      	movs	r0, #4
    4f44:	f7ff ffd2 	bl	4eec <z_sys_init_run_level>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    4f48:	f7fb fa44 	bl	3d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4f4c:	4a03      	ldr	r2, [pc, #12]	; (4f5c <bg_thread_main+0x2c>)
    4f4e:	7b13      	ldrb	r3, [r2, #12]
    4f50:	f023 0301 	bic.w	r3, r3, #1
    4f54:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4f56:	bd08      	pop	{r3, pc}
    4f58:	200014e7 	.word	0x200014e7
    4f5c:	20000148 	.word	0x20000148

00004f60 <z_bss_zero>:
{
    4f60:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4f62:	4803      	ldr	r0, [pc, #12]	; (4f70 <z_bss_zero+0x10>)
    4f64:	4a03      	ldr	r2, [pc, #12]	; (4f74 <z_bss_zero+0x14>)
    4f66:	2100      	movs	r1, #0
    4f68:	1a12      	subs	r2, r2, r0
    4f6a:	f002 fdf6 	bl	7b5a <z_early_memset>
}
    4f6e:	bd08      	pop	{r3, pc}
    4f70:	20000128 	.word	0x20000128
    4f74:	200014e8 	.word	0x200014e8

00004f78 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4f78:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4f7a:	2000      	movs	r0, #0
    4f7c:	f7ff ffb6 	bl	4eec <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4f80:	4b18      	ldr	r3, [pc, #96]	; (4fe4 <z_cstart+0x6c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4f82:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4f86:	4c18      	ldr	r4, [pc, #96]	; (4fe8 <z_cstart+0x70>)
    4f88:	6963      	ldr	r3, [r4, #20]
    4f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4f8e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f90:	2500      	movs	r5, #0
    4f92:	23e0      	movs	r3, #224	; 0xe0
    4f94:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4f98:	77e5      	strb	r5, [r4, #31]
    4f9a:	7625      	strb	r5, [r4, #24]
    4f9c:	7665      	strb	r5, [r4, #25]
    4f9e:	76a5      	strb	r5, [r4, #26]
    4fa0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4fa6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4faa:	6263      	str	r3, [r4, #36]	; 0x24
    4fac:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4fb0:	f7fd f8b8 	bl	2124 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4fb4:	f7fc fda6 	bl	1b04 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4fb8:	f04f 33ff 	mov.w	r3, #4294967295
    4fbc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4fc0:	f7fd f9b8 	bl	2334 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4fc4:	f7fd f93a 	bl	223c <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4fc8:	f002 fdbb 	bl	7b42 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    4fcc:	2001      	movs	r0, #1
    4fce:	f7ff ff8d 	bl	4eec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4fd2:	2002      	movs	r0, #2
    4fd4:	f7ff ff8a 	bl	4eec <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4fd8:	4804      	ldr	r0, [pc, #16]	; (4fec <z_cstart+0x74>)
    4fda:	462b      	mov	r3, r5
    4fdc:	462a      	mov	r2, r5
    4fde:	4629      	mov	r1, r5
    4fe0:	f7fc fe7e 	bl	1ce0 <z_arm_switch_to_main_no_multithreading>
    4fe4:	20001d40 	.word	0x20001d40
    4fe8:	e000ed00 	.word	0xe000ed00
    4fec:	00004f31 	.word	0x00004f31

00004ff0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4ff0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4ff2:	4806      	ldr	r0, [pc, #24]	; (500c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4ff4:	4a06      	ldr	r2, [pc, #24]	; (5010 <z_data_copy+0x20>)
    4ff6:	4907      	ldr	r1, [pc, #28]	; (5014 <z_data_copy+0x24>)
    4ff8:	1a12      	subs	r2, r2, r0
    4ffa:	f002 fdb0 	bl	7b5e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5002:	4a05      	ldr	r2, [pc, #20]	; (5018 <z_data_copy+0x28>)
    5004:	4905      	ldr	r1, [pc, #20]	; (501c <z_data_copy+0x2c>)
    5006:	4806      	ldr	r0, [pc, #24]	; (5020 <z_data_copy+0x30>)
    5008:	f002 bda9 	b.w	7b5e <z_early_memcpy>
    500c:	20000000 	.word	0x20000000
    5010:	20000128 	.word	0x20000128
    5014:	000091b0 	.word	0x000091b0
    5018:	00000000 	.word	0x00000000
    501c:	000091b0 	.word	0x000091b0
    5020:	20000000 	.word	0x20000000

00005024 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5024:	4b03      	ldr	r3, [pc, #12]	; (5034 <elapsed+0x10>)
    5026:	681b      	ldr	r3, [r3, #0]
    5028:	b90b      	cbnz	r3, 502e <elapsed+0xa>
    502a:	f7fe bc71 	b.w	3910 <sys_clock_elapsed>
}
    502e:	2000      	movs	r0, #0
    5030:	4770      	bx	lr
    5032:	bf00      	nop
    5034:	20000fb4 	.word	0x20000fb4

00005038 <next_timeout>:

static int32_t next_timeout(void)
{
    5038:	b510      	push	{r4, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    503a:	4b0e      	ldr	r3, [pc, #56]	; (5074 <next_timeout+0x3c>)
    503c:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    503e:	429c      	cmp	r4, r3
    5040:	d104      	bne.n	504c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5042:	f7ff ffef 	bl	5024 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    5046:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    504a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    504c:	f7ff ffea 	bl	5024 <elapsed>
	if ((to == NULL) ||
    5050:	2c00      	cmp	r4, #0
    5052:	d0f8      	beq.n	5046 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5054:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5058:	1a1b      	subs	r3, r3, r0
    505a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    505e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5062:	f172 0100 	sbcs.w	r1, r2, #0
    5066:	daee      	bge.n	5046 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    5068:	2a00      	cmp	r2, #0
    506a:	bfac      	ite	ge
    506c:	4618      	movge	r0, r3
    506e:	2000      	movlt	r0, #0
	return ret;
    5070:	e7eb      	b.n	504a <next_timeout+0x12>
    5072:	bf00      	nop
    5074:	200000b4 	.word	0x200000b4

00005078 <remove_timeout>:
{
    5078:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    507a:	b170      	cbz	r0, 509a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    507c:	4b0b      	ldr	r3, [pc, #44]	; (50ac <remove_timeout+0x34>)
    507e:	685b      	ldr	r3, [r3, #4]
    5080:	4298      	cmp	r0, r3
    5082:	d00a      	beq.n	509a <remove_timeout+0x22>
    5084:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    5086:	b143      	cbz	r3, 509a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5088:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    508c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5090:	1912      	adds	r2, r2, r4
    5092:	eb41 0105 	adc.w	r1, r1, r5
    5096:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    509a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    509e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    50a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    50a2:	2300      	movs	r3, #0
	node->prev = NULL;
    50a4:	e9c0 3300 	strd	r3, r3, [r0]
}
    50a8:	bd30      	pop	{r4, r5, pc}
    50aa:	bf00      	nop
    50ac:	200000b4 	.word	0x200000b4

000050b0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    50b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50b4:	4603      	mov	r3, r0
	__asm__ volatile(
    50b6:	f04f 0220 	mov.w	r2, #32
    50ba:	f3ef 8411 	mrs	r4, BASEPRI
    50be:	f382 8812 	msr	BASEPRI_MAX, r2
    50c2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    50c6:	4f25      	ldr	r7, [pc, #148]	; (515c <sys_clock_announce+0xac>)
	return list->head == list;
    50c8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5160 <sys_clock_announce+0xb0>
    50cc:	f8d9 0000 	ldr.w	r0, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    50d0:	f8df c090 	ldr.w	ip, [pc, #144]	; 5164 <sys_clock_announce+0xb4>
	announce_remaining = ticks;
    50d4:	603b      	str	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50d6:	4548      	cmp	r0, r9
		curr_tick += dt;
    50d8:	e9dc 1e00 	ldrd	r1, lr, [ip]
    50dc:	ea4f 75e3 	mov.w	r5, r3, asr #31
    50e0:	d00c      	beq.n	50fc <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    50e2:	b158      	cbz	r0, 50fc <sys_clock_announce+0x4c>
    50e4:	e9d0 8604 	ldrd	r8, r6, [r0, #16]
    50e8:	4543      	cmp	r3, r8
    50ea:	eb75 0206 	sbcs.w	r2, r5, r6
    50ee:	da17      	bge.n	5120 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    50f0:	ebb8 0203 	subs.w	r2, r8, r3
    50f4:	eb66 0605 	sbc.w	r6, r6, r5
    50f8:	e9c0 2604 	strd	r2, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    50fc:	1859      	adds	r1, r3, r1
    50fe:	eb4e 0505 	adc.w	r5, lr, r5
    5102:	e9cc 1500 	strd	r1, r5, [ip]
	announce_remaining = 0;
    5106:	2500      	movs	r5, #0
    5108:	603d      	str	r5, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    510a:	f7ff ff95 	bl	5038 <next_timeout>
    510e:	4629      	mov	r1, r5
    5110:	f7fe fbcc 	bl	38ac <sys_clock_set_timeout>
	__asm__ volatile(
    5114:	f384 8811 	msr	BASEPRI, r4
    5118:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    511c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5120:	eb18 0101 	adds.w	r1, r8, r1
    5124:	eb4e 73e8 	adc.w	r3, lr, r8, asr #31
    5128:	e9cc 1300 	strd	r1, r3, [ip]
		t->dticks = 0;
    512c:	2200      	movs	r2, #0
    512e:	2300      	movs	r3, #0
    5130:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    5134:	f7ff ffa0 	bl	5078 <remove_timeout>
    5138:	f384 8811 	msr	BASEPRI, r4
    513c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5140:	6883      	ldr	r3, [r0, #8]
    5142:	4798      	blx	r3
	__asm__ volatile(
    5144:	f04f 0320 	mov.w	r3, #32
    5148:	f3ef 8411 	mrs	r4, BASEPRI
    514c:	f383 8812 	msr	BASEPRI_MAX, r3
    5150:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    5154:	683b      	ldr	r3, [r7, #0]
    5156:	eba3 0308 	sub.w	r3, r3, r8
    515a:	e7b7      	b.n	50cc <sys_clock_announce+0x1c>
    515c:	20000fb4 	.word	0x20000fb4
    5160:	200000b4 	.word	0x200000b4
    5164:	200001c8 	.word	0x200001c8

00005168 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    5168:	4801      	ldr	r0, [pc, #4]	; (5170 <boot_banner+0x8>)
    516a:	f001 bf3e 	b.w	6fea <printk>
    516e:	bf00      	nop
    5170:	00009180 	.word	0x00009180

00005174 <nrf_cc3xx_platform_init_no_rng>:
    5174:	b510      	push	{r4, lr}
    5176:	4c0a      	ldr	r4, [pc, #40]	; (51a0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5178:	6823      	ldr	r3, [r4, #0]
    517a:	b11b      	cbz	r3, 5184 <nrf_cc3xx_platform_init_no_rng+0x10>
    517c:	2301      	movs	r3, #1
    517e:	6023      	str	r3, [r4, #0]
    5180:	2000      	movs	r0, #0
    5182:	bd10      	pop	{r4, pc}
    5184:	f000 f852 	bl	522c <CC_LibInitNoRng>
    5188:	2800      	cmp	r0, #0
    518a:	d0f7      	beq.n	517c <nrf_cc3xx_platform_init_no_rng+0x8>
    518c:	3801      	subs	r0, #1
    518e:	2806      	cmp	r0, #6
    5190:	d803      	bhi.n	519a <nrf_cc3xx_platform_init_no_rng+0x26>
    5192:	4b04      	ldr	r3, [pc, #16]	; (51a4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5194:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5198:	bd10      	pop	{r4, pc}
    519a:	4803      	ldr	r0, [pc, #12]	; (51a8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    519c:	bd10      	pop	{r4, pc}
    519e:	bf00      	nop
    51a0:	20000fb8 	.word	0x20000fb8
    51a4:	00008144 	.word	0x00008144
    51a8:	ffff8ffe 	.word	0xffff8ffe

000051ac <nrf_cc3xx_platform_abort>:
    51ac:	f3bf 8f4f 	dsb	sy
    51b0:	4905      	ldr	r1, [pc, #20]	; (51c8 <nrf_cc3xx_platform_abort+0x1c>)
    51b2:	4b06      	ldr	r3, [pc, #24]	; (51cc <nrf_cc3xx_platform_abort+0x20>)
    51b4:	68ca      	ldr	r2, [r1, #12]
    51b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    51ba:	4313      	orrs	r3, r2
    51bc:	60cb      	str	r3, [r1, #12]
    51be:	f3bf 8f4f 	dsb	sy
    51c2:	bf00      	nop
    51c4:	e7fd      	b.n	51c2 <nrf_cc3xx_platform_abort+0x16>
    51c6:	bf00      	nop
    51c8:	e000ed00 	.word	0xe000ed00
    51cc:	05fa0004 	.word	0x05fa0004

000051d0 <CC_PalAbort>:
    51d0:	b410      	push	{r4}
    51d2:	4b0a      	ldr	r3, [pc, #40]	; (51fc <CC_PalAbort+0x2c>)
    51d4:	490a      	ldr	r1, [pc, #40]	; (5200 <CC_PalAbort+0x30>)
    51d6:	4c0b      	ldr	r4, [pc, #44]	; (5204 <CC_PalAbort+0x34>)
    51d8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    51dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    51e0:	6849      	ldr	r1, [r1, #4]
    51e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    51e6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    51ea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    51ee:	2300      	movs	r3, #0
    51f0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    51f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    51f8:	4708      	bx	r1
    51fa:	bf00      	nop
    51fc:	5002b000 	.word	0x5002b000
    5200:	200000bc 	.word	0x200000bc
    5204:	5002a000 	.word	0x5002a000

00005208 <nrf_cc3xx_platform_set_abort>:
    5208:	e9d0 1200 	ldrd	r1, r2, [r0]
    520c:	4b01      	ldr	r3, [pc, #4]	; (5214 <nrf_cc3xx_platform_set_abort+0xc>)
    520e:	e9c3 1200 	strd	r1, r2, [r3]
    5212:	4770      	bx	lr
    5214:	200000bc 	.word	0x200000bc

00005218 <mbedtls_platform_zeroize>:
    5218:	b138      	cbz	r0, 522a <mbedtls_platform_zeroize+0x12>
    521a:	b131      	cbz	r1, 522a <mbedtls_platform_zeroize+0x12>
    521c:	4401      	add	r1, r0
    521e:	2200      	movs	r2, #0
    5220:	4603      	mov	r3, r0
    5222:	3001      	adds	r0, #1
    5224:	4288      	cmp	r0, r1
    5226:	701a      	strb	r2, [r3, #0]
    5228:	d1fa      	bne.n	5220 <mbedtls_platform_zeroize+0x8>
    522a:	4770      	bx	lr

0000522c <CC_LibInitNoRng>:
    522c:	b538      	push	{r3, r4, r5, lr}
    522e:	f000 f82f 	bl	5290 <CC_HalInit>
    5232:	b120      	cbz	r0, 523e <CC_LibInitNoRng+0x12>
    5234:	2403      	movs	r4, #3
    5236:	f000 f863 	bl	5300 <CC_PalTerminate>
    523a:	4620      	mov	r0, r4
    523c:	bd38      	pop	{r3, r4, r5, pc}
    523e:	f000 f831 	bl	52a4 <CC_PalInit>
    5242:	b998      	cbnz	r0, 526c <CC_LibInitNoRng+0x40>
    5244:	f000 f8ac 	bl	53a0 <CC_PalPowerSaveModeSelect>
    5248:	b998      	cbnz	r0, 5272 <CC_LibInitNoRng+0x46>
    524a:	4d0f      	ldr	r5, [pc, #60]	; (5288 <CC_LibInitNoRng+0x5c>)
    524c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5250:	0e1b      	lsrs	r3, r3, #24
    5252:	2bf0      	cmp	r3, #240	; 0xf0
    5254:	d108      	bne.n	5268 <CC_LibInitNoRng+0x3c>
    5256:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    525a:	4b0c      	ldr	r3, [pc, #48]	; (528c <CC_LibInitNoRng+0x60>)
    525c:	429a      	cmp	r2, r3
    525e:	d00a      	beq.n	5276 <CC_LibInitNoRng+0x4a>
    5260:	2407      	movs	r4, #7
    5262:	f000 f817 	bl	5294 <CC_HalTerminate>
    5266:	e7e6      	b.n	5236 <CC_LibInitNoRng+0xa>
    5268:	2406      	movs	r4, #6
    526a:	e7fa      	b.n	5262 <CC_LibInitNoRng+0x36>
    526c:	2404      	movs	r4, #4
    526e:	4620      	mov	r0, r4
    5270:	bd38      	pop	{r3, r4, r5, pc}
    5272:	2400      	movs	r4, #0
    5274:	e7f5      	b.n	5262 <CC_LibInitNoRng+0x36>
    5276:	2001      	movs	r0, #1
    5278:	f000 f892 	bl	53a0 <CC_PalPowerSaveModeSelect>
    527c:	4604      	mov	r4, r0
    527e:	2800      	cmp	r0, #0
    5280:	d1f7      	bne.n	5272 <CC_LibInitNoRng+0x46>
    5282:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5286:	e7d8      	b.n	523a <CC_LibInitNoRng+0xe>
    5288:	5002b000 	.word	0x5002b000
    528c:	20e00000 	.word	0x20e00000

00005290 <CC_HalInit>:
    5290:	2000      	movs	r0, #0
    5292:	4770      	bx	lr

00005294 <CC_HalTerminate>:
    5294:	2000      	movs	r0, #0
    5296:	4770      	bx	lr

00005298 <CC_HalMaskInterrupt>:
    5298:	4b01      	ldr	r3, [pc, #4]	; (52a0 <CC_HalMaskInterrupt+0x8>)
    529a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    529e:	4770      	bx	lr
    52a0:	5002b000 	.word	0x5002b000

000052a4 <CC_PalInit>:
    52a4:	b510      	push	{r4, lr}
    52a6:	4811      	ldr	r0, [pc, #68]	; (52ec <CC_PalInit+0x48>)
    52a8:	f000 f848 	bl	533c <CC_PalMutexCreate>
    52ac:	b100      	cbz	r0, 52b0 <CC_PalInit+0xc>
    52ae:	bd10      	pop	{r4, pc}
    52b0:	480f      	ldr	r0, [pc, #60]	; (52f0 <CC_PalInit+0x4c>)
    52b2:	f000 f843 	bl	533c <CC_PalMutexCreate>
    52b6:	2800      	cmp	r0, #0
    52b8:	d1f9      	bne.n	52ae <CC_PalInit+0xa>
    52ba:	4c0e      	ldr	r4, [pc, #56]	; (52f4 <CC_PalInit+0x50>)
    52bc:	4620      	mov	r0, r4
    52be:	f000 f83d 	bl	533c <CC_PalMutexCreate>
    52c2:	2800      	cmp	r0, #0
    52c4:	d1f3      	bne.n	52ae <CC_PalInit+0xa>
    52c6:	4b0c      	ldr	r3, [pc, #48]	; (52f8 <CC_PalInit+0x54>)
    52c8:	480c      	ldr	r0, [pc, #48]	; (52fc <CC_PalInit+0x58>)
    52ca:	601c      	str	r4, [r3, #0]
    52cc:	f000 f836 	bl	533c <CC_PalMutexCreate>
    52d0:	4601      	mov	r1, r0
    52d2:	2800      	cmp	r0, #0
    52d4:	d1eb      	bne.n	52ae <CC_PalInit+0xa>
    52d6:	f000 f82d 	bl	5334 <CC_PalDmaInit>
    52da:	4604      	mov	r4, r0
    52dc:	b108      	cbz	r0, 52e2 <CC_PalInit+0x3e>
    52de:	4620      	mov	r0, r4
    52e0:	bd10      	pop	{r4, pc}
    52e2:	f000 f83f 	bl	5364 <CC_PalPowerSaveModeInit>
    52e6:	4620      	mov	r0, r4
    52e8:	e7fa      	b.n	52e0 <CC_PalInit+0x3c>
    52ea:	bf00      	nop
    52ec:	200000d0 	.word	0x200000d0
    52f0:	200000c4 	.word	0x200000c4
    52f4:	200000cc 	.word	0x200000cc
    52f8:	200000d4 	.word	0x200000d4
    52fc:	200000c8 	.word	0x200000c8

00005300 <CC_PalTerminate>:
    5300:	b508      	push	{r3, lr}
    5302:	4808      	ldr	r0, [pc, #32]	; (5324 <CC_PalTerminate+0x24>)
    5304:	f000 f824 	bl	5350 <CC_PalMutexDestroy>
    5308:	4807      	ldr	r0, [pc, #28]	; (5328 <CC_PalTerminate+0x28>)
    530a:	f000 f821 	bl	5350 <CC_PalMutexDestroy>
    530e:	4807      	ldr	r0, [pc, #28]	; (532c <CC_PalTerminate+0x2c>)
    5310:	f000 f81e 	bl	5350 <CC_PalMutexDestroy>
    5314:	4806      	ldr	r0, [pc, #24]	; (5330 <CC_PalTerminate+0x30>)
    5316:	f000 f81b 	bl	5350 <CC_PalMutexDestroy>
    531a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    531e:	f000 b80b 	b.w	5338 <CC_PalDmaTerminate>
    5322:	bf00      	nop
    5324:	200000d0 	.word	0x200000d0
    5328:	200000c4 	.word	0x200000c4
    532c:	200000cc 	.word	0x200000cc
    5330:	200000c8 	.word	0x200000c8

00005334 <CC_PalDmaInit>:
    5334:	2000      	movs	r0, #0
    5336:	4770      	bx	lr

00005338 <CC_PalDmaTerminate>:
    5338:	4770      	bx	lr
    533a:	bf00      	nop

0000533c <CC_PalMutexCreate>:
    533c:	b508      	push	{r3, lr}
    533e:	4b03      	ldr	r3, [pc, #12]	; (534c <CC_PalMutexCreate+0x10>)
    5340:	6802      	ldr	r2, [r0, #0]
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	6810      	ldr	r0, [r2, #0]
    5346:	4798      	blx	r3
    5348:	2000      	movs	r0, #0
    534a:	bd08      	pop	{r3, pc}
    534c:	200000e0 	.word	0x200000e0

00005350 <CC_PalMutexDestroy>:
    5350:	b508      	push	{r3, lr}
    5352:	4b03      	ldr	r3, [pc, #12]	; (5360 <CC_PalMutexDestroy+0x10>)
    5354:	6802      	ldr	r2, [r0, #0]
    5356:	685b      	ldr	r3, [r3, #4]
    5358:	6810      	ldr	r0, [r2, #0]
    535a:	4798      	blx	r3
    535c:	2000      	movs	r0, #0
    535e:	bd08      	pop	{r3, pc}
    5360:	200000e0 	.word	0x200000e0

00005364 <CC_PalPowerSaveModeInit>:
    5364:	b570      	push	{r4, r5, r6, lr}
    5366:	4c09      	ldr	r4, [pc, #36]	; (538c <CC_PalPowerSaveModeInit+0x28>)
    5368:	4d09      	ldr	r5, [pc, #36]	; (5390 <CC_PalPowerSaveModeInit+0x2c>)
    536a:	6920      	ldr	r0, [r4, #16]
    536c:	68ab      	ldr	r3, [r5, #8]
    536e:	4798      	blx	r3
    5370:	b118      	cbz	r0, 537a <CC_PalPowerSaveModeInit+0x16>
    5372:	4b08      	ldr	r3, [pc, #32]	; (5394 <CC_PalPowerSaveModeInit+0x30>)
    5374:	4808      	ldr	r0, [pc, #32]	; (5398 <CC_PalPowerSaveModeInit+0x34>)
    5376:	685b      	ldr	r3, [r3, #4]
    5378:	4798      	blx	r3
    537a:	4a08      	ldr	r2, [pc, #32]	; (539c <CC_PalPowerSaveModeInit+0x38>)
    537c:	68eb      	ldr	r3, [r5, #12]
    537e:	6920      	ldr	r0, [r4, #16]
    5380:	2100      	movs	r1, #0
    5382:	6011      	str	r1, [r2, #0]
    5384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5388:	4718      	bx	r3
    538a:	bf00      	nop
    538c:	200000f0 	.word	0x200000f0
    5390:	200000e0 	.word	0x200000e0
    5394:	200000bc 	.word	0x200000bc
    5398:	00008160 	.word	0x00008160
    539c:	20000fbc 	.word	0x20000fbc

000053a0 <CC_PalPowerSaveModeSelect>:
    53a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53a2:	4d1a      	ldr	r5, [pc, #104]	; (540c <CC_PalPowerSaveModeSelect+0x6c>)
    53a4:	4e1a      	ldr	r6, [pc, #104]	; (5410 <CC_PalPowerSaveModeSelect+0x70>)
    53a6:	4604      	mov	r4, r0
    53a8:	68b2      	ldr	r2, [r6, #8]
    53aa:	6928      	ldr	r0, [r5, #16]
    53ac:	4790      	blx	r2
    53ae:	b9e8      	cbnz	r0, 53ec <CC_PalPowerSaveModeSelect+0x4c>
    53b0:	4f18      	ldr	r7, [pc, #96]	; (5414 <CC_PalPowerSaveModeSelect+0x74>)
    53b2:	683b      	ldr	r3, [r7, #0]
    53b4:	b14c      	cbz	r4, 53ca <CC_PalPowerSaveModeSelect+0x2a>
    53b6:	b1a3      	cbz	r3, 53e2 <CC_PalPowerSaveModeSelect+0x42>
    53b8:	2b01      	cmp	r3, #1
    53ba:	d019      	beq.n	53f0 <CC_PalPowerSaveModeSelect+0x50>
    53bc:	3b01      	subs	r3, #1
    53be:	603b      	str	r3, [r7, #0]
    53c0:	6928      	ldr	r0, [r5, #16]
    53c2:	68f3      	ldr	r3, [r6, #12]
    53c4:	4798      	blx	r3
    53c6:	2000      	movs	r0, #0
    53c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53ca:	b943      	cbnz	r3, 53de <CC_PalPowerSaveModeSelect+0x3e>
    53cc:	4a12      	ldr	r2, [pc, #72]	; (5418 <CC_PalPowerSaveModeSelect+0x78>)
    53ce:	2101      	movs	r1, #1
    53d0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    53d4:	4911      	ldr	r1, [pc, #68]	; (541c <CC_PalPowerSaveModeSelect+0x7c>)
    53d6:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    53da:	2a00      	cmp	r2, #0
    53dc:	d1fb      	bne.n	53d6 <CC_PalPowerSaveModeSelect+0x36>
    53de:	3301      	adds	r3, #1
    53e0:	603b      	str	r3, [r7, #0]
    53e2:	68f3      	ldr	r3, [r6, #12]
    53e4:	6928      	ldr	r0, [r5, #16]
    53e6:	4798      	blx	r3
    53e8:	2000      	movs	r0, #0
    53ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53ec:	480c      	ldr	r0, [pc, #48]	; (5420 <CC_PalPowerSaveModeSelect+0x80>)
    53ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53f0:	4a0a      	ldr	r2, [pc, #40]	; (541c <CC_PalPowerSaveModeSelect+0x7c>)
    53f2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    53f6:	2b00      	cmp	r3, #0
    53f8:	d1fb      	bne.n	53f2 <CC_PalPowerSaveModeSelect+0x52>
    53fa:	4a07      	ldr	r2, [pc, #28]	; (5418 <CC_PalPowerSaveModeSelect+0x78>)
    53fc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5400:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5404:	f7ff ff48 	bl	5298 <CC_HalMaskInterrupt>
    5408:	683b      	ldr	r3, [r7, #0]
    540a:	e7d7      	b.n	53bc <CC_PalPowerSaveModeSelect+0x1c>
    540c:	200000f0 	.word	0x200000f0
    5410:	200000e0 	.word	0x200000e0
    5414:	20000fbc 	.word	0x20000fbc
    5418:	5002a000 	.word	0x5002a000
    541c:	5002b000 	.word	0x5002b000
    5420:	ffff8fe9 	.word	0xffff8fe9

00005424 <mutex_free>:
    5424:	b510      	push	{r4, lr}
    5426:	4604      	mov	r4, r0
    5428:	b150      	cbz	r0, 5440 <mutex_free+0x1c>
    542a:	6863      	ldr	r3, [r4, #4]
    542c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5430:	d005      	beq.n	543e <mutex_free+0x1a>
    5432:	4a06      	ldr	r2, [pc, #24]	; (544c <mutex_free+0x28>)
    5434:	4293      	cmp	r3, r2
    5436:	d002      	beq.n	543e <mutex_free+0x1a>
    5438:	2300      	movs	r3, #0
    543a:	6023      	str	r3, [r4, #0]
    543c:	6062      	str	r2, [r4, #4]
    543e:	bd10      	pop	{r4, pc}
    5440:	4b03      	ldr	r3, [pc, #12]	; (5450 <mutex_free+0x2c>)
    5442:	4804      	ldr	r0, [pc, #16]	; (5454 <mutex_free+0x30>)
    5444:	685b      	ldr	r3, [r3, #4]
    5446:	4798      	blx	r3
    5448:	e7ef      	b.n	542a <mutex_free+0x6>
    544a:	bf00      	nop
    544c:	a95c5f2c 	.word	0xa95c5f2c
    5450:	200000bc 	.word	0x200000bc
    5454:	00008180 	.word	0x00008180

00005458 <mutex_lock>:
    5458:	b1c8      	cbz	r0, 548e <mutex_lock+0x36>
    545a:	6843      	ldr	r3, [r0, #4]
    545c:	4a0d      	ldr	r2, [pc, #52]	; (5494 <mutex_lock+0x3c>)
    545e:	4293      	cmp	r3, r2
    5460:	d013      	beq.n	548a <mutex_lock+0x32>
    5462:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5466:	d00e      	beq.n	5486 <mutex_lock+0x2e>
    5468:	2301      	movs	r3, #1
    546a:	e850 2f00 	ldrex	r2, [r0]
    546e:	4619      	mov	r1, r3
    5470:	e840 1c00 	strex	ip, r1, [r0]
    5474:	f09c 0f00 	teq	ip, #0
    5478:	d1f7      	bne.n	546a <mutex_lock+0x12>
    547a:	2a01      	cmp	r2, #1
    547c:	d0f5      	beq.n	546a <mutex_lock+0x12>
    547e:	f3bf 8f5f 	dmb	sy
    5482:	2000      	movs	r0, #0
    5484:	4770      	bx	lr
    5486:	4804      	ldr	r0, [pc, #16]	; (5498 <mutex_lock+0x40>)
    5488:	4770      	bx	lr
    548a:	4804      	ldr	r0, [pc, #16]	; (549c <mutex_lock+0x44>)
    548c:	4770      	bx	lr
    548e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5492:	4770      	bx	lr
    5494:	a95c5f2c 	.word	0xa95c5f2c
    5498:	ffff8fe9 	.word	0xffff8fe9
    549c:	ffff8fea 	.word	0xffff8fea

000054a0 <mutex_unlock>:
    54a0:	b180      	cbz	r0, 54c4 <mutex_unlock+0x24>
    54a2:	6843      	ldr	r3, [r0, #4]
    54a4:	4a09      	ldr	r2, [pc, #36]	; (54cc <mutex_unlock+0x2c>)
    54a6:	4293      	cmp	r3, r2
    54a8:	d00a      	beq.n	54c0 <mutex_unlock+0x20>
    54aa:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    54ae:	d005      	beq.n	54bc <mutex_unlock+0x1c>
    54b0:	f3bf 8f5f 	dmb	sy
    54b4:	2300      	movs	r3, #0
    54b6:	6003      	str	r3, [r0, #0]
    54b8:	4618      	mov	r0, r3
    54ba:	4770      	bx	lr
    54bc:	4804      	ldr	r0, [pc, #16]	; (54d0 <mutex_unlock+0x30>)
    54be:	4770      	bx	lr
    54c0:	4804      	ldr	r0, [pc, #16]	; (54d4 <mutex_unlock+0x34>)
    54c2:	4770      	bx	lr
    54c4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    54c8:	4770      	bx	lr
    54ca:	bf00      	nop
    54cc:	a95c5f2c 	.word	0xa95c5f2c
    54d0:	ffff8fe9 	.word	0xffff8fe9
    54d4:	ffff8fea 	.word	0xffff8fea

000054d8 <mutex_init>:
    54d8:	b510      	push	{r4, lr}
    54da:	4604      	mov	r4, r0
    54dc:	b120      	cbz	r0, 54e8 <mutex_init+0x10>
    54de:	4b04      	ldr	r3, [pc, #16]	; (54f0 <mutex_init+0x18>)
    54e0:	6063      	str	r3, [r4, #4]
    54e2:	2200      	movs	r2, #0
    54e4:	6022      	str	r2, [r4, #0]
    54e6:	bd10      	pop	{r4, pc}
    54e8:	4802      	ldr	r0, [pc, #8]	; (54f4 <mutex_init+0x1c>)
    54ea:	f7ff fe71 	bl	51d0 <CC_PalAbort>
    54ee:	e7f6      	b.n	54de <mutex_init+0x6>
    54f0:	3a00003a 	.word	0x3a00003a
    54f4:	000081a8 	.word	0x000081a8

000054f8 <verify_context_ecdsa_verify_secp256r1>:
    54f8:	b130      	cbz	r0, 5508 <verify_context_ecdsa_verify_secp256r1+0x10>
    54fa:	6802      	ldr	r2, [r0, #0]
    54fc:	4b03      	ldr	r3, [pc, #12]	; (550c <verify_context_ecdsa_verify_secp256r1+0x14>)
    54fe:	4804      	ldr	r0, [pc, #16]	; (5510 <verify_context_ecdsa_verify_secp256r1+0x18>)
    5500:	429a      	cmp	r2, r3
    5502:	bf08      	it	eq
    5504:	2000      	moveq	r0, #0
    5506:	4770      	bx	lr
    5508:	4802      	ldr	r0, [pc, #8]	; (5514 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    550a:	4770      	bx	lr
    550c:	bbaa55dd 	.word	0xbbaa55dd
    5510:	00f00882 	.word	0x00f00882
    5514:	00f00871 	.word	0x00f00871

00005518 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    5518:	b538      	push	{r3, r4, r5, lr}
    551a:	460d      	mov	r5, r1
    551c:	4604      	mov	r4, r0
    551e:	b1b0      	cbz	r0, 554e <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    5520:	22a0      	movs	r2, #160	; 0xa0
    5522:	2100      	movs	r1, #0
    5524:	3004      	adds	r0, #4
    5526:	f002 fb40 	bl	7baa <SaSi_PalMemSet>
    552a:	b195      	cbz	r5, 5552 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    552c:	2208      	movs	r2, #8
    552e:	4629      	mov	r1, r5
    5530:	f104 0064 	add.w	r0, r4, #100	; 0x64
    5534:	f002 fb3f 	bl	7bb6 <CRYS_COMMON_ReverseMemcpy32>
    5538:	2208      	movs	r2, #8
    553a:	f105 0120 	add.w	r1, r5, #32
    553e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    5542:	f002 fb38 	bl	7bb6 <CRYS_COMMON_ReverseMemcpy32>
    5546:	4b04      	ldr	r3, [pc, #16]	; (5558 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    5548:	6023      	str	r3, [r4, #0]
    554a:	2000      	movs	r0, #0
    554c:	bd38      	pop	{r3, r4, r5, pc}
    554e:	4803      	ldr	r0, [pc, #12]	; (555c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    5550:	e7fc      	b.n	554c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    5552:	4803      	ldr	r0, [pc, #12]	; (5560 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    5554:	e7fa      	b.n	554c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    5556:	bf00      	nop
    5558:	bbaa55dd 	.word	0xbbaa55dd
    555c:	00f00871 	.word	0x00f00871
    5560:	00f00883 	.word	0x00f00883

00005564 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    5564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5568:	4605      	mov	r5, r0
    556a:	460e      	mov	r6, r1
    556c:	4699      	mov	r9, r3
    556e:	4611      	mov	r1, r2
    5570:	f7ff ffc2 	bl	54f8 <verify_context_ecdsa_verify_secp256r1>
    5574:	4604      	mov	r4, r0
    5576:	2800      	cmp	r0, #0
    5578:	f040 8084 	bne.w	5684 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    557c:	2e00      	cmp	r6, #0
    557e:	f000 8085 	beq.w	568c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    5582:	2900      	cmp	r1, #0
    5584:	f000 8084 	beq.w	5690 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    5588:	f1b9 0f20 	cmp.w	r9, #32
    558c:	f040 8082 	bne.w	5694 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    5590:	f105 0444 	add.w	r4, r5, #68	; 0x44
    5594:	2208      	movs	r2, #8
    5596:	f105 0804 	add.w	r8, r5, #4
    559a:	4620      	mov	r0, r4
    559c:	f002 fb0b 	bl	7bb6 <CRYS_COMMON_ReverseMemcpy32>
    55a0:	f105 0724 	add.w	r7, r5, #36	; 0x24
    55a4:	2208      	movs	r2, #8
    55a6:	4631      	mov	r1, r6
    55a8:	4640      	mov	r0, r8
    55aa:	f002 fb04 	bl	7bb6 <CRYS_COMMON_ReverseMemcpy32>
    55ae:	f106 0120 	add.w	r1, r6, #32
    55b2:	2208      	movs	r2, #8
    55b4:	4638      	mov	r0, r7
    55b6:	f002 fafe 	bl	7bb6 <CRYS_COMMON_ReverseMemcpy32>
    55ba:	a902      	add	r1, sp, #8
    55bc:	f44f 7080 	mov.w	r0, #256	; 0x100
    55c0:	f841 9d04 	str.w	r9, [r1, #-4]!
    55c4:	f002 faeb 	bl	7b9e <PkaInitAndMutexLock>
    55c8:	2800      	cmp	r0, #0
    55ca:	d165      	bne.n	5698 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    55cc:	4a33      	ldr	r2, [pc, #204]	; (569c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    55ce:	f44f 7380 	mov.w	r3, #256	; 0x100
    55d2:	6013      	str	r3, [r2, #0]
    55d4:	2101      	movs	r1, #1
    55d6:	6093      	str	r3, [r2, #8]
    55d8:	2308      	movs	r3, #8
    55da:	4a31      	ldr	r2, [pc, #196]	; (56a0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    55dc:	f000 fb2e 	bl	5c3c <PkaCopyDataIntoPkaReg>
    55e0:	2101      	movs	r1, #1
    55e2:	4608      	mov	r0, r1
    55e4:	2305      	movs	r3, #5
    55e6:	4a2f      	ldr	r2, [pc, #188]	; (56a4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    55e8:	f000 fb28 	bl	5c3c <PkaCopyDataIntoPkaReg>
    55ec:	2308      	movs	r3, #8
    55ee:	4642      	mov	r2, r8
    55f0:	2101      	movs	r1, #1
    55f2:	201c      	movs	r0, #28
    55f4:	f000 fb22 	bl	5c3c <PkaCopyDataIntoPkaReg>
    55f8:	2308      	movs	r3, #8
    55fa:	463a      	mov	r2, r7
    55fc:	2101      	movs	r1, #1
    55fe:	2003      	movs	r0, #3
    5600:	f000 fb1c 	bl	5c3c <PkaCopyDataIntoPkaReg>
    5604:	4622      	mov	r2, r4
    5606:	2308      	movs	r3, #8
    5608:	2101      	movs	r1, #1
    560a:	2002      	movs	r0, #2
    560c:	f000 fb16 	bl	5c3c <PkaCopyDataIntoPkaReg>
    5610:	2308      	movs	r3, #8
    5612:	4a25      	ldr	r2, [pc, #148]	; (56a8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    5614:	2101      	movs	r1, #1
    5616:	201a      	movs	r0, #26
    5618:	f000 fb10 	bl	5c3c <PkaCopyDataIntoPkaReg>
    561c:	2305      	movs	r3, #5
    561e:	4a23      	ldr	r2, [pc, #140]	; (56ac <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    5620:	2101      	movs	r1, #1
    5622:	201b      	movs	r0, #27
    5624:	f000 fb0a 	bl	5c3c <PkaCopyDataIntoPkaReg>
    5628:	2308      	movs	r3, #8
    562a:	4a21      	ldr	r2, [pc, #132]	; (56b0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    562c:	2101      	movs	r1, #1
    562e:	2014      	movs	r0, #20
    5630:	f000 fb04 	bl	5c3c <PkaCopyDataIntoPkaReg>
    5634:	2308      	movs	r3, #8
    5636:	4a1f      	ldr	r2, [pc, #124]	; (56b4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    5638:	2101      	movs	r1, #1
    563a:	2015      	movs	r0, #21
    563c:	f000 fafe 	bl	5c3c <PkaCopyDataIntoPkaReg>
    5640:	2308      	movs	r3, #8
    5642:	f105 0264 	add.w	r2, r5, #100	; 0x64
    5646:	2101      	movs	r1, #1
    5648:	2016      	movs	r0, #22
    564a:	f000 faf7 	bl	5c3c <PkaCopyDataIntoPkaReg>
    564e:	2308      	movs	r3, #8
    5650:	f105 0284 	add.w	r2, r5, #132	; 0x84
    5654:	2101      	movs	r1, #1
    5656:	2017      	movs	r0, #23
    5658:	f000 faf0 	bl	5c3c <PkaCopyDataIntoPkaReg>
    565c:	2308      	movs	r3, #8
    565e:	4a16      	ldr	r2, [pc, #88]	; (56b8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    5660:	2101      	movs	r1, #1
    5662:	200b      	movs	r0, #11
    5664:	f000 faea 	bl	5c3c <PkaCopyDataIntoPkaReg>
    5668:	f000 fb44 	bl	5cf4 <PkaEcdsaVerify>
    566c:	4604      	mov	r4, r0
    566e:	9801      	ldr	r0, [sp, #4]
    5670:	f000 fad2 	bl	5c18 <PkaFinishAndMutexUnlock>
    5674:	4b11      	ldr	r3, [pc, #68]	; (56bc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    5676:	2c00      	cmp	r4, #0
    5678:	bf18      	it	ne
    567a:	461c      	movne	r4, r3
    567c:	21a4      	movs	r1, #164	; 0xa4
    567e:	4628      	mov	r0, r5
    5680:	f002 fa95 	bl	7bae <SaSi_PalMemSetZero>
    5684:	4620      	mov	r0, r4
    5686:	b003      	add	sp, #12
    5688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    568c:	4c0c      	ldr	r4, [pc, #48]	; (56c0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    568e:	e7f9      	b.n	5684 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    5690:	4c0c      	ldr	r4, [pc, #48]	; (56c4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    5692:	e7f7      	b.n	5684 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    5694:	4c0c      	ldr	r4, [pc, #48]	; (56c8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    5696:	e7f5      	b.n	5684 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    5698:	4c08      	ldr	r4, [pc, #32]	; (56bc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    569a:	e7ef      	b.n	567c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    569c:	5002b090 	.word	0x5002b090
    56a0:	0000820c 	.word	0x0000820c
    56a4:	00008284 	.word	0x00008284
    56a8:	000081cc 	.word	0x000081cc
    56ac:	00008270 	.word	0x00008270
    56b0:	00008230 	.word	0x00008230
    56b4:	00008250 	.word	0x00008250
    56b8:	000081ec 	.word	0x000081ec
    56bc:	00f00884 	.word	0x00f00884
    56c0:	00f00876 	.word	0x00f00876
    56c4:	00f00880 	.word	0x00f00880
    56c8:	00f00881 	.word	0x00f00881

000056cc <set_digest_in_hw_sha256>:
    56cc:	4b0c      	ldr	r3, [pc, #48]	; (5700 <set_digest_in_hw_sha256+0x34>)
    56ce:	69c2      	ldr	r2, [r0, #28]
    56d0:	601a      	str	r2, [r3, #0]
    56d2:	6982      	ldr	r2, [r0, #24]
    56d4:	f843 2c04 	str.w	r2, [r3, #-4]
    56d8:	6942      	ldr	r2, [r0, #20]
    56da:	f843 2c08 	str.w	r2, [r3, #-8]
    56de:	6902      	ldr	r2, [r0, #16]
    56e0:	f843 2c0c 	str.w	r2, [r3, #-12]
    56e4:	68c2      	ldr	r2, [r0, #12]
    56e6:	f843 2c10 	str.w	r2, [r3, #-16]
    56ea:	6882      	ldr	r2, [r0, #8]
    56ec:	f843 2c14 	str.w	r2, [r3, #-20]
    56f0:	6842      	ldr	r2, [r0, #4]
    56f2:	f843 2c18 	str.w	r2, [r3, #-24]
    56f6:	6802      	ldr	r2, [r0, #0]
    56f8:	f843 2c1c 	str.w	r2, [r3, #-28]
    56fc:	4770      	bx	lr
    56fe:	bf00      	nop
    5700:	5002b65c 	.word	0x5002b65c

00005704 <read_digest_in_hw_sha256>:
    5704:	4b0c      	ldr	r3, [pc, #48]	; (5738 <read_digest_in_hw_sha256+0x34>)
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	61c3      	str	r3, [r0, #28]
    570a:	4b0c      	ldr	r3, [pc, #48]	; (573c <read_digest_in_hw_sha256+0x38>)
    570c:	681b      	ldr	r3, [r3, #0]
    570e:	6183      	str	r3, [r0, #24]
    5710:	4b0b      	ldr	r3, [pc, #44]	; (5740 <read_digest_in_hw_sha256+0x3c>)
    5712:	681b      	ldr	r3, [r3, #0]
    5714:	6143      	str	r3, [r0, #20]
    5716:	4b0b      	ldr	r3, [pc, #44]	; (5744 <read_digest_in_hw_sha256+0x40>)
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	6103      	str	r3, [r0, #16]
    571c:	4b0a      	ldr	r3, [pc, #40]	; (5748 <read_digest_in_hw_sha256+0x44>)
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	60c3      	str	r3, [r0, #12]
    5722:	4b0a      	ldr	r3, [pc, #40]	; (574c <read_digest_in_hw_sha256+0x48>)
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	6083      	str	r3, [r0, #8]
    5728:	4b09      	ldr	r3, [pc, #36]	; (5750 <read_digest_in_hw_sha256+0x4c>)
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	6043      	str	r3, [r0, #4]
    572e:	4b09      	ldr	r3, [pc, #36]	; (5754 <read_digest_in_hw_sha256+0x50>)
    5730:	681b      	ldr	r3, [r3, #0]
    5732:	6003      	str	r3, [r0, #0]
    5734:	4770      	bx	lr
    5736:	bf00      	nop
    5738:	5002b65c 	.word	0x5002b65c
    573c:	5002b658 	.word	0x5002b658
    5740:	5002b654 	.word	0x5002b654
    5744:	5002b650 	.word	0x5002b650
    5748:	5002b64c 	.word	0x5002b64c
    574c:	5002b648 	.word	0x5002b648
    5750:	5002b644 	.word	0x5002b644
    5754:	5002b640 	.word	0x5002b640

00005758 <verify_context_hash_sha256>:
    5758:	b130      	cbz	r0, 5768 <verify_context_hash_sha256+0x10>
    575a:	6802      	ldr	r2, [r0, #0]
    575c:	4b03      	ldr	r3, [pc, #12]	; (576c <verify_context_hash_sha256+0x14>)
    575e:	4804      	ldr	r0, [pc, #16]	; (5770 <verify_context_hash_sha256+0x18>)
    5760:	429a      	cmp	r2, r3
    5762:	bf08      	it	eq
    5764:	2000      	moveq	r0, #0
    5766:	4770      	bx	lr
    5768:	4802      	ldr	r0, [pc, #8]	; (5774 <verify_context_hash_sha256+0x1c>)
    576a:	4770      	bx	lr
    576c:	bbaa55dd 	.word	0xbbaa55dd
    5770:	00f00202 	.word	0x00f00202
    5774:	00f00200 	.word	0x00f00200

00005778 <nrf_cc310_bl_hash_sha256_init>:
    5778:	b538      	push	{r3, r4, r5, lr}
    577a:	4604      	mov	r4, r0
    577c:	b168      	cbz	r0, 579a <nrf_cc310_bl_hash_sha256_init+0x22>
    577e:	1d05      	adds	r5, r0, #4
    5780:	2170      	movs	r1, #112	; 0x70
    5782:	4628      	mov	r0, r5
    5784:	f002 fa13 	bl	7bae <SaSi_PalMemSetZero>
    5788:	4628      	mov	r0, r5
    578a:	2220      	movs	r2, #32
    578c:	4904      	ldr	r1, [pc, #16]	; (57a0 <nrf_cc310_bl_hash_sha256_init+0x28>)
    578e:	f002 fa0a 	bl	7ba6 <SaSi_PalMemCopy>
    5792:	4b04      	ldr	r3, [pc, #16]	; (57a4 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    5794:	6023      	str	r3, [r4, #0]
    5796:	2000      	movs	r0, #0
    5798:	bd38      	pop	{r3, r4, r5, pc}
    579a:	4803      	ldr	r0, [pc, #12]	; (57a8 <nrf_cc310_bl_hash_sha256_init+0x30>)
    579c:	e7fc      	b.n	5798 <nrf_cc310_bl_hash_sha256_init+0x20>
    579e:	bf00      	nop
    57a0:	00008298 	.word	0x00008298
    57a4:	bbaa55dd 	.word	0xbbaa55dd
    57a8:	00f00200 	.word	0x00f00200

000057ac <nrf_cc310_bl_hash_sha256_update>:
    57ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    57b0:	4b28      	ldr	r3, [pc, #160]	; (5854 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    57b2:	4604      	mov	r4, r0
    57b4:	460e      	mov	r6, r1
    57b6:	4615      	mov	r5, r2
    57b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    57ba:	b085      	sub	sp, #20
    57bc:	466f      	mov	r7, sp
    57be:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    57c2:	b92d      	cbnz	r5, 57d0 <nrf_cc310_bl_hash_sha256_update+0x24>
    57c4:	f04f 0900 	mov.w	r9, #0
    57c8:	4648      	mov	r0, r9
    57ca:	b005      	add	sp, #20
    57cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    57d0:	4620      	mov	r0, r4
    57d2:	f7ff ffc1 	bl	5758 <verify_context_hash_sha256>
    57d6:	4681      	mov	r9, r0
    57d8:	2800      	cmp	r0, #0
    57da:	d1f5      	bne.n	57c8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    57dc:	1d23      	adds	r3, r4, #4
    57de:	9301      	str	r3, [sp, #4]
    57e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57e2:	bba3      	cbnz	r3, 584e <nrf_cc310_bl_hash_sha256_update+0xa2>
    57e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    57e6:	b18b      	cbz	r3, 580c <nrf_cc310_bl_hash_sha256_update+0x60>
    57e8:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    57ec:	45a8      	cmp	r8, r5
    57ee:	bf28      	it	cs
    57f0:	46a8      	movcs	r8, r5
    57f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    57f6:	4631      	mov	r1, r6
    57f8:	4418      	add	r0, r3
    57fa:	4642      	mov	r2, r8
    57fc:	f002 f9d3 	bl	7ba6 <SaSi_PalMemCopy>
    5800:	6f23      	ldr	r3, [r4, #112]	; 0x70
    5802:	4443      	add	r3, r8
    5804:	4446      	add	r6, r8
    5806:	6723      	str	r3, [r4, #112]	; 0x70
    5808:	eba5 0508 	sub.w	r5, r5, r8
    580c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    580e:	2a40      	cmp	r2, #64	; 0x40
    5810:	d106      	bne.n	5820 <nrf_cc310_bl_hash_sha256_update+0x74>
    5812:	f104 0130 	add.w	r1, r4, #48	; 0x30
    5816:	4638      	mov	r0, r7
    5818:	f000 fbae 	bl	5f78 <nrf_cc310_bl_hash_update_internal>
    581c:	2300      	movs	r3, #0
    581e:	6723      	str	r3, [r4, #112]	; 0x70
    5820:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    5824:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    5828:	d005      	beq.n	5836 <nrf_cc310_bl_hash_sha256_update+0x8a>
    582a:	4631      	mov	r1, r6
    582c:	462a      	mov	r2, r5
    582e:	4638      	mov	r0, r7
    5830:	f000 fba2 	bl	5f78 <nrf_cc310_bl_hash_update_internal>
    5834:	442e      	add	r6, r5
    5836:	f1b8 0f00 	cmp.w	r8, #0
    583a:	d0c3      	beq.n	57c4 <nrf_cc310_bl_hash_sha256_update+0x18>
    583c:	4642      	mov	r2, r8
    583e:	4631      	mov	r1, r6
    5840:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5844:	f002 f9af 	bl	7ba6 <SaSi_PalMemCopy>
    5848:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    584c:	e7bc      	b.n	57c8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    584e:	f8df 9008 	ldr.w	r9, [pc, #8]	; 5858 <nrf_cc310_bl_hash_sha256_update+0xac>
    5852:	e7b9      	b.n	57c8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    5854:	00007ef0 	.word	0x00007ef0
    5858:	00f0020c 	.word	0x00f0020c

0000585c <nrf_cc310_bl_hash_sha256_finalize>:
    585c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5860:	4b14      	ldr	r3, [pc, #80]	; (58b4 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    5862:	4604      	mov	r4, r0
    5864:	460e      	mov	r6, r1
    5866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5868:	466f      	mov	r7, sp
    586a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    586e:	4620      	mov	r0, r4
    5870:	f7ff ff72 	bl	5758 <verify_context_hash_sha256>
    5874:	4680      	mov	r8, r0
    5876:	b9b0      	cbnz	r0, 58a6 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    5878:	b1ce      	cbz	r6, 58ae <nrf_cc310_bl_hash_sha256_finalize+0x52>
    587a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    587c:	1d25      	adds	r5, r4, #4
    587e:	9501      	str	r5, [sp, #4]
    5880:	b93b      	cbnz	r3, 5892 <nrf_cc310_bl_hash_sha256_finalize+0x36>
    5882:	2301      	movs	r3, #1
    5884:	6263      	str	r3, [r4, #36]	; 0x24
    5886:	6f22      	ldr	r2, [r4, #112]	; 0x70
    5888:	f104 0130 	add.w	r1, r4, #48	; 0x30
    588c:	4638      	mov	r0, r7
    588e:	f000 fb73 	bl	5f78 <nrf_cc310_bl_hash_update_internal>
    5892:	462b      	mov	r3, r5
    5894:	3e04      	subs	r6, #4
    5896:	3424      	adds	r4, #36	; 0x24
    5898:	f853 2b04 	ldr.w	r2, [r3], #4
    589c:	ba12      	rev	r2, r2
    589e:	42a3      	cmp	r3, r4
    58a0:	f846 2f04 	str.w	r2, [r6, #4]!
    58a4:	d1f8      	bne.n	5898 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    58a6:	4640      	mov	r0, r8
    58a8:	b004      	add	sp, #16
    58aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58ae:	f8df 8008 	ldr.w	r8, [pc, #8]	; 58b8 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    58b2:	e7f8      	b.n	58a6 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    58b4:	00007ef0 	.word	0x00007ef0
    58b8:	00f00205 	.word	0x00f00205

000058bc <nrf_cc310_bl_init>:
    58bc:	4b08      	ldr	r3, [pc, #32]	; (58e0 <nrf_cc310_bl_init+0x24>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	0e1b      	lsrs	r3, r3, #24
    58c2:	2bf0      	cmp	r3, #240	; 0xf0
    58c4:	d108      	bne.n	58d8 <nrf_cc310_bl_init+0x1c>
    58c6:	4b07      	ldr	r3, [pc, #28]	; (58e4 <nrf_cc310_bl_init+0x28>)
    58c8:	681a      	ldr	r2, [r3, #0]
    58ca:	4b07      	ldr	r3, [pc, #28]	; (58e8 <nrf_cc310_bl_init+0x2c>)
    58cc:	429a      	cmp	r2, r3
    58ce:	d105      	bne.n	58dc <nrf_cc310_bl_init+0x20>
    58d0:	4b06      	ldr	r3, [pc, #24]	; (58ec <nrf_cc310_bl_init+0x30>)
    58d2:	2000      	movs	r0, #0
    58d4:	6018      	str	r0, [r3, #0]
    58d6:	4770      	bx	lr
    58d8:	2005      	movs	r0, #5
    58da:	4770      	bx	lr
    58dc:	2006      	movs	r0, #6
    58de:	4770      	bx	lr
    58e0:	5002b928 	.word	0x5002b928
    58e4:	5002ba24 	.word	0x5002ba24
    58e8:	20e00000 	.word	0x20e00000
    58ec:	5002ba0c 	.word	0x5002ba0c

000058f0 <PkaSetRegsMapTab>:
    58f0:	2200      	movs	r2, #0
    58f2:	b530      	push	{r4, r5, lr}
    58f4:	0049      	lsls	r1, r1, #1
    58f6:	4613      	mov	r3, r2
    58f8:	3802      	subs	r0, #2
    58fa:	f640 75fc 	movw	r5, #4092	; 0xffc
    58fe:	f102 54a0 	add.w	r4, r2, #335544320	; 0x14000000
    5902:	f504 442c 	add.w	r4, r4, #44032	; 0xac00
    5906:	00a4      	lsls	r4, r4, #2
    5908:	4290      	cmp	r0, r2
    590a:	f102 0201 	add.w	r2, r2, #1
    590e:	bfca      	itet	gt
    5910:	6023      	strgt	r3, [r4, #0]
    5912:	6025      	strle	r5, [r4, #0]
    5914:	185b      	addgt	r3, r3, r1
    5916:	2a1e      	cmp	r2, #30
    5918:	d1f1      	bne.n	58fe <PkaSetRegsMapTab+0xe>
    591a:	4a04      	ldr	r2, [pc, #16]	; (592c <PkaSetRegsMapTab+0x3c>)
    591c:	6013      	str	r3, [r2, #0]
    591e:	440b      	add	r3, r1
    5920:	6053      	str	r3, [r2, #4]
    5922:	4b03      	ldr	r3, [pc, #12]	; (5930 <PkaSetRegsMapTab+0x40>)
    5924:	4a03      	ldr	r2, [pc, #12]	; (5934 <PkaSetRegsMapTab+0x44>)
    5926:	601a      	str	r2, [r3, #0]
    5928:	bd30      	pop	{r4, r5, pc}
    592a:	bf00      	nop
    592c:	5002b078 	.word	0x5002b078
    5930:	5002b084 	.word	0x5002b084
    5934:	000ff820 	.word	0x000ff820

00005938 <PkaGetRegEffectiveSizeInBits>:
    5938:	b530      	push	{r4, r5, lr}
    593a:	4b1e      	ldr	r3, [pc, #120]	; (59b4 <PkaGetRegEffectiveSizeInBits+0x7c>)
    593c:	b085      	sub	sp, #20
    593e:	461a      	mov	r2, r3
    5940:	6819      	ldr	r1, [r3, #0]
    5942:	9100      	str	r1, [sp, #0]
    5944:	9900      	ldr	r1, [sp, #0]
    5946:	07cc      	lsls	r4, r1, #31
    5948:	d5fa      	bpl.n	5940 <PkaGetRegEffectiveSizeInBits+0x8>
    594a:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    594e:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    5952:	0080      	lsls	r0, r0, #2
    5954:	6801      	ldr	r1, [r0, #0]
    5956:	6813      	ldr	r3, [r2, #0]
    5958:	9301      	str	r3, [sp, #4]
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	07d8      	lsls	r0, r3, #31
    595e:	d5fa      	bpl.n	5956 <PkaGetRegEffectiveSizeInBits+0x1e>
    5960:	4b15      	ldr	r3, [pc, #84]	; (59b8 <PkaGetRegEffectiveSizeInBits+0x80>)
    5962:	4c16      	ldr	r4, [pc, #88]	; (59bc <PkaGetRegEffectiveSizeInBits+0x84>)
    5964:	6818      	ldr	r0, [r3, #0]
    5966:	4d16      	ldr	r5, [pc, #88]	; (59c0 <PkaGetRegEffectiveSizeInBits+0x88>)
    5968:	301f      	adds	r0, #31
    596a:	2320      	movs	r3, #32
    596c:	fb90 f0f3 	sdiv	r0, r0, r3
    5970:	3801      	subs	r0, #1
    5972:	2800      	cmp	r0, #0
    5974:	da10      	bge.n	5998 <PkaGetRegEffectiveSizeInBits+0x60>
    5976:	2300      	movs	r3, #0
    5978:	3001      	adds	r0, #1
    597a:	0140      	lsls	r0, r0, #5
    597c:	b153      	cbz	r3, 5994 <PkaGetRegEffectiveSizeInBits+0x5c>
    597e:	f1a0 0120 	sub.w	r1, r0, #32
    5982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5986:	4213      	tst	r3, r2
    5988:	d104      	bne.n	5994 <PkaGetRegEffectiveSizeInBits+0x5c>
    598a:	3801      	subs	r0, #1
    598c:	4288      	cmp	r0, r1
    598e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    5992:	d1f8      	bne.n	5986 <PkaGetRegEffectiveSizeInBits+0x4e>
    5994:	b005      	add	sp, #20
    5996:	bd30      	pop	{r4, r5, pc}
    5998:	6813      	ldr	r3, [r2, #0]
    599a:	9303      	str	r3, [sp, #12]
    599c:	9b03      	ldr	r3, [sp, #12]
    599e:	07db      	lsls	r3, r3, #31
    59a0:	d5fa      	bpl.n	5998 <PkaGetRegEffectiveSizeInBits+0x60>
    59a2:	1843      	adds	r3, r0, r1
    59a4:	6023      	str	r3, [r4, #0]
    59a6:	682b      	ldr	r3, [r5, #0]
    59a8:	9302      	str	r3, [sp, #8]
    59aa:	9b02      	ldr	r3, [sp, #8]
    59ac:	2b00      	cmp	r3, #0
    59ae:	d1e3      	bne.n	5978 <PkaGetRegEffectiveSizeInBits+0x40>
    59b0:	3801      	subs	r0, #1
    59b2:	e7de      	b.n	5972 <PkaGetRegEffectiveSizeInBits+0x3a>
    59b4:	5002b0b4 	.word	0x5002b0b4
    59b8:	5002b0ac 	.word	0x5002b0ac
    59bc:	5002b0e4 	.word	0x5002b0e4
    59c0:	5002b0dc 	.word	0x5002b0dc

000059c4 <PkaGetNextMsBit>:
    59c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59c6:	681d      	ldr	r5, [r3, #0]
    59c8:	b085      	sub	sp, #20
    59ca:	f001 041f 	and.w	r4, r1, #31
    59ce:	b90d      	cbnz	r5, 59d4 <PkaGetNextMsBit+0x10>
    59d0:	2c1f      	cmp	r4, #31
    59d2:	d125      	bne.n	5a20 <PkaGetNextMsBit+0x5c>
    59d4:	4d15      	ldr	r5, [pc, #84]	; (5a2c <PkaGetNextMsBit+0x68>)
    59d6:	462e      	mov	r6, r5
    59d8:	682f      	ldr	r7, [r5, #0]
    59da:	9701      	str	r7, [sp, #4]
    59dc:	9f01      	ldr	r7, [sp, #4]
    59de:	07ff      	lsls	r7, r7, #31
    59e0:	d5fa      	bpl.n	59d8 <PkaGetNextMsBit+0x14>
    59e2:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    59e6:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    59ea:	0080      	lsls	r0, r0, #2
    59ec:	6800      	ldr	r0, [r0, #0]
    59ee:	6835      	ldr	r5, [r6, #0]
    59f0:	9503      	str	r5, [sp, #12]
    59f2:	9d03      	ldr	r5, [sp, #12]
    59f4:	07ed      	lsls	r5, r5, #31
    59f6:	d5fa      	bpl.n	59ee <PkaGetNextMsBit+0x2a>
    59f8:	4d0d      	ldr	r5, [pc, #52]	; (5a30 <PkaGetNextMsBit+0x6c>)
    59fa:	eb00 1061 	add.w	r0, r0, r1, asr #5
    59fe:	6028      	str	r0, [r5, #0]
    5a00:	480c      	ldr	r0, [pc, #48]	; (5a34 <PkaGetNextMsBit+0x70>)
    5a02:	6800      	ldr	r0, [r0, #0]
    5a04:	9002      	str	r0, [sp, #8]
    5a06:	2c1f      	cmp	r4, #31
    5a08:	bf18      	it	ne
    5a0a:	43c9      	mvnne	r1, r1
    5a0c:	9802      	ldr	r0, [sp, #8]
    5a0e:	bf0f      	iteee	eq
    5a10:	6010      	streq	r0, [r2, #0]
    5a12:	f001 011f 	andne.w	r1, r1, #31
    5a16:	fa00 f101 	lslne.w	r1, r0, r1
    5a1a:	6011      	strne	r1, [r2, #0]
    5a1c:	2100      	movs	r1, #0
    5a1e:	6019      	str	r1, [r3, #0]
    5a20:	6810      	ldr	r0, [r2, #0]
    5a22:	0043      	lsls	r3, r0, #1
    5a24:	0fc0      	lsrs	r0, r0, #31
    5a26:	6013      	str	r3, [r2, #0]
    5a28:	b005      	add	sp, #20
    5a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a2c:	5002b0b4 	.word	0x5002b0b4
    5a30:	5002b0e4 	.word	0x5002b0e4
    5a34:	5002b0dc 	.word	0x5002b0dc

00005a38 <PkaSetRegsSizesTab>:
    5a38:	4b0c      	ldr	r3, [pc, #48]	; (5a6c <PkaSetRegsSizesTab+0x34>)
    5a3a:	6018      	str	r0, [r3, #0]
    5a3c:	303f      	adds	r0, #63	; 0x3f
    5a3e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    5a42:	0189      	lsls	r1, r1, #6
    5a44:	3040      	adds	r0, #64	; 0x40
    5a46:	6058      	str	r0, [r3, #4]
    5a48:	6099      	str	r1, [r3, #8]
    5a4a:	60d9      	str	r1, [r3, #12]
    5a4c:	6119      	str	r1, [r3, #16]
    5a4e:	6159      	str	r1, [r3, #20]
    5a50:	6199      	str	r1, [r3, #24]
    5a52:	331c      	adds	r3, #28
    5a54:	4806      	ldr	r0, [pc, #24]	; (5a70 <PkaSetRegsSizesTab+0x38>)
    5a56:	6019      	str	r1, [r3, #0]
    5a58:	b082      	sub	sp, #8
    5a5a:	6802      	ldr	r2, [r0, #0]
    5a5c:	9201      	str	r2, [sp, #4]
    5a5e:	9a01      	ldr	r2, [sp, #4]
    5a60:	07d2      	lsls	r2, r2, #31
    5a62:	d5fa      	bpl.n	5a5a <PkaSetRegsSizesTab+0x22>
    5a64:	6019      	str	r1, [r3, #0]
    5a66:	b002      	add	sp, #8
    5a68:	4770      	bx	lr
    5a6a:	bf00      	nop
    5a6c:	5002b090 	.word	0x5002b090
    5a70:	5002b0b4 	.word	0x5002b0b4

00005a74 <PkaInitPka>:
    5a74:	b538      	push	{r3, r4, r5, lr}
    5a76:	f1a0 0320 	sub.w	r3, r0, #32
    5a7a:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    5a7e:	4605      	mov	r5, r0
    5a80:	d82c      	bhi.n	5adc <PkaInitPka+0x68>
    5a82:	288f      	cmp	r0, #143	; 0x8f
    5a84:	d826      	bhi.n	5ad4 <PkaInitPka+0x60>
    5a86:	f100 0347 	add.w	r3, r0, #71	; 0x47
    5a8a:	f100 0466 	add.w	r4, r0, #102	; 0x66
    5a8e:	06db      	lsls	r3, r3, #27
    5a90:	ea4f 1454 	mov.w	r4, r4, lsr #5
    5a94:	d000      	beq.n	5a98 <PkaInitPka+0x24>
    5a96:	3401      	adds	r4, #1
    5a98:	0164      	lsls	r4, r4, #5
    5a9a:	343f      	adds	r4, #63	; 0x3f
    5a9c:	09a4      	lsrs	r4, r4, #6
    5a9e:	3401      	adds	r4, #1
    5aa0:	b111      	cbz	r1, 5aa8 <PkaInitPka+0x34>
    5aa2:	42a1      	cmp	r1, r4
    5aa4:	d31a      	bcc.n	5adc <PkaInitPka+0x68>
    5aa6:	460c      	mov	r4, r1
    5aa8:	00e3      	lsls	r3, r4, #3
    5aaa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    5aae:	fbb0 f0f3 	udiv	r0, r0, r3
    5ab2:	2820      	cmp	r0, #32
    5ab4:	bf28      	it	cs
    5ab6:	2020      	movcs	r0, #32
    5ab8:	b102      	cbz	r2, 5abc <PkaInitPka+0x48>
    5aba:	6010      	str	r0, [r2, #0]
    5abc:	4b08      	ldr	r3, [pc, #32]	; (5ae0 <PkaInitPka+0x6c>)
    5abe:	2201      	movs	r2, #1
    5ac0:	601a      	str	r2, [r3, #0]
    5ac2:	4621      	mov	r1, r4
    5ac4:	f7ff ff14 	bl	58f0 <PkaSetRegsMapTab>
    5ac8:	4628      	mov	r0, r5
    5aca:	4621      	mov	r1, r4
    5acc:	f7ff ffb4 	bl	5a38 <PkaSetRegsSizesTab>
    5ad0:	2000      	movs	r0, #0
    5ad2:	bd38      	pop	{r3, r4, r5, pc}
    5ad4:	f100 041f 	add.w	r4, r0, #31
    5ad8:	0964      	lsrs	r4, r4, #5
    5ada:	e7dd      	b.n	5a98 <PkaInitPka+0x24>
    5adc:	4801      	ldr	r0, [pc, #4]	; (5ae4 <PkaInitPka+0x70>)
    5ade:	e7f8      	b.n	5ad2 <PkaInitPka+0x5e>
    5ae0:	5002b81c 	.word	0x5002b81c
    5ae4:	00f02122 	.word	0x00f02122

00005ae8 <PkaClearBlockOfRegs>:
    5ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aea:	4b45      	ldr	r3, [pc, #276]	; (5c00 <PkaClearBlockOfRegs+0x118>)
    5aec:	b089      	sub	sp, #36	; 0x24
    5aee:	461d      	mov	r5, r3
    5af0:	681c      	ldr	r4, [r3, #0]
    5af2:	9401      	str	r4, [sp, #4]
    5af4:	9c01      	ldr	r4, [sp, #4]
    5af6:	07e4      	lsls	r4, r4, #31
    5af8:	d5fa      	bpl.n	5af0 <PkaClearBlockOfRegs+0x8>
    5afa:	4b42      	ldr	r3, [pc, #264]	; (5c04 <PkaClearBlockOfRegs+0x11c>)
    5afc:	f8df e10c 	ldr.w	lr, [pc, #268]	; 5c0c <PkaClearBlockOfRegs+0x124>
    5b00:	f8df c10c 	ldr.w	ip, [pc, #268]	; 5c10 <PkaClearBlockOfRegs+0x128>
    5b04:	4413      	add	r3, r2
    5b06:	009b      	lsls	r3, r3, #2
    5b08:	2400      	movs	r4, #0
    5b0a:	681a      	ldr	r2, [r3, #0]
    5b0c:	180b      	adds	r3, r1, r0
    5b0e:	2b1e      	cmp	r3, #30
    5b10:	bf88      	it	hi
    5b12:	f1c0 011e 	rsbhi	r1, r0, #30
    5b16:	321f      	adds	r2, #31
    5b18:	180b      	adds	r3, r1, r0
    5b1a:	0952      	lsrs	r2, r2, #5
    5b1c:	4353      	muls	r3, r2
    5b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5b22:	bf82      	ittt	hi
    5b24:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    5b28:	fbb1 f1f2 	udivhi	r1, r1, r2
    5b2c:	1a09      	subhi	r1, r1, r0
    5b2e:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    5b32:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    5b36:	4627      	mov	r7, r4
    5b38:	42a1      	cmp	r1, r4
    5b3a:	dc33      	bgt.n	5ba4 <PkaClearBlockOfRegs+0xbc>
    5b3c:	682b      	ldr	r3, [r5, #0]
    5b3e:	9304      	str	r3, [sp, #16]
    5b40:	9b04      	ldr	r3, [sp, #16]
    5b42:	07db      	lsls	r3, r3, #31
    5b44:	d5fa      	bpl.n	5b3c <PkaClearBlockOfRegs+0x54>
    5b46:	4b30      	ldr	r3, [pc, #192]	; (5c08 <PkaClearBlockOfRegs+0x120>)
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	6829      	ldr	r1, [r5, #0]
    5b4c:	9105      	str	r1, [sp, #20]
    5b4e:	9905      	ldr	r1, [sp, #20]
    5b50:	07cf      	lsls	r7, r1, #31
    5b52:	d5fa      	bpl.n	5b4a <PkaClearBlockOfRegs+0x62>
    5b54:	4c2d      	ldr	r4, [pc, #180]	; (5c0c <PkaClearBlockOfRegs+0x124>)
    5b56:	492e      	ldr	r1, [pc, #184]	; (5c10 <PkaClearBlockOfRegs+0x128>)
    5b58:	6023      	str	r3, [r4, #0]
    5b5a:	2300      	movs	r3, #0
    5b5c:	461e      	mov	r6, r3
    5b5e:	4293      	cmp	r3, r2
    5b60:	f103 0001 	add.w	r0, r3, #1
    5b64:	d140      	bne.n	5be8 <PkaClearBlockOfRegs+0x100>
    5b66:	f020 0201 	bic.w	r2, r0, #1
    5b6a:	4829      	ldr	r0, [pc, #164]	; (5c10 <PkaClearBlockOfRegs+0x128>)
    5b6c:	4619      	mov	r1, r3
    5b6e:	2600      	movs	r6, #0
    5b70:	428a      	cmp	r2, r1
    5b72:	d83c      	bhi.n	5bee <PkaClearBlockOfRegs+0x106>
    5b74:	6829      	ldr	r1, [r5, #0]
    5b76:	9106      	str	r1, [sp, #24]
    5b78:	9906      	ldr	r1, [sp, #24]
    5b7a:	07ce      	lsls	r6, r1, #31
    5b7c:	d5fa      	bpl.n	5b74 <PkaClearBlockOfRegs+0x8c>
    5b7e:	4925      	ldr	r1, [pc, #148]	; (5c14 <PkaClearBlockOfRegs+0x12c>)
    5b80:	6809      	ldr	r1, [r1, #0]
    5b82:	6828      	ldr	r0, [r5, #0]
    5b84:	9007      	str	r0, [sp, #28]
    5b86:	9807      	ldr	r0, [sp, #28]
    5b88:	07c0      	lsls	r0, r0, #31
    5b8a:	d5fa      	bpl.n	5b82 <PkaClearBlockOfRegs+0x9a>
    5b8c:	6021      	str	r1, [r4, #0]
    5b8e:	4820      	ldr	r0, [pc, #128]	; (5c10 <PkaClearBlockOfRegs+0x128>)
    5b90:	2100      	movs	r1, #0
    5b92:	460c      	mov	r4, r1
    5b94:	428b      	cmp	r3, r1
    5b96:	d12d      	bne.n	5bf4 <PkaClearBlockOfRegs+0x10c>
    5b98:	491d      	ldr	r1, [pc, #116]	; (5c10 <PkaClearBlockOfRegs+0x128>)
    5b9a:	2000      	movs	r0, #0
    5b9c:	429a      	cmp	r2, r3
    5b9e:	d82c      	bhi.n	5bfa <PkaClearBlockOfRegs+0x112>
    5ba0:	b009      	add	sp, #36	; 0x24
    5ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ba4:	682b      	ldr	r3, [r5, #0]
    5ba6:	9302      	str	r3, [sp, #8]
    5ba8:	9b02      	ldr	r3, [sp, #8]
    5baa:	07db      	lsls	r3, r3, #31
    5bac:	d5fa      	bpl.n	5ba4 <PkaClearBlockOfRegs+0xbc>
    5bae:	1903      	adds	r3, r0, r4
    5bb0:	009b      	lsls	r3, r3, #2
    5bb2:	681b      	ldr	r3, [r3, #0]
    5bb4:	682e      	ldr	r6, [r5, #0]
    5bb6:	9603      	str	r6, [sp, #12]
    5bb8:	9e03      	ldr	r6, [sp, #12]
    5bba:	07f6      	lsls	r6, r6, #31
    5bbc:	d5fa      	bpl.n	5bb4 <PkaClearBlockOfRegs+0xcc>
    5bbe:	f8ce 3000 	str.w	r3, [lr]
    5bc2:	2300      	movs	r3, #0
    5bc4:	4293      	cmp	r3, r2
    5bc6:	f103 0301 	add.w	r3, r3, #1
    5bca:	d106      	bne.n	5bda <PkaClearBlockOfRegs+0xf2>
    5bcc:	4616      	mov	r6, r2
    5bce:	f023 0301 	bic.w	r3, r3, #1
    5bd2:	42b3      	cmp	r3, r6
    5bd4:	d804      	bhi.n	5be0 <PkaClearBlockOfRegs+0xf8>
    5bd6:	3401      	adds	r4, #1
    5bd8:	e7ae      	b.n	5b38 <PkaClearBlockOfRegs+0x50>
    5bda:	f8cc 7000 	str.w	r7, [ip]
    5bde:	e7f1      	b.n	5bc4 <PkaClearBlockOfRegs+0xdc>
    5be0:	f8cc 7000 	str.w	r7, [ip]
    5be4:	3601      	adds	r6, #1
    5be6:	e7f4      	b.n	5bd2 <PkaClearBlockOfRegs+0xea>
    5be8:	600e      	str	r6, [r1, #0]
    5bea:	4603      	mov	r3, r0
    5bec:	e7b7      	b.n	5b5e <PkaClearBlockOfRegs+0x76>
    5bee:	6006      	str	r6, [r0, #0]
    5bf0:	3101      	adds	r1, #1
    5bf2:	e7bd      	b.n	5b70 <PkaClearBlockOfRegs+0x88>
    5bf4:	6004      	str	r4, [r0, #0]
    5bf6:	3101      	adds	r1, #1
    5bf8:	e7cc      	b.n	5b94 <PkaClearBlockOfRegs+0xac>
    5bfa:	6008      	str	r0, [r1, #0]
    5bfc:	3301      	adds	r3, #1
    5bfe:	e7cd      	b.n	5b9c <PkaClearBlockOfRegs+0xb4>
    5c00:	5002b0b4 	.word	0x5002b0b4
    5c04:	1400ac24 	.word	0x1400ac24
    5c08:	5002b07c 	.word	0x5002b07c
    5c0c:	5002b0d4 	.word	0x5002b0d4
    5c10:	5002b0d8 	.word	0x5002b0d8
    5c14:	5002b078 	.word	0x5002b078

00005c18 <PkaFinishAndMutexUnlock>:
    5c18:	b508      	push	{r3, lr}
    5c1a:	b140      	cbz	r0, 5c2e <PkaFinishAndMutexUnlock+0x16>
    5c1c:	2820      	cmp	r0, #32
    5c1e:	4601      	mov	r1, r0
    5c20:	f04f 0207 	mov.w	r2, #7
    5c24:	bf28      	it	cs
    5c26:	2120      	movcs	r1, #32
    5c28:	2000      	movs	r0, #0
    5c2a:	f7ff ff5d 	bl	5ae8 <PkaClearBlockOfRegs>
    5c2e:	4b02      	ldr	r3, [pc, #8]	; (5c38 <PkaFinishAndMutexUnlock+0x20>)
    5c30:	2200      	movs	r2, #0
    5c32:	601a      	str	r2, [r3, #0]
    5c34:	bd08      	pop	{r3, pc}
    5c36:	bf00      	nop
    5c38:	5002b81c 	.word	0x5002b81c

00005c3c <PkaCopyDataIntoPkaReg>:
    5c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c3e:	4d29      	ldr	r5, [pc, #164]	; (5ce4 <PkaCopyDataIntoPkaReg+0xa8>)
    5c40:	b085      	sub	sp, #20
    5c42:	462c      	mov	r4, r5
    5c44:	682e      	ldr	r6, [r5, #0]
    5c46:	9600      	str	r6, [sp, #0]
    5c48:	9e00      	ldr	r6, [sp, #0]
    5c4a:	07f6      	lsls	r6, r6, #31
    5c4c:	d5fa      	bpl.n	5c44 <PkaCopyDataIntoPkaReg+0x8>
    5c4e:	f100 50a0 	add.w	r0, r0, #335544320	; 0x14000000
    5c52:	f500 402c 	add.w	r0, r0, #44032	; 0xac00
    5c56:	0080      	lsls	r0, r0, #2
    5c58:	6805      	ldr	r5, [r0, #0]
    5c5a:	6820      	ldr	r0, [r4, #0]
    5c5c:	9001      	str	r0, [sp, #4]
    5c5e:	9801      	ldr	r0, [sp, #4]
    5c60:	07c7      	lsls	r7, r0, #31
    5c62:	d5fa      	bpl.n	5c5a <PkaCopyDataIntoPkaReg+0x1e>
    5c64:	4820      	ldr	r0, [pc, #128]	; (5ce8 <PkaCopyDataIntoPkaReg+0xac>)
    5c66:	4f21      	ldr	r7, [pc, #132]	; (5cec <PkaCopyDataIntoPkaReg+0xb0>)
    5c68:	6005      	str	r5, [r0, #0]
    5c6a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    5c6e:	42b2      	cmp	r2, r6
    5c70:	d129      	bne.n	5cc6 <PkaCopyDataIntoPkaReg+0x8a>
    5c72:	1c5a      	adds	r2, r3, #1
    5c74:	4e1d      	ldr	r6, [pc, #116]	; (5cec <PkaCopyDataIntoPkaReg+0xb0>)
    5c76:	f022 0201 	bic.w	r2, r2, #1
    5c7a:	2700      	movs	r7, #0
    5c7c:	429a      	cmp	r2, r3
    5c7e:	d827      	bhi.n	5cd0 <PkaCopyDataIntoPkaReg+0x94>
    5c80:	6823      	ldr	r3, [r4, #0]
    5c82:	9302      	str	r3, [sp, #8]
    5c84:	9b02      	ldr	r3, [sp, #8]
    5c86:	07de      	lsls	r6, r3, #31
    5c88:	d5fa      	bpl.n	5c80 <PkaCopyDataIntoPkaReg+0x44>
    5c8a:	4b19      	ldr	r3, [pc, #100]	; (5cf0 <PkaCopyDataIntoPkaReg+0xb4>)
    5c8c:	440b      	add	r3, r1
    5c8e:	009b      	lsls	r3, r3, #2
    5c90:	681b      	ldr	r3, [r3, #0]
    5c92:	331f      	adds	r3, #31
    5c94:	095b      	lsrs	r3, r3, #5
    5c96:	429a      	cmp	r2, r3
    5c98:	d213      	bcs.n	5cc2 <PkaCopyDataIntoPkaReg+0x86>
    5c9a:	6821      	ldr	r1, [r4, #0]
    5c9c:	9103      	str	r1, [sp, #12]
    5c9e:	9903      	ldr	r1, [sp, #12]
    5ca0:	07c9      	lsls	r1, r1, #31
    5ca2:	d5fa      	bpl.n	5c9a <PkaCopyDataIntoPkaReg+0x5e>
    5ca4:	4415      	add	r5, r2
    5ca6:	2100      	movs	r1, #0
    5ca8:	1a9b      	subs	r3, r3, r2
    5caa:	4a10      	ldr	r2, [pc, #64]	; (5cec <PkaCopyDataIntoPkaReg+0xb0>)
    5cac:	6005      	str	r5, [r0, #0]
    5cae:	4608      	mov	r0, r1
    5cb0:	428b      	cmp	r3, r1
    5cb2:	d810      	bhi.n	5cd6 <PkaCopyDataIntoPkaReg+0x9a>
    5cb4:	1c5a      	adds	r2, r3, #1
    5cb6:	490d      	ldr	r1, [pc, #52]	; (5cec <PkaCopyDataIntoPkaReg+0xb0>)
    5cb8:	f022 0201 	bic.w	r2, r2, #1
    5cbc:	2000      	movs	r0, #0
    5cbe:	429a      	cmp	r2, r3
    5cc0:	d80c      	bhi.n	5cdc <PkaCopyDataIntoPkaReg+0xa0>
    5cc2:	b005      	add	sp, #20
    5cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cc6:	f852 cb04 	ldr.w	ip, [r2], #4
    5cca:	f8c7 c000 	str.w	ip, [r7]
    5cce:	e7ce      	b.n	5c6e <PkaCopyDataIntoPkaReg+0x32>
    5cd0:	6037      	str	r7, [r6, #0]
    5cd2:	3301      	adds	r3, #1
    5cd4:	e7d2      	b.n	5c7c <PkaCopyDataIntoPkaReg+0x40>
    5cd6:	6010      	str	r0, [r2, #0]
    5cd8:	3101      	adds	r1, #1
    5cda:	e7e9      	b.n	5cb0 <PkaCopyDataIntoPkaReg+0x74>
    5cdc:	6008      	str	r0, [r1, #0]
    5cde:	3301      	adds	r3, #1
    5ce0:	e7ed      	b.n	5cbe <PkaCopyDataIntoPkaReg+0x82>
    5ce2:	bf00      	nop
    5ce4:	5002b0b4 	.word	0x5002b0b4
    5ce8:	5002b0d4 	.word	0x5002b0d4
    5cec:	5002b0d8 	.word	0x5002b0d8
    5cf0:	1400ac24 	.word	0x1400ac24

00005cf4 <PkaEcdsaVerify>:
    5cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cf8:	4b81      	ldr	r3, [pc, #516]	; (5f00 <PkaEcdsaVerify+0x20c>)
    5cfa:	681d      	ldr	r5, [r3, #0]
    5cfc:	6898      	ldr	r0, [r3, #8]
    5cfe:	3320      	adds	r3, #32
    5d00:	b0a0      	sub	sp, #128	; 0x80
    5d02:	461e      	mov	r6, r3
    5d04:	681a      	ldr	r2, [r3, #0]
    5d06:	9201      	str	r2, [sp, #4]
    5d08:	9a01      	ldr	r2, [sp, #4]
    5d0a:	07d7      	lsls	r7, r2, #31
    5d0c:	d5fa      	bpl.n	5d04 <PkaEcdsaVerify+0x10>
    5d0e:	4b7d      	ldr	r3, [pc, #500]	; (5f04 <PkaEcdsaVerify+0x210>)
    5d10:	4a7d      	ldr	r2, [pc, #500]	; (5f08 <PkaEcdsaVerify+0x214>)
    5d12:	601a      	str	r2, [r3, #0]
    5d14:	6832      	ldr	r2, [r6, #0]
    5d16:	9202      	str	r2, [sp, #8]
    5d18:	9a02      	ldr	r2, [sp, #8]
    5d1a:	07d4      	lsls	r4, r2, #31
    5d1c:	d5fa      	bpl.n	5d14 <PkaEcdsaVerify+0x20>
    5d1e:	4a7b      	ldr	r2, [pc, #492]	; (5f0c <PkaEcdsaVerify+0x218>)
    5d20:	601a      	str	r2, [r3, #0]
    5d22:	4a7b      	ldr	r2, [pc, #492]	; (5f10 <PkaEcdsaVerify+0x21c>)
    5d24:	4614      	mov	r4, r2
    5d26:	6811      	ldr	r1, [r2, #0]
    5d28:	9103      	str	r1, [sp, #12]
    5d2a:	9903      	ldr	r1, [sp, #12]
    5d2c:	07c9      	lsls	r1, r1, #31
    5d2e:	d5fa      	bpl.n	5d26 <PkaEcdsaVerify+0x32>
    5d30:	4a78      	ldr	r2, [pc, #480]	; (5f14 <PkaEcdsaVerify+0x220>)
    5d32:	6811      	ldr	r1, [r2, #0]
    5d34:	f3c1 2140 	ubfx	r1, r1, #9, #1
    5d38:	6837      	ldr	r7, [r6, #0]
    5d3a:	9704      	str	r7, [sp, #16]
    5d3c:	9f04      	ldr	r7, [sp, #16]
    5d3e:	07ff      	lsls	r7, r7, #31
    5d40:	d5fa      	bpl.n	5d38 <PkaEcdsaVerify+0x44>
    5d42:	4f75      	ldr	r7, [pc, #468]	; (5f18 <PkaEcdsaVerify+0x224>)
    5d44:	601f      	str	r7, [r3, #0]
    5d46:	6827      	ldr	r7, [r4, #0]
    5d48:	9705      	str	r7, [sp, #20]
    5d4a:	9f05      	ldr	r7, [sp, #20]
    5d4c:	07ff      	lsls	r7, r7, #31
    5d4e:	d5fa      	bpl.n	5d46 <PkaEcdsaVerify+0x52>
    5d50:	6817      	ldr	r7, [r2, #0]
    5d52:	2900      	cmp	r1, #0
    5d54:	f000 80cf 	beq.w	5ef6 <PkaEcdsaVerify+0x202>
    5d58:	05b9      	lsls	r1, r7, #22
    5d5a:	f140 80cc 	bpl.w	5ef6 <PkaEcdsaVerify+0x202>
    5d5e:	6831      	ldr	r1, [r6, #0]
    5d60:	9106      	str	r1, [sp, #24]
    5d62:	9906      	ldr	r1, [sp, #24]
    5d64:	07cf      	lsls	r7, r1, #31
    5d66:	d5fa      	bpl.n	5d5e <PkaEcdsaVerify+0x6a>
    5d68:	496c      	ldr	r1, [pc, #432]	; (5f1c <PkaEcdsaVerify+0x228>)
    5d6a:	6019      	str	r1, [r3, #0]
    5d6c:	6821      	ldr	r1, [r4, #0]
    5d6e:	9107      	str	r1, [sp, #28]
    5d70:	9907      	ldr	r1, [sp, #28]
    5d72:	07c9      	lsls	r1, r1, #31
    5d74:	d5fa      	bpl.n	5d6c <PkaEcdsaVerify+0x78>
    5d76:	6811      	ldr	r1, [r2, #0]
    5d78:	f3c1 2140 	ubfx	r1, r1, #9, #1
    5d7c:	6837      	ldr	r7, [r6, #0]
    5d7e:	9708      	str	r7, [sp, #32]
    5d80:	9f08      	ldr	r7, [sp, #32]
    5d82:	07ff      	lsls	r7, r7, #31
    5d84:	d5fa      	bpl.n	5d7c <PkaEcdsaVerify+0x88>
    5d86:	4f66      	ldr	r7, [pc, #408]	; (5f20 <PkaEcdsaVerify+0x22c>)
    5d88:	601f      	str	r7, [r3, #0]
    5d8a:	6827      	ldr	r7, [r4, #0]
    5d8c:	9709      	str	r7, [sp, #36]	; 0x24
    5d8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5d90:	07ff      	lsls	r7, r7, #31
    5d92:	d5fa      	bpl.n	5d8a <PkaEcdsaVerify+0x96>
    5d94:	6812      	ldr	r2, [r2, #0]
    5d96:	2900      	cmp	r1, #0
    5d98:	f000 80af 	beq.w	5efa <PkaEcdsaVerify+0x206>
    5d9c:	0591      	lsls	r1, r2, #22
    5d9e:	f140 80ac 	bpl.w	5efa <PkaEcdsaVerify+0x206>
    5da2:	6832      	ldr	r2, [r6, #0]
    5da4:	920a      	str	r2, [sp, #40]	; 0x28
    5da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5da8:	07d2      	lsls	r2, r2, #31
    5daa:	d5fa      	bpl.n	5da2 <PkaEcdsaVerify+0xae>
    5dac:	4a56      	ldr	r2, [pc, #344]	; (5f08 <PkaEcdsaVerify+0x214>)
    5dae:	601a      	str	r2, [r3, #0]
    5db0:	6832      	ldr	r2, [r6, #0]
    5db2:	920b      	str	r2, [sp, #44]	; 0x2c
    5db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5db6:	07d7      	lsls	r7, r2, #31
    5db8:	d5fa      	bpl.n	5db0 <PkaEcdsaVerify+0xbc>
    5dba:	4a5a      	ldr	r2, [pc, #360]	; (5f24 <PkaEcdsaVerify+0x230>)
    5dbc:	601a      	str	r2, [r3, #0]
    5dbe:	6831      	ldr	r1, [r6, #0]
    5dc0:	910c      	str	r1, [sp, #48]	; 0x30
    5dc2:	990c      	ldr	r1, [sp, #48]	; 0x30
    5dc4:	07cc      	lsls	r4, r1, #31
    5dc6:	d5fa      	bpl.n	5dbe <PkaEcdsaVerify+0xca>
    5dc8:	4957      	ldr	r1, [pc, #348]	; (5f28 <PkaEcdsaVerify+0x234>)
    5dca:	6019      	str	r1, [r3, #0]
    5dcc:	6831      	ldr	r1, [r6, #0]
    5dce:	910d      	str	r1, [sp, #52]	; 0x34
    5dd0:	990d      	ldr	r1, [sp, #52]	; 0x34
    5dd2:	07c9      	lsls	r1, r1, #31
    5dd4:	d5fa      	bpl.n	5dcc <PkaEcdsaVerify+0xd8>
    5dd6:	4955      	ldr	r1, [pc, #340]	; (5f2c <PkaEcdsaVerify+0x238>)
    5dd8:	6019      	str	r1, [r3, #0]
    5dda:	6831      	ldr	r1, [r6, #0]
    5ddc:	910e      	str	r1, [sp, #56]	; 0x38
    5dde:	990e      	ldr	r1, [sp, #56]	; 0x38
    5de0:	07cf      	lsls	r7, r1, #31
    5de2:	d5fa      	bpl.n	5dda <PkaEcdsaVerify+0xe6>
    5de4:	4952      	ldr	r1, [pc, #328]	; (5f30 <PkaEcdsaVerify+0x23c>)
    5de6:	6019      	str	r1, [r3, #0]
    5de8:	6831      	ldr	r1, [r6, #0]
    5dea:	910f      	str	r1, [sp, #60]	; 0x3c
    5dec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5dee:	07cc      	lsls	r4, r1, #31
    5df0:	d5fa      	bpl.n	5de8 <PkaEcdsaVerify+0xf4>
    5df2:	4950      	ldr	r1, [pc, #320]	; (5f34 <PkaEcdsaVerify+0x240>)
    5df4:	6019      	str	r1, [r3, #0]
    5df6:	4b50      	ldr	r3, [pc, #320]	; (5f38 <PkaEcdsaVerify+0x244>)
    5df8:	461e      	mov	r6, r3
    5dfa:	6819      	ldr	r1, [r3, #0]
    5dfc:	9110      	str	r1, [sp, #64]	; 0x40
    5dfe:	9910      	ldr	r1, [sp, #64]	; 0x40
    5e00:	07c9      	lsls	r1, r1, #31
    5e02:	d5fa      	bpl.n	5dfa <PkaEcdsaVerify+0x106>
    5e04:	4c3f      	ldr	r4, [pc, #252]	; (5f04 <PkaEcdsaVerify+0x210>)
    5e06:	4b4d      	ldr	r3, [pc, #308]	; (5f3c <PkaEcdsaVerify+0x248>)
    5e08:	6023      	str	r3, [r4, #0]
    5e0a:	6833      	ldr	r3, [r6, #0]
    5e0c:	9311      	str	r3, [sp, #68]	; 0x44
    5e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5e10:	07db      	lsls	r3, r3, #31
    5e12:	d5fa      	bpl.n	5e0a <PkaEcdsaVerify+0x116>
    5e14:	4b4a      	ldr	r3, [pc, #296]	; (5f40 <PkaEcdsaVerify+0x24c>)
    5e16:	6023      	str	r3, [r4, #0]
    5e18:	6833      	ldr	r3, [r6, #0]
    5e1a:	9312      	str	r3, [sp, #72]	; 0x48
    5e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5e1e:	07df      	lsls	r7, r3, #31
    5e20:	d5fa      	bpl.n	5e18 <PkaEcdsaVerify+0x124>
    5e22:	4b48      	ldr	r3, [pc, #288]	; (5f44 <PkaEcdsaVerify+0x250>)
    5e24:	6023      	str	r3, [r4, #0]
    5e26:	4b3a      	ldr	r3, [pc, #232]	; (5f10 <PkaEcdsaVerify+0x21c>)
    5e28:	4698      	mov	r8, r3
    5e2a:	6819      	ldr	r1, [r3, #0]
    5e2c:	9113      	str	r1, [sp, #76]	; 0x4c
    5e2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5e30:	07c9      	lsls	r1, r1, #31
    5e32:	d5fa      	bpl.n	5e2a <PkaEcdsaVerify+0x136>
    5e34:	4f32      	ldr	r7, [pc, #200]	; (5f00 <PkaEcdsaVerify+0x20c>)
    5e36:	6038      	str	r0, [r7, #0]
    5e38:	6833      	ldr	r3, [r6, #0]
    5e3a:	9314      	str	r3, [sp, #80]	; 0x50
    5e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5e3e:	07db      	lsls	r3, r3, #31
    5e40:	d5fa      	bpl.n	5e38 <PkaEcdsaVerify+0x144>
    5e42:	6022      	str	r2, [r4, #0]
    5e44:	6833      	ldr	r3, [r6, #0]
    5e46:	9315      	str	r3, [sp, #84]	; 0x54
    5e48:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5e4a:	07d8      	lsls	r0, r3, #31
    5e4c:	d5fa      	bpl.n	5e44 <PkaEcdsaVerify+0x150>
    5e4e:	4b3e      	ldr	r3, [pc, #248]	; (5f48 <PkaEcdsaVerify+0x254>)
    5e50:	6023      	str	r3, [r4, #0]
    5e52:	6833      	ldr	r3, [r6, #0]
    5e54:	9316      	str	r3, [sp, #88]	; 0x58
    5e56:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5e58:	07d9      	lsls	r1, r3, #31
    5e5a:	d5fa      	bpl.n	5e52 <PkaEcdsaVerify+0x15e>
    5e5c:	4b3b      	ldr	r3, [pc, #236]	; (5f4c <PkaEcdsaVerify+0x258>)
    5e5e:	6023      	str	r3, [r4, #0]
    5e60:	6833      	ldr	r3, [r6, #0]
    5e62:	9317      	str	r3, [sp, #92]	; 0x5c
    5e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5e66:	07da      	lsls	r2, r3, #31
    5e68:	d5fa      	bpl.n	5e60 <PkaEcdsaVerify+0x16c>
    5e6a:	4b39      	ldr	r3, [pc, #228]	; (5f50 <PkaEcdsaVerify+0x25c>)
    5e6c:	6023      	str	r3, [r4, #0]
    5e6e:	6833      	ldr	r3, [r6, #0]
    5e70:	9318      	str	r3, [sp, #96]	; 0x60
    5e72:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5e74:	07db      	lsls	r3, r3, #31
    5e76:	d5fa      	bpl.n	5e6e <PkaEcdsaVerify+0x17a>
    5e78:	4b36      	ldr	r3, [pc, #216]	; (5f54 <PkaEcdsaVerify+0x260>)
    5e7a:	6023      	str	r3, [r4, #0]
    5e7c:	6833      	ldr	r3, [r6, #0]
    5e7e:	9319      	str	r3, [sp, #100]	; 0x64
    5e80:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5e82:	07d8      	lsls	r0, r3, #31
    5e84:	d5fa      	bpl.n	5e7c <PkaEcdsaVerify+0x188>
    5e86:	4b34      	ldr	r3, [pc, #208]	; (5f58 <PkaEcdsaVerify+0x264>)
    5e88:	6023      	str	r3, [r4, #0]
    5e8a:	6833      	ldr	r3, [r6, #0]
    5e8c:	931a      	str	r3, [sp, #104]	; 0x68
    5e8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5e90:	07d9      	lsls	r1, r3, #31
    5e92:	d5fa      	bpl.n	5e8a <PkaEcdsaVerify+0x196>
    5e94:	4b31      	ldr	r3, [pc, #196]	; (5f5c <PkaEcdsaVerify+0x268>)
    5e96:	6023      	str	r3, [r4, #0]
    5e98:	6833      	ldr	r3, [r6, #0]
    5e9a:	931b      	str	r3, [sp, #108]	; 0x6c
    5e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    5e9e:	07da      	lsls	r2, r3, #31
    5ea0:	d5fa      	bpl.n	5e98 <PkaEcdsaVerify+0x1a4>
    5ea2:	4b2f      	ldr	r3, [pc, #188]	; (5f60 <PkaEcdsaVerify+0x26c>)
    5ea4:	6023      	str	r3, [r4, #0]
    5ea6:	f000 fc1d 	bl	66e4 <PkaSum2ScalarMullt>
    5eaa:	bb08      	cbnz	r0, 5ef0 <PkaEcdsaVerify+0x1fc>
    5eac:	f8d8 3000 	ldr.w	r3, [r8]
    5eb0:	931c      	str	r3, [sp, #112]	; 0x70
    5eb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    5eb4:	07db      	lsls	r3, r3, #31
    5eb6:	d5f9      	bpl.n	5eac <PkaEcdsaVerify+0x1b8>
    5eb8:	603d      	str	r5, [r7, #0]
    5eba:	6833      	ldr	r3, [r6, #0]
    5ebc:	931d      	str	r3, [sp, #116]	; 0x74
    5ebe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5ec0:	07d9      	lsls	r1, r3, #31
    5ec2:	d5fa      	bpl.n	5eba <PkaEcdsaVerify+0x1c6>
    5ec4:	4b27      	ldr	r3, [pc, #156]	; (5f64 <PkaEcdsaVerify+0x270>)
    5ec6:	6023      	str	r3, [r4, #0]
    5ec8:	6833      	ldr	r3, [r6, #0]
    5eca:	931e      	str	r3, [sp, #120]	; 0x78
    5ecc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5ece:	07da      	lsls	r2, r3, #31
    5ed0:	d5fa      	bpl.n	5ec8 <PkaEcdsaVerify+0x1d4>
    5ed2:	4b25      	ldr	r3, [pc, #148]	; (5f68 <PkaEcdsaVerify+0x274>)
    5ed4:	6023      	str	r3, [r4, #0]
    5ed6:	f8d8 3000 	ldr.w	r3, [r8]
    5eda:	931f      	str	r3, [sp, #124]	; 0x7c
    5edc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    5ede:	07db      	lsls	r3, r3, #31
    5ee0:	d5f9      	bpl.n	5ed6 <PkaEcdsaVerify+0x1e2>
    5ee2:	4b0c      	ldr	r3, [pc, #48]	; (5f14 <PkaEcdsaVerify+0x220>)
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5eea:	4b20      	ldr	r3, [pc, #128]	; (5f6c <PkaEcdsaVerify+0x278>)
    5eec:	bf08      	it	eq
    5eee:	4618      	moveq	r0, r3
    5ef0:	b020      	add	sp, #128	; 0x80
    5ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ef6:	481e      	ldr	r0, [pc, #120]	; (5f70 <PkaEcdsaVerify+0x27c>)
    5ef8:	e7fa      	b.n	5ef0 <PkaEcdsaVerify+0x1fc>
    5efa:	481e      	ldr	r0, [pc, #120]	; (5f74 <PkaEcdsaVerify+0x280>)
    5efc:	e7f8      	b.n	5ef0 <PkaEcdsaVerify+0x1fc>
    5efe:	bf00      	nop
    5f00:	5002b090 	.word	0x5002b090
    5f04:	5002b080 	.word	0x5002b080
    5f08:	51021000 	.word	0x51021000
    5f0c:	29721fc0 	.word	0x29721fc0
    5f10:	5002b0b4 	.word	0x5002b0b4
    5f14:	5002b088 	.word	0x5002b088
    5f18:	2901cfc0 	.word	0x2901cfc0
    5f1c:	290e1fc0 	.word	0x290e1fc0
    5f20:	29003fc0 	.word	0x29003fc0
    5f24:	49020140 	.word	0x49020140
    5f28:	a8843100 	.word	0xa8843100
    5f2c:	49160000 	.word	0x49160000
    5f30:	a1080140 	.word	0xa1080140
    5f34:	88084480 	.word	0x88084480
    5f38:	5002b0b0 	.word	0x5002b0b0
    5f3c:	887044c0 	.word	0x887044c0
    5f40:	417a0780 	.word	0x417a0780
    5f44:	417e07c0 	.word	0x417e07c0
    5f48:	496a0000 	.word	0x496a0000
    5f4c:	49160680 	.word	0x49160680
    5f50:	496e0040 	.word	0x496e0040
    5f54:	21000200 	.word	0x21000200
    5f58:	21208200 	.word	0x21208200
    5f5c:	21208240 	.word	0x21208240
    5f60:	21248280 	.word	0x21248280
    5f64:	a161a140 	.word	0xa161a140
    5f68:	5161c800 	.word	0x5161c800
    5f6c:	00f10803 	.word	0x00f10803
    5f70:	00f10801 	.word	0x00f10801
    5f74:	00f10802 	.word	0x00f10802

00005f78 <nrf_cc310_bl_hash_update_internal>:
    5f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f7c:	4b31      	ldr	r3, [pc, #196]	; (6044 <nrf_cc310_bl_hash_update_internal+0xcc>)
    5f7e:	6844      	ldr	r4, [r0, #4]
    5f80:	4680      	mov	r8, r0
    5f82:	4692      	mov	sl, r2
    5f84:	4699      	mov	r9, r3
    5f86:	681a      	ldr	r2, [r3, #0]
    5f88:	2a00      	cmp	r2, #0
    5f8a:	d1fc      	bne.n	5f86 <nrf_cc310_bl_hash_update_internal+0xe>
    5f8c:	4b2e      	ldr	r3, [pc, #184]	; (6048 <nrf_cc310_bl_hash_update_internal+0xd0>)
    5f8e:	469b      	mov	fp, r3
    5f90:	681a      	ldr	r2, [r3, #0]
    5f92:	2a00      	cmp	r2, #0
    5f94:	d1fc      	bne.n	5f90 <nrf_cc310_bl_hash_update_internal+0x18>
    5f96:	f04f 30ff 	mov.w	r0, #4294967295
    5f9a:	9101      	str	r1, [sp, #4]
    5f9c:	f000 fc94 	bl	68c8 <SaSi_HalClearInterruptBit>
    5fa0:	2080      	movs	r0, #128	; 0x80
    5fa2:	f000 fc97 	bl	68d4 <SaSi_HalMaskInterrupt>
    5fa6:	4d29      	ldr	r5, [pc, #164]	; (604c <nrf_cc310_bl_hash_update_internal+0xd4>)
    5fa8:	4a29      	ldr	r2, [pc, #164]	; (6050 <nrf_cc310_bl_hash_update_internal+0xd8>)
    5faa:	4f2a      	ldr	r7, [pc, #168]	; (6054 <nrf_cc310_bl_hash_update_internal+0xdc>)
    5fac:	4e2a      	ldr	r6, [pc, #168]	; (6058 <nrf_cc310_bl_hash_update_internal+0xe0>)
    5fae:	2301      	movs	r3, #1
    5fb0:	2007      	movs	r0, #7
    5fb2:	602b      	str	r3, [r5, #0]
    5fb4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    5fb8:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    5fbc:	6013      	str	r3, [r2, #0]
    5fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5fc0:	603b      	str	r3, [r7, #0]
    5fc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5fc4:	6033      	str	r3, [r6, #0]
    5fc6:	f8d8 3000 	ldr.w	r3, [r8]
    5fca:	f842 3c04 	str.w	r3, [r2, #-4]
    5fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5fd2:	4620      	mov	r0, r4
    5fd4:	4798      	blx	r3
    5fd6:	9901      	ldr	r1, [sp, #4]
    5fd8:	f8d9 3000 	ldr.w	r3, [r9]
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d1fb      	bne.n	5fd8 <nrf_cc310_bl_hash_update_internal+0x60>
    5fe0:	f1ba 0f00 	cmp.w	sl, #0
    5fe4:	d120      	bne.n	6028 <nrf_cc310_bl_hash_update_internal+0xb0>
    5fe6:	4b1d      	ldr	r3, [pc, #116]	; (605c <nrf_cc310_bl_hash_update_internal+0xe4>)
    5fe8:	2204      	movs	r2, #4
    5fea:	601a      	str	r2, [r3, #0]
    5fec:	f8d9 3000 	ldr.w	r3, [r9]
    5ff0:	2b00      	cmp	r3, #0
    5ff2:	d1fb      	bne.n	5fec <nrf_cc310_bl_hash_update_internal+0x74>
    5ff4:	f8db a000 	ldr.w	sl, [fp]
    5ff8:	f1ba 0f00 	cmp.w	sl, #0
    5ffc:	d1fa      	bne.n	5ff4 <nrf_cc310_bl_hash_update_internal+0x7c>
    5ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6002:	4620      	mov	r0, r4
    6004:	4798      	blx	r3
    6006:	683b      	ldr	r3, [r7, #0]
    6008:	6263      	str	r3, [r4, #36]	; 0x24
    600a:	6833      	ldr	r3, [r6, #0]
    600c:	62a3      	str	r3, [r4, #40]	; 0x28
    600e:	4b14      	ldr	r3, [pc, #80]	; (6060 <nrf_cc310_bl_hash_update_internal+0xe8>)
    6010:	f8c3 a000 	str.w	sl, [r3]
    6014:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    6018:	f8d9 3000 	ldr.w	r3, [r9]
    601c:	2b00      	cmp	r3, #0
    601e:	d1fb      	bne.n	6018 <nrf_cc310_bl_hash_update_internal+0xa0>
    6020:	602b      	str	r3, [r5, #0]
    6022:	b003      	add	sp, #12
    6024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6028:	6a23      	ldr	r3, [r4, #32]
    602a:	2b01      	cmp	r3, #1
    602c:	bf04      	itt	eq
    602e:	4a0c      	ldreq	r2, [pc, #48]	; (6060 <nrf_cc310_bl_hash_update_internal+0xe8>)
    6030:	6013      	streq	r3, [r2, #0]
    6032:	4b0c      	ldr	r3, [pc, #48]	; (6064 <nrf_cc310_bl_hash_update_internal+0xec>)
    6034:	2040      	movs	r0, #64	; 0x40
    6036:	6019      	str	r1, [r3, #0]
    6038:	f8c3 a004 	str.w	sl, [r3, #4]
    603c:	f000 fc50 	bl	68e0 <SaSi_HalWaitInterrupt>
    6040:	e7d4      	b.n	5fec <nrf_cc310_bl_hash_update_internal+0x74>
    6042:	bf00      	nop
    6044:	5002b910 	.word	0x5002b910
    6048:	5002bc20 	.word	0x5002bc20
    604c:	5002b818 	.word	0x5002b818
    6050:	5002b900 	.word	0x5002b900
    6054:	5002b7cc 	.word	0x5002b7cc
    6058:	5002b7d0 	.word	0x5002b7d0
    605c:	5002b7c8 	.word	0x5002b7c8
    6060:	5002b684 	.word	0x5002b684
    6064:	5002bc28 	.word	0x5002bc28

00006068 <PkaDoubleMdf2Mdf>:
    6068:	b510      	push	{r4, lr}
    606a:	4b54      	ldr	r3, [pc, #336]	; (61bc <PkaDoubleMdf2Mdf+0x154>)
    606c:	b098      	sub	sp, #96	; 0x60
    606e:	4619      	mov	r1, r3
    6070:	681a      	ldr	r2, [r3, #0]
    6072:	9201      	str	r2, [sp, #4]
    6074:	9a01      	ldr	r2, [sp, #4]
    6076:	07d2      	lsls	r2, r2, #31
    6078:	d5fa      	bpl.n	6070 <PkaDoubleMdf2Mdf+0x8>
    607a:	4b51      	ldr	r3, [pc, #324]	; (61c0 <PkaDoubleMdf2Mdf+0x158>)
    607c:	4a51      	ldr	r2, [pc, #324]	; (61c4 <PkaDoubleMdf2Mdf+0x15c>)
    607e:	601a      	str	r2, [r3, #0]
    6080:	680a      	ldr	r2, [r1, #0]
    6082:	9202      	str	r2, [sp, #8]
    6084:	9a02      	ldr	r2, [sp, #8]
    6086:	07d4      	lsls	r4, r2, #31
    6088:	d5fa      	bpl.n	6080 <PkaDoubleMdf2Mdf+0x18>
    608a:	4a4f      	ldr	r2, [pc, #316]	; (61c8 <PkaDoubleMdf2Mdf+0x160>)
    608c:	601a      	str	r2, [r3, #0]
    608e:	680a      	ldr	r2, [r1, #0]
    6090:	9203      	str	r2, [sp, #12]
    6092:	9a03      	ldr	r2, [sp, #12]
    6094:	07d0      	lsls	r0, r2, #31
    6096:	d5fa      	bpl.n	608e <PkaDoubleMdf2Mdf+0x26>
    6098:	484c      	ldr	r0, [pc, #304]	; (61cc <PkaDoubleMdf2Mdf+0x164>)
    609a:	6018      	str	r0, [r3, #0]
    609c:	680a      	ldr	r2, [r1, #0]
    609e:	9204      	str	r2, [sp, #16]
    60a0:	9a04      	ldr	r2, [sp, #16]
    60a2:	07d2      	lsls	r2, r2, #31
    60a4:	d5fa      	bpl.n	609c <PkaDoubleMdf2Mdf+0x34>
    60a6:	4a4a      	ldr	r2, [pc, #296]	; (61d0 <PkaDoubleMdf2Mdf+0x168>)
    60a8:	601a      	str	r2, [r3, #0]
    60aa:	680a      	ldr	r2, [r1, #0]
    60ac:	9205      	str	r2, [sp, #20]
    60ae:	9a05      	ldr	r2, [sp, #20]
    60b0:	07d4      	lsls	r4, r2, #31
    60b2:	d5fa      	bpl.n	60aa <PkaDoubleMdf2Mdf+0x42>
    60b4:	4a47      	ldr	r2, [pc, #284]	; (61d4 <PkaDoubleMdf2Mdf+0x16c>)
    60b6:	601a      	str	r2, [r3, #0]
    60b8:	680a      	ldr	r2, [r1, #0]
    60ba:	9206      	str	r2, [sp, #24]
    60bc:	9a06      	ldr	r2, [sp, #24]
    60be:	07d2      	lsls	r2, r2, #31
    60c0:	d5fa      	bpl.n	60b8 <PkaDoubleMdf2Mdf+0x50>
    60c2:	4a45      	ldr	r2, [pc, #276]	; (61d8 <PkaDoubleMdf2Mdf+0x170>)
    60c4:	601a      	str	r2, [r3, #0]
    60c6:	680a      	ldr	r2, [r1, #0]
    60c8:	9207      	str	r2, [sp, #28]
    60ca:	9a07      	ldr	r2, [sp, #28]
    60cc:	07d4      	lsls	r4, r2, #31
    60ce:	d5fa      	bpl.n	60c6 <PkaDoubleMdf2Mdf+0x5e>
    60d0:	4a42      	ldr	r2, [pc, #264]	; (61dc <PkaDoubleMdf2Mdf+0x174>)
    60d2:	601a      	str	r2, [r3, #0]
    60d4:	680a      	ldr	r2, [r1, #0]
    60d6:	9208      	str	r2, [sp, #32]
    60d8:	9a08      	ldr	r2, [sp, #32]
    60da:	07d2      	lsls	r2, r2, #31
    60dc:	d5fa      	bpl.n	60d4 <PkaDoubleMdf2Mdf+0x6c>
    60de:	4a40      	ldr	r2, [pc, #256]	; (61e0 <PkaDoubleMdf2Mdf+0x178>)
    60e0:	601a      	str	r2, [r3, #0]
    60e2:	680a      	ldr	r2, [r1, #0]
    60e4:	9209      	str	r2, [sp, #36]	; 0x24
    60e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    60e8:	07d4      	lsls	r4, r2, #31
    60ea:	d5fa      	bpl.n	60e2 <PkaDoubleMdf2Mdf+0x7a>
    60ec:	4a3d      	ldr	r2, [pc, #244]	; (61e4 <PkaDoubleMdf2Mdf+0x17c>)
    60ee:	601a      	str	r2, [r3, #0]
    60f0:	680a      	ldr	r2, [r1, #0]
    60f2:	920a      	str	r2, [sp, #40]	; 0x28
    60f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    60f6:	07d2      	lsls	r2, r2, #31
    60f8:	d5fa      	bpl.n	60f0 <PkaDoubleMdf2Mdf+0x88>
    60fa:	4a3b      	ldr	r2, [pc, #236]	; (61e8 <PkaDoubleMdf2Mdf+0x180>)
    60fc:	601a      	str	r2, [r3, #0]
    60fe:	680a      	ldr	r2, [r1, #0]
    6100:	920b      	str	r2, [sp, #44]	; 0x2c
    6102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6104:	07d4      	lsls	r4, r2, #31
    6106:	d5fa      	bpl.n	60fe <PkaDoubleMdf2Mdf+0x96>
    6108:	4a38      	ldr	r2, [pc, #224]	; (61ec <PkaDoubleMdf2Mdf+0x184>)
    610a:	601a      	str	r2, [r3, #0]
    610c:	680a      	ldr	r2, [r1, #0]
    610e:	920c      	str	r2, [sp, #48]	; 0x30
    6110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6112:	07d2      	lsls	r2, r2, #31
    6114:	d5fa      	bpl.n	610c <PkaDoubleMdf2Mdf+0xa4>
    6116:	4a36      	ldr	r2, [pc, #216]	; (61f0 <PkaDoubleMdf2Mdf+0x188>)
    6118:	601a      	str	r2, [r3, #0]
    611a:	680a      	ldr	r2, [r1, #0]
    611c:	920d      	str	r2, [sp, #52]	; 0x34
    611e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6120:	07d4      	lsls	r4, r2, #31
    6122:	d5fa      	bpl.n	611a <PkaDoubleMdf2Mdf+0xb2>
    6124:	4a33      	ldr	r2, [pc, #204]	; (61f4 <PkaDoubleMdf2Mdf+0x18c>)
    6126:	601a      	str	r2, [r3, #0]
    6128:	680a      	ldr	r2, [r1, #0]
    612a:	920e      	str	r2, [sp, #56]	; 0x38
    612c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    612e:	07d2      	lsls	r2, r2, #31
    6130:	d5fa      	bpl.n	6128 <PkaDoubleMdf2Mdf+0xc0>
    6132:	4a31      	ldr	r2, [pc, #196]	; (61f8 <PkaDoubleMdf2Mdf+0x190>)
    6134:	601a      	str	r2, [r3, #0]
    6136:	680a      	ldr	r2, [r1, #0]
    6138:	920f      	str	r2, [sp, #60]	; 0x3c
    613a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    613c:	07d4      	lsls	r4, r2, #31
    613e:	d5fa      	bpl.n	6136 <PkaDoubleMdf2Mdf+0xce>
    6140:	4a2e      	ldr	r2, [pc, #184]	; (61fc <PkaDoubleMdf2Mdf+0x194>)
    6142:	601a      	str	r2, [r3, #0]
    6144:	680a      	ldr	r2, [r1, #0]
    6146:	9210      	str	r2, [sp, #64]	; 0x40
    6148:	9a10      	ldr	r2, [sp, #64]	; 0x40
    614a:	07d2      	lsls	r2, r2, #31
    614c:	d5fa      	bpl.n	6144 <PkaDoubleMdf2Mdf+0xdc>
    614e:	4a2c      	ldr	r2, [pc, #176]	; (6200 <PkaDoubleMdf2Mdf+0x198>)
    6150:	601a      	str	r2, [r3, #0]
    6152:	4b1a      	ldr	r3, [pc, #104]	; (61bc <PkaDoubleMdf2Mdf+0x154>)
    6154:	4619      	mov	r1, r3
    6156:	681c      	ldr	r4, [r3, #0]
    6158:	9411      	str	r4, [sp, #68]	; 0x44
    615a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    615c:	07e4      	lsls	r4, r4, #31
    615e:	d5fa      	bpl.n	6156 <PkaDoubleMdf2Mdf+0xee>
    6160:	4b17      	ldr	r3, [pc, #92]	; (61c0 <PkaDoubleMdf2Mdf+0x158>)
    6162:	6018      	str	r0, [r3, #0]
    6164:	6808      	ldr	r0, [r1, #0]
    6166:	9012      	str	r0, [sp, #72]	; 0x48
    6168:	9812      	ldr	r0, [sp, #72]	; 0x48
    616a:	07c4      	lsls	r4, r0, #31
    616c:	d5fa      	bpl.n	6164 <PkaDoubleMdf2Mdf+0xfc>
    616e:	601a      	str	r2, [r3, #0]
    6170:	680a      	ldr	r2, [r1, #0]
    6172:	9213      	str	r2, [sp, #76]	; 0x4c
    6174:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6176:	07d0      	lsls	r0, r2, #31
    6178:	d5fa      	bpl.n	6170 <PkaDoubleMdf2Mdf+0x108>
    617a:	4a12      	ldr	r2, [pc, #72]	; (61c4 <PkaDoubleMdf2Mdf+0x15c>)
    617c:	601a      	str	r2, [r3, #0]
    617e:	680a      	ldr	r2, [r1, #0]
    6180:	9214      	str	r2, [sp, #80]	; 0x50
    6182:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6184:	07d2      	lsls	r2, r2, #31
    6186:	d5fa      	bpl.n	617e <PkaDoubleMdf2Mdf+0x116>
    6188:	4a1e      	ldr	r2, [pc, #120]	; (6204 <PkaDoubleMdf2Mdf+0x19c>)
    618a:	601a      	str	r2, [r3, #0]
    618c:	680a      	ldr	r2, [r1, #0]
    618e:	9215      	str	r2, [sp, #84]	; 0x54
    6190:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6192:	07d4      	lsls	r4, r2, #31
    6194:	d5fa      	bpl.n	618c <PkaDoubleMdf2Mdf+0x124>
    6196:	4a1c      	ldr	r2, [pc, #112]	; (6208 <PkaDoubleMdf2Mdf+0x1a0>)
    6198:	601a      	str	r2, [r3, #0]
    619a:	680a      	ldr	r2, [r1, #0]
    619c:	9216      	str	r2, [sp, #88]	; 0x58
    619e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    61a0:	07d0      	lsls	r0, r2, #31
    61a2:	d5fa      	bpl.n	619a <PkaDoubleMdf2Mdf+0x132>
    61a4:	4a19      	ldr	r2, [pc, #100]	; (620c <PkaDoubleMdf2Mdf+0x1a4>)
    61a6:	601a      	str	r2, [r3, #0]
    61a8:	680a      	ldr	r2, [r1, #0]
    61aa:	9217      	str	r2, [sp, #92]	; 0x5c
    61ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    61ae:	07d2      	lsls	r2, r2, #31
    61b0:	d5fa      	bpl.n	61a8 <PkaDoubleMdf2Mdf+0x140>
    61b2:	4a17      	ldr	r2, [pc, #92]	; (6210 <PkaDoubleMdf2Mdf+0x1a8>)
    61b4:	601a      	str	r2, [r3, #0]
    61b6:	b018      	add	sp, #96	; 0x60
    61b8:	bd10      	pop	{r4, pc}
    61ba:	bf00      	nop
    61bc:	5002b0b0 	.word	0x5002b0b0
    61c0:	5002b080 	.word	0x5002b080
    61c4:	21659300 	.word	0x21659300
    61c8:	90310400 	.word	0x90310400
    61cc:	90659640 	.word	0x90659640
    61d0:	21618300 	.word	0x21618300
    61d4:	2130c300 	.word	0x2130c300
    61d8:	9064c300 	.word	0x9064c300
    61dc:	90618100 	.word	0x90618100
    61e0:	21104600 	.word	0x21104600
    61e4:	21118100 	.word	0x21118100
    61e8:	21444100 	.word	0x21444100
    61ec:	2920c300 	.word	0x2920c300
    61f0:	c810460c 	.word	0xc810460c
    61f4:	21318600 	.word	0x21318600
    61f8:	2160c300 	.word	0x2160c300
    61fc:	2928c140 	.word	0x2928c140
    6200:	21659640 	.word	0x21659640
    6204:	90311300 	.word	0x90311300
    6208:	29259640 	.word	0x29259640
    620c:	c8144659 	.word	0xc8144659
    6210:	49320440 	.word	0x49320440

00006214 <PkaDoubleMdf2Jcb>:
    6214:	b510      	push	{r4, lr}
    6216:	4b49      	ldr	r3, [pc, #292]	; (633c <PkaDoubleMdf2Jcb+0x128>)
    6218:	b094      	sub	sp, #80	; 0x50
    621a:	4619      	mov	r1, r3
    621c:	681a      	ldr	r2, [r3, #0]
    621e:	9200      	str	r2, [sp, #0]
    6220:	9a00      	ldr	r2, [sp, #0]
    6222:	07d2      	lsls	r2, r2, #31
    6224:	d5fa      	bpl.n	621c <PkaDoubleMdf2Jcb+0x8>
    6226:	4b46      	ldr	r3, [pc, #280]	; (6340 <PkaDoubleMdf2Jcb+0x12c>)
    6228:	4a46      	ldr	r2, [pc, #280]	; (6344 <PkaDoubleMdf2Jcb+0x130>)
    622a:	601a      	str	r2, [r3, #0]
    622c:	680a      	ldr	r2, [r1, #0]
    622e:	9201      	str	r2, [sp, #4]
    6230:	9a01      	ldr	r2, [sp, #4]
    6232:	07d4      	lsls	r4, r2, #31
    6234:	d5fa      	bpl.n	622c <PkaDoubleMdf2Jcb+0x18>
    6236:	4a44      	ldr	r2, [pc, #272]	; (6348 <PkaDoubleMdf2Jcb+0x134>)
    6238:	601a      	str	r2, [r3, #0]
    623a:	680a      	ldr	r2, [r1, #0]
    623c:	9202      	str	r2, [sp, #8]
    623e:	9a02      	ldr	r2, [sp, #8]
    6240:	07d0      	lsls	r0, r2, #31
    6242:	d5fa      	bpl.n	623a <PkaDoubleMdf2Jcb+0x26>
    6244:	4841      	ldr	r0, [pc, #260]	; (634c <PkaDoubleMdf2Jcb+0x138>)
    6246:	6018      	str	r0, [r3, #0]
    6248:	680a      	ldr	r2, [r1, #0]
    624a:	9203      	str	r2, [sp, #12]
    624c:	9a03      	ldr	r2, [sp, #12]
    624e:	07d2      	lsls	r2, r2, #31
    6250:	d5fa      	bpl.n	6248 <PkaDoubleMdf2Jcb+0x34>
    6252:	4a3f      	ldr	r2, [pc, #252]	; (6350 <PkaDoubleMdf2Jcb+0x13c>)
    6254:	601a      	str	r2, [r3, #0]
    6256:	680a      	ldr	r2, [r1, #0]
    6258:	9204      	str	r2, [sp, #16]
    625a:	9a04      	ldr	r2, [sp, #16]
    625c:	07d4      	lsls	r4, r2, #31
    625e:	d5fa      	bpl.n	6256 <PkaDoubleMdf2Jcb+0x42>
    6260:	4a3c      	ldr	r2, [pc, #240]	; (6354 <PkaDoubleMdf2Jcb+0x140>)
    6262:	601a      	str	r2, [r3, #0]
    6264:	680a      	ldr	r2, [r1, #0]
    6266:	9205      	str	r2, [sp, #20]
    6268:	9a05      	ldr	r2, [sp, #20]
    626a:	07d2      	lsls	r2, r2, #31
    626c:	d5fa      	bpl.n	6264 <PkaDoubleMdf2Jcb+0x50>
    626e:	4a3a      	ldr	r2, [pc, #232]	; (6358 <PkaDoubleMdf2Jcb+0x144>)
    6270:	601a      	str	r2, [r3, #0]
    6272:	680a      	ldr	r2, [r1, #0]
    6274:	9206      	str	r2, [sp, #24]
    6276:	9a06      	ldr	r2, [sp, #24]
    6278:	07d4      	lsls	r4, r2, #31
    627a:	d5fa      	bpl.n	6272 <PkaDoubleMdf2Jcb+0x5e>
    627c:	4a37      	ldr	r2, [pc, #220]	; (635c <PkaDoubleMdf2Jcb+0x148>)
    627e:	601a      	str	r2, [r3, #0]
    6280:	680a      	ldr	r2, [r1, #0]
    6282:	9207      	str	r2, [sp, #28]
    6284:	9a07      	ldr	r2, [sp, #28]
    6286:	07d2      	lsls	r2, r2, #31
    6288:	d5fa      	bpl.n	6280 <PkaDoubleMdf2Jcb+0x6c>
    628a:	4a35      	ldr	r2, [pc, #212]	; (6360 <PkaDoubleMdf2Jcb+0x14c>)
    628c:	601a      	str	r2, [r3, #0]
    628e:	680a      	ldr	r2, [r1, #0]
    6290:	9208      	str	r2, [sp, #32]
    6292:	9a08      	ldr	r2, [sp, #32]
    6294:	07d4      	lsls	r4, r2, #31
    6296:	d5fa      	bpl.n	628e <PkaDoubleMdf2Jcb+0x7a>
    6298:	4a32      	ldr	r2, [pc, #200]	; (6364 <PkaDoubleMdf2Jcb+0x150>)
    629a:	601a      	str	r2, [r3, #0]
    629c:	680a      	ldr	r2, [r1, #0]
    629e:	9209      	str	r2, [sp, #36]	; 0x24
    62a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    62a2:	07d2      	lsls	r2, r2, #31
    62a4:	d5fa      	bpl.n	629c <PkaDoubleMdf2Jcb+0x88>
    62a6:	4a30      	ldr	r2, [pc, #192]	; (6368 <PkaDoubleMdf2Jcb+0x154>)
    62a8:	601a      	str	r2, [r3, #0]
    62aa:	680a      	ldr	r2, [r1, #0]
    62ac:	920a      	str	r2, [sp, #40]	; 0x28
    62ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    62b0:	07d4      	lsls	r4, r2, #31
    62b2:	d5fa      	bpl.n	62aa <PkaDoubleMdf2Jcb+0x96>
    62b4:	4a2d      	ldr	r2, [pc, #180]	; (636c <PkaDoubleMdf2Jcb+0x158>)
    62b6:	601a      	str	r2, [r3, #0]
    62b8:	680a      	ldr	r2, [r1, #0]
    62ba:	920b      	str	r2, [sp, #44]	; 0x2c
    62bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    62be:	07d2      	lsls	r2, r2, #31
    62c0:	d5fa      	bpl.n	62b8 <PkaDoubleMdf2Jcb+0xa4>
    62c2:	4a2b      	ldr	r2, [pc, #172]	; (6370 <PkaDoubleMdf2Jcb+0x15c>)
    62c4:	601a      	str	r2, [r3, #0]
    62c6:	680a      	ldr	r2, [r1, #0]
    62c8:	920c      	str	r2, [sp, #48]	; 0x30
    62ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    62cc:	07d4      	lsls	r4, r2, #31
    62ce:	d5fa      	bpl.n	62c6 <PkaDoubleMdf2Jcb+0xb2>
    62d0:	4a28      	ldr	r2, [pc, #160]	; (6374 <PkaDoubleMdf2Jcb+0x160>)
    62d2:	601a      	str	r2, [r3, #0]
    62d4:	680a      	ldr	r2, [r1, #0]
    62d6:	920d      	str	r2, [sp, #52]	; 0x34
    62d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    62da:	07d2      	lsls	r2, r2, #31
    62dc:	d5fa      	bpl.n	62d4 <PkaDoubleMdf2Jcb+0xc0>
    62de:	4a26      	ldr	r2, [pc, #152]	; (6378 <PkaDoubleMdf2Jcb+0x164>)
    62e0:	601a      	str	r2, [r3, #0]
    62e2:	680a      	ldr	r2, [r1, #0]
    62e4:	920e      	str	r2, [sp, #56]	; 0x38
    62e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    62e8:	07d4      	lsls	r4, r2, #31
    62ea:	d5fa      	bpl.n	62e2 <PkaDoubleMdf2Jcb+0xce>
    62ec:	4a23      	ldr	r2, [pc, #140]	; (637c <PkaDoubleMdf2Jcb+0x168>)
    62ee:	601a      	str	r2, [r3, #0]
    62f0:	680a      	ldr	r2, [r1, #0]
    62f2:	920f      	str	r2, [sp, #60]	; 0x3c
    62f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    62f6:	07d2      	lsls	r2, r2, #31
    62f8:	d5fa      	bpl.n	62f0 <PkaDoubleMdf2Jcb+0xdc>
    62fa:	4a21      	ldr	r2, [pc, #132]	; (6380 <PkaDoubleMdf2Jcb+0x16c>)
    62fc:	601a      	str	r2, [r3, #0]
    62fe:	4b0f      	ldr	r3, [pc, #60]	; (633c <PkaDoubleMdf2Jcb+0x128>)
    6300:	4619      	mov	r1, r3
    6302:	681c      	ldr	r4, [r3, #0]
    6304:	9410      	str	r4, [sp, #64]	; 0x40
    6306:	9c10      	ldr	r4, [sp, #64]	; 0x40
    6308:	07e4      	lsls	r4, r4, #31
    630a:	d5fa      	bpl.n	6302 <PkaDoubleMdf2Jcb+0xee>
    630c:	4b0c      	ldr	r3, [pc, #48]	; (6340 <PkaDoubleMdf2Jcb+0x12c>)
    630e:	6018      	str	r0, [r3, #0]
    6310:	6808      	ldr	r0, [r1, #0]
    6312:	9011      	str	r0, [sp, #68]	; 0x44
    6314:	9811      	ldr	r0, [sp, #68]	; 0x44
    6316:	07c4      	lsls	r4, r0, #31
    6318:	d5fa      	bpl.n	6310 <PkaDoubleMdf2Jcb+0xfc>
    631a:	601a      	str	r2, [r3, #0]
    631c:	680a      	ldr	r2, [r1, #0]
    631e:	9212      	str	r2, [sp, #72]	; 0x48
    6320:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6322:	07d0      	lsls	r0, r2, #31
    6324:	d5fa      	bpl.n	631c <PkaDoubleMdf2Jcb+0x108>
    6326:	4a17      	ldr	r2, [pc, #92]	; (6384 <PkaDoubleMdf2Jcb+0x170>)
    6328:	601a      	str	r2, [r3, #0]
    632a:	680a      	ldr	r2, [r1, #0]
    632c:	9213      	str	r2, [sp, #76]	; 0x4c
    632e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6330:	07d2      	lsls	r2, r2, #31
    6332:	d5fa      	bpl.n	632a <PkaDoubleMdf2Jcb+0x116>
    6334:	4a14      	ldr	r2, [pc, #80]	; (6388 <PkaDoubleMdf2Jcb+0x174>)
    6336:	601a      	str	r2, [r3, #0]
    6338:	b014      	add	sp, #80	; 0x50
    633a:	bd10      	pop	{r4, pc}
    633c:	5002b0b0 	.word	0x5002b0b0
    6340:	5002b080 	.word	0x5002b080
    6344:	21659080 	.word	0x21659080
    6348:	90090400 	.word	0x90090400
    634c:	90659640 	.word	0x90659640
    6350:	21618080 	.word	0x21618080
    6354:	21082080 	.word	0x21082080
    6358:	90642080 	.word	0x90642080
    635c:	90618100 	.word	0x90618100
    6360:	21104600 	.word	0x21104600
    6364:	21118100 	.word	0x21118100
    6368:	21444100 	.word	0x21444100
    636c:	29202080 	.word	0x29202080
    6370:	c8104602 	.word	0xc8104602
    6374:	21098600 	.word	0x21098600
    6378:	21602080 	.word	0x21602080
    637c:	29282140 	.word	0x29282140
    6380:	21659640 	.word	0x21659640
    6384:	29259640 	.word	0x29259640
    6388:	c8144659 	.word	0xc8144659

0000638c <PkaAddJcbAfn2Mdf>:
    638c:	b510      	push	{r4, lr}
    638e:	4b50      	ldr	r3, [pc, #320]	; (64d0 <PkaAddJcbAfn2Mdf+0x144>)
    6390:	b096      	sub	sp, #88	; 0x58
    6392:	461c      	mov	r4, r3
    6394:	681a      	ldr	r2, [r3, #0]
    6396:	9201      	str	r2, [sp, #4]
    6398:	9a01      	ldr	r2, [sp, #4]
    639a:	07d2      	lsls	r2, r2, #31
    639c:	d5fa      	bpl.n	6394 <PkaAddJcbAfn2Mdf+0x8>
    639e:	4b4d      	ldr	r3, [pc, #308]	; (64d4 <PkaAddJcbAfn2Mdf+0x148>)
    63a0:	4a4d      	ldr	r2, [pc, #308]	; (64d8 <PkaAddJcbAfn2Mdf+0x14c>)
    63a2:	601a      	str	r2, [r3, #0]
    63a4:	6822      	ldr	r2, [r4, #0]
    63a6:	9202      	str	r2, [sp, #8]
    63a8:	9a02      	ldr	r2, [sp, #8]
    63aa:	07d2      	lsls	r2, r2, #31
    63ac:	d5fa      	bpl.n	63a4 <PkaAddJcbAfn2Mdf+0x18>
    63ae:	4a4b      	ldr	r2, [pc, #300]	; (64dc <PkaAddJcbAfn2Mdf+0x150>)
    63b0:	601a      	str	r2, [r3, #0]
    63b2:	4a4b      	ldr	r2, [pc, #300]	; (64e0 <PkaAddJcbAfn2Mdf+0x154>)
    63b4:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    63b8:	6822      	ldr	r2, [r4, #0]
    63ba:	9203      	str	r2, [sp, #12]
    63bc:	9a03      	ldr	r2, [sp, #12]
    63be:	07d2      	lsls	r2, r2, #31
    63c0:	d5fa      	bpl.n	63b8 <PkaAddJcbAfn2Mdf+0x2c>
    63c2:	6018      	str	r0, [r3, #0]
    63c4:	6822      	ldr	r2, [r4, #0]
    63c6:	9204      	str	r2, [sp, #16]
    63c8:	9a04      	ldr	r2, [sp, #16]
    63ca:	07d0      	lsls	r0, r2, #31
    63cc:	d5fa      	bpl.n	63c4 <PkaAddJcbAfn2Mdf+0x38>
    63ce:	4a45      	ldr	r2, [pc, #276]	; (64e4 <PkaAddJcbAfn2Mdf+0x158>)
    63d0:	601a      	str	r2, [r3, #0]
    63d2:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    63d6:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    63da:	6822      	ldr	r2, [r4, #0]
    63dc:	9205      	str	r2, [sp, #20]
    63de:	9a05      	ldr	r2, [sp, #20]
    63e0:	07d2      	lsls	r2, r2, #31
    63e2:	d5fa      	bpl.n	63da <PkaAddJcbAfn2Mdf+0x4e>
    63e4:	6019      	str	r1, [r3, #0]
    63e6:	6822      	ldr	r2, [r4, #0]
    63e8:	9206      	str	r2, [sp, #24]
    63ea:	9a06      	ldr	r2, [sp, #24]
    63ec:	07d0      	lsls	r0, r2, #31
    63ee:	d5fa      	bpl.n	63e6 <PkaAddJcbAfn2Mdf+0x5a>
    63f0:	4a3d      	ldr	r2, [pc, #244]	; (64e8 <PkaAddJcbAfn2Mdf+0x15c>)
    63f2:	601a      	str	r2, [r3, #0]
    63f4:	6822      	ldr	r2, [r4, #0]
    63f6:	9207      	str	r2, [sp, #28]
    63f8:	9a07      	ldr	r2, [sp, #28]
    63fa:	07d1      	lsls	r1, r2, #31
    63fc:	d5fa      	bpl.n	63f4 <PkaAddJcbAfn2Mdf+0x68>
    63fe:	4a3b      	ldr	r2, [pc, #236]	; (64ec <PkaAddJcbAfn2Mdf+0x160>)
    6400:	601a      	str	r2, [r3, #0]
    6402:	6822      	ldr	r2, [r4, #0]
    6404:	9208      	str	r2, [sp, #32]
    6406:	9a08      	ldr	r2, [sp, #32]
    6408:	07d2      	lsls	r2, r2, #31
    640a:	d5fa      	bpl.n	6402 <PkaAddJcbAfn2Mdf+0x76>
    640c:	4a38      	ldr	r2, [pc, #224]	; (64f0 <PkaAddJcbAfn2Mdf+0x164>)
    640e:	601a      	str	r2, [r3, #0]
    6410:	6822      	ldr	r2, [r4, #0]
    6412:	9209      	str	r2, [sp, #36]	; 0x24
    6414:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6416:	07d0      	lsls	r0, r2, #31
    6418:	d5fa      	bpl.n	6410 <PkaAddJcbAfn2Mdf+0x84>
    641a:	4a36      	ldr	r2, [pc, #216]	; (64f4 <PkaAddJcbAfn2Mdf+0x168>)
    641c:	601a      	str	r2, [r3, #0]
    641e:	6822      	ldr	r2, [r4, #0]
    6420:	920a      	str	r2, [sp, #40]	; 0x28
    6422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6424:	07d1      	lsls	r1, r2, #31
    6426:	d5fa      	bpl.n	641e <PkaAddJcbAfn2Mdf+0x92>
    6428:	4a33      	ldr	r2, [pc, #204]	; (64f8 <PkaAddJcbAfn2Mdf+0x16c>)
    642a:	601a      	str	r2, [r3, #0]
    642c:	6822      	ldr	r2, [r4, #0]
    642e:	920b      	str	r2, [sp, #44]	; 0x2c
    6430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6432:	07d2      	lsls	r2, r2, #31
    6434:	d5fa      	bpl.n	642c <PkaAddJcbAfn2Mdf+0xa0>
    6436:	4a31      	ldr	r2, [pc, #196]	; (64fc <PkaAddJcbAfn2Mdf+0x170>)
    6438:	601a      	str	r2, [r3, #0]
    643a:	6822      	ldr	r2, [r4, #0]
    643c:	920c      	str	r2, [sp, #48]	; 0x30
    643e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6440:	07d0      	lsls	r0, r2, #31
    6442:	d5fa      	bpl.n	643a <PkaAddJcbAfn2Mdf+0xae>
    6444:	4a2e      	ldr	r2, [pc, #184]	; (6500 <PkaAddJcbAfn2Mdf+0x174>)
    6446:	601a      	str	r2, [r3, #0]
    6448:	6822      	ldr	r2, [r4, #0]
    644a:	920d      	str	r2, [sp, #52]	; 0x34
    644c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    644e:	07d1      	lsls	r1, r2, #31
    6450:	d5fa      	bpl.n	6448 <PkaAddJcbAfn2Mdf+0xbc>
    6452:	4a2c      	ldr	r2, [pc, #176]	; (6504 <PkaAddJcbAfn2Mdf+0x178>)
    6454:	601a      	str	r2, [r3, #0]
    6456:	6822      	ldr	r2, [r4, #0]
    6458:	920e      	str	r2, [sp, #56]	; 0x38
    645a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    645c:	07d2      	lsls	r2, r2, #31
    645e:	d5fa      	bpl.n	6456 <PkaAddJcbAfn2Mdf+0xca>
    6460:	4a29      	ldr	r2, [pc, #164]	; (6508 <PkaAddJcbAfn2Mdf+0x17c>)
    6462:	601a      	str	r2, [r3, #0]
    6464:	6822      	ldr	r2, [r4, #0]
    6466:	920f      	str	r2, [sp, #60]	; 0x3c
    6468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    646a:	07d0      	lsls	r0, r2, #31
    646c:	d5fa      	bpl.n	6464 <PkaAddJcbAfn2Mdf+0xd8>
    646e:	4a27      	ldr	r2, [pc, #156]	; (650c <PkaAddJcbAfn2Mdf+0x180>)
    6470:	601a      	str	r2, [r3, #0]
    6472:	6821      	ldr	r1, [r4, #0]
    6474:	9110      	str	r1, [sp, #64]	; 0x40
    6476:	9910      	ldr	r1, [sp, #64]	; 0x40
    6478:	07c9      	lsls	r1, r1, #31
    647a:	d5fa      	bpl.n	6472 <PkaAddJcbAfn2Mdf+0xe6>
    647c:	601a      	str	r2, [r3, #0]
    647e:	4b14      	ldr	r3, [pc, #80]	; (64d0 <PkaAddJcbAfn2Mdf+0x144>)
    6480:	461a      	mov	r2, r3
    6482:	6819      	ldr	r1, [r3, #0]
    6484:	9111      	str	r1, [sp, #68]	; 0x44
    6486:	9911      	ldr	r1, [sp, #68]	; 0x44
    6488:	07c8      	lsls	r0, r1, #31
    648a:	d5fa      	bpl.n	6482 <PkaAddJcbAfn2Mdf+0xf6>
    648c:	4b11      	ldr	r3, [pc, #68]	; (64d4 <PkaAddJcbAfn2Mdf+0x148>)
    648e:	4920      	ldr	r1, [pc, #128]	; (6510 <PkaAddJcbAfn2Mdf+0x184>)
    6490:	6019      	str	r1, [r3, #0]
    6492:	6811      	ldr	r1, [r2, #0]
    6494:	9112      	str	r1, [sp, #72]	; 0x48
    6496:	9912      	ldr	r1, [sp, #72]	; 0x48
    6498:	07c9      	lsls	r1, r1, #31
    649a:	d5fa      	bpl.n	6492 <PkaAddJcbAfn2Mdf+0x106>
    649c:	491d      	ldr	r1, [pc, #116]	; (6514 <PkaAddJcbAfn2Mdf+0x188>)
    649e:	6019      	str	r1, [r3, #0]
    64a0:	6811      	ldr	r1, [r2, #0]
    64a2:	9113      	str	r1, [sp, #76]	; 0x4c
    64a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    64a6:	07cc      	lsls	r4, r1, #31
    64a8:	d5fa      	bpl.n	64a0 <PkaAddJcbAfn2Mdf+0x114>
    64aa:	490b      	ldr	r1, [pc, #44]	; (64d8 <PkaAddJcbAfn2Mdf+0x14c>)
    64ac:	6019      	str	r1, [r3, #0]
    64ae:	6811      	ldr	r1, [r2, #0]
    64b0:	9114      	str	r1, [sp, #80]	; 0x50
    64b2:	9914      	ldr	r1, [sp, #80]	; 0x50
    64b4:	07c8      	lsls	r0, r1, #31
    64b6:	d5fa      	bpl.n	64ae <PkaAddJcbAfn2Mdf+0x122>
    64b8:	4917      	ldr	r1, [pc, #92]	; (6518 <PkaAddJcbAfn2Mdf+0x18c>)
    64ba:	6019      	str	r1, [r3, #0]
    64bc:	6811      	ldr	r1, [r2, #0]
    64be:	9115      	str	r1, [sp, #84]	; 0x54
    64c0:	9915      	ldr	r1, [sp, #84]	; 0x54
    64c2:	07c9      	lsls	r1, r1, #31
    64c4:	d5fa      	bpl.n	64bc <PkaAddJcbAfn2Mdf+0x130>
    64c6:	4a15      	ldr	r2, [pc, #84]	; (651c <PkaAddJcbAfn2Mdf+0x190>)
    64c8:	601a      	str	r2, [r3, #0]
    64ca:	b016      	add	sp, #88	; 0x58
    64cc:	bd10      	pop	{r4, pc}
    64ce:	bf00      	nop
    64d0:	5002b0b0 	.word	0x5002b0b0
    64d4:	5002b080 	.word	0x5002b080
    64d8:	90410440 	.word	0x90410440
    64dc:	29298600 	.word	0x29298600
    64e0:	c80110d8 	.word	0xc80110d8
    64e4:	90411440 	.word	0x90411440
    64e8:	29211440 	.word	0x29211440
    64ec:	21651440 	.word	0x21651440
    64f0:	90403400 	.word	0x90403400
    64f4:	900c3100 	.word	0x900c3100
    64f8:	900c40c0 	.word	0x900c40c0
    64fc:	292030c0 	.word	0x292030c0
    6500:	900d9640 	.word	0x900d9640
    6504:	90604100 	.word	0x90604100
    6508:	c8451603 	.word	0xc8451603
    650c:	21118600 	.word	0x21118600
    6510:	21604100 	.word	0x21604100
    6514:	c8444659 	.word	0xc8444659
    6518:	90451440 	.word	0x90451440
    651c:	902d1440 	.word	0x902d1440

00006520 <PkaJcb2Afn>:
    6520:	b570      	push	{r4, r5, r6, lr}
    6522:	4826      	ldr	r0, [pc, #152]	; (65bc <PkaJcb2Afn+0x9c>)
    6524:	b088      	sub	sp, #32
    6526:	4605      	mov	r5, r0
    6528:	6804      	ldr	r4, [r0, #0]
    652a:	9400      	str	r4, [sp, #0]
    652c:	9c00      	ldr	r4, [sp, #0]
    652e:	07e6      	lsls	r6, r4, #31
    6530:	d5fa      	bpl.n	6528 <PkaJcb2Afn+0x8>
    6532:	4823      	ldr	r0, [pc, #140]	; (65c0 <PkaJcb2Afn+0xa0>)
    6534:	4c23      	ldr	r4, [pc, #140]	; (65c4 <PkaJcb2Afn+0xa4>)
    6536:	6004      	str	r4, [r0, #0]
    6538:	4c23      	ldr	r4, [pc, #140]	; (65c8 <PkaJcb2Afn+0xa8>)
    653a:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    653e:	682c      	ldr	r4, [r5, #0]
    6540:	9401      	str	r4, [sp, #4]
    6542:	9c01      	ldr	r4, [sp, #4]
    6544:	07e4      	lsls	r4, r4, #31
    6546:	d5fa      	bpl.n	653e <PkaJcb2Afn+0x1e>
    6548:	6003      	str	r3, [r0, #0]
    654a:	0193      	lsls	r3, r2, #6
    654c:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    6550:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    6554:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    6558:	682b      	ldr	r3, [r5, #0]
    655a:	9302      	str	r3, [sp, #8]
    655c:	9b02      	ldr	r3, [sp, #8]
    655e:	07de      	lsls	r6, r3, #31
    6560:	d5fa      	bpl.n	6558 <PkaJcb2Afn+0x38>
    6562:	6004      	str	r4, [r0, #0]
    6564:	682b      	ldr	r3, [r5, #0]
    6566:	9303      	str	r3, [sp, #12]
    6568:	9b03      	ldr	r3, [sp, #12]
    656a:	07db      	lsls	r3, r3, #31
    656c:	d5fa      	bpl.n	6564 <PkaJcb2Afn+0x44>
    656e:	4b17      	ldr	r3, [pc, #92]	; (65cc <PkaJcb2Afn+0xac>)
    6570:	6003      	str	r3, [r0, #0]
    6572:	018b      	lsls	r3, r1, #6
    6574:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    6578:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    657c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    6580:	682e      	ldr	r6, [r5, #0]
    6582:	9604      	str	r6, [sp, #16]
    6584:	9e04      	ldr	r6, [sp, #16]
    6586:	07f6      	lsls	r6, r6, #31
    6588:	d5fa      	bpl.n	6580 <PkaJcb2Afn+0x60>
    658a:	6003      	str	r3, [r0, #0]
    658c:	682b      	ldr	r3, [r5, #0]
    658e:	9305      	str	r3, [sp, #20]
    6590:	9b05      	ldr	r3, [sp, #20]
    6592:	07de      	lsls	r6, r3, #31
    6594:	d5fa      	bpl.n	658c <PkaJcb2Afn+0x6c>
    6596:	6004      	str	r4, [r0, #0]
    6598:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    659c:	682b      	ldr	r3, [r5, #0]
    659e:	9306      	str	r3, [sp, #24]
    65a0:	9b06      	ldr	r3, [sp, #24]
    65a2:	07dc      	lsls	r4, r3, #31
    65a4:	d5fa      	bpl.n	659c <PkaJcb2Afn+0x7c>
    65a6:	6001      	str	r1, [r0, #0]
    65a8:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    65ac:	682b      	ldr	r3, [r5, #0]
    65ae:	9307      	str	r3, [sp, #28]
    65b0:	9b07      	ldr	r3, [sp, #28]
    65b2:	07db      	lsls	r3, r3, #31
    65b4:	d5fa      	bpl.n	65ac <PkaJcb2Afn+0x8c>
    65b6:	6002      	str	r2, [r0, #0]
    65b8:	b008      	add	sp, #32
    65ba:	bd70      	pop	{r4, r5, r6, pc}
    65bc:	5002b0b0 	.word	0x5002b0b0
    65c0:	5002b080 	.word	0x5002b080
    65c4:	290221c0 	.word	0x290221c0
    65c8:	98007180 	.word	0x98007180
    65cc:	90186180 	.word	0x90186180

000065d0 <PkaAddAff>:
    65d0:	4b35      	ldr	r3, [pc, #212]	; (66a8 <PkaAddAff+0xd8>)
    65d2:	b08e      	sub	sp, #56	; 0x38
    65d4:	4619      	mov	r1, r3
    65d6:	681a      	ldr	r2, [r3, #0]
    65d8:	9200      	str	r2, [sp, #0]
    65da:	9a00      	ldr	r2, [sp, #0]
    65dc:	07d2      	lsls	r2, r2, #31
    65de:	d5fa      	bpl.n	65d6 <PkaAddAff+0x6>
    65e0:	4b32      	ldr	r3, [pc, #200]	; (66ac <PkaAddAff+0xdc>)
    65e2:	4a33      	ldr	r2, [pc, #204]	; (66b0 <PkaAddAff+0xe0>)
    65e4:	601a      	str	r2, [r3, #0]
    65e6:	680a      	ldr	r2, [r1, #0]
    65e8:	9201      	str	r2, [sp, #4]
    65ea:	9a01      	ldr	r2, [sp, #4]
    65ec:	07d0      	lsls	r0, r2, #31
    65ee:	d5fa      	bpl.n	65e6 <PkaAddAff+0x16>
    65f0:	4a30      	ldr	r2, [pc, #192]	; (66b4 <PkaAddAff+0xe4>)
    65f2:	601a      	str	r2, [r3, #0]
    65f4:	680a      	ldr	r2, [r1, #0]
    65f6:	9202      	str	r2, [sp, #8]
    65f8:	9a02      	ldr	r2, [sp, #8]
    65fa:	07d2      	lsls	r2, r2, #31
    65fc:	d5fa      	bpl.n	65f4 <PkaAddAff+0x24>
    65fe:	4a2e      	ldr	r2, [pc, #184]	; (66b8 <PkaAddAff+0xe8>)
    6600:	601a      	str	r2, [r3, #0]
    6602:	680a      	ldr	r2, [r1, #0]
    6604:	9203      	str	r2, [sp, #12]
    6606:	9a03      	ldr	r2, [sp, #12]
    6608:	07d0      	lsls	r0, r2, #31
    660a:	d5fa      	bpl.n	6602 <PkaAddAff+0x32>
    660c:	4a2b      	ldr	r2, [pc, #172]	; (66bc <PkaAddAff+0xec>)
    660e:	601a      	str	r2, [r3, #0]
    6610:	680a      	ldr	r2, [r1, #0]
    6612:	9204      	str	r2, [sp, #16]
    6614:	9a04      	ldr	r2, [sp, #16]
    6616:	07d2      	lsls	r2, r2, #31
    6618:	d5fa      	bpl.n	6610 <PkaAddAff+0x40>
    661a:	4a29      	ldr	r2, [pc, #164]	; (66c0 <PkaAddAff+0xf0>)
    661c:	601a      	str	r2, [r3, #0]
    661e:	680a      	ldr	r2, [r1, #0]
    6620:	9205      	str	r2, [sp, #20]
    6622:	9a05      	ldr	r2, [sp, #20]
    6624:	07d0      	lsls	r0, r2, #31
    6626:	d5fa      	bpl.n	661e <PkaAddAff+0x4e>
    6628:	4a26      	ldr	r2, [pc, #152]	; (66c4 <PkaAddAff+0xf4>)
    662a:	601a      	str	r2, [r3, #0]
    662c:	680a      	ldr	r2, [r1, #0]
    662e:	9206      	str	r2, [sp, #24]
    6630:	9a06      	ldr	r2, [sp, #24]
    6632:	07d2      	lsls	r2, r2, #31
    6634:	d5fa      	bpl.n	662c <PkaAddAff+0x5c>
    6636:	4a24      	ldr	r2, [pc, #144]	; (66c8 <PkaAddAff+0xf8>)
    6638:	601a      	str	r2, [r3, #0]
    663a:	680a      	ldr	r2, [r1, #0]
    663c:	9207      	str	r2, [sp, #28]
    663e:	9a07      	ldr	r2, [sp, #28]
    6640:	07d0      	lsls	r0, r2, #31
    6642:	d5fa      	bpl.n	663a <PkaAddAff+0x6a>
    6644:	4a21      	ldr	r2, [pc, #132]	; (66cc <PkaAddAff+0xfc>)
    6646:	601a      	str	r2, [r3, #0]
    6648:	680a      	ldr	r2, [r1, #0]
    664a:	9208      	str	r2, [sp, #32]
    664c:	9a08      	ldr	r2, [sp, #32]
    664e:	07d2      	lsls	r2, r2, #31
    6650:	d5fa      	bpl.n	6648 <PkaAddAff+0x78>
    6652:	4a1f      	ldr	r2, [pc, #124]	; (66d0 <PkaAddAff+0x100>)
    6654:	601a      	str	r2, [r3, #0]
    6656:	680a      	ldr	r2, [r1, #0]
    6658:	9209      	str	r2, [sp, #36]	; 0x24
    665a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    665c:	07d0      	lsls	r0, r2, #31
    665e:	d5fa      	bpl.n	6656 <PkaAddAff+0x86>
    6660:	4a1c      	ldr	r2, [pc, #112]	; (66d4 <PkaAddAff+0x104>)
    6662:	601a      	str	r2, [r3, #0]
    6664:	680a      	ldr	r2, [r1, #0]
    6666:	920a      	str	r2, [sp, #40]	; 0x28
    6668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    666a:	07d2      	lsls	r2, r2, #31
    666c:	d5fa      	bpl.n	6664 <PkaAddAff+0x94>
    666e:	4a1a      	ldr	r2, [pc, #104]	; (66d8 <PkaAddAff+0x108>)
    6670:	601a      	str	r2, [r3, #0]
    6672:	6808      	ldr	r0, [r1, #0]
    6674:	900b      	str	r0, [sp, #44]	; 0x2c
    6676:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6678:	07c0      	lsls	r0, r0, #31
    667a:	d5fa      	bpl.n	6672 <PkaAddAff+0xa2>
    667c:	601a      	str	r2, [r3, #0]
    667e:	680a      	ldr	r2, [r1, #0]
    6680:	920c      	str	r2, [sp, #48]	; 0x30
    6682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6684:	07d0      	lsls	r0, r2, #31
    6686:	d5fa      	bpl.n	667e <PkaAddAff+0xae>
    6688:	4a14      	ldr	r2, [pc, #80]	; (66dc <PkaAddAff+0x10c>)
    668a:	601a      	str	r2, [r3, #0]
    668c:	680a      	ldr	r2, [r1, #0]
    668e:	920d      	str	r2, [sp, #52]	; 0x34
    6690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6692:	07d2      	lsls	r2, r2, #31
    6694:	d5fa      	bpl.n	668c <PkaAddAff+0xbc>
    6696:	4a12      	ldr	r2, [pc, #72]	; (66e0 <PkaAddAff+0x110>)
    6698:	601a      	str	r2, [r3, #0]
    669a:	210e      	movs	r1, #14
    669c:	230d      	movs	r3, #13
    669e:	220f      	movs	r2, #15
    66a0:	2000      	movs	r0, #0
    66a2:	b00e      	add	sp, #56	; 0x38
    66a4:	f7ff bf3c 	b.w	6520 <PkaJcb2Afn>
    66a8:	5002b0b0 	.word	0x5002b0b0
    66ac:	5002b080 	.word	0x5002b080
    66b0:	29014380 	.word	0x29014380
    66b4:	21396340 	.word	0x21396340
    66b8:	29017080 	.word	0x29017080
    66bc:	21542080 	.word	0x21542080
    66c0:	9034d100 	.word	0x9034d100
    66c4:	903440c0 	.word	0x903440c0
    66c8:	292030c0 	.word	0x292030c0
    66cc:	900d53c0 	.word	0x900d53c0
    66d0:	90384100 	.word	0x90384100
    66d4:	c8082383 	.word	0xc8082383
    66d8:	2110e380 	.word	0x2110e380
    66dc:	21384100 	.word	0x21384100
    66e0:	c80843cf 	.word	0xc80843cf

000066e4 <PkaSum2ScalarMullt>:
    66e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66e8:	2301      	movs	r3, #1
    66ea:	b092      	sub	sp, #72	; 0x48
    66ec:	e9cd 3303 	strd	r3, r3, [sp, #12]
    66f0:	4b62      	ldr	r3, [pc, #392]	; (687c <PkaSum2ScalarMullt+0x198>)
    66f2:	461d      	mov	r5, r3
    66f4:	681a      	ldr	r2, [r3, #0]
    66f6:	9205      	str	r2, [sp, #20]
    66f8:	9a05      	ldr	r2, [sp, #20]
    66fa:	07d2      	lsls	r2, r2, #31
    66fc:	d5fa      	bpl.n	66f4 <PkaSum2ScalarMullt+0x10>
    66fe:	4c60      	ldr	r4, [pc, #384]	; (6880 <PkaSum2ScalarMullt+0x19c>)
    6700:	4b60      	ldr	r3, [pc, #384]	; (6884 <PkaSum2ScalarMullt+0x1a0>)
    6702:	6023      	str	r3, [r4, #0]
    6704:	4b60      	ldr	r3, [pc, #384]	; (6888 <PkaSum2ScalarMullt+0x1a4>)
    6706:	4619      	mov	r1, r3
    6708:	681a      	ldr	r2, [r3, #0]
    670a:	9206      	str	r2, [sp, #24]
    670c:	9a06      	ldr	r2, [sp, #24]
    670e:	07d7      	lsls	r7, r2, #31
    6710:	d5fa      	bpl.n	6708 <PkaSum2ScalarMullt+0x24>
    6712:	4b5e      	ldr	r3, [pc, #376]	; (688c <PkaSum2ScalarMullt+0x1a8>)
    6714:	681a      	ldr	r2, [r3, #0]
    6716:	04d6      	lsls	r6, r2, #19
    6718:	f100 80a8 	bmi.w	686c <PkaSum2ScalarMullt+0x188>
    671c:	682a      	ldr	r2, [r5, #0]
    671e:	9207      	str	r2, [sp, #28]
    6720:	9a07      	ldr	r2, [sp, #28]
    6722:	07d0      	lsls	r0, r2, #31
    6724:	d5fa      	bpl.n	671c <PkaSum2ScalarMullt+0x38>
    6726:	4a5a      	ldr	r2, [pc, #360]	; (6890 <PkaSum2ScalarMullt+0x1ac>)
    6728:	6022      	str	r2, [r4, #0]
    672a:	680a      	ldr	r2, [r1, #0]
    672c:	9208      	str	r2, [sp, #32]
    672e:	9a08      	ldr	r2, [sp, #32]
    6730:	07d2      	lsls	r2, r2, #31
    6732:	d5fa      	bpl.n	672a <PkaSum2ScalarMullt+0x46>
    6734:	681e      	ldr	r6, [r3, #0]
    6736:	f3c6 3600 	ubfx	r6, r6, #12, #1
    673a:	2e00      	cmp	r6, #0
    673c:	f040 8098 	bne.w	6870 <PkaSum2ScalarMullt+0x18c>
    6740:	2012      	movs	r0, #18
    6742:	f7ff f8f9 	bl	5938 <PkaGetRegEffectiveSizeInBits>
    6746:	4607      	mov	r7, r0
    6748:	2013      	movs	r0, #19
    674a:	f7ff f8f5 	bl	5938 <PkaGetRegEffectiveSizeInBits>
    674e:	4287      	cmp	r7, r0
    6750:	bf8c      	ite	hi
    6752:	2012      	movhi	r0, #18
    6754:	2013      	movls	r0, #19
    6756:	f7ff f8ef 	bl	5938 <PkaGetRegEffectiveSizeInBits>
    675a:	1e47      	subs	r7, r0, #1
    675c:	f7ff ff38 	bl	65d0 <PkaAddAff>
    6760:	ab03      	add	r3, sp, #12
    6762:	aa01      	add	r2, sp, #4
    6764:	4639      	mov	r1, r7
    6766:	2012      	movs	r0, #18
    6768:	f7ff f92c 	bl	59c4 <PkaGetNextMsBit>
    676c:	ab04      	add	r3, sp, #16
    676e:	4680      	mov	r8, r0
    6770:	aa02      	add	r2, sp, #8
    6772:	4639      	mov	r1, r7
    6774:	2013      	movs	r0, #19
    6776:	f7ff f925 	bl	59c4 <PkaGetNextMsBit>
    677a:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    677e:	2802      	cmp	r0, #2
    6780:	d032      	beq.n	67e8 <PkaSum2ScalarMullt+0x104>
    6782:	2803      	cmp	r0, #3
    6784:	d03e      	beq.n	6804 <PkaSum2ScalarMullt+0x120>
    6786:	2801      	cmp	r0, #1
    6788:	d174      	bne.n	6874 <PkaSum2ScalarMullt+0x190>
    678a:	682b      	ldr	r3, [r5, #0]
    678c:	9309      	str	r3, [sp, #36]	; 0x24
    678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6790:	07db      	lsls	r3, r3, #31
    6792:	d5fa      	bpl.n	678a <PkaSum2ScalarMullt+0xa6>
    6794:	4b3f      	ldr	r3, [pc, #252]	; (6894 <PkaSum2ScalarMullt+0x1b0>)
    6796:	6023      	str	r3, [r4, #0]
    6798:	682b      	ldr	r3, [r5, #0]
    679a:	930a      	str	r3, [sp, #40]	; 0x28
    679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    679e:	07d8      	lsls	r0, r3, #31
    67a0:	d5fa      	bpl.n	6798 <PkaSum2ScalarMullt+0xb4>
    67a2:	4b3d      	ldr	r3, [pc, #244]	; (6898 <PkaSum2ScalarMullt+0x1b4>)
    67a4:	6023      	str	r3, [r4, #0]
    67a6:	682b      	ldr	r3, [r5, #0]
    67a8:	930f      	str	r3, [sp, #60]	; 0x3c
    67aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    67ac:	07d9      	lsls	r1, r3, #31
    67ae:	d5fa      	bpl.n	67a6 <PkaSum2ScalarMullt+0xc2>
    67b0:	4b3a      	ldr	r3, [pc, #232]	; (689c <PkaSum2ScalarMullt+0x1b8>)
    67b2:	6023      	str	r3, [r4, #0]
    67b4:	682b      	ldr	r3, [r5, #0]
    67b6:	9310      	str	r3, [sp, #64]	; 0x40
    67b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    67ba:	07da      	lsls	r2, r3, #31
    67bc:	d5fa      	bpl.n	67b4 <PkaSum2ScalarMullt+0xd0>
    67be:	4b38      	ldr	r3, [pc, #224]	; (68a0 <PkaSum2ScalarMullt+0x1bc>)
    67c0:	6023      	str	r3, [r4, #0]
    67c2:	682b      	ldr	r3, [r5, #0]
    67c4:	9311      	str	r3, [sp, #68]	; 0x44
    67c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    67c8:	07db      	lsls	r3, r3, #31
    67ca:	d5fa      	bpl.n	67c2 <PkaSum2ScalarMullt+0xde>
    67cc:	4b35      	ldr	r3, [pc, #212]	; (68a4 <PkaSum2ScalarMullt+0x1c0>)
    67ce:	6023      	str	r3, [r4, #0]
    67d0:	3f01      	subs	r7, #1
    67d2:	d525      	bpl.n	6820 <PkaSum2ScalarMullt+0x13c>
    67d4:	2310      	movs	r3, #16
    67d6:	2219      	movs	r2, #25
    67d8:	2118      	movs	r1, #24
    67da:	2000      	movs	r0, #0
    67dc:	f7ff fea0 	bl	6520 <PkaJcb2Afn>
    67e0:	4630      	mov	r0, r6
    67e2:	b012      	add	sp, #72	; 0x48
    67e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67e8:	682b      	ldr	r3, [r5, #0]
    67ea:	930b      	str	r3, [sp, #44]	; 0x2c
    67ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    67ee:	07d9      	lsls	r1, r3, #31
    67f0:	d5fa      	bpl.n	67e8 <PkaSum2ScalarMullt+0x104>
    67f2:	4b2d      	ldr	r3, [pc, #180]	; (68a8 <PkaSum2ScalarMullt+0x1c4>)
    67f4:	6023      	str	r3, [r4, #0]
    67f6:	682b      	ldr	r3, [r5, #0]
    67f8:	930c      	str	r3, [sp, #48]	; 0x30
    67fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67fc:	07da      	lsls	r2, r3, #31
    67fe:	d5fa      	bpl.n	67f6 <PkaSum2ScalarMullt+0x112>
    6800:	4b2a      	ldr	r3, [pc, #168]	; (68ac <PkaSum2ScalarMullt+0x1c8>)
    6802:	e7cf      	b.n	67a4 <PkaSum2ScalarMullt+0xc0>
    6804:	682b      	ldr	r3, [r5, #0]
    6806:	930d      	str	r3, [sp, #52]	; 0x34
    6808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    680a:	07db      	lsls	r3, r3, #31
    680c:	d5fa      	bpl.n	6804 <PkaSum2ScalarMullt+0x120>
    680e:	4b28      	ldr	r3, [pc, #160]	; (68b0 <PkaSum2ScalarMullt+0x1cc>)
    6810:	6023      	str	r3, [r4, #0]
    6812:	682b      	ldr	r3, [r5, #0]
    6814:	930e      	str	r3, [sp, #56]	; 0x38
    6816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6818:	07d8      	lsls	r0, r3, #31
    681a:	d5fa      	bpl.n	6812 <PkaSum2ScalarMullt+0x12e>
    681c:	4b25      	ldr	r3, [pc, #148]	; (68b4 <PkaSum2ScalarMullt+0x1d0>)
    681e:	e7c1      	b.n	67a4 <PkaSum2ScalarMullt+0xc0>
    6820:	ab03      	add	r3, sp, #12
    6822:	aa01      	add	r2, sp, #4
    6824:	4639      	mov	r1, r7
    6826:	2012      	movs	r0, #18
    6828:	f7ff f8cc 	bl	59c4 <PkaGetNextMsBit>
    682c:	ab04      	add	r3, sp, #16
    682e:	4604      	mov	r4, r0
    6830:	aa02      	add	r2, sp, #8
    6832:	4639      	mov	r1, r7
    6834:	2013      	movs	r0, #19
    6836:	f7ff f8c5 	bl	59c4 <PkaGetNextMsBit>
    683a:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    683e:	d102      	bne.n	6846 <PkaSum2ScalarMullt+0x162>
    6840:	f7ff fc12 	bl	6068 <PkaDoubleMdf2Mdf>
    6844:	e7c4      	b.n	67d0 <PkaSum2ScalarMullt+0xec>
    6846:	f7ff fce5 	bl	6214 <PkaDoubleMdf2Jcb>
    684a:	2c02      	cmp	r4, #2
    684c:	d008      	beq.n	6860 <PkaSum2ScalarMullt+0x17c>
    684e:	2c03      	cmp	r4, #3
    6850:	d009      	beq.n	6866 <PkaSum2ScalarMullt+0x182>
    6852:	2c01      	cmp	r4, #1
    6854:	d110      	bne.n	6878 <PkaSum2ScalarMullt+0x194>
    6856:	2117      	movs	r1, #23
    6858:	2016      	movs	r0, #22
    685a:	f7ff fd97 	bl	638c <PkaAddJcbAfn2Mdf>
    685e:	e7b7      	b.n	67d0 <PkaSum2ScalarMullt+0xec>
    6860:	2115      	movs	r1, #21
    6862:	2014      	movs	r0, #20
    6864:	e7f9      	b.n	685a <PkaSum2ScalarMullt+0x176>
    6866:	210f      	movs	r1, #15
    6868:	200e      	movs	r0, #14
    686a:	e7f6      	b.n	685a <PkaSum2ScalarMullt+0x176>
    686c:	4e12      	ldr	r6, [pc, #72]	; (68b8 <PkaSum2ScalarMullt+0x1d4>)
    686e:	e7b7      	b.n	67e0 <PkaSum2ScalarMullt+0xfc>
    6870:	4e12      	ldr	r6, [pc, #72]	; (68bc <PkaSum2ScalarMullt+0x1d8>)
    6872:	e7b5      	b.n	67e0 <PkaSum2ScalarMullt+0xfc>
    6874:	4e12      	ldr	r6, [pc, #72]	; (68c0 <PkaSum2ScalarMullt+0x1dc>)
    6876:	e7b3      	b.n	67e0 <PkaSum2ScalarMullt+0xfc>
    6878:	4e12      	ldr	r6, [pc, #72]	; (68c4 <PkaSum2ScalarMullt+0x1e0>)
    687a:	e7b1      	b.n	67e0 <PkaSum2ScalarMullt+0xfc>
    687c:	5002b0b0 	.word	0x5002b0b0
    6880:	5002b080 	.word	0x5002b080
    6884:	514a0800 	.word	0x514a0800
    6888:	5002b0b4 	.word	0x5002b0b4
    688c:	5002b088 	.word	0x5002b088
    6890:	514e0800 	.word	0x514e0800
    6894:	495a0600 	.word	0x495a0600
    6898:	495e0640 	.word	0x495e0640
    689c:	41420400 	.word	0x41420400
    68a0:	49421400 	.word	0x49421400
    68a4:	492e0440 	.word	0x492e0440
    68a8:	49520600 	.word	0x49520600
    68ac:	49560640 	.word	0x49560640
    68b0:	493a0600 	.word	0x493a0600
    68b4:	493e0640 	.word	0x493e0640
    68b8:	00f10806 	.word	0x00f10806
    68bc:	00f10807 	.word	0x00f10807
    68c0:	00f10804 	.word	0x00f10804
    68c4:	00f10805 	.word	0x00f10805

000068c8 <SaSi_HalClearInterruptBit>:
    68c8:	4b01      	ldr	r3, [pc, #4]	; (68d0 <SaSi_HalClearInterruptBit+0x8>)
    68ca:	6018      	str	r0, [r3, #0]
    68cc:	4770      	bx	lr
    68ce:	bf00      	nop
    68d0:	5002ba08 	.word	0x5002ba08

000068d4 <SaSi_HalMaskInterrupt>:
    68d4:	4b01      	ldr	r3, [pc, #4]	; (68dc <SaSi_HalMaskInterrupt+0x8>)
    68d6:	6018      	str	r0, [r3, #0]
    68d8:	4770      	bx	lr
    68da:	bf00      	nop
    68dc:	5002ba04 	.word	0x5002ba04

000068e0 <SaSi_HalWaitInterrupt>:
    68e0:	4a03      	ldr	r2, [pc, #12]	; (68f0 <SaSi_HalWaitInterrupt+0x10>)
    68e2:	6813      	ldr	r3, [r2, #0]
    68e4:	4218      	tst	r0, r3
    68e6:	d0fc      	beq.n	68e2 <SaSi_HalWaitInterrupt+0x2>
    68e8:	4a02      	ldr	r2, [pc, #8]	; (68f4 <SaSi_HalWaitInterrupt+0x14>)
    68ea:	6010      	str	r0, [r2, #0]
    68ec:	4618      	mov	r0, r3
    68ee:	4770      	bx	lr
    68f0:	5002ba00 	.word	0x5002ba00
    68f4:	5002ba08 	.word	0x5002ba08

000068f8 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    68f8:	b129      	cbz	r1, 6906 <flash_area_id_from_multi_image_slot+0xe>
    return -EINVAL; /* flash_area_open will fail on that */
    68fa:	2901      	cmp	r1, #1
    68fc:	bf0c      	ite	eq
    68fe:	2005      	moveq	r0, #5
    6900:	f06f 0015 	mvnne.w	r0, #21
    6904:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    6906:	2002      	movs	r0, #2
}
    6908:	4770      	bx	lr

0000690a <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    690a:	2000      	movs	r0, #0
    690c:	4770      	bx	lr

0000690e <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    690e:	4770      	bx	lr

00006910 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    6910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6914:	460e      	mov	r6, r1
    6916:	4617      	mov	r7, r2
    6918:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    691a:	4604      	mov	r4, r0
    691c:	b928      	cbnz	r0, 692a <bootutil_tlv_iter_begin+0x1a>
        return -1;
    691e:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    6922:	4640      	mov	r0, r8
    6924:	b003      	add	sp, #12
    6926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    692a:	2900      	cmp	r1, #0
    692c:	d0f7      	beq.n	691e <bootutil_tlv_iter_begin+0xe>
    692e:	2a00      	cmp	r2, #0
    6930:	d0f5      	beq.n	691e <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    6932:	68cb      	ldr	r3, [r1, #12]
    6934:	890d      	ldrh	r5, [r1, #8]
    6936:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    6938:	2304      	movs	r3, #4
    693a:	eb0d 0203 	add.w	r2, sp, r3
    693e:	4629      	mov	r1, r5
    6940:	4638      	mov	r0, r7
    6942:	f000 fc48 	bl	71d6 <flash_area_read>
    6946:	4680      	mov	r8, r0
    6948:	2800      	cmp	r0, #0
    694a:	d1e8      	bne.n	691e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    694c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    6950:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6952:	f646 1208 	movw	r2, #26888	; 0x6908
    6956:	4291      	cmp	r1, r2
    6958:	d125      	bne.n	69a6 <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    695a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    695e:	4299      	cmp	r1, r3
    6960:	d1dd      	bne.n	691e <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    6962:	2304      	movs	r3, #4
    6964:	eb0d 0203 	add.w	r2, sp, r3
    6968:	4429      	add	r1, r5
    696a:	4638      	mov	r0, r7
    696c:	f000 fc33 	bl	71d6 <flash_area_read>
    6970:	2800      	cmp	r0, #0
    6972:	d1d4      	bne.n	691e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    6974:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6978:	f646 1307 	movw	r3, #26887	; 0x6907
    697c:	429a      	cmp	r2, r3
    697e:	d1ce      	bne.n	691e <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    6980:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    6984:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    6988:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    698c:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    698e:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6990:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    6994:	442b      	add	r3, r5
    6996:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6998:	8973      	ldrh	r3, [r6, #10]
    699a:	4413      	add	r3, r2
    699c:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    699e:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    69a0:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    69a2:	6125      	str	r5, [r4, #16]
    return 0;
    69a4:	e7bd      	b.n	6922 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    69a6:	2b00      	cmp	r3, #0
    69a8:	d0e4      	beq.n	6974 <bootutil_tlv_iter_begin+0x64>
    69aa:	e7b8      	b.n	691e <bootutil_tlv_iter_begin+0xe>

000069ac <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    69ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    69b0:	460e      	mov	r6, r1
    69b2:	4617      	mov	r7, r2
    69b4:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    69b6:	4604      	mov	r4, r0
    69b8:	b920      	cbnz	r0, 69c4 <bootutil_tlv_iter_next+0x18>
        return -1;
    69ba:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    69be:	b002      	add	sp, #8
    69c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    69c4:	6803      	ldr	r3, [r0, #0]
    69c6:	2b00      	cmp	r3, #0
    69c8:	d0f7      	beq.n	69ba <bootutil_tlv_iter_next+0xe>
    69ca:	6843      	ldr	r3, [r0, #4]
    69cc:	2b00      	cmp	r3, #0
    69ce:	d0f4      	beq.n	69ba <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    69d0:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    69d4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    69d8:	429a      	cmp	r2, r3
    69da:	d216      	bcs.n	6a0a <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    69dc:	6823      	ldr	r3, [r4, #0]
    69de:	895b      	ldrh	r3, [r3, #10]
    69e0:	b123      	cbz	r3, 69ec <bootutil_tlv_iter_next+0x40>
    69e2:	68e3      	ldr	r3, [r4, #12]
    69e4:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    69e6:	bf04      	itt	eq
    69e8:	3304      	addeq	r3, #4
    69ea:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    69ec:	2304      	movs	r3, #4
    69ee:	6921      	ldr	r1, [r4, #16]
    69f0:	6860      	ldr	r0, [r4, #4]
    69f2:	eb0d 0203 	add.w	r2, sp, r3
    69f6:	f000 fbee 	bl	71d6 <flash_area_read>
        if (rc) {
    69fa:	2800      	cmp	r0, #0
    69fc:	d1dd      	bne.n	69ba <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    69fe:	7aa3      	ldrb	r3, [r4, #10]
    6a00:	b12b      	cbz	r3, 6a0e <bootutil_tlv_iter_next+0x62>
    6a02:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    6a06:	429a      	cmp	r2, r3
    6a08:	d301      	bcc.n	6a0e <bootutil_tlv_iter_next+0x62>
            return 1;
    6a0a:	2001      	movs	r0, #1
    6a0c:	e7d7      	b.n	69be <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6a0e:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    6a10:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6a14:	4543      	cmp	r3, r8
    6a16:	f101 0204 	add.w	r2, r1, #4
    6a1a:	d003      	beq.n	6a24 <bootutil_tlv_iter_next+0x78>
    6a1c:	f8bd c004 	ldrh.w	ip, [sp, #4]
    6a20:	459c      	cmp	ip, r3
    6a22:	d10b      	bne.n	6a3c <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    6a24:	b115      	cbz	r5, 6a2c <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    6a26:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6a2a:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    6a2c:	6923      	ldr	r3, [r4, #16]
    6a2e:	3304      	adds	r3, #4
    6a30:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    6a32:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    6a34:	6923      	ldr	r3, [r4, #16]
    6a36:	4413      	add	r3, r2
    6a38:	6123      	str	r3, [r4, #16]
            return 0;
    6a3a:	e7c0      	b.n	69be <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    6a3c:	6923      	ldr	r3, [r4, #16]
    6a3e:	4413      	add	r3, r2
    6a40:	6123      	str	r3, [r4, #16]
    6a42:	e7c7      	b.n	69d4 <bootutil_tlv_iter_next+0x28>

00006a44 <bootutil_read_bigint>:
{
    6a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6a46:	460c      	mov	r4, r1
    6a48:	4606      	mov	r6, r0
    6a4a:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    6a4c:	2302      	movs	r3, #2
    6a4e:	aa01      	add	r2, sp, #4
    6a50:	4620      	mov	r0, r4
    6a52:	f000 fa3b 	bl	6ecc <mbedtls_asn1_get_tag>
    6a56:	4605      	mov	r5, r0
    6a58:	b9e8      	cbnz	r0, 6a96 <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    6a5a:	9a01      	ldr	r2, [sp, #4]
    6a5c:	2a1f      	cmp	r2, #31
    6a5e:	d90e      	bls.n	6a7e <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    6a60:	6823      	ldr	r3, [r4, #0]
    6a62:	f1a2 0120 	sub.w	r1, r2, #32
    6a66:	4419      	add	r1, r3
    6a68:	2220      	movs	r2, #32
    6a6a:	4630      	mov	r0, r6
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    6a6c:	f000 fc6f 	bl	734e <memcpy>
    *cp += len;
    6a70:	6823      	ldr	r3, [r4, #0]
    6a72:	9a01      	ldr	r2, [sp, #4]
    6a74:	4413      	add	r3, r2
    6a76:	6023      	str	r3, [r4, #0]
}
    6a78:	4628      	mov	r0, r5
    6a7a:	b002      	add	sp, #8
    6a7c:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    6a7e:	4601      	mov	r1, r0
    6a80:	f1c2 0220 	rsb	r2, r2, #32
    6a84:	4630      	mov	r0, r6
    6a86:	f000 fc6d 	bl	7364 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    6a8a:	9a01      	ldr	r2, [sp, #4]
    6a8c:	6821      	ldr	r1, [r4, #0]
    6a8e:	f1c2 0020 	rsb	r0, r2, #32
    6a92:	4430      	add	r0, r6
    6a94:	e7ea      	b.n	6a6c <bootutil_read_bigint+0x28>
        return -3;
    6a96:	f06f 0502 	mvn.w	r5, #2
    6a9a:	e7ed      	b.n	6a78 <bootutil_read_bigint+0x34>

00006a9c <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    6a9c:	f000 bc30 	b.w	7300 <memcmp>

00006aa0 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    6aa0:	f44f 73c0 	mov.w	r3, #384	; 0x180
    6aa4:	4358      	muls	r0, r3
}
    6aa6:	3030      	adds	r0, #48	; 0x30
    6aa8:	4770      	bx	lr

00006aaa <boot_status_entries>:
	return fa->fa_id;
    6aaa:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    6aac:	2b02      	cmp	r3, #2
    6aae:	d006      	beq.n	6abe <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    6ab0:	2b05      	cmp	r3, #5
    6ab2:	bf14      	ite	ne
    6ab4:	f04f 30ff 	movne.w	r0, #4294967295
    6ab8:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    6abc:	4770      	bx	lr
    6abe:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    6ac2:	4770      	bx	lr

00006ac4 <boot_status_off>:
{
    6ac4:	b510      	push	{r4, lr}
    6ac6:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    6ac8:	f000 fbc5 	bl	7256 <flash_area_align>
    return flash_area_get_size(fap) - off_from_end;
    6acc:	68a3      	ldr	r3, [r4, #8]
}
    6ace:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return flash_area_get_size(fap) - off_from_end;
    6ad2:	3b30      	subs	r3, #48	; 0x30
}
    6ad4:	fb02 3010 	mls	r0, r2, r0, r3
    6ad8:	bd10      	pop	{r4, pc}

00006ada <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    6ada:	6881      	ldr	r1, [r0, #8]
    6adc:	3918      	subs	r1, #24
    6ade:	f021 0107 	bic.w	r1, r1, #7
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6ae2:	2201      	movs	r2, #1
    6ae4:	3908      	subs	r1, #8
    6ae6:	f000 bf1d 	b.w	7924 <boot_write_trailer_flag>

00006aea <boot_write_swap_size>:
{
    6aea:	b513      	push	{r0, r1, r4, lr}
    6aec:	4604      	mov	r4, r0
    6aee:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    6af0:	f000 fea9 	bl	7846 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    6af4:	2304      	movs	r3, #4
    6af6:	f1a0 0108 	sub.w	r1, r0, #8
    6afa:	eb0d 0203 	add.w	r2, sp, r3
    6afe:	4620      	mov	r0, r4
    6b00:	f000 fee4 	bl	78cc <boot_write_trailer>
}
    6b04:	b002      	add	sp, #8
    6b06:	bd10      	pop	{r4, pc}

00006b08 <boot_read_image_headers>:
{
    6b08:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6b0a:	4613      	mov	r3, r2
{
    6b0c:	460e      	mov	r6, r1
    6b0e:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6b10:	2100      	movs	r1, #0
    6b12:	4602      	mov	r2, r0
{
    6b14:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6b16:	f7fa f905 	bl	d24 <boot_read_image_header>
        if (rc != 0) {
    6b1a:	b950      	cbnz	r0, 6b32 <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6b1c:	462b      	mov	r3, r5
    6b1e:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    6b22:	2101      	movs	r1, #1
    6b24:	4620      	mov	r0, r4
    6b26:	f7fa f8fd 	bl	d24 <boot_read_image_header>
        if (rc != 0) {
    6b2a:	b110      	cbz	r0, 6b32 <boot_read_image_headers+0x2a>
                return 0;
    6b2c:	2e00      	cmp	r6, #0
    6b2e:	bf08      	it	eq
    6b30:	2000      	moveq	r0, #0
}
    6b32:	bd70      	pop	{r4, r5, r6, pc}

00006b34 <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    6b34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6b36:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6b38:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    6b3a:	460d      	mov	r5, r1
    6b3c:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6b3e:	f7ff fedb 	bl	68f8 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    6b42:	4669      	mov	r1, sp
    6b44:	b2c0      	uxtb	r0, r0
    6b46:	f7fa ff7f 	bl	1a48 <flash_area_open>
    if (rc != 0) {
    6b4a:	bb30      	cbnz	r0, 6b9a <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    6b4c:	232c      	movs	r3, #44	; 0x2c
    6b4e:	fb03 4405 	mla	r4, r3, r5, r4
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    6b52:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    6b54:	68e3      	ldr	r3, [r4, #12]
    6b56:	8925      	ldrh	r5, [r4, #8]
    6b58:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    6b5a:	2304      	movs	r3, #4
    6b5c:	eb0d 0203 	add.w	r2, sp, r3
    6b60:	4629      	mov	r1, r5
    6b62:	f000 fb38 	bl	71d6 <flash_area_read>
    6b66:	b9c0      	cbnz	r0, 6b9a <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6b68:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    6b6c:	8964      	ldrh	r4, [r4, #10]
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    6b6e:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6b70:	f646 1308 	movw	r3, #26888	; 0x6908
    6b74:	429a      	cmp	r2, r3
    6b76:	d115      	bne.n	6ba4 <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    6b78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b7c:	429c      	cmp	r4, r3
    6b7e:	d10c      	bne.n	6b9a <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    6b80:	2304      	movs	r3, #4
    6b82:	eb0d 0203 	add.w	r2, sp, r3
    6b86:	1961      	adds	r1, r4, r5
    6b88:	f000 fb25 	bl	71d6 <flash_area_read>
    6b8c:	b928      	cbnz	r0, 6b9a <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    6b8e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6b92:	f646 1307 	movw	r3, #26887	; 0x6907
    6b96:	429a      	cmp	r2, r3
    6b98:	d007      	beq.n	6baa <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    6b9a:	9800      	ldr	r0, [sp, #0]
    6b9c:	f000 fb1a 	bl	71d4 <flash_area_close>
}
    6ba0:	b002      	add	sp, #8
    6ba2:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    6ba4:	2c00      	cmp	r4, #0
    6ba6:	d0f2      	beq.n	6b8e <boot_read_image_size.constprop.0.isra.0+0x5a>
    6ba8:	e7f7      	b.n	6b9a <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    6baa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    6bae:	4421      	add	r1, r4
    6bb0:	4429      	add	r1, r5
    6bb2:	6031      	str	r1, [r6, #0]
    rc = 0;
    6bb4:	e7f1      	b.n	6b9a <boot_read_image_size.constprop.0.isra.0+0x66>

00006bb6 <boot_read_sectors>:
{
    6bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6bb8:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6bba:	6a42      	ldr	r2, [r0, #36]	; 0x24
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6bbc:	2580      	movs	r5, #128	; 0x80
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6bbe:	a901      	add	r1, sp, #4
    6bc0:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6bc2:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6bc4:	f7fa ff68 	bl	1a98 <flash_area_get_sectors>
    if (rc != 0) {
    6bc8:	b958      	cbnz	r0, 6be2 <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    6bca:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6bcc:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    6bce:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6bd0:	a901      	add	r1, sp, #4
    6bd2:	2005      	movs	r0, #5
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6bd4:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6bd6:	f7fa ff5f 	bl	1a98 <flash_area_get_sectors>
    if (rc != 0) {
    6bda:	4605      	mov	r5, r0
    6bdc:	b128      	cbz	r0, 6bea <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    6bde:	2509      	movs	r5, #9
    6be0:	e000      	b.n	6be4 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    6be2:	2501      	movs	r5, #1
}
    6be4:	4628      	mov	r0, r5
    6be6:	b003      	add	sp, #12
    6be8:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    6bea:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    6bec:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    6bee:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    6bf0:	f000 fb31 	bl	7256 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    6bf4:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    6bf6:	e7f5      	b.n	6be4 <boot_read_sectors+0x2e>

00006bf8 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    6bf8:	2301      	movs	r3, #1
    6bfa:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    6bfc:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    6c00:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    6c02:	2300      	movs	r3, #0
    bs->source = 0;
    6c04:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    6c08:	4770      	bx	lr

00006c0a <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    6c0a:	7943      	ldrb	r3, [r0, #5]
    6c0c:	2b01      	cmp	r3, #1
    6c0e:	d107      	bne.n	6c20 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    6c10:	6803      	ldr	r3, [r0, #0]
    6c12:	2b01      	cmp	r3, #1
    6c14:	d104      	bne.n	6c20 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    6c16:	7900      	ldrb	r0, [r0, #4]
    6c18:	1e43      	subs	r3, r0, #1
    6c1a:	4258      	negs	r0, r3
    6c1c:	4158      	adcs	r0, r3
    6c1e:	4770      	bx	lr
    6c20:	2000      	movs	r0, #0
}
    6c22:	4770      	bx	lr

00006c24 <boot_write_status>:
{
    6c24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6c26:	4606      	mov	r6, r0
    6c28:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    6c2a:	2002      	movs	r0, #2
    6c2c:	a901      	add	r1, sp, #4
    6c2e:	f7fa ff0b 	bl	1a48 <flash_area_open>
    if (rc != 0) {
    6c32:	bb38      	cbnz	r0, 6c84 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    6c34:	9801      	ldr	r0, [sp, #4]
    6c36:	f7ff ff45 	bl	6ac4 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    6c3a:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    6c3c:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    6c3e:	4628      	mov	r0, r5
    6c40:	f000 f8e5 	bl	6e0e <boot_status_internal_off>
    off = boot_status_off(fap) +
    6c44:	4404      	add	r4, r0
    align = flash_area_align(fap);
    6c46:	9801      	ldr	r0, [sp, #4]
    6c48:	f000 fb05 	bl	7256 <flash_area_align>
    6c4c:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    6c4e:	9801      	ldr	r0, [sp, #4]
    6c50:	f000 fb08 	bl	7264 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    6c54:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    6c56:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    6c58:	eb0d 0002 	add.w	r0, sp, r2
    6c5c:	f000 fb82 	bl	7364 <memset>
    buf[0] = bs->state;
    6c60:	792b      	ldrb	r3, [r5, #4]
    6c62:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    6c66:	4621      	mov	r1, r4
    6c68:	9801      	ldr	r0, [sp, #4]
    6c6a:	4633      	mov	r3, r6
    6c6c:	aa02      	add	r2, sp, #8
    6c6e:	f000 fac7 	bl	7200 <flash_area_write>
    if (rc != 0) {
    6c72:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    6c74:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    6c76:	bf18      	it	ne
    6c78:	2401      	movne	r4, #1
    flash_area_close(fap);
    6c7a:	f000 faab 	bl	71d4 <flash_area_close>
}
    6c7e:	4620      	mov	r0, r4
    6c80:	b004      	add	sp, #16
    6c82:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    6c84:	2401      	movs	r4, #1
    6c86:	e7fa      	b.n	6c7e <boot_write_status+0x5a>

00006c88 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    6c88:	f000 bacf 	b.w	722a <flash_area_erase>

00006c8c <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    6c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c90:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6c92:	2100      	movs	r1, #0
{
    6c94:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6c96:	4608      	mov	r0, r1
    6c98:	f7ff fe2e 	bl	68f8 <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    6c9c:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6c9e:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    6ca0:	2000      	movs	r0, #0
    6ca2:	f7ff fe29 	bl	68f8 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    6ca6:	7833      	ldrb	r3, [r6, #0]
    6ca8:	429c      	cmp	r4, r3
    6caa:	d021      	beq.n	6cf0 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    6cac:	4298      	cmp	r0, r3
    6cae:	d121      	bne.n	6cf4 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    6cb0:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    6cb2:	232c      	movs	r3, #44	; 0x2c
    6cb4:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6cb8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    6cba:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6cbc:	f7ff fef0 	bl	6aa0 <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    6cc0:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6cc2:	4607      	mov	r7, r0
    total_sz = 0;
    6cc4:	f04f 0800 	mov.w	r8, #0
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    6cc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6cca:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    6cce:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    6cd2:	f8d2 9004 	ldr.w	r9, [r2, #4]
    6cd6:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    6cd8:	464a      	mov	r2, r9
    6cda:	1ac9      	subs	r1, r1, r3
    6cdc:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    6cde:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    6ce0:	f7ff ffd2 	bl	6c88 <boot_erase_region>
    } while (total_sz < trailer_sz);
    6ce4:	45b8      	cmp	r8, r7
        sector--;
    6ce6:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    6cea:	d3ed      	bcc.n	6cc8 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    6cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    6cf0:	2500      	movs	r5, #0
    6cf2:	e7de      	b.n	6cb2 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    6cf4:	2001      	movs	r0, #1
    6cf6:	e7f9      	b.n	6cec <swap_erase_trailer_sectors+0x60>

00006cf8 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    6cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6cfa:	4615      	mov	r5, r2
    6cfc:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6cfe:	2005      	movs	r0, #5
    6d00:	4669      	mov	r1, sp
    6d02:	f000 fe26 	bl	7952 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    6d06:	79e9      	ldrb	r1, [r5, #7]
    6d08:	2901      	cmp	r1, #1
    6d0a:	d003      	beq.n	6d14 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    6d0c:	2200      	movs	r2, #0
    6d0e:	4620      	mov	r0, r4
    6d10:	f000 fe33 	bl	797a <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    6d14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6d18:	2b01      	cmp	r3, #1
    6d1a:	d102      	bne.n	6d22 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    6d1c:	4620      	mov	r0, r4
    6d1e:	f000 fe0b 	bl	7938 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    6d22:	68a9      	ldr	r1, [r5, #8]
    6d24:	4620      	mov	r0, r4
    6d26:	f7ff fee0 	bl	6aea <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    6d2a:	4620      	mov	r0, r4
    6d2c:	f7fc fedc 	bl	3ae8 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    6d30:	2000      	movs	r0, #0
    6d32:	b003      	add	sp, #12
    6d34:	bd30      	pop	{r4, r5, pc}

00006d36 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    6d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6d38:	460d      	mov	r5, r1
    6d3a:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    6d3c:	f7fa f8da 	bl	ef4 <swap_status_source>
    6d40:	4604      	mov	r4, r0
    6d42:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    6d44:	b350      	cbz	r0, 6d9c <swap_read_status+0x66>
    6d46:	2802      	cmp	r0, #2
    6d48:	d12d      	bne.n	6da6 <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    6d4a:	a901      	add	r1, sp, #4
    6d4c:	f7fa fe7c 	bl	1a48 <flash_area_open>
    if (rc != 0) {
    6d50:	bb58      	cbnz	r0, 6daa <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    6d52:	9801      	ldr	r0, [sp, #4]
    6d54:	462a      	mov	r2, r5
    6d56:	4631      	mov	r1, r6
    6d58:	f7fa f832 	bl	dc0 <swap_read_status_bytes>
    if (rc == 0) {
    6d5c:	4604      	mov	r4, r0
    6d5e:	b9d0      	cbnz	r0, 6d96 <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    6d60:	9801      	ldr	r0, [sp, #4]
    6d62:	f000 fd70 	bl	7846 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    6d66:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    6d68:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    6d6a:	f10d 0203 	add.w	r2, sp, #3
    6d6e:	9801      	ldr	r0, [sp, #4]
    6d70:	f000 fa31 	bl	71d6 <flash_area_read>
        if (rc != 0) {
    6d74:	4604      	mov	r4, r0
    6d76:	b9a0      	cbnz	r0, 6da2 <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    6d78:	9801      	ldr	r0, [sp, #4]
    6d7a:	2201      	movs	r2, #1
    6d7c:	f10d 0103 	add.w	r1, sp, #3
    6d80:	f000 fd75 	bl	786e <bootutil_buffer_is_erased>
    6d84:	b110      	cbz	r0, 6d8c <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    6d86:	2301      	movs	r3, #1
    6d88:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6d8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6d90:	f003 030f 	and.w	r3, r3, #15
    6d94:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    6d96:	9801      	ldr	r0, [sp, #4]
    6d98:	f000 fa1c 	bl	71d4 <flash_area_close>

    return rc;
}
    6d9c:	4620      	mov	r0, r4
    6d9e:	b002      	add	sp, #8
    6da0:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    6da2:	2401      	movs	r4, #1
    6da4:	e7f7      	b.n	6d96 <swap_read_status+0x60>
    switch (bs->source) {
    6da6:	2407      	movs	r4, #7
    6da8:	e7f8      	b.n	6d9c <swap_read_status+0x66>
        return BOOT_EFLASH;
    6daa:	2401      	movs	r4, #1
    6dac:	e7f6      	b.n	6d9c <swap_read_status+0x66>

00006dae <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    6dae:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6db0:	2002      	movs	r0, #2
    6db2:	a901      	add	r1, sp, #4
    6db4:	f7fa fe48 	bl	1a48 <flash_area_open>
            &fap);
    if (rc != 0) {
    6db8:	b948      	cbnz	r0, 6dce <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    6dba:	9801      	ldr	r0, [sp, #4]
    6dbc:	f7ff fe8d 	bl	6ada <boot_write_copy_done>
    6dc0:	4604      	mov	r4, r0
    flash_area_close(fap);
    6dc2:	9801      	ldr	r0, [sp, #4]
    6dc4:	f000 fa06 	bl	71d4 <flash_area_close>
    return rc;
}
    6dc8:	4620      	mov	r0, r4
    6dca:	b002      	add	sp, #8
    6dcc:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6dce:	2401      	movs	r4, #1
    6dd0:	e7fa      	b.n	6dc8 <swap_set_copy_done+0x1a>

00006dd2 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    6dd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6dd4:	2002      	movs	r0, #2
    6dd6:	a901      	add	r1, sp, #4
    6dd8:	f7fa fe36 	bl	1a48 <flash_area_open>
            &fap);
    if (rc != 0) {
    6ddc:	b9a8      	cbnz	r0, 6e0a <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    6dde:	9801      	ldr	r0, [sp, #4]
    6de0:	a902      	add	r1, sp, #8
    6de2:	f7fc fea1 	bl	3b28 <boot_read_swap_state>
    if (rc != 0) {
    6de6:	4604      	mov	r4, r0
    6de8:	b968      	cbnz	r0, 6e06 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    6dea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6dee:	2b03      	cmp	r3, #3
    6df0:	d103      	bne.n	6dfa <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    6df2:	9801      	ldr	r0, [sp, #4]
    6df4:	f000 fda0 	bl	7938 <boot_write_image_ok>
    6df8:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    6dfa:	9801      	ldr	r0, [sp, #4]
    6dfc:	f000 f9ea 	bl	71d4 <flash_area_close>
    return rc;
}
    6e00:	4620      	mov	r0, r4
    6e02:	b004      	add	sp, #16
    6e04:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    6e06:	2401      	movs	r4, #1
    6e08:	e7f7      	b.n	6dfa <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    6e0a:	2401      	movs	r4, #1
    6e0c:	e7f8      	b.n	6e00 <swap_set_image_ok+0x2e>

00006e0e <boot_status_internal_off>:
{
    6e0e:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    6e10:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6e12:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    6e14:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    6e16:	bf14      	ite	ne
    6e18:	01cb      	lslne	r3, r1, #7
    6e1a:	2300      	moveq	r3, #0
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6e1c:	f102 32ff 	add.w	r2, r2, #4294967295
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6e20:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6e24:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6e26:	bf14      	ite	ne
    6e28:	004c      	lslne	r4, r1, #1
    6e2a:	460c      	moveq	r4, r1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6e2c:	3a01      	subs	r2, #1
}
    6e2e:	fb04 3002 	mla	r0, r4, r2, r3
    6e32:	bd10      	pop	{r4, pc}

00006e34 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    6e34:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6e36:	6803      	ldr	r3, [r0, #0]
    6e38:	1acd      	subs	r5, r1, r3
    6e3a:	2d00      	cmp	r5, #0
    6e3c:	dc02      	bgt.n	6e44 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6e3e:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    6e42:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    6e44:	f993 6000 	ldrsb.w	r6, [r3]
    6e48:	781c      	ldrb	r4, [r3, #0]
    6e4a:	2e00      	cmp	r6, #0
    6e4c:	db0a      	blt.n	6e64 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    6e4e:	1c5c      	adds	r4, r3, #1
    6e50:	6004      	str	r4, [r0, #0]
    6e52:	781b      	ldrb	r3, [r3, #0]
    6e54:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    6e56:	6803      	ldr	r3, [r0, #0]
    6e58:	1ac9      	subs	r1, r1, r3
    6e5a:	6813      	ldr	r3, [r2, #0]
    6e5c:	428b      	cmp	r3, r1
    6e5e:	d8ee      	bhi.n	6e3e <mbedtls_asn1_get_len+0xa>
    return( 0 );
    6e60:	2000      	movs	r0, #0
    6e62:	e7ee      	b.n	6e42 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    6e64:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6e68:	3c01      	subs	r4, #1
    6e6a:	2c03      	cmp	r4, #3
    6e6c:	d82b      	bhi.n	6ec6 <mbedtls_asn1_get_len+0x92>
    6e6e:	e8df f004 	tbb	[pc, r4]
    6e72:	0a02      	.short	0x0a02
    6e74:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
    6e76:	2d01      	cmp	r5, #1
    6e78:	d0e1      	beq.n	6e3e <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    6e7a:	785b      	ldrb	r3, [r3, #1]
    6e7c:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    6e7e:	6803      	ldr	r3, [r0, #0]
    6e80:	3302      	adds	r3, #2
            (*p) += 5;
    6e82:	6003      	str	r3, [r0, #0]
            break;
    6e84:	e7e7      	b.n	6e56 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    6e86:	2d02      	cmp	r5, #2
    6e88:	ddd9      	ble.n	6e3e <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6e8a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    6e8e:	ba5b      	rev16	r3, r3
    6e90:	b29b      	uxth	r3, r3
    6e92:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    6e94:	6803      	ldr	r3, [r0, #0]
    6e96:	3303      	adds	r3, #3
    6e98:	e7f3      	b.n	6e82 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    6e9a:	2d03      	cmp	r5, #3
    6e9c:	ddcf      	ble.n	6e3e <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6e9e:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6ea0:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6ea2:	78db      	ldrb	r3, [r3, #3]
    6ea4:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    6ea6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6eaa:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    6eac:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    6eae:	6803      	ldr	r3, [r0, #0]
    6eb0:	3304      	adds	r3, #4
    6eb2:	e7e6      	b.n	6e82 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    6eb4:	2d04      	cmp	r5, #4
    6eb6:	ddc2      	ble.n	6e3e <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6eb8:	f8d3 3001 	ldr.w	r3, [r3, #1]
    6ebc:	ba1b      	rev	r3, r3
    6ebe:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    6ec0:	6803      	ldr	r3, [r0, #0]
    6ec2:	3305      	adds	r3, #5
    6ec4:	e7dd      	b.n	6e82 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    6ec6:	f06f 0063 	mvn.w	r0, #99	; 0x63
    6eca:	e7ba      	b.n	6e42 <mbedtls_asn1_get_len+0xe>

00006ecc <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6ecc:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    6ece:	6804      	ldr	r4, [r0, #0]
    6ed0:	1b0e      	subs	r6, r1, r4
    6ed2:	2e00      	cmp	r6, #0
    6ed4:	dd07      	ble.n	6ee6 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6ed6:	7826      	ldrb	r6, [r4, #0]
    6ed8:	429e      	cmp	r6, r3
    6eda:	d108      	bne.n	6eee <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6edc:	3401      	adds	r4, #1
    6ede:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6ee0:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    6ee2:	f7ff bfa7 	b.w	6e34 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6ee6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    6eea:	bc70      	pop	{r4, r5, r6}
    6eec:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6eee:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6ef2:	e7fa      	b.n	6eea <mbedtls_asn1_get_tag+0x1e>

00006ef4 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    6ef4:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    6ef6:	2303      	movs	r3, #3
{
    6ef8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    6efa:	f7ff ffe7 	bl	6ecc <mbedtls_asn1_get_tag>
    6efe:	b918      	cbnz	r0, 6f08 <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    6f00:	6813      	ldr	r3, [r2, #0]
    6f02:	b913      	cbnz	r3, 6f0a <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    6f04:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    6f08:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    6f0a:	3b01      	subs	r3, #1
    6f0c:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    6f0e:	6823      	ldr	r3, [r4, #0]
    6f10:	781a      	ldrb	r2, [r3, #0]
    6f12:	2a00      	cmp	r2, #0
    6f14:	d1f6      	bne.n	6f04 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    6f16:	3301      	adds	r3, #1
    6f18:	6023      	str	r3, [r4, #0]
    return( 0 );
    6f1a:	e7f5      	b.n	6f08 <mbedtls_asn1_get_bitstring_null+0x14>

00006f1c <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    6f1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6f20:	4690      	mov	r8, r2
    6f22:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    6f24:	aa01      	add	r2, sp, #4
    6f26:	2330      	movs	r3, #48	; 0x30
{
    6f28:	4605      	mov	r5, r0
    6f2a:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    6f2c:	f7ff ffce 	bl	6ecc <mbedtls_asn1_get_tag>
    6f30:	4604      	mov	r4, r0
    6f32:	b9f0      	cbnz	r0, 6f72 <mbedtls_asn1_get_alg+0x56>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    6f34:	682b      	ldr	r3, [r5, #0]
    6f36:	1af6      	subs	r6, r6, r3
    6f38:	2e00      	cmp	r6, #0
    6f3a:	dd34      	ble.n	6fa6 <mbedtls_asn1_get_alg+0x8a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    6f3c:	4642      	mov	r2, r8
    6f3e:	781b      	ldrb	r3, [r3, #0]
    6f40:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
    6f44:	9b01      	ldr	r3, [sp, #4]
    6f46:	682e      	ldr	r6, [r5, #0]
    6f48:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    6f4a:	4631      	mov	r1, r6
    6f4c:	2306      	movs	r3, #6
    6f4e:	4628      	mov	r0, r5
    6f50:	f7ff ffbc 	bl	6ecc <mbedtls_asn1_get_tag>
    6f54:	4604      	mov	r4, r0
    6f56:	b960      	cbnz	r0, 6f72 <mbedtls_asn1_get_alg+0x56>
        return( ret );

    alg->p = *p;
    6f58:	682b      	ldr	r3, [r5, #0]
    *p += alg->len;
    6f5a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
    6f5e:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
    6f62:	1899      	adds	r1, r3, r2

    if( *p == end )
    6f64:	42b1      	cmp	r1, r6
    *p += alg->len;
    6f66:	6029      	str	r1, [r5, #0]
    if( *p == end )
    6f68:	d107      	bne.n	6f7a <mbedtls_asn1_get_alg+0x5e>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    6f6a:	210c      	movs	r1, #12
    6f6c:	4638      	mov	r0, r7
    6f6e:	f7fe f953 	bl	5218 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    6f72:	4620      	mov	r0, r4
    6f74:	b002      	add	sp, #8
    6f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    params->tag = **p;
    6f7a:	5c9b      	ldrb	r3, [r3, r2]
    6f7c:	463a      	mov	r2, r7
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    6f7e:	4631      	mov	r1, r6
    params->tag = **p;
    6f80:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
    6f84:	682b      	ldr	r3, [r5, #0]
    6f86:	3301      	adds	r3, #1
    6f88:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    6f8a:	4628      	mov	r0, r5
    6f8c:	f7ff ff52 	bl	6e34 <mbedtls_asn1_get_len>
    6f90:	b960      	cbnz	r0, 6fac <mbedtls_asn1_get_alg+0x90>
    params->p = *p;
    6f92:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    6f94:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    6f96:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    6f98:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    6f9a:	42b3      	cmp	r3, r6
    *p += params->len;
    6f9c:	602b      	str	r3, [r5, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    6f9e:	bf18      	it	ne
    6fa0:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    6fa4:	e7e5      	b.n	6f72 <mbedtls_asn1_get_alg+0x56>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6fa6:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    6faa:	e7e2      	b.n	6f72 <mbedtls_asn1_get_alg+0x56>
    6fac:	4604      	mov	r4, r0
    6fae:	e7e0      	b.n	6f72 <mbedtls_asn1_get_alg+0x56>

00006fb0 <cc310_sha256_update>:
{
    6fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    6fb2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    6fb6:	af00      	add	r7, sp, #0
    6fb8:	4605      	mov	r5, r0
    6fba:	4614      	mov	r4, r2
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    6fbc:	d210      	bcs.n	6fe0 <cc310_sha256_update+0x30>
        uint8_t stack_buffer[data_len];
    6fbe:	1dd3      	adds	r3, r2, #7
    6fc0:	f023 0307 	bic.w	r3, r3, #7
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    6fc4:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    6fc6:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    6fca:	4668      	mov	r0, sp
    6fcc:	f000 f9bf 	bl	734e <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    6fd0:	4669      	mov	r1, sp
    6fd2:	4622      	mov	r2, r4
    6fd4:	4628      	mov	r0, r5
    6fd6:	f7fe fbe9 	bl	57ac <nrf_cc310_bl_hash_sha256_update>
    6fda:	46b5      	mov	sp, r6
};
    6fdc:	46bd      	mov	sp, r7
    6fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    6fe0:	f7fe fbe4 	bl	57ac <nrf_cc310_bl_hash_sha256_update>
};
    6fe4:	e7fa      	b.n	6fdc <cc310_sha256_update+0x2c>

00006fe6 <arch_printk_char_out>:
}
    6fe6:	2000      	movs	r0, #0
    6fe8:	4770      	bx	lr

00006fea <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6fea:	b40f      	push	{r0, r1, r2, r3}
    6fec:	b507      	push	{r0, r1, r2, lr}
    6fee:	a904      	add	r1, sp, #16
    6ff0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6ff4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6ff6:	f7fa f9d5 	bl	13a4 <vprintk>

	va_end(ap);
}
    6ffa:	b003      	add	sp, #12
    6ffc:	f85d eb04 	ldr.w	lr, [sp], #4
    7000:	b004      	add	sp, #16
    7002:	4770      	bx	lr

00007004 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7004:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7006:	f013 0307 	ands.w	r3, r3, #7
    700a:	d105      	bne.n	7018 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    700c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    700e:	2b00      	cmp	r3, #0
    7010:	bf0c      	ite	eq
    7012:	2000      	moveq	r0, #0
    7014:	2003      	movne	r0, #3
    7016:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7018:	2b02      	cmp	r3, #2
    701a:	d105      	bne.n	7028 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    701c:	8b40      	ldrh	r0, [r0, #26]
    701e:	fab0 f080 	clz	r0, r0
    7022:	0940      	lsrs	r0, r0, #5
    7024:	0080      	lsls	r0, r0, #2
    7026:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7028:	2b01      	cmp	r3, #1
    702a:	d105      	bne.n	7038 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    702c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    702e:	2b00      	cmp	r3, #0
    7030:	bf0c      	ite	eq
    7032:	2000      	moveq	r0, #0
    7034:	2005      	movne	r0, #5
    7036:	4770      	bx	lr
	int evt = EVT_NOP;
    7038:	2000      	movs	r0, #0
}
    703a:	4770      	bx	lr

0000703c <validate_args>:
{
    703c:	b510      	push	{r4, lr}
    703e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7040:	b100      	cbz	r0, 7044 <validate_args+0x8>
    7042:	b911      	cbnz	r1, 704a <validate_args+0xe>
		return -EINVAL;
    7044:	f06f 0015 	mvn.w	r0, #21
}
    7048:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    704a:	1d08      	adds	r0, r1, #4
    704c:	f000 f896 	bl	717c <sys_notify_validate>
	if ((rv == 0)
    7050:	2800      	cmp	r0, #0
    7052:	d1f9      	bne.n	7048 <validate_args+0xc>
	    && ((cli->notify.flags
    7054:	68a3      	ldr	r3, [r4, #8]
    7056:	2b03      	cmp	r3, #3
    7058:	d9f6      	bls.n	7048 <validate_args+0xc>
    705a:	e7f3      	b.n	7044 <validate_args+0x8>

0000705c <notify_one>:
{
    705c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7060:	460d      	mov	r5, r1
    7062:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7064:	4619      	mov	r1, r3
    7066:	1d28      	adds	r0, r5, #4
{
    7068:	4690      	mov	r8, r2
    706a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    706c:	f000 f897 	bl	719e <sys_notify_finalize>
	if (cb) {
    7070:	4604      	mov	r4, r0
    7072:	b138      	cbz	r0, 7084 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7074:	4633      	mov	r3, r6
    7076:	4642      	mov	r2, r8
    7078:	4629      	mov	r1, r5
    707a:	4638      	mov	r0, r7
    707c:	46a4      	mov	ip, r4
}
    707e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7082:	4760      	bx	ip
}
    7084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007088 <transition_complete>:
{
    7088:	b410      	push	{r4}
    708a:	f04f 0420 	mov.w	r4, #32
    708e:	f3ef 8211 	mrs	r2, BASEPRI
    7092:	f384 8812 	msr	BASEPRI_MAX, r4
    7096:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    709a:	6141      	str	r1, [r0, #20]
}
    709c:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    70a0:	2101      	movs	r1, #1
    70a2:	f7fa b98d 	b.w	13c0 <process_event>

000070a6 <onoff_manager_init>:
{
    70a6:	b538      	push	{r3, r4, r5, lr}
    70a8:	460c      	mov	r4, r1
	if ((mgr == NULL)
    70aa:	4605      	mov	r5, r0
    70ac:	b158      	cbz	r0, 70c6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    70ae:	b151      	cbz	r1, 70c6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    70b0:	680b      	ldr	r3, [r1, #0]
    70b2:	b143      	cbz	r3, 70c6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    70b4:	684b      	ldr	r3, [r1, #4]
    70b6:	b133      	cbz	r3, 70c6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    70b8:	221c      	movs	r2, #28
    70ba:	2100      	movs	r1, #0
    70bc:	f000 f952 	bl	7364 <memset>
    70c0:	612c      	str	r4, [r5, #16]
	return 0;
    70c2:	2000      	movs	r0, #0
}
    70c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    70c6:	f06f 0015 	mvn.w	r0, #21
    70ca:	e7fb      	b.n	70c4 <onoff_manager_init+0x1e>

000070cc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    70cc:	b570      	push	{r4, r5, r6, lr}
    70ce:	4605      	mov	r5, r0
    70d0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    70d2:	f7ff ffb3 	bl	703c <validate_args>

	if (rv < 0) {
    70d6:	1e04      	subs	r4, r0, #0
    70d8:	db15      	blt.n	7106 <onoff_request+0x3a>
    70da:	f04f 0320 	mov.w	r3, #32
    70de:	f3ef 8211 	mrs	r2, BASEPRI
    70e2:	f383 8812 	msr	BASEPRI_MAX, r3
    70e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    70ea:	8b6b      	ldrh	r3, [r5, #26]
    70ec:	8b2c      	ldrh	r4, [r5, #24]
    70ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70f2:	428b      	cmp	r3, r1
    70f4:	f004 0407 	and.w	r4, r4, #7
    70f8:	d107      	bne.n	710a <onoff_request+0x3e>
	__asm__ volatile(
    70fa:	f382 8811 	msr	BASEPRI, r2
    70fe:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    7102:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7106:	4620      	mov	r0, r4
    7108:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    710a:	2c02      	cmp	r4, #2
    710c:	d10c      	bne.n	7128 <onoff_request+0x5c>
		mgr->refs += 1U;
    710e:	3301      	adds	r3, #1
    7110:	836b      	strh	r3, [r5, #26]
    7112:	f382 8811 	msr	BASEPRI, r2
    7116:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    711a:	2300      	movs	r3, #0
    711c:	4622      	mov	r2, r4
    711e:	4631      	mov	r1, r6
    7120:	4628      	mov	r0, r5
    7122:	f7ff ff9b 	bl	705c <notify_one>
    7126:	e7ee      	b.n	7106 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    7128:	2c06      	cmp	r4, #6
    712a:	d814      	bhi.n	7156 <onoff_request+0x8a>
    712c:	e8df f004 	tbb	[pc, r4]
    7130:	13131304 	.word	0x13131304
    7134:	1a04      	.short	0x1a04
    7136:	04          	.byte	0x04
    7137:	00          	.byte	0x00
	parent->next = child;
    7138:	2300      	movs	r3, #0
    713a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    713c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    713e:	b93b      	cbnz	r3, 7150 <onoff_request+0x84>
	list->head = node;
    7140:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    7144:	b9ac      	cbnz	r4, 7172 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    7146:	2102      	movs	r1, #2
    7148:	4628      	mov	r0, r5
    714a:	f7fa f939 	bl	13c0 <process_event>
    714e:	e7da      	b.n	7106 <onoff_request+0x3a>
	parent->next = child;
    7150:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7152:	606e      	str	r6, [r5, #4]
}
    7154:	e7f6      	b.n	7144 <onoff_request+0x78>
    7156:	f382 8811 	msr	BASEPRI, r2
    715a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    715e:	f06f 0404 	mvn.w	r4, #4
    7162:	e7d0      	b.n	7106 <onoff_request+0x3a>
    7164:	f382 8811 	msr	BASEPRI, r2
    7168:	f3bf 8f6f 	isb	sy
    716c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7170:	e7c9      	b.n	7106 <onoff_request+0x3a>
    7172:	f382 8811 	msr	BASEPRI, r2
    7176:	f3bf 8f6f 	isb	sy
		if (notify) {
    717a:	e7c4      	b.n	7106 <onoff_request+0x3a>

0000717c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    717c:	4603      	mov	r3, r0
    717e:	b158      	cbz	r0, 7198 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7180:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7182:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7186:	2a01      	cmp	r2, #1
    7188:	d003      	beq.n	7192 <sys_notify_validate+0x16>
    718a:	2a03      	cmp	r2, #3
    718c:	d104      	bne.n	7198 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    718e:	6802      	ldr	r2, [r0, #0]
    7190:	b112      	cbz	r2, 7198 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    7192:	2000      	movs	r0, #0
    7194:	6098      	str	r0, [r3, #8]
    7196:	4770      	bx	lr
    7198:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    719c:	4770      	bx	lr

0000719e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    719e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    71a0:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    71a2:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    71a6:	2a03      	cmp	r2, #3
    71a8:	f04f 0200 	mov.w	r2, #0
{
    71ac:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    71ae:	bf0c      	ite	eq
    71b0:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    71b2:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    71b4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    71b6:	4770      	bx	lr

000071b8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    71b8:	4770      	bx	lr

000071ba <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    71ba:	b40f      	push	{r0, r1, r2, r3}
    71bc:	b507      	push	{r0, r1, r2, lr}
    71be:	a904      	add	r1, sp, #16
    71c0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    71c4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    71c6:	f7fa f8ed 	bl	13a4 <vprintk>
	va_end(ap);
}
    71ca:	b003      	add	sp, #12
    71cc:	f85d eb04 	ldr.w	lr, [sp], #4
    71d0:	b004      	add	sp, #16
    71d2:	4770      	bx	lr

000071d4 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    71d4:	4770      	bx	lr

000071d6 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    71d6:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    71d8:	b430      	push	{r4, r5}
    71da:	4604      	mov	r4, r0
    71dc:	4618      	mov	r0, r3
    71de:	db0b      	blt.n	71f8 <flash_area_read+0x22>
    71e0:	68a5      	ldr	r5, [r4, #8]
    71e2:	4408      	add	r0, r1
    71e4:	42a8      	cmp	r0, r5
    71e6:	d807      	bhi.n	71f8 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    71e8:	68e0      	ldr	r0, [r4, #12]
    71ea:	6864      	ldr	r4, [r4, #4]
    71ec:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    71ee:	6884      	ldr	r4, [r0, #8]
    71f0:	6824      	ldr	r4, [r4, #0]
    71f2:	46a4      	mov	ip, r4
}
    71f4:	bc30      	pop	{r4, r5}
    71f6:	4760      	bx	ip
    71f8:	f06f 0015 	mvn.w	r0, #21
    71fc:	bc30      	pop	{r4, r5}
    71fe:	4770      	bx	lr

00007200 <flash_area_write>:
    7200:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    7202:	b430      	push	{r4, r5}
    7204:	4604      	mov	r4, r0
    7206:	4618      	mov	r0, r3
    7208:	db0b      	blt.n	7222 <flash_area_write+0x22>
    720a:	68a5      	ldr	r5, [r4, #8]
    720c:	4408      	add	r0, r1
    720e:	42a8      	cmp	r0, r5
    7210:	d807      	bhi.n	7222 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    7212:	68e0      	ldr	r0, [r4, #12]
    7214:	6864      	ldr	r4, [r4, #4]
    7216:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    7218:	6884      	ldr	r4, [r0, #8]
    721a:	6864      	ldr	r4, [r4, #4]
    721c:	46a4      	mov	ip, r4
}
    721e:	bc30      	pop	{r4, r5}
    7220:	4760      	bx	ip
    7222:	f06f 0015 	mvn.w	r0, #21
    7226:	bc30      	pop	{r4, r5}
    7228:	4770      	bx	lr

0000722a <flash_area_erase>:
    722a:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    722c:	4603      	mov	r3, r0
    722e:	b410      	push	{r4}
    7230:	4610      	mov	r0, r2
    7232:	db0b      	blt.n	724c <flash_area_erase+0x22>
    7234:	689c      	ldr	r4, [r3, #8]
    7236:	4408      	add	r0, r1
    7238:	42a0      	cmp	r0, r4
    723a:	d807      	bhi.n	724c <flash_area_erase+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    723c:	68d8      	ldr	r0, [r3, #12]
    723e:	685b      	ldr	r3, [r3, #4]
    7240:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    7242:	6883      	ldr	r3, [r0, #8]
}
    7244:	f85d 4b04 	ldr.w	r4, [sp], #4
    7248:	689b      	ldr	r3, [r3, #8]
    724a:	4718      	bx	r3
    724c:	f06f 0015 	mvn.w	r0, #21
    7250:	f85d 4b04 	ldr.w	r4, [sp], #4
    7254:	4770      	bx	lr

00007256 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    7256:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    7258:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    725a:	6883      	ldr	r3, [r0, #8]
    725c:	68db      	ldr	r3, [r3, #12]
    725e:	4798      	blx	r3
}
    7260:	6800      	ldr	r0, [r0, #0]
    7262:	bd08      	pop	{r3, pc}

00007264 <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    7264:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    7266:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    7268:	6883      	ldr	r3, [r0, #8]
    726a:	68db      	ldr	r3, [r3, #12]
    726c:	4798      	blx	r3

	return param->erase_value;
}
    726e:	7900      	ldrb	r0, [r0, #4]
    7270:	bd08      	pop	{r3, pc}

00007272 <get_sectors_cb>:
{
    7272:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    7274:	684c      	ldr	r4, [r1, #4]
    7276:	6803      	ldr	r3, [r0, #0]
    7278:	42a3      	cmp	r3, r4
    727a:	d201      	bcs.n	7280 <get_sectors_cb+0xe>
		*bail_value = true;
    727c:	2001      	movs	r0, #1
}
    727e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    7280:	688a      	ldr	r2, [r1, #8]
    7282:	4422      	add	r2, r4
    7284:	4293      	cmp	r3, r2
    7286:	d301      	bcc.n	728c <get_sectors_cb+0x1a>
		*bail_value = false;
    7288:	2000      	movs	r0, #0
    728a:	e7f8      	b.n	727e <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    728c:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    7290:	694e      	ldr	r6, [r1, #20]
    7292:	42b5      	cmp	r5, r6
    7294:	d303      	bcc.n	729e <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    7296:	f06f 030b 	mvn.w	r3, #11
    729a:	618b      	str	r3, [r1, #24]
		return true;
    729c:	e7f4      	b.n	7288 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    729e:	1b1b      	subs	r3, r3, r4
    72a0:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    72a4:	6843      	ldr	r3, [r0, #4]
    72a6:	6908      	ldr	r0, [r1, #16]
    72a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    72ac:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    72ae:	690b      	ldr	r3, [r1, #16]
    72b0:	3301      	adds	r3, #1
    72b2:	610b      	str	r3, [r1, #16]
	return true;
    72b4:	e7e2      	b.n	727c <get_sectors_cb+0xa>

000072b6 <abort_function>:
{
    72b6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    72b8:	2000      	movs	r0, #0
    72ba:	f7fa fbaf 	bl	1a1c <sys_reboot>

000072be <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    72be:	4770      	bx	lr

000072c0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    72c0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    72c2:	6800      	ldr	r0, [r0, #0]
    72c4:	f7fa bc3e 	b.w	1b44 <z_arm_fatal_error>

000072c8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    72c8:	2100      	movs	r1, #0
    72ca:	2001      	movs	r0, #1
    72cc:	f7fa bc3a 	b.w	1b44 <z_arm_fatal_error>

000072d0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    72d0:	b508      	push	{r3, lr}
	handler();
    72d2:	f7fa fcad 	bl	1c30 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    72d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    72da:	f7fa bd2f 	b.w	1d3c <z_arm_exc_exit>

000072de <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    72de:	3901      	subs	r1, #1
    72e0:	4603      	mov	r3, r0
    72e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    72e6:	b90a      	cbnz	r2, 72ec <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    72e8:	701a      	strb	r2, [r3, #0]

	return dest;
}
    72ea:	4770      	bx	lr
		*d = *s;
    72ec:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    72f0:	e7f7      	b.n	72e2 <strcpy+0x4>

000072f2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    72f2:	4603      	mov	r3, r0
	size_t n = 0;
    72f4:	2000      	movs	r0, #0

	while (*s != '\0') {
    72f6:	5c1a      	ldrb	r2, [r3, r0]
    72f8:	b902      	cbnz	r2, 72fc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    72fa:	4770      	bx	lr
		n++;
    72fc:	3001      	adds	r0, #1
    72fe:	e7fa      	b.n	72f6 <strlen+0x4>

00007300 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    7300:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    7302:	b15a      	cbz	r2, 731c <memcmp+0x1c>
    7304:	3901      	subs	r1, #1
    7306:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    7308:	f810 2b01 	ldrb.w	r2, [r0], #1
    730c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    7310:	42a0      	cmp	r0, r4
    7312:	d001      	beq.n	7318 <memcmp+0x18>
    7314:	429a      	cmp	r2, r3
    7316:	d0f7      	beq.n	7308 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    7318:	1ad0      	subs	r0, r2, r3
}
    731a:	bd10      	pop	{r4, pc}
		return 0;
    731c:	4610      	mov	r0, r2
    731e:	e7fc      	b.n	731a <memcmp+0x1a>

00007320 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    7320:	1a43      	subs	r3, r0, r1
    7322:	4293      	cmp	r3, r2
{
    7324:	b510      	push	{r4, lr}
    7326:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    732a:	d308      	bcc.n	733e <memmove+0x1e>
    732c:	3901      	subs	r1, #1
	char *dest = d;
    732e:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    7330:	429a      	cmp	r2, r3
    7332:	d00b      	beq.n	734c <memmove+0x2c>
			*dest = *src;
    7334:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7338:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    733c:	e7f8      	b.n	7330 <memmove+0x10>
    733e:	440a      	add	r2, r1
			dest[n] = src[n];
    7340:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    7344:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    7348:	428a      	cmp	r2, r1
    734a:	d1f9      	bne.n	7340 <memmove+0x20>
		}
	}

	return d;
}
    734c:	bd10      	pop	{r4, pc}

0000734e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    734e:	b510      	push	{r4, lr}
    7350:	1e43      	subs	r3, r0, #1
    7352:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7354:	4291      	cmp	r1, r2
    7356:	d100      	bne.n	735a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7358:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    735a:	f811 4b01 	ldrb.w	r4, [r1], #1
    735e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7362:	e7f7      	b.n	7354 <memcpy+0x6>

00007364 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7364:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7366:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    7368:	4603      	mov	r3, r0
	while (n > 0) {
    736a:	4293      	cmp	r3, r2
    736c:	d100      	bne.n	7370 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    736e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7370:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7374:	e7f9      	b.n	736a <memset+0x6>

00007376 <_stdout_hook_default>:
}
    7376:	f04f 30ff 	mov.w	r0, #4294967295
    737a:	4770      	bx	lr

0000737c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    737c:	6903      	ldr	r3, [r0, #16]
    737e:	b2c9      	uxtb	r1, r1
    7380:	220c      	movs	r2, #12
    7382:	fb01 3302 	mla	r3, r1, r2, r3
    7386:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    7388:	f000 0007 	and.w	r0, r0, #7
    738c:	4770      	bx	lr

0000738e <set_on_state>:
	__asm__ volatile(
    738e:	f04f 0320 	mov.w	r3, #32
    7392:	f3ef 8211 	mrs	r2, BASEPRI
    7396:	f383 8812 	msr	BASEPRI_MAX, r3
    739a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    739e:	6803      	ldr	r3, [r0, #0]
    73a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    73a4:	f043 0302 	orr.w	r3, r3, #2
    73a8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    73aa:	f382 8811 	msr	BASEPRI, r2
    73ae:	f3bf 8f6f 	isb	sy
}
    73b2:	4770      	bx	lr

000073b4 <stop>:
{
    73b4:	b570      	push	{r4, r5, r6, lr}
    73b6:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    73b8:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    73ba:	f04f 0420 	mov.w	r4, #32
    73be:	f3ef 8511 	mrs	r5, BASEPRI
    73c2:	f384 8812 	msr	BASEPRI_MAX, r4
    73c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    73ca:	260c      	movs	r6, #12
    73cc:	fb06 3401 	mla	r4, r6, r1, r3
    73d0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    73d2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    73d6:	d008      	beq.n	73ea <stop+0x36>
    73d8:	42a2      	cmp	r2, r4
    73da:	d006      	beq.n	73ea <stop+0x36>
	__asm__ volatile(
    73dc:	f385 8811 	msr	BASEPRI, r5
    73e0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    73e4:	f04f 30ff 	mov.w	r0, #4294967295
}
    73e8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    73ea:	4371      	muls	r1, r6
    73ec:	440b      	add	r3, r1
    73ee:	2201      	movs	r2, #1
    73f0:	641a      	str	r2, [r3, #64]	; 0x40
    73f2:	f385 8811 	msr	BASEPRI, r5
    73f6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    73fa:	6843      	ldr	r3, [r0, #4]
    73fc:	440b      	add	r3, r1
    73fe:	685b      	ldr	r3, [r3, #4]
    7400:	4798      	blx	r3
	return 0;
    7402:	2000      	movs	r0, #0
    7404:	e7f0      	b.n	73e8 <stop+0x34>

00007406 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7406:	2280      	movs	r2, #128	; 0x80
    7408:	f7ff bfd4 	b.w	73b4 <stop>

0000740c <async_start>:
{
    740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    740e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    7410:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    7412:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7414:	f04f 0520 	mov.w	r5, #32
    7418:	f3ef 8611 	mrs	r6, BASEPRI
    741c:	f385 8812 	msr	BASEPRI_MAX, r5
    7420:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7424:	250c      	movs	r5, #12
    7426:	4369      	muls	r1, r5
    7428:	440c      	add	r4, r1
    742a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    742c:	f005 0c07 	and.w	ip, r5, #7
    7430:	f1bc 0f01 	cmp.w	ip, #1
    7434:	d10b      	bne.n	744e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7436:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    7438:	f386 8811 	msr	BASEPRI, r6
    743c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    7440:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7444:	6843      	ldr	r3, [r0, #4]
    7446:	585b      	ldr	r3, [r3, r1]
    7448:	4798      	blx	r3
	return 0;
    744a:	2000      	movs	r0, #0
}
    744c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    744e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7452:	42af      	cmp	r7, r5
    7454:	f386 8811 	msr	BASEPRI, r6
    7458:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    745c:	bf0c      	ite	eq
    745e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    7462:	f04f 30ff 	movne.w	r0, #4294967295
    7466:	e7f1      	b.n	744c <async_start+0x40>

00007468 <api_start>:
{
    7468:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    746a:	2480      	movs	r4, #128	; 0x80
    746c:	9400      	str	r4, [sp, #0]
    746e:	f7ff ffcd 	bl	740c <async_start>
}
    7472:	b002      	add	sp, #8
    7474:	bd10      	pop	{r4, pc}

00007476 <api_blocking_start>:
}
    7476:	f06f 0085 	mvn.w	r0, #133	; 0x85
    747a:	4770      	bx	lr

0000747c <onoff_started_callback>:
{
    747c:	b410      	push	{r4}
	return &data->mgr[type];
    747e:	6900      	ldr	r0, [r0, #16]
    7480:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7482:	241c      	movs	r4, #28
    7484:	fb03 0004 	mla	r0, r3, r4, r0
    7488:	2100      	movs	r1, #0
}
    748a:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    748e:	4710      	bx	r2

00007490 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7490:	2000      	movs	r0, #0
    7492:	f000 ba93 	b.w	79bc <nrfx_clock_start>

00007496 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7496:	2000      	movs	r0, #0
    7498:	f000 bacc 	b.w	7a34 <nrfx_clock_stop>

0000749c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    749c:	6843      	ldr	r3, [r0, #4]
    749e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    74a0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    74a4:	600b      	str	r3, [r1, #0]
}
    74a6:	2000      	movs	r0, #0
    74a8:	4770      	bx	lr

000074aa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74aa:	6843      	ldr	r3, [r0, #4]
    74ac:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    74ae:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    74b2:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    74b6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    74ba:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    74be:	2000      	movs	r0, #0
    74c0:	4770      	bx	lr

000074c2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74c2:	6843      	ldr	r3, [r0, #4]
    74c4:	685b      	ldr	r3, [r3, #4]
}
    74c6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    74c8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    74cc:	4770      	bx	lr

000074ce <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74ce:	6843      	ldr	r3, [r0, #4]
    74d0:	685b      	ldr	r3, [r3, #4]
}
    74d2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    74d4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    74d8:	4770      	bx	lr

000074da <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74da:	6843      	ldr	r3, [r0, #4]
    74dc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    74de:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    74e2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    74e6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    74e8:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    74ec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    74f0:	2000      	movs	r0, #0
    74f2:	4770      	bx	lr

000074f4 <gpio_nrfx_manage_callback>:
{
    74f4:	b510      	push	{r4, lr}
	return port->data;
    74f6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    74f8:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    74fa:	b1f8      	cbz	r0, 753c <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    74fc:	4288      	cmp	r0, r1
    74fe:	d119      	bne.n	7534 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    7500:	689c      	ldr	r4, [r3, #8]
	return node->next;
    7502:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    7504:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    7506:	42a1      	cmp	r1, r4
    7508:	d100      	bne.n	750c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    750a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    750c:	2000      	movs	r0, #0
    750e:	6008      	str	r0, [r1, #0]
	if (set) {
    7510:	b12a      	cbz	r2, 751e <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    7512:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    7514:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    7516:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    7518:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    751a:	b902      	cbnz	r2, 751e <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    751c:	6099      	str	r1, [r3, #8]
	return 0;
    751e:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7520:	e010      	b.n	7544 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7522:	4281      	cmp	r1, r0
    7524:	d106      	bne.n	7534 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    7526:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    7528:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    752a:	6898      	ldr	r0, [r3, #8]
    752c:	4281      	cmp	r1, r0
    752e:	d1ed      	bne.n	750c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    7530:	609c      	str	r4, [r3, #8]
}
    7532:	e7eb      	b.n	750c <gpio_nrfx_manage_callback+0x18>
	return node->next;
    7534:	4604      	mov	r4, r0
    7536:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7538:	2800      	cmp	r0, #0
    753a:	d1f2      	bne.n	7522 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    753c:	2a00      	cmp	r2, #0
    753e:	d1e8      	bne.n	7512 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    7540:	f06f 0015 	mvn.w	r0, #21
}
    7544:	bd10      	pop	{r4, pc}

00007546 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    7546:	b908      	cbnz	r0, 754c <qspi_handler+0x6>
	dev_data->ready = true;
    7548:	2301      	movs	r3, #1
    754a:	700b      	strb	r3, [r1, #0]
}
    754c:	4770      	bx	lr

0000754e <qspi_rdsr.constprop.0.isra.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    754e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    7550:	23ff      	movs	r3, #255	; 0xff
    7552:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    7556:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    755a:	2100      	movs	r1, #0
	const struct qspi_buf sr_buf = {
    755c:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    755e:	2301      	movs	r3, #1
    7560:	e9cd 3102 	strd	r3, r1, [sp, #8]
    7564:	2305      	movs	r3, #5
    7566:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
    756a:	a803      	add	r0, sp, #12
	struct qspi_cmd cmd = {
    756c:	ab01      	add	r3, sp, #4
    756e:	9104      	str	r1, [sp, #16]
    7570:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    7572:	f7fb fa5d 	bl	2a30 <qspi_send_cmd.constprop.0>
	return (ret < 0) ? ret : sr;
    7576:	2800      	cmp	r0, #0
    7578:	bfa8      	it	ge
    757a:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    757e:	b007      	add	sp, #28
    7580:	f85d fb04 	ldr.w	pc, [sp], #4

00007584 <qspi_nor_write_protection_set.isra.0>:
static int qspi_nor_write_protection_set(const struct device *dev,
    7584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    7586:	2100      	movs	r1, #0
    7588:	4288      	cmp	r0, r1
    758a:	bf0c      	ite	eq
    758c:	2306      	moveq	r3, #6
    758e:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    7590:	a801      	add	r0, sp, #4
	struct qspi_cmd cmd = {
    7592:	e9cd 1101 	strd	r1, r1, [sp, #4]
    7596:	9103      	str	r1, [sp, #12]
    7598:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    759c:	f7fb fa48 	bl	2a30 <qspi_send_cmd.constprop.0>
		ret = -EIO;
    75a0:	2800      	cmp	r0, #0
}
    75a2:	bf18      	it	ne
    75a4:	f06f 0004 	mvnne.w	r0, #4
    75a8:	b005      	add	sp, #20
    75aa:	f85d fb04 	ldr.w	pc, [sp], #4

000075ae <is_regular_addr_valid>:
{
    75ae:	b538      	push	{r3, r4, r5, lr}
    75b0:	4605      	mov	r5, r0
    75b2:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    75b4:	f000 fa98 	bl	7ae8 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    75b8:	2d00      	cmp	r5, #0
    75ba:	db07      	blt.n	75cc <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    75bc:	42a8      	cmp	r0, r5
    75be:	d905      	bls.n	75cc <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    75c0:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    75c2:	4284      	cmp	r4, r0
    75c4:	bf8c      	ite	hi
    75c6:	2000      	movhi	r0, #0
    75c8:	2001      	movls	r0, #1
}
    75ca:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    75cc:	2000      	movs	r0, #0
    75ce:	e7fc      	b.n	75ca <is_regular_addr_valid+0x1c>

000075d0 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    75d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    75d4:	461c      	mov	r4, r3
    75d6:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    75d8:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
    75da:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    75dc:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    75de:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
    75e0:	6913      	ldr	r3, [r2, #16]
{
    75e2:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
    75e4:	aa01      	add	r2, sp, #4
    75e6:	4669      	mov	r1, sp
    75e8:	4798      	blx	r3

	while (layout_size--) {
    75ea:	9b01      	ldr	r3, [sp, #4]
    75ec:	1e5a      	subs	r2, r3, #1
    75ee:	9201      	str	r2, [sp, #4]
    75f0:	b923      	cbnz	r3, 75fc <flash_get_page_info+0x2c>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    75f2:	f06f 0015 	mvn.w	r0, #21
}
    75f6:	b002      	add	sp, #8
    75f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info->size = layout->pages_size;
    75fc:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    75fe:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    7600:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    7602:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    7604:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    7606:	b985      	cbnz	r5, 762a <flash_get_page_info+0x5a>
			index_jmp = index - info->index;
    7608:	eba8 0302 	sub.w	r3, r8, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    760c:	6806      	ldr	r6, [r0, #0]
    760e:	42b3      	cmp	r3, r6
    7610:	bf28      	it	cs
    7612:	4633      	movcs	r3, r6
		info->index += index_jmp;
    7614:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    7616:	fb03 1107 	mla	r1, r3, r7, r1
    761a:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    761c:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    761e:	6802      	ldr	r2, [r0, #0]
    7620:	429a      	cmp	r2, r3
    7622:	d806      	bhi.n	7632 <flash_get_page_info+0x62>
		layout++;
    7624:	3008      	adds	r0, #8
    7626:	9000      	str	r0, [sp, #0]
    7628:	e7df      	b.n	75ea <flash_get_page_info+0x1a>
			index_jmp = (offs - info->start_offset) / info->size;
    762a:	1a6b      	subs	r3, r5, r1
    762c:	fbb3 f3f7 	udiv	r3, r3, r7
    7630:	e7ec      	b.n	760c <flash_get_page_info+0x3c>
			return 0;
    7632:	2000      	movs	r0, #0
    7634:	e7df      	b.n	75f6 <flash_get_page_info+0x26>

00007636 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    7636:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    7638:	2200      	movs	r2, #0
    763a:	f7ff bfc9 	b.w	75d0 <flash_get_page_info>

0000763e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    763e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    7642:	6883      	ldr	r3, [r0, #8]
{
    7644:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    7646:	691b      	ldr	r3, [r3, #16]
{
    7648:	4688      	mov	r8, r1
    764a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    764c:	a901      	add	r1, sp, #4
    764e:	aa02      	add	r2, sp, #8
    7650:	4798      	blx	r3
	off_t off = 0;
    7652:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    7654:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    7656:	4625      	mov	r5, r4
    7658:	9b02      	ldr	r3, [sp, #8]
    765a:	42ab      	cmp	r3, r5
    765c:	d802      	bhi.n	7664 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    765e:	b006      	add	sp, #24
    7660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    7664:	9f01      	ldr	r7, [sp, #4]
    7666:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    766a:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    766c:	687b      	ldr	r3, [r7, #4]
    766e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    7670:	683a      	ldr	r2, [r7, #0]
    7672:	42b2      	cmp	r2, r6
    7674:	eb0a 0306 	add.w	r3, sl, r6
    7678:	d802      	bhi.n	7680 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    767a:	3501      	adds	r5, #1
    767c:	469a      	mov	sl, r3
    767e:	e7eb      	b.n	7658 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
    7680:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    7682:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    7684:	4649      	mov	r1, r9
    7686:	a803      	add	r0, sp, #12
    7688:	47c0      	blx	r8
    768a:	2800      	cmp	r0, #0
    768c:	d0e7      	beq.n	765e <flash_page_foreach+0x20>
			off += page_info.size;
    768e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    7690:	3601      	adds	r6, #1
			off += page_info.size;
    7692:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    7694:	e7ec      	b.n	7670 <flash_page_foreach+0x32>

00007696 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    7696:	6902      	ldr	r2, [r0, #16]
{
    7698:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    769a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    769e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    76a2:	2000      	movs	r0, #0
    76a4:	4770      	bx	lr

000076a6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    76a6:	6843      	ldr	r3, [r0, #4]
    76a8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    76aa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    76ae:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    76b2:	4770      	bx	lr

000076b4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    76b4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    76b6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    76b8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    76be:	b150      	cbz	r0, 76d6 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    76c0:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76c2:	2000      	movs	r0, #0
    76c4:	7812      	ldrb	r2, [r2, #0]
    76c6:	700a      	strb	r2, [r1, #0]
    76c8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    76cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76d0:	2201      	movs	r2, #1
    76d2:	601a      	str	r2, [r3, #0]
	return 0;
    76d4:	4770      	bx	lr
		return -1;
    76d6:	f04f 30ff 	mov.w	r0, #4294967295
}
    76da:	4770      	bx	lr

000076dc <is_tx_ready.isra.0>:
	return config->uarte_regs;
    76dc:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    76de:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76e0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    76e4:	b940      	cbnz	r0, 76f8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    76e6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    76e8:	079b      	lsls	r3, r3, #30
    76ea:	d406      	bmi.n	76fa <is_tx_ready.isra.0+0x1e>
    76ec:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    76f0:	3800      	subs	r0, #0
    76f2:	bf18      	it	ne
    76f4:	2001      	movne	r0, #1
    76f6:	4770      	bx	lr
    76f8:	2001      	movs	r0, #1
}
    76fa:	4770      	bx	lr

000076fc <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    76fc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    76fe:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7700:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7704:	05c9      	lsls	r1, r1, #23
    7706:	d518      	bpl.n	773a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7708:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    770c:	b1a9      	cbz	r1, 773a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    770e:	f04f 0020 	mov.w	r0, #32
    7712:	f3ef 8111 	mrs	r1, BASEPRI
    7716:	f380 8812 	msr	BASEPRI_MAX, r0
    771a:	f3bf 8f6f 	isb	sy
    771e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7722:	b130      	cbz	r0, 7732 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7724:	2000      	movs	r0, #0
    7726:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    772a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    772e:	2001      	movs	r0, #1
    7730:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    7732:	f381 8811 	msr	BASEPRI, r1
    7736:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    773a:	6852      	ldr	r2, [r2, #4]
    773c:	06d2      	lsls	r2, r2, #27
    773e:	d515      	bpl.n	776c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    7740:	f04f 0120 	mov.w	r1, #32
    7744:	f3ef 8211 	mrs	r2, BASEPRI
    7748:	f381 8812 	msr	BASEPRI_MAX, r1
    774c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7750:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7754:	b111      	cbz	r1, 775c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7756:	2100      	movs	r1, #0
    7758:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    775c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7760:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7764:	f382 8811 	msr	BASEPRI, r2
    7768:	f3bf 8f6f 	isb	sy
}
    776c:	4770      	bx	lr

0000776e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    776e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7772:	009b      	lsls	r3, r3, #2
    7774:	b29b      	uxth	r3, r3
    7776:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    777a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    777e:	2200      	movs	r2, #0
    7780:	601a      	str	r2, [r3, #0]
    7782:	681b      	ldr	r3, [r3, #0]
}
    7784:	4770      	bx	lr

00007786 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7786:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7788:	6843      	ldr	r3, [r0, #4]
    778a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    778c:	7a05      	ldrb	r5, [r0, #8]
    778e:	6844      	ldr	r4, [r0, #4]
    7790:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    7794:	42a3      	cmp	r3, r4
    7796:	d302      	bcc.n	779e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    7798:	f06f 0001 	mvn.w	r0, #1
}
    779c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    779e:	795c      	ldrb	r4, [r3, #5]
    77a0:	428c      	cmp	r4, r1
    77a2:	d001      	beq.n	77a8 <pinctrl_lookup_state+0x22>
		(*state)++;
    77a4:	3308      	adds	r3, #8
    77a6:	e7f0      	b.n	778a <pinctrl_lookup_state+0x4>
			return 0;
    77a8:	2000      	movs	r0, #0
    77aa:	e7f7      	b.n	779c <pinctrl_lookup_state+0x16>

000077ac <fprotect_set_permission>:

static int fprotect_set_permission(uint32_t start, size_t length,
				   size_t permission)
{
    77ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    77ae:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(nrf_ficr_codepagesize_get(NRF_FICR) ==
			CONFIG_FPROTECT_BLOCK_SIZE);

	uint32_t region_idx;
	int result = find_free_region(&region_idx);
    77b0:	a801      	add	r0, sp, #4
{
    77b2:	460c      	mov	r4, r1
    77b4:	4616      	mov	r6, r2
	int result = find_free_region(&region_idx);
    77b6:	f7fc f96f 	bl	3a98 <find_free_region>

	if (result != 0) {
    77ba:	bb70      	cbnz	r0, 781a <fprotect_set_permission+0x6e>
    77bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    77c0:	6919      	ldr	r1, [r3, #16]
		return result;
	}

	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77c2:	fbb5 f2f1 	udiv	r2, r5, r1
    77c6:	fb01 5212 	mls	r2, r1, r2, r5
    77ca:	bb42      	cbnz	r2, 781e <fprotect_set_permission+0x72>
    77cc:	6919      	ldr	r1, [r3, #16]
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77ce:	fbb4 f2f1 	udiv	r2, r4, r1
    77d2:	fb01 4212 	mls	r2, r1, r2, r4
	if (start % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77d6:	bb12      	cbnz	r2, 781e <fprotect_set_permission+0x72>
    77d8:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    77da:	695b      	ldr	r3, [r3, #20]
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    77dc:	4353      	muls	r3, r2
	    length % nrf_ficr_codepagesize_get(NRF_FICR) != 0 ||
    77de:	42a3      	cmp	r3, r4
    77e0:	d31d      	bcc.n	781e <fprotect_set_permission+0x72>
	    length > NRF_ACL_REGION_SIZE_MAX || length == 0) {
    77e2:	b1e4      	cbz	r4, 781e <fprotect_set_permission+0x72>
		return -EINVAL;
	}

	nrf_acl_region_set(NRF_ACL, region_idx, start, length, permission);
    77e4:	9b01      	ldr	r3, [sp, #4]
    p_reg->ACL[region_id].ADDR = address;
    77e6:	011b      	lsls	r3, r3, #4
    77e8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    77ec:	f501 31f0 	add.w	r1, r1, #122880	; 0x1e000
    77f0:	f8c1 5800 	str.w	r5, [r1, #2048]	; 0x800
    p_reg->ACL[region_id].SIZE = size;
    77f4:	f8c1 4804 	str.w	r4, [r1, #2052]	; 0x804
    p_reg->ACL[region_id].PERM = perm;
    77f8:	f8c1 6808 	str.w	r6, [r1, #2056]	; 0x808
    return (uint32_t)p_reg->ACL[region_id].ADDR;
    77fc:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800

	if ((nrf_acl_region_address_get(NRF_ACL, region_idx) != start)
    7800:	4295      	cmp	r5, r2
    7802:	d10f      	bne.n	7824 <fprotect_set_permission+0x78>
    return (size_t)p_reg->ACL[region_id].SIZE;
    7804:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
		|| (nrf_acl_region_size_get(NRF_ACL, region_idx) != length)
    7808:	4294      	cmp	r4, r2
    780a:	d10b      	bne.n	7824 <fprotect_set_permission+0x78>
    return (nrf_acl_perm_t)p_reg->ACL[region_id].PERM;
    780c:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
		|| (nrf_acl_region_perm_get(NRF_ACL, region_idx) != permission)) {
    7810:	b2db      	uxtb	r3, r3
		return -EFAULT;
    7812:	42b3      	cmp	r3, r6
    7814:	bf18      	it	ne
    7816:	f06f 000d 	mvnne.w	r0, #13
	}

	return 0;
}
    781a:	b002      	add	sp, #8
    781c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    781e:	f06f 0015 	mvn.w	r0, #21
    7822:	e7fa      	b.n	781a <fprotect_set_permission+0x6e>
		return -EFAULT;
    7824:	f06f 000d 	mvn.w	r0, #13
    7828:	e7f7      	b.n	781a <fprotect_set_permission+0x6e>

0000782a <fprotect_area>:
	return 0;
}

int fprotect_area(uint32_t start, size_t length)
{
	return fprotect_set_permission(start, length,
    782a:	2202      	movs	r2, #2
    782c:	f7ff bfbe 	b.w	77ac <fprotect_set_permission>

00007830 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7830:	f7fd bca0 	b.w	5174 <nrf_cc3xx_platform_init_no_rng>

00007834 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7834:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7836:	f7fa f95f 	bl	1af8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    783a:	f7ff fd40 	bl	72be <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    783e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7842:	f7fd bc97 	b.w	5174 <nrf_cc3xx_platform_init_no_rng>

00007846 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7846:	6880      	ldr	r0, [r0, #8]
    7848:	3818      	subs	r0, #24
    784a:	f020 0007 	bic.w	r0, r0, #7
}
    784e:	3810      	subs	r0, #16
    7850:	4770      	bx	lr

00007852 <boot_magic_compatible_check>:
    switch (tbl_val) {
    7852:	2804      	cmp	r0, #4
    7854:	d009      	beq.n	786a <boot_magic_compatible_check+0x18>
    7856:	2805      	cmp	r0, #5
    7858:	d103      	bne.n	7862 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    785a:	1e48      	subs	r0, r1, #1
    785c:	bf18      	it	ne
    785e:	2001      	movne	r0, #1
    7860:	4770      	bx	lr
        return tbl_val == val;
    7862:	1a43      	subs	r3, r0, r1
    7864:	4258      	negs	r0, r3
    7866:	4158      	adcs	r0, r3
    7868:	4770      	bx	lr
    switch (tbl_val) {
    786a:	2001      	movs	r0, #1
}
    786c:	4770      	bx	lr

0000786e <bootutil_buffer_is_erased>:
{
    786e:	b538      	push	{r3, r4, r5, lr}
    7870:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    7872:	460c      	mov	r4, r1
    7874:	b161      	cbz	r1, 7890 <bootutil_buffer_is_erased+0x22>
    7876:	b15a      	cbz	r2, 7890 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    7878:	f7ff fcf4 	bl	7264 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    787c:	4425      	add	r5, r4
    787e:	4621      	mov	r1, r4
        if (u8b[i] != erased_val) {
    7880:	f811 3b01 	ldrb.w	r3, [r1], #1
    7884:	4283      	cmp	r3, r0
    7886:	d103      	bne.n	7890 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    7888:	42a9      	cmp	r1, r5
    788a:	d1f9      	bne.n	7880 <bootutil_buffer_is_erased+0x12>
    return true;
    788c:	2001      	movs	r0, #1
}
    788e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    7890:	2000      	movs	r0, #0
    7892:	e7fc      	b.n	788e <bootutil_buffer_is_erased+0x20>

00007894 <boot_read_flag>:
{
    7894:	b538      	push	{r3, r4, r5, lr}
    7896:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    7898:	2301      	movs	r3, #1
{
    789a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    789c:	4622      	mov	r2, r4
{
    789e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    78a0:	f7ff fc99 	bl	71d6 <flash_area_read>
    if (rc < 0) {
    78a4:	2800      	cmp	r0, #0
    78a6:	db0f      	blt.n	78c8 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    78a8:	2201      	movs	r2, #1
    78aa:	4621      	mov	r1, r4
    78ac:	4628      	mov	r0, r5
    78ae:	f7ff ffde 	bl	786e <bootutil_buffer_is_erased>
    78b2:	b938      	cbnz	r0, 78c4 <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    78b4:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    78b6:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    78b8:	bf14      	ite	ne
    78ba:	2302      	movne	r3, #2
    78bc:	2301      	moveq	r3, #1
    78be:	7023      	strb	r3, [r4, #0]
    78c0:	2000      	movs	r0, #0
}
    78c2:	bd38      	pop	{r3, r4, r5, pc}
    78c4:	2303      	movs	r3, #3
    78c6:	e7fa      	b.n	78be <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    78c8:	2001      	movs	r0, #1
    78ca:	e7fa      	b.n	78c2 <boot_read_flag+0x2e>

000078cc <boot_write_trailer>:
{
    78cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    78d0:	461d      	mov	r5, r3
    78d2:	4606      	mov	r6, r0
    78d4:	460f      	mov	r7, r1
    78d6:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    78d8:	f7ff fcbd 	bl	7256 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    78dc:	1e6c      	subs	r4, r5, #1
    78de:	4404      	add	r4, r0
    78e0:	4240      	negs	r0, r0
    78e2:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
    78e4:	2c08      	cmp	r4, #8
    78e6:	d81a      	bhi.n	791e <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    78e8:	4630      	mov	r0, r6
    78ea:	f7ff fcbb 	bl	7264 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    78ee:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    78f0:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    78f2:	4641      	mov	r1, r8
    78f4:	4668      	mov	r0, sp
    78f6:	f7ff fd2a 	bl	734e <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    78fa:	1b62      	subs	r2, r4, r5
    78fc:	4649      	mov	r1, r9
    78fe:	eb0d 0005 	add.w	r0, sp, r5
    7902:	f7ff fd2f 	bl	7364 <memset>
    rc = flash_area_write(fap, off, buf, align);
    7906:	4623      	mov	r3, r4
    7908:	466a      	mov	r2, sp
    790a:	4639      	mov	r1, r7
    790c:	4630      	mov	r0, r6
    790e:	f7ff fc77 	bl	7200 <flash_area_write>
    if (rc != 0) {
    7912:	3800      	subs	r0, #0
    7914:	bf18      	it	ne
    7916:	2001      	movne	r0, #1
}
    7918:	b003      	add	sp, #12
    791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    791e:	f04f 30ff 	mov.w	r0, #4294967295
    7922:	e7f9      	b.n	7918 <boot_write_trailer+0x4c>

00007924 <boot_write_trailer_flag>:
{
    7924:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    7926:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    7928:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    792c:	aa01      	add	r2, sp, #4
    792e:	f7ff ffcd 	bl	78cc <boot_write_trailer>
}
    7932:	b003      	add	sp, #12
    7934:	f85d fb04 	ldr.w	pc, [sp], #4

00007938 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7938:	6881      	ldr	r1, [r0, #8]
    793a:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    793c:	2201      	movs	r2, #1
    793e:	f021 0107 	bic.w	r1, r1, #7
    7942:	f7ff bfef 	b.w	7924 <boot_write_trailer_flag>

00007946 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7946:	6882      	ldr	r2, [r0, #8]
    7948:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    794a:	f022 0207 	bic.w	r2, r2, #7
    794e:	f7ff bfa1 	b.w	7894 <boot_read_flag>

00007952 <boot_read_swap_state_by_id>:
{
    7952:	b513      	push	{r0, r1, r4, lr}
    7954:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    7956:	b2c0      	uxtb	r0, r0
    7958:	a901      	add	r1, sp, #4
    795a:	f7fa f875 	bl	1a48 <flash_area_open>
    if (rc != 0) {
    795e:	b950      	cbnz	r0, 7976 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    7960:	4621      	mov	r1, r4
    7962:	9801      	ldr	r0, [sp, #4]
    7964:	f7fc f8e0 	bl	3b28 <boot_read_swap_state>
    7968:	4604      	mov	r4, r0
    flash_area_close(fap);
    796a:	9801      	ldr	r0, [sp, #4]
    796c:	f7ff fc32 	bl	71d4 <flash_area_close>
}
    7970:	4620      	mov	r0, r4
    7972:	b002      	add	sp, #8
    7974:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    7976:	2401      	movs	r4, #1
    7978:	e7fa      	b.n	7970 <boot_read_swap_state_by_id+0x1e>

0000797a <boot_write_swap_info>:
{
    797a:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    797c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
    7980:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    7982:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    7986:	f7ff ff5e 	bl	7846 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    798a:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    798c:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    798e:	f10d 0207 	add.w	r2, sp, #7
    7992:	4620      	mov	r0, r4
    7994:	f7ff ff9a 	bl	78cc <boot_write_trailer>
}
    7998:	b002      	add	sp, #8
    799a:	bd10      	pop	{r4, pc}

0000799c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    799c:	4700      	bx	r0

0000799e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    799e:	f000 b8e6 	b.w	7b6e <z_impl_k_busy_wait>

000079a2 <nrfx_clock_enable>:
{
    79a2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    79a4:	2000      	movs	r0, #0
    79a6:	f7fa f91d 	bl	1be4 <arch_irq_is_enabled>
    79aa:	b908      	cbnz	r0, 79b0 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    79ac:	f7fa f8f8 	bl	1ba0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    79b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    79b4:	2200      	movs	r2, #0
    79b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    79ba:	bd08      	pop	{r3, pc}

000079bc <nrfx_clock_start>:
{
    79bc:	b508      	push	{r3, lr}
    switch (domain)
    79be:	b110      	cbz	r0, 79c6 <nrfx_clock_start+0xa>
    79c0:	2801      	cmp	r0, #1
    79c2:	d02c      	beq.n	7a1e <nrfx_clock_start+0x62>
}
    79c4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    79c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    79ca:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    79ce:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    79d2:	03c8      	lsls	r0, r1, #15
    79d4:	d40b      	bmi.n	79ee <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    79d6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    79da:	07d9      	lsls	r1, r3, #31
    79dc:	d50f      	bpl.n	79fe <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    79de:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    79e2:	079b      	lsls	r3, r3, #30
    79e4:	d408      	bmi.n	79f8 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    79e6:	2302      	movs	r3, #2
    79e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    79ec:	e7ea      	b.n	79c4 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    79ee:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    79f2:	2b01      	cmp	r3, #1
    79f4:	d004      	beq.n	7a00 <nrfx_clock_start+0x44>
    79f6:	b113      	cbz	r3, 79fe <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    79f8:	2000      	movs	r0, #0
    79fa:	f7fc faaf 	bl	3f5c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    79fe:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    7a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7a04:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a08:	2300      	movs	r3, #0
    7a0a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    7a0e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    7a12:	2302      	movs	r3, #2
    7a14:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a18:	2301      	movs	r3, #1
    7a1a:	6093      	str	r3, [r2, #8]
}
    7a1c:	e7d2      	b.n	79c4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7a22:	2200      	movs	r2, #0
    7a24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7a28:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    7a2c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a30:	6018      	str	r0, [r3, #0]
}
    7a32:	e7c7      	b.n	79c4 <nrfx_clock_start+0x8>

00007a34 <nrfx_clock_stop>:
    clock_stop(domain);
    7a34:	f7fc ba92 	b.w	3f5c <clock_stop>

00007a38 <nrf_gpio_reconfigure>:
{
    7a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7a3a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7a3c:	a801      	add	r0, sp, #4
{
    7a3e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    7a42:	4616      	mov	r6, r2
    7a44:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7a46:	f7fc fb31 	bl	40ac <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7a4a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7a4c:	f1b6 0c00 	subs.w	ip, r6, #0
    7a50:	bf18      	it	ne
    7a52:	f04f 0c01 	movne.w	ip, #1
    7a56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7a5a:	1e0b      	subs	r3, r1, #0
    7a5c:	bf18      	it	ne
    7a5e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7a60:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7a62:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7a66:	bf14      	ite	ne
    7a68:	f04f 0c0c 	movne.w	ip, #12
    7a6c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7a70:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7a72:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7a76:	bf14      	ite	ne
    7a78:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    7a7c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7a80:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7a82:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7a86:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7a8a:	bf14      	ite	ne
    7a8c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    7a90:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7a94:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    7a98:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7a9c:	b101      	cbz	r1, 7aa0 <nrf_gpio_reconfigure+0x68>
    7a9e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7aa0:	b10e      	cbz	r6, 7aa6 <nrf_gpio_reconfigure+0x6e>
    7aa2:	7836      	ldrb	r6, [r6, #0]
    7aa4:	0076      	lsls	r6, r6, #1
    7aa6:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7aa8:	b10d      	cbz	r5, 7aae <nrf_gpio_reconfigure+0x76>
    7aaa:	782d      	ldrb	r5, [r5, #0]
    7aac:	00ad      	lsls	r5, r5, #2
    7aae:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7ab0:	b10c      	cbz	r4, 7ab6 <nrf_gpio_reconfigure+0x7e>
    7ab2:	7824      	ldrb	r4, [r4, #0]
    7ab4:	0224      	lsls	r4, r4, #8
    7ab6:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7ab8:	b10f      	cbz	r7, 7abe <nrf_gpio_reconfigure+0x86>
    7aba:	783f      	ldrb	r7, [r7, #0]
    7abc:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7abe:	430c      	orrs	r4, r1
    7ac0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    7ac2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7ac6:	b003      	add	sp, #12
    7ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007aca <nrf_gpio_cfg_sense_set>:
{
    7aca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7acc:	f10d 030f 	add.w	r3, sp, #15
    7ad0:	9301      	str	r3, [sp, #4]
    7ad2:	2300      	movs	r3, #0
{
    7ad4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7ad8:	9300      	str	r3, [sp, #0]
    7ada:	461a      	mov	r2, r3
    7adc:	4619      	mov	r1, r3
    7ade:	f7ff ffab 	bl	7a38 <nrf_gpio_reconfigure>
}
    7ae2:	b005      	add	sp, #20
    7ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00007ae8 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
    7ae8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7aec:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
    7aee:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    7af0:	4350      	muls	r0, r2
    7af2:	4770      	bx	lr

00007af4 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    7af4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7af8:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    7afa:	4770      	bx	lr

00007afc <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    7afc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7b00:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    7b02:	4770      	bx	lr

00007b04 <nrf_gpio_cfg_default>:
{
    7b04:	b507      	push	{r0, r1, r2, lr}
    7b06:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7b08:	a801      	add	r0, sp, #4
    7b0a:	f7fc fe79 	bl	4800 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7b0e:	9b01      	ldr	r3, [sp, #4]
    7b10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7b14:	2202      	movs	r2, #2
    7b16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    7b1a:	b003      	add	sp, #12
    7b1c:	f85d fb04 	ldr.w	pc, [sp], #4

00007b20 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    7b20:	2302      	movs	r3, #2
    7b22:	f7fc be7b 	b.w	481c <qspi_xfer>

00007b26 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    7b26:	2303      	movs	r3, #3
    7b28:	f7fc be78 	b.w	481c <qspi_xfer>

00007b2c <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    7b2c:	2100      	movs	r1, #0
    7b2e:	2002      	movs	r0, #2
    7b30:	f7fd b902 	b.w	4d38 <nrfx_qspi_erase>

00007b34 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7b34:	f7fd b966 	b.w	4e04 <_DoInit>

00007b38 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7b38:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7b3a:	f7ff fffb 	bl	7b34 <SEGGER_RTT_Init>

	return 0;
}
    7b3e:	2000      	movs	r0, #0
    7b40:	bd08      	pop	{r3, pc}

00007b42 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    7b42:	4770      	bx	lr

00007b44 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7b44:	b140      	cbz	r0, 7b58 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7b46:	68c3      	ldr	r3, [r0, #12]
    7b48:	7858      	ldrb	r0, [r3, #1]
    7b4a:	f010 0001 	ands.w	r0, r0, #1
    7b4e:	bf1e      	ittt	ne
    7b50:	7818      	ldrbne	r0, [r3, #0]
    7b52:	fab0 f080 	clzne	r0, r0
    7b56:	0940      	lsrne	r0, r0, #5
}
    7b58:	4770      	bx	lr

00007b5a <z_early_memset>:
	(void) memset(dst, c, n);
    7b5a:	f7ff bc03 	b.w	7364 <memset>

00007b5e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7b5e:	f7ff bbf6 	b.w	734e <memcpy>

00007b62 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7b62:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    7b66:	3800      	subs	r0, #0
    7b68:	bf18      	it	ne
    7b6a:	2001      	movne	r0, #1
    7b6c:	4770      	bx	lr

00007b6e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7b6e:	b108      	cbz	r0, 7b74 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7b70:	f7fa bc40 	b.w	23f4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7b74:	4770      	bx	lr

00007b76 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7b76:	4770      	bx	lr

00007b78 <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    7b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b7c:	9f06      	ldr	r7, [sp, #24]
    7b7e:	4604      	mov	r4, r0
    7b80:	4615      	mov	r5, r2
    7b82:	461e      	mov	r6, r3
    7b84:	f7fd fcc8 	bl	5518 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    7b88:	b938      	cbnz	r0, 7b9a <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    7b8a:	463b      	mov	r3, r7
    7b8c:	4632      	mov	r2, r6
    7b8e:	4629      	mov	r1, r5
    7b90:	4620      	mov	r0, r4
    7b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b96:	f7fd bce5 	b.w	5564 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    7b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b9e <PkaInitAndMutexLock>:
    7b9e:	460a      	mov	r2, r1
    7ba0:	2100      	movs	r1, #0
    7ba2:	f7fd bf67 	b.w	5a74 <PkaInitPka>

00007ba6 <SaSi_PalMemCopy>:
    7ba6:	f7ff bbd2 	b.w	734e <memcpy>

00007baa <SaSi_PalMemSet>:
    7baa:	f7ff bbdb 	b.w	7364 <memset>

00007bae <SaSi_PalMemSetZero>:
    7bae:	460a      	mov	r2, r1
    7bb0:	2100      	movs	r1, #0
    7bb2:	f7ff bbd7 	b.w	7364 <memset>

00007bb6 <CRYS_COMMON_ReverseMemcpy32>:
    7bb6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    7bba:	3804      	subs	r0, #4
    7bbc:	428a      	cmp	r2, r1
    7bbe:	d101      	bne.n	7bc4 <CRYS_COMMON_ReverseMemcpy32+0xe>
    7bc0:	2000      	movs	r0, #0
    7bc2:	4770      	bx	lr
    7bc4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    7bc8:	ba1b      	rev	r3, r3
    7bca:	f840 3f04 	str.w	r3, [r0, #4]!
    7bce:	e7f5      	b.n	7bbc <CRYS_COMMON_ReverseMemcpy32+0x6>
